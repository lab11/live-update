TranslationUnitDecl 0x556d38f8a928 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x556d38f8aea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x556d38f8abc0 '__int128'
|-TypedefDecl 0x556d38f8af10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x556d38f8abe0 'unsigned __int128'
|-TypedefDecl 0x556d38f8b1e8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x556d38f8aff0 'struct __NSConstantString_tag'
|   `-Record 0x556d38f8af68 '__NSConstantString_tag'
|-TypedefDecl 0x556d38f8b280 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x556d38f8b240 'char *'
|   `-BuiltinType 0x556d38f8a9c0 'char'
|-TypedefDecl 0x556d38f8b548 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x556d38f8b4f0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x556d38f8b360 'struct __va_list_tag'
|     `-Record 0x556d38f8b2d8 '__va_list_tag'
|-TypedefDecl 0x556d38fd74e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x556d38f8aa40 'long'
|-TypedefDecl 0x556d38fd7550 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x556d38f8aae0 'unsigned long'
|-TypedefDecl 0x556d38fd75c0 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x556d38f8aa20 'int'
|-RecordDecl 0x556d38fd7618 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x556d38fd7710 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x556d38fd7758 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x556d38fd76d8 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x556d38fd77f8 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x556d38fd7840 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x556d38fd77c0 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x556d38fd78e0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x556d38fd7890 'struct max_align_t' sugar
|   `-RecordType 0x556d38fd76a0 'max_align_t'
|     `-Record 0x556d38fd7618 ''
|-TypedefDecl 0x556d38fd7968 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x556d38f8a9e0 'signed char'
|-TypedefDecl 0x556d38fd79d8 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x556d38f8aa00 'short'
|-TypedefDecl 0x556d38fd7a48 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x556d38f8aa20 'int'
|-TypedefDecl 0x556d38fd7ab8 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x556d38f8aa40 'long'
|-TypedefDecl 0x556d38fd7b28 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x556d38f8a9e0 'signed char'
|-TypedefDecl 0x556d38fd7b98 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x556d38f8aa00 'short'
|-TypedefDecl 0x556d38fd7c08 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x556d38f8aa20 'int'
|-TypedefDecl 0x556d38fd7c78 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x556d38f8aa40 'long'
|-TypedefDecl 0x556d38fd7ce8 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x556d38f8a9e0 'signed char'
|-TypedefDecl 0x556d38fd7d58 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x556d38f8aa00 'short'
|-TypedefDecl 0x556d38fd7dc8 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x556d38f8aa20 'int'
|-TypedefDecl 0x556d38fd7e38 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x556d38f8aa40 'long'
|-TypedefDecl 0x556d38fd7ea8 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x556d38f8aa80 'unsigned char'
|-TypedefDecl 0x556d38fd7f18 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x556d38f8aaa0 'unsigned short'
|-TypedefDecl 0x556d38fd7f88 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x556d38f8aac0 'unsigned int'
|-TypedefDecl 0x556d38fd7ff8 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x556d38f8aae0 'unsigned long'
|-TypedefDecl 0x556d38fd8068 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x556d38f8aa80 'unsigned char'
|-TypedefDecl 0x556d38fd80d8 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x556d38f8aaa0 'unsigned short'
|-TypedefDecl 0x556d38fd8148 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x556d38f8aac0 'unsigned int'
|-TypedefDecl 0x556d38fd81b8 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x556d38f8aae0 'unsigned long'
|-TypedefDecl 0x556d38fd8228 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x556d38f8aa80 'unsigned char'
|-TypedefDecl 0x556d38fd8298 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x556d38f8aaa0 'unsigned short'
|-TypedefDecl 0x556d38fd8308 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x556d38f8aac0 'unsigned int'
|-TypedefDecl 0x556d38fd8378 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x556d38f8aae0 'unsigned long'
|-TypedefDecl 0x556d38fd83e8 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x556d38f8aa40 'long'
|-TypedefDecl 0x556d38fd8458 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x556d38f8aae0 'unsigned long'
|-TypedefDecl 0x556d38ffc480 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x556d38f8a9e0 'signed char'
|-TypedefDecl 0x556d38ffc4f0 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x556d38f8aa00 'short'
|-TypedefDecl 0x556d38ffc560 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x556d38f8aa20 'int'
|-TypedefDecl 0x556d38ffc5d0 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x556d38f8aa60 'long long'
|-TypedefDecl 0x556d38ffc640 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x556d38f8aa80 'unsigned char'
|-TypedefDecl 0x556d38ffc6b0 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x556d38f8aaa0 'unsigned short'
|-TypedefDecl 0x556d38ffc720 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x556d38f8aac0 'unsigned int'
|-TypedefDecl 0x556d38ffc790 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x556d38f8ab00 'unsigned long long'
|-TypedefDecl 0x556d38ffc800 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x556d38f8aae0 'unsigned long'
|-TypedefDecl 0x556d38ffc9c0 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x556d38f8aa20 'int'
|-TypedefDecl 0x556d38ffca50 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x556d38ffca20 'atomic_t' sugar
|   |-Typedef 0x556d38ffc9c0 'atomic_t'
|   `-BuiltinType 0x556d38f8aa20 'int'
|-FunctionDecl 0x556d38ffcdb8 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x556d38ffcb78 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x556d38ffcc10 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x556d38ffcc80 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x556d38ffd070 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x556d38ffcee8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x556d38ffcf58 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x556d38ffd258 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x556d38ffd158 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x556d38ffd1c8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x556d39015c80 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x556d38ffd348 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x556d39015df0 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x556d39015d68 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x556d39016010 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x556d39015f08 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x556d390161f8 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x556d390160f8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x556d39016168 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x556d39016370 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x556d390162e8 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x556d39016558 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x556d39016458 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x556d390164c8 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x556d39016748 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x556d39016648 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x556d390166b8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x556d39016938 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x556d39016838 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x556d390168a8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x556d39016b28 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x556d39016a28 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x556d39016a98 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x556d3901f9f0 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x556d3901f868 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x556d3901f8e0 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x556d39020168 <line:352:1, line:356:1>
| | |-DeclStmt 0x556d3901fdf0 <line:353:2, col:57>
| | | `-VarDecl 0x556d3901fab0 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x556d3901fdc0 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x556d3901fda8 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x556d3901fb10 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x556d39016010 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x556d3901fd30 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x556d3901fd08 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x556d3901fcf0 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x556d3901fb60 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x556d3901fb38 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x556d3901f868 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x556d3901fcd0 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x556d3901fca8 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x556d3901fc90 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x556d3901fc78 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x556d3901fba8 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x556d3901fb80 <line:353:52> 'int' lvalue ParmVar 0x556d3901f8e0 'bit' 'int'
| | |             `-ParenExpr 0x556d3901fc58 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x556d3901fc30 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x556d3901fbd8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x556d3901fc18 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x556d3901fbf8 <col:45> 'int' 8
| | `-ReturnStmt 0x556d39020128 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x556d39020110 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x556d390200e8 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x556d390200a8 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x556d39020080 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x556d3901fe08 <col:10> 'int' 1
| |       |   `-ParenExpr 0x556d39020060 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x556d39020038 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x556d39020020 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x556d3901fe28 <col:15> 'atomic_val_t':'int' lvalue Var 0x556d3901fab0 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x556d39020000 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x556d3901ffd8 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x556d3901ffc0 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x556d3901ffa8 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x556d3901fe50 <col:23> 'int' lvalue ParmVar 0x556d3901f8e0 'bit' 'int'
| |       |           `-ParenExpr 0x556d3901ff88 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x556d3901ff60 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x556d3901ff08 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x556d3901fee0 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x556d3901fe88 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x556d3901fec8 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x556d3901fea8 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x556d3901ff48 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x556d3901ff28 <col:44> 'int' 1
| |       `-IntegerLiteral 0x556d390200c8 <col:53> 'int' 0
| `-FullComment 0x556d39108230 <line:341:3, line:349:55>
|   |-ParagraphComment 0x556d39104d10 <line:341:3>
|   | `-TextComment 0x556d39104ce0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39104d30 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x556d39104d90 <col:10, col:32>
|   |   `-TextComment 0x556d39104d60 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x556d39104f00 <line:343:3, line:344:66>
|   | |-TextComment 0x556d39104db0 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x556d39104e00 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x556d39104e20 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x556d39104e70 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x556d39104e90 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x556d39104eb0 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x556d39104f50 <line:346:3>
|   | `-TextComment 0x556d39104f20 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39104f70 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x556d39105020 <line:346:17, line:347:3>
|   |   |-TextComment 0x556d39104fd0 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x556d39104ff0 <line:347:3> Text=" "
|   |-ParamCommandComment 0x556d39105040 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x556d39108100 <col:14, col:43>
|   |   `-TextComment 0x556d391080d0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x556d39108150 <line:349:3>
|   | `-TextComment 0x556d39108120 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39108170 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x556d391081d0 <col:11, col:55>
|       `-TextComment 0x556d391081a0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x556d39020320 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x556d39020198 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x556d39020210 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x556d390210e8 <line:370:1, line:377:1>
| | |-DeclStmt 0x556d39020720 <line:371:2, col:38>
| | | `-VarDecl 0x556d390203e0 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x556d39020700 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x556d390206d8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x556d39020440 <col:27> 'int' 1
| | |       `-ParenExpr 0x556d390206b8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x556d39020690 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x556d39020678 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x556d39020520 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x556d39020508 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x556d390204e8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x556d39020480 <line:371:34> 'int' lvalue ParmVar 0x556d39020210 'bit' 'int'
| | |           `-ParenExpr 0x556d39020658 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x556d39020630 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x556d390205d8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x556d390205b0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x556d39020558 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x556d39020598 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x556d39020578 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x556d39020618 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x556d390205f8 <col:63> 'int' 1
| | |-DeclStmt 0x556d390207a8 <line:372:2, col:18>
| | | `-VarDecl 0x556d39020748 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x556d39020f58 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x556d390207c0 <col:2> 'atomic_val_t':'int' lvalue Var 0x556d39020748 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x556d39020f20 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x556d39020f08 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x556d39020c10 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x556d39016938 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x556d39020e30 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x556d39020e08 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x556d39020df0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x556d39020c60 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x556d39020c38 <line:374:31> 'atomic_t *' lvalue ParmVar 0x556d39020198 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x556d39020dd0 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x556d39020da8 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x556d39020d90 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x556d39020d78 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x556d39020ca8 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x556d39020c80 <line:374:39> 'int' lvalue ParmVar 0x556d39020210 'bit' 'int'
| | |   |       `-ParenExpr 0x556d39020d58 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x556d39020d30 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x556d39020cd8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x556d39020d18 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x556d39020cf8 <col:45> 'int' 8
| | |   `-UnaryOperator 0x556d39020e90 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~'
| | |     `-ImplicitCastExpr 0x556d39020e78 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x556d39020e50 <col:46> 'atomic_val_t':'int' lvalue Var 0x556d390203e0 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x556d390210a8 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x556d39021090 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x556d39021068 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x556d39021028 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x556d39021000 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x556d39020fd0 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x556d39020f80 <col:10> 'atomic_val_t':'int' lvalue Var 0x556d39020748 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x556d39020fe8 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x556d39020fa8 <col:16> 'atomic_val_t':'int' lvalue Var 0x556d390203e0 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x556d39021048 <col:25> 'int' 0
| `-FullComment 0x556d391087c0 <line:359:3, line:367:55>
|   |-ParagraphComment 0x556d391082d0 <line:359:3>
|   | `-TextComment 0x556d391082a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391082f0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d39108350 <col:10, col:42>
|   |   `-TextComment 0x556d39108320 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x556d391084c0 <line:361:3, line:362:66>
|   | |-TextComment 0x556d39108370 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x556d391083c0 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x556d391083e0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x556d39108430 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x556d39108450 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x556d39108470 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x556d39108510 <line:364:3>
|   | `-TextComment 0x556d391084e0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39108530 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x556d391085e0 <line:364:17, line:365:3>
|   |   |-TextComment 0x556d39108590 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x556d391085b0 <line:365:3> Text=" "
|   |-ParamCommandComment 0x556d39108600 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x556d39108690 <col:14, col:43>
|   |   `-TextComment 0x556d39108660 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x556d391086e0 <line:367:3>
|   | `-TextComment 0x556d391086b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39108700 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x556d39108760 <col:11, col:55>
|       `-TextComment 0x556d39108730 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x556d39021230 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x556d39021128 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x556d390211a0 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x556d39021b38 <line:391:1, line:398:1>
| | |-DeclStmt 0x556d39021610 <line:392:2, col:38>
| | | `-VarDecl 0x556d390212f0 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x556d390215f0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x556d390215c8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x556d39021350 <col:27> 'int' 1
| | |       `-ParenExpr 0x556d390215a8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x556d39021580 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x556d39021568 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x556d39021410 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x556d390213f8 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x556d390213d8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x556d39021370 <line:392:34> 'int' lvalue ParmVar 0x556d390211a0 'bit' 'int'
| | |           `-ParenExpr 0x556d39021548 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x556d39021520 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x556d390214c8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x556d390214a0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x556d39021448 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x556d39021488 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x556d39021468 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x556d39021508 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x556d390214e8 <col:63> 'int' 1
| | |-DeclStmt 0x556d39021698 <line:393:2, col:18>
| | | `-VarDecl 0x556d39021638 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x556d390219a8 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x556d390216b0 <col:2> 'atomic_val_t':'int' lvalue Var 0x556d39021638 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x556d39021958 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x556d39021940 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x556d390216d8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x556d39016558 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x556d390218f8 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x556d390218d0 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x556d390218b8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x556d39021728 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x556d39021700 <line:395:30> 'atomic_t *' lvalue ParmVar 0x556d39021128 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x556d39021898 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x556d39021870 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x556d39021858 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x556d39021840 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x556d39021770 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x556d39021748 <line:395:38> 'int' lvalue ParmVar 0x556d390211a0 'bit' 'int'
| | |   |       `-ParenExpr 0x556d39021820 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x556d390217f8 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x556d390217a0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x556d390217e0 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x556d390217c0 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x556d39021990 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x556d39021918 <col:44> 'atomic_val_t':'int' lvalue Var 0x556d390212f0 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x556d39021af8 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x556d39021ae0 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x556d39021ab8 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x556d39021a78 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x556d39021a50 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x556d39021a20 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x556d390219d0 <col:10> 'atomic_val_t':'int' lvalue Var 0x556d39021638 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x556d39021a38 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x556d390219f8 <col:16> 'atomic_val_t':'int' lvalue Var 0x556d390212f0 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x556d39021a98 <col:25> 'int' 0
| `-FullComment 0x556d39108d50 <line:380:3, line:388:55>
|   |-ParagraphComment 0x556d39108860 <line:380:3>
|   | `-TextComment 0x556d39108830 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39108880 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x556d391088e0 <col:10, col:31>
|   |   `-TextComment 0x556d391088b0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x556d39108a50 <line:382:3, line:383:66>
|   | |-TextComment 0x556d39108900 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x556d39108950 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x556d39108970 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x556d391089c0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x556d391089e0 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x556d39108a00 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x556d39108aa0 <line:385:3>
|   | `-TextComment 0x556d39108a70 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39108ac0 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x556d39108b70 <line:385:17, line:386:3>
|   |   |-TextComment 0x556d39108b20 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x556d39108b40 <line:386:3> Text=" "
|   |-ParamCommandComment 0x556d39108b90 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x556d39108c20 <col:14, col:43>
|   |   `-TextComment 0x556d39108bf0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x556d39108c70 <line:388:3>
|   | `-TextComment 0x556d39108c40 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39108c90 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x556d39108cf0 <col:11, col:55>
|       `-TextComment 0x556d39108cc0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x556d39021d30 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x556d39021b78 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x556d39021c20 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x556d39022478 <line:412:1, line:416:1>
| | |-DeclStmt 0x556d39022110 <line:413:2, col:38>
| | | `-VarDecl 0x556d39021df0 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x556d390220f0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x556d390220c8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x556d39021e50 <col:27> 'int' 1
| | |       `-ParenExpr 0x556d390220a8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x556d39022080 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x556d39022068 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x556d39021f10 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x556d39021ef8 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x556d39021ed8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x556d39021e70 <line:413:34> 'int' lvalue ParmVar 0x556d39021c20 'bit' 'int'
| | |           `-ParenExpr 0x556d39022048 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x556d39022020 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x556d39021fc8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x556d39021fa0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x556d39021f48 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x556d39021f88 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x556d39021f68 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x556d39022008 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x556d39021fe8 <col:63> 'int' 1
| | `-CStyleCastExpr 0x556d39022428 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x556d390223e0 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x556d390223c8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d39022128 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x556d39016938 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x556d39022348 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x556d39022320 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x556d39022308 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x556d39022178 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x556d39022150 <line:415:31> 'atomic_t *' lvalue ParmVar 0x556d39021b78 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x556d390222e8 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x556d390222c0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x556d390222a8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x556d39022290 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x556d390221c0 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x556d39022198 <line:415:39> 'int' lvalue ParmVar 0x556d39021c20 'bit' 'int'
| |     |       `-ParenExpr 0x556d39022270 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x556d39022248 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x556d390221f0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x556d39022230 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x556d39022210 <col:45> 'int' 8
| |     `-UnaryOperator 0x556d390223a8 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~'
| |       `-ImplicitCastExpr 0x556d39022390 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x556d39022368 <col:46> 'atomic_val_t':'int' lvalue Var 0x556d39021df0 'mask' 'atomic_val_t':'int'
| `-FullComment 0x556d391092c0 <line:401:3, line:409:14>
|   |-ParagraphComment 0x556d39108df0 <line:401:3>
|   | `-TextComment 0x556d39108dc0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39108e10 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x556d39108e70 <col:10, col:33>
|   |   `-TextComment 0x556d39108e40 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x556d39108fc0 <line:403:3, line:404:66>
|   | |-TextComment 0x556d39108e90 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x556d39108ee0 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x556d39108f00 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x556d39108f50 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x556d39108f70 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x556d39109010 <line:406:3>
|   | `-TextComment 0x556d39108fe0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39109030 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x556d391090e0 <line:406:17, line:407:3>
|   |   |-TextComment 0x556d39109090 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x556d391090b0 <line:407:3> Text=" "
|   |-ParamCommandComment 0x556d39109100 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x556d39109190 <col:14, col:43>
|   |   `-TextComment 0x556d39109160 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x556d391091e0 <line:409:3>
|   | `-TextComment 0x556d391091b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39109200 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d39109260 <col:11, col:14>
|       `-TextComment 0x556d39109230 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d390225b0 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x556d390224a8 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x556d39022520 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x556d39022cf8 <line:430:1, line:434:1>
| | |-DeclStmt 0x556d39022990 <line:431:2, col:38>
| | | `-VarDecl 0x556d39022670 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x556d39022970 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x556d39022948 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x556d390226d0 <col:27> 'int' 1
| | |       `-ParenExpr 0x556d39022928 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x556d39022900 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x556d390228e8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x556d39022790 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x556d39022778 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x556d39022758 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x556d390226f0 <line:431:34> 'int' lvalue ParmVar 0x556d39022520 'bit' 'int'
| | |           `-ParenExpr 0x556d390228c8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x556d390228a0 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x556d39022848 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x556d39022820 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x556d390227c8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x556d39022808 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x556d390227e8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x556d39022888 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x556d39022868 <col:63> 'int' 1
| | `-CStyleCastExpr 0x556d39022ca8 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x556d39022c48 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x556d39022c30 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390229a8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x556d39016558 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x556d39022bc8 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x556d39022ba0 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x556d39022b88 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x556d390229f8 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x556d390229d0 <line:433:30> 'atomic_t *' lvalue ParmVar 0x556d390224a8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x556d39022b68 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x556d39022b40 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x556d39022b28 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x556d39022b10 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x556d39022a40 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x556d39022a18 <line:433:38> 'int' lvalue ParmVar 0x556d39022520 'bit' 'int'
| |     |       `-ParenExpr 0x556d39022af0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x556d39022ac8 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x556d39022a70 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x556d39022ab0 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x556d39022a90 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x556d39022c80 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x556d39022be8 <col:44> 'atomic_val_t':'int' lvalue Var 0x556d39022670 'mask' 'atomic_val_t':'int'
| `-FullComment 0x556d39109830 <line:419:3, line:427:14>
|   |-ParagraphComment 0x556d39109360 <line:419:3>
|   | `-TextComment 0x556d39109330 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39109380 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x556d391093e0 <col:10, col:31>
|   |   `-TextComment 0x556d391093b0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x556d39109530 <line:421:3, line:422:66>
|   | |-TextComment 0x556d39109400 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x556d39109450 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x556d39109470 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x556d391094c0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x556d391094e0 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x556d39109580 <line:424:3>
|   | `-TextComment 0x556d39109550 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391095a0 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x556d39109650 <line:424:17, line:425:3>
|   |   |-TextComment 0x556d39109600 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x556d39109620 <line:425:3> Text=" "
|   |-ParamCommandComment 0x556d39109670 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x556d39109700 <col:14, col:43>
|   |   `-TextComment 0x556d391096d0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x556d39109750 <line:427:3>
|   | `-TextComment 0x556d39109720 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39109770 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391097d0 <col:11, col:14>
|       `-TextComment 0x556d391097a0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d39022f40 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x556d39022d28 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x556d39022da0 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x556d39022e10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x556d39023ad8 <line:449:1, line:457:1>
| | |-DeclStmt 0x556d39023328 <line:450:2, col:38>
| | | `-VarDecl 0x556d39023008 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x556d39023308 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x556d390232e0 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x556d39023068 <col:27> 'int' 1
| | |       `-ParenExpr 0x556d390232c0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x556d39023298 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x556d39023280 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x556d39023128 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x556d39023110 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x556d390230f0 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x556d39023088 <line:450:34> 'int' lvalue ParmVar 0x556d39022da0 'bit' 'int'
| | |           `-ParenExpr 0x556d39023260 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x556d39023238 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x556d390231e0 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x556d390231b8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x556d39023160 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x556d390231a0 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x556d39023180 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x556d39023220 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x556d39023200 <col:63> 'int' 1
| | `-IfStmt 0x556d390239e0 <line:452:2, line:456:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x556d39023368 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x556d39023340 <col:6> 'bool' lvalue ParmVar 0x556d39022e10 'val' 'bool'
| |   |-CompoundStmt 0x556d39023688 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x556d39023660 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x556d39023600 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x556d390235e8 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x556d39023380 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x556d39016558 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x556d390235a0 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x556d39023578 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x556d39023560 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x556d390233d0 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x556d390233a8 <line:453:31> 'atomic_t *' lvalue ParmVar 0x556d39022d28 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x556d39023540 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x556d39023518 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x556d39023500 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x556d390234e8 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x556d39023418 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x556d390233f0 <line:453:39> 'int' lvalue ParmVar 0x556d39022da0 'bit' 'int'
| |   |     |       `-ParenExpr 0x556d390234c8 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x556d390234a0 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x556d39023448 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x556d39023488 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x556d39023468 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x556d39023638 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x556d390235c0 <col:45> 'atomic_val_t':'int' lvalue Var 0x556d39023008 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x556d390239c8 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x556d390239a0 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x556d39023958 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x556d39023940 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x556d390236a0 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x556d39016938 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x556d390238c0 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x556d39023898 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x556d39023880 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x556d390236f0 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x556d390236c8 <line:455:32> 'atomic_t *' lvalue ParmVar 0x556d39022d28 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x556d39023860 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x556d39023838 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x556d39023820 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x556d39023808 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x556d39023738 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x556d39023710 <line:455:40> 'int' lvalue ParmVar 0x556d39022da0 'bit' 'int'
| |         |       `-ParenExpr 0x556d390237e8 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x556d390237c0 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x556d39023768 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x556d390237a8 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x556d39023788 <col:45> 'int' 8
| |         `-UnaryOperator 0x556d39023920 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~'
| |           `-ImplicitCastExpr 0x556d39023908 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x556d390238e0 <col:47> 'atomic_val_t':'int' lvalue Var 0x556d39023008 'mask' 'atomic_val_t':'int'
| `-FullComment 0x556d39109f00 <line:437:3, line:446:14>
|   |-ParagraphComment 0x556d391098d0 <line:437:3>
|   | `-TextComment 0x556d391098a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391098f0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x556d39109950 <col:10, col:48>
|   |   `-TextComment 0x556d39109920 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x556d39109b20 <line:439:3, line:440:66>
|   | |-TextComment 0x556d39109970 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x556d391099c0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x556d391099e0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x556d39109a30 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x556d39109a50 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x556d39109aa0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x556d39109ac0 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x556d39109b70 <line:442:3>
|   | `-TextComment 0x556d39109b40 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39109b90 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x556d39109c40 <line:442:17, line:443:3>
|   |   |-TextComment 0x556d39109bf0 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x556d39109c10 <line:443:3> Text=" "
|   |-ParamCommandComment 0x556d39109c60 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x556d39109d10 <line:443:14, line:444:3>
|   |   |-TextComment 0x556d39109cc0 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x556d39109ce0 <line:444:3> Text=" "
|   |-ParamCommandComment 0x556d39109d30 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x556d39109dc0 <col:14, col:38>
|   |   `-TextComment 0x556d39109d90 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x556d39109e10 <line:446:3>
|   | `-TextComment 0x556d39109de0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39109e30 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d39109e90 <col:11, col:14>
|       `-TextComment 0x556d39109e60 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d3902d390 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x556d39023b10 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x556d3902d6e8 <line:114:1, line:116:1>
|   `-ReturnStmt 0x556d3902d6d0 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x556d3902d6b8 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x556d3902d690 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x556d3902d4c0 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x556d3902d498 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x556d3902d480 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x556d3902d438 <col:10> 'unsigned int' lvalue ParmVar 0x556d39023b10 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x556d3902d460 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x556d3902d670 <col:22, col:42> 'int'
|           `-BinaryOperator 0x556d3902d648 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x556d3902d608 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x556d3902d5e0 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x556d3902d5c8 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x556d3902d4e0 <col:24> 'unsigned int' lvalue ParmVar 0x556d39023b10 'x' 'unsigned int'
|             |   `-ParenExpr 0x556d3902d5a8 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x556d3902d580 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x556d3902d550 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x556d3902d508 <col:29> 'unsigned int' lvalue ParmVar 0x556d39023b10 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x556d3902d568 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x556d3902d530 <col:33> 'int' 1
|             `-IntegerLiteral 0x556d3902d628 <col:40> 'unsigned int' 0
|-FunctionDecl 0x556d3902d8d0 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x556d3902d730 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x556d3902d7c0 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x556d3902dfe8 <line:119:1, line:134:1>
|   |-DeclStmt 0x556d3902d9f0 <line:120:2, col:16>
|   | `-VarDecl 0x556d3902d990 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x556d3902db18 <line:122:2, line:124:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x556d3902da80 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x556d3902da68 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x556d3902da50 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x556d3902da08 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x556d3902d7c0 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x556d3902da30 <col:15> 'unsigned int' 0
|   | |-CompoundStmt 0x556d3902db00 <col:19, line:124:2>
|   | | `-ReturnStmt 0x556d3902dae8 <line:123:3, col:10>
|   | |   `-ImplicitCastExpr 0x556d3902dad0 <col:10> 's64_t':'long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x556d3902daa8 <col:10> 's64_t':'long long' lvalue ParmVar 0x556d3902d730 'value' 's64_t':'long long'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x556d3902dc80 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x556d3902db50 <col:2> 's64_t':'long long' lvalue Var 0x556d3902d990 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x556d3902dc58 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x556d3902dc00 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x556d3902dbd8 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x556d3902dbc0 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x556d3902db78 <col:14> 's64_t':'long long' lvalue ParmVar 0x556d3902d730 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x556d3902dba0 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x556d3902dc40 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x556d3902dc20 <col:29> 'int' 1
|   |-BinaryOperator 0x556d3902dd30 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x556d3902dca8 <col:2> 's64_t':'long long' lvalue Var 0x556d3902d990 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x556d3902dd10 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x556d3902dcf8 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d3902dcd0 <col:14> 's64_t':'long long' lvalue Var 0x556d3902d990 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x556d3902dfa8 <line:133:2, col:53>
|     `-BinaryOperator 0x556d3902df80 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x556d3902de18 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x556d3902ddf0 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x556d3902dda8 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x556d3902dd58 <col:10> 's64_t':'long long' lvalue ParmVar 0x556d3902d730 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x556d3902ddd8 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x556d3902ddc0 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x556d3902dd80 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x556d3902d7c0 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x556d3902df60 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x556d3902df38 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x556d3902df20 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x556d3902de38 <col:29> 's64_t':'long long' lvalue Var 0x556d3902d990 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x556d3902df00 <col:41, col:52> 'int'
|             `-BinaryOperator 0x556d3902ded8 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x556d3902de60 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x556d3902dec0 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x556d3902dea8 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x556d3902de80 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x556d3902d7c0 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x556d3902e218 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x556d3902e030 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x556d3902e0f8 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x556d391c3810 <line:137:3, line:142:63>
|   |-ParagraphComment 0x556d39109fa0 <line:137:3>
|   | `-TextComment 0x556d39109f70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39109fc0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x556d3910a020 <col:10, col:68>
|   |   `-TextComment 0x556d39109ff0 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x556d3910a070 <line:139:3>
|   | `-TextComment 0x556d3910a040 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c3580 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x556d391c3630 <line:139:17, line:140:3>
|   |   |-TextComment 0x556d391c35e0 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x556d391c3600 <line:140:3> Text=" "
|   |-ParamCommandComment 0x556d391c3650 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x556d391c36e0 <col:17, col:69>
|   |   `-TextComment 0x556d391c36b0 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x556d391c3730 <line:142:3, col:4>
|   | `-TextComment 0x556d391c3700 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x556d391c3750 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x556d391c37b0 <col:12, col:63>
|       `-TextComment 0x556d391c3780 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x556d3902e4b8 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x556d3902e308 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x556d3902e3a0 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x556d391c3c30 <line:147:3, line:152:63>
|   |-ParagraphComment 0x556d391c38b0 <line:147:3>
|   | `-TextComment 0x556d391c3880 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c38d0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x556d391c3930 <col:10, col:68>
|   |   `-TextComment 0x556d391c3900 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x556d391c3980 <line:149:3>
|   | `-TextComment 0x556d391c3950 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c39a0 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x556d391c3a50 <line:149:17, line:150:3>
|   |   |-TextComment 0x556d391c3a00 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x556d391c3a20 <line:150:3> Text=" "
|   |-ParamCommandComment 0x556d391c3a70 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x556d391c3b00 <col:17, col:72>
|   |   `-TextComment 0x556d391c3ad0 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x556d391c3b50 <line:152:3, col:4>
|   | `-TextComment 0x556d391c3b20 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x556d391c3b70 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x556d391c3bd0 <col:12, col:63>
|       `-TextComment 0x556d391c3ba0 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x556d3902e8c0 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x556d3902e628 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x556d3902e698 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3902e710 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x556d3902e780 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x556d391c4200 <line:157:3, line:164:77>
|   |-ParagraphComment 0x556d391c3cd0 <line:157:3>
|   | `-TextComment 0x556d391c3ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c3cf0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x556d391c3d50 <col:10, col:65>
|   |   `-TextComment 0x556d391c3d20 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x556d391c3da0 <line:159:3>
|   | `-TextComment 0x556d391c3d70 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c3dc0 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x556d391c3e70 <line:159:19, line:160:3>
|   |   |-TextComment 0x556d391c3e20 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x556d391c3e40 <line:160:3> Text=" "
|   |-ParamCommandComment 0x556d391c3e90 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x556d391c3f40 <line:160:22, line:161:3>
|   |   |-TextComment 0x556d391c3ef0 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x556d391c3f10 <line:161:3> Text=" "
|   |-ParamCommandComment 0x556d391c3f60 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x556d391c4010 <line:161:19, line:162:3>
|   |   |-TextComment 0x556d391c3fc0 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x556d391c3fe0 <line:162:3> Text=" "
|   |-ParamCommandComment 0x556d391c4030 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x556d391c40c0 <col:22, col:74>
|   |   `-TextComment 0x556d391c4090 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x556d391c4110 <line:164:3>
|   | `-TextComment 0x556d391c40e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c4130 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x556d391c4190 <col:11, col:77>
|       `-TextComment 0x556d391c4160 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x556d3902ec50 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x556d3902e9c0 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x556d3902ea30 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3902eaa0 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x556d3902eb10 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x556d391c47d0 <line:175:3, line:182:74>
|   |-ParagraphComment 0x556d391c42a0 <line:175:3>
|   | `-TextComment 0x556d391c4270 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c42c0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x556d391c4320 <col:10, col:64>
|   |   `-TextComment 0x556d391c42f0 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x556d391c4370 <line:177:3>
|   | `-TextComment 0x556d391c4340 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c4390 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x556d391c4440 <line:177:19, line:178:3>
|   |   |-TextComment 0x556d391c43f0 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x556d391c4410 <line:178:3> Text=" "
|   |-ParamCommandComment 0x556d391c4460 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x556d391c4510 <line:178:22, line:179:3>
|   |   |-TextComment 0x556d391c44c0 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x556d391c44e0 <line:179:3> Text=" "
|   |-ParamCommandComment 0x556d391c4530 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x556d391c45e0 <line:179:19, line:180:3>
|   |   |-TextComment 0x556d391c4590 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x556d391c45b0 <line:180:3> Text=" "
|   |-ParamCommandComment 0x556d391c4600 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x556d391c4690 <col:22, col:63>
|   |   `-TextComment 0x556d391c4660 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x556d391c46e0 <line:182:3>
|   | `-TextComment 0x556d391c46b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c4700 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x556d391c4760 <col:11, col:74>
|       `-TextComment 0x556d391c4730 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x556d3902ef60 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x556d3902ed50 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x556d3902edc0 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x556d3902ee30 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x556d391c4d60 <line:187:3, line:197:47>
|   |-ParagraphComment 0x556d391c4870 <line:187:3>
|   | `-TextComment 0x556d391c4840 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c4890 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x556d391c48f0 <col:10, col:65>
|   |   `-TextComment 0x556d391c48c0 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x556d391c4960 <line:189:3, line:190:60>
|   | |-TextComment 0x556d391c4910 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x556d391c4930 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x556d391c49b0 <line:192:3>
|   | `-TextComment 0x556d391c4980 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c49d0 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x556d391c4a80 <line:192:19, line:193:3>
|   |   |-TextComment 0x556d391c4a30 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x556d391c4a50 <line:193:3> Text=" "
|   |-ParamCommandComment 0x556d391c4aa0 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x556d391c4b50 <line:193:22, line:194:3>
|   |   |-TextComment 0x556d391c4b00 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x556d391c4b20 <line:194:3> Text=" "
|   |-ParamCommandComment 0x556d391c4b70 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x556d391c4c00 <col:21, col:61>
|   |   `-TextComment 0x556d391c4bd0 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x556d391c4c50 <line:196:3>
|   | `-TextComment 0x556d391c4c20 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c4c70 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x556d391c4cf0 <line:196:11, line:197:47>
|       |-TextComment 0x556d391c4ca0 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x556d391c4cc0 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x556d3902f318 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x556d39063bd0 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x556d39063d30 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x556d39063da0 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x556d39063e40 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x556d39063e98 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x556d39063e40 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x556d39063d30 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x556d39063ee8 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x556d39063e40 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x556d39063da0 'next' 'struct _dnode *'
| |-RecordDecl 0x556d39063f28 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x556d39063ff8 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x556d39064068 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x556d39064100 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x556d39064158 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x556d39064100 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x556d39063ff8 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x556d390641a8 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x556d39064100 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x556d39064068 'prev' 'struct _dnode *'
|-TypedefDecl 0x556d39064258 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x556d39063c80 'struct _dnode' sugar
|   `-RecordType 0x556d39063bb0 'struct _dnode'
|     `-Record 0x556d3902f318 '_dnode'
|-TypedefDecl 0x556d390642d0 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x556d39063c80 'struct _dnode' sugar
|   `-RecordType 0x556d39063bb0 'struct _dnode'
|     `-Record 0x556d3902f318 '_dnode'
|-FunctionDecl 0x556d390645b0 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x556d390644a8 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x556d390649a8 <line:193:1, line:196:1>
| | |-BinaryOperator 0x556d390647e8 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d390646e8 <col:2, col:8> 'struct _dnode *' lvalue .head 0x556d39063d30
| | | | `-MemberExpr 0x556d39064698 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |   `-ImplicitCastExpr 0x556d39064680 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d39064658 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x556d390644a8 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x556d390647c0 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x556d390647a8 <col:30> 'sys_dlist_t *' <LValueToRValue>
| | |     `-DeclRefExpr 0x556d39064740 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x556d390644a8 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x556d39064950 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x556d390648a0 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x556d39063ff8
| |   | `-MemberExpr 0x556d39064850 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| |   |   `-ImplicitCastExpr 0x556d39064838 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x556d39064810 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x556d390644a8 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x556d39064928 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x556d39064910 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x556d390648d8 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x556d390644a8 'list' 'sys_dlist_t *'
| `-FullComment 0x556d391c50a0 <line:185:3, line:189:14>
|   |-ParagraphComment 0x556d391c4e00 <line:185:3>
|   | `-TextComment 0x556d391c4dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c4e20 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d391c4e80 <col:10, col:44>
|   |   `-TextComment 0x556d391c4e50 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x556d391c4ed0 <line:187:3>
|   | `-TextComment 0x556d391c4ea0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c4ef0 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c4f80 <col:15, col:37>
|   |   `-TextComment 0x556d391c4f50 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x556d391c4fd0 <line:189:3>
|   | `-TextComment 0x556d391c4fa0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c4ff0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391c5050 <col:11, col:14>
|       `-TextComment 0x556d391c5020 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d39064aa0 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d390649d8 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d390684b8 <line:209:1, line:212:1>
| | |-BinaryOperator 0x556d390682e0 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d39068210 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x556d39063da0
| | | | `-MemberExpr 0x556d390681c0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |   `-ImplicitCastExpr 0x556d39064b70 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d39064b48 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d390649d8 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d390682c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x556d390682a8 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x556d39068280 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x556d39068248 <col:23> 'int' 0
| | `-BinaryOperator 0x556d39068468 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x556d39068398 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x556d39064068
| |   | `-MemberExpr 0x556d39068348 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| |   |   `-ImplicitCastExpr 0x556d39068330 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x556d39068308 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d390649d8 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x556d39068450 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x556d39068430 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x556d39068408 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x556d390683d0 <col:23> 'int' 0
| `-FullComment 0x556d391c53e0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x556d391c5140 <line:201:3>
|   | `-TextComment 0x556d391c5110 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c5160 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x556d391c51c0 <col:10, col:57>
|   |   `-TextComment 0x556d391c5190 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x556d391c5210 <line:203:3>
|   | `-TextComment 0x556d391c51e0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c5230 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391c52c0 <col:15, col:23>
|   |   `-TextComment 0x556d391c5290 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x556d391c5310 <line:205:3>
|   | `-TextComment 0x556d391c52e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c5330 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391c5390 <col:11, col:14>
|       `-TextComment 0x556d391c5360 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d39068650 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d39068548 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x556d390688f8 <line:223:1, line:225:1>
| | `-ReturnStmt 0x556d390688b0 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x556d39068898 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x556d39068870 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x556d39068840 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x556d39068788 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x556d39063da0
| |       |   `-MemberExpr 0x556d39068738 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| |       |     `-ImplicitCastExpr 0x556d39068720 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x556d390686f8 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x556d39068548 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x556d39068858 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x556d39068820 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x556d390687f8 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x556d390687c0 <col:23> 'int' 0
| `-FullComment 0x556d391c7770 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x556d391c5480 <line:215:3>
|   | `-TextComment 0x556d391c5450 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c54a0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391c5500 <col:10, col:49>
|   |   `-TextComment 0x556d391c54d0 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x556d391c5550 <line:217:3>
|   | `-TextComment 0x556d391c5520 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c75c0 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391c7650 <col:15, col:23>
|   |   `-TextComment 0x556d391c7620 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x556d391c76a0 <line:219:3>
|   | `-TextComment 0x556d391c7670 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c76c0 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x556d391c7720 <col:11, col:65>
|       `-TextComment 0x556d391c76f0 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x556d39068aa0 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d39068920 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x556d39068990 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d39068cf8 <line:237:1, line:239:1>
| | `-ReturnStmt 0x556d39068cb0 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x556d39068c98 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x556d39068c70 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x556d39068c40 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x556d39068be0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x556d39063d30
| |       |   `-MemberExpr 0x556d39068b90 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| |       |     `-ImplicitCastExpr 0x556d39068b78 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x556d39068b50 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x556d39068920 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x556d39068c58 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d39068c18 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x556d39068990 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391c7b90 <line:228:3, line:233:52>
|   |-ParagraphComment 0x556d391c7810 <line:228:3>
|   | `-TextComment 0x556d391c77e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c7830 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d391c7890 <col:10, col:44>
|   |   `-TextComment 0x556d391c7860 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x556d391c78e0 <line:230:3>
|   | `-TextComment 0x556d391c78b0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c7900 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c79b0 <line:230:15, line:231:3>
|   |   |-TextComment 0x556d391c7960 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x556d391c7980 <line:231:3> Text=" "
|   |-ParamCommandComment 0x556d391c79d0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391c7a60 <col:15, col:32>
|   |   `-TextComment 0x556d391c7a30 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x556d391c7ab0 <line:233:3>
|   | `-TextComment 0x556d391c7a80 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c7ad0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x556d391c7b30 <col:11, col:52>
|       `-TextComment 0x556d391c7b00 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x556d39068e20 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d39068d20 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x556d39068d90 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d39069078 <line:251:1, line:253:1>
| | `-ReturnStmt 0x556d39069030 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x556d39069018 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x556d39068ff0 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x556d39068fc0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x556d39068f60 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x556d39063ff8
| |       |   `-MemberExpr 0x556d39068f10 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| |       |     `-ImplicitCastExpr 0x556d39068ef8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x556d39068ed0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x556d39068d20 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x556d39068fd8 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d39068f98 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x556d39068d90 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391c7fb0 <line:242:3, line:247:52>
|   |-ParagraphComment 0x556d391c7c30 <line:242:3>
|   | `-TextComment 0x556d391c7c00 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c7c50 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d391c7cb0 <col:10, col:44>
|   |   `-TextComment 0x556d391c7c80 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x556d391c7d00 <line:244:3>
|   | `-TextComment 0x556d391c7cd0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c7d20 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c7dd0 <line:244:15, line:245:3>
|   |   |-TextComment 0x556d391c7d80 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x556d391c7da0 <line:245:3> Text=" "
|   |-ParamCommandComment 0x556d391c7df0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391c7e80 <col:15, col:32>
|   |   `-TextComment 0x556d391c7e50 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x556d391c7ed0 <line:247:3>
|   | `-TextComment 0x556d391c7ea0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c7ef0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x556d391c7f50 <col:11, col:52>
|       `-TextComment 0x556d391c7f20 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x556d390695e0 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x556d390690a0 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x556d39069828 <line:264:1, line:266:1>
| | `-ReturnStmt 0x556d390697e8 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x556d390697d0 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x556d390697a8 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x556d39069778 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x556d39069718 <col:9, col:15> 'struct _dnode *' lvalue .head 0x556d39063d30
| |       |   `-MemberExpr 0x556d390696c8 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| |       |     `-ImplicitCastExpr 0x556d390696b0 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x556d39069688 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x556d390690a0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x556d39069790 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d39069750 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x556d390690a0 'list' 'sys_dlist_t *'
| `-FullComment 0x556d391c82f0 <line:256:3, line:260:41>
|   |-ParagraphComment 0x556d391c8050 <line:256:3>
|   | `-TextComment 0x556d391c8020 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c8070 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x556d391c80d0 <col:10, col:36>
|   |   `-TextComment 0x556d391c80a0 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x556d391c8120 <line:258:3>
|   | `-TextComment 0x556d391c80f0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c8140 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c81d0 <col:15, col:51>
|   |   `-TextComment 0x556d391c81a0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x556d391c8220 <line:260:3>
|   | `-TextComment 0x556d391c81f0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c8240 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x556d391c82a0 <col:11, col:41>
|       `-TextComment 0x556d391c8270 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x556d390698d8 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x556d39069850 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x556d39069bc8 <line:279:1, line:281:1>
| | `-ReturnStmt 0x556d39069b80 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x556d39069b68 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x556d39069b40 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x556d39069b10 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x556d39069a10 <col:9, col:15> 'struct _dnode *' lvalue .head 0x556d39063d30
| |       |   `-MemberExpr 0x556d390699c0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| |       |     `-ImplicitCastExpr 0x556d390699a8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x556d39069980 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x556d39069850 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x556d39069b28 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x556d39069ad8 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x556d39063ff8
| |           `-MemberExpr 0x556d39069a88 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| |             `-ImplicitCastExpr 0x556d39069a70 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x556d39069a48 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x556d39069850 'list' 'sys_dlist_t *'
| `-FullComment 0x556d391c8690 <line:269:3, line:275:50>
|   |-ParagraphComment 0x556d391c8390 <line:269:3>
|   | `-TextComment 0x556d391c8360 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c83b0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x556d391c8410 <col:10, col:45>
|   |   `-TextComment 0x556d391c83e0 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x556d391c8460 <line:271:3, col:62>
|   | `-TextComment 0x556d391c8430 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391c84b0 <line:273:3>
|   | `-TextComment 0x556d391c8480 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c84d0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c8560 <col:15, col:51>
|   |   `-TextComment 0x556d391c8530 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x556d391c85b0 <line:275:3>
|   | `-TextComment 0x556d391c8580 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c85d0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x556d391c8630 <col:11, col:50>
|       `-TextComment 0x556d391c8600 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x556d39069cf0 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x556d39069bf0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x556d3906a0a8 <line:292:1, line:294:1>
| | `-ReturnStmt 0x556d3906a068 <line:293:2, col:49>
| |   `-ConditionalOperator 0x556d3906a038 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x556d39069ff0 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x556d39069e60 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x556d39069e48 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x556d39069d98 <col:9> 'bool (sys_dlist_t *)' Function 0x556d390695e0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x556d39069e90 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x556d39069dc0 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x556d39069bf0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x556d3906a020 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x556d39069f08 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x556d39069ee0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x556d39069ea8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x556d3906a008 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x556d39069fb8 <col:43, col:49> 'struct _dnode *' lvalue .head 0x556d39063d30
| |         `-MemberExpr 0x556d39069f68 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| |           `-ImplicitCastExpr 0x556d39069f50 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x556d39069f28 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x556d39069bf0 'list' 'sys_dlist_t *'
| `-FullComment 0x556d391c89d0 <line:284:3, line:288:63>
|   |-ParagraphComment 0x556d391c8730 <line:284:3>
|   | `-TextComment 0x556d391c8700 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c8750 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x556d391c87b0 <col:10, col:54>
|   |   `-TextComment 0x556d391c8780 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x556d391c8800 <line:286:3>
|   | `-TextComment 0x556d391c87d0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c8820 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c88b0 <col:15, col:51>
|   |   `-TextComment 0x556d391c8880 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x556d391c8900 <line:288:3>
|   | `-TextComment 0x556d391c88d0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c8920 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x556d391c8980 <col:11, col:63>
|       `-TextComment 0x556d391c8950 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x556d3906a158 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x556d3906a0d0 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x556d3906a328 <line:307:1, line:309:1>
| | `-ReturnStmt 0x556d3906a2e0 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x556d3906a2c8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x556d3906a290 <col:9, col:15> 'struct _dnode *' lvalue .head 0x556d39063d30
| |       `-MemberExpr 0x556d3906a240 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| |         `-ImplicitCastExpr 0x556d3906a228 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x556d3906a200 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x556d3906a0d0 'list' 'sys_dlist_t *'
| `-FullComment 0x556d391c8d70 <line:297:3, line:303:40>
|   |-ParagraphComment 0x556d391c8a70 <line:297:3>
|   | `-TextComment 0x556d391c8a40 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c8a90 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x556d391c8af0 <col:10, col:54>
|   |   `-TextComment 0x556d391c8ac0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x556d391c8b40 <line:299:3, col:42>
|   | `-TextComment 0x556d391c8b10 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x556d391c8b90 <line:301:3>
|   | `-TextComment 0x556d391c8b60 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c8bb0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c8c40 <col:15, col:51>
|   |   `-TextComment 0x556d391c8c10 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x556d391c8c90 <line:303:3>
|   | `-TextComment 0x556d391c8c60 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c8cb0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x556d391c8d10 <col:11, col:40>
|       `-TextComment 0x556d391c8ce0 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x556d3906a4d0 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d3906a350 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x556d3906a3c0 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d3906c0e8 <line:324:1, line:326:1>
| | `-ReturnStmt 0x556d3906c0a0 <line:325:2, col:45>
| |   `-ConditionalOperator 0x556d3906c070 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x556d3906bed8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x556d3906beb0 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x556d3906be80 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x556d3906a580 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x556d3906a3c0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x556d3906be98 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x556d3906be48 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x556d39063ff8
| |     |       `-MemberExpr 0x556d3906bdf8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| |     |         `-ImplicitCastExpr 0x556d3906bde0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x556d3906a5a8 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x556d3906a350 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x556d3906c058 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x556d3906bf58 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x556d3906bf30 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x556d3906bef8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x556d3906c040 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x556d3906c008 <col:39, col:45> 'struct _dnode *' lvalue .next 0x556d39063da0
| |         `-MemberExpr 0x556d3906bfb8 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| |           `-ImplicitCastExpr 0x556d3906bfa0 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x556d3906bf78 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x556d3906a3c0 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391c91e0 <line:312:3, line:319:78>
|   |-ParagraphComment 0x556d391c8e10 <line:312:3>
|   | `-TextComment 0x556d391c8de0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c8e30 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x556d391c8e90 <col:10, col:72>
|   |   `-TextComment 0x556d391c8e60 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x556d391c8ee0 <line:314:3, col:69>
|   | `-TextComment 0x556d391c8eb0 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x556d391c8f30 <line:316:3>
|   | `-TextComment 0x556d391c8f00 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c8f50 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c9000 <line:316:15, line:317:3>
|   |   |-TextComment 0x556d391c8fb0 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x556d391c8fd0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x556d391c9020 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391c90b0 <col:15, col:70>
|   |   `-TextComment 0x556d391c9080 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x556d391c9100 <line:319:3>
|   | `-TextComment 0x556d391c90d0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c9120 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x556d391c9180 <col:11, col:78>
|       `-TextComment 0x556d391c9150 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x556d3906c210 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d3906c110 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x556d3906c180 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d3906c648 <line:340:1, line:342:1>
| | `-ReturnStmt 0x556d3906c600 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x556d3906c5d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x556d3906c3c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x556d3906c398 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x556d3906c368 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x556d3906c2c0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x556d3906c180 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x556d3906c380 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x556d3906c348 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x556d3906c320 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x556d3906c2e8 <col:23> 'int' 0
| |     |-CallExpr 0x556d3906c4d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x556d3906c4b8 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x556d3906c3e0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x556d3906a4d0 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x556d3906c508 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x556d3906c408 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x556d3906c110 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x556d3906c520 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x556d3906c430 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x556d3906c180 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x556d3906c5b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x556d3906c598 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x556d3906c570 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x556d3906c538 <col:23> 'int' 0
| `-FullComment 0x556d391c9630 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x556d391c9280 <line:329:3>
|   | `-TextComment 0x556d391c9250 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c92a0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x556d391c9300 <col:10, col:54>
|   |   `-TextComment 0x556d391c92d0 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x556d391c9350 <line:331:3>
|   | `-TextComment 0x556d391c9320 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c9370 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c9420 <line:331:15, line:332:3>
|   |   |-TextComment 0x556d391c93d0 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x556d391c93f0 <line:332:3> Text=" "
|   |-ParamCommandComment 0x556d391c9440 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391c94d0 <col:15, col:70>
|   |   `-TextComment 0x556d391c94a0 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x556d391c9520 <line:334:3>
|   | `-TextComment 0x556d391c94f0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c9540 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x556d391c95d0 <line:334:11, line:335:68>
|       |-TextComment 0x556d391c9570 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x556d391c9590 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x556d3906c770 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d3906c670 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x556d3906c6e0 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d3906cb78 <line:358:1, line:360:1>
| | `-ReturnStmt 0x556d3906cb30 <line:359:2, col:45>
| |   `-ConditionalOperator 0x556d3906cb00 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x556d3906c968 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x556d3906c940 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x556d3906c910 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x556d3906c820 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x556d3906c6e0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x556d3906c928 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x556d3906c8d8 <col:18, col:24> 'struct _dnode *' lvalue .head 0x556d39063d30
| |     |       `-MemberExpr 0x556d3906c888 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| |     |         `-ImplicitCastExpr 0x556d3906c870 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x556d3906c848 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x556d3906c670 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x556d3906cae8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x556d3906c9e8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x556d3906c9c0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x556d3906c988 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x556d3906cad0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x556d3906ca98 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x556d39064068
| |         `-MemberExpr 0x556d3906ca48 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| |           `-ImplicitCastExpr 0x556d3906ca30 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x556d3906ca08 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x556d3906c6e0 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391c9ac0 <line:345:3, line:353:10>
|   |-ParagraphComment 0x556d391c96d0 <line:345:3>
|   | `-TextComment 0x556d391c96a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c96f0 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x556d391c9750 <col:10, col:76>
|   |   `-TextComment 0x556d391c9720 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x556d391c97a0 <line:347:3, col:69>
|   | `-TextComment 0x556d391c9770 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x556d391c97f0 <line:349:3>
|   | `-TextComment 0x556d391c97c0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c9810 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c98c0 <line:349:15, line:350:3>
|   |   |-TextComment 0x556d391c9870 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x556d391c9890 <line:350:3> Text=" "
|   |-ParamCommandComment 0x556d391c98e0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391c9970 <col:15, col:74>
|   |   `-TextComment 0x556d391c9940 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x556d391c99c0 <line:352:3>
|   | `-TextComment 0x556d391c9990 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c99e0 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x556d391c9a60 <line:352:11, line:353:10>
|       |-TextComment 0x556d391c9a10 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x556d391c9a30 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x556d3906cca0 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d3906cba0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x556d3906cc10 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d3906d088 <line:375:1, line:377:1>
| | `-ReturnStmt 0x556d3906d048 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x556d3906d018 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x556d3906ce68 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x556d3906ce40 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x556d3906ce10 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x556d3906cd50 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x556d3906cc10 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x556d3906ce28 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x556d3906cdf0 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x556d3906cdb0 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x556d3906cd78 <col:23> 'int' 0
| |     |-CallExpr 0x556d3906cf18 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x556d3906cf00 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x556d3906ce88 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x556d3906c770 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x556d3906cf50 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x556d3906ceb0 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x556d3906cba0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x556d3906cf68 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x556d3906ced8 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x556d3906cc10 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x556d3906d000 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x556d3906cfe0 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x556d3906cfb8 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x556d3906cf80 <col:23> 'int' 0
| `-FullComment 0x556d391c9f30 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x556d391c9b60 <line:363:3>
|   | `-TextComment 0x556d391c9b30 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c9b80 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x556d391c9be0 <col:10, col:58>
|   |   `-TextComment 0x556d391c9bb0 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x556d391c9c30 <line:365:3>
|   | `-TextComment 0x556d391c9c00 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391c9c50 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391c9d00 <line:365:15, line:366:3>
|   |   |-TextComment 0x556d391c9cb0 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x556d391c9cd0 <line:366:3> Text=" "
|   |-ParamCommandComment 0x556d391c9d20 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391c9db0 <col:15, col:74>
|   |   `-TextComment 0x556d391c9d80 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x556d391c9e00 <line:368:3>
|   | `-TextComment 0x556d391c9dd0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391c9e20 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x556d391c9ed0 <line:368:11, line:370:13>
|       |-TextComment 0x556d391c9e50 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x556d391c9e70 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x556d391c9e90 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x556d3906d138 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x556d3906d0b0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x556d3906d498 <line:388:1, line:390:1>
| | `-ReturnStmt 0x556d3906d450 <line:389:2, col:49>
| |   `-ConditionalOperator 0x556d3906d420 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x556d3906d3d8 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x556d3906d248 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x556d3906d230 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x556d3906d1e0 <col:9> 'bool (sys_dlist_t *)' Function 0x556d390695e0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x556d3906d278 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x556d3906d208 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x556d3906d0b0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x556d3906d408 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x556d3906d2f0 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x556d3906d2c8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x556d3906d290 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x556d3906d3f0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x556d3906d3a0 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x556d39063ff8
| |         `-MemberExpr 0x556d3906d350 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| |           `-ImplicitCastExpr 0x556d3906d338 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x556d3906d310 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x556d3906d0b0 'list' 'sys_dlist_t *'
| `-FullComment 0x556d391ca270 <line:380:3, line:384:63>
|   |-ParagraphComment 0x556d391c9fd0 <line:380:3>
|   | `-TextComment 0x556d391c9fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391c9ff0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x556d391ca050 <col:10, col:54>
|   |   `-TextComment 0x556d391ca020 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x556d391ca0a0 <line:382:3>
|   | `-TextComment 0x556d391ca070 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ca0c0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391ca150 <col:15, col:51>
|   |   `-TextComment 0x556d391ca120 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x556d391ca1a0 <line:384:3>
|   | `-TextComment 0x556d391ca170 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ca1c0 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x556d391ca220 <col:11, col:63>
|       `-TextComment 0x556d391ca1f0 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x556d3906d640 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d3906d4c0 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x556d3906d530 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d3906dd18 <line:404:1, line:410:1>
| | |-BinaryOperator 0x556d3906d7f8 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d3906d780 <col:2, col:8> 'struct _dnode *' lvalue .next 0x556d39063da0
| | | | `-MemberExpr 0x556d3906d730 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |   `-ImplicitCastExpr 0x556d3906d718 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d3906d6f0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d3906d530 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d3906d7e0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x556d3906d7b8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x556d3906d4c0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x556d3906d9c8 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d3906d8b0 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x556d39064068
| | | | `-MemberExpr 0x556d3906d860 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | | |   `-ImplicitCastExpr 0x556d3906d848 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d3906d820 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d3906d530 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d3906d9b0 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x556d3906d978 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x556d39063ff8
| | |     `-MemberExpr 0x556d3906d928 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | |       `-ImplicitCastExpr 0x556d3906d910 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x556d3906d8e8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x556d3906d4c0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x556d3906db98 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d3906db20 <col:2, col:14> 'struct _dnode *' lvalue .next 0x556d39063da0
| | | | `-MemberExpr 0x556d3906dad0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |   `-ImplicitCastExpr 0x556d3906dab8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x556d3906da80 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x556d39063ff8
| | | |       `-MemberExpr 0x556d3906da30 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | | |         `-ImplicitCastExpr 0x556d3906da18 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x556d3906d9f0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x556d3906d4c0 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x556d3906db80 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x556d3906db58 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x556d3906d530 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x556d3906dcc8 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x556d3906dc50 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x556d39063ff8
| |   | `-MemberExpr 0x556d3906dc00 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| |   |   `-ImplicitCastExpr 0x556d3906dbe8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x556d3906dbc0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x556d3906d4c0 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x556d3906dcb0 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x556d3906dc88 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x556d3906d530 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391ca6e0 <line:393:3, line:400:14>
|   |-ParagraphComment 0x556d391ca310 <line:393:3>
|   | `-TextComment 0x556d391ca2e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ca330 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x556d391ca390 <col:10, col:34>
|   |   `-TextComment 0x556d391ca360 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x556d391ca3e0 <line:395:3, col:62>
|   | `-TextComment 0x556d391ca3b0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391ca430 <line:397:3>
|   | `-TextComment 0x556d391ca400 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ca450 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391ca500 <line:397:15, line:398:3>
|   |   |-TextComment 0x556d391ca4b0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x556d391ca4d0 <line:398:3> Text=" "
|   |-ParamCommandComment 0x556d391ca520 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391ca5b0 <col:15, col:36>
|   |   `-TextComment 0x556d391ca580 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x556d391ca600 <line:400:3>
|   | `-TextComment 0x556d391ca5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ca620 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391ca680 <col:11, col:14>
|       `-TextComment 0x556d391ca650 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d3906de90 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d3906dd58 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x556d3906de00 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d3906e568 <line:424:1, line:430:1>
| | |-BinaryOperator 0x556d3906e0e8 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d3906dfd0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x556d39063da0
| | | | `-MemberExpr 0x556d3906df80 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |   `-ImplicitCastExpr 0x556d3906df68 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d3906df40 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d3906de00 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d3906e0d0 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x556d3906e098 <col:15, col:21> 'struct _dnode *' lvalue .head 0x556d39063d30
| | |     `-MemberExpr 0x556d3906e048 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | |       `-ImplicitCastExpr 0x556d3906e030 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x556d3906e008 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x556d3906dd58 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x556d3906e218 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d3906e1a0 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x556d39064068
| | | | `-MemberExpr 0x556d3906e150 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | | |   `-ImplicitCastExpr 0x556d3906e138 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d3906e110 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d3906de00 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d3906e200 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x556d3906e1d8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x556d3906dd58 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x556d3906e3e8 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d3906e370 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x556d39064068
| | | | `-MemberExpr 0x556d3906e320 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | | |   `-ImplicitCastExpr 0x556d3906e308 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x556d3906e2d0 <col:2, col:8> 'struct _dnode *' lvalue .head 0x556d39063d30
| | | |       `-MemberExpr 0x556d3906e280 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |         `-ImplicitCastExpr 0x556d3906e268 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x556d3906e240 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x556d3906dd58 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x556d3906e3d0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x556d3906e3a8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x556d3906de00 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x556d3906e518 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x556d3906e4a0 <col:2, col:8> 'struct _dnode *' lvalue .head 0x556d39063d30
| |   | `-MemberExpr 0x556d3906e450 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| |   |   `-ImplicitCastExpr 0x556d3906e438 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x556d3906e410 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x556d3906dd58 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x556d3906e500 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x556d3906e4d8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x556d3906de00 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391cab50 <line:413:3, line:420:14>
|   |-ParagraphComment 0x556d391ca780 <line:413:3>
|   | `-TextComment 0x556d391ca750 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ca7a0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x556d391ca800 <col:10, col:34>
|   |   `-TextComment 0x556d391ca7d0 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x556d391ca850 <line:415:3, col:62>
|   | `-TextComment 0x556d391ca820 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391ca8a0 <line:417:3>
|   | `-TextComment 0x556d391ca870 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ca8c0 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391ca970 <line:417:15, line:418:3>
|   |   |-TextComment 0x556d391ca920 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x556d391ca940 <line:418:3> Text=" "
|   |-ParamCommandComment 0x556d391ca990 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391caa20 <col:15, col:36>
|   |   `-TextComment 0x556d391ca9f0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x556d391caa70 <line:420:3>
|   | `-TextComment 0x556d391caa40 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391caa90 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391caaf0 <col:11, col:14>
|       `-TextComment 0x556d391caac0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d3906e6f0 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d3906e5a8 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x556d3906e618 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d3906edc8 <line:441:1, line:446:1>
| | |-BinaryOperator 0x556d3906e948 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d3906e830 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x556d39064068
| | | | `-MemberExpr 0x556d3906e7e0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | | |   `-ImplicitCastExpr 0x556d3906e7c8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d3906e7a0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d3906e618 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d3906e930 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x556d3906e8f8 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x556d39064068
| | |     `-MemberExpr 0x556d3906e8a8 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | |       `-ImplicitCastExpr 0x556d3906e890 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x556d3906e868 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x556d3906e5a8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x556d3906ea78 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d3906ea00 <col:2, col:8> 'struct _dnode *' lvalue .next 0x556d39063da0
| | | | `-MemberExpr 0x556d3906e9b0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |   `-ImplicitCastExpr 0x556d3906e998 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d3906e970 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d3906e618 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d3906ea60 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x556d3906ea38 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x556d3906e5a8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x556d3906ec48 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d3906ebd0 <col:2, col:19> 'struct _dnode *' lvalue .next 0x556d39063da0
| | | | `-MemberExpr 0x556d3906eb80 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |   `-ImplicitCastExpr 0x556d3906eb68 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x556d3906eb30 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x556d39064068
| | | |       `-MemberExpr 0x556d3906eae0 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | | |         `-ImplicitCastExpr 0x556d3906eac8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x556d3906eaa0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d3906e5a8 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d3906ec30 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x556d3906ec08 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x556d3906e618 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x556d3906ed78 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x556d3906ed00 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x556d39064068
| |   | `-MemberExpr 0x556d3906ecb0 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| |   |   `-ImplicitCastExpr 0x556d3906ec98 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x556d3906ec70 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d3906e5a8 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x556d3906ed60 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x556d3906ed38 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x556d3906e618 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391caee0 <line:433:3, line:438:36>
|   |-ParagraphComment 0x556d391cabf0 <line:433:3>
|   | `-TextComment 0x556d391cabc0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cac10 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x556d391cac70 <col:10, col:35>
|   |   `-TextComment 0x556d391cac40 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x556d391cacc0 <line:435:3, col:52>
|   | `-TextComment 0x556d391cac90 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x556d391cad10 <line:437:3>
|   | `-TextComment 0x556d391cace0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cad30 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x556d391cade0 <line:437:20, line:438:3>
|   |   |-TextComment 0x556d391cad90 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x556d391cadb0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x556d391cae00 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x556d391cae90 <col:15, col:36>
|       `-TextComment 0x556d391cae60 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x556d3906f2f0 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x556d3906ee20 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x556d3906ee90 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x556d3906f130 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x556d3906f1a8 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x556d39074fb8 <line:467:1, line:482:1>
| | `-IfStmt 0x556d39074f50 <line:468:2, line:481:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-CallExpr 0x556d3906f418 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x556d3906f400 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x556d3906f3b0 <col:6> 'bool (sys_dlist_t *)' Function 0x556d390695e0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x556d3906f448 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x556d3906f3d8 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x556d3906ee20 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x556d3906f5b8 <col:32, line:470:2>
| |   | `-CallExpr 0x556d3906f550 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x556d3906f538 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x556d3906f460 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x556d3906d640 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x556d3906f588 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x556d3906f488 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x556d3906ee20 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x556d3906f5a0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x556d3906f4b0 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x556d3906ee90 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x556d39074f28 <line:470:9, line:481:2>
| |     |-DeclStmt 0x556d3906f748 <line:471:3, col:47>
| |     | `-VarDecl 0x556d3906f5e0 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x556d3906f700 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x556d3906f6e8 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x556d3906f640 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x556d39069cf0 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x556d3906f730 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x556d3906f668 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x556d3906ee20 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x556d3906fb68 <line:473:3, line:475:3>
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x556d3906f9e0 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x556d3906f860 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x556d3906f838 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x556d3906f808 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x556d3906f760 <col:11> 'sys_dnode_t *' lvalue Var 0x556d3906f5e0 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x556d3906f820 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x556d3906f7e8 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x556d3906f7c0 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x556d3906f788 <col:23> 'int' 0
| |     | | `-ParenExpr 0x556d3906f9c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x556d3906f998 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x556d3906f910 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x556d3906f8f8 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x556d3906f880 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x556d3906f130 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x556d3906f948 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x556d3906f8a8 <col:33> 'sys_dnode_t *' lvalue Var 0x556d3906f5e0 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x556d3906f960 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x556d3906f8d0 <col:38> 'void *' lvalue ParmVar 0x556d3906f1a8 'data' 'void *'
| |     | |     `-IntegerLiteral 0x556d3906f978 <col:47> 'int' 0
| |     | `-CompoundStmt 0x556d3906fb50 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x556d3906fb28 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x556d3906fa08 <col:4> 'sys_dnode_t *' lvalue Var 0x556d3906f5e0 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x556d3906fac0 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x556d3906faa8 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x556d3906fa30 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x556d3906c210 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x556d3906faf8 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x556d3906fa58 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x556d3906ee20 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x556d3906fb10 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x556d3906fa80 <col:36> 'sys_dnode_t *' lvalue Var 0x556d3906f5e0 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x556d39074ef0 <line:476:3, line:480:3>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-BinaryOperator 0x556d3906fc60 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x556d3906fc30 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x556d3906fb88 <col:7> 'sys_dnode_t *' lvalue Var 0x556d3906f5e0 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x556d3906fc48 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x556d3906fc10 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x556d3906fbe8 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x556d3906fbb0 <col:23> 'int' 0
| |       |-CompoundStmt 0x556d3906fda8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x556d3906fd40 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x556d3906fd28 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x556d3906fc88 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x556d3906e6f0 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x556d3906fd78 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x556d3906fcb0 <col:21> 'sys_dnode_t *' lvalue Var 0x556d3906f5e0 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x556d3906fd90 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x556d3906fcd8 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x556d3906ee90 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x556d39074ed8 <line:478:10, line:480:3>
| |         `-CallExpr 0x556d39074e70 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x556d39074e58 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x556d3906fdc0 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x556d3906d640 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x556d39074ea8 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x556d3906fde8 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x556d3906ee20 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x556d39074ec0 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x556d39074e30 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x556d3906ee90 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391cb5a0 <line:449:3, line:462:14>
|   |-ParagraphComment 0x556d391caf80 <line:449:3>
|   | `-TextComment 0x556d391caf50 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cafa0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x556d391cb000 <col:10, col:33>
|   |   `-TextComment 0x556d391cafd0 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x556d391cb0c0 <line:451:3, line:454:62>
|   | |-TextComment 0x556d391cb020 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x556d391cb040 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x556d391cb060 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x556d391cb080 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391cb110 <line:456:3>
|   | `-TextComment 0x556d391cb0e0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cb130 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391cb1e0 <line:456:15, line:457:3>
|   |   |-TextComment 0x556d391cb190 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x556d391cb1b0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x556d391cb200 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391cb2b0 <line:457:15, line:458:3>
|   |   |-TextComment 0x556d391cb260 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x556d391cb280 <line:458:3> Text=" "
|   |-ParamCommandComment 0x556d391cb2d0 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x556d391cb3b0 <line:458:15, line:460:3>
|   |   |-TextComment 0x556d391cb330 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x556d391cb350 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x556d391cb370 <line:460:3> Text=" "
|   |-ParamCommandComment 0x556d391cb3d0 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x556d391cb460 <col:15, col:34>
|   |   `-TextComment 0x556d391cb430 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x556d391cb4b0 <line:462:3>
|   | `-TextComment 0x556d391cb480 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cb4d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391cb530 <col:11, col:14>
|       `-TextComment 0x556d391cb500 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d39075068 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x556d39074fe0 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x556d39075728 <line:496:1, line:500:1>
| | |-BinaryOperator 0x556d39075358 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d39075240 <col:2, col:14> 'struct _dnode *' lvalue .next 0x556d39063da0
| | | | `-MemberExpr 0x556d390751f0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |   `-ImplicitCastExpr 0x556d390751d8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x556d390751a0 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x556d39064068
| | | |       `-MemberExpr 0x556d39075150 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | | |         `-ImplicitCastExpr 0x556d39075138 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x556d39075110 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d39074fe0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d39075340 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x556d39075308 <col:21, col:27> 'struct _dnode *' lvalue .next 0x556d39063da0
| | |     `-MemberExpr 0x556d390752b8 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | |       `-ImplicitCastExpr 0x556d390752a0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x556d39075278 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x556d39074fe0 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x556d390755c8 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x556d390754b0 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x556d39064068
| | | | `-MemberExpr 0x556d39075460 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | | |   `-ImplicitCastExpr 0x556d39075448 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x556d39075410 <col:2, col:8> 'struct _dnode *' lvalue .next 0x556d39063da0
| | | |       `-MemberExpr 0x556d390753c0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | |         `-ImplicitCastExpr 0x556d390753a8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x556d39075380 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x556d39074fe0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x556d390755b0 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x556d39075578 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x556d39064068
| | |     `-MemberExpr 0x556d39075528 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x556d39064100
| | |       `-ImplicitCastExpr 0x556d39075510 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x556d390754e8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x556d39074fe0 'node' 'sys_dnode_t *'
| | `-CallExpr 0x556d390756b0 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x556d39075698 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x556d390755f0 <col:2> 'void (sys_dnode_t *)' Function 0x556d39064aa0 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x556d390756e0 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x556d39075618 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x556d39074fe0 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391cb970 <line:485:3, line:492:14>
|   |-ParagraphComment 0x556d391cb650 <line:485:3>
|   | `-TextComment 0x556d391cb620 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cb670 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d391cb6d0 <col:10, col:44>
|   |   `-TextComment 0x556d391cb6a0 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x556d391cb740 <line:487:3, line:488:62>
|   | |-TextComment 0x556d391cb6f0 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x556d391cb710 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391cb790 <line:490:3>
|   | `-TextComment 0x556d391cb760 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cb7b0 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391cb840 <col:15, col:33>
|   |   `-TextComment 0x556d391cb810 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x556d391cb890 <line:492:3>
|   | `-TextComment 0x556d391cb860 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cb8b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391cb910 <col:11, col:14>
|       `-TextComment 0x556d391cb8e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d390757e8 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x556d39075760 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x556d39075d38 <line:513:1, line:522:1>
| | |-DeclStmt 0x556d39075998 <line:514:2, col:26>
| | | `-VarDecl 0x556d390758a0 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x556d39075980 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x556d39075960 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x556d39075938 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x556d39075900 <col:23> 'int' 0
| | |-IfStmt 0x556d39075c80 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x556d39075a60 <line:516:6, col:30> 'int' prefix '!'
| | | | `-CallExpr 0x556d39075a18 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x556d39075a00 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x556d390759b0 <col:7> 'bool (sys_dlist_t *)' Function 0x556d390695e0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x556d39075a48 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d390759d8 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x556d39075760 'list' 'sys_dlist_t *'
| | | |-CompoundStmt 0x556d39075c60 <col:33, line:519:2>
| | | | |-BinaryOperator 0x556d39075b88 <line:517:3, col:16> 'sys_dnode_t *' '='
| | | | | |-DeclRefExpr 0x556d39075a80 <col:3> 'sys_dnode_t *' lvalue Var 0x556d390758a0 'node' 'sys_dnode_t *'
| | | | | `-ImplicitCastExpr 0x556d39075b70 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | | | |   `-MemberExpr 0x556d39075b38 <col:10, col:16> 'struct _dnode *' lvalue .head 0x556d39063d30
| | | | |     `-MemberExpr 0x556d39075ae8 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x556d39063e40
| | | | |       `-ImplicitCastExpr 0x556d39075ad0 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | | | |         `-DeclRefExpr 0x556d39075aa8 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x556d39075760 'list' 'sys_dlist_t *'
| | | | `-CallExpr 0x556d39075c18 <line:518:3, col:24> 'void'
| | | |   |-ImplicitCastExpr 0x556d39075c00 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x556d39075bb0 <col:3> 'void (sys_dnode_t *)' Function 0x556d39075068 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | | |   `-ImplicitCastExpr 0x556d39075c48 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d39075bd8 <col:20> 'sys_dnode_t *' lvalue Var 0x556d390758a0 'node' 'sys_dnode_t *'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x556d39075cf8 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x556d39075ce0 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x556d39075cb8 <col:9> 'sys_dnode_t *' lvalue Var 0x556d390758a0 'node' 'sys_dnode_t *'
| `-FullComment 0x556d391cbd10 <line:503:3, line:509:60>
|   |-ParagraphComment 0x556d391cba10 <line:503:3>
|   | `-TextComment 0x556d391cb9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cba30 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x556d391cba90 <col:10, col:38>
|   |   `-TextComment 0x556d391cba60 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x556d391cbae0 <line:505:3, col:62>
|   | `-TextComment 0x556d391cbab0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391cbb30 <line:507:3>
|   | `-TextComment 0x556d391cbb00 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cbb50 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391cbbe0 <col:15, col:51>
|   |   `-TextComment 0x556d391cbbb0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x556d391cbc30 <line:509:3>
|   | `-TextComment 0x556d391cbc00 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cbc50 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x556d391cbcb0 <col:11, col:60>
|       `-TextComment 0x556d391cbc80 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x556d39075d60 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x556d39078b50 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x556d39078e28 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x556d39078dc0 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x556d39078d60 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x556d39078d20 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x556d38f8a9a0 'bool'
| |     |-PointerType 0x556d39078a70 'struct rbnode *'
| |     | `-ElaboratedType 0x556d39078a10 'struct rbnode' sugar
| |     |   `-RecordType 0x556d39075df0 'struct rbnode'
| |     |     `-Record 0x556d39075d60 'rbnode'
| |     `-PointerType 0x556d39078a70 'struct rbnode *'
| |       `-ElaboratedType 0x556d39078a10 'struct rbnode' sugar
| |         `-RecordType 0x556d39075df0 'struct rbnode'
| |           `-Record 0x556d39075d60 'rbnode'
| `-FullComment 0x556d391cc070 <line:62:3, line:72:36>
|   |-ParagraphComment 0x556d391cbdb0 <line:62:3>
|   | `-TextComment 0x556d391cbd80 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d391cbdd0 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x556d391cbe40 <line:63:3>
|   | `-TextComment 0x556d391cbe10 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cbe60 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x556d391cbec0 <col:10, col:45>
|   |   `-TextComment 0x556d391cbe90 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x556d391cbf30 <line:65:3, line:66:68>
|   | |-TextComment 0x556d391cbee0 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x556d391cbf00 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x556d391cc020 <line:68:3, line:72:36>
|     |-TextComment 0x556d391cbf50 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x556d391cbf70 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x556d391cbf90 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x556d391cbfb0 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x556d391cbfd0 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x556d39078e80 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x556d39078f58 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x556d39078fd0 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x556d39079030 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x556d390792c8 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x556d39079260 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x556d39079200 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x556d390791c0 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x556d38f8a980 'void'
|       |-PointerType 0x556d39078a70 'struct rbnode *'
|       | `-ElaboratedType 0x556d39078a10 'struct rbnode' sugar
|       |   `-RecordType 0x556d39075df0 'struct rbnode'
|       |     `-Record 0x556d39075d60 'rbnode'
|       `-PointerType 0x556d38f8ae20 'void *'
|         `-BuiltinType 0x556d38f8a980 'void'
|-FunctionDecl 0x556d390794e8 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x556d39079348 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x556d390793c0 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x556d390796c8 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x556d390795c0 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x556d3907a720 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x556d39079798 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x556d39079830 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x556d390798a8 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x556d3907aa38 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x556d3907a890 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x556d3907a908 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x556d3907ace0 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x556d3907ab40 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x556d3907abc8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x556d391cc1c0 <line:96:3, col:31>
|   |-ParagraphComment 0x556d391cc110 <col:3>
|   | `-TextComment 0x556d391cc0e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cc130 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x556d391cc190 <col:10, col:31>
|       `-TextComment 0x556d391cc160 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x556d3907aef8 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x556d3907ade0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x556d3907ae68 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x556d391cc310 <line:101:3, col:31>
|   |-ParagraphComment 0x556d391cc260 <col:3>
|   | `-TextComment 0x556d391cc230 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cc280 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x556d391cc2e0 <col:10, col:31>
|       `-TextComment 0x556d391cc2b0 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x556d3907b118 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x556d3907b000 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x556d3907b338 <line:109:1, line:111:1>
| | `-ReturnStmt 0x556d3907b2f0 <line:110:2, col:32>
| |   `-CallExpr 0x556d3907b2a0 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x556d3907b288 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d3907b1c0 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x556d3907aa38 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x556d3907b2d8 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3907b1e8 <col:25> 'struct rbtree *' lvalue ParmVar 0x556d3907b000 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x556d3907b210 <col:31> 'int' 0
| `-FullComment 0x556d391cc460 <line:106:3, col:54>
|   |-ParagraphComment 0x556d391cc3b0 <col:3>
|   | `-TextComment 0x556d391cc380 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cc3d0 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x556d391cc430 <col:10, col:54>
|       `-TextComment 0x556d391cc400 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x556d3907b418 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x556d3907b378 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x556d3907b5d8 <line:117:1, line:119:1>
| | `-ReturnStmt 0x556d3907b598 <line:118:2, col:32>
| |   `-CallExpr 0x556d3907b548 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x556d3907b530 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d3907b4c0 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x556d3907aa38 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x556d3907b580 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3907b4e8 <col:25> 'struct rbtree *' lvalue ParmVar 0x556d3907b378 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x556d3907b510 <col:31> 'int' 1
| `-FullComment 0x556d391cc5b0 <line:114:3, col:55>
|   |-ParagraphComment 0x556d391cc500 <col:3>
|   | `-TextComment 0x556d391cc4d0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cc520 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x556d391cc580 <col:10, col:55>
|       `-TextComment 0x556d391cc550 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x556d3907b920 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x556d3907b618 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x556d3907b6a0 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x556d391cc800 <line:122:3, line:128:10>
|   |-ParagraphComment 0x556d391cc650 <line:122:3>
|   | `-TextComment 0x556d391cc620 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cc670 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x556d391cc6d0 <col:10, col:60>
|   |   `-TextComment 0x556d391cc6a0 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x556d391cc7c0 <line:124:3, line:128:10>
|     |-TextComment 0x556d391cc6f0 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x556d391cc710 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x556d391cc730 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x556d391cc750 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x556d391cc770 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x556d3907bc40 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x556d3907ba20 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x556d3907ba90 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x556d3907bb08 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x556d3907bee8 <line:143:1, line:145:1>
| | `-CallExpr 0x556d3907be60 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x556d3907be48 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x556d3907bcf8 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x556d3907a720 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x556d3907bea0 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x556d3907bd60 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x556d39078f58
| |   |   `-ImplicitCastExpr 0x556d3907bd48 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x556d3907bd20 <col:12> 'struct rbtree *' lvalue ParmVar 0x556d3907ba20 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x556d3907beb8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x556d3907bd98 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x556d3907ba90 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x556d3907bed0 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x556d3907bdc0 <col:34> 'void *' lvalue ParmVar 0x556d3907bb08 'cookie' 'void *'
| `-FullComment 0x556d391cca20 <line:134:3, line:139:18>
|   |-ParagraphComment 0x556d391cc8a0 <line:134:3>
|   | `-TextComment 0x556d391cc870 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cc8c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x556d391cc920 <col:10, col:33>
|   |   `-TextComment 0x556d391cc8f0 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x556d391cc9e0 <line:136:3, line:139:18>
|     |-TextComment 0x556d391cc940 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x556d391cc960 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x556d391cc980 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x556d391cc9a0 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x556d3907bf00 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x556d3907c030 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x556d3907c090 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x556d3907c0f0 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x556d3907c398 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x556d3907c160 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x556d3907c270 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x556d3907c508 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x556d3907c768 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x556d3907c5c0 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x556d3907eae0 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x556d3907e940 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x556d3907e9c8 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x556d3907ecb8 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x556d3907eba0 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x556d3907ec28 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x556d3907ed68 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x556d3907ee30 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x556d3907ee90 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x556d3907f180 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x556d3907efe0 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x556d3907f068 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x556d3907f370 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x556d3907f258 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x556d3907f2e0 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x556d3907f568 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x556d3907f448 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x556d3907f610 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x556d3907f818 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x556d3907f878 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x556d3907fb40 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x556d3907f9a0 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x556d3907fa28 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x556d3907fd30 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x556d3907fc18 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x556d3907fca0 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x556d3907ff28 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x556d3907fe08 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x556d3907fff8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x556d39080150 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x556d390801b8 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x556d390800a0 'struct _snode' sugar
|   `-RecordType 0x556d39080080 'struct _snode'
|     `-Record 0x556d3907fff8 '_snode'
|-RecordDecl 0x556d39080210 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x556d39080318 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x556d39080370 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x556d39080410 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x556d390803c0 'struct _slist' sugar
|   `-RecordType 0x556d390802a0 'struct _slist'
|     `-Record 0x556d39080210 '_slist'
|-FunctionDecl 0x556d39080720 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d39080618 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x556d390959c8 <line:191:1, line:194:1>
| | |-BinaryOperator 0x556d390808d8 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x556d39080808 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x556d39080318
| | | | `-ImplicitCastExpr 0x556d390807f0 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x556d390807c8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x556d39080618 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x556d390808c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x556d390808a0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x556d39080878 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x556d39080840 <col:23> 'int' 0
| | `-BinaryOperator 0x556d390959a0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x556d390958d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x556d39080370
| |   | `-ImplicitCastExpr 0x556d39080928 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x556d39080900 <col:2> 'sys_slist_t *' lvalue ParmVar 0x556d39080618 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x556d39095988 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x556d39095968 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x556d39095940 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x556d39095908 <col:23> 'int' 0
| `-FullComment 0x556d391ccc80 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x556d391ccac0 <line:186:3>
|   | `-TextComment 0x556d391cca90 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ccae0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x556d391ccb40 <col:10, col:27>
|   |   `-TextComment 0x556d391ccb10 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x556d391ccb90 <line:188:3>
|   | `-TextComment 0x556d391ccb60 <col:3> Text=" "
|   `-ParamCommandComment 0x556d391ccbb0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x556d391ccc40 <col:15, col:50>
|       `-TextComment 0x556d391ccc10 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x556d39095b00 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d390959f8 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d39095c50 <line:199:1, line:201:1>
|   `-ReturnStmt 0x556d39095c38 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x556d39095c20 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x556d39095be8 <col:9, col:15> 'struct _snode *' lvalue ->next 0x556d39080150
|         `-ImplicitCastExpr 0x556d39095bd0 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x556d39095ba8 <col:9> 'sys_snode_t *' lvalue ParmVar 0x556d390959f8 'node' 'sys_snode_t *'
|-FunctionDecl 0x556d39095e00 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d39095c78 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x556d39095ce8 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x556d39095f90 <line:204:1, line:206:1>
|   `-BinaryOperator 0x556d39095f68 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x556d39095ef0 <col:2, col:10> 'struct _snode *' lvalue ->next 0x556d39080150
|     | `-ImplicitCastExpr 0x556d39095ed8 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x556d39095eb0 <col:2> 'sys_snode_t *' lvalue ParmVar 0x556d39095c78 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x556d39095f50 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39095f28 <col:17> 'sys_snode_t *' lvalue ParmVar 0x556d39095ce8 'child' 'sys_snode_t *'
|-FunctionDecl 0x556d39096140 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d39095fb8 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x556d39096028 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d390962d0 <line:209:1, line:211:1>
|   `-BinaryOperator 0x556d390962a8 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x556d39096230 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x556d39080318
|     | `-ImplicitCastExpr 0x556d39096218 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x556d390961f0 <col:2> 'sys_slist_t *' lvalue ParmVar 0x556d39095fb8 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x556d39096290 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39096268 <col:15> 'sys_snode_t *' lvalue ParmVar 0x556d39096028 'node' 'sys_snode_t *'
|-FunctionDecl 0x556d390963f8 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d390962f8 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x556d39096368 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d390965b8 <line:214:1, line:216:1>
|   `-BinaryOperator 0x556d39096560 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x556d390964e8 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x556d39080370
|     | `-ImplicitCastExpr 0x556d390964d0 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x556d390964a8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x556d390962f8 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x556d39096548 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39096520 <col:15> 'sys_snode_t *' lvalue ParmVar 0x556d39096368 'node' 'sys_snode_t *'
|-FunctionDecl 0x556d390966e0 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d390965e0 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x556d39096858 <line:226:1, line:228:1>
| | `-ReturnStmt 0x556d39096818 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x556d39096800 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x556d390967c8 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x556d39080318
| |       `-ImplicitCastExpr 0x556d390967b0 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d39096788 <col:9> 'sys_slist_t *' lvalue ParmVar 0x556d390965e0 'list' 'sys_slist_t *'
| `-FullComment 0x556d391ccfc0 <line:219:3, line:223:68>
|   |-ParagraphComment 0x556d391ccd20 <line:219:3>
|   | `-TextComment 0x556d391cccf0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ccd40 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391ccda0 <col:10, col:43>
|   |   `-TextComment 0x556d391ccd70 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x556d391ccdf0 <line:221:3>
|   | `-TextComment 0x556d391ccdc0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cce10 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391ccea0 <col:15, col:62>
|   |   `-TextComment 0x556d391cce70 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x556d391ccef0 <line:223:3>
|   | `-TextComment 0x556d391ccec0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ccf10 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x556d391ccf70 <col:11, col:68>
|       `-TextComment 0x556d391ccf40 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x556d390969c8 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d39096940 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x556d39096b48 <line:238:1, line:240:1>
| | `-ReturnStmt 0x556d39096b00 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x556d39096ae8 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x556d39096ab0 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x556d39080370
| |       `-ImplicitCastExpr 0x556d39096a98 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d39096a70 <col:9> 'sys_slist_t *' lvalue ParmVar 0x556d39096940 'list' 'sys_slist_t *'
| `-FullComment 0x556d391cd300 <line:231:3, line:235:67>
|   |-ParagraphComment 0x556d391cd060 <line:231:3>
|   | `-TextComment 0x556d391cd030 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cd080 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d391cd0e0 <col:10, col:42>
|   |   `-TextComment 0x556d391cd0b0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x556d391cd130 <line:233:3>
|   | `-TextComment 0x556d391cd100 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cd150 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391cd1e0 <col:15, col:61>
|   |   `-TextComment 0x556d391cd1b0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x556d391cd230 <line:235:3>
|   | `-TextComment 0x556d391cd200 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cd250 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x556d391cd2b0 <col:11, col:67>
|       `-TextComment 0x556d391cd280 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x556d39096c70 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d39096b70 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x556d391cd650 <line:247:3, line:251:57>
|   |-ParagraphComment 0x556d391cd3a0 <line:247:3>
|   | `-TextComment 0x556d391cd370 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cd3c0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d391cd420 <col:10, col:41>
|   |   `-TextComment 0x556d391cd3f0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x556d391cd470 <line:249:3>
|   | `-TextComment 0x556d391cd440 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cd490 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391cd520 <col:15, col:44>
|   |   `-TextComment 0x556d391cd4f0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x556d391cd570 <line:251:3>
|   | `-TextComment 0x556d391cd540 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cd590 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x556d391cd600 <col:11, col:57>
|       `-TextComment 0x556d391cd5c0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x556d39096db0 prev 0x556d39096c70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d39096d28 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x556d390970a8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x556d39097060 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x556d39097048 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x556d39097028 <col:10, col:54> 'int'
|         `-BinaryOperator 0x556d39097000 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x556d39096f20 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x556d39096f08 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x556d39096e58 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390966e0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x556d39096f50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x556d39096e80 <col:41> 'sys_slist_t *' lvalue ParmVar 0x556d39096d28 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x556d39096fe8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x556d39096fc8 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x556d39096fa0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x556d39096f68 <col:23> 'int' 0
|-FunctionDecl 0x556d39097158 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d390970d0 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x556d391cd9f0 <line:258:3, line:264:55>
|   |-ParagraphComment 0x556d391cd6f0 <line:258:3>
|   | `-TextComment 0x556d391cd6c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cd710 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x556d391cd770 <col:10, col:64>
|   |   `-TextComment 0x556d391cd740 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x556d391cd7c0 <line:260:3, col:69>
|   | `-TextComment 0x556d391cd790 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x556d391cd810 <line:262:3>
|   | `-TextComment 0x556d391cd7e0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cd830 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391cd8c0 <col:15, col:64>
|   |   `-TextComment 0x556d391cd890 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x556d391cd910 <line:264:3>
|   | `-TextComment 0x556d391cd8e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cd930 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x556d391cd990 <col:11, col:55>
|       `-TextComment 0x556d391cd960 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x556d39097298 prev 0x556d39097158 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d39097210 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d39097488 <line:67:2, line:69:2>
|   `-ReturnStmt 0x556d39097448 <line:68:3, col:42>
|     `-CallExpr 0x556d39097400 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x556d390973e8 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39097340 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x556d39095b00 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x556d39097430 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39097368 <col:38> 'sys_snode_t *' lvalue ParmVar 0x556d39097210 'node' 'sys_snode_t *'
|-FunctionDecl 0x556d39097538 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d390974b0 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x556d391cdd30 <line:271:3, line:275:55>
|   |-ParagraphComment 0x556d391cda90 <line:271:3>
|   | `-TextComment 0x556d391cda60 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cdab0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x556d391cdb10 <col:10, col:46>
|   |   `-TextComment 0x556d391cdae0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x556d391cdb60 <line:273:3>
|   | `-TextComment 0x556d391cdb30 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cdb80 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391cdc10 <col:15, col:64>
|   |   `-TextComment 0x556d391cdbe0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x556d391cdc60 <line:275:3>
|   | `-TextComment 0x556d391cdc30 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cdc80 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x556d391cdce0 <col:11, col:55>
|       `-TextComment 0x556d391cdcb0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x556d39097678 prev 0x556d39097538 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d390975f0 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d39099068 <line:74:2, line:78:2>
|   `-ReturnStmt 0x556d39099028 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x556d39098ff8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x556d390977f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x556d390977c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x556d39097720 <col:10> 'sys_snode_t *' lvalue ParmVar 0x556d390975f0 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x556d390977e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x556d390977a8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x556d39097780 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x556d39097748 <col:23> 'int' 0
|       |-CallExpr 0x556d39097888 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x556d39097870 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x556d39097820 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x556d39097298 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x556d390978b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x556d39097848 <col:43> 'sys_snode_t *' lvalue ParmVar 0x556d390975f0 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x556d39098fe0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x556d39098fc0 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x556d39097908 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x556d390978d0 <col:23> 'int' 0
|-FunctionDecl 0x556d39099190 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d39099090 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x556d39099100 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x556d391ce0c0 <line:282:3, line:287:47>
|   |-ParagraphComment 0x556d391cddd0 <line:282:3>
|   | `-TextComment 0x556d391cdda0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cddf0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d391cde50 <col:10, col:42>
|   |   `-TextComment 0x556d391cde20 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x556d391cdea0 <line:284:3, col:62>
|   | `-TextComment 0x556d391cde70 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391cdef0 <line:286:3>
|   | `-TextComment 0x556d391cdec0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cdf10 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391cdfc0 <line:286:15, line:287:3>
|   |   |-TextComment 0x556d391cdf70 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391cdf90 <line:287:3> Text=" "
|   `-ParamCommandComment 0x556d391cdfe0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x556d391ce070 <col:15, col:47>
|       `-TextComment 0x556d391ce040 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x556d39099350 prev 0x556d39099190 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d39099250 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x556d390992c0 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d39099a68 <line:84:2, line:93:2>
|   |-CallExpr 0x556d39099570 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x556d39099558 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d39099400 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x556d39095e00 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x556d390995a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d39099428 <col:30> 'sys_snode_t *' lvalue ParmVar 0x556d390992c0 'node' 'sys_snode_t *'
|   | `-CallExpr 0x556d390994b8 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x556d390994a0 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x556d39099450 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390966e0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x556d390994e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d39099478 <col:36> 'sys_slist_t *' lvalue ParmVar 0x556d39099250 'list' 'sys_slist_t *'
|   |-CallExpr 0x556d390996b0 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x556d39099698 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d390995c0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d39096140 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x556d390996e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d390995e8 <col:30> 'sys_slist_t *' lvalue ParmVar 0x556d39099250 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x556d39099700 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x556d39099610 <col:36> 'sys_snode_t *' lvalue ParmVar 0x556d390992c0 'node' 'sys_snode_t *'
|   `-IfStmt 0x556d39099a08 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x556d39099860 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x556d39099780 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x556d39099768 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x556d39099718 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390969c8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x556d390997b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x556d39099740 <col:37> 'sys_slist_t *' lvalue ParmVar 0x556d39099250 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x556d39099848 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x556d39099828 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x556d39099800 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x556d390997c8 <col:23> 'int' 0
|     |-CompoundStmt 0x556d390999f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x556d390999a0 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x556d39099988 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x556d39099888 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d390963f8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x556d390999d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x556d390998b0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x556d39099250 'list' 'sys_slist_t *'
|     |   `-CallExpr 0x556d39099940 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|     |     |-ImplicitCastExpr 0x556d39099928 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x556d390998d8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390966e0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|     |     `-ImplicitCastExpr 0x556d39099970 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x556d39099900 <col:36> 'sys_slist_t *' lvalue ParmVar 0x556d39099250 'list' 'sys_slist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x556d39099ba0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d39099aa0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x556d39099b10 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x556d391ce450 <line:295:3, line:300:46>
|   |-ParagraphComment 0x556d391ce160 <line:295:3>
|   | `-TextComment 0x556d391ce130 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ce180 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d391ce1e0 <col:10, col:41>
|   |   `-TextComment 0x556d391ce1b0 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x556d391ce230 <line:297:3, col:62>
|   | `-TextComment 0x556d391ce200 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391ce280 <line:299:3>
|   | `-TextComment 0x556d391ce250 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ce2a0 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391ce350 <line:299:15, line:300:3>
|   |   |-TextComment 0x556d391ce300 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391ce320 <line:300:3> Text=" "
|   `-ParamCommandComment 0x556d391ce370 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x556d391ce400 <col:15, col:46>
|       `-TextComment 0x556d391ce3d0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x556d39099d60 prev 0x556d39099ba0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d39099c60 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x556d39099cd0 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d3909b298 <line:99:2, line:111:2>
|   |-CallExpr 0x556d39099ef8 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x556d39099ee0 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d39099e10 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x556d39095e00 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x556d39099f30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d39099e38 <col:30> 'sys_snode_t *' lvalue ParmVar 0x556d39099cd0 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x556d39099f48 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x556d39099ec0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x556d39099e98 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x556d39099e60 <col:23> 'int' 0
|   `-IfStmt 0x556d3909b230 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x556d3909ad78 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x556d3909ac98 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x556d3909ac80 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x556d39099f60 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390969c8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x556d3909acc8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x556d39099f88 <col:37> 'sys_slist_t *' lvalue ParmVar 0x556d39099c60 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x556d3909ad60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x556d3909ad40 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x556d3909ad18 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x556d3909ace0 <col:23> 'int' 0
|     |-CompoundStmt 0x556d3909af90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x556d3909ae30 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x556d3909ae18 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x556d3909ada0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d390963f8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x556d3909ae68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x556d3909adc8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x556d39099c60 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x556d3909ae80 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x556d3909adf0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x556d39099cd0 'node' 'sys_snode_t *'
|     | `-CallExpr 0x556d3909af28 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x556d3909af10 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x556d3909ae98 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d39096140 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x556d3909af60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x556d3909aec0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x556d39099c60 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x556d3909af78 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x556d3909aee8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x556d39099cd0 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x556d3909b210 <line:105:10, line:110:3>
|       |-CallExpr 0x556d3909b0c8 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x556d3909b0b0 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x556d3909afb0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x556d39095e00 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x556d3909b040 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x556d3909b028 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x556d3909afd8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390969c8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x556d3909b070 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x556d3909b000 <col:35> 'sys_slist_t *' lvalue ParmVar 0x556d39099c60 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x556d3909b100 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x556d3909b088 <col:5> 'sys_snode_t *' lvalue ParmVar 0x556d39099cd0 'node' 'sys_snode_t *'
|       `-CallExpr 0x556d3909b1a8 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x556d3909b190 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x556d3909b118 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d390963f8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x556d3909b1e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x556d3909b140 <col:31> 'sys_slist_t *' lvalue ParmVar 0x556d39099c60 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x556d3909b1f8 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x556d3909b168 <col:37> 'sys_snode_t *' lvalue ParmVar 0x556d39099cd0 'node' 'sys_snode_t *'
|-FunctionDecl 0x556d3909b4f0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x556d3909b2c8 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x556d3909b340 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x556d3909b3b8 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x556d391ce9b0 <line:308:3, line:318:66>
|   |-ParagraphComment 0x556d391ce4f0 <line:308:3>
|   | `-TextComment 0x556d391ce4c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ce510 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d391ce570 <col:10, col:41>
|   |   `-TextComment 0x556d391ce540 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x556d391ce660 <line:310:3, line:312:62>
|   | |-TextComment 0x556d391ce590 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x556d391ce5b0 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x556d391ce600 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x556d391ce620 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391ce6b0 <line:314:3, col:48>
|   | `-TextComment 0x556d391ce680 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x556d391ce700 <line:316:3>
|   | `-TextComment 0x556d391ce6d0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ce720 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391ce7d0 <line:316:15, line:317:3>
|   |   |-TextComment 0x556d391ce780 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391ce7a0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x556d391ce7f0 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x556d391ce8a0 <line:317:15, line:318:3>
|   |   |-TextComment 0x556d391ce850 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x556d391ce870 <line:318:3> Text=" "
|   `-ParamCommandComment 0x556d391ce8c0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x556d391ce950 <col:15, col:66>
|       `-TextComment 0x556d391ce920 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x556d3909b740 prev 0x556d3909b4f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x556d3909b5b8 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x556d3909b630 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x556d3909b6a8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x556d3909be28 <col:31, line:127:42>
|   |-IfStmt 0x556d3909bc90 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x556d3909b940 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x556d3909b860 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x556d3909b848 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x556d3909b7f8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390969c8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x556d3909b890 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x556d3909b820 <col:36> 'sys_slist_t *' lvalue ParmVar 0x556d3909b5b8 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x556d3909b928 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x556d3909b908 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x556d3909b8e0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x556d3909b8a8 <col:23> 'int' 0
|   | |-CompoundStmt 0x556d3909ba98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x556d3909ba48 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x556d3909ba30 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x556d3909b968 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d39096140 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x556d3909ba80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x556d3909b990 <col:30> 'sys_slist_t *' lvalue ParmVar 0x556d3909b5b8 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x556d3909ba08 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x556d3909b9f0 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x556d3909b9b8 <col:31> 'void *' lvalue ParmVar 0x556d3909b630 'head' 'void *'
|   | `-CompoundStmt 0x556d3909bc50 <line:121:9, line:125:2>
|   |   `-CallExpr 0x556d3909bc18 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x556d3909bc00 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556d3909bab0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x556d39095e00 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x556d3909bb40 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x556d3909bb28 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x556d3909bad8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390969c8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x556d3909bb70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556d3909bb00 <col:34> 'sys_slist_t *' lvalue ParmVar 0x556d3909b5b8 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x556d3909bbd8 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x556d3909bbc0 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x556d3909bb88 <col:29> 'void *' lvalue ParmVar 0x556d3909b630 'head' 'void *'
|   `-CallExpr 0x556d3909bda8 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x556d3909bd90 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d3909bcc8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d390963f8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x556d3909bde0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d3909bcf0 <col:29> 'sys_slist_t *' lvalue ParmVar 0x556d3909b5b8 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x556d3909bd68 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x556d3909bd50 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x556d3909bd18 <col:35> 'void *' lvalue ParmVar 0x556d3909b6a8 'tail' 'void *'
|-FunctionDecl 0x556d3909bfe0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d3909be58 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x556d3909bec8 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x556d391ced60 <line:326:3, line:332:57>
|   |-ParagraphComment 0x556d391cea50 <line:326:3>
|   | `-TextComment 0x556d391cea20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cea70 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x556d391cead0 <col:10, col:65>
|   |   `-TextComment 0x556d391ceaa0 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x556d391ceb40 <line:328:3, line:329:62>
|   | |-TextComment 0x556d391ceaf0 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x556d391ceb10 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391ceb90 <line:331:3>
|   | `-TextComment 0x556d391ceb60 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cebb0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391cec60 <line:331:15, line:332:3>
|   |   |-TextComment 0x556d391cec10 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391cec30 <line:332:3> Text=" "
|   `-ParamCommandComment 0x556d391cec80 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x556d391ced10 <col:25, col:57>
|       `-TextComment 0x556d391cece0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x556d3909c1a0 prev 0x556d3909bfe0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d3909c0a0 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x556d3909c110 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x556d3909c868 <line:135:2, line:141:2>
|   |-DeclStmt 0x556d3909c348 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x556d3909c260 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x556d3909c2d0 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x556d3909c438 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x556d3909c360 <col:3> 'sys_snode_t *' lvalue Var 0x556d3909c260 'head' 'sys_snode_t *'
|   | `-CallExpr 0x556d3909c3f0 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x556d3909c3d8 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x556d3909c388 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390966e0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x556d3909c420 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d3909c3b0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x556d3909c110 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x556d3909c538 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x556d3909c460 <col:3> 'sys_snode_t *' lvalue Var 0x556d3909c2d0 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x556d3909c4f0 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x556d3909c4d8 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x556d3909c488 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390969c8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x556d3909c520 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d3909c4b0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x556d3909c110 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x556d3909c670 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x556d3909c658 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d3909c560 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x556d3909b740 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x556d3909c6b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d3909c588 <col:35> 'sys_slist_t *' lvalue ParmVar 0x556d3909c0a0 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x556d3909c6e0 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x556d3909c6c8 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x556d3909c5b0 <col:41> 'sys_snode_t *' lvalue Var 0x556d3909c260 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x556d3909c710 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x556d3909c6f8 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d3909c5d8 <col:47> 'sys_snode_t *' lvalue Var 0x556d3909c2d0 'tail' 'sys_snode_t *'
|   `-CallExpr 0x556d3909c7f0 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x556d3909c7d8 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d3909c728 <col:1> 'void (sys_slist_t *)' Function 0x556d39080720 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x556d3909c820 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556d3909c750 <col:28> 'sys_slist_t *' lvalue ParmVar 0x556d3909c110 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x556d3909cac0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d3909c8b0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x556d3909c920 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x556d3909c990 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x556d391cf1d0 <line:340:3, line:346:46>
|   |-ParagraphComment 0x556d391cee00 <line:340:3>
|   | `-TextComment 0x556d391cedd0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cee20 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d391cee80 <col:10, col:41>
|   |   `-TextComment 0x556d391cee50 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x556d391ceed0 <line:342:3, col:62>
|   | `-TextComment 0x556d391ceea0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391cef20 <line:344:3>
|   | `-TextComment 0x556d391ceef0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cef40 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391ceff0 <line:344:15, line:345:3>
|   |   |-TextComment 0x556d391cefa0 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391cefc0 <line:345:3> Text=" "
|   |-ParamCommandComment 0x556d391cf010 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x556d391cf0c0 <line:345:15, line:346:3>
|   |   |-TextComment 0x556d391cf070 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x556d391cf090 <line:346:3> Text=" "
|   `-ParamCommandComment 0x556d391cf0e0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x556d391cf170 <col:15, col:46>
|       `-TextComment 0x556d391cf140 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x556d3909fd28 prev 0x556d3909cac0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d3909cb88 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x556d3909cbf8 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x556d3909fc90 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d390a0588 <line:148:2, line:158:2>
|   `-IfStmt 0x556d390a0528 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x556d3909feb8 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x556d3909fe88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x556d3909fde0 <col:7> 'sys_snode_t *' lvalue ParmVar 0x556d3909cbf8 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x556d3909fea0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x556d3909fe68 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x556d3909fe40 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x556d3909fe08 <col:23> 'int' 0
|     |-CompoundStmt 0x556d3909ffd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x556d3909ff70 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x556d3909ff58 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x556d3909fee0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d39099350 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x556d3909ffa8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x556d3909ff08 <col:32> 'sys_slist_t *' lvalue ParmVar 0x556d3909cb88 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x556d3909ffc0 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x556d3909ff30 <col:38> 'sys_snode_t *' lvalue ParmVar 0x556d3909fc90 'node' 'sys_snode_t *'
|     `-IfStmt 0x556d390a04f0 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x556d390a0138 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x556d390a0058 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x556d390a0040 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x556d3909fff0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x556d39095b00 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x556d390a0088 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x556d390a0018 <col:42> 'sys_snode_t *' lvalue ParmVar 0x556d3909cbf8 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x556d390a0120 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x556d390a0100 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x556d390a00d8 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x556d390a00a0 <col:23> 'int' 0
|       |-CompoundStmt 0x556d390a0258 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x556d390a01f0 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x556d390a01d8 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x556d390a0160 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d39099d60 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x556d390a0228 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x556d390a0188 <col:31> 'sys_slist_t *' lvalue ParmVar 0x556d3909cb88 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x556d390a0240 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x556d390a01b0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x556d3909fc90 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x556d390a04d0 <line:153:10, line:157:3>
|         |-CallExpr 0x556d390a0388 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x556d390a0370 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x556d390a0270 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x556d39095e00 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x556d390a03c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x556d390a0298 <col:31> 'sys_snode_t *' lvalue ParmVar 0x556d3909fc90 'node' 'sys_snode_t *'
|         | `-CallExpr 0x556d390a0328 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x556d390a0310 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x556d390a02c0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x556d39095b00 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x556d390a0358 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x556d390a02e8 <col:33> 'sys_snode_t *' lvalue ParmVar 0x556d3909cbf8 'prev' 'sys_snode_t *'
|         `-CallExpr 0x556d390a0468 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x556d390a0450 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x556d390a03d8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x556d39095e00 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x556d390a04a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x556d390a0400 <col:31> 'sys_snode_t *' lvalue ParmVar 0x556d3909cbf8 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x556d390a04b8 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x556d390a0428 <col:37> 'sys_snode_t *' lvalue ParmVar 0x556d3909fc90 'node' 'sys_snode_t *'
|-FunctionDecl 0x556d390a0638 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d390a05b0 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x556d391cf590 <line:355:3, line:362:50>
|   |-ParagraphComment 0x556d391cf270 <line:355:3>
|   | `-TextComment 0x556d391cf240 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cf290 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x556d391cf2f0 <col:10, col:59>
|   |   `-TextComment 0x556d391cf2c0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x556d391cf360 <line:357:3, line:358:62>
|   | |-TextComment 0x556d391cf310 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x556d391cf330 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391cf3b0 <line:360:3>
|   | `-TextComment 0x556d391cf380 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cf3d0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391cf460 <col:15, col:46>
|   |   `-TextComment 0x556d391cf430 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x556d391cf4b0 <line:362:3>
|   | `-TextComment 0x556d391cf480 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cf4d0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x556d391cf530 <col:11, col:50>
|       `-TextComment 0x556d391cf500 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x556d390a0778 prev 0x556d390a0638 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d390a06f0 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x556d390a0e28 <line:163:2, line:175:2>
|   |-DeclStmt 0x556d390a0940 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x556d390a0830 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x556d390a08f8 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x556d390a08e0 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556d390a0890 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390966e0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x556d390a0928 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x556d390a08b8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x556d390a06f0 'list' 'sys_slist_t *'
|   |-CallExpr 0x556d390a0a70 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x556d390a0a58 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d390a0958 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d39096140 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x556d390a0aa8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d390a0980 <col:30> 'sys_slist_t *' lvalue ParmVar 0x556d390a06f0 'list' 'sys_slist_t *'
|   | `-CallExpr 0x556d390a0a10 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x556d390a09f8 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x556d390a09a8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x556d39095b00 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x556d390a0a40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d390a09d0 <col:33> 'sys_snode_t *' lvalue Var 0x556d390a0830 'node' 'sys_snode_t *'
|   |-IfStmt 0x556d390a0d68 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x556d390a0bb0 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x556d390a0b28 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x556d390a0b10 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x556d390a0ac0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390969c8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x556d390a0b58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x556d390a0ae8 <col:37> 'sys_slist_t *' lvalue ParmVar 0x556d390a06f0 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x556d390a0b98 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x556d390a0b70 <col:46> 'sys_snode_t *' lvalue Var 0x556d390a0830 'node' 'sys_snode_t *'
|   | |-CompoundStmt 0x556d390a0d50 <col:52, line:172:3>
|   | | `-CallExpr 0x556d390a0d00 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x556d390a0ce8 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x556d390a0bd8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d390963f8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x556d390a0d38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x556d390a0c00 <col:31> 'sys_slist_t *' lvalue ParmVar 0x556d390a06f0 'list' 'sys_slist_t *'
|   | |   `-CallExpr 0x556d390a0ca0 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   | |     |-ImplicitCastExpr 0x556d390a0c78 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x556d390a0c28 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390966e0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |     `-ImplicitCastExpr 0x556d390a0cd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x556d390a0c50 <col:35> 'sys_slist_t *' lvalue ParmVar 0x556d390a06f0 'list' 'sys_slist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x556d390a0de0 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x556d390a0dc8 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556d390a0da0 <col:10> 'sys_snode_t *' lvalue Var 0x556d390a0830 'node' 'sys_snode_t *'
|-FunctionDecl 0x556d390a0ef0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d390a0e68 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x556d391cf970 <line:369:3, line:375:69>
|   |-ParagraphComment 0x556d391cf670 <line:369:3>
|   | `-TextComment 0x556d391cf640 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cf690 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x556d391cf6f0 <col:10, col:59>
|   |   `-TextComment 0x556d391cf6c0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x556d391cf740 <line:371:3, col:62>
|   | `-TextComment 0x556d391cf710 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391cf790 <line:373:3>
|   | `-TextComment 0x556d391cf760 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cf7b0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391cf840 <col:15, col:46>
|   |   `-TextComment 0x556d391cf810 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x556d391cf890 <line:375:3>
|   | `-TextComment 0x556d391cf860 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391cf8b0 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x556d391cf910 <col:11, col:69>
|       `-TextComment 0x556d391cf8e0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x556d390a1030 prev 0x556d390a0ef0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x556d390a0fa8 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x556d390a13b8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x556d390a1378 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x556d390a1348 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x556d390a1318 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x556d390a11a0 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x556d390a1188 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x556d390a10d8 <col:1> 'bool (sys_slist_t *)' Function 0x556d39096db0 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x556d390a11d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x556d390a1100 <col:39> 'sys_slist_t *' lvalue ParmVar 0x556d390a0fa8 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x556d390a1330 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x556d390a1248 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x556d390a1220 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x556d390a11e8 <col:23> 'int' 0
|       `-CallExpr 0x556d390a12d0 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x556d390a12b8 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x556d390a1268 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390a0778 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x556d390a1300 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x556d390a1290 <col:38> 'sys_slist_t *' lvalue ParmVar 0x556d390a0fa8 'list' 'sys_slist_t *'
|-FunctionDecl 0x556d390a1558 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d390a13e0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x556d390a1450 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x556d390a14c0 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x556d391cfe10 <line:382:3, line:389:46>
|   |-ParagraphComment 0x556d391cfa10 <line:382:3>
|   | `-TextComment 0x556d391cf9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cfa30 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x556d391cfa90 <col:10, col:23>
|   |   `-TextComment 0x556d391cfa60 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x556d391cfae0 <line:384:3, col:62>
|   | `-TextComment 0x556d391cfab0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391cfb30 <line:386:3>
|   | `-TextComment 0x556d391cfb00 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cfb50 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391cfc00 <line:386:15, line:387:3>
|   |   |-TextComment 0x556d391cfbb0 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391cfbd0 <line:387:3> Text=" "
|   |-ParamCommandComment 0x556d391cfc20 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x556d391cfd00 <line:387:20, line:389:3>
|   |   |-TextComment 0x556d391cfc80 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x556d391cfca0 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x556d391cfcc0 <line:389:3> Text=" "
|   `-ParamCommandComment 0x556d391cfd20 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x556d391cfdb0 <col:15, col:46>
|       `-TextComment 0x556d391cfd80 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x556d390a1798 prev 0x556d390a1558 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d390a1620 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x556d390a1690 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x556d390a1700 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d390a2368 <line:190:2, line:212:2>
|   |-IfStmt 0x556d390a21b8 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x556d390a1928 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x556d390a18f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x556d390a1850 <col:7> 'sys_snode_t *' lvalue ParmVar 0x556d390a1690 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x556d390a1910 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x556d390a18d8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x556d390a18b0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x556d390a1878 <col:23> 'int' 0
|   | |-CompoundStmt 0x556d390a1db0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x556d390a1a68 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x556d390a1a50 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x556d390a1950 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d39096140 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x556d390a1aa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x556d390a1978 <col:31> 'sys_slist_t *' lvalue ParmVar 0x556d390a1620 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x556d390a1a08 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x556d390a19f0 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x556d390a19a0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x556d39095b00 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x556d390a1a38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x556d390a19c8 <col:33> 'sys_snode_t *' lvalue ParmVar 0x556d390a1700 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x556d390a1d78 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x556d390a1ba8 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x556d390a1b20 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x556d390a1b08 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x556d390a1ab8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390969c8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x556d390a1b50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x556d390a1ae0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x556d390a1620 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x556d390a1b90 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x556d390a1b68 <col:47> 'sys_snode_t *' lvalue ParmVar 0x556d390a1700 'node' 'sys_snode_t *'
|   | |   |-CompoundStmt 0x556d390a1d60 <col:53, line:199:4>
|   | |   | `-CallExpr 0x556d390a1d10 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x556d390a1cf8 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x556d390a1bd0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d390963f8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |   |-ImplicitCastExpr 0x556d390a1d48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x556d390a1bf8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x556d390a1620 'list' 'sys_slist_t *'
|   | |   |   `-CallExpr 0x556d390a1cb0 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |   |     |-ImplicitCastExpr 0x556d390a1c70 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x556d390a1c20 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390966e0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   |     `-ImplicitCastExpr 0x556d390a1ce0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x556d390a1c48 <col:36> 'sys_slist_t *' lvalue ParmVar 0x556d390a1620 'list' 'sys_slist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x556d390a2198 <line:200:10, line:209:3>
|   |   |-CallExpr 0x556d390a1ee8 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x556d390a1ed0 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x556d390a1dd0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x556d39095e00 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x556d390a1f20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x556d390a1df8 <col:31> 'sys_snode_t *' lvalue ParmVar 0x556d390a1690 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x556d390a1e88 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x556d390a1e70 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x556d390a1e20 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x556d39095b00 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x556d390a1eb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x556d390a1e48 <col:33> 'sys_snode_t *' lvalue ParmVar 0x556d390a1700 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x556d390a2160 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x556d390a2028 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x556d390a1fa0 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x556d390a1f88 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x556d390a1f38 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390969c8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x556d390a1fd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556d390a1f60 <col:38> 'sys_slist_t *' lvalue ParmVar 0x556d390a1620 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x556d390a2010 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556d390a1fe8 <col:47> 'sys_snode_t *' lvalue ParmVar 0x556d390a1700 'node' 'sys_snode_t *'
|   |     |-CompoundStmt 0x556d390a2148 <col:53, line:208:4>
|   |     | `-CallExpr 0x556d390a20e0 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x556d390a20c8 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x556d390a2050 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x556d390963f8 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |   |-ImplicitCastExpr 0x556d390a2118 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x556d390a2078 <col:32> 'sys_slist_t *' lvalue ParmVar 0x556d390a1620 'list' 'sys_slist_t *'
|   |     |   `-ImplicitCastExpr 0x556d390a2130 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556d390a20a0 <col:13> 'sys_snode_t *' lvalue ParmVar 0x556d390a1690 'prev_node' 'sys_snode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x556d390a22d8 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x556d390a22c0 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d390a21f0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x556d39095e00 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x556d390a2310 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d390a2218 <col:30> 'sys_snode_t *' lvalue ParmVar 0x556d390a1700 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x556d390a2328 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x556d390a22a0 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x556d390a2278 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x556d390a2240 <col:23> 'int' 0
|-FunctionDecl 0x556d390a2520 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d390a2398 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x556d390a2408 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x556d391d0280 <line:398:3, line:405:35>
|   |-ParagraphComment 0x556d391cfeb0 <line:398:3>
|   | `-TextComment 0x556d391cfe80 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391cfed0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d391cff30 <col:10, col:44>
|   |   `-TextComment 0x556d391cff00 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x556d391cff80 <line:400:3, col:62>
|   | `-TextComment 0x556d391cff50 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391cffd0 <line:402:3>
|   | `-TextComment 0x556d391cffa0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391cfff0 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d00a0 <line:402:15, line:403:3>
|   |   |-TextComment 0x556d391d0050 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391d0070 <line:403:3> Text=" "
|   |-ParamCommandComment 0x556d391d00c0 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391d0150 <col:15, col:60>
|   |   `-TextComment 0x556d391d0120 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x556d391d01a0 <line:405:3>
|   | `-TextComment 0x556d391d0170 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d01c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391d0220 <col:11, col:35>
|       `-TextComment 0x556d391d01f0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x556d390a26e0 prev 0x556d390a2520 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x556d390a25e0 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x556d390a2650 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x556d390a5228 <line:218:2, line:233:2>
|   |-DeclStmt 0x556d390a2898 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x556d390a27a0 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x556d390a2880 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x556d390a2860 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x556d390a2838 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x556d390a2800 <col:23> 'int' 0
|   |-DeclStmt 0x556d390a2920 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x556d390a28c0 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x556d390a5170 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x556d390a2a10 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x556d390a2938 <line:222:42> 'sys_snode_t *' lvalue Var 0x556d390a28c0 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x556d390a29c8 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x556d390a29b0 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x556d390a2960 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x556d390966e0 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x556d390a29f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x556d390a2988 <col:36> 'sys_slist_t *' lvalue ParmVar 0x556d390a25e0 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x556d390a2b10 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x556d390a2ae0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x556d390a2a38 <col:42> 'sys_snode_t *' lvalue Var 0x556d390a28c0 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x556d390a2af8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x556d390a2ac0 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x556d390a2a98 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x556d390a2a60 <col:23> 'int' 0
|   | |-BinaryOperator 0x556d390a2c10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x556d390a2b38 <line:222:42> 'sys_snode_t *' lvalue Var 0x556d390a28c0 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x556d390a2bc8 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x556d390a2bb0 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x556d390a2b60 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x556d39097678 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x556d390a2bf8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x556d390a2b88 <col:42> 'sys_snode_t *' lvalue Var 0x556d390a28c0 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x556d390a5150 <col:48, line:230:3>
|   |   |-IfStmt 0x556d390a5088 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x556d390a4e58 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x556d390a2c88 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x556d390a2c38 <col:8> 'sys_snode_t *' lvalue Var 0x556d390a28c0 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x556d390a4e40 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x556d390a2c60 <col:16> 'sys_snode_t *' lvalue ParmVar 0x556d390a2650 'node' 'sys_snode_t *'
|   |   | |-CompoundStmt 0x556d390a5068 <col:22, line:227:4>
|   |   | | |-CallExpr 0x556d390a4f90 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x556d390a4f78 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x556d390a4e80 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x556d390a1798 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   | | | |-ImplicitCastExpr 0x556d390a4fd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x556d390a4ea8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x556d390a25e0 'list' 'sys_slist_t *'
|   |   | | | |-ImplicitCastExpr 0x556d390a4fe8 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x556d390a4ed0 <col:38> 'sys_snode_t *' lvalue Var 0x556d390a27a0 'prev' 'sys_snode_t *'
|   |   | | | `-ImplicitCastExpr 0x556d390a5000 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x556d390a4ef8 <col:11> 'sys_snode_t *' lvalue ParmVar 0x556d390a2650 'node' 'sys_snode_t *'
|   |   | | `-ReturnStmt 0x556d390a5050 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x556d390a5038 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x556d390a5018 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x556d390a5128 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x556d390a50c0 <col:4> 'sys_snode_t *' lvalue Var 0x556d390a27a0 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x556d390a5110 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x556d390a50e8 <col:11> 'sys_snode_t *' lvalue Var 0x556d390a28c0 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x556d390a51e0 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x556d390a51c8 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x556d390a51a8 <col:16> 'int' 0
|-TypedefDecl 0x556d390a5290 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x556d390a5260 'u64_t' sugar
|   |-Typedef 0x556d38ffc790 'u64_t'
|   `-BuiltinType 0x556d38f8ab00 'unsigned long long'
|-RecordDecl 0x556d390a52e8 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x556d390a53c0 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x556d390a5460 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x556d390a5410 'struct _sfnode' sugar
|   `-RecordType 0x556d390a5370 'struct _sfnode'
|     `-Record 0x556d390a52e8 '_sfnode'
|-RecordDecl 0x556d390a54b8 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x556d390a55e8 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x556d390a5640 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x556d390a56e0 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x556d390a5690 'struct _sflist' sugar
|   `-RecordType 0x556d390a5540 'struct _sflist'
|     `-Record 0x556d390a54b8 '_sflist'
|-FunctionDecl 0x556d390a59f0 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d390a58e8 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x556d390a5d08 <line:197:1, line:200:1>
| | |-BinaryOperator 0x556d390a5ba8 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x556d390a5ad8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x556d390a55e8
| | | | `-ImplicitCastExpr 0x556d390a5ac0 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x556d390a5a98 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x556d390a58e8 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x556d390a5b90 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x556d390a5b70 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x556d390a5b48 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x556d390a5b10 <col:23> 'int' 0
| | `-BinaryOperator 0x556d390a5ce0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x556d390a5c10 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x556d390a5640
| |   | `-ImplicitCastExpr 0x556d390a5bf8 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x556d390a5bd0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x556d390a58e8 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x556d390a5cc8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x556d390a5ca8 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x556d390a5c80 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x556d390a5c48 <col:23> 'int' 0
| `-FullComment 0x556d391d04e0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x556d391d0320 <line:192:3>
|   | `-TextComment 0x556d391d02f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d0340 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x556d391d03a0 <col:10, col:27>
|   |   `-TextComment 0x556d391d0370 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x556d391d03f0 <line:194:3>
|   | `-TextComment 0x556d391d03c0 <col:3> Text=" "
|   `-ParamCommandComment 0x556d391d0410 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x556d391d04a0 <col:15, col:50>
|       `-TextComment 0x556d391d0470 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x556d390ab490 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390a5d38 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390ab6e8 <line:206:1, line:208:1>
|   `-ReturnStmt 0x556d390ab6d0 <line:207:2, col:71>
|     `-CStyleCastExpr 0x556d390ab6a8 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x556d390ab688 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x556d390ab620 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x556d390ab5f0 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x556d390ab578 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x556d390a53c0
|           |   `-ImplicitCastExpr 0x556d390ab560 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x556d390ab538 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x556d390a5d38 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x556d390ab608 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x556d390ab5d0 <line:207:49, line:203:31> 'unsigned long' prefix '~'
|               `-IntegerLiteral 0x556d390ab5b0 <col:31> 'unsigned long' 3
|-FunctionDecl 0x556d390ab810 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x556d390ab710 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x556d390aba50 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390ab8c8 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x556d390ab938 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390abe28 <line:214:1, line:218:1>
|   |-DeclStmt 0x556d390abc78 <line:215:2, col:47>
|   | `-VarDecl 0x556d390abb10 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x556d390abc30 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x556d390abc18 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556d390abb70 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x556d390ab810 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x556d390abc60 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x556d390abb98 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x556d390ab8c8 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x556d390abe00 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x556d390abcd0 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x556d390a53c0
|     | `-ImplicitCastExpr 0x556d390abcb8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x556d390abc90 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x556d390ab8c8 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x556d390abdd8 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x556d390abdc0 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x556d390abda8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x556d390abd08 <col:27> 'u8_t':'unsigned char' lvalue Var 0x556d390abb10 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x556d390abd80 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x556d390abd68 <col:50> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x556d390abd30 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x556d390ab938 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x556d390abfe0 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390abe58 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390abec8 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390ac170 <line:221:1, line:223:1>
|   `-BinaryOperator 0x556d390ac148 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x556d390ac0d0 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x556d390a55e8
|     | `-ImplicitCastExpr 0x556d390ac0b8 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x556d390ac090 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x556d390abe58 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x556d390ac130 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556d390ac108 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x556d390abec8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x556d390ac298 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390ac198 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390ac208 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390ac458 <line:226:1, line:228:1>
|   `-BinaryOperator 0x556d390ac400 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x556d390ac388 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x556d390a5640
|     | `-ImplicitCastExpr 0x556d390ac370 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x556d390ac348 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x556d390ac198 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x556d390ac3e8 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556d390ac3c0 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x556d390ac208 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x556d390ac5a0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d390ac4a0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x556d390ac718 <line:238:1, line:240:1>
| | `-ReturnStmt 0x556d390ac6d8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x556d390ac6c0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x556d390ac688 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x556d390a55e8
| |       `-ImplicitCastExpr 0x556d390ac670 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d390ac648 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x556d390ac4a0 'list' 'sys_sflist_t *'
| `-FullComment 0x556d391d0820 <line:231:3, line:235:68>
|   |-ParagraphComment 0x556d391d0580 <line:231:3>
|   | `-TextComment 0x556d391d0550 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d05a0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391d0600 <col:10, col:43>
|   |   `-TextComment 0x556d391d05d0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x556d391d0650 <line:233:3>
|   | `-TextComment 0x556d391d0620 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d0670 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d0700 <col:15, col:62>
|   |   `-TextComment 0x556d391d06d0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x556d391d0750 <line:235:3>
|   | `-TextComment 0x556d391d0720 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d0770 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x556d391d07d0 <col:11, col:68>
|       `-TextComment 0x556d391d07a0 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x556d390ac7c8 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d390ac740 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x556d390ac948 <line:250:1, line:252:1>
| | `-ReturnStmt 0x556d390ac900 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x556d390ac8e8 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x556d390ac8b0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x556d390a5640
| |       `-ImplicitCastExpr 0x556d390ac898 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d390ac870 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x556d390ac740 'list' 'sys_sflist_t *'
| `-FullComment 0x556d391d0b60 <line:243:3, line:247:67>
|   |-ParagraphComment 0x556d391d08c0 <line:243:3>
|   | `-TextComment 0x556d391d0890 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d08e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d391d0940 <col:10, col:42>
|   |   `-TextComment 0x556d391d0910 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x556d391d0990 <line:245:3>
|   | `-TextComment 0x556d391d0960 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d09b0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d0a40 <col:15, col:61>
|   |   `-TextComment 0x556d391d0a10 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x556d391d0a90 <line:247:3>
|   | `-TextComment 0x556d391d0a60 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d0ab0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x556d391d0b10 <col:11, col:67>
|       `-TextComment 0x556d391d0ae0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x556d390ac9f8 prev 0x556d390ab810 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390ac970 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x556d390acbe8 <line:265:1, line:267:1>
| | `-ReturnStmt 0x556d390acba8 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x556d390acb90 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x556d390acb68 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x556d390acb38 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x556d390acae0 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x556d390a53c0
| |       |   `-ImplicitCastExpr 0x556d390acac8 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x556d390acaa0 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x556d390ac970 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x556d390acb50 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x556d390acb18 <col:31> 'unsigned long' 3
| `-FullComment 0x556d391d0e70 <line:259:3, line:262:60>
|   |-ParagraphComment 0x556d391d0c00 <line:259:3>
|   | `-TextComment 0x556d391d0bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d0c20 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x556d391d0c80 <col:10, col:51>
|   |   `-TextComment 0x556d391d0c50 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x556d391d0cd0 <line:261:3>
|   | `-TextComment 0x556d391d0ca0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d0cf0 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391d0da0 <line:261:15, line:262:3>
|   |   |-TextComment 0x556d391d0d50 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x556d391d0d70 <line:262:3> Text=" "
|   `-BlockCommandComment 0x556d391d0dc0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x556d391d0e20 <col:11, col:60>
|       `-TextComment 0x556d391d0df0 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x556d390acd90 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x556d390acc10 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x556d390acc80 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x556d390acf88 <line:283:1, line:286:1>
| | |-CompoundStmt 0x556d390ace40 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x556d390ace50 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x556d390acf30 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x556d390acea0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x556d390a53c0
| |   | `-ImplicitCastExpr 0x556d390ace88 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x556d390ace60 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x556d390acc10 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x556d390acf18 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x556d390acf00 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x556d390aced8 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x556d390acc80 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x556d391d12d0 <line:270:3, line:280:62>
|   |-ParagraphComment 0x556d391d0f10 <line:270:3>
|   | `-TextComment 0x556d391d0ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d0f30 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x556d391d0f90 <col:10, col:35>
|   |   `-TextComment 0x556d391d0f60 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x556d391d1030 <line:272:3, line:274:64>
|   | |-TextComment 0x556d391d0fb0 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x556d391d0fd0 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x556d391d0ff0 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x556d391d10a0 <line:276:3, line:277:61>
|   | |-TextComment 0x556d391d1050 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x556d391d1070 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x556d391d10f0 <line:279:3>
|   | `-TextComment 0x556d391d10c0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d1110 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391d11c0 <line:279:15, line:280:3>
|   |   |-TextComment 0x556d391d1170 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x556d391d1190 <line:280:3> Text=" "
|   `-ParamCommandComment 0x556d391d11e0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x556d391d1270 <col:16, col:62>
|       `-TextComment 0x556d391d1240 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x556d390ad0c0 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x556d390acfc0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x556d390ad030 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x556d390ad478 <line:299:1, line:302:1>
| | |-CompoundStmt 0x556d390ad170 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x556d390ad180 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x556d390ad420 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x556d390ad1d0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x556d390a53c0
| |   | `-ImplicitCastExpr 0x556d390ad1b8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x556d390ad190 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x556d390acfc0 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x556d390ad3f8 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x556d390ad378 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x556d390ad358 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x556d390ad2d0 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x556d390ad2b8 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x556d390ad208 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390ab490 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x556d390ad300 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x556d390ad230 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x556d390acfc0 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x556d390ad3e0 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x556d390ad3c8 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x556d390ad3a0 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x556d390ad030 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x556d391d26d0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x556d391d1370 <line:289:3>
|   | `-TextComment 0x556d391d1340 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d1390 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d391d13f0 <col:10, col:44>
|   |   `-TextComment 0x556d391d13c0 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x556d391d1490 <line:291:3, line:293:64>
|   | |-TextComment 0x556d391d1410 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x556d391d1430 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x556d391d1450 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x556d391d14e0 <line:295:3>
|   | `-TextComment 0x556d391d14b0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d1500 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391d15b0 <line:295:15, line:296:3>
|   |   |-TextComment 0x556d391d1560 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x556d391d1580 <line:296:3> Text=" "
|   `-ParamCommandComment 0x556d391d15d0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x556d391d2680 <col:16, col:62>
|       `-TextComment 0x556d391d2650 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x556d390ad5c0 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d390ad4c0 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x556d391d2a10 <line:309:3, line:313:57>
|   |-ParagraphComment 0x556d391d2770 <line:309:3>
|   | `-TextComment 0x556d391d2740 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d2790 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d391d27f0 <col:10, col:41>
|   |   `-TextComment 0x556d391d27c0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x556d391d2840 <line:311:3>
|   | `-TextComment 0x556d391d2810 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d2860 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d28f0 <col:15, col:44>
|   |   `-TextComment 0x556d391d28c0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x556d391d2940 <line:313:3>
|   | `-TextComment 0x556d391d2910 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d2960 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x556d391d29c0 <col:11, col:57>
|       `-TextComment 0x556d391d2990 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x556d390ad700 prev 0x556d390ad5c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d390ad678 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x556d390ad9f8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x556d390ad9b0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x556d390ad998 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x556d390ad978 <col:10, col:54> 'int'
|         `-BinaryOperator 0x556d390ad950 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x556d390ad870 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x556d390ad858 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x556d390ad7a8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x556d390ad8a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x556d390ad7d0 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x556d390ad678 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x556d390ad938 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x556d390ad918 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x556d390ad8f0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x556d390ad8b8 <col:23> 'int' 0
|-FunctionDecl 0x556d390adaa8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390ada20 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x556d391d2db0 <line:320:3, line:326:55>
|   |-ParagraphComment 0x556d391d2ab0 <line:320:3>
|   | `-TextComment 0x556d391d2a80 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d2ad0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x556d391d2b30 <col:10, col:64>
|   |   `-TextComment 0x556d391d2b00 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x556d391d2b80 <line:322:3, col:70>
|   | `-TextComment 0x556d391d2b50 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x556d391d2bd0 <line:324:3>
|   | `-TextComment 0x556d391d2ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d2bf0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391d2c80 <col:15, col:64>
|   |   `-TextComment 0x556d391d2c50 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x556d391d2cd0 <line:326:3>
|   | `-TextComment 0x556d391d2ca0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d2cf0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x556d391d2d50 <col:11, col:55>
|       `-TextComment 0x556d391d2d20 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x556d390adbe8 prev 0x556d390adaa8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390adb60 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390add88 <line:67:2, line:69:2>
|   `-ReturnStmt 0x556d390add40 <line:68:3, col:42>
|     `-CallExpr 0x556d390adcf8 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x556d390adce0 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d390adc90 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390ab490 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x556d390add28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x556d390adcb8 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x556d390adb60 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x556d390ade38 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390addb0 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x556d391d30f0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x556d391d2e50 <line:333:3>
|   | `-TextComment 0x556d391d2e20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d2e70 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x556d391d2ed0 <col:10, col:46>
|   |   `-TextComment 0x556d391d2ea0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x556d391d2f20 <line:335:3>
|   | `-TextComment 0x556d391d2ef0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d2f40 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x556d391d2fd0 <col:15, col:64>
|   |   `-TextComment 0x556d391d2fa0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x556d391d3020 <line:337:3>
|   | `-TextComment 0x556d391d2ff0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d3040 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x556d391d30a0 <col:11, col:55>
|       `-TextComment 0x556d391d3070 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x556d390adf78 prev 0x556d390ade38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390adef0 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390ae2d8 <line:74:2, line:78:2>
|   `-ReturnStmt 0x556d390ae298 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x556d390ae268 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x556d390ae0f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x556d390ae0c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x556d390ae020 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x556d390adef0 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x556d390ae0e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x556d390ae0a8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x556d390ae080 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x556d390ae048 <col:23> 'int' 0
|       |-CallExpr 0x556d390ae188 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x556d390ae170 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x556d390ae120 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390adbe8 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x556d390ae1b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x556d390ae148 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x556d390adef0 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x556d390ae250 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x556d390ae230 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x556d390ae208 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x556d390ae1d0 <col:23> 'int' 0
|-FunctionDecl 0x556d390ae400 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390ae300 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390ae370 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x556d391d3480 <line:344:3, line:349:47>
|   |-ParagraphComment 0x556d391d3190 <line:344:3>
|   | `-TextComment 0x556d391d3160 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d31b0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d391d3210 <col:10, col:42>
|   |   `-TextComment 0x556d391d31e0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x556d391d3260 <line:346:3, col:63>
|   | `-TextComment 0x556d391d3230 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391d32b0 <line:348:3>
|   | `-TextComment 0x556d391d3280 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d32d0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d3380 <line:348:15, line:349:3>
|   |   |-TextComment 0x556d391d3330 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391d3350 <line:349:3> Text=" "
|   `-ParamCommandComment 0x556d391d33a0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x556d391d3430 <col:15, col:47>
|       `-TextComment 0x556d391d3400 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x556d390ae5d0 prev 0x556d390ae400 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390ae4d0 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390ae540 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390aece8 <line:84:2, line:93:2>
|   |-CallExpr 0x556d390ae7f0 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x556d390ae7d8 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d390ae680 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x556d390aba50 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x556d390ae828 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d390ae6a8 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x556d390ae540 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x556d390ae738 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x556d390ae720 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x556d390ae6d0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x556d390ae768 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d390ae6f8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x556d390ae4d0 'list' 'sys_sflist_t *'
|   |-CallExpr 0x556d390ae930 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x556d390ae918 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d390ae840 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390abfe0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x556d390ae968 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d390ae868 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x556d390ae4d0 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x556d390ae980 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x556d390ae890 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x556d390ae540 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x556d390aec88 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x556d390aeae0 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x556d390aea00 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x556d390ae9e8 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x556d390ae998 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x556d390aea30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x556d390ae9c0 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x556d390ae4d0 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x556d390aeac8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x556d390aeaa8 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x556d390aea80 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x556d390aea48 <col:23> 'int' 0
|     |-CompoundStmt 0x556d390aec70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x556d390aec20 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x556d390aec08 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x556d390aeb08 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390ac298 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x556d390aec58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x556d390aeb30 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x556d390ae4d0 'list' 'sys_sflist_t *'
|     |   `-CallExpr 0x556d390aebc0 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|     |     |-ImplicitCastExpr 0x556d390aeba8 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x556d390aeb58 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|     |     `-ImplicitCastExpr 0x556d390aebf0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x556d390aeb80 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x556d390ae4d0 'list' 'sys_sflist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x556d390aee20 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390aed20 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390aed90 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x556d391d3810 <line:357:3, line:362:46>
|   |-ParagraphComment 0x556d391d3520 <line:357:3>
|   | `-TextComment 0x556d391d34f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d3540 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d391d35a0 <col:10, col:41>
|   |   `-TextComment 0x556d391d3570 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x556d391d35f0 <line:359:3, col:63>
|   | `-TextComment 0x556d391d35c0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391d3640 <line:361:3>
|   | `-TextComment 0x556d391d3610 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d3660 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d3710 <line:361:15, line:362:3>
|   |   |-TextComment 0x556d391d36c0 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391d36e0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x556d391d3730 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x556d391d37c0 <col:15, col:46>
|       `-TextComment 0x556d391d3790 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x556d390aefe0 prev 0x556d390aee20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390aeee0 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390aef50 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390af858 <line:99:2, line:111:2>
|   |-CallExpr 0x556d390af178 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x556d390af160 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d390af090 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x556d390aba50 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x556d390af1b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d390af0b8 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x556d390aef50 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x556d390af1c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x556d390af140 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x556d390af118 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x556d390af0e0 <col:23> 'int' 0
|   `-IfStmt 0x556d390af7f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x556d390af328 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x556d390af248 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x556d390af230 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x556d390af1e0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x556d390af278 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x556d390af208 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x556d390aeee0 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x556d390af310 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x556d390af2f0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x556d390af2c8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x556d390af290 <col:23> 'int' 0
|     |-CompoundStmt 0x556d390af550 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x556d390af3e0 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x556d390af3c8 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x556d390af350 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390ac298 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x556d390af418 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x556d390af378 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x556d390aeee0 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x556d390af430 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x556d390af3a0 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x556d390aef50 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x556d390af4e8 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x556d390af4d0 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x556d390af448 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390abfe0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x556d390af520 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x556d390af470 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x556d390aeee0 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x556d390af538 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x556d390af498 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x556d390aef50 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x556d390af7d0 <line:105:10, line:110:3>
|       |-CallExpr 0x556d390af688 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x556d390af670 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x556d390af570 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x556d390aba50 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x556d390af600 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x556d390af5e8 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x556d390af598 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x556d390af630 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x556d390af5c0 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x556d390aeee0 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x556d390af6c0 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x556d390af648 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x556d390aef50 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x556d390af768 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x556d390af750 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x556d390af6d8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390ac298 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x556d390af7a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x556d390af700 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x556d390aeee0 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x556d390af7b8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x556d390af728 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x556d390aef50 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x556d390afab0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x556d390af888 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390af900 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x556d390af978 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x556d391d3d70 <line:370:3, line:380:66>
|   |-ParagraphComment 0x556d391d38b0 <line:370:3>
|   | `-TextComment 0x556d391d3880 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d38d0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d391d3930 <col:10, col:41>
|   |   `-TextComment 0x556d391d3900 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x556d391d3a20 <line:372:3, line:374:63>
|   | |-TextComment 0x556d391d3950 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x556d391d3970 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x556d391d39c0 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x556d391d39e0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391d3a70 <line:376:3, col:48>
|   | `-TextComment 0x556d391d3a40 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x556d391d3ac0 <line:378:3>
|   | `-TextComment 0x556d391d3a90 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d3ae0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d3b90 <line:378:15, line:379:3>
|   |   |-TextComment 0x556d391d3b40 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391d3b60 <line:379:3> Text=" "
|   |-ParamCommandComment 0x556d391d3bb0 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x556d391d3c60 <line:379:15, line:380:3>
|   |   |-TextComment 0x556d391d3c10 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x556d391d3c30 <line:380:3> Text=" "
|   `-ParamCommandComment 0x556d391d3c80 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x556d391d3d10 <col:15, col:66>
|       `-TextComment 0x556d391d3ce0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x556d390afd00 prev 0x556d390afab0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x556d390afb78 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390afbf0 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x556d390afc68 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x556d390b03b8 <col:31, line:127:42>
|   |-IfStmt 0x556d390b0228 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x556d390aff00 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x556d390afe20 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x556d390afe08 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x556d390afdb8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x556d390afe50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x556d390afde0 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x556d390afb78 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x556d390afee8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x556d390afec8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x556d390afea0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x556d390afe68 <col:23> 'int' 0
|   | |-CompoundStmt 0x556d390b0058 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x556d390b0008 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x556d390afff0 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x556d390aff28 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390abfe0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x556d390b0040 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x556d390aff50 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x556d390afb78 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x556d390affc8 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x556d390affb0 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x556d390aff78 <col:31> 'void *' lvalue ParmVar 0x556d390afbf0 'head' 'void *'
|   | `-CompoundStmt 0x556d390b0210 <line:121:9, line:125:2>
|   |   `-CallExpr 0x556d390b01d8 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x556d390b01c0 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556d390b0070 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x556d390aba50 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x556d390b0100 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x556d390b00e8 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x556d390b0098 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x556d390b0130 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556d390b00c0 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x556d390afb78 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x556d390b0198 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x556d390b0180 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x556d390b0148 <col:29> 'void *' lvalue ParmVar 0x556d390afbf0 'head' 'void *'
|   `-CallExpr 0x556d390b0340 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x556d390b0328 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d390b0260 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390ac298 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x556d390b0378 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d390b0288 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x556d390afb78 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x556d390b0300 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x556d390b02e8 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x556d390b02b0 <col:35> 'void *' lvalue ParmVar 0x556d390afc68 'tail' 'void *'
|-FunctionDecl 0x556d390b0590 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d390b03e8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390b0458 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x556d391d4120 <line:388:3, line:394:57>
|   |-ParagraphComment 0x556d391d3e10 <line:388:3>
|   | `-TextComment 0x556d391d3de0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d3e30 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x556d391d3e90 <col:10, col:66>
|   |   `-TextComment 0x556d391d3e60 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x556d391d3f00 <line:390:3, line:391:63>
|   | |-TextComment 0x556d391d3eb0 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x556d391d3ed0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391d3f50 <line:393:3>
|   | `-TextComment 0x556d391d3f20 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d3f70 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d4020 <line:393:15, line:394:3>
|   |   |-TextComment 0x556d391d3fd0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391d3ff0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x556d391d4040 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x556d391d40d0 <col:25, col:57>
|       `-TextComment 0x556d391d40a0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x556d390b0750 prev 0x556d390b0590 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d390b0650 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390b06c0 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x556d390b0e18 <line:135:2, line:141:2>
|   |-DeclStmt 0x556d390b08f8 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x556d390b0810 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x556d390b0880 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x556d390b09e8 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x556d390b0910 <col:3> 'sys_sfnode_t *' lvalue Var 0x556d390b0810 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x556d390b09a0 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x556d390b0988 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x556d390b0938 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x556d390b09d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d390b0960 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x556d390b06c0 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x556d390b0ae8 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x556d390b0a10 <col:3> 'sys_sfnode_t *' lvalue Var 0x556d390b0880 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x556d390b0aa0 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x556d390b0a88 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x556d390b0a38 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x556d390b0ad0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d390b0a60 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x556d390b06c0 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x556d390b0c20 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x556d390b0c08 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d390b0b10 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x556d390afd00 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x556d390b0c60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d390b0b38 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x556d390b0650 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x556d390b0c90 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x556d390b0c78 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x556d390b0b60 <col:41> 'sys_sfnode_t *' lvalue Var 0x556d390b0810 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x556d390b0cc0 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x556d390b0ca8 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d390b0b88 <col:47> 'sys_sfnode_t *' lvalue Var 0x556d390b0880 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x556d390b0da0 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x556d390b0d88 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d390b0cd8 <col:1> 'void (sys_sflist_t *)' Function 0x556d390a59f0 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x556d390b0dd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556d390b0d00 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x556d390b06c0 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x556d390b1070 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390b0e60 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390b0ed0 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x556d390b0f40 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x556d391d4590 <line:402:3, line:408:46>
|   |-ParagraphComment 0x556d391d41c0 <line:402:3>
|   | `-TextComment 0x556d391d4190 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d41e0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d391d4240 <col:10, col:41>
|   |   `-TextComment 0x556d391d4210 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x556d391d4290 <line:404:3, col:63>
|   | `-TextComment 0x556d391d4260 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391d42e0 <line:406:3>
|   | `-TextComment 0x556d391d42b0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d4300 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d43b0 <line:406:15, line:407:3>
|   |   |-TextComment 0x556d391d4360 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391d4380 <line:407:3> Text=" "
|   |-ParamCommandComment 0x556d391d43d0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x556d391d4480 <line:407:15, line:408:3>
|   |   |-TextComment 0x556d391d4430 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x556d391d4450 <line:408:3> Text=" "
|   `-ParamCommandComment 0x556d391d44a0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x556d391d4530 <col:15, col:46>
|       `-TextComment 0x556d391d4500 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x556d390b12b0 prev 0x556d390b1070 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390b1138 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390b11a8 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x556d390b1218 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d3909d2d8 <line:148:2, line:158:2>
|   `-IfStmt 0x556d3909d270 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x556d390b1440 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x556d390b1410 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x556d390b1368 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b11a8 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x556d390b1428 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x556d390b13f0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x556d390b13c8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x556d390b1390 <col:23> 'int' 0
|     |-CompoundStmt 0x556d3909cd20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x556d3909ccb8 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x556d3909cca0 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x556d390b1468 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390ae5d0 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x556d3909ccf0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x556d390b1490 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x556d390b1138 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x556d3909cd08 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x556d390b14b8 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b1218 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x556d3909d238 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x556d3909ce80 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x556d3909cda0 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x556d3909cd88 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x556d3909cd38 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390ab490 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x556d3909cdd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x556d3909cd60 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b11a8 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x556d3909ce68 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x556d3909ce48 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x556d3909ce20 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x556d3909cde8 <col:23> 'int' 0
|       |-CompoundStmt 0x556d3909cfa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x556d3909cf38 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x556d3909cf20 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x556d3909cea8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390aefe0 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x556d3909cf70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x556d3909ced0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x556d390b1138 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x556d3909cf88 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x556d3909cef8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b1218 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x556d3909d218 <line:153:10, line:157:3>
|         |-CallExpr 0x556d3909d0d0 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x556d3909d0b8 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x556d3909cfb8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x556d390aba50 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x556d3909d108 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x556d3909cfe0 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b1218 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x556d3909d070 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x556d3909d058 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x556d3909d008 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390ab490 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x556d3909d0a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x556d3909d030 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b11a8 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x556d3909d1b0 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x556d3909d198 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x556d3909d120 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x556d390aba50 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x556d3909d1e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x556d3909d148 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b11a8 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x556d3909d200 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x556d3909d170 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b1218 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x556d3909d388 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d3909d300 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x556d391d4960 <line:417:3, line:424:50>
|   |-ParagraphComment 0x556d391d4640 <line:417:3>
|   | `-TextComment 0x556d391d4600 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d4660 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x556d391d46c0 <col:10, col:59>
|   |   `-TextComment 0x556d391d4690 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x556d391d4730 <line:419:3, line:420:63>
|   | |-TextComment 0x556d391d46e0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x556d391d4700 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391d4780 <line:422:3>
|   | `-TextComment 0x556d391d4750 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d47a0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d4830 <col:15, col:46>
|   |   `-TextComment 0x556d391d4800 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x556d391d4880 <line:424:3>
|   | `-TextComment 0x556d391d4850 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d48a0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x556d391d4900 <col:11, col:50>
|       `-TextComment 0x556d391d48d0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x556d3909d4c8 prev 0x556d3909d388 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d3909d440 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x556d3909db68 <line:163:2, line:175:2>
|   |-DeclStmt 0x556d3909d690 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x556d3909d580 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x556d3909d648 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x556d3909d630 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556d3909d5e0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x556d3909d678 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x556d3909d608 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x556d3909d440 'list' 'sys_sflist_t *'
|   |-CallExpr 0x556d3909d7c0 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x556d3909d7a8 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556d3909d6a8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390abfe0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x556d3909d7f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x556d3909d6d0 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x556d3909d440 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x556d3909d760 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x556d3909d748 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x556d3909d6f8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390ab490 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x556d3909d790 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x556d3909d720 <col:33> 'sys_sfnode_t *' lvalue Var 0x556d3909d580 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x556d3909daa8 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x556d3909d900 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x556d3909d878 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x556d3909d860 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x556d3909d810 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x556d3909d8a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x556d3909d838 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x556d3909d440 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x556d3909d8e8 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x556d3909d8c0 <col:46> 'sys_sfnode_t *' lvalue Var 0x556d3909d580 'node' 'sys_sfnode_t *'
|   | |-CompoundStmt 0x556d3909da90 <col:52, line:172:3>
|   | | `-CallExpr 0x556d3909da40 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x556d3909da28 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x556d3909d928 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390ac298 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x556d3909da78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x556d3909d950 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x556d3909d440 'list' 'sys_sflist_t *'
|   | |   `-CallExpr 0x556d3909d9e0 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   | |     |-ImplicitCastExpr 0x556d3909d9c8 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x556d3909d978 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |     `-ImplicitCastExpr 0x556d3909da10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x556d3909d9a0 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x556d3909d440 'list' 'sys_sflist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x556d3909db20 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x556d3909db08 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556d3909dae0 <col:10> 'sys_sfnode_t *' lvalue Var 0x556d3909d580 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x556d3909dcb0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d3909dba8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x556d391d4d00 <line:431:3, line:437:69>
|   |-ParagraphComment 0x556d391d4a00 <line:431:3>
|   | `-TextComment 0x556d391d49d0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d4a20 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x556d391d4a80 <col:10, col:59>
|   |   `-TextComment 0x556d391d4a50 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x556d391d4ad0 <line:433:3, col:63>
|   | `-TextComment 0x556d391d4aa0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391d4b20 <line:435:3>
|   | `-TextComment 0x556d391d4af0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d4b40 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d4bd0 <col:15, col:46>
|   |   `-TextComment 0x556d391d4ba0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x556d391d4c20 <line:437:3>
|   | `-TextComment 0x556d391d4bf0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d4c40 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x556d391d4ca0 <col:11, col:69>
|       `-TextComment 0x556d391d4c70 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x556d3909ddf0 prev 0x556d3909dcb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x556d3909dd68 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x556d3909e178 <line:180:2, line:183:2>
|   `-ReturnStmt 0x556d3909e138 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x556d3909e108 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x556d3909e0d8 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x556d3909df60 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x556d3909df48 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x556d3909de98 <col:1> 'bool (sys_sflist_t *)' Function 0x556d390ad700 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x556d3909df90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x556d3909dec0 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x556d3909dd68 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x556d3909e0f0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x556d3909e008 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x556d3909dfe0 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x556d3909dfa8 <col:23> 'int' 0
|       `-CallExpr 0x556d3909e090 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x556d3909e078 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x556d3909e028 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d3909d4c8 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x556d3909e0c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x556d3909e050 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x556d3909dd68 'list' 'sys_sflist_t *'
|-FunctionDecl 0x556d3909e318 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d3909e1a0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d3909e210 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x556d3909e280 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x556d391d51a0 <line:444:3, line:451:46>
|   |-ParagraphComment 0x556d391d4da0 <line:444:3>
|   | `-TextComment 0x556d391d4d70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d4dc0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x556d391d4e20 <col:10, col:23>
|   |   `-TextComment 0x556d391d4df0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x556d391d4e70 <line:446:3, col:63>
|   | `-TextComment 0x556d391d4e40 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391d4ec0 <line:448:3>
|   | `-TextComment 0x556d391d4e90 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d4ee0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d4f90 <line:448:15, line:449:3>
|   |   |-TextComment 0x556d391d4f40 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391d4f60 <line:449:3> Text=" "
|   |-ParamCommandComment 0x556d391d4fb0 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x556d391d5090 <line:449:20, line:451:3>
|   |   |-TextComment 0x556d391d5010 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x556d391d5030 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x556d391d5050 <line:451:3> Text=" "
|   `-ParamCommandComment 0x556d391d50b0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x556d391d5140 <col:15, col:46>
|       `-TextComment 0x556d391d5110 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x556d3909e558 prev 0x556d3909e318 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d3909e3e0 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d3909e450 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x556d3909e4c0 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390b8968 <line:190:2, line:212:2>
|   |-IfStmt 0x556d390b87b0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x556d3909e6e8 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x556d3909e6b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x556d3909e610 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x556d3909e450 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x556d3909e6d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x556d3909e698 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x556d3909e670 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x556d3909e638 <col:23> 'int' 0
|   | |-CompoundStmt 0x556d3909eb48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x556d3909e828 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x556d3909e810 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x556d3909e710 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390abfe0 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x556d3909e860 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x556d3909e738 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x556d3909e3e0 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x556d3909e7c8 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x556d3909e7b0 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x556d3909e760 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390ab490 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x556d3909e7f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x556d3909e788 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x556d3909e4c0 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x556d3909eb10 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x556d3909e968 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x556d3909e8e0 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x556d3909e8c8 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x556d3909e878 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x556d3909e910 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x556d3909e8a0 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x556d3909e3e0 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x556d3909e950 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x556d3909e928 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x556d3909e4c0 'node' 'sys_sfnode_t *'
|   | |   |-CompoundStmt 0x556d3909eaf8 <col:53, line:199:4>
|   | |   | `-CallExpr 0x556d3909eaa8 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x556d3909ea90 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x556d3909e990 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390ac298 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |   |-ImplicitCastExpr 0x556d3909eae0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x556d3909e9b8 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x556d3909e3e0 'list' 'sys_sflist_t *'
|   | |   |   `-CallExpr 0x556d3909ea48 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |   |     |-ImplicitCastExpr 0x556d3909ea30 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x556d3909e9e0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   |     `-ImplicitCastExpr 0x556d3909ea78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x556d3909ea08 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x556d3909e3e0 'list' 'sys_sflist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x556d390b8790 <line:200:10, line:209:3>
|   |   |-CallExpr 0x556d3909ec80 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x556d3909ec68 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x556d3909eb68 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x556d390aba50 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x556d390b8518 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x556d3909eb90 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x556d3909e450 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x556d3909ec20 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x556d3909ec08 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x556d3909ebb8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390ab490 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x556d3909ec50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x556d3909ebe0 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x556d3909e4c0 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x556d390b8758 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x556d390b8620 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x556d390b8598 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x556d390b8580 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x556d390b8530 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x556d390b85c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556d390b8558 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x556d3909e3e0 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x556d390b8608 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556d390b85e0 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x556d3909e4c0 'node' 'sys_sfnode_t *'
|   |     |-CompoundStmt 0x556d390b8740 <col:53, line:208:4>
|   |     | `-CallExpr 0x556d390b86d8 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x556d390b86c0 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x556d390b8648 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390ac298 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |   |-ImplicitCastExpr 0x556d390b8710 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x556d390b8670 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x556d3909e3e0 'list' 'sys_sflist_t *'
|   |     |   `-ImplicitCastExpr 0x556d390b8728 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556d390b8698 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x556d3909e450 'prev_node' 'sys_sfnode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x556d390b88d0 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x556d390b88b8 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d390b87e8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x556d390aba50 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x556d390b8908 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d390b8810 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x556d3909e4c0 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x556d390b8920 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x556d390b8898 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x556d390b8870 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x556d390b8838 <col:23> 'int' 0
|-FunctionDecl 0x556d390b8b20 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390b8998 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390b8a08 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x556d391d5610 <line:460:3, line:467:35>
|   |-ParagraphComment 0x556d391d5240 <line:460:3>
|   | `-TextComment 0x556d391d5210 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d5260 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d391d52c0 <col:10, col:44>
|   |   `-TextComment 0x556d391d5290 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x556d391d5310 <line:462:3, col:63>
|   | `-TextComment 0x556d391d52e0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x556d391d5360 <line:464:3>
|   | `-TextComment 0x556d391d5330 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d5380 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x556d391d5430 <line:464:15, line:465:3>
|   |   |-TextComment 0x556d391d53e0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x556d391d5400 <line:465:3> Text=" "
|   |-ParamCommandComment 0x556d391d5450 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x556d391d54e0 <col:15, col:60>
|   |   `-TextComment 0x556d391d54b0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x556d391d5530 <line:467:3>
|   | `-TextComment 0x556d391d5500 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d5550 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391d55b0 <col:11, col:35>
|       `-TextComment 0x556d391d5580 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x556d390b8ce0 prev 0x556d390b8b20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x556d390b8be0 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x556d390b8c50 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x556d390b9680 <line:218:2, line:233:2>
|   |-DeclStmt 0x556d390b8e98 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x556d390b8da0 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x556d390b8e80 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x556d390b8e60 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x556d390b8e38 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x556d390b8e00 <col:23> 'int' 0
|   |-DeclStmt 0x556d390b8f20 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x556d390b8ec0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x556d390b95f8 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x556d390b9010 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x556d390b8f38 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x556d390b8ec0 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x556d390b8fc8 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x556d390b8fb0 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x556d390b8f60 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x556d390b8ff8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x556d390b8f88 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x556d390b8be0 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x556d390b9110 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x556d390b90e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x556d390b9038 <col:42> 'sys_sfnode_t *' lvalue Var 0x556d390b8ec0 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x556d390b90f8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x556d390b90c0 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x556d390b9098 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x556d390b9060 <col:23> 'int' 0
|   | |-BinaryOperator 0x556d390b9210 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x556d390b9138 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x556d390b8ec0 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x556d390b91c8 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x556d390b91b0 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x556d390b9160 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390adf78 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x556d390b91f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x556d390b9188 <col:42> 'sys_sfnode_t *' lvalue Var 0x556d390b8ec0 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x556d390b95d8 <col:48, line:230:3>
|   |   |-IfStmt 0x556d390b9510 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x556d390b92b8 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x556d390b9288 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x556d390b9238 <col:8> 'sys_sfnode_t *' lvalue Var 0x556d390b8ec0 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x556d390b92a0 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x556d390b9260 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b8c50 'node' 'sys_sfnode_t *'
|   |   | |-CompoundStmt 0x556d390b94c8 <col:22, line:227:4>
|   |   | | |-CallExpr 0x556d390b93f0 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x556d390b93d8 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x556d390b92e0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x556d3909e558 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   | | | |-ImplicitCastExpr 0x556d390b9430 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x556d390b9308 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x556d390b8be0 'list' 'sys_sflist_t *'
|   |   | | | |-ImplicitCastExpr 0x556d390b9448 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x556d390b9330 <col:38> 'sys_sfnode_t *' lvalue Var 0x556d390b8da0 'prev' 'sys_sfnode_t *'
|   |   | | | `-ImplicitCastExpr 0x556d390b9460 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x556d390b9358 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x556d390b8c50 'node' 'sys_sfnode_t *'
|   |   | | `-ReturnStmt 0x556d390b94b0 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x556d390b9498 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x556d390b9478 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x556d390b95b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x556d390b9548 <col:4> 'sys_sfnode_t *' lvalue Var 0x556d390b8da0 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x556d390b9598 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x556d390b9570 <col:11> 'sys_sfnode_t *' lvalue Var 0x556d390b8ec0 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x556d390b9668 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x556d390b9650 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x556d390b9630 <col:16> 'int' 0
|-RecordDecl 0x556d390b96b0 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x556d390b9760 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x556d390b9878 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x556d390b99e8 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x556d390b9a80 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x556d390b9ad8 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x556d390b9a80 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x556d390b9878 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x556d390b9b28 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x556d390b9a80 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x556d390b99e8 'bits' 'u32_t [2]'
| `-FieldDecl 0x556d390b9b78 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x556d390b9c10 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x556d390b9cd8 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x556d390b9d30 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x556d390b9db0 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x556d390b9e08 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x556d390b9e80 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x556d390b9f80 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x556d390b9fd8 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x556d390ba1d0 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x556d390ba0d0 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x556d390be018 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x556d390ba2a0 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x556d390ba310 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d390ba380 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x556d390ba3f0 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x556d390ba490 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x556d390be320 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x556d390be108 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x556d390be178 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x556d390be1e8 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x556d390be3d8 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x556d390be4a8 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x556d390be540 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x556d390be4f0 'struct _ready_q' sugar
|   `-RecordType 0x556d390be460 'struct _ready_q'
|     `-Record 0x556d390be3d8 '_ready_q'
|-RecordDecl 0x556d390be598 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x556d390be650 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x556d390be6b0 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x556d390be720 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x556d390be790 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x556d390be7e8 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x556d390be880 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x556d390be830 'struct _cpu' sugar
|   `-RecordType 0x556d390be620 'struct _cpu'
|     `-Record 0x556d390be598 '_cpu'
|-RecordDecl 0x556d390be8d8 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x556d390be980 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x556d390bea78 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x556d390beac0 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x556d390beb80 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x556d390bebe0 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x556d390bec50 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x556d390becf0 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x556d390bed48 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x556d390becf0 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x556d390beb80 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x556d390bed98 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x556d390becf0 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x556d390bebe0 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x556d390bede8 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x556d390becf0 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x556d390bec50 'current' 'struct k_thread *'
| `-FieldDecl 0x556d390beeb0 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x556d390c32c0 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x556d390c3270 'struct z_kernel' sugar
|   `-RecordType 0x556d390be960 'struct z_kernel'
|     `-Record 0x556d390be8d8 'z_kernel'
|-VarDecl 0x556d390c3338 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x556d390c34f0 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x556d391d58c0 <line:40:3, line:45:25>
|   |-ParagraphComment 0x556d391d56b0 <line:40:3>
|   | `-TextComment 0x556d391d5680 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d56d0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x556d391d5730 <col:10, col:56>
|   |   `-TextComment 0x556d391d5700 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x556d391d57a0 <line:42:3, line:43:27>
|   | |-TextComment 0x556d391d5750 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x556d391d5770 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x556d391d57f0 <line:45:3>
|   | `-TextComment 0x556d391d57c0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d5810 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x556d391d5870 <col:11, col:25>
|       `-TextComment 0x556d391d5840 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x556d390c36d8 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x556d391d5c10 <line:37:3, line:43:31>
|   |-ParagraphComment 0x556d391d5960 <line:37:3>
|   | `-TextComment 0x556d391d5930 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d5980 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x556d391d5a00 <line:37:10, line:38:20>
|   |   |-TextComment 0x556d391d59b0 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x556d391d59d0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x556d391d5a50 <line:40:3>
|   | `-TextComment 0x556d391d5a20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d5a70 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x556d391d5af0 <line:40:9, line:41:23>
|   |   |-TextComment 0x556d391d5aa0 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x556d391d5ac0 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x556d391d5b40 <line:43:3>
|   | `-TextComment 0x556d391d5b10 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d5b60 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x556d391d5bc0 <col:11, col:31>
|       `-TextComment 0x556d391d5b90 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x556d390c3940 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x556d390c37c0 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x556d390c3830 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x556d391d60c0 <line:47:3, line:56:1>
|   |-ParagraphComment 0x556d391d5cb0 <line:47:3>
|   | `-TextComment 0x556d391d5c80 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d5cd0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x556d391d5d50 <line:47:10, line:48:33>
|   |   |-TextComment 0x556d391d5d00 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x556d391d5d20 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x556d391d5da0 <line:50:3>
|   | `-TextComment 0x556d391d5d70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d5dc0 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x556d391d5e40 <line:50:9, line:51:31>
|   |   |-TextComment 0x556d391d5df0 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x556d391d5e10 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x556d391d5e90 <line:53:3>
|   | `-TextComment 0x556d391d5e60 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d5eb0 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x556d391d5f60 <line:53:20, line:54:3>
|   |   |-TextComment 0x556d391d5f10 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x556d391d5f30 <line:54:3> Text=" "
|   |-ParamCommandComment 0x556d391d5f80 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x556d391d6010 <col:14, col:45>
|   |   `-TextComment 0x556d391d5fe0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x556d391d6060 <line:56:1>
|     `-TextComment 0x556d391d6030 <col:1> Text=" "
|-FunctionDecl 0x556d390c3bb8 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x556d390c3a30 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x556d390c3aa0 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x556d391d6690 <line:60:3, line:71:1>
|   |-ParagraphComment 0x556d391d6160 <line:60:3>
|   | `-TextComment 0x556d391d6130 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d6180 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x556d391d6200 <line:60:10, line:61:22>
|   |   |-TextComment 0x556d391d61b0 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x556d391d61d0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x556d391d6250 <line:63:3>
|   | `-TextComment 0x556d391d6220 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d6270 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x556d391d62f0 <line:63:9, line:64:42>
|   |   |-TextComment 0x556d391d62a0 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x556d391d62c0 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x556d391d6340 <line:66:3>
|   | `-TextComment 0x556d391d6310 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d6360 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x556d391d6410 <line:66:20, line:67:3>
|   |   |-TextComment 0x556d391d63c0 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x556d391d63e0 <line:67:3> Text=" "
|   |-ParamCommandComment 0x556d391d6430 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x556d391d64c0 <col:14, col:45>
|   |   `-TextComment 0x556d391d6490 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x556d391d6510 <line:69:3>
|   | `-TextComment 0x556d391d64e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d6530 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x556d391d6590 <col:11, col:53>
|   |   `-TextComment 0x556d391d6560 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x556d391d65e0 <line:71:1>
|     `-TextComment 0x556d391d65b0 <col:1> Text=" "
|-TypedefDecl 0x556d390e0ec0 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x556d390c4150 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x556d390c40f0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x556d390c4080 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x556d390c3cd0 'uintptr_t' sugar
| |     | |-Typedef 0x556d38fd8458 'uintptr_t'
| |     | `-BuiltinType 0x556d38f8aae0 'unsigned long'
| |     |-TypedefType 0x556d390c3cd0 'uintptr_t' sugar
| |     | |-Typedef 0x556d38fd8458 'uintptr_t'
| |     | `-BuiltinType 0x556d38f8aae0 'unsigned long'
| |     |-TypedefType 0x556d390c3cd0 'uintptr_t' sugar
| |     | |-Typedef 0x556d38fd8458 'uintptr_t'
| |     | `-BuiltinType 0x556d38f8aae0 'unsigned long'
| |     |-TypedefType 0x556d390c3cd0 'uintptr_t' sugar
| |     | |-Typedef 0x556d38fd8458 'uintptr_t'
| |     | `-BuiltinType 0x556d38f8aae0 'unsigned long'
| |     |-TypedefType 0x556d390c3cd0 'uintptr_t' sugar
| |     | |-Typedef 0x556d38fd8458 'uintptr_t'
| |     | `-BuiltinType 0x556d38f8aae0 'unsigned long'
| |     |-TypedefType 0x556d390c3cd0 'uintptr_t' sugar
| |     | |-Typedef 0x556d38fd8458 'uintptr_t'
| |     | `-BuiltinType 0x556d38f8aae0 'unsigned long'
| |     |-TypedefType 0x556d390c3cd0 'uintptr_t' sugar
| |     | |-Typedef 0x556d38fd8458 'uintptr_t'
| |     | `-BuiltinType 0x556d38f8aae0 'unsigned long'
| |     `-PointerType 0x556d38f8ae20 'void *'
| |       `-BuiltinType 0x556d38f8a980 'void'
| `-FullComment 0x556d391d7320 <line:50:3, line:84:1>
|   |-ParagraphComment 0x556d391d6730 <line:50:3>
|   | `-TextComment 0x556d391d6700 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d391d6750 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x556d391d67c0 <line:51:3>
|   | `-TextComment 0x556d391d6790 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d67e0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391d6840 <col:10, col:43>
|   |   `-TextComment 0x556d391d6810 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x556d391d68b0 <line:53:3, line:54:67>
|   | |-TextComment 0x556d391d6860 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x556d391d6880 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x556d391d6a90 <line:56:3, line:66:41>
|   | |-TextComment 0x556d391d68d0 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x556d391d68f0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x556d391d6910 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x556d391d6930 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x556d391d6950 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x556d391d6970 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x556d391d6990 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x556d391d69b0 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x556d391d69d0 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x556d391d69f0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x556d391d6a10 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x556d391d6b00 <line:68:3, line:69:70>
|   | |-TextComment 0x556d391d6ab0 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x556d391d6ad0 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x556d391d6b50 <line:71:3, col:80>
|   | `-TextComment 0x556d391d6b20 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x556d391d6ba0 <line:73:3>
|   | `-TextComment 0x556d391d6b70 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d6bc0 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x556d391d6c70 <line:73:15, line:74:3>
|   |   |-TextComment 0x556d391d6c20 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x556d391d6c40 <line:74:3> Text=" "
|   |-ParamCommandComment 0x556d391d6c90 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x556d391d6d40 <line:74:15, line:75:3>
|   |   |-TextComment 0x556d391d6cf0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x556d391d6d10 <line:75:3> Text=" "
|   |-ParamCommandComment 0x556d391d6d60 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x556d391d6e10 <line:75:15, line:76:3>
|   |   |-TextComment 0x556d391d6dc0 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x556d391d6de0 <line:76:3> Text=" "
|   |-ParamCommandComment 0x556d391d6e30 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x556d391d6ee0 <line:76:15, line:77:3>
|   |   |-TextComment 0x556d391d6e90 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x556d391d6eb0 <line:77:3> Text=" "
|   |-ParamCommandComment 0x556d391d6f00 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x556d391d6fb0 <line:77:15, line:78:3>
|   |   |-TextComment 0x556d391d6f60 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x556d391d6f80 <line:78:3> Text=" "
|   |-ParamCommandComment 0x556d391d6fd0 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x556d391d7080 <line:78:15, line:79:3>
|   |   |-TextComment 0x556d391d7030 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x556d391d7050 <line:79:3> Text=" "
|   |-ParamCommandComment 0x556d391d70a0 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x556d391d7180 <line:79:14, line:81:3>
|   |   |-TextComment 0x556d391d7100 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x556d391d7120 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x556d391d7140 <line:81:3> Text=" "
|   |-BlockCommandComment 0x556d391d71a0 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x556d391d7220 <line:81:11, line:82:22>
|   |   |-TextComment 0x556d391d71d0 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x556d391d71f0 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x556d391d7270 <line:84:1>
|     `-TextComment 0x556d391d7240 <col:1> Text=" "
|-FunctionDecl 0x556d390e0fe0 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x556d390e1208 <line:94:1, line:106:1>
| | |-DeclStmt 0x556d390e1170 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x556d390e10d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x556d390e1158 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x556d390e1138 <col:16> 'int' 0
| | `-ReturnStmt 0x556d390e11c8 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x556d390e11b0 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x556d390e1188 <col:9> 'bool' lvalue Var 0x556d390e10d8 'ret' 'bool'
| `-AlwaysInlineAttr 0x556d390e1080 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x556d390e12b8 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x556d390e13a8 <line:114:1, line:120:1>
| | `-ReturnStmt 0x556d390e1390 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x556d390e1378 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x556d390e1358 <col:16> 'int' 0
| `-FullComment 0x556d391d74d0 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x556d391d73c0 <line:109:3, col:53>
|   | `-TextComment 0x556d391d7390 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x556d391d7410 <line:111:3>
|   | `-TextComment 0x556d391d73e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d7430 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x556d391d7490 <col:11, col:69>
|       `-TextComment 0x556d391d7460 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-TypedefDecl 0x556d390e13f0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x556d390e13c0 '__builtin_va_list' sugar
|   |-Typedef 0x556d38f8b548 '__builtin_va_list'
|   `-ConstantArrayType 0x556d38f8b4f0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x556d38f8b360 'struct __va_list_tag'
|       `-Record 0x556d38f8b2d8 '__va_list_tag'
|-TypedefDecl 0x556d390e1480 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x556d390e1450 '__gnuc_va_list' sugar
|   |-Typedef 0x556d390e13f0 '__gnuc_va_list'
|   `-TypedefType 0x556d390e13c0 '__builtin_va_list' sugar
|     |-Typedef 0x556d38f8b548 '__builtin_va_list'
|     `-ConstantArrayType 0x556d38f8b4f0 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x556d38f8b360 'struct __va_list_tag'
|         `-Record 0x556d38f8b2d8 '__va_list_tag'
|-FunctionDecl 0x556d390e1630 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x556d390e1570 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x556d390e17f8 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x556d390e17d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x556d390e17b8 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x556d390e1798 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x556d390e1730 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x556d390e1570 'fmt' 'const char *'
| `-FormatAttr 0x556d390e16d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x556d390e1a80 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x556d390e1878 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x556d390e1970 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x556d390e1d18 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x556d390e1c28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x556d390e1c10 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x556d390e1bf0 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x556d390e1b88 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x556d390e1878 'fmt' 'const char *'
| | `-CStyleCastExpr 0x556d390e1cf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x556d390e1cd8 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x556d390e1cb8 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x556d390e1c50 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x556d390e1970 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x556d390e1b30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x556d390ea378 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x556d390e1da0 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x556d390e1e10 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d390ea240 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x556d390ea430 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x556d390ea798 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x556d390ea4f0 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x556d390ea560 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d390ea5d8 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x556d390ea648 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x556d390ea858 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x556d390eada0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x556d390eab00 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x556d390eab78 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x556d390eabf0 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x556d390eac60 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x556d390eae60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-RecordDecl 0x556d390eaf18 prev 0x556d3907c508 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x556d390eafa0 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x556d390eb050 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x556d390eb150 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x556d390eb100 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x556d390eb0e0 'struct _k_thread_stack_element'
|     `-Record 0x556d3912d570 '_k_thread_stack_element'
|-TypedefDecl 0x556d390ece40 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x556d390ecdd0 'void (*)(void *, void *, void *)'
|   `-ParenType 0x556d390ecd70 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x556d390ecd20 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x556d38f8a980 'void'
|       |-PointerType 0x556d38f8ae20 'void *'
|       | `-BuiltinType 0x556d38f8a980 'void'
|       |-PointerType 0x556d38f8ae20 'void *'
|       | `-BuiltinType 0x556d38f8a980 'void'
|       `-PointerType 0x556d38f8ae20 'void *'
|         `-BuiltinType 0x556d38f8a980 'void'
|-FunctionDecl 0x556d390ecf88 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x556d391d7680 <line:55:3, line:57:24>
|   |-ParagraphComment 0x556d391d7570 <line:55:3, col:70>
|   | `-TextComment 0x556d391d7540 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x556d391d75c0 <line:57:3>
|   | `-TextComment 0x556d391d7590 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d75e0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x556d391d7640 <col:8, col:24>
|       `-TextComment 0x556d391d7610 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x556d390ed300 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x556d391d7a00 <line:120:3, line:130:20>
|   |-ParagraphComment 0x556d391d7720 <line:120:3>
|   | `-TextComment 0x556d391d76f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d7740 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x556d391d77a0 <col:10, col:33>
|   |   `-TextComment 0x556d391d7770 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x556d391d7840 <line:122:3, line:124:47>
|   | |-TextComment 0x556d391d77c0 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x556d391d77e0 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x556d391d7800 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x556d391d78e0 <line:126:3, line:128:35>
|   | |-TextComment 0x556d391d7860 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x556d391d7880 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x556d391d78a0 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x556d391d7930 <line:130:3>
|   | `-TextComment 0x556d391d7900 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391d7950 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x556d391d79b0 <col:8, col:20>
|       `-TextComment 0x556d391d7980 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x556d390ed4a0 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x556d390ed3e0 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x556d391d7f10 <line:135:3, line:150:76>
|   |-ParagraphComment 0x556d391d7aa0 <line:135:3>
|   | `-TextComment 0x556d391d7a70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d7ac0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x556d391d7b20 <col:10, col:66>
|   |   `-TextComment 0x556d391d7af0 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x556d391d7b70 <line:137:3, col:62>
|   | `-TextComment 0x556d391d7b40 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x556d391d7c60 <line:139:3, line:143:44>
|   | |-TextComment 0x556d391d7b90 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x556d391d7bb0 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x556d391d7bd0 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x556d391d7bf0 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x556d391d7c10 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x556d391d7cd0 <line:145:3, line:146:65>
|   | |-TextComment 0x556d391d7c80 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x556d391d7ca0 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x556d391d7d20 <line:148:3>
|   | `-TextComment 0x556d391d7cf0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d7d40 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x556d391d7da0 <col:8, col:27>
|   |   `-TextComment 0x556d391d7d70 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x556d391d7df0 <line:150:3>
|   | `-TextComment 0x556d391d7dc0 <col:3> Text=" "
|   `-ParamCommandComment 0x556d391d7e10 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x556d391d7ea0 <col:14, col:76>
|       `-TextComment 0x556d391d7e70 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x556d390ed790 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x556d390ed730 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x556d390ed6d0 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x556d390ed690 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x556d38f8a980 'void'
| |     `-PointerType 0x556d38f8ae20 'void *'
| |       `-BuiltinType 0x556d38f8a980 'void'
| `-FullComment 0x556d391d80f0 <line:163:3, line:165:52>
|   |-ParagraphComment 0x556d391d7fb0 <line:163:3, col:25>
|   | `-TextComment 0x556d391d7f80 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x556d391d8000 <line:165:3>
|   | `-TextComment 0x556d391d7fd0 <col:3> Text=" "
|   `-ParamCommandComment 0x556d391d8020 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x556d391d80b0 <col:18, col:52>
|       `-TextComment 0x556d391d8080 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x556d390eec50 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x556d390ed830 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x556d390ed918 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x556d390ed990 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x556d390eda20 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x556d390eda98 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x556d391db8d0 <line:170:3, line:187:51>
|   |-ParagraphComment 0x556d391d8190 <line:170:3>
|   | `-TextComment 0x556d391d8160 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391d81b0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x556d391d8210 <col:10, col:53>
|   |   `-TextComment 0x556d391d81e0 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x556d391d8300 <line:172:3, line:176:68>
|   | |-TextComment 0x556d391d8230 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x556d391d8250 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x556d391d8270 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x556d391d8290 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x556d391d82b0 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x556d391d83c0 <line:178:3, line:181:41>
|   | |-TextComment 0x556d391d8320 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x556d391d8340 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x556d391d8360 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x556d391d8380 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x556d391d8410 <line:183:3>
|   | `-TextComment 0x556d391d83e0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391d8430 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x556d391d84e0 <line:183:18, line:184:3>
|   |   |-TextComment 0x556d391d8490 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x556d391d84b0 <line:184:3> Text=" "
|   |-ParamCommandComment 0x556d391d8500 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x556d391d85b0 <line:184:16, line:185:3>
|   |   |-TextComment 0x556d391d8560 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x556d391d8580 <line:185:3> Text=" "
|   |-ParamCommandComment 0x556d391d85d0 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x556d391db6e0 <line:185:13, line:186:3>
|   |   |-TextComment 0x556d391db690 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x556d391db6b0 <line:186:3> Text=" "
|   |-ParamCommandComment 0x556d391db700 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x556d391db7b0 <line:186:13, line:187:3>
|   |   |-TextComment 0x556d391db760 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x556d391db780 <line:187:3> Text=" "
|   `-ParamCommandComment 0x556d391db7d0 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x556d391db860 <col:14, col:51>
|       `-TextComment 0x556d391db830 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x556d390eee40 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x556d391dba80 <line:200:3, line:202:18>
|   |-ParagraphComment 0x556d391db970 <line:200:3, col:37>
|   | `-TextComment 0x556d391db940 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x556d391db9c0 <line:202:3>
|   | `-TextComment 0x556d391db990 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391db9e0 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x556d391dba40 <col:8, col:18>
|       `-TextComment 0x556d391dba10 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x556d390eefa8 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x556d390eef20 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x556d391dbc30 <line:207:3, line:209:20>
|   |-ParagraphComment 0x556d391dbb20 <line:207:3, col:39>
|   | `-TextComment 0x556d391dbaf0 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x556d391dbb70 <line:209:3>
|   | `-TextComment 0x556d391dbb40 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dbb90 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x556d391dbbf0 <col:8, col:20>
|       `-TextComment 0x556d391dbbc0 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x556d390ef118 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x556d390ef090 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x556d391dbed0 <line:214:3, line:218:39>
|   |-ParagraphComment 0x556d391dbcd0 <line:214:3, col:68>
|   | `-TextComment 0x556d391dbca0 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x556d391dbd20 <line:216:3>
|   | `-TextComment 0x556d391dbcf0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391dbd40 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x556d391dbdf0 <line:216:14, line:217:3>
|   |   |-TextComment 0x556d391dbda0 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x556d391dbdc0 <line:217:3> Text=" "
|   `-BlockCommandComment 0x556d391dbe10 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x556d391dbe90 <line:217:11, line:218:39>
|       |-TextComment 0x556d391dbe40 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x556d391dbe60 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x556d390ef288 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x556d390ef200 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x556d391dc080 <line:223:3, line:225:21>
|   |-ParagraphComment 0x556d391dbf70 <line:223:3, col:39>
|   | `-TextComment 0x556d391dbf40 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x556d391dbfc0 <line:225:3>
|   | `-TextComment 0x556d391dbf90 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dbfe0 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x556d391dc040 <col:8, col:21>
|       `-TextComment 0x556d391dc010 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x556d390ef3f8 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x556d390ef370 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x556d391dc230 <line:230:3, line:232:20>
|   |-ParagraphComment 0x556d391dc120 <line:230:3, col:38>
|   | `-TextComment 0x556d391dc0f0 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x556d391dc170 <line:232:3>
|   | `-TextComment 0x556d391dc140 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dc190 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x556d391dc1f0 <col:8, col:20>
|       `-TextComment 0x556d391dc1c0 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x556d390ef5a8 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x556d390ef4e0 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x556d391dc3e0 <line:237:3, line:239:24>
|   |-ParagraphComment 0x556d391dc2d0 <line:237:3, col:39>
|   | `-TextComment 0x556d391dc2a0 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x556d391dc320 <line:239:3>
|   | `-TextComment 0x556d391dc2f0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dc340 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x556d391dc3a0 <col:8, col:24>
|       `-TextComment 0x556d391dc370 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x556d390efaf8 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x556d390ef690 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x556d390ef708 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x556d390ef8a0 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x556d390ef918 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x556d390ef988 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x556d391dca00 <line:244:3, line:252:48>
|   |-ParagraphComment 0x556d391dc480 <line:244:3, col:53>
|   | `-TextComment 0x556d391dc450 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x556d391dc4d0 <line:246:3>
|   | `-TextComment 0x556d391dc4a0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391dc4f0 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x556d391dc5a0 <line:246:14, line:247:3>
|   |   |-TextComment 0x556d391dc550 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x556d391dc570 <line:247:3> Text=" "
|   |-ParamCommandComment 0x556d391dc5c0 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x556d391dc670 <line:247:19, line:248:3>
|   |   |-TextComment 0x556d391dc620 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x556d391dc640 <line:248:3> Text=" "
|   |-ParamCommandComment 0x556d391dc690 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x556d391dc740 <line:248:18, line:249:3>
|   |   |-TextComment 0x556d391dc6f0 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x556d391dc710 <line:249:3> Text=" "
|   |-ParamCommandComment 0x556d391dc760 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x556d391dc810 <line:249:20, line:250:3>
|   |   |-TextComment 0x556d391dc7c0 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x556d391dc7e0 <line:250:3> Text=" "
|   |-ParamCommandComment 0x556d391dc830 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x556d391dc8c0 <col:16, col:52>
|   |   `-TextComment 0x556d391dc890 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x556d391dc910 <line:252:3>
|   | `-TextComment 0x556d391dc8e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dc930 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x556d391dc990 <col:11, col:48>
|       `-TextComment 0x556d391dc960 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x556d390eff38 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x556d390effe8 <line:28:1, line:34:1>
|-FunctionDecl 0x556d390f0440 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x556d390f0008 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x556d390f0078 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x556d390f00e8 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x556d390f0158 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x556d390f01c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x556d390f0238 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x556d390f02a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x556d390f4618 <line:58:1, line:105:1>
| | |-DeclStmt 0x556d390f08a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x556d390f0570 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x556d390f0888 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x556d390f0860 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x556d390f06f0 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x556d390f06d8 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x556d390f06c0 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x556d390f05d0 <col:19> 'bool' lvalue ParmVar 0x556d390f0158 'const_hz' 'bool'
| | |       | `-ParenExpr 0x556d390f06a0 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x556d390f0678 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x556d390f0648 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x556d390f05f8 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x556d390f0660 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x556d390f0620 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x556d390f0840 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x556d390f0818 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x556d390f07c0 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x556d390f0798 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x556d390f0768 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x556d390f0718 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x556d390f0780 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x556d390f0740 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x556d390f0800 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x556d390f07e0 <col:46> 'int' 0
| | |-DeclStmt 0x556d390f0bf8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x556d390f08c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x556d390f0be0 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x556d390f0bb8 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x556d390f0a48 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x556d390f0a30 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x556d390f0a18 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x556d390f0928 <col:19> 'bool' lvalue ParmVar 0x556d390f0158 'const_hz' 'bool'
| | |       | `-ParenExpr 0x556d390f09f8 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x556d390f09d0 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x556d390f09a0 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x556d390f0950 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x556d390f09b8 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x556d390f0978 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x556d390f0b98 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x556d390f0b70 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x556d390f0b18 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x556d390f0af0 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x556d390f0ac0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x556d390f0a70 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x556d390f0ad8 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x556d390f0a98 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x556d390f0b58 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x556d390f0b38 <col:46> 'int' 0
| | |-IfStmt 0x556d390f2cf0 <line:64:2, line:66:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x556d390f2b20 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x556d390f2af0 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x556d390f0c10 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x556d390f2b08 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x556d390f0c38 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| | | |-CompoundStmt 0x556d390f2cd8 <col:24, line:66:2>
| | | | `-ReturnStmt 0x556d390f2cc0 <line:65:3, col:34>
| | | |   `-ConditionalOperator 0x556d390f2c90 <col:10, col:34> 'unsigned long long'
| | | |     |-ImplicitCastExpr 0x556d390f2c48 <col:10> 'int' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0x556d390f2c30 <col:10> 'bool' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0x556d390f2b48 <col:10> 'bool' lvalue ParmVar 0x556d390f01c8 'result32' 'bool'
| | | |     |-ImplicitCastExpr 0x556d390f2c78 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | | |     | `-ParenExpr 0x556d390f2be8 <col:21, col:30> 'u32_t':'unsigned int'
| | | |     |   `-CStyleCastExpr 0x556d390f2bc0 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | | |     |     `-ImplicitCastExpr 0x556d390f2ba8 <col:29> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |     |       `-DeclRefExpr 0x556d390f2b70 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f0008 't' 'u64_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x556d390f2c60 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |       `-DeclRefExpr 0x556d390f2c08 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f0008 't' 'u64_t':'unsigned long long'
| | | `-<<<NULL>>>
| | |-DeclStmt 0x556d390f2dd0 <line:68:2, col:15>
| | | `-VarDecl 0x556d390f2d38 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x556d390f2db8 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x556d390f2d98 <col:14> 'int' 0
| | |-IfStmt 0x556d390f33b0 <line:70:2, line:78:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x556d390f2e28 <line:70:6, col:7> 'int' prefix '!'
| | | | `-ImplicitCastExpr 0x556d390f2e10 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x556d390f2de8 <col:7> 'bool' lvalue Var 0x556d390f0570 'mul_ratio' 'bool'
| | | |-CompoundStmt 0x556d390f3390 <col:18, line:78:2>
| | | | |-DeclStmt 0x556d390f3048 <line:71:3, col:59>
| | | | | `-VarDecl 0x556d390f2e58 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | | | |   `-ConditionalOperator 0x556d390f3018 <col:20, col:52> 'unsigned int'
| | | | |     |-ImplicitCastExpr 0x556d390f2fe8 <col:20> 'int' <IntegralCast>
| | | | |     | `-ImplicitCastExpr 0x556d390f2fd0 <col:20> 'bool' <LValueToRValue>
| | | | |     |   `-DeclRefExpr 0x556d390f2eb8 <col:20> 'bool' lvalue Var 0x556d390f08c8 'div_ratio' 'bool'
| | | | |     |-ParenExpr 0x556d390f2f88 <col:32, col:48> 'unsigned int'
| | | | |     | `-BinaryOperator 0x556d390f2f60 <col:33, col:43> 'unsigned int' '/'
| | | | |     |   |-ImplicitCastExpr 0x556d390f2f30 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |   | `-DeclRefExpr 0x556d390f2ee0 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| | | | |     |   `-ImplicitCastExpr 0x556d390f2f48 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |     `-DeclRefExpr 0x556d390f2f08 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| | | | |     `-ImplicitCastExpr 0x556d390f3000 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x556d390f2fa8 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| | | | `-IfStmt 0x556d390f3358 <line:73:3, line:77:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-ImplicitCastExpr 0x556d390f3088 <line:73:7> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x556d390f3060 <col:7> 'bool' lvalue ParmVar 0x556d390f0238 'round_up' 'bool'
| | | |   |-CompoundStmt 0x556d390f31a8 <col:17, line:75:3>
| | | |   | `-BinaryOperator 0x556d390f3180 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | | |   |   |-DeclRefExpr 0x556d390f30a0 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x556d390f2d38 'off' 'u64_t':'unsigned long long'
| | | |   |   `-ImplicitCastExpr 0x556d390f3168 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |   |     `-BinaryOperator 0x556d390f3140 <col:10, col:21> 'unsigned int' '-'
| | | |   |       |-ImplicitCastExpr 0x556d390f3110 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   |       | `-DeclRefExpr 0x556d390f30c8 <col:10> 'u32_t':'unsigned int' lvalue Var 0x556d390f2e58 'rdivisor' 'u32_t':'unsigned int'
| | | |   |       `-ImplicitCastExpr 0x556d390f3128 <col:21> 'unsigned int' <IntegralCast>
| | | |   |         `-IntegerLiteral 0x556d390f30f0 <col:21> 'int' 1
| | | |   `-IfStmt 0x556d390f3320 <line:75:10, line:77:3>
| | | |     |-<<<NULL>>>
| | | |     |-<<<NULL>>>
| | | |     |-ImplicitCastExpr 0x556d390f31e8 <line:75:14> 'bool' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x556d390f31c0 <col:14> 'bool' lvalue ParmVar 0x556d390f02a8 'round_off' 'bool'
| | | |     |-CompoundStmt 0x556d390f3308 <col:25, line:77:3>
| | | |     | `-BinaryOperator 0x556d390f32e0 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | | |     |   |-DeclRefExpr 0x556d390f3200 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x556d390f2d38 'off' 'u64_t':'unsigned long long'
| | | |     |   `-ImplicitCastExpr 0x556d390f32c8 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |     |     `-BinaryOperator 0x556d390f32a0 <col:10, col:21> 'unsigned int' '/'
| | | |     |       |-ImplicitCastExpr 0x556d390f3270 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |     |       | `-DeclRefExpr 0x556d390f3228 <col:10> 'u32_t':'unsigned int' lvalue Var 0x556d390f2e58 'rdivisor' 'u32_t':'unsigned int'
| | | |     |       `-ImplicitCastExpr 0x556d390f3288 <col:21> 'unsigned int' <IntegralCast>
| | | |     |         `-IntegerLiteral 0x556d390f3250 <col:21> 'int' 2
| | | |     `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-IfStmt 0x556d390f45b8 <line:85:2, line:104:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x556d390f3410 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x556d390f33e8 <col:6> 'bool' lvalue Var 0x556d390f08c8 'div_ratio' 'bool'
| |   |-CompoundStmt 0x556d390f3888 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x556d390f3490 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x556d390f3428 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f0008 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x556d390f3478 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x556d390f3450 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x556d390f2d38 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x556d390f3850 <line:87:3, line:91:3>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x556d390f34f0 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x556d390f34c8 <col:7> 'bool' lvalue ParmVar 0x556d390f01c8 'result32' 'bool'
| |   |   |-CompoundStmt 0x556d390f36c0 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x556d390f36a8 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x556d390f3690 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x556d390f3668 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x556d390f3580 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x556d390f3558 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x556d390f3540 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |   |       |     `-DeclRefExpr 0x556d390f3508 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f0008 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x556d390f3648 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x556d390f3620 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x556d390f35f0 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x556d390f35a0 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x556d390f3608 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x556d390f35c8 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x556d390f3838 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x556d390f3820 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x556d390f37f8 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x556d390f37c8 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x556d390f36d8 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f0008 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x556d390f37e0 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x556d390f37a8 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x556d390f3780 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x556d390f3750 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x556d390f3700 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x556d390f3768 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x556d390f3728 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x556d390f4580 <line:92:9, line:104:2>
| |     |-<<<NULL>>>
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x556d390f38d0 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390f38a8 <col:13> 'bool' lvalue Var 0x556d390f0570 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x556d390f4048 <col:24, line:98:2>
| |     | `-IfStmt 0x556d390f4010 <line:93:3, line:97:3>
| |     |   |-<<<NULL>>>
| |     |   |-<<<NULL>>>
| |     |   |-ImplicitCastExpr 0x556d390f3910 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x556d390f38e8 <col:7> 'bool' lvalue ParmVar 0x556d390f01c8 'result32' 'bool'
| |     |   |-CompoundStmt 0x556d390f3e80 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x556d390f3ac8 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x556d390f3ab0 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x556d390f3a88 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x556d390f39a0 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x556d390f3978 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x556d390f3960 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |   |       |     `-DeclRefExpr 0x556d390f3928 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f0008 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x556d390f3a68 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x556d390f3a40 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x556d390f3a10 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x556d390f39c0 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x556d390f3a28 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x556d390f39e8 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x556d390f3ff8 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x556d390f3fe0 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x556d390f3fb8 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x556d390f3f88 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x556d390f3e98 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f0008 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x556d390f3fa0 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x556d390f3f68 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x556d390f3f40 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x556d390f3f10 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x556d390f3ec0 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x556d390f3f28 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x556d390f3ee8 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x556d390f4568 <line:98:9, line:104:2>
| |       `-IfStmt 0x556d390f4530 <line:99:3, line:103:3>
| |         |-<<<NULL>>>
| |         |-<<<NULL>>>
| |         |-ImplicitCastExpr 0x556d390f4088 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x556d390f4060 <col:7> 'bool' lvalue ParmVar 0x556d390f01c8 'result32' 'bool'
| |         |-CompoundStmt 0x556d390f4320 <col:17, line:101:3>
| |         | `-ReturnStmt 0x556d390f4308 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x556d390f42f0 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x556d390f42c8 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x556d390f42a8 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x556d390f4240 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x556d390f41c8 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x556d390f41a0 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x556d390f4138 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x556d390f40f0 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x556d390f40a0 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f0008 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x556d390f4120 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x556d390f4108 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x556d390f40c8 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x556d390f4188 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x556d390f4160 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x556d390f2d38 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x556d390f4228 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x556d390f4210 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x556d390f41e8 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x556d390f4518 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x556d390f4500 <line:102:4, col:31>
| |             `-BinaryOperator 0x556d390f44d8 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x556d390f4460 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x556d390f4438 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x556d390f43d0 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x556d390f4388 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x556d390f4338 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f0008 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x556d390f43b8 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x556d390f43a0 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x556d390f4360 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f00e8 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x556d390f4420 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x556d390f43f8 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x556d390f2d38 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x556d390f44c0 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x556d390f44a8 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x556d390f4480 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f0078 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x556d390f0518 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x556d390f4770 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390f4668 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390f4bc8 <line:191:1, line:194:1>
| | `-ReturnStmt 0x556d390f4b88 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x556d390f4b70 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390f4a50 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390f4a38 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390f4818 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390f4ac8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390f4ab0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390f4840 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f4668 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390f4ae0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390f4868 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x556d390f4af8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390f48f0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390f48d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390f4888 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390f4b10 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390f4958 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390f4938 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390f4918 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390f4b28 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f4978 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390f4b40 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f4998 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390f4b58 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390f49b8 <col:16> 'int' 0
| `-FullComment 0x556d391dcce0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x556d391dcaa0 <line:182:4>
|   | `-TextComment 0x556d391dca70 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391dcac0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391dcb20 <col:11, col:50>
|   |   `-TextComment 0x556d391dcaf0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x556d391dcbc0 <line:184:3, line:186:44>
|   | |-TextComment 0x556d391dcb40 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x556d391dcb60 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391dcb80 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391dcc10 <line:188:3>
|   | `-TextComment 0x556d391dcbe0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dcc30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391dcc90 <col:11, col:35>
|       `-TextComment 0x556d391dcc60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f4cf0 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390f4bf0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390f67d8 <line:205:1, line:208:1>
| | `-ReturnStmt 0x556d390f6790 <line:207:2, col:66>
| |   `-CallExpr 0x556d390f6688 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390f6670 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390f4d98 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390f66e8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390f4dc0 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f4bf0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390f6700 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390f4de8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x556d390f6718 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390f4e48 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390f4e30 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390f4e08 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390f6730 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390f65f0 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390f65d0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390f65b0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390f6748 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390f6610 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390f6760 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390f6630 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390f6778 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390f6650 <col:16> 'int' 0
| `-FullComment 0x556d391dcfc0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x556d391dcd80 <line:196:4>
|   | `-TextComment 0x556d391dcd50 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391dcda0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391dce00 <col:11, col:50>
|   |   `-TextComment 0x556d391dcdd0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x556d391dcea0 <line:198:3, line:200:44>
|   | |-TextComment 0x556d391dce20 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x556d391dce40 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391dce60 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391dcef0 <line:202:3>
|   | `-TextComment 0x556d391dcec0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dcf10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391dcf70 <col:11, col:35>
|       `-TextComment 0x556d391dcf40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f6888 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390f6800 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390f6c58 <line:219:1, line:222:1>
| | `-ReturnStmt 0x556d390f6c18 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x556d390f6c00 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390f6ae0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390f6ac8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390f6930 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390f6b58 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390f6b40 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390f6958 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f6800 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390f6b70 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390f6980 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x556d390f6b88 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390f69e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390f69c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390f69a0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390f6ba0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390f6a48 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390f6a28 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390f6a08 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390f6bb8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f6a68 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390f6bd0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f6a88 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390f6be8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390f6aa8 <col:16> 'int' 1
| `-FullComment 0x556d391dd2a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x556d391dd060 <line:210:4>
|   | `-TextComment 0x556d391dd030 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391dd080 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391dd0e0 <col:11, col:50>
|   |   `-TextComment 0x556d391dd0b0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x556d391dd180 <line:212:3, line:214:37>
|   | |-TextComment 0x556d391dd100 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x556d391dd120 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391dd140 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391dd1d0 <line:216:3>
|   | `-TextComment 0x556d391dd1a0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dd1f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391dd250 <col:11, col:35>
|       `-TextComment 0x556d391dd220 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f6d08 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390f6c80 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390f70a8 <line:233:1, line:236:1>
| | `-ReturnStmt 0x556d390f7068 <line:235:2, col:65>
| |   `-CallExpr 0x556d390f6f60 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390f6f48 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390f6db0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390f6fc0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390f6dd8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f6c80 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390f6fd8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390f6e00 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x556d390f6ff0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390f6e60 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390f6e48 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390f6e20 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390f7008 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390f6ec8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390f6ea8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390f6e88 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390f7020 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390f6ee8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390f7038 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390f6f08 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390f7050 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390f6f28 <col:16> 'int' 1
| `-FullComment 0x556d391dd580 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x556d391dd340 <line:224:4>
|   | `-TextComment 0x556d391dd310 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391dd360 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391dd3c0 <col:11, col:50>
|   |   `-TextComment 0x556d391dd390 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x556d391dd460 <line:226:3, line:228:37>
|   | |-TextComment 0x556d391dd3e0 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x556d391dd400 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391dd420 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391dd4b0 <line:230:3>
|   | `-TextComment 0x556d391dd480 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dd4d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391dd530 <col:11, col:35>
|       `-TextComment 0x556d391dd500 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f7158 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390f70d0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390f7528 <line:247:1, line:250:1>
| | `-ReturnStmt 0x556d390f74e8 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x556d390f74d0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390f73b0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390f7398 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390f7200 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390f7428 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390f7410 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390f7228 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f70d0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390f7440 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390f7250 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x556d390f7458 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390f72b0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390f7298 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390f7270 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390f7470 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390f7318 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390f72f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390f72d8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390f7488 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f7338 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390f74a0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f7358 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x556d390f74b8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390f7378 <col:16> 'int' 0
| `-FullComment 0x556d391dd870 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x556d391dd620 <line:238:4>
|   | `-TextComment 0x556d391dd5f0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391dd640 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391dd6b0 <col:11, col:50>
|   |   `-TextComment 0x556d391dd670 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x556d391dd750 <line:240:3, line:242:45>
|   | |-TextComment 0x556d391dd6d0 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x556d391dd6f0 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391dd710 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391dd7a0 <line:244:3>
|   | `-TextComment 0x556d391dd770 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dd7c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391dd820 <col:11, col:35>
|       `-TextComment 0x556d391dd7f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f75e8 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390f7550 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390f7988 <line:261:1, line:264:1>
| | `-ReturnStmt 0x556d390f7948 <line:263:2, col:65>
| |   `-CallExpr 0x556d390f7840 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390f7828 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390f7690 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390f78a0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390f76b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f7550 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390f78b8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390f76e0 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x556d390f78d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390f7740 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390f7728 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390f7700 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390f78e8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390f77a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390f7788 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390f7768 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390f7900 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390f77c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390f7918 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390f77e8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x556d390f7930 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390f7808 <col:16> 'int' 0
| `-FullComment 0x556d391ddb50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x556d391dd910 <line:252:4>
|   | `-TextComment 0x556d391dd8e0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391dd930 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391dd990 <col:11, col:50>
|   |   `-TextComment 0x556d391dd960 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x556d391dda30 <line:254:3, line:256:45>
|   | |-TextComment 0x556d391dd9b0 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x556d391dd9d0 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391dd9f0 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391dda80 <line:258:3>
|   | `-TextComment 0x556d391dda50 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ddaa0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391ddb00 <col:11, col:35>
|       `-TextComment 0x556d391ddad0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f7a38 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390f79b0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390f7c88 <line:275:1, line:278:1>
| `-FullComment 0x556d391dde30 <line:266:4, line:272:35>
|   |-ParagraphComment 0x556d391ddbf0 <line:266:4>
|   | `-TextComment 0x556d391ddbc0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391ddc10 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391ddc70 <col:11, col:40>
|   |   `-TextComment 0x556d391ddc40 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x556d391ddd10 <line:268:3, line:270:44>
|   | |-TextComment 0x556d391ddc90 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x556d391ddcb0 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391ddcd0 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391ddd60 <line:272:3>
|   | `-TextComment 0x556d391ddd30 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ddd80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391ddde0 <col:11, col:35>
|       `-TextComment 0x556d391dddb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f7d30 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390f7ca8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390f7f78 <line:289:1, line:292:1>
| `-FullComment 0x556d391de110 <line:280:4, line:286:35>
|   |-ParagraphComment 0x556d391dded0 <line:280:4>
|   | `-TextComment 0x556d391ddea0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391ddef0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391ddf50 <col:11, col:40>
|   |   `-TextComment 0x556d391ddf20 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x556d391ddff0 <line:282:3, line:284:44>
|   | |-TextComment 0x556d391ddf70 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x556d391ddf90 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391ddfb0 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391de040 <line:286:3>
|   | `-TextComment 0x556d391de010 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391de060 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391de0c0 <col:11, col:35>
|       `-TextComment 0x556d391de090 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f8020 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390f7f98 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390f8268 <line:303:1, line:306:1>
| `-FullComment 0x556d391de3f0 <line:294:4, line:300:35>
|   |-ParagraphComment 0x556d391de1b0 <line:294:4>
|   | `-TextComment 0x556d391de180 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391de1d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391de230 <col:11, col:40>
|   |   `-TextComment 0x556d391de200 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x556d391de2d0 <line:296:3, line:298:37>
|   | |-TextComment 0x556d391de250 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x556d391de270 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391de290 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391de320 <line:300:3>
|   | `-TextComment 0x556d391de2f0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391de340 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391de3a0 <col:11, col:35>
|       `-TextComment 0x556d391de370 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f8310 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390f8288 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390f8558 <line:317:1, line:320:1>
| `-FullComment 0x556d391de6d0 <line:308:4, line:314:35>
|   |-ParagraphComment 0x556d391de490 <line:308:4>
|   | `-TextComment 0x556d391de460 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391de4b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391de510 <col:11, col:40>
|   |   `-TextComment 0x556d391de4e0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x556d391de5b0 <line:310:3, line:312:37>
|   | |-TextComment 0x556d391de530 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x556d391de550 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391de570 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391de600 <line:314:3>
|   | `-TextComment 0x556d391de5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391de620 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391de680 <col:11, col:35>
|       `-TextComment 0x556d391de650 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f8c68 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390f8be0 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390f8eb8 <line:331:1, line:334:1>
| `-FullComment 0x556d391de9b0 <line:322:4, line:328:35>
|   |-ParagraphComment 0x556d391de770 <line:322:4>
|   | `-TextComment 0x556d391de740 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391de790 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391de7f0 <col:11, col:40>
|   |   `-TextComment 0x556d391de7c0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x556d391de890 <line:324:3, line:326:45>
|   | |-TextComment 0x556d391de810 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x556d391de830 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391de850 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391de8e0 <line:328:3>
|   | `-TextComment 0x556d391de8b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391de900 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391de960 <col:11, col:35>
|       `-TextComment 0x556d391de930 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f8f60 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390f8ed8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390f91a8 <line:345:1, line:348:1>
| `-FullComment 0x556d391dec90 <line:336:4, line:342:35>
|   |-ParagraphComment 0x556d391dea50 <line:336:4>
|   | `-TextComment 0x556d391dea20 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391dea70 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391dead0 <col:11, col:40>
|   |   `-TextComment 0x556d391deaa0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x556d391deb70 <line:338:3, line:340:45>
|   | |-TextComment 0x556d391deaf0 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x556d391deb10 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391deb30 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391debc0 <line:342:3>
|   | `-TextComment 0x556d391deb90 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391debe0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391dec40 <col:11, col:35>
|       `-TextComment 0x556d391dec10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f9250 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390f91c8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390f9628 <line:359:1, line:362:1>
| | `-ReturnStmt 0x556d390f95e0 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x556d390f95c8 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390f94a8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390f9490 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390f92f8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390f9520 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390f9508 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390f9320 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f91c8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390f9538 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390f9348 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x556d390f9550 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390f93a8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390f9390 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390f9368 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390f9568 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390f9410 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390f93f0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390f93d0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390f9580 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f9430 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390f9598 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f9450 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390f95b0 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390f9470 <col:16> 'int' 0
| `-FullComment 0x556d391def70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x556d391ded30 <line:350:4>
|   | `-TextComment 0x556d391ded00 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391ded50 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391dedb0 <col:11, col:50>
|   |   `-TextComment 0x556d391ded80 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x556d391dee50 <line:352:3, line:354:44>
|   | |-TextComment 0x556d391dedd0 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x556d391dedf0 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391dee10 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391deea0 <line:356:3>
|   | `-TextComment 0x556d391dee70 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391deec0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391def20 <col:11, col:35>
|       `-TextComment 0x556d391deef0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f96d8 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390f9650 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390f9a78 <line:373:1, line:376:1>
| | `-ReturnStmt 0x556d390f9a38 <line:375:2, col:66>
| |   `-CallExpr 0x556d390f9930 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390f9918 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390f9780 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390f9990 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390f97a8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f9650 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390f99a8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390f97d0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x556d390f99c0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390f9830 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390f9818 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390f97f0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390f99d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390f9898 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390f9878 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390f9858 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390f99f0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390f98b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390f9a08 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390f98d8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390f9a20 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390f98f8 <col:16> 'int' 0
| `-FullComment 0x556d391df250 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x556d391df010 <line:364:4>
|   | `-TextComment 0x556d391defe0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391df030 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391df090 <col:11, col:50>
|   |   `-TextComment 0x556d391df060 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x556d391df130 <line:366:3, line:368:44>
|   | |-TextComment 0x556d391df0b0 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x556d391df0d0 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391df0f0 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391df180 <line:370:3>
|   | `-TextComment 0x556d391df150 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391df1a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391df200 <col:11, col:35>
|       `-TextComment 0x556d391df1d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f9b28 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390f9aa0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390f9f18 <line:387:1, line:390:1>
| | `-ReturnStmt 0x556d390f9ed8 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x556d390f9ec0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390f9da0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390f9d88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390f9bf0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390f9e18 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390f9e00 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390f9c18 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390f9aa0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390f9e30 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390f9c40 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x556d390f9e48 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390f9ca0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390f9c88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390f9c60 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390f9e60 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390f9d08 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390f9ce8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390f9cc8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390f9e78 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f9d28 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390f9e90 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390f9d48 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390f9ea8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390f9d68 <col:16> 'int' 1
| `-FullComment 0x556d391df530 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x556d391df2f0 <line:378:4>
|   | `-TextComment 0x556d391df2c0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391df310 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391df370 <col:11, col:50>
|   |   `-TextComment 0x556d391df340 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x556d391df410 <line:380:3, line:382:37>
|   | |-TextComment 0x556d391df390 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x556d391df3b0 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391df3d0 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391df460 <line:384:3>
|   | `-TextComment 0x556d391df430 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391df480 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391df4e0 <col:11, col:35>
|       `-TextComment 0x556d391df4b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390f9fc8 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390f9f40 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390fa368 <line:401:1, line:404:1>
| | `-ReturnStmt 0x556d390fa328 <line:403:2, col:65>
| |   `-CallExpr 0x556d390fa220 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390fa208 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390fa070 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390fa280 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390fa098 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390f9f40 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390fa298 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390fa0c0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x556d390fa2b0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390fa120 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390fa108 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390fa0e0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390fa2c8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390fa188 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390fa168 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390fa148 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fa2e0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390fa1a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fa2f8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390fa1c8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390fa310 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390fa1e8 <col:16> 'int' 1
| `-FullComment 0x556d391df830 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x556d391df5d0 <line:392:4>
|   | `-TextComment 0x556d391df5a0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391df5f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391df650 <col:11, col:50>
|   |   `-TextComment 0x556d391df620 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x556d391df710 <line:394:3, line:396:37>
|   | |-TextComment 0x556d391df670 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x556d391df6b0 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391df6d0 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391df760 <line:398:3>
|   | `-TextComment 0x556d391df730 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391df780 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391df7e0 <col:11, col:35>
|       `-TextComment 0x556d391df7b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fa418 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390fa390 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390fa7e8 <line:415:1, line:418:1>
| | `-ReturnStmt 0x556d390fa7a8 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x556d390fa790 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390fa670 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390fa658 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390fa4c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390fa6e8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390fa6d0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390fa4e8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390fa390 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390fa700 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390fa510 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x556d390fa718 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390fa570 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390fa558 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390fa530 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390fa730 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390fa5d8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390fa5b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390fa598 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390fa748 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390fa5f8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390fa760 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390fa618 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x556d390fa778 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390fa638 <col:16> 'int' 0
| `-FullComment 0x556d391dfb10 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x556d391df8d0 <line:406:4>
|   | `-TextComment 0x556d391df8a0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391df8f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391df950 <col:11, col:50>
|   |   `-TextComment 0x556d391df920 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x556d391df9f0 <line:408:3, line:410:45>
|   | |-TextComment 0x556d391df970 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x556d391df990 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391df9b0 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391dfa40 <line:412:3>
|   | `-TextComment 0x556d391dfa10 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dfa60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391dfac0 <col:11, col:35>
|       `-TextComment 0x556d391dfa90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fa898 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390fa810 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390fac58 <line:429:1, line:432:1>
| | `-ReturnStmt 0x556d390fac18 <line:431:2, col:65>
| |   `-CallExpr 0x556d390faaf0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390faad8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390fa940 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390fab50 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390fa968 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390fa810 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390fab68 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390fa990 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x556d390fab80 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390fa9f0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390fa9d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390fa9b0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390fab98 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390faa58 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390faa38 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390faa18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fabb0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390faa78 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fabc8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390faa98 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x556d390fac00 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390faab8 <col:16> 'int' 0
| `-FullComment 0x556d391dfdf0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x556d391dfbb0 <line:420:4>
|   | `-TextComment 0x556d391dfb80 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391dfbd0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391dfc30 <col:11, col:50>
|   |   `-TextComment 0x556d391dfc00 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x556d391dfcd0 <line:422:3, line:424:45>
|   | |-TextComment 0x556d391dfc50 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x556d391dfc70 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391dfc90 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391dfd20 <line:426:3>
|   | `-TextComment 0x556d391dfcf0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391dfd40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391dfda0 <col:11, col:35>
|       `-TextComment 0x556d391dfd70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fad08 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390fac80 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390faf58 <line:443:1, line:446:1>
| `-FullComment 0x556d391e00d0 <line:434:4, line:440:35>
|   |-ParagraphComment 0x556d391dfe90 <line:434:4>
|   | `-TextComment 0x556d391dfe60 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391dfeb0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391dff10 <col:11, col:40>
|   |   `-TextComment 0x556d391dfee0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x556d391dffb0 <line:436:3, line:438:44>
|   | |-TextComment 0x556d391dff30 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x556d391dff50 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391dff70 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e0000 <line:440:3>
|   | `-TextComment 0x556d391dffd0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e0020 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e0080 <col:11, col:35>
|       `-TextComment 0x556d391e0050 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fb000 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390faf78 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390fb248 <line:457:1, line:460:1>
| `-FullComment 0x556d391e03b0 <line:448:4, line:454:35>
|   |-ParagraphComment 0x556d391e0170 <line:448:4>
|   | `-TextComment 0x556d391e0140 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e0190 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e01f0 <col:11, col:40>
|   |   `-TextComment 0x556d391e01c0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x556d391e0290 <line:450:3, line:452:44>
|   | |-TextComment 0x556d391e0210 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x556d391e0230 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e0250 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e02e0 <line:454:3>
|   | `-TextComment 0x556d391e02b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e0300 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e0360 <col:11, col:35>
|       `-TextComment 0x556d391e0330 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fb2f0 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390fb268 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390fb538 <line:471:1, line:474:1>
| `-FullComment 0x556d391e0690 <line:462:4, line:468:35>
|   |-ParagraphComment 0x556d391e0450 <line:462:4>
|   | `-TextComment 0x556d391e0420 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e0470 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e04d0 <col:11, col:40>
|   |   `-TextComment 0x556d391e04a0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x556d391e0570 <line:464:3, line:466:37>
|   | |-TextComment 0x556d391e04f0 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x556d391e0510 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e0530 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e05c0 <line:468:3>
|   | `-TextComment 0x556d391e0590 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e05e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e0640 <col:11, col:35>
|       `-TextComment 0x556d391e0610 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fb5e0 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390fb558 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390fb828 <line:485:1, line:488:1>
| `-FullComment 0x556d391e0970 <line:476:4, line:482:35>
|   |-ParagraphComment 0x556d391e0730 <line:476:4>
|   | `-TextComment 0x556d391e0700 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e0750 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e07b0 <col:11, col:40>
|   |   `-TextComment 0x556d391e0780 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x556d391e0850 <line:478:3, line:480:37>
|   | |-TextComment 0x556d391e07d0 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x556d391e07f0 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e0810 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e08a0 <line:482:3>
|   | `-TextComment 0x556d391e0870 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e08c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e0920 <col:11, col:35>
|       `-TextComment 0x556d391e08f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fb8d0 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390fb848 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390fbb18 <line:499:1, line:502:1>
| `-FullComment 0x556d391e0c50 <line:490:4, line:496:35>
|   |-ParagraphComment 0x556d391e0a10 <line:490:4>
|   | `-TextComment 0x556d391e09e0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e0a30 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e0a90 <col:11, col:40>
|   |   `-TextComment 0x556d391e0a60 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x556d391e0b30 <line:492:3, line:494:45>
|   | |-TextComment 0x556d391e0ab0 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x556d391e0ad0 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e0af0 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e0b80 <line:496:3>
|   | `-TextComment 0x556d391e0b50 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e0ba0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e0c00 <col:11, col:35>
|       `-TextComment 0x556d391e0bd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fcc20 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390fbb38 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390fce68 <line:513:1, line:516:1>
| `-FullComment 0x556d391e0f30 <line:504:4, line:510:35>
|   |-ParagraphComment 0x556d391e0cf0 <line:504:4>
|   | `-TextComment 0x556d391e0cc0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e0d10 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e0d70 <col:11, col:40>
|   |   `-TextComment 0x556d391e0d40 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x556d391e0e10 <line:506:3, line:508:45>
|   | |-TextComment 0x556d391e0d90 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x556d391e0db0 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e0dd0 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e0e60 <line:510:3>
|   | `-TextComment 0x556d391e0e30 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e0e80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e0ee0 <col:11, col:35>
|       `-TextComment 0x556d391e0eb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fcf10 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390fce88 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390fd2e8 <line:527:1, line:530:1>
| | `-ReturnStmt 0x556d390fd2a0 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x556d390fd288 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390fd168 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390fd150 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390fcfb8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390fd1e0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390fd1c8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390fcfe0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390fce88 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390fd1f8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390fd008 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x556d390fd210 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390fd068 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390fd050 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390fd028 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390fd228 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390fd0d0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390fd0b0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390fd090 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390fd240 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390fd0f0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390fd258 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390fd110 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390fd270 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390fd130 <col:16> 'int' 0
| `-FullComment 0x556d391e1210 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x556d391e0fd0 <line:518:4>
|   | `-TextComment 0x556d391e0fa0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e0ff0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e1050 <col:11, col:49>
|   |   `-TextComment 0x556d391e1020 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x556d391e10f0 <line:520:3, line:522:44>
|   | |-TextComment 0x556d391e1070 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x556d391e1090 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e10b0 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e1140 <line:524:3>
|   | `-TextComment 0x556d391e1110 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e1160 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e11c0 <col:11, col:35>
|       `-TextComment 0x556d391e1190 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fd398 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390fd310 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390fd738 <line:541:1, line:544:1>
| | `-ReturnStmt 0x556d390fd6f8 <line:543:2, col:66>
| |   `-CallExpr 0x556d390fd5f0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390fd5d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390fd440 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390fd650 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390fd468 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390fd310 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390fd668 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390fd490 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x556d390fd680 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390fd4f0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390fd4d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390fd4b0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390fd698 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390fd558 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390fd538 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390fd518 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fd6b0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390fd578 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fd6c8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390fd598 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390fd6e0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390fd5b8 <col:16> 'int' 0
| `-FullComment 0x556d391e14f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x556d391e12b0 <line:532:4>
|   | `-TextComment 0x556d391e1280 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e12d0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e1330 <col:11, col:49>
|   |   `-TextComment 0x556d391e1300 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x556d391e13d0 <line:534:3, line:536:44>
|   | |-TextComment 0x556d391e1350 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x556d391e1370 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e1390 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e1420 <line:538:3>
|   | `-TextComment 0x556d391e13f0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e1440 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e14a0 <col:11, col:35>
|       `-TextComment 0x556d391e1470 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fd7e8 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390fd760 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390fdbb8 <line:555:1, line:558:1>
| | `-ReturnStmt 0x556d390fdb78 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x556d390fdb60 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390fda40 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390fda28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390fd890 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390fdab8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390fdaa0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390fd8b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390fd760 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390fdad0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390fd8e0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x556d390fdae8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390fd940 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390fd928 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390fd900 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390fdb00 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390fd9a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390fd988 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390fd968 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390fdb18 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390fd9c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390fdb30 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390fd9e8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390fdb48 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390fda08 <col:16> 'int' 1
| `-FullComment 0x556d391e17e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x556d391e1590 <line:546:4>
|   | `-TextComment 0x556d391e1560 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e15b0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e1610 <col:11, col:49>
|   |   `-TextComment 0x556d391e15e0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x556d391e16c0 <line:548:3, line:550:37>
|   | |-TextComment 0x556d391e1630 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x556d391e1650 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e1670 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e1710 <line:552:3>
|   | `-TextComment 0x556d391e16e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e1730 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e1790 <col:11, col:35>
|       `-TextComment 0x556d391e1760 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fdcb8 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390fdc30 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390fe058 <line:569:1, line:572:1>
| | `-ReturnStmt 0x556d390fe018 <line:571:2, col:65>
| |   `-CallExpr 0x556d390fdf10 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390fdef8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390fdd60 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390fdf70 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390fdd88 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390fdc30 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390fdf88 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390fddb0 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x556d390fdfa0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390fde10 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390fddf8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390fddd0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390fdfb8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390fde78 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390fde58 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390fde38 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fdfd0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390fde98 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fdfe8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390fdeb8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390fe000 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390fded8 <col:16> 'int' 1
| `-FullComment 0x556d391e1ac0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x556d391e1880 <line:560:4>
|   | `-TextComment 0x556d391e1850 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e18a0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e1900 <col:11, col:49>
|   |   `-TextComment 0x556d391e18d0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x556d391e19a0 <line:562:3, line:564:37>
|   | |-TextComment 0x556d391e1920 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x556d391e1940 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e1960 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e19f0 <line:566:3>
|   | `-TextComment 0x556d391e19c0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e1a10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e1a70 <col:11, col:35>
|       `-TextComment 0x556d391e1a40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fe108 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390fe080 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390fe4d8 <line:583:1, line:586:1>
| | `-ReturnStmt 0x556d390fe498 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x556d390fe480 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390fe360 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390fe348 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390fe1b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390fe3d8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390fe3c0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390fe1d8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390fe080 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390fe3f0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390fe200 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x556d390fe408 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390fe260 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390fe248 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390fe220 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390fe420 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390fe2c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390fe2a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390fe288 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390fe438 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390fe2e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390fe450 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390fe308 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x556d390fe468 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390fe328 <col:16> 'int' 0
| `-FullComment 0x556d391e1da0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x556d391e1b60 <line:574:4>
|   | `-TextComment 0x556d391e1b30 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e1b80 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e1be0 <col:11, col:49>
|   |   `-TextComment 0x556d391e1bb0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x556d391e1c80 <line:576:3, line:578:45>
|   | |-TextComment 0x556d391e1c00 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x556d391e1c20 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e1c40 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e1cd0 <line:580:3>
|   | `-TextComment 0x556d391e1ca0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e1cf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e1d50 <col:11, col:35>
|       `-TextComment 0x556d391e1d20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fe588 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390fe500 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390fe928 <line:597:1, line:600:1>
| | `-ReturnStmt 0x556d390fe8e8 <line:599:2, col:65>
| |   `-CallExpr 0x556d390fe7e0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390fe7c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390fe630 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390fe840 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390fe658 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390fe500 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390fe858 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390fe680 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x556d390fe870 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390fe6e0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390fe6c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390fe6a0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390fe888 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390fe748 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390fe728 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390fe708 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fe8a0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390fe768 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390fe8b8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390fe788 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x556d390fe8d0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390fe7a8 <col:16> 'int' 0
| `-FullComment 0x556d391e2080 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x556d391e1e40 <line:588:4>
|   | `-TextComment 0x556d391e1e10 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e1e60 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e1ec0 <col:11, col:49>
|   |   `-TextComment 0x556d391e1e90 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x556d391e1f60 <line:590:3, line:592:45>
|   | |-TextComment 0x556d391e1ee0 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x556d391e1f00 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e1f20 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e1fb0 <line:594:3>
|   | `-TextComment 0x556d391e1f80 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e1fd0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e2030 <col:11, col:35>
|       `-TextComment 0x556d391e2000 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390fe9d8 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390fe950 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b2510 <line:611:1, line:614:1>
| `-FullComment 0x556d391e2360 <line:602:4, line:608:35>
|   |-ParagraphComment 0x556d391e2120 <line:602:4>
|   | `-TextComment 0x556d391e20f0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e2140 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391e21a0 <col:11, col:39>
|   |   `-TextComment 0x556d391e2170 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x556d391e2240 <line:604:3, line:606:44>
|   | |-TextComment 0x556d391e21c0 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x556d391e21e0 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e2200 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e2290 <line:608:3>
|   | `-TextComment 0x556d391e2260 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e22b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e2310 <col:11, col:35>
|       `-TextComment 0x556d391e22e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b25b8 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b2530 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b2808 <line:625:1, line:628:1>
| `-FullComment 0x556d391e2640 <line:616:4, line:622:35>
|   |-ParagraphComment 0x556d391e2400 <line:616:4>
|   | `-TextComment 0x556d391e23d0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e2420 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391e2480 <col:11, col:39>
|   |   `-TextComment 0x556d391e2450 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x556d391e2520 <line:618:3, line:620:44>
|   | |-TextComment 0x556d391e24a0 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x556d391e24c0 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e24e0 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e2570 <line:622:3>
|   | `-TextComment 0x556d391e2540 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e2590 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e25f0 <col:11, col:35>
|       `-TextComment 0x556d391e25c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b28b0 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b2828 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b2af8 <line:639:1, line:642:1>
| `-FullComment 0x556d391e2920 <line:630:4, line:636:35>
|   |-ParagraphComment 0x556d391e26e0 <line:630:4>
|   | `-TextComment 0x556d391e26b0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e2700 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391e2760 <col:11, col:39>
|   |   `-TextComment 0x556d391e2730 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x556d391e2800 <line:632:3, line:634:37>
|   | |-TextComment 0x556d391e2780 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x556d391e27a0 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e27c0 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e2850 <line:636:3>
|   | `-TextComment 0x556d391e2820 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e2870 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e28d0 <col:11, col:35>
|       `-TextComment 0x556d391e28a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b2ba0 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b2b18 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b2de8 <line:653:1, line:656:1>
| `-FullComment 0x556d391e2c00 <line:644:4, line:650:35>
|   |-ParagraphComment 0x556d391e29c0 <line:644:4>
|   | `-TextComment 0x556d391e2990 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e29e0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391e2a40 <col:11, col:39>
|   |   `-TextComment 0x556d391e2a10 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x556d391e2ae0 <line:646:3, line:648:37>
|   | |-TextComment 0x556d391e2a60 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x556d391e2a80 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e2aa0 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e2b30 <line:650:3>
|   | `-TextComment 0x556d391e2b00 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e2b50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e2bb0 <col:11, col:35>
|       `-TextComment 0x556d391e2b80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b2e90 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b2e08 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b3058 <line:667:1, line:670:1>
| `-FullComment 0x556d391e2ee0 <line:658:4, line:664:35>
|   |-ParagraphComment 0x556d391e2ca0 <line:658:4>
|   | `-TextComment 0x556d391e2c70 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e2cc0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391e2d20 <col:11, col:39>
|   |   `-TextComment 0x556d391e2cf0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x556d391e2dc0 <line:660:3, line:662:45>
|   | |-TextComment 0x556d391e2d40 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x556d391e2d60 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e2d80 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e2e10 <line:664:3>
|   | `-TextComment 0x556d391e2de0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e2e30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e2e90 <col:11, col:35>
|       `-TextComment 0x556d391e2e60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b3100 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b3078 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b32c8 <line:681:1, line:684:1>
| `-FullComment 0x556d391e31c0 <line:672:4, line:678:35>
|   |-ParagraphComment 0x556d391e2f80 <line:672:4>
|   | `-TextComment 0x556d391e2f50 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e2fa0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391e3000 <col:11, col:39>
|   |   `-TextComment 0x556d391e2fd0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x556d391e30a0 <line:674:3, line:676:45>
|   | |-TextComment 0x556d391e3020 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x556d391e3040 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e3060 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e30f0 <line:678:3>
|   | `-TextComment 0x556d391e30c0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e3110 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e3170 <col:11, col:35>
|       `-TextComment 0x556d391e3140 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b3370 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b32e8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b3758 <line:695:1, line:698:1>
| | `-ReturnStmt 0x556d390b3710 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x556d390b36f8 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390b35d8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390b35c0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390b3418 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390b3650 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390b3638 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390b3440 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390b32e8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390b3668 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390b34a8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390b3490 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390b3468 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390b3680 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390b34d0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x556d390b3698 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390b3540 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390b3520 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390b34f0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390b36b0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b3560 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390b36c8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b3580 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390b36e0 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390b35a0 <col:16> 'int' 0
| `-FullComment 0x556d391e34a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x556d391e3260 <line:686:4>
|   | `-TextComment 0x556d391e3230 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e3280 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e32e0 <col:11, col:50>
|   |   `-TextComment 0x556d391e32b0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x556d391e3380 <line:688:3, line:690:44>
|   | |-TextComment 0x556d391e3300 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x556d391e3320 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e3340 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e33d0 <line:692:3>
|   | `-TextComment 0x556d391e33a0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e33f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e3450 <col:11, col:35>
|       `-TextComment 0x556d391e3420 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b3808 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b3780 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b3ba8 <line:709:1, line:712:1>
| | `-ReturnStmt 0x556d390b3b68 <line:711:2, col:66>
| |   `-CallExpr 0x556d390b3a60 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b3a48 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390b38b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390b3ac0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390b38d8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390b3780 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b3ad8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390b3940 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390b3928 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390b3900 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390b3af0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390b3968 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x556d390b3b08 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390b39c8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390b39a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390b3988 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b3b20 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b39e8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b3b38 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b3a08 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390b3b50 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390b3a28 <col:16> 'int' 0
| `-FullComment 0x556d391e37a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x556d391e3540 <line:700:4>
|   | `-TextComment 0x556d391e3510 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e3560 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e35c0 <col:11, col:50>
|   |   `-TextComment 0x556d391e3590 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x556d391e3660 <line:702:3, line:704:44>
|   | |-TextComment 0x556d391e35e0 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x556d391e3600 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e3620 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e36d0 <line:706:3>
|   | `-TextComment 0x556d391e3680 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e36f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e3750 <col:11, col:35>
|       `-TextComment 0x556d391e3720 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b3c58 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b3bd0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b4028 <line:723:1, line:726:1>
| | `-ReturnStmt 0x556d390b3fe8 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x556d390b3fd0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390b3eb0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390b3e98 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390b3d00 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390b3f28 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390b3f10 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390b3d28 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390b3bd0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390b3f40 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390b3d90 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390b3d78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390b3d50 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390b3f58 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390b3db8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x556d390b3f70 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390b3e18 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390b3df8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390b3dd8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390b3f88 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b3e38 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390b3fa0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b3e58 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390b3fb8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390b3e78 <col:16> 'int' 1
| `-FullComment 0x556d391e3a80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x556d391e3840 <line:714:4>
|   | `-TextComment 0x556d391e3810 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e3860 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e38c0 <col:11, col:50>
|   |   `-TextComment 0x556d391e3890 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x556d391e3960 <line:716:3, line:718:37>
|   | |-TextComment 0x556d391e38e0 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x556d391e3900 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e3920 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e39b0 <line:720:3>
|   | `-TextComment 0x556d391e3980 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e39d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e3a30 <col:11, col:35>
|       `-TextComment 0x556d391e3a00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b40d8 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b4050 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b4478 <line:737:1, line:740:1>
| | `-ReturnStmt 0x556d390b4438 <line:739:2, col:65>
| |   `-CallExpr 0x556d390b4330 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b4318 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390b4180 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390b4390 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390b41a8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390b4050 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b43a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390b4210 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390b41f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390b41d0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390b43c0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390b4238 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x556d390b43d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390b4298 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390b4278 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390b4258 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b43f0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b42b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b4408 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b42d8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390b4420 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390b42f8 <col:16> 'int' 1
| `-FullComment 0x556d391e3d60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x556d391e3b20 <line:728:4>
|   | `-TextComment 0x556d391e3af0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e3b40 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e3ba0 <col:11, col:50>
|   |   `-TextComment 0x556d391e3b70 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x556d391e3c40 <line:730:3, line:732:37>
|   | |-TextComment 0x556d391e3bc0 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x556d391e3be0 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e3c00 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e3c90 <line:734:3>
|   | `-TextComment 0x556d391e3c60 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e3cb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e3d10 <col:11, col:35>
|       `-TextComment 0x556d391e3ce0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b4558 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b44a0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b4928 <line:751:1, line:754:1>
| | `-ReturnStmt 0x556d390b48e8 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x556d390b48d0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390b47b0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390b4798 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390b4600 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390b4828 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390b4810 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390b4628 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390b44a0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390b4840 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390b4690 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390b4678 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390b4650 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390b4858 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390b46b8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x556d390b4870 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390b4718 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390b46f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390b46d8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390b4888 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b4738 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390b48a0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b4758 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x556d390b48b8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390b4778 <col:16> 'int' 0
| `-FullComment 0x556d391e4040 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x556d391e3e00 <line:742:4>
|   | `-TextComment 0x556d391e3dd0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e3e20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e3e80 <col:11, col:50>
|   |   `-TextComment 0x556d391e3e50 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x556d391e3f20 <line:744:3, line:746:45>
|   | |-TextComment 0x556d391e3ea0 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x556d391e3ec0 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e3ee0 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e3f70 <line:748:3>
|   | `-TextComment 0x556d391e3f40 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e3f90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e3ff0 <col:11, col:35>
|       `-TextComment 0x556d391e3fc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b49d8 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b4950 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b4d78 <line:765:1, line:768:1>
| | `-ReturnStmt 0x556d390b4d38 <line:767:2, col:65>
| |   `-CallExpr 0x556d390b4c30 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b4c18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390b4a80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390b4c90 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390b4aa8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390b4950 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b4ca8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390b4b10 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390b4af8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390b4ad0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390b4cc0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390b4b38 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x556d390b4cd8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390b4b98 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390b4b78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390b4b58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b4cf0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b4bb8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b4d08 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b4bd8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x556d390b4d20 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390b4bf8 <col:16> 'int' 0
| `-FullComment 0x556d391e4320 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x556d391e40e0 <line:756:4>
|   | `-TextComment 0x556d391e40b0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e4100 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e4160 <col:11, col:50>
|   |   `-TextComment 0x556d391e4130 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x556d391e4200 <line:758:3, line:760:45>
|   | |-TextComment 0x556d391e4180 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x556d391e41a0 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e41c0 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e4250 <line:762:3>
|   | `-TextComment 0x556d391e4220 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e4270 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e42d0 <col:11, col:35>
|       `-TextComment 0x556d391e42a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b4e28 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b4da0 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b51f8 <line:779:1, line:782:1>
| | `-ReturnStmt 0x556d390b51b8 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x556d390b51a0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390b5080 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390b5068 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390b4ed0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390b50f8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390b50e0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390b4ef8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390b4da0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390b5110 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390b4f60 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390b4f48 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390b4f20 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390b5128 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390b4f88 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x556d390b5140 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390b4fe8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390b4fc8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390b4fa8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390b5158 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b5008 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390b5170 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b5028 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390b5188 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390b5048 <col:16> 'int' 0
| `-FullComment 0x556d391e4600 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x556d391e43c0 <line:770:4>
|   | `-TextComment 0x556d391e4390 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e43e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e4440 <col:11, col:50>
|   |   `-TextComment 0x556d391e4410 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x556d391e44e0 <line:772:3, line:774:44>
|   | |-TextComment 0x556d391e4460 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x556d391e4480 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e44a0 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e4530 <line:776:3>
|   | `-TextComment 0x556d391e4500 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e4550 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e45b0 <col:11, col:35>
|       `-TextComment 0x556d391e4580 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b52a8 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b5220 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b5668 <line:793:1, line:796:1>
| | `-ReturnStmt 0x556d390b5628 <line:795:2, col:66>
| |   `-CallExpr 0x556d390b5500 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b54e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390b5350 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390b5580 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390b5378 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390b5220 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b5598 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390b53e0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390b53c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390b53a0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390b55b0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390b5408 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x556d390b55c8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390b5468 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390b5448 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390b5428 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b55e0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b5488 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b55f8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b54a8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390b5610 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390b54c8 <col:16> 'int' 0
| `-FullComment 0x556d391e48e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x556d391e46a0 <line:784:4>
|   | `-TextComment 0x556d391e4670 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e46c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e4720 <col:11, col:50>
|   |   `-TextComment 0x556d391e46f0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x556d391e47c0 <line:786:3, line:788:44>
|   | |-TextComment 0x556d391e4740 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x556d391e4760 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e4780 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e4810 <line:790:3>
|   | `-TextComment 0x556d391e47e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e4830 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e4890 <col:11, col:35>
|       `-TextComment 0x556d391e4860 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b5718 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b5690 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b5ae8 <line:807:1, line:810:1>
| | `-ReturnStmt 0x556d390b5aa8 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x556d390b5a90 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390b5970 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390b5958 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390b57c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390b59e8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390b59d0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390b57e8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390b5690 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390b5a00 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390b5850 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390b5838 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390b5810 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390b5a18 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390b5878 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x556d390b5a30 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390b58d8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390b58b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390b5898 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390b5a48 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b58f8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390b5a60 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b5918 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390b5a78 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390b5938 <col:16> 'int' 1
| `-FullComment 0x556d391e4bc0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x556d391e4980 <line:798:4>
|   | `-TextComment 0x556d391e4950 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e49a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e4a00 <col:11, col:50>
|   |   `-TextComment 0x556d391e49d0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x556d391e4aa0 <line:800:3, line:802:37>
|   | |-TextComment 0x556d391e4a20 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x556d391e4a40 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e4a60 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e4af0 <line:804:3>
|   | `-TextComment 0x556d391e4ac0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e4b10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e4b70 <col:11, col:35>
|       `-TextComment 0x556d391e4b40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b5b98 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b5b10 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b5f38 <line:821:1, line:824:1>
| | `-ReturnStmt 0x556d390b5ef8 <line:823:2, col:65>
| |   `-CallExpr 0x556d390b5df0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b5dd8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390b5c40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390b5e50 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390b5c68 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390b5b10 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b5e68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390b5cd0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390b5cb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390b5c90 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390b5e80 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390b5cf8 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x556d390b5e98 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390b5d58 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390b5d38 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390b5d18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b5eb0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b5d78 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b5ec8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b5d98 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390b5ee0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390b5db8 <col:16> 'int' 1
| `-FullComment 0x556d391e4ea0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x556d391e4c60 <line:812:4>
|   | `-TextComment 0x556d391e4c30 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e4c80 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e4ce0 <col:11, col:50>
|   |   `-TextComment 0x556d391e4cb0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x556d391e4d80 <line:814:3, line:816:37>
|   | |-TextComment 0x556d391e4d00 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x556d391e4d20 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e4d40 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e4dd0 <line:818:3>
|   | `-TextComment 0x556d391e4da0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e4df0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e4e50 <col:11, col:35>
|       `-TextComment 0x556d391e4e20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b5fe8 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b5f60 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b63b8 <line:835:1, line:838:1>
| | `-ReturnStmt 0x556d390b6378 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x556d390b6360 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390b6240 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390b6228 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390b6090 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390b62b8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390b62a0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390b60b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390b5f60 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390b62d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390b6120 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390b6108 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390b60e0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390b62e8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390b6148 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x556d390b6300 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390b61a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390b6188 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390b6168 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390b6318 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b61c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390b6330 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b61e8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x556d390b6348 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390b6208 <col:16> 'int' 0
| `-FullComment 0x556d391e5180 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x556d391e4f40 <line:826:4>
|   | `-TextComment 0x556d391e4f10 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e4f60 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e4fc0 <col:11, col:50>
|   |   `-TextComment 0x556d391e4f90 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x556d391e5060 <line:828:3, line:830:45>
|   | |-TextComment 0x556d391e4fe0 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x556d391e5000 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e5020 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e50b0 <line:832:3>
|   | `-TextComment 0x556d391e5080 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e50d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e5130 <col:11, col:35>
|       `-TextComment 0x556d391e5100 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b6468 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b63e0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b6828 <line:849:1, line:852:1>
| | `-ReturnStmt 0x556d390b67e0 <line:851:2, col:65>
| |   `-CallExpr 0x556d390b66d8 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b66c0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390b6510 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390b6738 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390b6550 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390b63e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b6750 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390b65b8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390b65a0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390b6578 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390b6768 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390b65e0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x556d390b6780 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390b6640 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390b6620 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390b6600 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b6798 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b6660 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b67b0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b6680 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x556d390b67c8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390b66a0 <col:16> 'int' 0
| `-FullComment 0x556d391e5460 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x556d391e5220 <line:840:4>
|   | `-TextComment 0x556d391e51f0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e5240 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x556d391e52a0 <col:11, col:50>
|   |   `-TextComment 0x556d391e5270 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x556d391e5340 <line:842:3, line:844:45>
|   | |-TextComment 0x556d391e52c0 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x556d391e52e0 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e5300 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e5390 <line:846:3>
|   | `-TextComment 0x556d391e5360 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e53b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e5410 <col:11, col:35>
|       `-TextComment 0x556d391e53e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b68d8 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b6850 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d390b6ca8 <line:863:1, line:866:1>
| | `-ReturnStmt 0x556d390b6c68 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x556d390b6c50 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390b6b30 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390b6b18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390b6980 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390b6ba8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390b6b90 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390b69a8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390b6850 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390b6bc0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390b6a10 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390b69f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390b69d0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390b6bd8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390b6a38 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x556d390b6bf0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390b6a98 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390b6a78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390b6a58 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390b6c08 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b6ab8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390b6c20 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b6ad8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390b6c38 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390b6af8 <col:16> 'int' 0
| `-FullComment 0x556d391e5760 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x556d391e5500 <line:854:4>
|   | `-TextComment 0x556d391e54d0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e5520 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e5580 <col:11, col:49>
|   |   `-TextComment 0x556d391e5550 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x556d391e5620 <line:856:3, line:858:44>
|   | |-TextComment 0x556d391e55a0 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x556d391e55c0 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e55e0 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e5670 <line:860:3>
|   | `-TextComment 0x556d391e5640 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e5690 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e5710 <col:11, col:35>
|       `-TextComment 0x556d391e56e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b6d58 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d390b6cd0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d390b70f8 <line:877:1, line:880:1>
| | `-ReturnStmt 0x556d390b70b8 <line:879:2, col:66>
| |   `-CallExpr 0x556d390b6fb0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b6f98 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d390b6e00 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d390b7010 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d390b6e28 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d390b6cd0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d390b7028 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d390b6e90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d390b6e78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d390b6e50 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d390b7040 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d390b6eb8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x556d390b7058 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d390b6f18 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d390b6ef8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d390b6ed8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b7070 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b6f38 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d390b7088 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d390b6f58 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d390b70a0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d390b6f78 <col:16> 'int' 0
| `-FullComment 0x556d391e5a40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x556d391e5800 <line:868:4>
|   | `-TextComment 0x556d391e57d0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e5820 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e5880 <col:11, col:49>
|   |   `-TextComment 0x556d391e5850 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x556d391e5920 <line:870:3, line:872:44>
|   | |-TextComment 0x556d391e58a0 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x556d391e58c0 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e58e0 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e5970 <line:874:3>
|   | `-TextComment 0x556d391e5940 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e5990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e59f0 <col:11, col:35>
|       `-TextComment 0x556d391e59c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d390b71a8 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d390b7120 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910ac58 <line:891:1, line:894:1>
| | `-ReturnStmt 0x556d390b7538 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x556d390b7520 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d390b7400 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d390b73e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d390b7250 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d390b7478 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d390b7460 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d390b7278 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d390b7120 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d390b7490 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d390b72e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d390b72c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d390b72a0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d390b74a8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d390b7308 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x556d390b74c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d390b7368 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d390b7348 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d390b7328 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d390b74d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b7388 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d390b74f0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d390b73a8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x556d390b7508 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d390b73c8 <col:16> 'int' 1
| `-FullComment 0x556d391e5d20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x556d391e5ae0 <line:882:4>
|   | `-TextComment 0x556d391e5ab0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e5b00 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e5b60 <col:11, col:49>
|   |   `-TextComment 0x556d391e5b30 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x556d391e5c00 <line:884:3, line:886:37>
|   | |-TextComment 0x556d391e5b80 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x556d391e5ba0 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e5bc0 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e5c50 <line:888:3>
|   | `-TextComment 0x556d391e5c20 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e5c70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e5cd0 <col:11, col:35>
|       `-TextComment 0x556d391e5ca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910ad08 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910ac80 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910b0a8 <line:905:1, line:908:1>
| | `-ReturnStmt 0x556d3910b068 <line:907:2, col:65>
| |   `-CallExpr 0x556d3910af60 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d3910af48 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d3910adb0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d3910afc0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3910add8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d3910ac80 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d3910afd8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d3910ae40 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d3910ae28 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d3910ae00 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d3910aff0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d3910ae68 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x556d3910b008 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d3910aec8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d3910aea8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d3910ae88 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d3910b020 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d3910aee8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d3910b038 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d3910af08 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x556d3910b050 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d3910af28 <col:16> 'int' 1
| `-FullComment 0x556d391e6000 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x556d391e5dc0 <line:896:4>
|   | `-TextComment 0x556d391e5d90 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e5de0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e5e40 <col:11, col:49>
|   |   `-TextComment 0x556d391e5e10 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x556d391e5ee0 <line:898:3, line:900:37>
|   | |-TextComment 0x556d391e5e60 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x556d391e5e80 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e5ea0 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e5f30 <line:902:3>
|   | `-TextComment 0x556d391e5f00 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e5f50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e5fb0 <col:11, col:35>
|       `-TextComment 0x556d391e5f80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910b158 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910b0d0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910b528 <line:919:1, line:922:1>
| | `-ReturnStmt 0x556d3910b4e8 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x556d3910b4d0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d3910b3b0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d3910b398 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d3910b200 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x556d3910b428 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x556d3910b410 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x556d3910b228 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x556d3910b0d0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x556d3910b440 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x556d3910b290 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x556d3910b278 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x556d3910b250 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x556d3910b458 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x556d3910b2b8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x556d3910b470 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x556d3910b318 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x556d3910b2f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x556d3910b2d8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x556d3910b488 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d3910b338 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x556d3910b4a0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x556d3910b358 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x556d3910b4b8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x556d3910b378 <col:16> 'int' 0
| `-FullComment 0x556d391e62e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x556d391e60a0 <line:910:4>
|   | `-TextComment 0x556d391e6070 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e60c0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e6120 <col:11, col:49>
|   |   `-TextComment 0x556d391e60f0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x556d391e61c0 <line:912:3, line:914:45>
|   | |-TextComment 0x556d391e6140 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x556d391e6160 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e6180 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e6210 <line:916:3>
|   | `-TextComment 0x556d391e61e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e6230 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e6290 <col:11, col:35>
|       `-TextComment 0x556d391e6260 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910b5d8 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910b550 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910b978 <line:933:1, line:936:1>
| | `-ReturnStmt 0x556d3910b938 <line:935:2, col:65>
| |   `-CallExpr 0x556d3910b830 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d3910b818 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d3910b680 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x556d390f0440 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x556d3910b890 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3910b6a8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x556d3910b550 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x556d3910b8a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x556d3910b710 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x556d3910b6f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x556d3910b6d0 <col:18> 'int (void)' Function 0x556d390eff38 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x556d3910b8c0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x556d3910b738 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x556d3910b8d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x556d3910b798 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x556d3910b778 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x556d3910b758 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d3910b8f0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d3910b7b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x556d3910b908 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x556d3910b7d8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x556d3910b920 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x556d3910b7f8 <col:16> 'int' 0
| `-FullComment 0x556d391e65c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x556d391e6380 <line:924:4>
|   | `-TextComment 0x556d391e6350 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e63a0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391e6400 <col:11, col:49>
|   |   `-TextComment 0x556d391e63d0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x556d391e64a0 <line:926:3, line:928:45>
|   | |-TextComment 0x556d391e6420 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x556d391e6440 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e6460 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e64f0 <line:930:3>
|   | `-TextComment 0x556d391e64c0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e6510 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e6570 <col:11, col:35>
|       `-TextComment 0x556d391e6540 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910ba28 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910b9a0 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910bc88 <line:947:1, line:950:1>
| `-FullComment 0x556d391e68a0 <line:938:4, line:944:35>
|   |-ParagraphComment 0x556d391e6660 <line:938:4>
|   | `-TextComment 0x556d391e6630 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e6680 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391e66e0 <col:11, col:43>
|   |   `-TextComment 0x556d391e66b0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x556d391e6780 <line:940:3, line:942:44>
|   | |-TextComment 0x556d391e6700 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x556d391e6720 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e6740 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e67d0 <line:944:3>
|   | `-TextComment 0x556d391e67a0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e67f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e6850 <col:11, col:35>
|       `-TextComment 0x556d391e6820 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910bd30 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910bca8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910bf78 <line:961:1, line:964:1>
| `-FullComment 0x556d391e6b80 <line:952:4, line:958:35>
|   |-ParagraphComment 0x556d391e6940 <line:952:4>
|   | `-TextComment 0x556d391e6910 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e6960 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391e69c0 <col:11, col:43>
|   |   `-TextComment 0x556d391e6990 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x556d391e6a60 <line:954:3, line:956:44>
|   | |-TextComment 0x556d391e69e0 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x556d391e6a00 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e6a20 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e6ab0 <line:958:3>
|   | `-TextComment 0x556d391e6a80 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e6ad0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e6b30 <col:11, col:35>
|       `-TextComment 0x556d391e6b00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910c020 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910bf98 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910c268 <line:975:1, line:978:1>
| `-FullComment 0x556d391e6e60 <line:966:4, line:972:35>
|   |-ParagraphComment 0x556d391e6c20 <line:966:4>
|   | `-TextComment 0x556d391e6bf0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e6c40 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391e6ca0 <col:11, col:43>
|   |   `-TextComment 0x556d391e6c70 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x556d391e6d40 <line:968:3, line:970:37>
|   | |-TextComment 0x556d391e6cc0 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x556d391e6ce0 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e6d00 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e6d90 <line:972:3>
|   | `-TextComment 0x556d391e6d60 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e6db0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e6e10 <col:11, col:35>
|       `-TextComment 0x556d391e6de0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910c310 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910c288 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910c558 <line:989:1, line:992:1>
| `-FullComment 0x556d391e7140 <line:980:4, line:986:35>
|   |-ParagraphComment 0x556d391e6f00 <line:980:4>
|   | `-TextComment 0x556d391e6ed0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e6f20 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391e6f80 <col:11, col:43>
|   |   `-TextComment 0x556d391e6f50 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x556d391e7020 <line:982:3, line:984:37>
|   | |-TextComment 0x556d391e6fa0 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x556d391e6fc0 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e6fe0 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e7070 <line:986:3>
|   | `-TextComment 0x556d391e7040 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e7090 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e70f0 <col:11, col:35>
|       `-TextComment 0x556d391e70c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910c600 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910c578 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910c848 <line:1003:1, line:1006:1>
| `-FullComment 0x556d391e7420 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x556d391e71e0 <line:994:4>
|   | `-TextComment 0x556d391e71b0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e7200 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391e7260 <col:11, col:43>
|   |   `-TextComment 0x556d391e7230 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x556d391e7300 <line:996:3, line:998:45>
|   | |-TextComment 0x556d391e7280 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x556d391e72a0 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e72c0 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e7350 <line:1000:3>
|   | `-TextComment 0x556d391e7320 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e7370 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e73d0 <col:11, col:35>
|       `-TextComment 0x556d391e73a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910c8f0 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910c868 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910cb38 <line:1017:1, line:1020:1>
| `-FullComment 0x556d391e7720 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x556d391e74c0 <line:1008:4>
|   | `-TextComment 0x556d391e7490 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e74e0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391e7540 <col:11, col:43>
|   |   `-TextComment 0x556d391e7510 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x556d391e75e0 <line:1010:3, line:1012:45>
|   | |-TextComment 0x556d391e7560 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x556d391e7580 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e75a0 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e7630 <line:1014:3>
|   | `-TextComment 0x556d391e7600 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e7650 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e76b0 <col:11, col:35>
|       `-TextComment 0x556d391e7680 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910cc50 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910cb58 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910ce18 <line:1031:1, line:1034:1>
| `-FullComment 0x556d391e7a00 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x556d391e77c0 <line:1022:4>
|   | `-TextComment 0x556d391e7790 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e77e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e7840 <col:11, col:40>
|   |   `-TextComment 0x556d391e7810 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x556d391e78e0 <line:1024:3, line:1026:44>
|   | |-TextComment 0x556d391e7860 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x556d391e7880 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e78a0 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e7930 <line:1028:3>
|   | `-TextComment 0x556d391e7900 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e7950 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e79b0 <col:11, col:35>
|       `-TextComment 0x556d391e7980 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910cec0 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910ce38 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910d088 <line:1045:1, line:1048:1>
| `-FullComment 0x556d391e7ce0 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x556d391e7aa0 <line:1036:4>
|   | `-TextComment 0x556d391e7a70 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e7ac0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e7b20 <col:11, col:40>
|   |   `-TextComment 0x556d391e7af0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x556d391e7bc0 <line:1038:3, line:1040:44>
|   | |-TextComment 0x556d391e7b40 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x556d391e7b60 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e7b80 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e7c10 <line:1042:3>
|   | `-TextComment 0x556d391e7be0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e7c30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e7c90 <col:11, col:35>
|       `-TextComment 0x556d391e7c60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910d130 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910d0a8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910d2f8 <line:1059:1, line:1062:1>
| `-FullComment 0x556d391e7fc0 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x556d391e7d80 <line:1050:4>
|   | `-TextComment 0x556d391e7d50 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e7da0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e7e00 <col:11, col:40>
|   |   `-TextComment 0x556d391e7dd0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x556d391e7ea0 <line:1052:3, line:1054:37>
|   | |-TextComment 0x556d391e7e20 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x556d391e7e40 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e7e60 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e7ef0 <line:1056:3>
|   | `-TextComment 0x556d391e7ec0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e7f10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e7f70 <col:11, col:35>
|       `-TextComment 0x556d391e7f40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910d3a0 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910d318 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910d568 <line:1073:1, line:1076:1>
| `-FullComment 0x556d391e82a0 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x556d391e8060 <line:1064:4>
|   | `-TextComment 0x556d391e8030 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e8080 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e80e0 <col:11, col:40>
|   |   `-TextComment 0x556d391e80b0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x556d391e8180 <line:1066:3, line:1068:37>
|   | |-TextComment 0x556d391e8100 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x556d391e8120 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e8140 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e81d0 <line:1070:3>
|   | `-TextComment 0x556d391e81a0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e81f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e8250 <col:11, col:35>
|       `-TextComment 0x556d391e8220 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910d610 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910d588 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910d7d8 <line:1087:1, line:1090:1>
| `-FullComment 0x556d391e8580 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x556d391e8340 <line:1078:4>
|   | `-TextComment 0x556d391e8310 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e8360 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e83c0 <col:11, col:40>
|   |   `-TextComment 0x556d391e8390 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x556d391e8460 <line:1080:3, line:1082:45>
|   | |-TextComment 0x556d391e83e0 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x556d391e8400 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e8420 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e84b0 <line:1084:3>
|   | `-TextComment 0x556d391e8480 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e84d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e8530 <col:11, col:35>
|       `-TextComment 0x556d391e8500 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910d880 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910d7f8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910da48 <line:1101:1, line:1104:1>
| `-FullComment 0x556d391e8860 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x556d391e8620 <line:1092:4>
|   | `-TextComment 0x556d391e85f0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e8640 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e86a0 <col:11, col:40>
|   |   `-TextComment 0x556d391e8670 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x556d391e8740 <line:1094:3, line:1096:45>
|   | |-TextComment 0x556d391e86c0 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x556d391e86e0 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e8700 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e8790 <line:1098:3>
|   | `-TextComment 0x556d391e8760 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e87b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e8810 <col:11, col:35>
|       `-TextComment 0x556d391e87e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910daf0 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910da68 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910ecd8 <line:1115:1, line:1118:1>
| `-FullComment 0x556d391e8b40 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x556d391e8900 <line:1106:4>
|   | `-TextComment 0x556d391e88d0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e8920 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e8980 <col:11, col:40>
|   |   `-TextComment 0x556d391e8950 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x556d391e8a20 <line:1108:3, line:1110:44>
|   | |-TextComment 0x556d391e89a0 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x556d391e89c0 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e89e0 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e8a70 <line:1112:3>
|   | `-TextComment 0x556d391e8a40 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e8a90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e8af0 <col:11, col:35>
|       `-TextComment 0x556d391e8ac0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910ed80 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910ecf8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910ef48 <line:1129:1, line:1132:1>
| `-FullComment 0x556d391e8e20 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x556d391e8be0 <line:1120:4>
|   | `-TextComment 0x556d391e8bb0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e8c00 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e8c60 <col:11, col:40>
|   |   `-TextComment 0x556d391e8c30 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x556d391e8d00 <line:1122:3, line:1124:44>
|   | |-TextComment 0x556d391e8c80 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x556d391e8ca0 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e8cc0 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e8d50 <line:1126:3>
|   | `-TextComment 0x556d391e8d20 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e8d70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e8dd0 <col:11, col:35>
|       `-TextComment 0x556d391e8da0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910eff0 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910ef68 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910f1b8 <line:1143:1, line:1146:1>
| `-FullComment 0x556d391e9100 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x556d391e8ec0 <line:1134:4>
|   | `-TextComment 0x556d391e8e90 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e8ee0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e8f40 <col:11, col:40>
|   |   `-TextComment 0x556d391e8f10 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x556d391e8fe0 <line:1136:3, line:1138:37>
|   | |-TextComment 0x556d391e8f60 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x556d391e8f80 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e8fa0 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e9030 <line:1140:3>
|   | `-TextComment 0x556d391e9000 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e9050 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e90b0 <col:11, col:35>
|       `-TextComment 0x556d391e9080 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910f260 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910f1d8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910f428 <line:1157:1, line:1160:1>
| `-FullComment 0x556d391e93e0 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x556d391e91a0 <line:1148:4>
|   | `-TextComment 0x556d391e9170 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e91c0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e9220 <col:11, col:40>
|   |   `-TextComment 0x556d391e91f0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x556d391e92c0 <line:1150:3, line:1152:37>
|   | |-TextComment 0x556d391e9240 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x556d391e9260 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e9280 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391e9310 <line:1154:3>
|   | `-TextComment 0x556d391e92e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e9330 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e9390 <col:11, col:35>
|       `-TextComment 0x556d391e9360 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910f4d0 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910f448 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910f698 <line:1171:1, line:1174:1>
| `-FullComment 0x556d391e96c0 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x556d391e9480 <line:1162:4>
|   | `-TextComment 0x556d391e9450 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e94a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e9500 <col:11, col:40>
|   |   `-TextComment 0x556d391e94d0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x556d391e95a0 <line:1164:3, line:1166:45>
|   | |-TextComment 0x556d391e9520 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x556d391e9540 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e9560 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e95f0 <line:1168:3>
|   | `-TextComment 0x556d391e95c0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e9610 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e9670 <col:11, col:35>
|       `-TextComment 0x556d391e9640 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910f740 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910f6b8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910f908 <line:1185:1, line:1188:1>
| `-FullComment 0x556d391e99b0 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x556d391e9770 <line:1176:4>
|   | `-TextComment 0x556d391e9740 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e9790 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x556d391e97f0 <col:11, col:40>
|   |   `-TextComment 0x556d391e97c0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x556d391e9890 <line:1178:3, line:1180:45>
|   | |-TextComment 0x556d391e9810 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x556d391e9830 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e9850 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391e98e0 <line:1182:3>
|   | `-TextComment 0x556d391e98b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e9900 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e9960 <col:11, col:35>
|       `-TextComment 0x556d391e9930 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910f9b0 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910f928 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3910fb78 <line:1199:1, line:1202:1>
| `-FullComment 0x556d391e9c90 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x556d391e9a50 <line:1190:4>
|   | `-TextComment 0x556d391e9a20 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e9a70 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391e9ad0 <col:11, col:39>
|   |   `-TextComment 0x556d391e9aa0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x556d391e9b70 <line:1192:3, line:1194:44>
|   | |-TextComment 0x556d391e9af0 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x556d391e9b10 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391e9b30 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e9bc0 <line:1196:3>
|   | `-TextComment 0x556d391e9b90 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e9be0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e9c40 <col:11, col:35>
|       `-TextComment 0x556d391e9c10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910fc80 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d3910fb98 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d3910fe48 <line:1213:1, line:1216:1>
| `-FullComment 0x556d391e9f70 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x556d391e9d30 <line:1204:4>
|   | `-TextComment 0x556d391e9d00 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391e9d50 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391e9db0 <col:11, col:39>
|   |   `-TextComment 0x556d391e9d80 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x556d391e9e50 <line:1206:3, line:1208:44>
|   | |-TextComment 0x556d391e9dd0 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x556d391e9df0 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391e9e10 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391e9ea0 <line:1210:3>
|   | `-TextComment 0x556d391e9e70 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391e9ec0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391e9f20 <col:11, col:35>
|       `-TextComment 0x556d391e9ef0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d3910fef0 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d3910fe68 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d391100b8 <line:1227:1, line:1230:1>
| `-FullComment 0x556d391ea250 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x556d391ea010 <line:1218:4>
|   | `-TextComment 0x556d391e9fe0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391ea030 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391ea090 <col:11, col:39>
|   |   `-TextComment 0x556d391ea060 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x556d391ea130 <line:1220:3, line:1222:37>
|   | |-TextComment 0x556d391ea0b0 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x556d391ea0d0 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391ea0f0 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391ea180 <line:1224:3>
|   | `-TextComment 0x556d391ea150 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ea1a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391ea200 <col:11, col:35>
|       `-TextComment 0x556d391ea1d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d39110160 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d391100d8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d39110328 <line:1241:1, line:1244:1>
| `-FullComment 0x556d391ea530 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x556d391ea2f0 <line:1232:4>
|   | `-TextComment 0x556d391ea2c0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391ea310 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391ea370 <col:11, col:39>
|   |   `-TextComment 0x556d391ea340 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x556d391ea410 <line:1234:3, line:1236:37>
|   | |-TextComment 0x556d391ea390 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x556d391ea3b0 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391ea3d0 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391ea460 <line:1238:3>
|   | `-TextComment 0x556d391ea430 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ea480 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391ea4e0 <col:11, col:35>
|       `-TextComment 0x556d391ea4b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d391103d0 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d39110348 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d39110598 <line:1255:1, line:1258:1>
| `-FullComment 0x556d391ea810 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x556d391ea5d0 <line:1246:4>
|   | `-TextComment 0x556d391ea5a0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391ea5f0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391ea650 <col:11, col:39>
|   |   `-TextComment 0x556d391ea620 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x556d391ea6f0 <line:1248:3, line:1250:45>
|   | |-TextComment 0x556d391ea670 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x556d391ea690 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391ea6b0 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391ea740 <line:1252:3>
|   | `-TextComment 0x556d391ea710 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ea760 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391ea7c0 <col:11, col:35>
|       `-TextComment 0x556d391ea790 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d39110640 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d391105b8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d39110808 <line:1269:1, line:1272:1>
| `-FullComment 0x556d391eaaf0 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x556d391ea8b0 <line:1260:4>
|   | `-TextComment 0x556d391ea880 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391ea8d0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x556d391ea930 <col:11, col:39>
|   |   `-TextComment 0x556d391ea900 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x556d391ea9d0 <line:1262:3, line:1264:45>
|   | |-TextComment 0x556d391ea950 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x556d391ea970 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391ea990 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391eaa20 <line:1266:3>
|   | `-TextComment 0x556d391ea9f0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391eaa40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391eaaa0 <col:11, col:35>
|       `-TextComment 0x556d391eaa70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d391108b0 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d39110828 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d39110af8 <line:1283:1, line:1286:1>
| `-FullComment 0x556d391eadd0 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x556d391eab90 <line:1274:4>
|   | `-TextComment 0x556d391eab60 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391eabb0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391eac10 <col:11, col:43>
|   |   `-TextComment 0x556d391eabe0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x556d391eacb0 <line:1276:3, line:1278:44>
|   | |-TextComment 0x556d391eac30 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x556d391eac50 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391eac70 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391ead00 <line:1280:3>
|   | `-TextComment 0x556d391eacd0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ead20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391ead80 <col:11, col:35>
|       `-TextComment 0x556d391ead50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d39110ba0 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d39110b18 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d39110e08 <line:1297:1, line:1300:1>
| `-FullComment 0x556d391eb0b0 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x556d391eae70 <line:1288:4>
|   | `-TextComment 0x556d391eae40 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391eae90 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391eaef0 <col:11, col:43>
|   |   `-TextComment 0x556d391eaec0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x556d391eaf90 <line:1290:3, line:1292:44>
|   | |-TextComment 0x556d391eaf10 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x556d391eaf30 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391eaf50 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x556d391eafe0 <line:1294:3>
|   | `-TextComment 0x556d391eafb0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391eb000 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391eb060 <col:11, col:35>
|       `-TextComment 0x556d391eb030 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d39110eb0 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d39110e28 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d391110f8 <line:1311:1, line:1314:1>
| `-FullComment 0x556d391eb390 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x556d391eb150 <line:1302:4>
|   | `-TextComment 0x556d391eb120 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391eb170 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391eb1d0 <col:11, col:43>
|   |   `-TextComment 0x556d391eb1a0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x556d391eb270 <line:1304:3, line:1306:37>
|   | |-TextComment 0x556d391eb1f0 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x556d391eb210 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391eb230 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391eb2c0 <line:1308:3>
|   | `-TextComment 0x556d391eb290 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391eb2e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391eb340 <col:11, col:35>
|       `-TextComment 0x556d391eb310 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d391111a0 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d39111118 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d391113e8 <line:1325:1, line:1328:1>
| `-FullComment 0x556d391eb670 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x556d391eb430 <line:1316:4>
|   | `-TextComment 0x556d391eb400 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391eb450 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391eb4b0 <col:11, col:43>
|   |   `-TextComment 0x556d391eb480 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x556d391eb550 <line:1318:3, line:1320:37>
|   | |-TextComment 0x556d391eb4d0 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x556d391eb4f0 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391eb510 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x556d391eb5a0 <line:1322:3>
|   | `-TextComment 0x556d391eb570 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391eb5c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391eb620 <col:11, col:35>
|       `-TextComment 0x556d391eb5f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d39111490 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x556d39111408 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d391116d8 <line:1339:1, line:1342:1>
| `-FullComment 0x556d391eb960 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x556d391eb720 <line:1330:4>
|   | `-TextComment 0x556d391eb6e0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391eb740 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391eb7a0 <col:11, col:43>
|   |   `-TextComment 0x556d391eb770 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x556d391eb840 <line:1332:3, line:1334:45>
|   | |-TextComment 0x556d391eb7c0 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x556d391eb7e0 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x556d391eb800 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391eb890 <line:1336:3>
|   | `-TextComment 0x556d391eb860 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391eb8b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391eb910 <col:11, col:35>
|       `-TextComment 0x556d391eb8e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d39111780 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x556d391116f8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x556d39111a28 <line:1353:1, line:1356:1>
| `-FullComment 0x556d391ebc40 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x556d391eba00 <line:1344:4>
|   | `-TextComment 0x556d391eb9d0 <col:4> Text=" "
|   |-BlockCommandComment 0x556d391eba20 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391eba80 <col:11, col:43>
|   |   `-TextComment 0x556d391eba50 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x556d391ebb20 <line:1346:3, line:1348:45>
|   | |-TextComment 0x556d391ebaa0 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x556d391ebac0 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x556d391ebae0 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x556d391ebb70 <line:1350:3>
|   | `-TextComment 0x556d391ebb40 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ebb90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x556d391ebbf0 <col:11, col:35>
|       `-TextComment 0x556d391ebbc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x556d39111ac8 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x556d391ebed0 <line:112:3, line:116:1>
|   |-ParagraphComment 0x556d391ebce0 <line:112:3>
|   | `-TextComment 0x556d391ebcb0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ebd00 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x556d391ebd60 <col:10, col:64>
|   |   `-TextComment 0x556d391ebd30 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x556d391ebdb0 <line:114:3>
|   | `-TextComment 0x556d391ebd80 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ebdd0 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x556d391ebe30 <col:11, col:40>
|   |   `-TextComment 0x556d391ebe00 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x556d391ebe80 <line:116:1>
|     `-TextComment 0x556d391ebe50 <col:1> Text=" "
|-FunctionDecl 0x556d39113cc0 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x556d391ec160 <line:121:3, line:125:1>
|   |-ParagraphComment 0x556d391ebf70 <line:121:3>
|   | `-TextComment 0x556d391ebf40 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ebf90 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x556d391ebff0 <col:10, col:46>
|   |   `-TextComment 0x556d391ebfc0 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x556d391ec040 <line:123:3>
|   | `-TextComment 0x556d391ec010 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ec060 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x556d391ec0c0 <col:11, col:40>
|   |   `-TextComment 0x556d391ec090 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x556d391ec110 <line:125:1>
|     `-TextComment 0x556d391ec0e0 <col:1> Text=" "
|-RecordDecl 0x556d39113d60 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x556d39114060 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x556d39114000 'void (*)(struct _timeout *)'
|   `-ParenType 0x556d39113fa0 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x556d39113f60 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x556d38f8a980 'void'
|       `-PointerType 0x556d39113e70 'struct _timeout *'
|         `-ElaboratedType 0x556d39113e10 'struct _timeout' sugar
|           `-RecordType 0x556d39113df0 'struct _timeout'
|             `-Record 0x556d391140b8 '_timeout'
|-RecordDecl 0x556d391140b8 prev 0x556d39113d60 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x556d39114150 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x556d391141d0 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x556d39114250 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x556d39114298 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x556d39114358 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x556d391143f0 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x556d391143a0 'struct k_spinlock_key' sugar
|   `-RecordType 0x556d39114320 'struct k_spinlock_key'
|     `-Record 0x556d39114298 'k_spinlock_key'
|-RecordDecl 0x556d39114448 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x556d391146c0 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x556d391145c0 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x556d39114ad8 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x556d39114850 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x556d39114838 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x556d39114818 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x556d391147b0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x556d391145c0 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x556d391148e8 <line:65:2, col:20>
| | | `-VarDecl 0x556d39114888 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key'
| | |-BinaryOperator 0x556d39114a10 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x556d39114928 <col:2, col:4> 'int' lvalue .key 0x556d39114358
| | | | `-DeclRefExpr 0x556d39114900 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x556d39114888 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x556d391149f8 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x556d391149d0 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x556d391149b8 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x556d39114960 <col:10> 'unsigned int (void)' Function 0x556d390eee40 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x556d39114ac0 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x556d39114aa8 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x556d39114a80 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x556d39114888 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x556d39114768 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x556d39116a20 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x556d39114b30 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x556d39114ba0 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x556d39116d10 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x556d39116bb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x556d39116ba0 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x556d39116b80 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x556d39116b18 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x556d39114b30 'l' 'struct k_spinlock *'
| | `-CallExpr 0x556d39116cb0 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x556d39116c98 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x556d39116be0 <col:2> 'void (unsigned int)' Function 0x556d390eefa8 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x556d39116cf8 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x556d39116ce0 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x556d39116c30 <col:18, col:22> 'int' lvalue .key 0x556d39114358
| |         `-DeclRefExpr 0x556d39116c08 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x556d39114ba0 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x556d39116ad0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x556d39116e60 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x556d39116d58 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x556d39117078 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x556d39116ff0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x556d39116fd8 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| |     `-ParenExpr 0x556d39116fb8 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x556d39116f50 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x556d39116d58 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x556d39116f08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x556d39117090 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x556d391ec3c0 <line:18:3, line:20:5>
| | |-ParagraphComment 0x556d391ec200 <line:18:3>
| | | `-TextComment 0x556d391ec1d0 <col:3> Text=" "
| | |-VerbatimLineComment 0x556d391ec220 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x556d391ec290 <line:19:3>
| | | `-TextComment 0x556d391ec260 <col:3> Text=" "
| | |-VerbatimLineComment 0x556d391ec2b0 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x556d391ec370 <line:20:3, col:5>
| |   |-TextComment 0x556d391ec2f0 <col:3> Text=" "
| |   |-TextComment 0x556d391ec310 <col:4> Text="@"
| |   `-TextComment 0x556d391ec330 <col:5> Text="{"
| |-EnumConstantDecl 0x556d39117178 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x556d391ec490 <line:24:5, col:55>
| |   `-ParagraphComment 0x556d391ec460 <col:5, col:55>
| |     `-TextComment 0x556d391ec430 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x556d391171e8 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x556d391ec560 <line:27:5, col:34>
| |   `-ParagraphComment 0x556d391ec530 <col:5, col:34>
| |     `-TextComment 0x556d391ec500 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x556d39117258 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x556d391ec630 <line:30:5, col:50>
| |   `-ParagraphComment 0x556d391ec600 <col:5, col:50>
| |     `-TextComment 0x556d391ec5d0 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x556d391172c8 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x556d391ec700 <line:33:5, col:38>
| |   `-ParagraphComment 0x556d391ec6d0 <col:5, col:38>
| |     `-TextComment 0x556d391ec6a0 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x556d39117338 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x556d391ec7d0 <line:36:5, col:34>
|     `-ParagraphComment 0x556d391ec7a0 <col:5, col:34>
|       `-TextComment 0x556d391ec770 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x556d39117480 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x556d391173c0 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x556d391ecab0 <line:45:3, line:50:44>
|   |-ParagraphComment 0x556d391ec870 <line:45:3>
|   | `-TextComment 0x556d391ec840 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ec890 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d391ec8f0 <col:10, col:42>
|   |   `-TextComment 0x556d391ec8c0 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x556d391ec960 <line:47:3, line:48:76>
|   | |-TextComment 0x556d391ec910 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x556d391ec930 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x556d391ec9b0 <line:50:3>
|   | `-TextComment 0x556d391ec980 <col:3> Text=" "
|   `-ParamCommandComment 0x556d391ec9d0 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x556d391eca60 <col:17, col:44>
|       `-TextComment 0x556d391eca30 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x556d391176c0 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x556d39117570 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x556d391175e8 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x556d391ed190 <line:55:3, line:81:71>
|   |-ParagraphComment 0x556d391ecb50 <line:55:3>
|   | `-TextComment 0x556d391ecb20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ecb70 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x556d391ecbd0 <col:10, col:36>
|   |   `-TextComment 0x556d391ecba0 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x556d391ecc40 <line:57:3, line:58:67>
|   | |-TextComment 0x556d391ecbf0 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x556d391ecc10 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x556d391ecce0 <line:60:3, line:62:71>
|   | |-TextComment 0x556d391ecc60 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x556d391ecc80 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x556d391ecca0 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x556d391ecd50 <line:64:3, line:65:11>
|   | |-TextComment 0x556d391ecd00 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x556d391ecd20 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x556d391ecda0 <line:67:3, col:42>
|   | `-TextComment 0x556d391ecd70 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x556d391ecf30 <line:69:3, line:77:23>
|   | |-TextComment 0x556d391ecdc0 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x556d391ecde0 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x556d391ece00 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x556d391ece20 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x556d391ece40 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x556d391ece60 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x556d391ece80 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x556d391ecea0 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x556d391ecec0 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x556d391ecf80 <line:79:3>
|   | `-TextComment 0x556d391ecf50 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ecfa0 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x556d391ed050 <line:79:17, line:80:3>
|   |   |-TextComment 0x556d391ed000 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x556d391ed020 <line:80:3> Text=" "
|   `-ParamCommandComment 0x556d391ed070 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x556d391ed120 <line:80:14, line:81:71>
|       |-TextComment 0x556d391ed0d0 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x556d391ed0f0 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x556d391178b8 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x556d391177b0 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x556d39117828 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x556d391ed580 <line:86:3, line:97:71>
|   |-ParagraphComment 0x556d391ed230 <line:86:3, col:50>
|   | `-TextComment 0x556d391ed200 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x556d391ed2d0 <line:88:3, line:90:31>
|   | |-TextComment 0x556d391ed250 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x556d391ed270 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x556d391ed290 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x556d391ed340 <line:92:3, line:93:24>
|   | |-TextComment 0x556d391ed2f0 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x556d391ed310 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x556d391ed390 <line:95:3>
|   | `-TextComment 0x556d391ed360 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ed3b0 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x556d391ed460 <line:95:17, line:96:3>
|   |   |-TextComment 0x556d391ed410 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x556d391ed430 <line:96:3> Text=" "
|   `-ParamCommandComment 0x556d391ed480 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x556d391ed530 <line:96:14, line:97:71>
|       |-TextComment 0x556d391ed4e0 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x556d391ed500 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x556d3911b1f0 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x556d3911aed0 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x556d3911af48 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x556d3911b058 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x556d3911b0d0 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x556d3911b140 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x556d3911b738 <line:70:1, line:73:1>
| | `-ReturnStmt 0x556d3911b4e8 <line:71:2, line:72:11>
| |   `-CallExpr 0x556d3911b420 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x556d3911b408 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d3911b2b8 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x556d390efaf8 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x556d3911b470 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3911b2e0 <col:34> 'unsigned int' lvalue ParmVar 0x556d3911aed0 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x556d3911b488 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3911b308 <col:39> 'unsigned int' lvalue ParmVar 0x556d3911af48 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x556d3911b4a0 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3911b330 <col:49> 'void (*)(void *)' lvalue ParmVar 0x556d3911b058 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x556d3911b4b8 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3911b358 <col:58> 'void *' lvalue ParmVar 0x556d3911b0d0 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x556d3911b4d0 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x556d3911b380 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x556d3911b140 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x556d39105570 <line:54:3, line:64:48>
|   |-ParagraphComment 0x556d391ed620 <line:54:3, col:33>
|   | `-TextComment 0x556d391ed5f0 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x556d391ed670 <line:56:3, col:80>
|   | `-TextComment 0x556d391ed640 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x556d391ed6c0 <line:58:3>
|   | `-TextComment 0x556d391ed690 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ed6e0 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x556d39105110 <line:58:14, line:59:3>
|   |   |-TextComment 0x556d391050c0 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x556d391050e0 <line:59:3> Text=" "
|   |-ParamCommandComment 0x556d39105130 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x556d391051e0 <line:59:19, line:60:3>
|   |   |-TextComment 0x556d39105190 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x556d391051b0 <line:60:3> Text=" "
|   |-ParamCommandComment 0x556d39105200 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x556d391052b0 <line:60:18, line:61:3>
|   |   |-TextComment 0x556d39105260 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x556d39105280 <line:61:3> Text=" "
|   |-ParamCommandComment 0x556d391052d0 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x556d39105380 <line:61:20, line:62:3>
|   |   |-TextComment 0x556d39105330 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x556d39105350 <line:62:3> Text=" "
|   |-ParamCommandComment 0x556d391053a0 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x556d39105430 <col:16, col:53>
|   |   `-TextComment 0x556d39105400 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x556d39105480 <line:64:3>
|   | `-TextComment 0x556d39105450 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391054a0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x556d39105500 <col:11, col:48>
|       `-TextComment 0x556d391054d0 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x556d3911b818 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x556d39105790 <line:21:3, line:26:59>
|   |-ParagraphComment 0x556d39105610 <line:21:3, col:57>
|   | `-TextComment 0x556d391055e0 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x556d39105680 <line:23:3, line:24:52>
|   | |-TextComment 0x556d39105630 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x556d39105650 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x556d391056d0 <line:26:3>
|   | `-TextComment 0x556d391056a0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391056f0 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x556d39105750 <col:11, col:59>
|       `-TextComment 0x556d39105720 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x556d3911b910 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x556d3911b9d8 prev 0x556d3911b818 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x556d3911bcc8 <line:26:1, line:34:1>
|   |-DoStmt 0x556d3911bbd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3911bb98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3911bb48 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3911bbb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3911bc88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x556d3911bc60 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x556d3911bc48 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556d3911bbf0 <col:9> 'int *()' Function 0x556d3911b910 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x556d3911bce8 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x556d3911bda0 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x556d391277d0 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x556d3911bdf0 'struct _wait_q_t' sugar
|   `-RecordType 0x556d3911bd70 '_wait_q_t'
|     `-Record 0x556d3911bce8 ''
|-RecordDecl 0x556d39127840 prev 0x556d390eaf18 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x556d391278c8 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x556d39127970 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x556d39127a20 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x556d39127ad0 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x556d39127b80 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x556d39127c30 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x556d39127ce0 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x556d39127d90 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x556d39127e40 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x556d39127ef0 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x556d39127fa0 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x556d39128050 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x556d39128100 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x556d391281b0 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x556d39128260 prev 0x556d390eafa0 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x556d391282e8 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x556d39128390 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x556d39128468 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x556d39105990 <line:140:3, line:144:33>
| | |-ParagraphComment 0x556d39105830 <line:140:3>
| | | `-TextComment 0x556d39105800 <col:3> Text=" "
| | |-BlockCommandComment 0x556d39105850 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x556d391058b0 <col:10, col:29>
| | |   `-TextComment 0x556d39105880 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x556d39105950 <line:142:3, line:144:33>
| |   |-TextComment 0x556d391058d0 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x556d391058f0 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x556d39105910 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x556d39128520 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x556d39128598 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x556d391285e0 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x556d39128628 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x556d39128670 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x556d391286b8 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x556d39128700 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x556d39128748 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x556d39129a40 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x556d39129a88 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x556d39129ad0 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x556d39129b18 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x556d39129b60 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x556d39129ba8 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x556d39129bf0 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x556d39129c38 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x556d39129c80 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x556d39129cc8 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x556d39129d10 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x556d39129d58 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x556d39129da0 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x556d39129de8 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x556d39129e30 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x556d39129e78 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x556d39129ec0 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x556d39129f08 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x556d39129f50 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x556d39129f98 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x556d39129fe0 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x556d3912a028 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x556d3912a070 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x556d3912a0b8 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x556d3912a100 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x556d3912a148 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x556d3912a190 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x556d3912a1d8 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x556d3912a248 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x556d39105ab0 <line:156:5, col:13>
|     `-ParagraphComment 0x556d39105a80 <col:5, col:13>
|       |-TextComment 0x556d39105a00 <col:5> Text=" "
|       `-InlineCommandComment 0x556d39105a50 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x556d3912a388 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x556d3912a300 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x556d3912a528 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x556d3912a4d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x556d3912a4b8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x556d3912a498 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x556d3912a430 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x556d3912a300 'obj' 'void *'
| `-FullComment 0x556d39105bd0 <line:227:3, col:12>
|   `-ParagraphComment 0x556d39105ba0 <col:3, col:12>
|     |-TextComment 0x556d39105b20 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39105b70 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d3912a6f0 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x556d3912a558 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x556d3912a5e0 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x556d3912a958 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x556d3912a840 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x556d3912a828 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x556d3912a808 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x556d3912a7a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x556d3912a558 'object' 'void *'
| | `-CStyleCastExpr 0x556d3912a908 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x556d3912a8f0 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x556d3912a8d0 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x556d3912a868 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x556d3912a5e0 'thread' 'struct k_thread *'
| `-FullComment 0x556d39105cc0 <line:235:3, col:12>
|   `-ParagraphComment 0x556d39105c90 <col:3, col:12>
|     |-TextComment 0x556d39105c40 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39105c60 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d3912bff0 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x556d3912a990 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x556d3912bf60 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x556d3912c258 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x556d3912c140 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x556d3912c128 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x556d3912c108 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x556d3912c0a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x556d3912a990 'object' 'void *'
| | `-CStyleCastExpr 0x556d3912c208 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x556d3912c1f0 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x556d3912c1d0 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x556d3912c168 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x556d3912bf60 'thread' 'struct k_thread *'
| `-FullComment 0x556d39105db0 <line:245:3, col:12>
|   `-ParagraphComment 0x556d39105d80 <col:3, col:12>
|     |-TextComment 0x556d39105d30 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39105d50 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d3912c318 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x556d3912c290 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x556d3912c488 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x556d3912c460 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x556d3912c448 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x556d3912c428 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x556d3912c3c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x556d3912c290 'object' 'void *'
| `-FullComment 0x556d39105ea0 <line:255:3, col:12>
|   `-ParagraphComment 0x556d39105e70 <col:3, col:12>
|     |-TextComment 0x556d39105e20 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39105e40 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d3912c540 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x556d3912c4b8 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x556d3912c6d8 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x556d3912c688 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x556d3912c670 <col:29, col:31> 'void *' <LValueToRValue>
|       `-ParenExpr 0x556d3912c650 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x556d3912c5e8 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x556d3912c4b8 'object' 'void *'
|-FunctionDecl 0x556d3912c820 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x556d3912c708 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x556d3912c790 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x556d39106200 <line:270:3, line:277:53>
|   |-ParagraphComment 0x556d39105f40 <line:270:3, col:43>
|   | `-TextComment 0x556d39105f10 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x556d39105fe0 <line:272:3, line:274:67>
|   | |-TextComment 0x556d39105f60 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x556d39105f80 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x556d39105fa0 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x556d39106030 <line:276:3>
|   | `-TextComment 0x556d39106000 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39106050 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x556d39106100 <line:276:17, line:277:3>
|   |   |-TextComment 0x556d391060b0 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x556d391060d0 <line:277:3> Text=" "
|   `-ParamCommandComment 0x556d39106120 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x556d391061b0 <col:17, col:53>
|       `-TextComment 0x556d39106180 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x556d3912ca28 prev 0x556d3912bff0 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x556d3912c910 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x556d3912c998 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x556d39106560 <line:282:3, line:289:54>
|   |-ParagraphComment 0x556d391062a0 <line:282:3, col:46>
|   | `-TextComment 0x556d39106270 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x556d39106340 <line:284:3, line:286:67>
|   | |-TextComment 0x556d391062c0 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x556d391062e0 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x556d39106300 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x556d39106390 <line:288:3>
|   | `-TextComment 0x556d39106360 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391063b0 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x556d39106460 <line:288:17, line:289:3>
|   |   |-TextComment 0x556d39106410 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x556d39106430 <line:289:3> Text=" "
|   `-ParamCommandComment 0x556d39106480 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x556d39106510 <col:17, col:54>
|       `-TextComment 0x556d391064e0 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x556d3912cba8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x556d3912cb20 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x556d39106890 <line:294:3, line:301:1>
|   |-ParagraphComment 0x556d39106600 <line:294:3>
|   | `-TextComment 0x556d391065d0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39106620 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x556d39106680 <col:10, col:27>
|   |   `-TextComment 0x556d39106650 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x556d391066f0 <line:296:3, line:297:72>
|   | |-TextComment 0x556d391066a0 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x556d391066c0 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x556d39106740 <line:299:3>
|   | `-TextComment 0x556d39106710 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39106760 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x556d391067f0 <col:17, col:42>
|   |   `-TextComment 0x556d391067c0 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x556d39106840 <line:301:1>
|     `-TextComment 0x556d39106810 <col:1> Text=" "
|-FunctionDecl 0x556d3912cd18 prev 0x556d3912c540 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x556d3912cc90 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x556d39106c50 <line:305:3, line:319:41>
|   |-ParagraphComment 0x556d39106930 <line:305:3, col:59>
|   | `-TextComment 0x556d39106900 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x556d391069f0 <line:307:3, line:310:59>
|   | |-TextComment 0x556d39106950 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x556d39106970 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x556d39106990 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x556d391069b0 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x556d39106a90 <line:312:3, line:314:43>
|   | |-TextComment 0x556d39106a10 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x556d39106a30 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x556d39106a50 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x556d39106b00 <line:316:3, line:317:25>
|   | |-TextComment 0x556d39106ab0 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x556d39106ad0 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x556d39106b50 <line:319:3>
|   | `-TextComment 0x556d39106b20 <col:3> Text=" "
|   `-ParamCommandComment 0x556d39106b70 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x556d39106c00 <col:17, col:41>
|       `-TextComment 0x556d39106bd0 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x556d3912cf70 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x556d3912ce40 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x556d39107010 <line:324:3, line:335:12>
|   |-ParagraphComment 0x556d39106cf0 <line:324:3, col:48>
|   | `-TextComment 0x556d39106cc0 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x556d39106db0 <line:326:3, line:329:78>
|   | |-TextComment 0x556d39106d10 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x556d39106d30 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x556d39106d50 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x556d39106d70 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x556d39106e00 <line:331:3, col:59>
|   | `-TextComment 0x556d39106dd0 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x556d39106e50 <line:333:3>
|   | `-TextComment 0x556d39106e20 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39106e70 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x556d39106f20 <line:333:16, line:334:3>
|   |   |-TextComment 0x556d39106ed0 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x556d39106ef0 <line:334:3> Text=" "
|   `-BlockCommandComment 0x556d39106f40 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x556d39106fc0 <line:334:11, line:335:12>
|       |-TextComment 0x556d39106f70 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x556d39106f90 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x556d3912d0c8 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x556d3912d038 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x556d3912d2f8 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x556d3912d210 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x556d3912d1f8 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|   |   `-ParenExpr 0x556d3912d1d8 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x556d3912d170 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x556d3912d038 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x556d3912d2b8 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x556d3912d298 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x556d3912d270 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x556d3912d238 <col:23> 'int' 0
|-FunctionDecl 0x556d3912d3b8 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x556d3912d330 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x556d3912d558 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x556d3912d500 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x556d3912d4e8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x556d3912d4c8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x556d3912d460 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x556d3912d330 'obj' 'void *'
| `-FullComment 0x556d391f1920 <line:359:3, line:362:1>
|   |-ParagraphComment 0x556d391f1760 <line:359:3>
|   | `-TextComment 0x556d391f1730 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f1780 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x556d391f17e0 <col:10, col:24>
|   |   `-TextComment 0x556d391f17b0 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x556d391f1830 <line:361:3>
|   | `-TextComment 0x556d391f1800 <col:3> Text=" "
|   `-ParamCommandComment 0x556d391f1850 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x556d391f18e0 <col:1>
|       `-TextComment 0x556d391f18b0 <col:1> Text=" "
|-RecordDecl 0x556d3912d570 prev 0x556d390eb050 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x556d3912d5f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x556d3912d650 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x556d3912d6f8 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x556d3912d7a0 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x556d3912d860 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x556d3912d8c8 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x556d3912d960 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x556d3912d9b8 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x556d3912d960 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x556d3912d860 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x556d3912da08 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x556d3912d960 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x556d3912d8c8 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x556d3912dad8 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x556d3912db30 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x556d3912db88 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x556d3912dbd0 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x556d3912dc80 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x556d3912dd40 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x556d3912dd98 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x556d3912de30 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x556d3912de88 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x556d3912de30 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x556d3912dd40 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x556d3912ded8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x556d3912de30 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x556d3912dd98 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x556d3912df28 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x556d390e6aa0 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x556d390e6b00 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x556d390e6aa0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x556d3912de30 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x556d3912dd40 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x556d390e6b58 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x556d390e6aa0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x556d3912de30 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x556d3912dd98 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x556d390e6ba8 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x556d390e6aa0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x556d3912df28 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x556d390e6bf8 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x556d390e6c58 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x556d390e6d90 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x556d390e6d40 'struct _thread_base' sugar
|   `-RecordType 0x556d3912d780 'struct _thread_base'
|     `-Record 0x556d3912d6f8 '_thread_base'
|-RecordDecl 0x556d390e6e18 prev 0x556d39127840 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x556d391f1a90 <line:542:3, line:543:19>
| | |-ParagraphComment 0x556d391f19c0 <line:542:3>
| | | `-TextComment 0x556d391f1990 <col:3> Text=" "
| | |-VerbatimLineComment 0x556d391f19e0 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x556d391f1a50 <line:543:3, col:19>
| |   `-TextComment 0x556d391f1a20 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x556d390e6ec0 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x556d390e6f38 parent 0x556d38f8a928 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x556d390e7040 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x556d391f1b60 <line:549:5, col:59>
| |   `-ParagraphComment 0x556d391f1b30 <col:5, col:59>
| |     `-TextComment 0x556d391f1b00 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x556d390e70d0 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x556d391f1c30 <line:552:5, col:29>
| |   `-ParagraphComment 0x556d391f1c00 <col:5, col:29>
| |     `-TextComment 0x556d391f1bd0 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x556d390e7278 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x556d391f1dc0 <line:556:4, line:558:4>
| |   |-ParagraphComment 0x556d391f1cf0 <line:556:4, line:557:4>
| |   | |-TextComment 0x556d391f1ca0 <line:556:4, col:18> Text=" abort function"
| |   | `-TextComment 0x556d391f1cc0 <line:557:4> Text=" "
| |   |-VerbatimLineComment 0x556d391f1d10 <col:5, col:22> Text=" K-THREAD-002"
| |   `-ParagraphComment 0x556d391f1d80 <line:558:4>
| |     `-TextComment 0x556d391f1d50 <col:4> Text=" "
| |-FieldDecl 0x556d390e73a0 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x556d391f1e90 <line:613:5, col:19>
| |   `-ParagraphComment 0x556d391f1e60 <col:5, col:19>
| |     `-TextComment 0x556d391f1e30 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x556d390e7418 parent 0x556d38f8a928 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x556d390e7520 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x556d391f1f60 <line:616:5, col:47>
|     `-ParagraphComment 0x556d391f1f30 <col:5, col:47>
|       `-TextComment 0x556d391f1f00 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x556d390e7650 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x556d3907c620 'struct k_thread' sugar
|   `-RecordType 0x556d3907c590 'struct k_thread'
|     `-Record 0x556d390e6e18 'k_thread'
|-TypedefDecl 0x556d390e76d0 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x556d3907c680 'struct k_thread *'
|   `-ElaboratedType 0x556d3907c620 'struct k_thread' sugar
|     `-RecordType 0x556d3907c590 'struct k_thread'
|       `-Record 0x556d390e6e18 'k_thread'
|-EnumDecl 0x556d390e7728 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x556d390e7800 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-IntegerLiteral 0x556d390e77e0 <col:10> 'int' 0
| |-EnumConstantDecl 0x556d390e7848 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x556d390e7890 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x556d39130d68 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x556d39130d00 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x556d39130ca0 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x556d39130c60 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x556d38f8a980 'void'
| |     |-PointerType 0x556d390e7940 'const struct k_thread *'
| |     | `-QualType 0x556d3907c621 'const struct k_thread' const
| |     |   `-ElaboratedType 0x556d3907c620 'struct k_thread' sugar
| |     |     `-RecordType 0x556d3907c590 'struct k_thread'
| |     |       `-Record 0x556d390e6e18 'k_thread'
| |     `-PointerType 0x556d38f8ae20 'void *'
| |       `-BuiltinType 0x556d38f8a980 'void'
| `-FullComment 0x556d391f2120 <line:630:3, line:631:5>
|   |-ParagraphComment 0x556d391f2000 <line:630:3>
|   | `-TextComment 0x556d391f1fd0 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d391f2020 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x556d391f20e0 <line:631:3, col:5>
|     |-TextComment 0x556d391f2060 <col:3> Text=" "
|     |-TextComment 0x556d391f2080 <col:4> Text="@"
|     `-TextComment 0x556d391f20a0 <col:5> Text="{"
|-FunctionDecl 0x556d39130fb0 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x556d39130e20 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x556d39130e98 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x556d391f2830 <line:638:3, line:652:14>
|   |-ParagraphComment 0x556d391f21c0 <line:638:3>
|   | `-TextComment 0x556d391f2190 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f21e0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x556d391f2240 <col:10, col:53>
|   |   `-TextComment 0x556d391f2210 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x556d391f22b0 <line:640:3, line:641:46>
|   | |-TextComment 0x556d391f2260 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x556d391f2280 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x556d391f2300 <line:643:3>
|   | `-TextComment 0x556d391f22d0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f2320 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x556d391f23d0 <line:643:18, line:644:3>
|   |   |-TextComment 0x556d391f2380 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x556d391f23a0 <line:644:3> Text=" "
|   |-ParamCommandComment 0x556d391f23f0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x556d391f2480 <col:20, col:41>
|   |   `-TextComment 0x556d391f2450 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x556d391f24d0 <line:646:3>
|   | `-TextComment 0x556d391f24a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f24f0 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x556d391f25a0 <line:646:9, line:648:3>
|   |   |-TextComment 0x556d391f2520 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x556d391f2540 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x556d391f2560 <line:648:3> Text=" "
|   |-BlockCommandComment 0x556d391f25c0 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x556d391f2620 <col:9, col:23>
|   |   `-TextComment 0x556d391f25f0 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x556d391f2640 <col:24, col:71> Text=" k_spin_lock to protect the _kernel.threads"
|   |-ParagraphComment 0x556d391f26d0 <line:649:3, line:650:46>
|   | |-TextComment 0x556d391f2680 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   | `-TextComment 0x556d391f26a0 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x556d391f2720 <line:652:3>
|   | `-TextComment 0x556d391f26f0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391f2740 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391f27a0 <col:11, col:14>
|       `-TextComment 0x556d391f2770 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d391311a0 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x556d39131098 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x556d39131110 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x556d391f3330 <line:657:3, line:681:72>
|   |-ParagraphComment 0x556d391f28d0 <line:657:3>
|   | `-TextComment 0x556d391f28a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f28f0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x556d391f2950 <col:10, col:69>
|   |   `-TextComment 0x556d391f2920 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x556d391f29a0 <line:659:3, col:44>
|   | `-TextComment 0x556d391f2970 <col:3, col:44> Text=" This routine works exactly the same like "
|   |-VerbatimLineComment 0x556d391f29c0 <col:45, col:66> Text=" k_thread_foreach"
|   |-ParagraphComment 0x556d391f2a30 <line:660:3, col:51>
|   | `-TextComment 0x556d391f2a00 <col:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x556d391f2a80 <line:662:3>
|   | `-TextComment 0x556d391f2a50 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f2aa0 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x556d391f2b50 <line:662:18, line:663:3>
|   |   |-TextComment 0x556d391f2b00 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x556d391f2b20 <line:663:3> Text=" "
|   |-ParamCommandComment 0x556d391f2b70 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x556d391f2c00 <col:20, col:41>
|   |   `-TextComment 0x556d391f2bd0 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x556d391f2c50 <line:665:3>
|   | `-TextComment 0x556d391f2c20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f2c70 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x556d391f2d20 <line:665:9, line:667:3>
|   |   |-TextComment 0x556d391f2ca0 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x556d391f2cc0 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x556d391f2ce0 <line:667:3> Text=" "
|   |-BlockCommandComment 0x556d391f2d40 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x556d391f2da0 <col:9, col:23>
|   |   `-TextComment 0x556d391f2d70 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x556d391f2dc0 <col:24, col:80> Text=" k_spin_lock only when accessing the _kernel.threads"
|   |-ParagraphComment 0x556d391f2fa0 <line:668:3, line:674:3>
|   | |-TextComment 0x556d391f2e00 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   | |-TextComment 0x556d391f2e20 <line:669:3, col:38> Text=" If a new task is created when this "
|   | |-InlineCommandComment 0x556d391f2e70 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   | |-TextComment 0x556d391f2e90 <col:49, col:73> Text=" function is in progress,"
|   | |-TextComment 0x556d391f2eb0 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   | |-TextComment 0x556d391f2ed0 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   | |-TextComment 0x556d391f2ef0 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   | |-TextComment 0x556d391f2f10 <line:673:3, col:15> Text=" enumeration."
|   | `-TextComment 0x556d391f2f30 <line:674:3> Text=" "
|   `-BlockCommandComment 0x556d391f2fc0 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x556d391f32a0 <line:674:9, line:681:72>
|       |-TextComment 0x556d391f2ff0 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x556d391f3040 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x556d391f3060 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x556d391f30c0 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x556d391f30e0 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x556d391f3100 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x556d391f3120 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x556d391f3170 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x556d391f3190 <col:67, col:71> Text=" task"
|       |-TextComment 0x556d391f31b0 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x556d391f31d0 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x556d391f31f0 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x556d391f3210 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x556d391319c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x556d391313b8 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x556d39131428 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x556d39131498 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39131530 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x556d391315a8 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x556d39131620 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x556d39131698 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x556d39131710 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x556d39131780 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x556d391317f0 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x556d391f41a0 <line:746:3, line:778:1>
|   |-ParagraphComment 0x556d391f33d0 <line:746:3>
|   | `-TextComment 0x556d391f33a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f33f0 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x556d391f3450 <col:10, col:26>
|   |   `-TextComment 0x556d391f3420 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x556d391f34a0 <line:748:3, col:70>
|   | `-TextComment 0x556d391f3470 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x556d391f3560 <line:750:3, line:753:11>
|   | |-TextComment 0x556d391f34c0 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x556d391f34e0 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x556d391f3500 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x556d391f3520 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x556d391f3600 <line:755:3, line:757:44>
|   | |-TextComment 0x556d391f3580 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x556d391f35a0 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x556d391f35c0 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x556d391f36c0 <line:759:3, line:762:13>
|   | |-TextComment 0x556d391f3620 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x556d391f3640 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x556d391f3660 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x556d391f3680 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x556d391f3710 <line:764:3>
|   | `-TextComment 0x556d391f36e0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f3740 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x556d391f37f0 <line:764:21, line:765:3>
|   |   |-TextComment 0x556d391f37a0 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x556d391f37c0 <line:765:3> Text=" "
|   |-ParamCommandComment 0x556d391f3810 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x556d391f38c0 <line:765:16, line:766:3>
|   |   |-TextComment 0x556d391f3870 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x556d391f3890 <line:766:3> Text=" "
|   |-ParamCommandComment 0x556d391f38e0 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x556d391f3990 <line:766:21, line:767:3>
|   |   |-TextComment 0x556d391f3940 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x556d391f3960 <line:767:3> Text=" "
|   |-ParamCommandComment 0x556d391f39b0 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x556d391f3a60 <line:767:16, line:768:3>
|   |   |-TextComment 0x556d391f3a10 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x556d391f3a30 <line:768:3> Text=" "
|   |-ParamCommandComment 0x556d391f3a80 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x556d391f3b30 <line:768:13, line:769:3>
|   |   |-TextComment 0x556d391f3ae0 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x556d391f3b00 <line:769:3> Text=" "
|   |-ParamCommandComment 0x556d391f3b50 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x556d391f3c00 <line:769:13, line:770:3>
|   |   |-TextComment 0x556d391f3bb0 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x556d391f3bd0 <line:770:3> Text=" "
|   |-ParamCommandComment 0x556d391f3c20 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x556d391f3cd0 <line:770:13, line:771:3>
|   |   |-TextComment 0x556d391f3c80 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x556d391f3ca0 <line:771:3> Text=" "
|   |-ParamCommandComment 0x556d391f3cf0 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x556d391f3da0 <line:771:15, line:772:3>
|   |   |-TextComment 0x556d391f3d50 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x556d391f3d70 <line:772:3> Text=" "
|   |-ParamCommandComment 0x556d391f3dc0 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x556d391f3e70 <line:772:18, line:773:3>
|   |   |-TextComment 0x556d391f3e20 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x556d391f3e40 <line:773:3> Text=" "
|   |-ParamCommandComment 0x556d391f3e90 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x556d391f3f20 <col:16, col:80>
|   |   `-TextComment 0x556d391f3ef0 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x556d391f3f70 <line:775:3>
|   | `-TextComment 0x556d391f3f40 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f3f90 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x556d391f3ff0 <col:11, col:28>
|   |   `-TextComment 0x556d391f3fc0 <col:11, col:28> Text=" ID of new thread."
|   |-ParagraphComment 0x556d391f4040 <line:777:3>
|   | `-TextComment 0x556d391f4010 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d391f4060 <col:4, col:21> Text=" K-THREAD-001"
|   `-ParagraphComment 0x556d391f40d0 <line:778:1>
|     `-TextComment 0x556d391f40a0 <col:1> Text=" "
|-FunctionDecl 0x556d39134e90 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x556d39131ae8 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x556d39134bc0 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x556d39134c38 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x556d39134cb0 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x556d391f4750 <line:787:3, line:794:1>
|   |-ParagraphComment 0x556d391f4240 <line:787:3>
|   | `-TextComment 0x556d391f4210 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f4260 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x556d391f42c0 <col:10, col:61>
|   |   `-TextComment 0x556d391f4290 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x556d391f4310 <line:789:3>
|   | `-TextComment 0x556d391f42e0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f4330 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x556d391f43e0 <line:789:16, line:790:3>
|   |   |-TextComment 0x556d391f4390 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x556d391f43b0 <line:790:3> Text=" "
|   |-ParamCommandComment 0x556d391f4400 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x556d391f44b0 <line:790:13, line:791:3>
|   |   |-TextComment 0x556d391f4460 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x556d391f4480 <line:791:3> Text=" "
|   |-ParamCommandComment 0x556d391f44d0 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x556d391f4580 <line:791:13, line:792:3>
|   |   |-TextComment 0x556d391f4530 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x556d391f4550 <line:792:3> Text=" "
|   |-ParamCommandComment 0x556d391f45a0 <col:4, line:793:3> [in] implicitly Param="p3" ParamIndex=3
|   | `-ParagraphComment 0x556d391f4650 <line:792:13, line:793:3>
|   |   |-TextComment 0x556d391f4600 <line:792:13, col:38> Text=" 3rd entry point parameter"
|   |   `-TextComment 0x556d391f4620 <line:793:3> Text=" "
|   |-VerbatimLineComment 0x556d391f4670 <col:4, col:21> Text=" K-THREAD-003"
|   `-ParagraphComment 0x556d391f46e0 <line:794:1>
|     `-TextComment 0x556d391f46b0 <col:1> Text=" "
|-FunctionDecl 0x556d39135170 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x556d39134fd0 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x556d39135058 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x556d39135328 <line:833:1, line:835:1>
| | `-BinaryOperator 0x556d391352d8 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x556d39135260 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x556d390e73a0
| |   | `-ImplicitCastExpr 0x556d39135248 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x556d39135220 <col:2> 'struct k_thread *' lvalue ParmVar 0x556d39134fd0 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x556d391352c0 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x556d39135298 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x556d39135058 'pool' 'struct k_mem_pool *'
| `-FullComment 0x556d391f4ca0 <line:817:3, line:830:1>
|   |-ParagraphComment 0x556d391f47f0 <line:817:3>
|   | `-TextComment 0x556d391f47c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f4810 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x556d391f4870 <col:10, col:51>
|   |   `-TextComment 0x556d391f4840 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x556d391f4910 <line:819:3, line:821:51>
|   | |-TextComment 0x556d391f4890 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x556d391f48b0 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x556d391f48d0 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x556d391f4980 <line:823:3, line:824:17>
|   | |-TextComment 0x556d391f4930 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x556d391f4950 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x556d391f49d0 <line:826:3>
|   | `-TextComment 0x556d391f49a0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f49f0 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d391f4ad0 <line:826:17, line:828:3>
|   |   |-TextComment 0x556d391f4a50 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x556d391f4a70 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x556d391f4a90 <line:828:3> Text=" "
|   |-ParamCommandComment 0x556d391f4af0 <col:4, line:829:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x556d391f4ba0 <line:828:15, line:829:3>
|   |   |-TextComment 0x556d391f4b50 <line:828:15, col:48> Text=" Memory pool to use for resources."
|   |   `-TextComment 0x556d391f4b70 <line:829:3> Text=" "
|   |-VerbatimLineComment 0x556d391f4bc0 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x556d391f4c30 <line:830:1>
|     `-TextComment 0x556d391f4c00 <col:1> Text=" "
|-FunctionDecl 0x556d39135450 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x556d39135350 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x556d391f5180 <line:855:3, line:863:1>
|   |-ParagraphComment 0x556d391f4d40 <line:855:3>
|   | `-TextComment 0x556d391f4d10 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f4d60 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d391f4dc0 <col:10, col:42>
|   |   `-TextComment 0x556d391f4d90 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x556d391f4e90 <line:857:3, col:78>
|   | |-TextComment 0x556d391f4de0 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x556d391f4e30 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x556d391f4e50 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x556d391f4ee0 <line:859:3>
|   | `-TextComment 0x556d391f4eb0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f4f00 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x556d391f4f90 <col:13, col:45>
|   |   `-TextComment 0x556d391f4f60 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x556d391f4fe0 <line:861:3>
|   | `-TextComment 0x556d391f4fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f5000 <col:4, line:862:44> Name="return"
|   | `-ParagraphComment 0x556d391f5080 <line:861:11, line:862:44>
|   |   |-TextComment 0x556d391f5030 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|   |   `-TextComment 0x556d391f5050 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x556d391f50a0 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x556d391f5110 <line:863:1>
|     `-TextComment 0x556d391f50e0 <col:1> Text=" "
|-FunctionDecl 0x556d391355c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x556d39135538 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x556d391f5680 <line:867:3, line:879:1>
|   |-ParagraphComment 0x556d391f5220 <line:867:3>
|   | `-TextComment 0x556d391f51f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f5240 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x556d391f52a0 <col:10, col:70>
|   |   `-TextComment 0x556d391f5270 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x556d391f5390 <line:869:3, line:873:71>
|   | |-TextComment 0x556d391f52c0 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x556d391f52e0 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x556d391f5300 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x556d391f5320 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x556d391f5340 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x556d391f53e0 <line:875:3>
|   | `-TextComment 0x556d391f53b0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f5400 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x556d391f5490 <col:13, col:45>
|   |   `-TextComment 0x556d391f5460 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x556d391f54e0 <line:877:3>
|   | `-TextComment 0x556d391f54b0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f5500 <col:4, line:878:44> Name="return"
|   | `-ParagraphComment 0x556d391f5580 <line:877:11, line:878:44>
|   |   |-TextComment 0x556d391f5530 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|   |   `-TextComment 0x556d391f5550 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x556d391f55a0 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x556d391f5610 <line:879:1>
|     `-TextComment 0x556d391f55e0 <col:1> Text=" "
|-FunctionDecl 0x556d39135770 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x556d391356a8 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x556d391f59c0 <line:883:3, line:888:14>
|   |-ParagraphComment 0x556d391f5720 <line:883:3>
|   | `-TextComment 0x556d391f56f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f5750 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x556d391f57b0 <col:10, col:48>
|   |   `-TextComment 0x556d391f5780 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x556d391f58a0 <line:885:3, line:886:32>
|   | |-TextComment 0x556d391f57d0 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x556d391f57f0 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x556d391f5840 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x556d391f5860 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x556d391f58f0 <line:888:3>
|   | `-TextComment 0x556d391f58c0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391f5910 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391f5970 <col:11, col:14>
|       `-TextComment 0x556d391f5940 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d391358d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x556d391f5d60 <line:893:3, line:901:1>
|   |-ParagraphComment 0x556d391f5a60 <line:893:3>
|   | `-TextComment 0x556d391f5a30 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f5a80 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x556d391f5ae0 <col:10, col:35>
|   |   `-TextComment 0x556d391f5ab0 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x556d391f5b80 <line:895:3, line:897:67>
|   | |-TextComment 0x556d391f5b00 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x556d391f5b20 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x556d391f5b40 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x556d391f5bd0 <line:899:3>
|   | `-TextComment 0x556d391f5ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f5bf0 <col:4, line:900:3> Name="return"
|   | `-ParagraphComment 0x556d391f5c70 <line:899:11, line:900:3>
|   |   |-TextComment 0x556d391f5c20 <line:899:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d391f5c40 <line:900:3> Text=" "
|   |-VerbatimLineComment 0x556d391f5c90 <col:4, col:21> Text=" K-THREAD-015"
|   `-ParagraphComment 0x556d391f5d00 <line:901:1>
|     `-TextComment 0x556d391f5cd0 <col:1> Text=" "
|-FunctionDecl 0x556d39135ac0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d391359b8 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d391f6310 <line:905:3, line:915:1>
|   |-ParagraphComment 0x556d391f5e00 <line:905:3>
|   | `-TextComment 0x556d391f5dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f5e20 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x556d391f5e80 <col:10, col:36>
|   |   `-TextComment 0x556d391f5e50 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x556d391f5f50 <line:907:3, col:61>
|   | |-TextComment 0x556d391f5ea0 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x556d391f5ef0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x556d391f5f10 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x556d391f6020 <line:909:3, col:69>
|   | |-TextComment 0x556d391f5f70 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x556d391f5fc0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x556d391f5fe0 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x556d391f6070 <line:911:3>
|   | `-TextComment 0x556d391f6040 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f6090 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d391f6120 <col:17, col:38>
|   |   `-TextComment 0x556d391f60f0 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x556d391f6170 <line:913:3>
|   | `-TextComment 0x556d391f6140 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f6190 <col:4, line:914:3> Name="return"
|   | `-ParagraphComment 0x556d391f6210 <line:913:11, line:914:3>
|   |   |-TextComment 0x556d391f61c0 <line:913:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d391f61e0 <line:914:3> Text=" "
|   |-VerbatimLineComment 0x556d391f6230 <col:4, col:21> Text=" K-THREAD-014"
|   `-ParagraphComment 0x556d391f62a0 <line:915:1>
|     `-TextComment 0x556d391f6270 <col:1> Text=" "
|-FunctionDecl 0x556d39135cb0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x556d391f6640 <line:919:3, line:924:1>
|   |-ParagraphComment 0x556d391f63b0 <line:919:3>
|   | `-TextComment 0x556d391f6380 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f63d0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x556d391f6430 <col:10, col:46>
|   |   `-TextComment 0x556d391f6400 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x556d391f6480 <line:921:3>
|   | `-TextComment 0x556d391f6450 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f64a0 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x556d391f6500 <col:11, col:32>
|   |   `-TextComment 0x556d391f64d0 <col:11, col:32> Text=" ID of current thread."
|   |-ParagraphComment 0x556d391f6550 <line:923:3>
|   | `-TextComment 0x556d391f6520 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d391f6570 <col:4, col:21> Text=" K-THREAD-013"
|   `-ParagraphComment 0x556d391f65e0 <line:924:1>
|     `-TextComment 0x556d391f65b0 <col:1> Text=" "
|-FunctionDecl 0x556d39135e10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39135d88 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d391f6be0 <line:928:3, line:941:1>
|   |-ParagraphComment 0x556d391f66e0 <line:928:3>
|   | `-TextComment 0x556d391f66b0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f6700 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x556d391f6760 <col:10, col:25>
|   |   `-TextComment 0x556d391f6730 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x556d391f68f0 <line:930:3, line:935:38>
|   | |-TextComment 0x556d391f6780 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x556d391f67d0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x556d391f67f0 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x556d391f6810 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x556d391f6830 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x556d391f6850 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x556d391f6870 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x556d391f6890 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x556d391f6940 <line:937:3>
|   | `-TextComment 0x556d391f6910 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f6960 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d391f69f0 <col:17, col:39>
|   |   `-TextComment 0x556d391f69c0 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x556d391f6a40 <line:939:3>
|   | `-TextComment 0x556d391f6a10 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f6a60 <col:4, line:940:3> Name="return"
|   | `-ParagraphComment 0x556d391f6ae0 <line:939:11, line:940:3>
|   |   |-TextComment 0x556d391f6a90 <line:939:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d391f6ab0 <line:940:3> Text=" "
|   |-VerbatimLineComment 0x556d391f6b00 <col:4, col:21> Text=" K-THREAD-012"
|   `-ParagraphComment 0x556d391f6b70 <line:941:1>
|     `-TextComment 0x556d391f6b40 <col:1> Text=" "
|-FunctionDecl 0x556d39135f80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39135ef8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d391f6fb0 <line:946:3, line:954:1>
|   |-ParagraphComment 0x556d391f6c80 <line:946:3>
|   | `-TextComment 0x556d391f6c50 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f6ca0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x556d391f6d00 <col:10, col:34>
|   |   `-TextComment 0x556d391f6cd0 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x556d391f6da0 <line:948:3, line:950:9>
|   | |-TextComment 0x556d391f6d20 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x556d391f6d40 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x556d391f6d60 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x556d391f6df0 <line:952:3>
|   | `-TextComment 0x556d391f6dc0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f6e10 <col:4, line:953:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d391f6ec0 <line:952:17, line:953:3>
|   |   |-TextComment 0x556d391f6e70 <line:952:17, col:32> Text=" thread to start"
|   |   `-TextComment 0x556d391f6e90 <line:953:3> Text=" "
|   |-VerbatimLineComment 0x556d391f6ee0 <col:4, col:21> Text=" K-THREAD-011"
|   `-ParagraphComment 0x556d391f6f50 <line:954:1>
|     `-TextComment 0x556d391f6f20 <col:1> Text=" "
|-RecordDecl 0x556d39136058 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x556d39136128 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x556d39136180 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x556d391361e0 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x556d39136238 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x556d39136298 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x556d391362f8 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x556d39136358 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x556d391363b8 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x556d39136410 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x556d39136468 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x556d39136550 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x556d391365b0 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x556d391367a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39136698 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d391f74c0 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x556d391f7050 <line:1044:3>
|   | `-TextComment 0x556d391f7020 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f7070 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x556d391f70d0 <col:10, col:34>
|   |   `-TextComment 0x556d391f70a0 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x556d391f7170 <line:1046:3, col:39>
|   | |-TextComment 0x556d391f70f0 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x556d391f7140 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x556d391f71c0 <line:1048:3>
|   | `-TextComment 0x556d391f7190 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f71e0 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d391f7270 <col:17, col:55>
|   |   `-TextComment 0x556d391f7240 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x556d391f72c0 <line:1050:3>
|   | `-TextComment 0x556d391f7290 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f72e0 <col:4, line:1051:3> Name="return"
|   | `-ParagraphComment 0x556d391f73c0 <line:1050:11, line:1051:3>
|   |   |-TextComment 0x556d391f7310 <line:1050:11, col:23> Text=" Priority of "
|   |   |-InlineCommandComment 0x556d391f7360 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|   |   `-TextComment 0x556d391f7380 <line:1051:3> Text=" "
|   |-VerbatimLineComment 0x556d391f73e0 <col:4, col:21> Text=" K-THREAD-009"
|   `-ParagraphComment 0x556d391f7450 <line:1052:1>
|     `-TextComment 0x556d391f7420 <col:1> Text=" "
|-FunctionDecl 0x556d39136a10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x556d39136888 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x556d39136900 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x556d391f7e90 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x556d391f7560 <line:1056:3>
|   | `-TextComment 0x556d391f7530 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f7580 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x556d391f75e0 <col:10, col:34>
|   |   `-TextComment 0x556d391f75b0 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x556d391f7680 <line:1058:3, col:54>
|   | |-TextComment 0x556d391f7600 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x556d391f7650 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x556d391f7780 <line:1060:3, line:1061:10>
|   | |-TextComment 0x556d391f76a0 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x556d391f76f0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x556d391f7710 <col:74, col:76> Text=" is"
|   | `-TextComment 0x556d391f7730 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x556d391f7870 <line:1063:3, line:1064:75>
|   | |-TextComment 0x556d391f77a0 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x556d391f77c0 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x556d391f7810 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x556d391f7830 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x556d391f7910 <line:1066:3, line:1068:41>
|   | |-TextComment 0x556d391f7890 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x556d391f78b0 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x556d391f78d0 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x556d391f79b0 <line:1070:3, line:1072:20>
|   | |-TextComment 0x556d391f7930 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x556d391f7950 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x556d391f7970 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x556d391f7a00 <line:1074:3>
|   | `-TextComment 0x556d391f79d0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f7a20 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d391f7ad0 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x556d391f7a80 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x556d391f7aa0 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x556d391f7af0 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x556d391f7b80 <col:15, col:28>
|   |   `-TextComment 0x556d391f7b50 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x556d391f7bd0 <line:1077:3>
|   | `-TextComment 0x556d391f7ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f7bf0 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x556d391f7c70 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x556d391f7c20 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x556d391f7c40 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x556d391f7cc0 <line:1080:3>
|   | `-TextComment 0x556d391f7c90 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f7ce0 <col:4, line:1081:3> Name="return"
|   | `-ParagraphComment 0x556d391f7d60 <line:1080:11, line:1081:3>
|   |   |-TextComment 0x556d391f7d10 <line:1080:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d391f7d30 <line:1081:3> Text=" "
|   |-VerbatimLineComment 0x556d391f7d80 <col:4, col:21> Text=" K-THREAD-008"
|   `-ParagraphComment 0x556d391f7df0 <line:1082:1>
|     `-TextComment 0x556d391f7dc0 <col:1> Text=" "
|-FunctionDecl 0x556d39137290 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39136af8 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d391f8580 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x556d391f7f30 <line:1196:3>
|   | `-TextComment 0x556d391f7f00 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f7f50 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x556d391f7fb0 <col:10, col:27>
|   |   `-TextComment 0x556d391f7f80 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x556d391f81c0 <line:1198:3, line:1204:48>
|   | |-TextComment 0x556d391f7fd0 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x556d391f8020 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x556d391f8040 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x556d391f8090 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x556d391f80b0 <col:66, col:69> Text=" are"
|   | |-TextComment 0x556d391f80d0 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x556d391f80f0 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x556d391f8110 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x556d391f8130 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x556d391f8150 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x556d391f8290 <line:1206:3, col:64>
|   | |-TextComment 0x556d391f81e0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x556d391f8230 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x556d391f8250 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x556d391f82e0 <line:1208:3>
|   | `-TextComment 0x556d391f82b0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f8300 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d391f8390 <col:17, col:41>
|   |   `-TextComment 0x556d391f8360 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x556d391f83e0 <line:1210:3>
|   | `-TextComment 0x556d391f83b0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f8400 <col:4, line:1211:3> Name="return"
|   | `-ParagraphComment 0x556d391f8480 <line:1210:11, line:1211:3>
|   |   |-TextComment 0x556d391f8430 <line:1210:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d391f8450 <line:1211:3> Text=" "
|   |-VerbatimLineComment 0x556d391f84a0 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x556d391f8510 <line:1212:1>
|     `-TextComment 0x556d391f84e0 <col:1> Text=" "
|-FunctionDecl 0x556d39137400 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39137378 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d391f8b50 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x556d391f8620 <line:1216:3>
|   | `-TextComment 0x556d391f85f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f8640 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x556d391f86a0 <col:10, col:36>
|   |   `-TextComment 0x556d391f8670 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x556d391f8790 <line:1218:3, line:1219:50>
|   | |-TextComment 0x556d391f86c0 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x556d391f8710 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x556d391f8730 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x556d391f8750 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x556d391f8860 <line:1221:3, col:70>
|   | |-TextComment 0x556d391f87b0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x556d391f8800 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x556d391f8820 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x556d391f88b0 <line:1223:3>
|   | `-TextComment 0x556d391f8880 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f88d0 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d391f8960 <col:17, col:40>
|   |   `-TextComment 0x556d391f8930 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x556d391f89b0 <line:1225:3>
|   | `-TextComment 0x556d391f8980 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f89d0 <col:4, line:1226:3> Name="return"
|   | `-ParagraphComment 0x556d391f8a50 <line:1225:11, line:1226:3>
|   |   |-TextComment 0x556d391f8a00 <line:1225:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d391f8a20 <line:1226:3> Text=" "
|   |-VerbatimLineComment 0x556d391f8a70 <col:4, col:21> Text=" K-THREAD-006"
|   `-ParagraphComment 0x556d391f8ae0 <line:1227:1>
|     `-TextComment 0x556d391f8ab0 <col:1> Text=" "
|-FunctionDecl 0x556d39137670 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x556d391374e8 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x556d39137560 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x556d391f94a0 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x556d391f8bf0 <line:1231:3>
|   | `-TextComment 0x556d391f8bc0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f8c10 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d391f8c70 <col:10, col:44>
|   |   `-TextComment 0x556d391f8c40 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x556d391f8ce0 <line:1233:3, line:1234:23>
|   | |-TextComment 0x556d391f8c90 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x556d391f8cb0 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x556d391f8ed0 <line:1236:3, line:1240:74>
|   | |-TextComment 0x556d391f8d00 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x556d391f8d50 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x556d391f8d70 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x556d391f8d90 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x556d391f8db0 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x556d391f8dd0 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x556d391f8e20 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x556d391f8e40 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x556d391f8e60 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x556d391f8f90 <line:1242:3, line:1245:32>
|   | |-TextComment 0x556d391f8ef0 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x556d391f8f10 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x556d391f8f30 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x556d391f8f50 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x556d391f9030 <line:1247:3, line:1249:46>
|   | |-TextComment 0x556d391f8fb0 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x556d391f8fd0 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x556d391f8ff0 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x556d391f9180 <line:1251:3, col:65>
|   | |-TextComment 0x556d391f9050 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x556d391f90a0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x556d391f90c0 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x556d391f9110 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x556d391f9130 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x556d391f91d0 <line:1253:3>
|   | `-TextComment 0x556d391f91a0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391f91f0 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x556d391f92a0 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x556d391f9250 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x556d391f9270 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x556d391f92c0 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x556d391f9350 <col:15, col:71>
|   |   `-TextComment 0x556d391f9320 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x556d391f93a0 <line:1256:3>
|   | `-TextComment 0x556d391f9370 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391f93c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391f9420 <col:11, col:14>
|       `-TextComment 0x556d391f93f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d39137838 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x556d391f98f0 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x556d391f9540 <line:1268:3>
|   | `-TextComment 0x556d391f9510 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f9560 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x556d391f95c0 <col:10, col:58>
|   |   `-TextComment 0x556d391f9590 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x556d391f9630 <line:1270:3, line:1271:36>
|   | |-TextComment 0x556d391f95e0 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x556d391f9600 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x556d391f9680 <line:1273:3>
|   | `-TextComment 0x556d391f9650 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f96a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d391f9700 <col:9, col:31>
|   |   `-TextComment 0x556d391f96d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d391f9770 <line:1275:3>
|   | `-TextComment 0x556d391f9720 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f9790 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x556d391f9810 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x556d391f97c0 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x556d391f97e0 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x556d391f9830 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x556d391f9890 <col:11, col:37>
|       `-TextComment 0x556d391f9860 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x556d391379a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x556d391f9e00 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x556d391f9990 <line:1281:3>
|   | `-TextComment 0x556d391f9960 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f99b0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x556d391f9a10 <col:10, col:63>
|   |   `-TextComment 0x556d391f99e0 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x556d391f9ab0 <line:1283:3, line:1285:52>
|   | |-TextComment 0x556d391f9a30 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x556d391f9a50 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x556d391f9a70 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x556d391f9b50 <line:1287:3, line:1289:45>
|   | |-TextComment 0x556d391f9ad0 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x556d391f9af0 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x556d391f9b10 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x556d391f9ba0 <line:1291:3>
|   | `-TextComment 0x556d391f9b70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f9bc0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d391f9c20 <col:9, col:31>
|   |   `-TextComment 0x556d391f9bf0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d391f9c70 <line:1293:3>
|   | `-TextComment 0x556d391f9c40 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f9c90 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x556d391f9d10 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x556d391f9cc0 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x556d391f9ce0 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x556d391f9d30 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x556d391f9d90 <col:11, col:55>
|       `-TextComment 0x556d391f9d60 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x556d39137af8 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x556d39137d48 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x556d39137c18 <line:1311:2, col:31>
| | | `-VarDecl 0x556d39137ba8 parent 0x556d38f8a928 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x556d39137ca8 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x556d39137c90 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x556d39137c70 <col:9, col:10> 'int' prefix '!'
| |       `-ImplicitCastExpr 0x556d39137c58 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x556d39137c30 <col:10> 'bool' lvalue Var 0x556d39137ba8 'z_sys_post_kernel' 'bool'
| `-FullComment 0x556d391fa230 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x556d391f9ea0 <line:1299:3>
|   | `-TextComment 0x556d391f9e70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391f9ec0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x556d391f9f20 <col:10, col:64>
|   |   `-TextComment 0x556d391f9ef0 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x556d391f9f90 <line:1301:3, line:1302:62>
|   | |-TextComment 0x556d391f9f40 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x556d391f9f60 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x556d391f9fe0 <line:1304:3>
|   | `-TextComment 0x556d391f9fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fa000 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d391fa060 <col:9, col:31>
|   |   `-TextComment 0x556d391fa030 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d391fa0b0 <line:1306:3>
|   | `-TextComment 0x556d391fa080 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fa0d0 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x556d391fa150 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x556d391fa100 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x556d391fa120 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x556d391fa170 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x556d391fa1d0 <col:11, col:67>
|       `-TextComment 0x556d391fa1a0 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x556d39137df8 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x556d391fa700 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x556d391fa2d0 <line:1326:3>
|   | `-TextComment 0x556d391fa2a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fa2f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x556d391fa350 <col:10, col:29>
|   |   `-TextComment 0x556d391fa320 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x556d391fa440 <line:1328:3, line:1332:78>
|   | |-TextComment 0x556d391fa370 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x556d391fa390 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x556d391fa3b0 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x556d391fa3d0 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x556d391fa3f0 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x556d391fa490 <line:1334:3, col:42>
|   | `-TextComment 0x556d391fa460 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x556d391fa4e0 <line:1336:3>
|   | `-TextComment 0x556d391fa4b0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fa500 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x556d391fa5d0 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x556d391fa530 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x556d391fa550 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x556d391fa570 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x556d391fa590 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x556d391fa620 <line:1341:3>
|   | `-TextComment 0x556d391fa5f0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391fa640 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391fa6a0 <col:11, col:14>
|       `-TextComment 0x556d391fa670 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d39137f58 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x556d391fa9e0 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x556d391fa7a0 <line:1346:3>
|   | `-TextComment 0x556d391fa770 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fa7c0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x556d391fa820 <col:10, col:31>
|   |   `-TextComment 0x556d391fa7f0 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x556d391fa8c0 <line:1348:3, line:1350:41>
|   | |-TextComment 0x556d391fa840 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x556d391fa860 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x556d391fa880 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x556d391fa910 <line:1352:3>
|   | `-TextComment 0x556d391fa8e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391fa930 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391fa990 <col:11, col:14>
|       `-TextComment 0x556d391fa960 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d391380c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x556d39138040 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x556d391faf70 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x556d391faa80 <line:1357:3>
|   | `-TextComment 0x556d391faa50 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391faaa0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391fab00 <col:10, col:43>
|   |   `-TextComment 0x556d391faad0 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x556d391faba0 <line:1359:3, col:71>
|   | |-TextComment 0x556d391fab20 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x556d391fab40 <col:64> Text="@"
|   | `-TextComment 0x556d391fab60 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x556d391fac40 <line:1361:3, line:1363:44>
|   | |-TextComment 0x556d391fabc0 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x556d391fabe0 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x556d391fac00 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x556d391fac90 <line:1365:3>
|   | `-TextComment 0x556d391fac60 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391facb0 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x556d391fad40 <col:16, col:38>
|   |   `-TextComment 0x556d391fad10 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x556d391fad90 <line:1367:3>
|   | `-TextComment 0x556d391fad60 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fadb0 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x556d391fae10 <col:11, col:14>
|   |   `-TextComment 0x556d391fade0 <col:11, col:14> Text=" N/A"
|   |-ParagraphComment 0x556d391fae60 <line:1369:3>
|   | `-TextComment 0x556d391fae30 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d391fae80 <col:4, col:21> Text=" K-THREAD-016"
|   `-ParagraphComment 0x556d391faef0 <line:1370:1>
|     `-TextComment 0x556d391faec0 <col:1> Text=" "
|-FunctionDecl 0x556d391382a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x556d391fb2c0 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x556d391fb010 <line:1374:3>
|   | `-TextComment 0x556d391fafe0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fb030 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x556d391fb090 <col:10, col:43>
|   |   `-TextComment 0x556d391fb060 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x556d391fb0e0 <line:1376:3, col:63>
|   | `-TextComment 0x556d391fb0b0 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x556d391fb130 <line:1378:3>
|   | `-TextComment 0x556d391fb100 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fb150 <col:4, line:1379:3> Name="return"
|   | `-ParagraphComment 0x556d391fb1d0 <line:1378:11, line:1379:3>
|   |   |-TextComment 0x556d391fb180 <line:1378:11, col:37> Text=" Current custom data value."
|   |   `-TextComment 0x556d391fb1a0 <line:1379:3> Text=" "
|   |-VerbatimLineComment 0x556d391fb1f0 <col:4, col:21> Text=" K-THREAD-007"
|   `-ParagraphComment 0x556d391fb260 <line:1380:1>
|     `-TextComment 0x556d391fb230 <col:1> Text=" "
|-FunctionDecl 0x556d39138508 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x556d39138378 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x556d391383f0 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x556d391fb8a0 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x556d391fb360 <line:1384:3>
|   | `-TextComment 0x556d391fb330 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fb380 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x556d391fb3e0 <col:10, col:33>
|   |   `-TextComment 0x556d391fb3b0 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x556d391fb450 <line:1386:3, line:1387:25>
|   | |-TextComment 0x556d391fb400 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x556d391fb420 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x556d391fb4a0 <line:1389:3>
|   | `-TextComment 0x556d391fb470 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391fb4c0 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x556d391fb570 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x556d391fb520 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x556d391fb540 <line:1390:3> Text=" "
|   `-ParamCommandComment 0x556d391fb590 <col:4, line:1394:39> [in] implicitly Param="value" ParamIndex=1
|     `-ParagraphComment 0x556d391fb850 <line:1390:16, line:1394:39>
|       |-TextComment 0x556d391fb5f0 <line:1390:16, col:27> Text=" Name string"
|       |-TextComment 0x556d391fb610 <line:1391:3> Text=" "
|       |-InlineCommandComment 0x556d391fb660 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x556d391fb680 <col:11, col:23> Text=" 0 on success"
|       |-TextComment 0x556d391fb6a0 <line:1392:3> Text=" "
|       |-InlineCommandComment 0x556d391fb6c0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x556d391fb6e0 <col:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|       |-TextComment 0x556d391fb700 <line:1393:3> Text=" "
|       |-InlineCommandComment 0x556d391fb720 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x556d391fb740 <col:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|       |-TextComment 0x556d391fb780 <line:1394:3> Text=" "
|       |-InlineCommandComment 0x556d391fb7a0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x556d391fb7c0 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x556d39138708 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x556d391385f8 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d391fbbd0 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x556d391fb940 <line:1399:3>
|   | `-TextComment 0x556d391fb910 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fb960 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x556d391fb9c0 <col:10, col:25>
|   |   `-TextComment 0x556d391fb990 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x556d391fba10 <line:1401:3, col:27>
|   | `-TextComment 0x556d391fb9e0 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x556d391fba60 <line:1403:3>
|   | `-TextComment 0x556d391fba30 <col:3> Text=" "
|   `-ParamCommandComment 0x556d391fba80 <col:4, line:1404:60> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x556d391fbb80 <line:1403:20, line:1404:60>
|       |-TextComment 0x556d391fbae0 <line:1403:20, col:29> Text=" Thread ID"
|       |-TextComment 0x556d391fbb00 <line:1404:3> Text=" "
|       |-InlineCommandComment 0x556d391fbb20 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x556d391fbb40 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x556d39138a08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x556d391387e8 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x556d39138860 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x556d391388d0 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x556d391fc1c0 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x556d391fbc70 <line:1409:3>
|   | `-TextComment 0x556d391fbc40 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fbc90 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x556d391fbcf0 <col:10, col:53>
|   |   `-TextComment 0x556d391fbcc0 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x556d391fbd40 <line:1411:3>
|   | `-TextComment 0x556d391fbd10 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391fbd60 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x556d391fbe10 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x556d391fbdc0 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x556d391fbde0 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x556d391fbe30 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x556d391fbee0 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x556d391fbe90 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x556d391fbeb0 <line:1413:3> Text=" "
|   `-ParamCommandComment 0x556d391fbf00 <col:4, line:1417:20> [in] implicitly Param="size" ParamIndex=2
|     `-ParagraphComment 0x556d391fc170 <line:1413:15, line:1417:20>
|       |-TextComment 0x556d391fbf60 <line:1413:15, col:38> Text=" Destination buffer size"
|       |-TextComment 0x556d391fbf80 <line:1414:3> Text=" "
|       |-InlineCommandComment 0x556d391fbfa0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x556d391fbfc0 <col:11, col:47> Text=" -ENOSPC Destination buffer too small"
|       |-TextComment 0x556d391fbfe0 <line:1415:3> Text=" "
|       |-InlineCommandComment 0x556d391fc000 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x556d391fc020 <col:11, col:38> Text=" -EFAULT Memory access error"
|       |-TextComment 0x556d391fc040 <line:1416:3> Text=" "
|       |-InlineCommandComment 0x556d391fc060 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x556d391fc080 <col:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|       |-TextComment 0x556d391fc0a0 <line:1417:3> Text=" "
|       |-InlineCommandComment 0x556d391fc0c0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x556d391fc0e0 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x556d39138b88 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x556d39138af8 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d391fc4f0 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x556d391fc260 <line:1423:3>
|   | `-TextComment 0x556d391fc230 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fc280 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x556d391fc2e0 <col:10, col:33>
|   |   `-TextComment 0x556d391fc2b0 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x556d391fc330 <line:1425:3, col:45>
|   | `-TextComment 0x556d391fc300 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x556d391fc380 <line:1427:3>
|   | `-TextComment 0x556d391fc350 <col:3> Text=" "
|   `-ParamCommandComment 0x556d391fc3a0 <col:4, line:1428:61> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x556d391fc4a0 <line:1427:20, line:1428:61>
|       |-TextComment 0x556d391fc400 <line:1427:20, col:29> Text=" Thread ID"
|       |-TextComment 0x556d391fc420 <line:1428:3> Text=" "
|       |-InlineCommandComment 0x556d391fc440 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x556d391fc460 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x556d39138e08 prev 0x556d39128050 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x556d391fc640 <line:1514:3, col:24>
| | `-ParagraphComment 0x556d391fc610 <col:3, col:24>
| |   |-TextComment 0x556d391fc560 <col:3> Text=" "
| |   |-InlineCommandComment 0x556d391fc5b0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x556d391fc5d0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x556d39138eb0 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x556d39138f08 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x556d391391a0 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x556d3913b308 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x556d3913b360 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x556d3913b3b8 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x556d3913b418 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x556d3913b608 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x556d39139140 'void (*)(struct k_timer *)'
| | `-ParenType 0x556d391390e0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x556d391390a0 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x556d38f8a980 'void'
| |     `-PointerType 0x556d39138fb0 'struct k_timer *'
| |       `-ElaboratedType 0x556d39138f50 'struct k_timer' sugar
| |         `-RecordType 0x556d391280e0 'struct k_timer'
| |           `-Record 0x556d39138e08 'k_timer'
| `-FullComment 0x556d391fcad0 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x556d391fc6e0 <line:1576:3>
|   | `-TextComment 0x556d391fc6b0 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d391fc700 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x556d391fc770 <line:1577:3>
|   | `-TextComment 0x556d391fc740 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fc790 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x556d391fc7f0 <col:10, col:37>
|   |   `-TextComment 0x556d391fc7c0 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x556d391fc890 <line:1579:3, line:1581:54>
|   | |-TextComment 0x556d391fc810 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x556d391fc830 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x556d391fc850 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x556d391fc8e0 <line:1583:3>
|   | `-TextComment 0x556d391fc8b0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391fc900 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391fc990 <col:16, col:37>
|   |   `-TextComment 0x556d391fc960 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x556d391fc9e0 <line:1585:3>
|   | `-TextComment 0x556d391fc9b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391fca00 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391fca60 <col:11, col:14>
|       `-TextComment 0x556d391fca30 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x556d3913b748 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x556d39139140 'void (*)(struct k_timer *)'
| | `-ParenType 0x556d391390e0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x556d391390a0 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x556d38f8a980 'void'
| |     `-PointerType 0x556d39138fb0 'struct k_timer *'
| |       `-ElaboratedType 0x556d39138f50 'struct k_timer' sugar
| |         `-RecordType 0x556d391280e0 'struct k_timer'
| |           `-Record 0x556d39138e08 'k_timer'
| `-FullComment 0x556d391fcf80 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x556d391fcb70 <line:1590:3>
|   | `-TextComment 0x556d391fcb40 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d391fcb90 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x556d391fcc00 <line:1591:3>
|   | `-TextComment 0x556d391fcbd0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fcc20 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x556d391fcc80 <col:10, col:35>
|   |   `-TextComment 0x556d391fcc50 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x556d391fcd40 <line:1593:3, line:1596:24>
|   | |-TextComment 0x556d391fcca0 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x556d391fccc0 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x556d391fcce0 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x556d391fcd00 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x556d391fcd90 <line:1598:3>
|   | `-TextComment 0x556d391fcd60 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391fcdb0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391fce40 <col:16, col:37>
|   |   `-TextComment 0x556d391fce10 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x556d391fce90 <line:1600:3>
|   | `-TextComment 0x556d391fce60 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391fceb0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391fcf10 <col:11, col:14>
|       `-TextComment 0x556d391fcee0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d3913ba70 <line:1630:1, line:1632:27> line:1630:13 k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x556d3913b820 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x556d3913b8b0 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x556d3913b940 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x556d391fd4d0 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x556d391fd020 <line:1620:3>
|   | `-TextComment 0x556d391fcff0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fd040 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x556d391fd0a0 <col:10, col:29>
|   |   `-TextComment 0x556d391fd070 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x556d391fd0f0 <line:1622:3, col:60>
|   | `-TextComment 0x556d391fd0c0 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x556d391fd140 <line:1624:3>
|   | `-TextComment 0x556d391fd110 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391fd160 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391fd210 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x556d391fd1c0 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x556d391fd1e0 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x556d391fd230 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x556d391fd2e0 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x556d391fd290 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x556d391fd2b0 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x556d391fd300 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x556d391fd390 <col:18, col:77>
|   |   `-TextComment 0x556d391fd360 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x556d391fd3e0 <line:1628:3>
|   | `-TextComment 0x556d391fd3b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391fd400 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391fd460 <col:11, col:14>
|       `-TextComment 0x556d391fd430 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d3913bb78 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x556d3913be80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x556d3913bc70 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x556d3913bce0 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x556d3913bd50 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x556d391fdb00 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x556d391fd570 <line:1637:3>
|   | `-TextComment 0x556d391fd540 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fd590 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x556d391fd5f0 <col:10, col:24>
|   |   `-TextComment 0x556d391fd5c0 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x556d391fd660 <line:1639:3, line:1640:71>
|   | |-TextComment 0x556d391fd610 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x556d391fd630 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x556d391fd700 <line:1642:3, line:1644:44>
|   | |-TextComment 0x556d391fd680 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x556d391fd6a0 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x556d391fd6c0 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x556d391fd750 <line:1646:3>
|   | `-TextComment 0x556d391fd720 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391fd790 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391fd840 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x556d391fd7f0 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x556d391fd810 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x556d391fd860 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x556d391fd910 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x556d391fd8c0 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x556d391fd8e0 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x556d391fd930 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x556d391fd9c0 <col:17, col:51>
|   |   `-TextComment 0x556d391fd990 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x556d391fda10 <line:1650:3>
|   | `-TextComment 0x556d391fd9e0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391fda30 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391fda90 <col:11, col:14>
|       `-TextComment 0x556d391fda60 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d3913c018 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x556d3913bf90 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x556d391fe0b0 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x556d391fdba0 <line:1656:3>
|   | `-TextComment 0x556d391fdb70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fdbc0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x556d391fdc20 <col:10, col:23>
|   |   `-TextComment 0x556d391fdbf0 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x556d391fdc90 <line:1658:3, line:1659:43>
|   | |-TextComment 0x556d391fdc40 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x556d391fdc60 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x556d391fdd00 <line:1661:3, line:1662:23>
|   | |-TextComment 0x556d391fdcb0 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x556d391fdcd0 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x556d391fdd50 <line:1664:3>
|   | `-TextComment 0x556d391fdd20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fdd70 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x556d391fde70 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x556d391fdda0 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x556d391fddc0 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x556d391fde10 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x556d391fde30 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x556d391fdec0 <line:1667:3>
|   | `-TextComment 0x556d391fde90 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391fdee0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391fdf70 <col:16, col:37>
|   |   `-TextComment 0x556d391fdf40 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x556d391fdfc0 <line:1669:3>
|   | `-TextComment 0x556d391fdf90 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391fdfe0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391fe040 <col:11, col:14>
|       `-TextComment 0x556d391fe010 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d3913c210 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x556d3913c110 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x556d391fe4c0 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x556d391fe150 <line:1674:3>
|   | `-TextComment 0x556d391fe120 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fe170 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x556d391fe1d0 <col:10, col:28>
|   |   `-TextComment 0x556d391fe1a0 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x556d391fe240 <line:1676:3, line:1677:49>
|   | |-TextComment 0x556d391fe1f0 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x556d391fe210 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x556d391fe290 <line:1679:3, col:58>
|   | `-TextComment 0x556d391fe260 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x556d391fe2e0 <line:1681:3>
|   | `-TextComment 0x556d391fe2b0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391fe300 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391fe390 <col:16, col:37>
|   |   `-TextComment 0x556d391fe360 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x556d391fe3e0 <line:1683:3>
|   | `-TextComment 0x556d391fe3b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391fe400 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x556d391fe460 <col:11, col:24>
|       `-TextComment 0x556d391fe430 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x556d3913cc08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x556d3913cb80 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x556d391fe9a0 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x556d391fe560 <line:1688:3>
|   | `-TextComment 0x556d391fe530 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fe580 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x556d391fe5e0 <col:10, col:49>
|   |   `-TextComment 0x556d391fe5b0 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x556d391fe6a0 <line:1690:3, line:1693:73>
|   | |-TextComment 0x556d391fe600 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x556d391fe620 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x556d391fe640 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x556d391fe660 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x556d391fe6f0 <line:1695:3, col:58>
|   | `-TextComment 0x556d391fe6c0 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x556d391fe760 <line:1697:3, line:1698:20>
|   | |-TextComment 0x556d391fe710 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x556d391fe730 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x556d391fe7b0 <line:1700:3>
|   | `-TextComment 0x556d391fe780 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391fe7d0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391fe860 <col:16, col:37>
|   |   `-TextComment 0x556d391fe830 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x556d391fe8b0 <line:1702:3>
|   | `-TextComment 0x556d391fe880 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391fe8d0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x556d391fe930 <col:11, col:24>
|       `-TextComment 0x556d391fe900 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x556d3913cde0 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x556d3913ccd8 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x556d3913cf68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x556d3913cee0 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x556d391fed60 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x556d391fea40 <line:1709:3>
|   | `-TextComment 0x556d391fea10 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fea60 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x556d391feac0 <col:10, col:57>
|   |   `-TextComment 0x556d391fea90 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x556d391feb30 <line:1711:3, line:1712:68>
|   | |-TextComment 0x556d391feae0 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x556d391feb00 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x556d391feb80 <line:1714:3>
|   | `-TextComment 0x556d391feb50 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391feba0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391fec30 <col:16, col:37>
|   |   `-TextComment 0x556d391fec00 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x556d391fec80 <line:1716:3>
|   | `-TextComment 0x556d391fec50 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391feca0 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x556d391fed00 <col:11, col:44>
|       `-TextComment 0x556d391fecd0 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x556d3913d0c0 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x556d3913d038 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x556d3913d648 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x556d3913d340 <line:1722:2, col:58>
|   | `-VarDecl 0x556d3913d178 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x556d3913d310 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x556d3913d2f8 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556d3913d1d8 <col:22> 's32_t (struct _timeout *)' Function 0x556d3913cde0 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x556d3913d278 <col:42, col:50> 'struct _timeout *' prefix '&'
|   |       `-MemberExpr 0x556d3913d240 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x556d39138eb0
|   |         `-ImplicitCastExpr 0x556d3913d228 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x556d3913d200 <col:43> 'struct k_timer *' lvalue ParmVar 0x556d3913d038 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x556d3913d600 <line:1723:2, col:61>
|     `-ConditionalOperator 0x556d3913d578 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x556d3913d3e0 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x556d3913d3b8 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x556d3913d3a0 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x556d3913d358 <col:10> 'const s32_t':'const int' lvalue Var 0x556d3913d178 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x556d3913d380 <col:18> 'int' 0
|       |-CStyleCastExpr 0x556d3913d530 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x556d3913d4c0 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x556d3913d4a8 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x556d3913d400 <col:30> 'u64_t (u64_t)' Function 0x556d3910cec0 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x556d3913d508 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x556d3913d4f0 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x556d3913d428 <col:52> 'const s32_t':'const int' lvalue Var 0x556d3913d178 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x556d3913d558 <col:61> 'unsigned int' 0
|-FunctionDecl 0x556d3913d820 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x556d3913d690 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x556d3913d708 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x556d391ff370 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x556d391fee00 <line:1727:3>
|   | `-TextComment 0x556d391fedd0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391fee20 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x556d391fee80 <col:10, col:52>
|   |   `-TextComment 0x556d391fee50 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x556d391feff0 <line:1729:3, line:1730:9>
|   | |-TextComment 0x556d391feea0 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x556d391feef0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x556d391fef10 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x556d391fef60 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x556d391fef80 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x556d391fefa0 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x556d391ff060 <line:1732:3, line:1733:73>
|   | |-TextComment 0x556d391ff010 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x556d391ff030 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x556d391ff0b0 <line:1735:3>
|   | `-TextComment 0x556d391ff080 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ff0d0 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391ff180 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x556d391ff130 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x556d391ff150 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x556d391ff1a0 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x556d391ff230 <col:20, col:58>
|   |   `-TextComment 0x556d391ff200 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x556d391ff280 <line:1738:3>
|   | `-TextComment 0x556d391ff250 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ff2a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d391ff300 <col:11, col:14>
|       `-TextComment 0x556d391ff2d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d3913da28 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x556d3913d920 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x556d3913d998 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x556d3913e018 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x556d3913dfc8 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x556d3913df50 <col:2, col:9> 'void *' lvalue ->user_data 0x556d3913b418
| |   | `-ImplicitCastExpr 0x556d3913db00 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x556d3913dad8 <col:2> 'struct k_timer *' lvalue ParmVar 0x556d3913d920 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x556d3913dfb0 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x556d3913df88 <col:21> 'void *' lvalue ParmVar 0x556d3913d998 'user_data' 'void *'
| `-FullComment 0x556d391ff460 <line:1743:3, col:12>
|   `-ParagraphComment 0x556d391ff430 <col:3, col:12>
|     |-TextComment 0x556d391ff3e0 <col:3> Text=" "
|     `-InlineCommandComment 0x556d391ff400 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d3913e168 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x556d3913e058 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x556d391ff7d0 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x556d391ff500 <line:1752:3>
|   | `-TextComment 0x556d391ff4d0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ff520 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x556d391ff580 <col:10, col:55>
|   |   `-TextComment 0x556d391ff550 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x556d391ff5d0 <line:1754:3>
|   | `-TextComment 0x556d391ff5a0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d391ff5f0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x556d391ff680 <col:16, col:37>
|   |   `-TextComment 0x556d391ff650 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x556d391ff6d0 <line:1756:3>
|   | `-TextComment 0x556d391ff6a0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ff6f0 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x556d391ff750 <col:11, col:25>
|       `-TextComment 0x556d391ff720 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x556d3913e2c8 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x556d3913e238 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x556d3913e4a8 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x556d3913e400 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x556d3913e3e8 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x556d3913e3b0 <col:9, col:16> 'void *' lvalue ->user_data 0x556d3913b418
|         `-ImplicitCastExpr 0x556d3913e398 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x556d3913e370 <col:9> 'struct k_timer *' lvalue ParmVar 0x556d3913e238 'timer' 'struct k_timer *'
|-FunctionDecl 0x556d3913e550 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x556d391ffcb0 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x556d391ff870 <line:1773:3>
|   | `-TextComment 0x556d391ff840 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ff890 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x556d391ff8f0 <col:10, col:28>
|   |   `-TextComment 0x556d391ff8c0 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x556d391ff960 <line:1775:3, line:1776:19>
|   | |-TextComment 0x556d391ff910 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x556d391ff930 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x556d391ff9b0 <line:1778:3>
|   | `-TextComment 0x556d391ff980 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ff9d0 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x556d391ffb80 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x556d391ffa00 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x556d391ffa50 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x556d391ffa70 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x556d391ffa90 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x556d391ffab0 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x556d391ffad0 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x556d391ffb20 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x556d391ffbd0 <line:1785:3>
|   | `-TextComment 0x556d391ffba0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d391ffbf0 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x556d391ffc50 <col:11, col:42>
|       `-TextComment 0x556d391ffc20 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x556d3913e6b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x556d3913e858 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x556d3913e7b0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x556d3913e7c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x556d3913e810 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x556d3913e7f0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     `-IntegerLiteral 0x556d3913e7d0 <col:16> 'int' 0
| |-DeprecatedAttr 0x556d3913e750 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x556d391fff50 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x556d391ffd50 <line:1790:3>
|   | `-TextComment 0x556d391ffd20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d391ffd70 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x556d391ffdd0 <col:10, col:51>
|   |   `-TextComment 0x556d391ffda0 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x556d391ffe70 <line:1792:3, line:1794:11>
|   | |-TextComment 0x556d391ffdf0 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x556d391ffe10 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x556d391ffe30 <line:1794:3, col:11> Text=" kconfig."
|   `-ParagraphComment 0x556d391fff10 <line:1796:3, col:56>
|     |-TextComment 0x556d391ffe90 <col:3> Text=" "
|     |-InlineCommandComment 0x556d391ffeb0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x556d391ffed0 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x556d3913e910 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x556d3913ea58 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x556d3913ea10 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x556d3913ea20 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x556d3913e9b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x556d39200150 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x556d391ffff0 <line:1809:3>
|   | `-TextComment 0x556d391fffc0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39200010 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x556d39200070 <col:10, col:52>
|   |   `-TextComment 0x556d39200040 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x556d39200110 <line:1811:3, line:1813:11>
|     |-TextComment 0x556d39200090 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x556d392000b0 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x556d392000d0 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x556d3913eb08 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x556d3913ece8 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x556d3913eca0 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x556d3913ec78 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d3913ec40 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x556d3913ec28 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x556d3913eba8 <col:16> 's64_t (void)' Function 0x556d3913e550 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x556d392006c0 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x556d392001f0 <line:1824:3>
|   | `-TextComment 0x556d392001c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39200210 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x556d39200270 <col:10, col:45>
|   |   `-TextComment 0x556d39200240 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x556d392002e0 <line:1826:3, line:1827:16>
|   | |-TextComment 0x556d39200290 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x556d392002b0 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x556d392003d0 <line:1829:3, line:1833:38>
|   | |-TextComment 0x556d39200300 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x556d39200320 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x556d39200340 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x556d39200360 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x556d39200380 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x556d39200420 <line:1835:3>
|   | `-TextComment 0x556d392003f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39200440 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x556d39200590 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x556d39200470 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x556d39200490 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x556d392004b0 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x556d392004d0 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x556d392004f0 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x556d39200510 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x556d39200530 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x556d392005e0 <line:1842:3>
|   | `-TextComment 0x556d392005b0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39200600 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x556d39200660 <col:11, col:66>
|       `-TextComment 0x556d39200630 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x556d3913ee70 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x556d3913ed68 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x556d3913f4c8 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x556d3913f178 <line:1862:2, col:21>
| | | |-VarDecl 0x556d3913f090 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x556d3913f100 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x556d3913f220 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x556d3913f190 <col:2> 's64_t':'long long' lvalue Var 0x556d3913f090 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x556d3913f1f8 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x556d3913f1e0 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x556d3913f1b8 <col:11> 's64_t (void)' Function 0x556d3913e550 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x556d3913f350 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x556d3913f248 <col:2> 's64_t':'long long' lvalue Var 0x556d3913f100 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x556d3913f328 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x556d3913f2f8 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x556d3913f270 <col:10> 's64_t':'long long' lvalue Var 0x556d3913f090 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x556d3913f310 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x556d3913f2d8 <col:19, col:20> 's64_t':'long long' lvalue prefix '*'
| | |       `-ImplicitCastExpr 0x556d3913f2c0 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x556d3913f298 <col:20> 's64_t *' lvalue ParmVar 0x556d3913ed68 'reftime' 's64_t *'
| | |-BinaryOperator 0x556d3913f418 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x556d3913f3b8 <col:2, col:3> 's64_t':'long long' lvalue prefix '*'
| | | | `-ImplicitCastExpr 0x556d3913f3a0 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x556d3913f378 <col:3> 's64_t *' lvalue ParmVar 0x556d3913ed68 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x556d3913f400 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x556d3913f3d8 <col:13> 's64_t':'long long' lvalue Var 0x556d3913f090 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x556d3913f480 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x556d3913f468 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x556d3913f440 <col:9> 's64_t':'long long' lvalue Var 0x556d3913f100 'delta' 's64_t':'long long'
| `-FullComment 0x556d39200aa0 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x556d39200760 <line:1850:3>
|   | `-TextComment 0x556d39200730 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39200780 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x556d392007e0 <col:10, col:27>
|   |   `-TextComment 0x556d392007b0 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x556d39200850 <line:1852:3, line:1853:50>
|   | |-TextComment 0x556d39200800 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x556d39200820 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x556d392008a0 <line:1855:3>
|   | `-TextComment 0x556d39200870 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392008c0 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x556d39200970 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x556d39200920 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x556d39200940 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x556d392009c0 <line:1858:3>
|   | `-TextComment 0x556d39200990 <col:3> Text=" "
|   `-BlockCommandComment 0x556d392009e0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x556d39200a40 <col:11, col:24>
|       `-TextComment 0x556d39200a10 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x556d3913f610 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x556d3913f510 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x556d3913f848 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x556d3913f800 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x556d3913f7d8 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x556d3913f780 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x556d3913f768 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d3913f6b8 <col:16> 's64_t (s64_t *)' Function 0x556d3913ee70 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x556d3913f7b0 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d3913f6e0 <col:31> 's64_t *' lvalue ParmVar 0x556d3913f510 'reftime' 's64_t *'
| `-FullComment 0x556d39200f40 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x556d39200b40 <line:1872:3>
|   | `-TextComment 0x556d39200b10 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39200b60 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d39200bc0 <col:10, col:44>
|   |   `-TextComment 0x556d39200b90 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x556d39200c30 <line:1874:3, line:1875:50>
|   | |-TextComment 0x556d39200be0 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x556d39200c00 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x556d39200cf0 <line:1877:3, line:1880:41>
|   | |-TextComment 0x556d39200c50 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x556d39200c70 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x556d39200c90 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x556d39200cb0 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x556d39200d40 <line:1882:3>
|   | `-TextComment 0x556d39200d10 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39200d60 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x556d39200e10 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x556d39200dc0 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x556d39200de0 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x556d39200e60 <line:1885:3>
|   | `-TextComment 0x556d39200e30 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39200e80 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x556d39200ee0 <col:11, col:24>
|       `-TextComment 0x556d39200eb0 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x556d3913f8f0 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x556d3913fa98 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x556d3913fa28 <line:1902:2, col:29>
| |   `-CallExpr 0x556d3913fa00 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x556d3913f9e8 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x556d3913f990 <col:9> 'u32_t (void)' Function 0x556d390ecf88 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x556d392011f0 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x556d39200fe0 <line:1893:3>
|   | `-TextComment 0x556d39200fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39201000 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x556d39201060 <col:10, col:34>
|   |   `-TextComment 0x556d39201030 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x556d392010d0 <line:1895:3, line:1896:9>
|   | |-TextComment 0x556d39201080 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x556d392010a0 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x556d39201120 <line:1898:3>
|   | `-TextComment 0x556d392010f0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39201140 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x556d392011a0 <col:11, col:57>
|       `-TextComment 0x556d39201170 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x556d3913fab0 prev 0x556d39127c30 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x556d39201310 <line:1910:3, col:24>
| | `-ParagraphComment 0x556d392012e0 <col:3, col:24>
| |   |-TextComment 0x556d39201260 <col:3> Text=" "
| |   |-InlineCommandComment 0x556d39201280 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x556d392012a0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x556d3913fb48 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x556d3913fbb0 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x556d3913fbf8 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x556d3913fcb0 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x556d3913fd90 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x556d3913fde8 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x556d3913fd90 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x556d3913fcb0 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x556d39140750 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x556d3913fe88 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x556d3913fef8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x556d39140a40 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x556d39140940 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x556d392016b0 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x556d392013b0 <line:1952:3>
|   | `-TextComment 0x556d39201380 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392013d0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x556d39201430 <col:10, col:29>
|   |   `-TextComment 0x556d39201400 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x556d39201480 <line:1954:3, col:67>
|   | `-TextComment 0x556d39201450 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x556d392014d0 <line:1956:3>
|   | `-TextComment 0x556d392014a0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392014f0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39201580 <col:16, col:37>
|   |   `-TextComment 0x556d39201550 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x556d392015d0 <line:1958:3>
|   | `-TextComment 0x556d392015a0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d392015f0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d39201650 <col:11, col:14>
|       `-TextComment 0x556d39201620 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d39140bc8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x556d39140b40 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x556d39201c60 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x556d39201750 <line:1963:3>
|   | `-TextComment 0x556d39201720 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39201770 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x556d392017e0 <col:10, col:36>
|   |   `-TextComment 0x556d392017b0 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x556d39201950 <line:1965:3, line:1969:35>
|   | |-TextComment 0x556d39201800 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x556d39201850 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x556d39201870 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x556d39201890 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x556d392018b0 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x556d392018d0 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x556d392018f0 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x556d392019a0 <line:1971:3>
|   | `-TextComment 0x556d39201970 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392019c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39201a20 <col:9, col:31>
|   |   `-TextComment 0x556d392019f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39201a70 <line:1973:3>
|   | `-TextComment 0x556d39201a40 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39201a90 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39201b20 <col:16, col:37>
|   |   `-TextComment 0x556d39201af0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x556d39201b70 <line:1975:3>
|   | `-TextComment 0x556d39201b40 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39201b90 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d39201bf0 <col:11, col:14>
|       `-TextComment 0x556d39201bc0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d39140e50 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x556d39140cc0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x556d39140d38 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x556d39202280 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x556d39201d00 <line:1980:3>
|   | `-TextComment 0x556d39201cd0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39201d20 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x556d39201d80 <col:10, col:50>
|   |   `-TextComment 0x556d39201d50 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x556d39201ea0 <line:1982:3, line:1984:24>
|   | |-TextComment 0x556d39201da0 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x556d39201df0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x556d39201e10 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x556d39201e30 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x556d39201e50 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x556d39201ef0 <line:1986:3>
|   | `-TextComment 0x556d39201ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39201f10 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39201f70 <col:9, col:31>
|   |   `-TextComment 0x556d39201f40 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39201fc0 <line:1988:3>
|   | `-TextComment 0x556d39201f90 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39201fe0 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39202090 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x556d39202040 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d39202060 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x556d392020b0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d39202140 <col:15, col:40>
|   |   `-TextComment 0x556d39202110 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x556d39202190 <line:1991:3>
|   | `-TextComment 0x556d39202160 <col:3> Text=" "
|   `-BlockCommandComment 0x556d392021b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d39202210 <col:11, col:14>
|       `-TextComment 0x556d392021e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d391410e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x556d39140f50 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x556d39140fc8 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x556d39202900 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x556d39202320 <line:1996:3>
|   | `-TextComment 0x556d392022f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39202340 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x556d392023a0 <col:10, col:39>
|   |   `-TextComment 0x556d39202370 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x556d392024e0 <line:1998:3, line:2001:50>
|   | |-TextComment 0x556d392023c0 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x556d39202410 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x556d39202430 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x556d39202450 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x556d39202470 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x556d39202490 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x556d39202530 <line:2003:3>
|   | `-TextComment 0x556d39202500 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39202550 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d392025b0 <col:9, col:31>
|   |   `-TextComment 0x556d39202580 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39202600 <line:2005:3>
|   | `-TextComment 0x556d392025d0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39202620 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d392026d0 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x556d39202680 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d392026a0 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x556d392026f0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d39202780 <col:15, col:40>
|   |   `-TextComment 0x556d39202750 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x556d39202890 <line:2008:3, line:2009:78>
|     |-TextComment 0x556d392027a0 <line:2008:3> Text=" "
|     |-InlineCommandComment 0x556d392027c0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d392027e0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x556d39202800 <line:2009:3> Text=" "
|     |-InlineCommandComment 0x556d39202820 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x556d39202840 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x556d391412e8 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x556d391411e0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x556d39141258 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x556d39202f20 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x556d392029a0 <line:2014:3>
|   | `-TextComment 0x556d39202970 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392029c0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x556d39202a20 <col:10, col:40>
|   |   `-TextComment 0x556d392029f0 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x556d39202b40 <line:2016:3, line:2018:24>
|   | |-TextComment 0x556d39202a40 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x556d39202a90 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x556d39202ab0 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x556d39202ad0 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x556d39202af0 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x556d39202b90 <line:2020:3>
|   | `-TextComment 0x556d39202b60 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39202bb0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39202c10 <col:9, col:31>
|   |   `-TextComment 0x556d39202be0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39202c60 <line:2022:3>
|   | `-TextComment 0x556d39202c30 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39202c80 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39202d30 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x556d39202ce0 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d39202d00 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x556d39202d50 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d39202de0 <col:15, col:40>
|   |   `-TextComment 0x556d39202db0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x556d39202e30 <line:2025:3>
|   | `-TextComment 0x556d39202e00 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39202e50 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d39202eb0 <col:11, col:14>
|       `-TextComment 0x556d39202e80 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d391414f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x556d391413f0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x556d39141468 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x556d392035a0 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x556d39202fc0 <line:2030:3>
|   | `-TextComment 0x556d39202f90 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39202fe0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x556d39203040 <col:10, col:40>
|   |   `-TextComment 0x556d39203010 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x556d39203180 <line:2032:3, line:2035:50>
|   | |-TextComment 0x556d39203060 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x556d392030b0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x556d392030d0 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x556d392030f0 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x556d39203110 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x556d39203130 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x556d392031d0 <line:2037:3>
|   | `-TextComment 0x556d392031a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392031f0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39203250 <col:9, col:31>
|   |   `-TextComment 0x556d39203220 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d392032a0 <line:2039:3>
|   | `-TextComment 0x556d39203270 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392032c0 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39203370 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x556d39203320 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d39203340 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x556d39203390 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d39203420 <col:15, col:40>
|   |   `-TextComment 0x556d392033f0 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x556d39203530 <line:2042:3, line:2043:78>
|     |-TextComment 0x556d39203440 <line:2042:3> Text=" "
|     |-InlineCommandComment 0x556d39203460 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d39203480 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x556d392034a0 <line:2043:3> Text=" "
|     |-InlineCommandComment 0x556d392034c0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x556d392034e0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x556d39141830 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x556d39141600 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x556d39141678 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x556d391416f0 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x556d39203cb0 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x556d39203640 <line:2048:3>
|   | `-TextComment 0x556d39203610 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39203660 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x556d392036c0 <col:10, col:40>
|   |   `-TextComment 0x556d39203690 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x556d392037f0 <line:2050:3, line:2052:45>
|   | |-TextComment 0x556d392036e0 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x556d39203730 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x556d39203750 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x556d39203770 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x556d39203790 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x556d39203840 <line:2054:3>
|   | `-TextComment 0x556d39203810 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39203860 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d392038c0 <col:9, col:31>
|   |   `-TextComment 0x556d39203890 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39203910 <line:2056:3>
|   | `-TextComment 0x556d392038e0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39203930 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d392039e0 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x556d39203990 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d392039b0 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x556d39203a00 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x556d39203ab0 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x556d39203a60 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x556d39203a80 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x556d39203ad0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x556d39203b60 <col:15, col:40>
|   |   `-TextComment 0x556d39203b30 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x556d39203bb0 <line:2060:3>
|   | `-TextComment 0x556d39203b80 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39203bd0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d39203c30 <col:11, col:14>
|       `-TextComment 0x556d39203c00 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d39141b68 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x556d39141940 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x556d391419b8 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x556d39141a30 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x556d39204460 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x556d39203d50 <line:2065:3>
|   | `-TextComment 0x556d39203d20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39203d70 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x556d39203dd0 <col:10, col:58>
|   |   `-TextComment 0x556d39203da0 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x556d39203f10 <line:2067:3, line:2070:19>
|   | |-TextComment 0x556d39203df0 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x556d39203e40 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x556d39203e60 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x556d39203e80 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x556d39203ea0 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x556d39203ec0 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x556d39203f60 <line:2072:3>
|   | `-TextComment 0x556d39203f30 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39203f80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39203fe0 <col:9, col:31>
|   |   `-TextComment 0x556d39203fb0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39204030 <line:2074:3>
|   | `-TextComment 0x556d39204000 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39204050 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39204100 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x556d392040b0 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d392040d0 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x556d39204120 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x556d392041d0 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x556d39204180 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x556d392041a0 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x556d392041f0 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x556d39204280 <col:15, col:58>
|   |   `-TextComment 0x556d39204250 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x556d39204390 <line:2078:3, line:2079:43>
|   | |-TextComment 0x556d392042a0 <line:2078:3> Text=" "
|   | |-InlineCommandComment 0x556d392042c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392042e0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x556d39204300 <line:2079:3> Text=" "
|   | |-InlineCommandComment 0x556d39204320 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x556d39204340 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x556d392043e0 <line:2081:1>
|     `-TextComment 0x556d392043b0 <col:1> Text=" "
|-FunctionDecl 0x556d39141df8 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x556d39141c70 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x556d39141ce0 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x556d39204ac0 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x556d39204500 <line:2085:3>
|   | `-TextComment 0x556d392044d0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39204520 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x556d39204580 <col:10, col:55>
|   |   `-TextComment 0x556d39204550 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x556d392046a0 <line:2087:3, line:2089:67>
|   | |-TextComment 0x556d392045a0 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x556d392045f0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x556d39204610 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x556d39204630 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x556d39204650 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x556d392046f0 <line:2091:3>
|   | `-TextComment 0x556d392046c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39204710 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39204770 <col:9, col:31>
|   |   `-TextComment 0x556d39204740 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d392047c0 <line:2093:3>
|   | `-TextComment 0x556d39204790 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392047e0 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39204890 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x556d39204840 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d39204860 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x556d392048b0 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x556d39204940 <col:15, col:45>
|   |   `-TextComment 0x556d39204910 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   `-ParagraphComment 0x556d39204a50 <line:2096:3, line:2097:34>
|     |-TextComment 0x556d39204960 <line:2096:3> Text=" "
|     |-InlineCommandComment 0x556d39204980 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d392049a0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x556d392049c0 <line:2097:3> Text=" "
|     |-InlineCommandComment 0x556d392049e0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x556d39204a00 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x556d39142088 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x556d39141f00 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x556d39141f70 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x556d392051a0 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x556d39204b60 <line:2102:3>
|   | `-TextComment 0x556d39204b30 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39204b80 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x556d39204be0 <col:10, col:38>
|   |   `-TextComment 0x556d39204bb0 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x556d39204cd0 <line:2104:3, line:2105:46>
|   | |-TextComment 0x556d39204c00 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x556d39204c50 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x556d39204c70 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x556d39204c90 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x556d39204d20 <line:2107:3>
|   | `-TextComment 0x556d39204cf0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39204d40 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x556d39204e20 <col:9, col:72>
|   |   |-TextComment 0x556d39204d70 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x556d39204dc0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x556d39204de0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x556d39204e70 <line:2109:3>
|   | `-TextComment 0x556d39204e40 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39204e90 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39204f40 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x556d39204ef0 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d39204f10 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x556d39204f60 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x556d39205040 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x556d39204fc0 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x556d39204fe0 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x556d39205000 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x556d39205090 <line:2114:3>
|   | `-TextComment 0x556d39205060 <col:3> Text=" "
|   `-BlockCommandComment 0x556d392050b0 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x556d39205130 <line:2114:11, line:2115:48>
|       |-TextComment 0x556d392050e0 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x556d39205100 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x556d39142320 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x556d39142190 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x556d39142208 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x556d391425f8 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x556d391425b8 <line:2135:2, col:72>
| |   `-CallExpr 0x556d39142580 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x556d39142568 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d391423d0 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x556d390b8ce0 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x556d39142470 <col:36, col:44> 'sys_sflist_t *' prefix '&'
| |     | `-MemberExpr 0x556d39142438 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x556d3913fb48
| |     |   `-ImplicitCastExpr 0x556d39142420 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x556d391423f8 <col:37> 'struct k_queue *' lvalue ParmVar 0x556d39142190 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x556d391424e0 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x556d391424c8 <col:68> 'void *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d39142490 <col:68> 'void *' lvalue ParmVar 0x556d39142208 'data' 'void *'
| `-FullComment 0x556d392057d0 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x556d39205240 <line:2120:3>
|   | `-TextComment 0x556d39205210 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39205260 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d392052c0 <col:10, col:41>
|   |   `-TextComment 0x556d39205290 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x556d392053e0 <line:2122:3, line:2124:76>
|   | |-TextComment 0x556d392052e0 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x556d39205330 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x556d39205350 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x556d39205370 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x556d39205390 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x556d39205430 <line:2126:3>
|   | `-TextComment 0x556d39205400 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39205450 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x556d392054b0 <col:9, col:30>
|   |   `-TextComment 0x556d39205480 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x556d39205500 <line:2128:3>
|   | `-TextComment 0x556d392054d0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39205520 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d392055d0 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x556d39205580 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d392055a0 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x556d392055f0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d39205680 <col:15, col:40>
|   |   `-TextComment 0x556d39205650 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x556d392056d0 <line:2131:3>
|   | `-TextComment 0x556d392056a0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d392056f0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x556d39205750 <col:11, col:40>
|       `-TextComment 0x556d39205720 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x556d39142770 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x556d39142638 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x556d391426b0 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x556d39142fa8 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x556d39142890 <line:2154:2, col:20>
| | | `-VarDecl 0x556d39142830 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x556d39142d98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x556d391429d8 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x556d391428a8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x556d39142830 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x556d391429a8 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x556d39142990 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x556d391428d0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x556d39142970 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&'
| | | |     `-MemberExpr 0x556d39142938 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x556d3913fb48
| | | |       `-ImplicitCastExpr 0x556d39142920 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x556d391428f8 <col:28> 'struct k_queue *' lvalue ParmVar 0x556d39142638 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x556d39142ad8 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x556d39142aa8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x556d39142a00 <col:43> 'sys_sfnode_t *' lvalue Var 0x556d39142830 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x556d39142ac0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x556d39142a88 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x556d39142a60 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x556d39142a28 <col:23> 'int' 0
| | | |-BinaryOperator 0x556d39142bd8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x556d39142b00 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x556d39142830 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x556d39142b90 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x556d39142b78 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x556d39142b28 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x556d390adf78 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x556d39142bc0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x556d39142b50 <col:43> 'sys_sfnode_t *' lvalue Var 0x556d39142830 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x556d39142d80 <col:49, line:2160:2>
| | |   `-IfStmt 0x556d39142d48 <line:2157:3, line:2159:3>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x556d39142cb8 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x556d39142ca0 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x556d39142c00 <col:7> 'sys_sfnode_t *' lvalue Var 0x556d39142830 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x556d39142c78 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x556d39142c60 <col:32> 'void *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x556d39142c28 <col:32> 'void *' lvalue ParmVar 0x556d391426b0 'data' 'void *'
| | |     |-CompoundStmt 0x556d39142d30 <col:38, line:2159:3>
| | |     | `-ReturnStmt 0x556d39142d18 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |     |   `-ImplicitCastExpr 0x556d39142d00 <col:16> 'bool' <IntegralToBoolean>
| | |     |     `-IntegerLiteral 0x556d39142ce0 <col:16> 'int' 0
| | |     `-<<<NULL>>>
| | |-CallExpr 0x556d39142ec0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x556d39142ea8 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x556d39142dd0 <col:2> 'void (struct k_queue *, void *)' Function 0x556d39140e50 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x556d39142ef8 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x556d39142df8 <col:17> 'struct k_queue *' lvalue ParmVar 0x556d39142638 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x556d39142f10 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x556d39142e20 <col:24> 'void *' lvalue ParmVar 0x556d391426b0 'data' 'void *'
| | `-ReturnStmt 0x556d39142f60 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x556d39142f48 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x556d39142f28 <col:16> 'int' 1
| `-FullComment 0x556d39205df0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x556d39205870 <line:2139:3>
|   | `-TextComment 0x556d39205840 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39205890 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x556d392058f0 <col:10, col:72>
|   |   `-TextComment 0x556d392058c0 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x556d39205a10 <line:2141:3, line:2143:78>
|   | |-TextComment 0x556d39205910 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x556d39205960 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x556d39205980 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x556d392059a0 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x556d392059c0 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x556d39205a60 <line:2145:3>
|   | `-TextComment 0x556d39205a30 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39205a80 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x556d39205ae0 <col:9, col:30>
|   |   `-TextComment 0x556d39205ab0 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x556d39205b30 <line:2147:3>
|   | `-TextComment 0x556d39205b00 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39205b50 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39205c00 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x556d39205bb0 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x556d39205bd0 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x556d39205c20 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d39205cb0 <col:15, col:40>
|   |   `-TextComment 0x556d39205c80 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x556d39205d00 <line:2150:3>
|   | `-TextComment 0x556d39205cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39205d20 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x556d39205d80 <col:11, col:52>
|       `-TextComment 0x556d39205d50 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x556d39143108 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x556d39143000 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x556d39206330 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x556d39205e90 <line:2167:3>
|   | `-TextComment 0x556d39205e60 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39205eb0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x556d39205f10 <col:10, col:56>
|   |   `-TextComment 0x556d39205ee0 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x556d39205f80 <line:2169:3, line:2170:59>
|   | |-TextComment 0x556d39205f30 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x556d39205f50 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x556d39205fd0 <line:2172:3>
|   | `-TextComment 0x556d39205fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39205ff0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39206050 <col:9, col:31>
|   |   `-TextComment 0x556d39206020 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d392060a0 <line:2174:3>
|   | `-TextComment 0x556d39206070 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392060c0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39206150 <col:16, col:37>
|   |   `-TextComment 0x556d39206120 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x556d392061a0 <line:2176:3>
|   | `-TextComment 0x556d39206170 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392061c0 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x556d39206240 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x556d392061f0 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x556d39206210 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x556d39206260 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x556d392062c0 <col:11, col:34>
|       `-TextComment 0x556d39206290 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x556d39143268 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x556d391431d8 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x556d39143498 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x556d39143458 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x556d39143430 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x556d391433e8 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x556d391433d0 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x556d39143310 <col:14> 'bool (sys_sflist_t *)' Function 0x556d390ad700 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x556d391433b0 <col:34, col:42> 'sys_sflist_t *' prefix '&'
|           `-MemberExpr 0x556d39143378 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x556d3913fb48
|             `-ImplicitCastExpr 0x556d39143360 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x556d39143338 <col:35> 'struct k_queue *' lvalue ParmVar 0x556d391431d8 'queue' 'struct k_queue *'
|-FunctionDecl 0x556d391435e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x556d391434d8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x556d392066d0 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x556d392063d0 <line:2187:3>
|   | `-TextComment 0x556d392063a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392063f0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d39206450 <col:10, col:44>
|   |   `-TextComment 0x556d39206420 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x556d392064a0 <line:2189:3, col:61>
|   | `-TextComment 0x556d39206470 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x556d392064f0 <line:2191:3>
|   | `-TextComment 0x556d392064c0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39206510 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d392065a0 <col:16, col:37>
|   |   `-TextComment 0x556d39206570 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x556d392065f0 <line:2193:3>
|   | `-TextComment 0x556d392065c0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d39206610 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x556d39206670 <col:11, col:51>
|       `-TextComment 0x556d39206640 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x556d391440c0 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x556d391436b8 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x556d391443c8 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x556d39144380 <line:2199:2, col:70>
|     `-CallExpr 0x556d39144330 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x556d39144318 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39144168 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x556d39140750 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x556d39144268 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x556d39144250 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x556d39144190 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac5a0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x556d39144230 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x556d391441f8 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x556d3913fb48
|       |     `-ImplicitCastExpr 0x556d391441e0 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x556d391441b8 <col:49> 'struct k_queue *' lvalue ParmVar 0x556d391436b8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x556d39144368 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x556d39144298 <col:16> 'int' 0
|-FunctionDecl 0x556d39144498 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x556d39144408 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x556d39206a70 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x556d39206770 <line:2203:3>
|   | `-TextComment 0x556d39206740 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39206790 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d392067f0 <col:10, col:44>
|   |   `-TextComment 0x556d392067c0 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x556d39206840 <line:2205:3, col:61>
|   | `-TextComment 0x556d39206810 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x556d39206890 <line:2207:3>
|   | `-TextComment 0x556d39206860 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392068b0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x556d39206940 <col:16, col:37>
|   |   `-TextComment 0x556d39206910 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x556d39206990 <line:2209:3>
|   | `-TextComment 0x556d39206960 <col:3> Text=" "
|   `-BlockCommandComment 0x556d392069b0 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x556d39206a10 <col:11, col:51>
|       `-TextComment 0x556d392069e0 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x556d391445f8 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x556d39144568 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x556d391448c8 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x556d39144858 <line:2215:2, col:70>
|     `-CallExpr 0x556d39144808 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x556d391447f0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d391446a0 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x556d39140750 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x556d391447a0 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x556d39144788 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x556d391446c8 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x556d390ac7c8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x556d39144768 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x556d39144730 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x556d3913fb48
|       |     `-ImplicitCastExpr 0x556d39144718 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x556d391446f0 <col:49> 'struct k_queue *' lvalue ParmVar 0x556d39144568 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x556d39144840 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x556d391447d0 <col:16> 'int' 0
|-RecordDecl 0x556d391448e0 prev 0x556d39127ce0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x556d39144988 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x556d39144d78 prev 0x556d39127d90 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x556d39206b90 <line:2523:4, col:7>
| | `-ParagraphComment 0x556d39206b60 <col:4, col:7>
| |   |-TextComment 0x556d39206ae0 <col:4> Text=" "
| |   |-TextComment 0x556d39206b00 <col:5> Text="@"
| |   `-TextComment 0x556d39206b20 <col:6, col:7> Text="} "
| `-FieldDecl 0x556d39144e20 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x556d39145058 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x556d390c3cd0 'uintptr_t' sugar
|   |-Typedef 0x556d38fd8458 'uintptr_t'
|   `-BuiltinType 0x556d38f8aae0 'unsigned long'
|-RecordDecl 0x556d39041dd0 prev 0x556d39127e40 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x556d39041e68 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x556d39041ed0 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x556d39041fa8 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x556d39042000 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x556d39042058 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x556d390420b0 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x556d39042450 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x556d39042240 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x556d390422b0 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x556d39042320 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x556d392071a0 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x556d39206c30 <line:2675:3>
|   | `-TextComment 0x556d39206c00 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39206c50 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x556d39206cb0 <col:10, col:29>
|   |   `-TextComment 0x556d39206c80 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x556d39206d00 <line:2677:3, col:67>
|   | `-TextComment 0x556d39206cd0 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x556d39206d50 <line:2679:3>
|   | `-TextComment 0x556d39206d20 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39206d70 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x556d39206e20 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x556d39206dd0 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x556d39206df0 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x556d39206e40 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x556d39206ef0 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x556d39206ea0 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x556d39206ec0 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x556d39206f10 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x556d39206fa0 <col:22, col:67>
|   |   `-TextComment 0x556d39206f70 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x556d39206ff0 <line:2683:3>
|   | `-TextComment 0x556d39206fc0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39207010 <col:4, line:2684:3> Name="return"
|   | `-ParagraphComment 0x556d39207090 <line:2683:11, line:2684:3>
|   |   |-TextComment 0x556d39207040 <line:2683:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39207060 <line:2684:3> Text=" "
|   |-VerbatimLineComment 0x556d392070b0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x556d39207120 <line:2685:1>
|     `-TextComment 0x556d392070f0 <col:1> Text=" "
|-FunctionDecl 0x556d390426e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x556d39042560 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x556d390425d0 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x556d39207740 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x556d39207240 <line:2691:3>
|   | `-TextComment 0x556d39207210 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39207260 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x556d392072c0 <col:10, col:29>
|   |   `-TextComment 0x556d39207290 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x556d39207380 <line:2693:3, line:2696:72>
|   | |-TextComment 0x556d392072e0 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x556d39207300 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x556d39207320 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x556d39207340 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x556d392073d0 <line:2698:3>
|   | `-TextComment 0x556d392073a0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392073f0 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x556d392074a0 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x556d39207450 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x556d39207470 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x556d392074c0 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x556d39207550 <col:22, col:67>
|   |   `-TextComment 0x556d39207520 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x556d392075a0 <line:2701:3>
|   | `-TextComment 0x556d39207570 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392075c0 <col:4, line:2702:3> Name="return"
|   | `-ParagraphComment 0x556d39207640 <line:2701:11, line:2702:3>
|   |   |-TextComment 0x556d392075f0 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x556d39207610 <line:2702:3> Text=" "
|   |-VerbatimLineComment 0x556d39207660 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x556d392076d0 <line:2703:1>
|     `-TextComment 0x556d392076a0 <col:1> Text=" "
|-FunctionDecl 0x556d390428e8 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x556d390427e0 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x556d39207c10 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x556d392077f0 <line:2709:3>
|   | `-TextComment 0x556d392077b0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39207810 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d39207870 <col:10, col:44>
|   |   `-TextComment 0x556d39207840 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x556d39207910 <line:2711:3, line:2713:46>
|   | |-TextComment 0x556d39207890 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x556d392078b0 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x556d392078d0 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x556d39207960 <line:2715:3>
|   | `-TextComment 0x556d39207930 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39207980 <col:4, line:2718:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x556d39207b20 <line:2715:16, line:2718:3>
|   |   |-TextComment 0x556d392079e0 <line:2715:16, col:37> Text=" Address of the stack."
|   |   |-TextComment 0x556d39207a00 <line:2716:3> Text=" "
|   |   |-InlineCommandComment 0x556d39207a20 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x556d39207a40 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x556d39207a60 <line:2717:3> Text=" "
|   |   |-InlineCommandComment 0x556d39207a80 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x556d39207aa0 <col:11, col:46> Text=" -EAGAIN when object is still in use"
|   |   `-TextComment 0x556d39207ac0 <line:2718:3> Text=" "
|   |-VerbatimLineComment 0x556d39207b40 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x556d39207bb0 <line:2719:1>
|     `-TextComment 0x556d39207b80 <col:1> Text=" "
|-FunctionDecl 0x556d39042b68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x556d390429e0 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x556d39042a50 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x556d39208340 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x556d39207cb0 <line:2723:3>
|   | `-TextComment 0x556d39207c80 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39207cd0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x556d39207d30 <col:10, col:39>
|   |   `-TextComment 0x556d39207d00 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x556d39207e50 <line:2725:3, col:55>
|   | |-TextComment 0x556d39207d50 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x556d39207da0 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x556d39207dc0 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x556d39207e10 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x556d39207ea0 <line:2727:3>
|   | `-TextComment 0x556d39207e70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39207ec0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39207f20 <col:9, col:31>
|   |   `-TextComment 0x556d39207ef0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39207f70 <line:2729:3>
|   | `-TextComment 0x556d39207f40 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39207f90 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x556d39208040 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x556d39207ff0 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x556d39208010 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x556d39208060 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d392080f0 <col:15, col:44>
|   |   `-TextComment 0x556d392080c0 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x556d39208230 <line:2732:3, line:2734:3>
|   | |-TextComment 0x556d39208110 <line:2732:3> Text=" "
|   | |-InlineCommandComment 0x556d39208130 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39208150 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x556d39208170 <line:2733:3> Text=" "
|   | |-InlineCommandComment 0x556d39208190 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392081b0 <col:11, col:35> Text=" -ENOMEM if stack is full"
|   | `-TextComment 0x556d392081d0 <line:2734:3> Text=" "
|   |-VerbatimLineComment 0x556d39208250 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x556d392082c0 <line:2735:1>
|     `-TextComment 0x556d39208290 <col:1> Text=" "
|-FunctionDecl 0x556d39043208 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x556d39042c70 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x556d39042ce0 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x556d39042d50 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x556d39208cb0 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x556d392083e0 <line:2739:3>
|   | `-TextComment 0x556d392083b0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39208400 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x556d39208460 <col:10, col:38>
|   |   `-TextComment 0x556d39208430 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x556d392085b0 <line:2741:3, line:2742:47>
|   | |-TextComment 0x556d39208480 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x556d392084d0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x556d392084f0 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x556d39208510 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x556d39208560 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x556d39208600 <line:2744:3>
|   | `-TextComment 0x556d392085d0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39208620 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x556d39208700 <col:9, col:72>
|   |   |-TextComment 0x556d39208650 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x556d392086a0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x556d392086c0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x556d39208750 <line:2746:3>
|   | `-TextComment 0x556d39208720 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39208770 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x556d39208820 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x556d392087d0 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x556d392087f0 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x556d39208840 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d392088f0 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x556d392088a0 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x556d392088c0 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x556d39208910 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x556d392089f0 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x556d39208970 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x556d39208990 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x556d392089b0 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x556d39208ba0 <line:2752:3, line:2755:3>
|   | |-TextComment 0x556d39208a10 <line:2752:3> Text=" "
|   | |-InlineCommandComment 0x556d39208a30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39208a50 <col:11, col:39> Text=" 0 Element popped from stack."
|   | |-TextComment 0x556d39208a70 <line:2753:3> Text=" "
|   | |-InlineCommandComment 0x556d39208a90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39208ab0 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x556d39208ad0 <line:2754:3> Text=" "
|   | |-InlineCommandComment 0x556d39208af0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39208b10 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x556d39208b30 <line:2755:3> Text=" "
|   |-VerbatimLineComment 0x556d39208bc0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x556d39208c30 <line:2756:1>
|     `-TextComment 0x556d39208c00 <col:1> Text=" "
|-RecordDecl 0x556d39043318 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x556d39208dd0 <line:2778:4, col:7>
|   `-ParagraphComment 0x556d39208da0 <col:4, col:7>
|     |-TextComment 0x556d39208d20 <col:4> Text=" "
|     |-TextComment 0x556d39208d40 <col:5> Text="@"
|     `-TextComment 0x556d39208d60 <col:6, col:7> Text="} "
|-RecordDecl 0x556d390433c0 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x556d39043740 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x556d390436d0 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x556d39043670 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x556d39043630 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x556d38f8aa20 'int'
|       |-PointerType 0x556d390434d0 'struct k_poll_event *'
|       | `-ElaboratedType 0x556d39043470 'struct k_poll_event' sugar
|       |   `-RecordType 0x556d39128190 'struct k_poll_event'
|       |     `-Record 0x556d391719f8 'k_poll_event'
|       `-TypedefType 0x556d39020460 'u32_t' sugar
|         |-Typedef 0x556d38ffc720 'u32_t'
|         `-BuiltinType 0x556d38f8aac0 'unsigned int'
|-RecordDecl 0x556d39043798 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x556d39043850 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x556d390438c0 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x556d39043940 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x556d39043c40 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x556d39043be0 'void (*)(struct k_work *)'
| | `-ParenType 0x556d39043b80 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x556d39043b40 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x556d38f8a980 'void'
| |     `-PointerType 0x556d39043a50 'struct k_work *'
| |       `-ElaboratedType 0x556d390439f0 'struct k_work' sugar
| |         `-RecordType 0x556d390433a0 'struct k_work'
| |           `-Record 0x556d39043f48 'k_work'
| `-FullComment 0x556d392092f0 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x556d39208e70 <line:2797:3>
|   | `-TextComment 0x556d39208e40 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d39208e90 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x556d39208f00 <line:2798:3>
|   | `-TextComment 0x556d39208ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39208f20 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d39208f80 <col:10, col:42>
|   |   `-TextComment 0x556d39208f50 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x556d39208ff0 <line:2800:3, line:2801:52>
|   | |-TextComment 0x556d39208fa0 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x556d39208fc0 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x556d39209040 <line:2803:3>
|   | `-TextComment 0x556d39209010 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39209060 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d392090f0 <col:15, col:40>
|   |   `-TextComment 0x556d392090c0 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x556d39209140 <line:2805:3>
|   | `-TextComment 0x556d39209110 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39209160 <col:4, line:2806:3> Name="return"
|   | `-ParagraphComment 0x556d392091e0 <line:2805:11, line:2806:3>
|   |   |-TextComment 0x556d39209190 <line:2805:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d392091b0 <line:2806:3> Text=" "
|   |-VerbatimLineComment 0x556d39209200 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x556d39209270 <line:2807:1>
|     `-TextComment 0x556d39209240 <col:1> Text=" "
|-RecordDecl 0x556d39043cc8 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x556d39209410 <line:2811:3, col:24>
| | `-ParagraphComment 0x556d392093e0 <col:3, col:24>
| |   |-TextComment 0x556d39209360 <col:3> Text=" "
| |   |-InlineCommandComment 0x556d39209380 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x556d392093a0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x556d39043d90 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x556d39043df8 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x556d39043e40 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x556d39043f00 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x556d39043f48 prev 0x556d39043318 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x556d39043fe8 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x556d39044060 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x556d390444e8 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x556d39044530 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x556d39044600 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x556d39044668 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x556d39044760 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x556d39044800 prev 0x556d390433c0 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x556d390448a8 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x556d39044940 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x556d390449b0 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x556d39044a10 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x556d39044a68 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x556d39044ad0 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x556d39044b30 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x556d39044b98 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x556d39044e30 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x556d39044cb0 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x556d39044d20 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x556d390452d8 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x556d39045280 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x556d39044f20 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*'
| |   | `-ImplicitCastExpr 0x556d39044f08 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x556d39044ee0 <col:3> 'struct k_work *' lvalue ParmVar 0x556d39044cb0 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x556d39045268 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x556d39045240 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x556d39045188 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x556d39044fc0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x556d39044f98 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x556d39044f60 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x556d390451e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x556d39045020 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x556d39044d20 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x556d390451f8 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x556d39045088 <col:13> 'int' 0
| `-FullComment 0x556d39209970 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x556d392094b0 <line:2876:3>
|   | `-TextComment 0x556d39209480 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392094d0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x556d39209530 <col:10, col:33>
|   |   `-TextComment 0x556d39209500 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x556d39209580 <line:2878:3, col:74>
|   | `-TextComment 0x556d39209550 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x556d392095d0 <line:2880:3>
|   | `-TextComment 0x556d392095a0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392095f0 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d392096a0 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x556d39209650 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x556d39209670 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x556d392096c0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x556d39209750 <col:18, col:70>
|   |   `-TextComment 0x556d39209720 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x556d392097a0 <line:2883:3>
|   | `-TextComment 0x556d39209770 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392097f0 <col:4, line:2884:3> Name="return"
|   | `-ParagraphComment 0x556d39209870 <line:2883:11, line:2884:3>
|   |   |-TextComment 0x556d39209820 <line:2883:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39209840 <line:2884:3> Text=" "
|   |-VerbatimLineComment 0x556d39209890 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x556d39209900 <line:2885:1>
|     `-TextComment 0x556d392098d0 <col:1> Text=" "
|-FunctionDecl 0x556d39045c30 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x556d39045318 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x556d390453a0 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x556d39046078 <line:2915:1, line:2919:1>
| | `-IfStmt 0x556d39046010 <line:2916:2, line:2918:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x556d39045e70 <line:2916:6, col:64> 'int' prefix '!'
| |   | `-CallExpr 0x556d39045e20 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x556d39045e08 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x556d39045ce0 <col:7> 'bool (atomic_t *, int)' Function 0x556d39021230 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x556d39045e58 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x556d39045d48 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x556d390444e8
| |   |   |   `-ImplicitCastExpr 0x556d39045d30 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x556d39045d08 <col:31> 'struct k_work *' lvalue ParmVar 0x556d390453a0 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x556d39045d80 <col:44> 'int' EnumConstant 0x556d39043f00 'K_WORK_STATE_PENDING' 'int'
| |   |-CompoundStmt 0x556d39045ff8 <col:67, line:2918:2>
| |   | `-CallExpr 0x556d39045f90 <line:2917:3, col:38> 'void'
| |   |   |-ImplicitCastExpr 0x556d39045f78 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x556d39045e90 <col:3> 'void (struct k_queue *, void *)' Function 0x556d39140e50 'k_queue_append' 'void (struct k_queue *, void *)'
| |   |   |-UnaryOperator 0x556d39045f30 <col:18, col:27> 'struct k_queue *' prefix '&'
| |   |   | `-MemberExpr 0x556d39045ef8 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x556d39043d90
| |   |   |   `-ImplicitCastExpr 0x556d39045ee0 <col:19> 'struct k_work_q *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x556d39045eb8 <col:19> 'struct k_work_q *' lvalue ParmVar 0x556d39045318 'work_q' 'struct k_work_q *'
| |   |   `-ImplicitCastExpr 0x556d39045fe0 <col:34> 'void *' <BitCast>
| |   |     `-ImplicitCastExpr 0x556d39045fc8 <col:34> 'struct k_work *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x556d39045f50 <col:34> 'struct k_work *' lvalue ParmVar 0x556d390453a0 'work' 'struct k_work *'
| |   `-<<<NULL>>>
| `-FullComment 0x556d3920a240 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x556d39209a10 <line:2892:3>
|   | `-TextComment 0x556d392099e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39209a30 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x556d39209a90 <col:10, col:29>
|   |   `-TextComment 0x556d39209a60 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x556d39209ca0 <line:2894:3, line:2899:15>
|   | |-TextComment 0x556d39209ab0 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x556d39209b00 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x556d39209b20 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x556d39209b40 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x556d39209b90 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x556d39209bb0 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x556d39209bd0 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x556d39209bf0 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x556d39209c10 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x556d39209c30 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x556d39209cf0 <line:2901:3>
|   | `-TextComment 0x556d39209cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39209d10 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x556d39209d90 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x556d39209d40 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x556d39209d60 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x556d39209de0 <line:2905:3>
|   | `-TextComment 0x556d39209db0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39209e00 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39209e60 <col:9, col:31>
|   |   `-TextComment 0x556d39209e30 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39209eb0 <line:2907:3>
|   | `-TextComment 0x556d39209e80 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39209ed0 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x556d39209f80 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x556d39209f30 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x556d39209f50 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x556d39209fa0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x556d3920a030 <col:15, col:36>
|   |   `-TextComment 0x556d3920a000 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x556d3920a080 <line:2910:3>
|   | `-TextComment 0x556d3920a050 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920a0a0 <col:4, line:2911:3> Name="return"
|   | `-ParagraphComment 0x556d3920a120 <line:2910:11, line:2911:3>
|   |   |-TextComment 0x556d3920a0d0 <line:2910:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d3920a0f0 <line:2911:3> Text=" "
|   |-VerbatimLineComment 0x556d3920a140 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x556d3920a1b0 <line:2912:1>
|     `-TextComment 0x556d3920a180 <col:1> Text=" "
|-FunctionDecl 0x556d39046258 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x556d390460b8 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x556d39046140 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x556d39046a78 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x556d390463c0 <line:2945:2, col:18>
| | | `-VarDecl 0x556d39046320 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x556d390463a0 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x556d39046380 <col:15> 'int' 16
| | |-IfStmt 0x556d390469c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x556d39046508 <line:2947:6, col:64> 'int' prefix '!'
| | | | `-CallExpr 0x556d390464b8 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x556d390464a0 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x556d390463d8 <col:7> 'bool (atomic_t *, int)' Function 0x556d39021230 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x556d390464f0 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x556d39046440 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x556d390444e8
| | | |   |   `-ImplicitCastExpr 0x556d39046428 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x556d39046400 <col:31> 'struct k_work *' lvalue ParmVar 0x556d39046140 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x556d39046478 <col:44> 'int' EnumConstant 0x556d39043f00 'K_WORK_STATE_PENDING' 'int'
| | | |-CompoundStmt 0x556d390469a0 <col:67, line:2956:2>
| | | | |-BinaryOperator 0x556d39046718 <line:2948:3, col:50> 'int' '='
| | | | | |-DeclRefExpr 0x556d39046528 <col:3> 'int' lvalue Var 0x556d39046320 'ret' 'int'
| | | | | `-CallExpr 0x556d390466b0 <col:9, col:50> 's32_t':'int'
| | | | |   |-ImplicitCastExpr 0x556d39046698 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x556d39046550 <col:9> 's32_t (struct k_queue *, void *)' Function 0x556d391410e0 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | | | |   |-UnaryOperator 0x556d390465f0 <col:30, col:39> 'struct k_queue *' prefix '&'
| | | | |   | `-MemberExpr 0x556d390465b8 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x556d39043d90
| | | | |   |   `-ImplicitCastExpr 0x556d390465a0 <col:31> 'struct k_work_q *' <LValueToRValue>
| | | | |   |     `-DeclRefExpr 0x556d39046578 <col:31> 'struct k_work_q *' lvalue ParmVar 0x556d390460b8 'work_q' 'struct k_work_q *'
| | | | |   `-ImplicitCastExpr 0x556d39046700 <col:46> 'void *' <BitCast>
| | | | |     `-ImplicitCastExpr 0x556d390466e8 <col:46> 'struct k_work *' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x556d39046610 <col:46> 'struct k_work *' lvalue ParmVar 0x556d39046140 'work' 'struct k_work *'
| | | | `-IfStmt 0x556d39046968 <line:2953:3, line:2955:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x556d390467a0 <line:2953:7, col:14> 'int' '!='
| | | |   | |-ImplicitCastExpr 0x556d39046788 <col:7> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x556d39046740 <col:7> 'int' lvalue Var 0x556d39046320 'ret' 'int'
| | | |   | `-IntegerLiteral 0x556d39046768 <col:14> 'int' 0
| | | |   |-CompoundStmt 0x556d39046950 <col:17, line:2955:3>
| | | |   | `-CallExpr 0x556d39046900 <line:2954:4, col:54> 'void'
| | | |   |   |-ImplicitCastExpr 0x556d390468e8 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   |   | `-DeclRefExpr 0x556d390467c8 <col:4> 'void (atomic_t *, int)' Function 0x556d39021d30 'atomic_clear_bit' 'void (atomic_t *, int)'
| | | |   |   |-ImplicitCastExpr 0x556d39046938 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | | |   |   | `-MemberExpr 0x556d39046830 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x556d390444e8
| | | |   |   |   `-ImplicitCastExpr 0x556d39046818 <col:21> 'struct k_work *' <LValueToRValue>
| | | |   |   |     `-DeclRefExpr 0x556d390467f0 <col:21> 'struct k_work *' lvalue ParmVar 0x556d39046140 'work' 'struct k_work *'
| | | |   |   `-DeclRefExpr 0x556d39046868 <col:34> 'int' EnumConstant 0x556d39043f00 'K_WORK_STATE_PENDING' 'int'
| | | |   `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x556d39046a38 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x556d39046a20 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x556d390469f8 <col:9> 'int' lvalue Var 0x556d39046320 'ret' 'int'
| `-FullComment 0x556d3920aa00 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x556d3920a2e0 <line:2922:3>
|   | `-TextComment 0x556d3920a2b0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920a300 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x556d3920a360 <col:10, col:53>
|   |   `-TextComment 0x556d3920a330 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x556d3920a450 <line:2924:3, line:2928:71>
|   | |-TextComment 0x556d3920a380 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x556d3920a3a0 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x556d3920a3c0 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x556d3920a3e0 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x556d3920a400 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x556d3920a4a0 <line:2930:3, col:61>
|   | `-TextComment 0x556d3920a470 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x556d3920a4f0 <line:2932:3>
|   | `-TextComment 0x556d3920a4c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920a510 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d3920a570 <col:9, col:31>
|   |   `-TextComment 0x556d3920a540 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d3920a5c0 <line:2934:3>
|   | `-TextComment 0x556d3920a590 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920a5e0 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x556d3920a690 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x556d3920a640 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x556d3920a660 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x556d3920a6b0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x556d3920a740 <col:15, col:36>
|   |   `-TextComment 0x556d3920a710 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x556d3920a8f0 <line:2937:3, line:2940:3>
|   | |-TextComment 0x556d3920a760 <line:2937:3> Text=" "
|   | |-InlineCommandComment 0x556d3920a780 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920a7a0 <col:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   | |-TextComment 0x556d3920a7c0 <line:2938:3> Text=" "
|   | |-InlineCommandComment 0x556d3920a7e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920a800 <col:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   | |-TextComment 0x556d3920a820 <line:2939:3> Text=" "
|   | |-InlineCommandComment 0x556d3920a840 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920a860 <col:11, col:20> Text=" 0 Success"
|   | `-TextComment 0x556d3920a880 <line:2940:3> Text=" "
|   |-VerbatimLineComment 0x556d3920a910 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x556d3920a980 <line:2941:1>
|     `-TextComment 0x556d3920a950 <col:1> Text=" "
|-FunctionDecl 0x556d39046c10 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x556d39046ac8 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x556d39046e98 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x556d39046e58 <line:2976:2, col:58>
| |   `-CallExpr 0x556d39046df0 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x556d39046dd8 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d39046cb8 <col:9> 'bool (const atomic_t *, int)' Function 0x556d3901f9f0 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x556d39046e40 <col:25, col:31> 'const atomic_t *' <BitCast>
| |     | `-ImplicitCastExpr 0x556d39046e28 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x556d39046d20 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x556d390444e8
| |     |     `-ImplicitCastExpr 0x556d39046d08 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x556d39046ce0 <col:25> 'struct k_work *' lvalue ParmVar 0x556d39046ac8 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x556d39046d58 <col:38> 'int' EnumConstant 0x556d39043f00 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x556d3920afe0 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x556d3920aaa0 <line:2962:3>
|   | `-TextComment 0x556d3920aa70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920aac0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d3920ab20 <col:10, col:42>
|   |   `-TextComment 0x556d3920aaf0 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x556d3920ac10 <line:2964:3, line:2965:9>
|   | |-TextComment 0x556d3920ab40 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x556d3920ab90 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x556d3920abb0 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x556d3920abd0 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x556d3920ac60 <line:2967:3>
|   | `-TextComment 0x556d3920ac30 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920ac80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d3920ace0 <col:9, col:31>
|   |   `-TextComment 0x556d3920acb0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d3920ad30 <line:2969:3>
|   | `-TextComment 0x556d3920ad00 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920ad50 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d3920ade0 <col:15, col:36>
|   |   `-TextComment 0x556d3920adb0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x556d3920ae30 <line:2971:3>
|   | `-TextComment 0x556d3920ae00 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920ae50 <col:4, line:2972:3> Name="return"
|   | `-ParagraphComment 0x556d3920aed0 <line:2971:11, line:2972:3>
|   |   |-TextComment 0x556d3920ae80 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|   |   `-TextComment 0x556d3920aea0 <line:2972:3> Text=" "
|   |-VerbatimLineComment 0x556d3920aef0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x556d3920af60 <line:2973:1>
|     `-TextComment 0x556d3920af30 <col:1> Text=" "
|-FunctionDecl 0x556d39047170 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x556d39046ed8 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x556d39046f48 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x556d39046fb8 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39047030 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x556d3920b800 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x556d3920b080 <line:2980:3>
|   | `-TextComment 0x556d3920b050 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920b0a0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x556d3920b100 <col:10, col:28>
|   |   `-TextComment 0x556d3920b0d0 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x556d3920b1f0 <line:2982:3, line:2983:41>
|   | |-TextComment 0x556d3920b120 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x556d3920b170 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x556d3920b190 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x556d3920b1b0 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x556d3920b240 <line:2985:3>
|   | `-TextComment 0x556d3920b210 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920b260 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x556d3920b310 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x556d3920b2c0 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x556d3920b2e0 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x556d3920b330 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x556d3920b410 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x556d3920b390 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x556d3920b3b0 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x556d3920b3d0 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x556d3920b430 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x556d3920b530 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x556d3920b490 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x556d3920b4b0 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x556d3920b4d0 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x556d3920b4f0 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x556d3920b550 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x556d3920b5e0 <col:15, col:51>
|   |   `-TextComment 0x556d3920b5b0 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x556d3920b630 <line:2993:3>
|   | `-TextComment 0x556d3920b600 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920b650 <col:4, line:2994:3> Name="return"
|   | `-ParagraphComment 0x556d3920b6d0 <line:2993:11, line:2994:3>
|   |   |-TextComment 0x556d3920b680 <line:2993:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d3920b6a0 <line:2994:3> Text=" "
|   |-VerbatimLineComment 0x556d3920b6f0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x556d3920b760 <line:2995:1>
|     `-TextComment 0x556d3920b730 <col:1> Text=" "
|-FunctionDecl 0x556d39047478 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x556d39047280 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x556d390472f0 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x556d39047360 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d390473d8 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x556d3920c000 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x556d3920b8a0 <line:3001:3>
|   | `-TextComment 0x556d3920b870 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920b8c0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x556d3920b920 <col:10, col:40>
|   |   `-TextComment 0x556d3920b8f0 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x556d3920ba10 <line:3003:3, line:3007:21>
|   | |-TextComment 0x556d3920b940 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x556d3920b960 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x556d3920b980 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x556d3920b9a0 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x556d3920b9c0 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x556d3920ba60 <line:3009:3>
|   | `-TextComment 0x556d3920ba30 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920ba80 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x556d3920bb30 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x556d3920bae0 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x556d3920bb00 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x556d3920bb50 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x556d3920bc30 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x556d3920bbb0 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x556d3920bbd0 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x556d3920bbf0 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x556d3920bc50 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x556d3920bd50 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x556d3920bcb0 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x556d3920bcd0 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x556d3920bcf0 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x556d3920bd10 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x556d3920bd70 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x556d3920be00 <col:15, col:51>
|   |   `-TextComment 0x556d3920bdd0 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x556d3920be50 <line:3017:3>
|   | `-TextComment 0x556d3920be20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920be70 <col:4, line:3018:3> Name="return"
|   | `-ParagraphComment 0x556d3920bef0 <line:3017:11, line:3018:3>
|   |   |-TextComment 0x556d3920bea0 <line:3017:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d3920bec0 <line:3018:3> Text=" "
|   |-VerbatimLineComment 0x556d3920bf10 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x556d3920bf80 <line:3019:1>
|     `-TextComment 0x556d3920bf50 <col:1> Text=" "
|-FunctionDecl 0x556d390477a0 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x556d39047620 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x556d39047690 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x556d3920c550 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x556d3920c0a0 <line:3025:3>
|   | `-TextComment 0x556d3920c070 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920c0c0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x556d3920c120 <col:10, col:41>
|   |   `-TextComment 0x556d3920c0f0 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x556d3920c190 <line:3027:3, line:3028:17>
|   | |-TextComment 0x556d3920c140 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x556d3920c160 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x556d3920c1e0 <line:3030:3>
|   | `-TextComment 0x556d3920c1b0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920c200 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d3920c2b0 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x556d3920c260 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x556d3920c280 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x556d3920c2d0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x556d3920c360 <col:18, col:70>
|   |   `-TextComment 0x556d3920c330 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x556d3920c3b0 <line:3033:3>
|   | `-TextComment 0x556d3920c380 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920c3d0 <col:4, line:3034:3> Name="return"
|   | `-ParagraphComment 0x556d3920c450 <line:3033:11, line:3034:3>
|   |   |-TextComment 0x556d3920c400 <line:3033:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d3920c420 <line:3034:3> Text=" "
|   |-VerbatimLineComment 0x556d3920c470 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x556d3920c4e0 <line:3035:1>
|     `-TextComment 0x556d3920c4b0 <col:1> Text=" "
|-FunctionDecl 0x556d39047ad8 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x556d390478a0 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x556d39047928 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x556d39047998 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x556d3920d150 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x556d3920c5f0 <line:3040:3>
|   | `-TextComment 0x556d3920c5c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920c610 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x556d3920c670 <col:10, col:37>
|   |   `-TextComment 0x556d3920c640 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x556d3920c8e0 <line:3042:3, line:3046:37>
|   | |-TextComment 0x556d3920c690 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x556d3920c6e0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x556d3920c700 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x556d3920c720 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x556d3920c770 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x556d3920c790 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x556d3920c7e0 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x556d3920c800 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x556d3920c820 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x556d3920c840 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x556d3920c860 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x556d3920c9f0 <line:3048:3, line:3053:28>
|   | |-TextComment 0x556d3920c900 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x556d3920c920 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x556d3920c940 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x556d3920c960 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x556d3920c980 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x556d3920c9a0 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x556d3920ca40 <line:3055:3>
|   | `-TextComment 0x556d3920ca10 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920ca60 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x556d3920cae0 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x556d3920ca90 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x556d3920cab0 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x556d3920cb30 <line:3059:3>
|   | `-TextComment 0x556d3920cb00 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920cb50 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d3920cbb0 <col:9, col:31>
|   |   `-TextComment 0x556d3920cb80 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d3920cc00 <line:3061:3>
|   | `-TextComment 0x556d3920cbd0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920cc20 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x556d3920ccd0 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x556d3920cc80 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x556d3920cca0 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x556d3920ccf0 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x556d3920cda0 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x556d3920cd50 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x556d3920cd70 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x556d3920cdc0 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x556d3920ce70 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x556d3920ce20 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x556d3920ce40 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x556d3920d020 <line:3066:3, line:3069:3>
|   | |-TextComment 0x556d3920ce90 <line:3066:3> Text=" "
|   | |-InlineCommandComment 0x556d3920ceb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920ced0 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x556d3920cef0 <line:3067:3> Text=" "
|   | |-InlineCommandComment 0x556d3920cf10 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920cf30 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x556d3920cf50 <line:3068:3> Text=" "
|   | |-InlineCommandComment 0x556d3920cf70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920cf90 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x556d3920cfb0 <line:3069:3> Text=" "
|   |-VerbatimLineComment 0x556d3920d040 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x556d3920d0b0 <line:3070:1>
|     `-TextComment 0x556d3920d080 <col:1> Text=" "
|-FunctionDecl 0x556d391598d8 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x556d391597d0 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x556d3920d8c0 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x556d3920d1f0 <line:3076:3>
|   | `-TextComment 0x556d3920d1c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920d210 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x556d3920d270 <col:10, col:37>
|   |   `-TextComment 0x556d3920d240 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x556d3920d360 <line:3078:3, line:3080:12>
|   | |-TextComment 0x556d3920d290 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x556d3920d2e0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x556d3920d300 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x556d3920d320 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x556d3920d3b0 <line:3082:3>
|   | `-TextComment 0x556d3920d380 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920d3d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d3920d430 <col:9, col:31>
|   |   `-TextComment 0x556d3920d400 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d3920d480 <line:3084:3>
|   | `-TextComment 0x556d3920d450 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920d4a0 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x556d3920d550 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x556d3920d4d0 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x556d3920d4f0 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x556d3920d510 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x556d3920d5a0 <line:3088:3>
|   | `-TextComment 0x556d3920d570 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920d5c0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d3920d650 <col:15, col:44>
|   |   `-TextComment 0x556d3920d620 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x556d3920d790 <line:3090:3, line:3092:3>
|   | |-TextComment 0x556d3920d670 <line:3090:3> Text=" "
|   | |-InlineCommandComment 0x556d3920d690 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920d6b0 <col:11, col:42> Text=" 0 Work item countdown canceled."
|   | |-TextComment 0x556d3920d6d0 <line:3091:3> Text=" "
|   | |-InlineCommandComment 0x556d3920d6f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920d710 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | `-TextComment 0x556d3920d730 <line:3092:3> Text=" "
|   |-VerbatimLineComment 0x556d3920d7b0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x556d3920d840 <line:3093:1>
|     `-TextComment 0x556d3920d810 <col:1> Text=" "
|-FunctionDecl 0x556d39159a58 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x556d391599d0 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x556d39159c88 <line:3119:1, line:3121:1>
| | `-CallExpr 0x556d39159c10 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x556d39159bf8 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x556d39159b00 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x556d39045c30 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x556d39159b50 <col:25, col:26> 'struct k_work_q *' prefix '&'
| |   | `-DeclRefExpr 0x556d39159b28 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x556d39044b98 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x556d39159c48 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x556d39159b70 <col:40> 'struct k_work *' lvalue ParmVar 0x556d391599d0 'work' 'struct k_work *'
| `-FullComment 0x556d3920e070 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x556d3920d960 <line:3097:3>
|   | `-TextComment 0x556d3920d930 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920d980 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x556d3920d9e0 <col:10, col:53>
|   |   `-TextComment 0x556d3920d9b0 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x556d3920db70 <line:3099:3, line:3104:15>
|   | |-TextComment 0x556d3920da00 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x556d3920da50 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x556d3920da70 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x556d3920da90 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x556d3920dab0 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x556d3920dad0 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x556d3920daf0 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x556d3920db10 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x556d3920dbc0 <line:3106:3>
|   | `-TextComment 0x556d3920db90 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920dbe0 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x556d3920dc90 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x556d3920dc10 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x556d3920dc30 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x556d3920dc50 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x556d3920dce0 <line:3111:3>
|   | `-TextComment 0x556d3920dcb0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920dd00 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d3920dd60 <col:9, col:31>
|   |   `-TextComment 0x556d3920dd30 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d3920ddb0 <line:3113:3>
|   | `-TextComment 0x556d3920dd80 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920ddd0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d3920de60 <col:15, col:36>
|   |   `-TextComment 0x556d3920de30 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x556d3920deb0 <line:3115:3>
|   | `-TextComment 0x556d3920de80 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920ded0 <col:4, line:3116:3> Name="return"
|   | `-ParagraphComment 0x556d3920df50 <line:3115:11, line:3116:3>
|   |   |-TextComment 0x556d3920df00 <line:3115:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d3920df20 <line:3116:3> Text=" "
|   |-VerbatimLineComment 0x556d3920df70 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x556d3920dfe0 <line:3117:1>
|     `-TextComment 0x556d3920dfb0 <col:1> Text=" "
|-FunctionDecl 0x556d39159e58 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x556d39159cc8 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x556d39159d38 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x556d3915a0f8 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x556d3915a0b0 <line:3159:2, col:66>
| |   `-CallExpr 0x556d3915a040 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x556d3915a028 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d39159f08 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x556d39047ad8 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x556d39159f58 <col:40, col:41> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x556d39159f30 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x556d39044b98 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x556d3915a080 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d39159f78 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x556d39159cc8 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x556d3915a098 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x556d39159fa0 <col:61> 's32_t':'int' lvalue ParmVar 0x556d39159d38 'delay' 's32_t':'int'
| `-FullComment 0x556d3920eb70 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x556d3920e110 <line:3124:3>
|   | `-TextComment 0x556d3920e0e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920e130 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x556d3920e190 <col:10, col:61>
|   |   `-TextComment 0x556d3920e160 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x556d3920e380 <line:3126:3, line:3130:37>
|   | |-TextComment 0x556d3920e1b0 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x556d3920e200 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x556d3920e220 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x556d3920e240 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x556d3920e290 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x556d3920e2b0 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x556d3920e2d0 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x556d3920e2f0 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x556d3920e310 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x556d3920e4c0 <line:3132:3, line:3138:72>
|   | |-TextComment 0x556d3920e3a0 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x556d3920e3c0 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x556d3920e3e0 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x556d3920e400 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x556d3920e420 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x556d3920e440 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x556d3920e460 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x556d3920e510 <line:3140:3>
|   | `-TextComment 0x556d3920e4e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920e530 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x556d3920e5e0 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x556d3920e560 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x556d3920e580 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x556d3920e5a0 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x556d3920e630 <line:3145:3>
|   | `-TextComment 0x556d3920e600 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920e650 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d3920e6b0 <col:9, col:31>
|   |   `-TextComment 0x556d3920e680 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d3920e700 <line:3147:3>
|   | `-TextComment 0x556d3920e6d0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920e720 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d3920e7d0 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x556d3920e780 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x556d3920e7a0 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x556d3920e7f0 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x556d3920e8a0 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x556d3920e850 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x556d3920e870 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x556d3920ea50 <line:3151:3, line:3154:3>
|   | |-TextComment 0x556d3920e8c0 <line:3151:3> Text=" "
|   | |-InlineCommandComment 0x556d3920e8e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920e900 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x556d3920e920 <line:3152:3> Text=" "
|   | |-InlineCommandComment 0x556d3920e940 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920e960 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x556d3920e980 <line:3153:3> Text=" "
|   | |-InlineCommandComment 0x556d3920e9a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3920e9c0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x556d3920e9e0 <line:3154:3> Text=" "
|   |-VerbatimLineComment 0x556d3920ea70 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x556d3920eae0 <line:3155:1>
|     `-TextComment 0x556d3920eab0 <col:1> Text=" "
|-FunctionDecl 0x556d3915a200 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x556d3915a138 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x556d3915a498 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x556d3915a450 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x556d3915a438 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x556d3915a3f0 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x556d3915a3d8 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x556d3915a2a8 <col:9> 'u64_t (u64_t)' Function 0x556d3910cec0 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x556d3915a420 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x556d3915a3a8 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x556d3915a390 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x556d3915a2d0 <col:31> 's32_t (struct _timeout *)' Function 0x556d3913cde0 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x556d3915a370 <col:51, col:58> 'struct _timeout *' prefix '&'
| |             `-MemberExpr 0x556d3915a338 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x556d39044668
| |               `-ImplicitCastExpr 0x556d3915a320 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x556d3915a2f8 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x556d3915a138 'work' 'struct k_delayed_work *'
| `-FullComment 0x556d3920f020 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x556d3920ec10 <line:3163:3>
|   | `-TextComment 0x556d3920ebe0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920ec30 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x556d3920ec90 <col:10, col:66>
|   |   `-TextComment 0x556d3920ec60 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x556d3920ed30 <line:3165:3, line:3167:30>
|   | |-TextComment 0x556d3920ecb0 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x556d3920ecd0 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x556d3920ecf0 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x556d3920ed80 <line:3169:3>
|   | `-TextComment 0x556d3920ed50 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920eda0 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d3920ee30 <col:15, col:37>
|   |   `-TextComment 0x556d3920ee00 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x556d3920ee80 <line:3171:3>
|   | `-TextComment 0x556d3920ee50 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920eea0 <col:4, line:3172:3> Name="return"
|   | `-ParagraphComment 0x556d3920ef20 <line:3171:11, line:3172:3>
|   |   |-TextComment 0x556d3920eed0 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|   |   `-TextComment 0x556d3920eef0 <line:3172:3> Text=" "
|   |-VerbatimLineComment 0x556d3920ef40 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x556d3920efb0 <line:3173:1>
|     `-TextComment 0x556d3920ef80 <col:1> Text=" "
|-FunctionDecl 0x556d3915a6e0 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x556d3915a560 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x556d3915a5d0 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x556d3920f4b0 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x556d3920f0c0 <line:3180:3>
|   | `-TextComment 0x556d3920f090 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920f0e0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x556d3920f140 <col:10, col:43>
|   |   `-TextComment 0x556d3920f110 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x556d3920f1b0 <line:3182:3, line:3183:17>
|   | |-TextComment 0x556d3920f160 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x556d3920f180 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x556d3920f200 <line:3185:3>
|   | `-TextComment 0x556d3920f1d0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920f220 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d3920f2d0 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x556d3920f280 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x556d3920f2a0 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x556d3920f2f0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x556d3920f380 <col:18, col:70>
|   |   `-TextComment 0x556d3920f350 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x556d3920f3d0 <line:3188:3>
|   | `-TextComment 0x556d3920f3a0 <col:3> Text=" "
|   `-BlockCommandComment 0x556d3920f3f0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x556d3920f450 <col:11, col:14>
|       `-TextComment 0x556d3920f420 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x556d3915ab68 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x556d3915a808 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x556d3915a890 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x556d3915a918 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x556d3915a990 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x556d3915aa00 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x556d392101f0 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x556d3920f550 <line:3194:3>
|   | `-TextComment 0x556d3920f520 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920f570 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x556d3920f5d0 <col:10, col:39>
|   |   `-TextComment 0x556d3920f5a0 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x556d3920f880 <line:3196:3, line:3200:50>
|   | |-TextComment 0x556d3920f5f0 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x556d3920f640 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x556d3920f660 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x556d3920f680 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x556d3920f6d0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x556d3920f6f0 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x556d3920f740 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x556d3920f760 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x556d3920f780 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x556d3920f7a0 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x556d3920f7c0 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x556d3920f970 <line:3202:3, line:3206:70>
|   | |-TextComment 0x556d3920f8a0 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x556d3920f8c0 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x556d3920f8e0 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x556d3920f900 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x556d3920f920 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x556d3920f9c0 <line:3208:3>
|   | `-TextComment 0x556d3920f990 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920f9e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d3920fa40 <col:9, col:31>
|   |   `-TextComment 0x556d3920fa10 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d3920fa90 <line:3210:3>
|   | `-TextComment 0x556d3920fa60 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3920fab0 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x556d3920fb60 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x556d3920fae0 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x556d3920fb00 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x556d3920fb20 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x556d3920fbb0 <line:3215:3>
|   | `-TextComment 0x556d3920fb80 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3920fbd0 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x556d3920fc80 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x556d3920fc30 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x556d3920fc50 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x556d3920fca0 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x556d3920fd50 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x556d3920fd00 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x556d3920fd20 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x556d3920fd70 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x556d3920fe20 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x556d3920fdd0 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x556d3920fdf0 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x556d3920fe40 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x556d3920fef0 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x556d3920fea0 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x556d3920fec0 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x556d3920ff10 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x556d3920ffc0 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x556d3920ff70 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x556d3920ff90 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x556d39210150 <line:3223:3, line:3225:69>
|     |-TextComment 0x556d3920ffe0 <line:3223:3> Text=" "
|     |-InlineCommandComment 0x556d39210000 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d39210020 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x556d39210040 <line:3224:3> Text=" "
|     |-InlineCommandComment 0x556d39210060 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d39210080 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x556d392100a0 <line:3225:3> Text=" "
|     |-InlineCommandComment 0x556d392100c0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x556d392100e0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x556d3915af38 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x556d3915ac80 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x556d3915ad08 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x556d3915ad80 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x556d3915adf0 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x556d3915b278 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x556d3915b230 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x556d3915b180 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x556d3915b168 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556d3915aff8 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x556d3915ab68 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x556d3915b048 <col:37, col:38> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x556d3915b020 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x556d39044b98 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x556d3915b1d0 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3915b068 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x556d3915ac80 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x556d3915b1e8 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3915b090 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x556d3915ad08 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x556d3915b200 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x556d3915b0b8 <col:15> 'int' lvalue ParmVar 0x556d3915ad80 'num_events' 'int'
| |     `-ImplicitCastExpr 0x556d3915b218 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x556d3915b0e0 <col:27> 's32_t':'int' lvalue ParmVar 0x556d3915adf0 'timeout' 's32_t':'int'
| `-FullComment 0x556d39210d60 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x556d39210290 <line:3234:3>
|   | `-TextComment 0x556d39210260 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392102b0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x556d39210310 <col:10, col:63>
|   |   `-TextComment 0x556d392102e0 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x556d39210500 <line:3236:3, line:3240:50>
|   | |-TextComment 0x556d39210330 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x556d39210380 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x556d392103a0 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x556d392103c0 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x556d39210410 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x556d39210430 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x556d39210450 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x556d39210470 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x556d39210490 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x556d392105f0 <line:3242:3, line:3246:70>
|   | |-TextComment 0x556d39210520 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x556d39210540 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x556d39210560 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x556d39210580 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x556d392105a0 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x556d39210640 <line:3248:3>
|   | `-TextComment 0x556d39210610 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39210660 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d392106c0 <col:9, col:31>
|   |   `-TextComment 0x556d39210690 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39210710 <line:3250:3>
|   | `-TextComment 0x556d392106e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39210730 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x556d392107b0 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x556d39210760 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x556d39210780 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x556d39210800 <line:3254:3>
|   | `-TextComment 0x556d392107d0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39210820 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d392108d0 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x556d39210880 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x556d392108a0 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x556d392108f0 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x556d392109a0 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x556d39210950 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x556d39210970 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x556d392109c0 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x556d39210a70 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x556d39210a20 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x556d39210a40 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x556d39210a90 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x556d39210b40 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x556d39210af0 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x556d39210b10 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x556d39210cd0 <line:3260:3, line:3262:69>
|     |-TextComment 0x556d39210b60 <line:3260:3> Text=" "
|     |-InlineCommandComment 0x556d39210b80 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d39210ba0 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x556d39210bc0 <line:3261:3> Text=" "
|     |-InlineCommandComment 0x556d39210be0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d39210c00 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x556d39210c20 <line:3262:3> Text=" "
|     |-InlineCommandComment 0x556d39210c40 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x556d39210c60 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x556d3915b3c8 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x556d3915b2b8 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x556d392112b0 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x556d39210e00 <line:3274:3>
|   | `-TextComment 0x556d39210dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39210e20 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x556d39210e80 <col:10, col:39>
|   |   `-TextComment 0x556d39210e50 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x556d39210f70 <line:3276:3, line:3278:14>
|   | |-TextComment 0x556d39210ea0 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x556d39210ef0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x556d39210f10 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x556d39210f30 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x556d39210fc0 <line:3280:3>
|   | `-TextComment 0x556d39210f90 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39210fe0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39211040 <col:9, col:31>
|   |   `-TextComment 0x556d39211010 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39211090 <line:3282:3>
|   | `-TextComment 0x556d39211060 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392110b0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x556d39211140 <col:15, col:44>
|   |   `-TextComment 0x556d39211110 <col:15, col:44> Text=" Address of delayed work item."
|   `-ParagraphComment 0x556d39211250 <line:3284:3, line:3285:74>
|     |-TextComment 0x556d39211160 <line:3284:3> Text=" "
|     |-InlineCommandComment 0x556d39211180 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d392111a0 <col:11, col:32> Text=" 0 Work item canceled."
|     |-TextComment 0x556d392111c0 <line:3285:3> Text=" "
|     |-InlineCommandComment 0x556d392111e0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x556d39211200 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x556d3915b4c8 prev 0x556d391278c8 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x556d39211440 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x556d39211370 <line:3297:3, line:3298:3>
| | | |-TextComment 0x556d39211320 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x556d39211340 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x556d39211390 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x556d39211400 <line:3299:1>
| |   `-TextComment 0x556d392113d0 <col:1> Text=" "
| |-FieldDecl 0x556d3915b588 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x556d39211510 <line:3301:5, col:22>
| |   `-ParagraphComment 0x556d392114e0 <col:5, col:22>
| |     `-TextComment 0x556d392114b0 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x556d3915b620 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x556d392115e0 <line:3303:5, col:17>
| |   `-ParagraphComment 0x556d392115b0 <col:5, col:17>
| |     `-TextComment 0x556d39211580 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x556d3915b6a8 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x556d392116b0 <line:3306:5, col:24>
| |   `-ParagraphComment 0x556d39211680 <col:5, col:24>
| |     `-TextComment 0x556d39211650 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x556d3915b730 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x556d39211780 <line:3309:5, col:30>
|     `-ParagraphComment 0x556d39211750 <col:5, col:30>
|       `-TextComment 0x556d39211720 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x556d3915ba08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x556d3915b900 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x556d39211c40 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x556d39211830 <line:3349:3>
|   | `-TextComment 0x556d392117f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39211850 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x556d392118b0 <col:10, col:29>
|   |   `-TextComment 0x556d39211880 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x556d39211900 <line:3351:3, col:67>
|   | `-TextComment 0x556d392118d0 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x556d39211950 <line:3353:3, col:70>
|   | `-TextComment 0x556d39211920 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x556d392119a0 <line:3355:3>
|   | `-TextComment 0x556d39211970 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392119c0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x556d39211a50 <col:16, col:37>
|   |   `-TextComment 0x556d39211a20 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x556d39211af0 <line:3357:3, col:33>
|   | |-TextComment 0x556d39211a70 <col:3> Text=" "
|   | |-InlineCommandComment 0x556d39211a90 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x556d39211ab0 <col:11, col:33> Text=" 0 Mutex object created"
|   |-ParagraphComment 0x556d39211b40 <line:3359:3>
|   | `-TextComment 0x556d39211b10 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d39211b60 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x556d39211bd0 <line:3360:1>
|     `-TextComment 0x556d39211ba0 <col:1> Text=" "
|-FunctionDecl 0x556d3915bc88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x556d3915bb00 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x556d3915bb70 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x556d392123c0 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x556d39211ce0 <line:3365:3>
|   | `-TextComment 0x556d39211cb0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39211d00 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x556d39211d60 <col:10, col:23>
|   |   `-TextComment 0x556d39211d30 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x556d39211e80 <line:3367:3, line:3369:20>
|   | |-TextComment 0x556d39211d80 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x556d39211dd0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x556d39211df0 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x556d39211e10 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x556d39211e30 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x556d39211ef0 <line:3371:3, line:3372:62>
|   | |-TextComment 0x556d39211ea0 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x556d39211ec0 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x556d39211f40 <line:3374:3>
|   | `-TextComment 0x556d39211f10 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39211f60 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x556d39212010 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x556d39211fc0 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x556d39211fe0 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x556d39212030 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x556d39212110 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x556d39212090 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x556d392120b0 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x556d392120d0 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x556d392122c0 <line:3379:3, line:3382:3>
|   | |-TextComment 0x556d39212130 <line:3379:3> Text=" "
|   | |-InlineCommandComment 0x556d39212150 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39212170 <col:11, col:26> Text=" 0 Mutex locked."
|   | |-TextComment 0x556d39212190 <line:3380:3> Text=" "
|   | |-InlineCommandComment 0x556d392121b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392121d0 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x556d392121f0 <line:3381:3> Text=" "
|   | |-InlineCommandComment 0x556d39212210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39212230 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x556d39212250 <line:3382:3> Text=" "
|   |-VerbatimLineComment 0x556d392122e0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x556d39212350 <line:3383:1>
|     `-TextComment 0x556d39212320 <col:1> Text=" "
|-FunctionDecl 0x556d3915be20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x556d3915bd90 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x556d39212a50 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x556d39212460 <line:3387:3>
|   | `-TextComment 0x556d39212430 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39212480 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x556d392124e0 <col:10, col:25>
|   |   `-TextComment 0x556d392124b0 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x556d392125d0 <line:3389:3, line:3390:18>
|   | |-TextComment 0x556d39212500 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x556d39212550 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x556d39212570 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x556d39212590 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x556d39212670 <line:3392:3, line:3394:10>
|   | |-TextComment 0x556d392125f0 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x556d39212610 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x556d39212630 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x556d392126c0 <line:3396:3>
|   | `-TextComment 0x556d39212690 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392126e0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x556d39212770 <col:16, col:37>
|   |   `-TextComment 0x556d39212740 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x556d39212900 <line:3398:3, line:3400:42>
|   | |-TextComment 0x556d39212790 <line:3398:3> Text=" "
|   | |-InlineCommandComment 0x556d392127b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392127d0 <col:11, col:28> Text=" 0 Mutex unlocked."
|   | |-TextComment 0x556d392127f0 <line:3399:3> Text=" "
|   | |-InlineCommandComment 0x556d39212810 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39212830 <col:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   | |-TextComment 0x556d39212850 <line:3400:3> Text=" "
|   | |-InlineCommandComment 0x556d39212870 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x556d39212890 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   |-ParagraphComment 0x556d39212950 <line:3402:3>
|   | `-TextComment 0x556d39212920 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d39212970 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x556d392129e0 <line:3403:1>
|     `-TextComment 0x556d392129b0 <col:1> Text=" "
|-RecordDecl 0x556d3915bf28 prev 0x556d39127970 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x556d39212b70 <line:3411:3, col:24>
| | `-ParagraphComment 0x556d39212b40 <col:3, col:24>
| |   |-TextComment 0x556d39212ac0 <col:3> Text=" "
| |   |-InlineCommandComment 0x556d39212ae0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x556d39212b00 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x556d3915bfc0 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x556d3915c018 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x556d3915c070 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x556d3915c428 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x556d3915c200 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x556d3915c278 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x556d3915c2f0 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x556d392131f0 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x556d39212c10 <line:3446:3>
|   | `-TextComment 0x556d39212be0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39212c30 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x556d39212c90 <col:10, col:33>
|   |   `-TextComment 0x556d39212c60 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x556d39212ce0 <line:3448:3, col:71>
|   | `-TextComment 0x556d39212cb0 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x556d39212d30 <line:3450:3>
|   | `-TextComment 0x556d39212d00 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39212d50 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x556d39212e00 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x556d39212db0 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x556d39212dd0 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x556d39212e20 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x556d39212ed0 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x556d39212e80 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x556d39212ea0 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x556d39212ef0 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x556d39212f80 <col:16, col:50>
|   |   `-TextComment 0x556d39212f50 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x556d39213090 <line:3454:3, line:3455:33>
|   | |-TextComment 0x556d39212fa0 <line:3454:3> Text=" "
|   | |-InlineCommandComment 0x556d39212fc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39212fe0 <col:11, col:43> Text=" 0 Semaphore created successfully"
|   | |-TextComment 0x556d39213000 <line:3455:3> Text=" "
|   | |-InlineCommandComment 0x556d39213020 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x556d39213040 <col:11, col:33> Text=" -EINVAL Invalid values"
|   |-ParagraphComment 0x556d392130e0 <line:3457:3>
|   | `-TextComment 0x556d392130b0 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d39213100 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x556d39213170 <line:3458:1>
|     `-TextComment 0x556d39213140 <col:1> Text=" "
|-FunctionDecl 0x556d3915c6b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x556d3915c530 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x556d3915c5a0 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x556d39213a00 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x556d39213290 <line:3463:3>
|   | `-TextComment 0x556d39213260 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392132b0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x556d39213310 <col:10, col:27>
|   |   `-TextComment 0x556d392132e0 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x556d392133b0 <line:3465:3, col:24>
|   | |-TextComment 0x556d39213330 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x556d39213380 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x556d39213400 <line:3467:3>
|   | `-TextComment 0x556d392133d0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39213420 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x556d39213500 <col:9, col:72>
|   |   |-TextComment 0x556d39213450 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x556d392134a0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x556d392134c0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x556d39213550 <line:3469:3>
|   | `-TextComment 0x556d39213520 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39213570 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x556d39213620 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x556d392135d0 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x556d392135f0 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x556d39213640 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x556d39213720 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x556d392136a0 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x556d392136c0 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x556d392136e0 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x556d392138f0 <line:3474:3, line:3477:3>
|   | |-TextComment 0x556d39213740 <line:3474:3> Text=" "
|   | |-InlineCommandComment 0x556d39213760 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39213780 <col:11, col:29> Text=" 0 Semaphore taken."
|   | |-TextComment 0x556d392137a0 <line:3475:3> Text=" "
|   | |-InlineCommandComment 0x556d392137c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392137e0 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x556d39213800 <line:3476:3> Text=" "
|   | |-InlineCommandComment 0x556d39213840 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39213860 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x556d39213880 <line:3477:3> Text=" "
|   |-VerbatimLineComment 0x556d39213910 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x556d39213980 <line:3478:1>
|     `-TextComment 0x556d39213950 <col:1> Text=" "
|-FunctionDecl 0x556d3915d910 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x556d3915d810 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x556d39213fe0 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x556d39213aa0 <line:3482:3>
|   | `-TextComment 0x556d39213a70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39213ac0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x556d39213b20 <col:10, col:27>
|   |   `-TextComment 0x556d39213af0 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x556d39213c10 <line:3484:3, line:3485:19>
|   | |-TextComment 0x556d39213b40 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x556d39213b90 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x556d39213bb0 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x556d39213bd0 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x556d39213c60 <line:3487:3>
|   | `-TextComment 0x556d39213c30 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39213c80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39213ce0 <col:9, col:31>
|   |   `-TextComment 0x556d39213cb0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39213d30 <line:3489:3>
|   | `-TextComment 0x556d39213d00 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39213d50 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x556d39213de0 <col:14, col:39>
|   |   `-TextComment 0x556d39213db0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x556d39213e30 <line:3491:3>
|   | `-TextComment 0x556d39213e00 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39213e50 <col:4, line:3492:3> Name="return"
|   | `-ParagraphComment 0x556d39213ed0 <line:3491:11, line:3492:3>
|   |   |-TextComment 0x556d39213e80 <line:3491:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39213ea0 <line:3492:3> Text=" "
|   |-VerbatimLineComment 0x556d39213ef0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x556d39213f60 <line:3493:1>
|     `-TextComment 0x556d39213f30 <col:1> Text=" "
|-FunctionDecl 0x556d3915da98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x556d3915da10 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x556d392144c0 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x556d39214080 <line:3497:3>
|   | `-TextComment 0x556d39214050 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392140a0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d39214100 <col:10, col:44>
|   |   `-TextComment 0x556d392140d0 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x556d392141d0 <line:3499:3, col:49>
|   | |-TextComment 0x556d39214120 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x556d39214170 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x556d39214190 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x556d39214220 <line:3501:3>
|   | `-TextComment 0x556d392141f0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39214240 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x556d392142d0 <col:14, col:39>
|   |   `-TextComment 0x556d392142a0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x556d39214320 <line:3503:3>
|   | `-TextComment 0x556d392142f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39214340 <col:4, line:3504:3> Name="return"
|   | `-ParagraphComment 0x556d392143c0 <line:3503:11, line:3504:3>
|   |   |-TextComment 0x556d39214370 <line:3503:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39214390 <line:3504:3> Text=" "
|   |-VerbatimLineComment 0x556d392143e0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x556d39214450 <line:3505:1>
|     `-TextComment 0x556d39214420 <col:1> Text=" "
|-FunctionDecl 0x556d3915dc18 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x556d3915db90 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x556d3915dda8 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x556d3915dd58 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x556d3915dd00 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x556d3915c018
| |   | `-ImplicitCastExpr 0x556d3915dce8 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x556d3915dcc0 <col:2> 'struct k_sem *' lvalue ParmVar 0x556d3915db90 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x556d3915dd38 <col:15> 'unsigned int' 0
| `-FullComment 0x556d392145b0 <line:3509:3, col:12>
|   `-ParagraphComment 0x556d39214580 <col:3, col:12>
|     |-TextComment 0x556d39214530 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39214550 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d3915def8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x556d3915dde8 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x556d39214a60 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x556d39214650 <line:3517:3>
|   | `-TextComment 0x556d39214620 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39214670 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x556d392146d0 <col:10, col:34>
|   |   `-TextComment 0x556d392146a0 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x556d39214770 <line:3519:3, col:47>
|   | |-TextComment 0x556d392146f0 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x556d39214740 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x556d392147c0 <line:3521:3>
|   | `-TextComment 0x556d39214790 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392147e0 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x556d39214870 <col:14, col:39>
|   |   `-TextComment 0x556d39214840 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x556d392148c0 <line:3523:3>
|   | `-TextComment 0x556d39214890 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392148e0 <col:4, line:3524:3> Name="return"
|   | `-ParagraphComment 0x556d39214960 <line:3523:11, line:3524:3>
|   |   |-TextComment 0x556d39214910 <line:3523:11, col:35> Text=" Current semaphore count."
|   |   `-TextComment 0x556d39214930 <line:3524:3> Text=" "
|   |-VerbatimLineComment 0x556d39214980 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x556d392149f0 <line:3525:1>
|     `-TextComment 0x556d392149c0 <col:1> Text=" "
|-FunctionDecl 0x556d3915e080 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x556d3915dff0 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x556d3915e288 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x556d3915e1b8 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x556d3915e1a0 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x556d3915e168 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x556d3915c018
| |       `-ImplicitCastExpr 0x556d3915e150 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d3915e128 <col:9> 'struct k_sem *' lvalue ParmVar 0x556d3915dff0 'sem' 'struct k_sem *'
| `-FullComment 0x556d39214b50 <line:3529:3, col:12>
|   `-ParagraphComment 0x556d39214b20 <col:3, col:12>
|     |-TextComment 0x556d39214ad0 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39214af0 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x556d3915e2a0 prev 0x556d39127a20 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x556d39214ca0 <line:3563:3, col:33>
| | |-ParagraphComment 0x556d39214bf0 <col:3>
| | | `-TextComment 0x556d39214bc0 <col:3> Text=" "
| | `-BlockCommandComment 0x556d39214c10 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x556d39214c70 <col:10, col:33>
| |     `-TextComment 0x556d39214c40 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x556d3915e368 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x556d39214d70 <line:3566:5, col:30>
| |   `-ParagraphComment 0x556d39214d40 <col:5, col:30>
| |     `-TextComment 0x556d39214d10 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x556d3915e3f8 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x556d39214e40 <line:3568:5, col:10>
| |   `-ParagraphComment 0x556d39214e10 <col:5, col:10>
| |     `-TextComment 0x556d39214de0 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x556d3915e478 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x556d39214f10 <line:3570:5, col:18>
| |   `-ParagraphComment 0x556d39214ee0 <col:5, col:18>
| |     `-TextComment 0x556d39214eb0 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x556d3915e4f8 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x556d39214fe0 <line:3572:5, col:32>
| |   `-ParagraphComment 0x556d39214fb0 <col:5, col:32>
| |     `-TextComment 0x556d39214f80 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x556d3915e580 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x556d392150b0 <line:3574:5, col:29>
| |   `-ParagraphComment 0x556d39215080 <col:5, col:29>
| |     `-TextComment 0x556d39215050 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x556d3915e610 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x556d39215180 <line:3576:5, col:27>
| |   `-ParagraphComment 0x556d39215150 <col:5, col:27>
| |     `-TextComment 0x556d39215120 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x556d3915e6a0 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x556d39215250 <line:3578:5, col:18>
| |   `-ParagraphComment 0x556d39215220 <col:5, col:18>
| |     `-TextComment 0x556d392151f0 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x556d3915e730 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x556d39215320 <line:3580:5, col:19>
| |   `-ParagraphComment 0x556d392152f0 <col:5, col:19>
| |     `-TextComment 0x556d392152c0 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x556d3915e7b8 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x556d392153f0 <line:3582:5, col:29>
| |   `-ParagraphComment 0x556d392153c0 <col:5, col:29>
| |     `-TextComment 0x556d39215390 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x556d3910dc98 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x556d392154c0 <line:3588:5, col:19>
|     `-ParagraphComment 0x556d39215490 <col:5, col:19>
|       `-TextComment 0x556d39215460 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x556d3910dd68 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x556d39215610 <line:3617:3, col:34>
| | |-ParagraphComment 0x556d39215560 <col:3>
| | | `-TextComment 0x556d39215530 <col:3> Text=" "
| | `-BlockCommandComment 0x556d39215580 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x556d392155e0 <col:10, col:34>
| |     `-TextComment 0x556d392155b0 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x556d3910de48 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x556d392156e0 <line:3620:5, col:18>
| |   `-ParagraphComment 0x556d392156b0 <col:5, col:18>
| |     `-TextComment 0x556d39215680 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x556d3910dec8 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x556d392157b0 <line:3622:5, col:32>
| |   `-ParagraphComment 0x556d39215780 <col:5, col:32>
| |     `-TextComment 0x556d39215750 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x556d3910df48 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x556d39215890 <line:3624:5, col:19>
|     `-ParagraphComment 0x556d39215860 <col:5, col:19>
|       `-TextComment 0x556d39215820 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x556d3910e340 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x556d3910e0a0 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x556d3910e118 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x556d3910e188 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3910e1f8 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x556d392161c0 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x556d39215930 <line:3658:3>
|   | `-TextComment 0x556d39215900 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39215950 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x556d392159b0 <col:10, col:37>
|   |   `-TextComment 0x556d39215980 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x556d39215a00 <line:3660:3, col:75>
|   | `-TextComment 0x556d392159d0 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x556d39215c40 <line:3662:3, line:3666:32>
|   | |-TextComment 0x556d39215a20 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x556d39215a70 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x556d39215a90 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x556d39215ab0 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x556d39215b00 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x556d39215b20 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x556d39215b40 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x556d39215b60 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x556d39215bb0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x556d39215bd0 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x556d39215c90 <line:3668:3>
|   | `-TextComment 0x556d39215c60 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39215cb0 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x556d39215d60 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x556d39215d10 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x556d39215d30 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x556d39215d80 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x556d39215e30 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x556d39215de0 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x556d39215e00 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x556d39215e50 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x556d39215f00 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x556d39215eb0 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x556d39215ed0 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x556d39215f20 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x556d39215fb0 <col:19, col:65>
|   |   `-TextComment 0x556d39215f80 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x556d39216000 <line:3673:3>
|   | `-TextComment 0x556d39215fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39216020 <col:4, line:3674:3> Name="return"
|   | `-ParagraphComment 0x556d392160a0 <line:3673:11, line:3674:3>
|   |   |-TextComment 0x556d39216050 <line:3673:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39216070 <line:3674:3> Text=" "
|   |-VerbatimLineComment 0x556d392160c0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x556d39216130 <line:3675:1>
|     `-TextComment 0x556d39216100 <col:1> Text=" "
|-FunctionDecl 0x556d3910e668 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x556d3910e450 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d3910e4c0 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3910e530 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x556d39216910 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x556d39216260 <line:3680:3>
|   | `-TextComment 0x556d39216230 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39216280 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x556d392162e0 <col:10, col:37>
|   |   `-TextComment 0x556d392162b0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x556d39216380 <line:3682:3, line:3684:8>
|   | |-TextComment 0x556d39216300 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x556d39216320 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x556d39216340 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x556d39216420 <line:3686:3, line:3688:25>
|   | |-TextComment 0x556d392163a0 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x556d392163c0 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x556d392163e0 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x556d39216470 <line:3690:3>
|   | `-TextComment 0x556d39216440 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39216490 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x556d39216540 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x556d392164f0 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x556d39216510 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x556d39216560 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x556d39216610 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x556d392165c0 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x556d392165e0 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x556d39216630 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x556d392166c0 <col:19, col:65>
|   |   `-TextComment 0x556d39216690 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x556d39216710 <line:3694:3>
|   | `-TextComment 0x556d392166e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39216730 <col:4, line:3697:3> Name="return"
|   | `-ParagraphComment 0x556d39216800 <line:3694:11, line:3697:3>
|   |   |-TextComment 0x556d39216760 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|   |   |-TextComment 0x556d39216780 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|   |   |-TextComment 0x556d392167a0 <line:3696:3, col:23> Text="	an integer overflow."
|   |   `-TextComment 0x556d392167c0 <line:3697:3> Text=" "
|   |-VerbatimLineComment 0x556d39216820 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x556d39216890 <line:3698:1>
|     `-TextComment 0x556d39216860 <col:1> Text=" "
|-FunctionDecl 0x556d3910e878 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x556d3910e770 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x556d39216ce0 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x556d392169b0 <line:3703:3>
|   | `-TextComment 0x556d39216980 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392169d0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x556d39216a30 <col:10, col:46>
|   |   `-TextComment 0x556d39216a00 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x556d39216a80 <line:3705:3, col:49>
|   | `-TextComment 0x556d39216a50 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x556d39216ad0 <line:3707:3>
|   | `-TextComment 0x556d39216aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39216af0 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x556d39216b80 <col:15, col:39>
|   |   `-TextComment 0x556d39216b50 <col:15, col:39> Text=" message queue to cleanup"
|   `-ParagraphComment 0x556d39216c90 <line:3709:3, line:3710:33>
|     |-TextComment 0x556d39216ba0 <line:3709:3> Text=" "
|     |-InlineCommandComment 0x556d39216bc0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d39216be0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x556d39216c00 <line:3710:3> Text=" "
|     |-InlineCommandComment 0x556d39216c20 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x556d39216c40 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x556d3910eb98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x556d3910e970 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d3910e9e8 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x556d3910ea58 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x556d39217520 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x556d39216d80 <line:3715:3>
|   | `-TextComment 0x556d39216d50 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39216da0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d39216e00 <col:10, col:44>
|   |   `-TextComment 0x556d39216dd0 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x556d39216ea0 <line:3717:3, col:51>
|   | |-TextComment 0x556d39216e20 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x556d39216e70 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x556d39216ef0 <line:3719:3>
|   | `-TextComment 0x556d39216ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39216f10 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39216f70 <col:9, col:31>
|   |   `-TextComment 0x556d39216f40 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39216fc0 <line:3721:3>
|   | `-TextComment 0x556d39216f90 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39216fe0 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x556d39217090 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x556d39217040 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x556d39217060 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x556d392170b0 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d39217160 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x556d39217110 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x556d39217130 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x556d39217180 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x556d39217260 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x556d392171e0 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x556d39217200 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x556d39217220 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x556d39217410 <line:3727:3, line:3730:3>
|   | |-TextComment 0x556d39217280 <line:3727:3> Text=" "
|   | |-InlineCommandComment 0x556d392172a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392172c0 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x556d392172e0 <line:3728:3> Text=" "
|   | |-InlineCommandComment 0x556d39217300 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39217320 <col:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   | |-TextComment 0x556d39217340 <line:3729:3> Text=" "
|   | |-InlineCommandComment 0x556d39217360 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39217380 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x556d392173a0 <line:3730:3> Text=" "
|   |-VerbatimLineComment 0x556d39217430 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x556d392174a0 <line:3731:1>
|     `-TextComment 0x556d39217470 <col:1> Text=" "
|-FunctionDecl 0x556d39162288 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x556d39162100 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39162178 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x556d391621e8 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x556d39217e50 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x556d392175c0 <line:3735:3>
|   | `-TextComment 0x556d39217590 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392175e0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x556d39217640 <col:10, col:49>
|   |   `-TextComment 0x556d39217610 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x556d39217730 <line:3737:3, line:3738:21>
|   | |-TextComment 0x556d39217660 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x556d392176b0 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x556d392176d0 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x556d392176f0 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x556d39217780 <line:3740:3>
|   | `-TextComment 0x556d39217750 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392177a0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x556d392178a0 <col:9, col:72>
|   |   |-TextComment 0x556d392177d0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x556d39217820 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x556d39217860 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x556d392178f0 <line:3742:3>
|   | `-TextComment 0x556d392178c0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39217910 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x556d392179c0 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x556d39217970 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x556d39217990 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x556d392179e0 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d39217a90 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x556d39217a40 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x556d39217a60 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x556d39217ab0 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x556d39217b90 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x556d39217b10 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x556d39217b30 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x556d39217b50 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x556d39217d40 <line:3748:3, line:3751:3>
|   | |-TextComment 0x556d39217bb0 <line:3748:3> Text=" "
|   | |-InlineCommandComment 0x556d39217bd0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39217bf0 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x556d39217c10 <line:3749:3> Text=" "
|   | |-InlineCommandComment 0x556d39217c30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39217c50 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x556d39217c70 <line:3750:3> Text=" "
|   | |-InlineCommandComment 0x556d39217c90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39217cb0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x556d39217cd0 <line:3751:3> Text=" "
|   |-VerbatimLineComment 0x556d39217d60 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x556d39217dd0 <line:3752:1>
|     `-TextComment 0x556d39217da0 <col:1> Text=" "
|-FunctionDecl 0x556d39162528 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x556d39162390 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39162408 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x556d39218550 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x556d39217ef0 <line:3756:3>
|   | `-TextComment 0x556d39217ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39217f10 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x556d39217f70 <col:10, col:51>
|   |   `-TextComment 0x556d39217f40 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x556d39218060 <line:3758:3, line:3759:57>
|   | |-TextComment 0x556d39217f90 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x556d39217fe0 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x556d39218000 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x556d39218020 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x556d392180b0 <line:3761:3>
|   | `-TextComment 0x556d39218080 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392180d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x556d39218130 <col:9, col:31>
|   |   `-TextComment 0x556d39218100 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x556d39218180 <line:3763:3>
|   | `-TextComment 0x556d39218150 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392181a0 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x556d39218250 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x556d39218200 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x556d39218220 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x556d39218270 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d39218300 <col:15, col:71>
|   |   `-TextComment 0x556d392182d0 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x556d39218440 <line:3766:3, line:3768:3>
|   | |-TextComment 0x556d39218320 <line:3766:3> Text=" "
|   | |-InlineCommandComment 0x556d39218340 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39218360 <col:11, col:26> Text=" 0 Message read."
|   | |-TextComment 0x556d39218380 <line:3767:3> Text=" "
|   | |-InlineCommandComment 0x556d392183a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392183c0 <col:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|   | `-TextComment 0x556d392183e0 <line:3768:3> Text=" "
|   |-VerbatimLineComment 0x556d39218460 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x556d392184d0 <line:3769:1>
|     `-TextComment 0x556d392184a0 <col:1> Text=" "
|-FunctionDecl 0x556d39162730 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x556d39162630 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x556d39218a00 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x556d392185f0 <line:3773:3>
|   | `-TextComment 0x556d392185c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39218610 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x556d39218670 <col:10, col:32>
|   |   `-TextComment 0x556d39218640 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x556d39218710 <line:3775:3, line:3777:61>
|   | |-TextComment 0x556d39218690 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x556d392186b0 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x556d392186d0 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x556d39218760 <line:3779:3>
|   | `-TextComment 0x556d39218730 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39218780 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x556d39218810 <col:15, col:44>
|   |   `-TextComment 0x556d392187e0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x556d39218860 <line:3781:3>
|   | `-TextComment 0x556d39218830 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39218880 <col:4, line:3782:3> Name="return"
|   | `-ParagraphComment 0x556d39218900 <line:3781:11, line:3782:3>
|   |   |-TextComment 0x556d392188b0 <line:3781:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d392188d0 <line:3782:3> Text=" "
|   |-VerbatimLineComment 0x556d39218920 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x556d39218990 <line:3783:1>
|     `-TextComment 0x556d39218960 <col:1> Text=" "
|-FunctionDecl 0x556d39162930 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x556d39162830 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x556d39218e80 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x556d39218aa0 <line:3787:3>
|   | `-TextComment 0x556d39218a70 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39218ac0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x556d39218b20 <col:10, col:58>
|   |   `-TextComment 0x556d39218af0 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x556d39218b90 <line:3789:3, line:3790:15>
|   | |-TextComment 0x556d39218b40 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x556d39218b60 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x556d39218be0 <line:3792:3>
|   | `-TextComment 0x556d39218bb0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39218c00 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x556d39218c90 <col:15, col:44>
|   |   `-TextComment 0x556d39218c60 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x556d39218ce0 <line:3794:3>
|   | `-TextComment 0x556d39218cb0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39218d00 <col:4, line:3795:3> Name="return"
|   | `-ParagraphComment 0x556d39218d80 <line:3794:11, line:3795:3>
|   |   |-TextComment 0x556d39218d30 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|   |   `-TextComment 0x556d39218d50 <line:3795:3> Text=" "
|   |-VerbatimLineComment 0x556d39218da0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x556d39218e10 <line:3796:1>
|     `-TextComment 0x556d39218de0 <col:1> Text=" "
|-FunctionDecl 0x556d39162c50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x556d39162a30 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39162b40 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x556d392193b0 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x556d39218f20 <line:3800:3>
|   | `-TextComment 0x556d39218ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39218f40 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x556d39218fa0 <col:10, col:50>
|   |   `-TextComment 0x556d39218f70 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x556d39218ff0 <line:3802:3, col:77>
|   | `-TextComment 0x556d39218fc0 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x556d39219040 <line:3804:3>
|   | `-TextComment 0x556d39219010 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39219060 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x556d39219110 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x556d392190c0 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x556d392190e0 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x556d39219130 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x556d392191c0 <col:16, col:61>
|   |   `-TextComment 0x556d39219190 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x556d39219210 <line:3807:3>
|   | `-TextComment 0x556d392191e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39219230 <col:4, line:3808:3> Name="return"
|   | `-ParagraphComment 0x556d392192b0 <line:3807:11, line:3808:3>
|   |   |-TextComment 0x556d39219260 <line:3807:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39219280 <line:3808:3> Text=" "
|   |-VerbatimLineComment 0x556d392192d0 <col:4, col:19> Text=" K-MSGQ-003"
|   `-ParagraphComment 0x556d39219340 <line:3809:1>
|     `-TextComment 0x556d39219310 <col:1> Text=" "
|-FunctionDecl 0x556d39162db0 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x556d39162d28 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x556d39162fe8 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x556d39162fa0 <line:3816:2, col:32>
|     `-BinaryOperator 0x556d39162f78 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x556d39162f48 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x556d39162e98 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x556d3915e4f8
|       |   `-ImplicitCastExpr 0x556d39162e80 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x556d39162e58 <col:9> 'struct k_msgq *' lvalue ParmVar 0x556d39162d28 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x556d39162f60 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x556d39162f10 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x556d3915e7b8
|           `-ImplicitCastExpr 0x556d39162ef8 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x556d39162ed0 <col:26> 'struct k_msgq *' lvalue ParmVar 0x556d39162d28 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x556d39163530 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x556d39163028 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x556d39219810 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x556d39219450 <line:3820:3>
|   | `-TextComment 0x556d39219420 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39219470 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x556d392194d0 <col:10, col:56>
|   |   `-TextComment 0x556d392194a0 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x556d39219520 <line:3822:3, col:80>
|   | `-TextComment 0x556d392194f0 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x556d39219570 <line:3824:3>
|   | `-TextComment 0x556d39219540 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39219590 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x556d39219620 <col:15, col:44>
|   |   `-TextComment 0x556d392195f0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x556d39219670 <line:3826:3>
|   | `-TextComment 0x556d39219640 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39219690 <col:4, line:3827:3> Name="return"
|   | `-ParagraphComment 0x556d39219710 <line:3826:11, line:3827:3>
|   |   |-TextComment 0x556d392196c0 <line:3826:11, col:30> Text=" Number of messages."
|   |   `-TextComment 0x556d392196e0 <line:3827:3> Text=" "
|   |-VerbatimLineComment 0x556d39219730 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x556d392197a0 <line:3828:1>
|     `-TextComment 0x556d39219770 <col:1> Text=" "
|-FunctionDecl 0x556d39163688 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x556d39163600 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x556d39163838 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x556d391637c0 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x556d391637a8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x556d39163770 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x556d3915e7b8
|         `-ImplicitCastExpr 0x556d39163758 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x556d39163730 <col:9> 'struct k_msgq *' lvalue ParmVar 0x556d39163600 'msgq' 'struct k_msgq *'
|-RecordDecl 0x556d39163850 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x556d39219aa0 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x556d392198e0 <line:3839:3>
| | | `-TextComment 0x556d392198b0 <col:3> Text=" "
| | |-VerbatimLineComment 0x556d39219900 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x556d39219970 <line:3840:3>
| | | `-TextComment 0x556d39219940 <col:3> Text=" "
| | |-VerbatimLineComment 0x556d39219990 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x556d39219a50 <line:3841:3, col:5>
| |   |-TextComment 0x556d392199d0 <col:3> Text=" "
| |   |-TextComment 0x556d392199f0 <col:4> Text="@"
| |   `-TextComment 0x556d39219a10 <col:5> Text="{"
| |-FieldDecl 0x556d39163930 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x556d39163900 <col:15> 'int' 8
| |-FieldDecl 0x556d391639a8 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x556d39163978 <col:16> 'int' 4
| `-FieldDecl 0x556d39163a20 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-IntegerLiteral 0x556d391639f0 <col:16> 'int' 20
|-RecordDecl 0x556d39163a68 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x556d39163b28 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x556d39163bc0 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x556d39163c98 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x556d39219c50 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x556d39219b40 <line:3869:3>
| | | `-TextComment 0x556d39219b10 <col:3> Text=" "
| | |-BlockCommandComment 0x556d39219b60 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x556d39219bc0 <col:10, col:35>
| | |   `-TextComment 0x556d39219b90 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x556d39219c10 <line:3871:1>
| |   `-TextComment 0x556d39219be0 <col:1> Text=" "
| |-FieldDecl 0x556d39163d78 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x556d39219d20 <line:3873:5, col:55>
| |   `-ParagraphComment 0x556d39219cf0 <col:5, col:55>
| |     `-TextComment 0x556d39219cc0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x556d39163df8 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x556d39219df0 <line:3875:5, col:32>
| |   `-ParagraphComment 0x556d39219dc0 <col:5, col:32>
| |     `-TextComment 0x556d39219d90 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x556d39163e78 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x556d39219ec0 <line:3877:5, col:43>
| |   `-ParagraphComment 0x556d39219e90 <col:5, col:43>
| |     `-TextComment 0x556d39219e60 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x556d39163f00 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x556d39219f90 <line:3879:5, col:34>
| |   `-ParagraphComment 0x556d39219f60 <col:5, col:34>
| |     `-TextComment 0x556d39219f30 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x556d39163f90 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x556d3921a060 <line:3881:5, col:55>
| |   `-ParagraphComment 0x556d3921a030 <col:5, col:55>
| |     `-TextComment 0x556d3921a000 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x556d39164060 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x556d3921a130 <line:3883:5, col:35>
| |   `-ParagraphComment 0x556d3921a100 <col:5, col:35>
| |     `-TextComment 0x556d3921a0d0 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x556d391640e8 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x556d3921a200 <line:3885:5, col:22>
| |   `-ParagraphComment 0x556d3921a1d0 <col:5, col:22>
| |     `-TextComment 0x556d3921a1a0 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x556d39164168 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x556d3921a2d0 <line:3887:5, col:22>
| |   `-ParagraphComment 0x556d3921a2a0 <col:5, col:22>
| |     `-TextComment 0x556d3921a270 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x556d391641e8 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x556d3921a3a0 <line:3889:5, col:65>
|     `-ParagraphComment 0x556d3921a370 <col:5, col:65>
|       `-TextComment 0x556d3921a340 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x556d39164258 prev 0x556d39127ad0 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x556d3921a550 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x556d3921a440 <line:3897:3>
| | | `-TextComment 0x556d3921a410 <col:3> Text=" "
| | |-BlockCommandComment 0x556d3921a460 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x556d3921a4c0 <col:10, col:27>
| | |   `-TextComment 0x556d3921a490 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x556d3921a510 <line:3899:1>
| |   `-TextComment 0x556d3921a4e0 <col:1> Text=" "
| |-FieldDecl 0x556d39164318 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x556d3921a620 <line:3901:5, col:29>
| |   `-ParagraphComment 0x556d3921a5f0 <col:5, col:29>
| |     `-TextComment 0x556d3921a5c0 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x556d39164398 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x556d3921a6f0 <line:3903:5, col:27>
| |   `-ParagraphComment 0x556d3921a6c0 <col:5, col:27>
| |     `-TextComment 0x556d3921a690 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x556d39164400 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x556d39165bf0 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x556d39165af0 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x556d3921ab50 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x556d3921a790 <line:3942:3>
|   | `-TextComment 0x556d3921a760 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921a7b0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x556d3921a810 <col:10, col:31>
|   |   `-TextComment 0x556d3921a7e0 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x556d3921a860 <line:3944:3, col:69>
|   | `-TextComment 0x556d3921a830 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x556d3921a8b0 <line:3946:3>
|   | `-TextComment 0x556d3921a880 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921a8d0 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x556d3921a960 <col:15, col:38>
|   |   `-TextComment 0x556d3921a930 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x556d3921a9b0 <line:3948:3>
|   | `-TextComment 0x556d3921a980 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921a9d0 <col:4, line:3949:3> Name="return"
|   | `-ParagraphComment 0x556d3921aa50 <line:3948:11, line:3949:3>
|   |   |-TextComment 0x556d3921aa00 <line:3948:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d3921aa20 <line:3949:3> Text=" "
|   |-VerbatimLineComment 0x556d3921aa70 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x556d3921aae0 <line:3950:1>
|     `-TextComment 0x556d3921aab0 <col:1> Text=" "
|-FunctionDecl 0x556d39165fa8 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x556d39165cf0 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x556d39165e00 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x556d39165e70 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x556d3921b380 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x556d3921abf0 <line:3954:3>
|   | `-TextComment 0x556d3921abc0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921ac10 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x556d3921ac70 <col:10, col:57>
|   |   `-TextComment 0x556d3921ac40 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x556d3921ad90 <line:3956:3, line:3958:55>
|   | |-TextComment 0x556d3921ac90 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x556d3921ace0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x556d3921ad00 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x556d3921ad20 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x556d3921ad40 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x556d3921ade0 <line:3960:3>
|   | `-TextComment 0x556d3921adb0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921ae00 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x556d3921aeb0 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x556d3921ae60 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x556d3921ae80 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x556d3921aed0 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x556d3921af80 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x556d3921af30 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x556d3921af50 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x556d3921afa0 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x556d3921b0d0 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x556d3921b000 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x556d3921b020 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x556d3921b040 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x556d3921b060 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x556d3921b080 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x556d3921b280 <line:3968:3, line:3971:3>
|   | |-TextComment 0x556d3921b0f0 <line:3968:3> Text=" "
|   | |-InlineCommandComment 0x556d3921b110 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921b130 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x556d3921b150 <line:3969:3> Text=" "
|   | |-InlineCommandComment 0x556d3921b170 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921b190 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x556d3921b1b0 <line:3970:3> Text=" "
|   | |-InlineCommandComment 0x556d3921b1d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921b1f0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x556d3921b210 <line:3971:3> Text=" "
|   |-VerbatimLineComment 0x556d3921b2a0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x556d3921b310 <line:3972:1>
|     `-TextComment 0x556d3921b2e0 <col:1> Text=" "
|-FunctionDecl 0x556d391662f0 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x556d391660b0 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x556d39166138 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x556d391661c0 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x556d3921bb10 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x556d3921b420 <line:3977:3>
|   | `-TextComment 0x556d3921b3f0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921b440 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x556d3921b4a0 <col:10, col:59>
|   |   `-TextComment 0x556d3921b470 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x556d3921b660 <line:3979:3, line:3983:29>
|   | |-TextComment 0x556d3921b4c0 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x556d3921b510 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x556d3921b530 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x556d3921b550 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x556d3921b570 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x556d3921b5c0 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x556d3921b5e0 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x556d3921b600 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x556d3921b6b0 <line:3985:3>
|   | `-TextComment 0x556d3921b680 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921b6d0 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x556d3921b780 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x556d3921b730 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x556d3921b750 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x556d3921b7a0 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x556d3921b850 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x556d3921b800 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x556d3921b820 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x556d3921b880 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x556d3921b910 <col:14, col:64>
|   |   `-TextComment 0x556d3921b8e0 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x556d3921b960 <line:3989:3>
|   | `-TextComment 0x556d3921b930 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921b980 <col:4, line:3990:3> Name="return"
|   | `-ParagraphComment 0x556d3921ba00 <line:3989:11, line:3990:3>
|   |   |-TextComment 0x556d3921b9b0 <line:3989:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d3921b9d0 <line:3990:3> Text=" "
|   |-VerbatimLineComment 0x556d3921ba20 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x556d3921ba90 <line:3991:1>
|     `-TextComment 0x556d3921ba60 <col:1> Text=" "
|-FunctionDecl 0x556d391666b8 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x556d39166400 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x556d39166488 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x556d39166500 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x556d39166570 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x556d3921c3d0 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x556d3921bbb0 <line:3996:3>
|   | `-TextComment 0x556d3921bb80 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921bbd0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x556d3921bc30 <col:10, col:36>
|   |   `-TextComment 0x556d3921bc00 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x556d3921bd20 <line:3998:3, line:3999:40>
|   | |-TextComment 0x556d3921bc50 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x556d3921bca0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x556d3921bcc0 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x556d3921bce0 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x556d3921bd70 <line:4001:3>
|   | `-TextComment 0x556d3921bd40 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921bd90 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x556d3921be40 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x556d3921bdf0 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x556d3921be10 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x556d3921be60 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x556d3921bf10 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x556d3921bec0 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x556d3921bee0 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x556d3921bf30 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x556d3921c010 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x556d3921bf90 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x556d3921bfb0 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x556d3921bfd0 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x556d3921c030 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x556d3921c110 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x556d3921c090 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x556d3921c0b0 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x556d3921c0d0 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x556d3921c2c0 <line:4009:3, line:4012:3>
|   | |-TextComment 0x556d3921c130 <line:4009:3> Text=" "
|   | |-InlineCommandComment 0x556d3921c150 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921c170 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x556d3921c190 <line:4010:3> Text=" "
|   | |-InlineCommandComment 0x556d3921c1b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921c1d0 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x556d3921c1f0 <line:4011:3> Text=" "
|   | |-InlineCommandComment 0x556d3921c210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921c230 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x556d3921c250 <line:4012:3> Text=" "
|   |-VerbatimLineComment 0x556d3921c2e0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x556d3921c350 <line:4013:1>
|     `-TextComment 0x556d3921c320 <col:1> Text=" "
|-FunctionDecl 0x556d39166960 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x556d391667d0 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x556d39166848 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x556d3921c9c0 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x556d3921c470 <line:4018:3>
|   | `-TextComment 0x556d3921c440 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921c490 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x556d3921c4f0 <col:10, col:54>
|   |   `-TextComment 0x556d3921c4c0 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x556d3921c560 <line:4020:3, line:4021:57>
|   | |-TextComment 0x556d3921c510 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x556d3921c530 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x556d3921c5d0 <line:4023:3, line:4024:31>
|   | |-TextComment 0x556d3921c580 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x556d3921c5a0 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x556d3921c620 <line:4026:3>
|   | `-TextComment 0x556d3921c5f0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921c640 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x556d3921c6f0 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x556d3921c6a0 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x556d3921c6c0 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x556d3921c710 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x556d3921c7c0 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x556d3921c770 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x556d3921c790 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x556d3921c810 <line:4030:3>
|   | `-TextComment 0x556d3921c7e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921c830 <col:4, line:4031:3> Name="return"
|   | `-ParagraphComment 0x556d3921c8b0 <line:4030:11, line:4031:3>
|   |   |-TextComment 0x556d3921c860 <line:4030:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d3921c880 <line:4031:3> Text=" "
|   |-VerbatimLineComment 0x556d3921c8d0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x556d3921c940 <line:4032:1>
|     `-TextComment 0x556d3921c910 <col:1> Text=" "
|-FunctionDecl 0x556d39166d98 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x556d39166a78 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x556d39166b00 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x556d39166be0 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x556d39166c50 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x556d3921d3f0 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x556d3921ca60 <line:4036:3>
|   | `-TextComment 0x556d3921ca30 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921ca80 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x556d3921cae0 <col:10, col:65>
|   |   `-TextComment 0x556d3921cab0 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x556d3921cbd0 <line:4038:3, line:4042:42>
|   | |-TextComment 0x556d3921cb00 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x556d3921cb20 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x556d3921cb40 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x556d3921cb60 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x556d3921cb80 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x556d3921cc70 <line:4044:3, line:4046:33>
|   | |-TextComment 0x556d3921cbf0 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x556d3921cc10 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x556d3921cc30 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x556d3921cd60 <line:4048:3, line:4052:55>
|   | |-TextComment 0x556d3921cc90 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x556d3921ccb0 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x556d3921ccd0 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x556d3921ccf0 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x556d3921cd10 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x556d3921cdb0 <line:4054:3>
|   | `-TextComment 0x556d3921cd80 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921cdd0 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x556d3921ce80 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x556d3921ce30 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x556d3921ce50 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x556d3921cea0 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x556d3921cf50 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x556d3921cf00 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x556d3921cf20 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x556d3921cf70 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x556d3921d020 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x556d3921cfd0 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x556d3921cff0 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x556d3921d040 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x556d3921d120 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x556d3921d0a0 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x556d3921d0c0 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x556d3921d0e0 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x556d3921d2d0 <line:4061:3, line:4064:3>
|   | |-TextComment 0x556d3921d140 <line:4061:3> Text=" "
|   | |-InlineCommandComment 0x556d3921d160 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921d180 <col:11, col:28> Text=" 0 Data retrieved."
|   | |-TextComment 0x556d3921d1a0 <line:4062:3> Text=" "
|   | |-InlineCommandComment 0x556d3921d1c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921d1e0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x556d3921d200 <line:4063:3> Text=" "
|   | |-InlineCommandComment 0x556d3921d220 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921d240 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x556d3921d260 <line:4064:3> Text=" "
|   |-VerbatimLineComment 0x556d3921d2f0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x556d3921d360 <line:4065:1>
|     `-TextComment 0x556d3921d330 <col:1> Text=" "
|-RecordDecl 0x556d39166ee8 prev 0x556d39127b80 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x556d3921d4c0 <line:4078:4, col:19>
| | `-ParagraphComment 0x556d3921d490 <col:4, col:19>
| |   `-TextComment 0x556d3921d460 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x556d39166f88 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x556d3921d590 <col:38, col:63>
| |   `-ParagraphComment 0x556d3921d560 <col:38, col:63>
| |     `-TextComment 0x556d3921d530 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x556d39167008 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x556d3921d660 <col:38, col:50>
| |   `-ParagraphComment 0x556d3921d630 <col:38, col:50>
| |     `-TextComment 0x556d3921d600 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x556d39167088 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x556d3921d730 <col:38, col:61>
| |   `-ParagraphComment 0x556d3921d700 <col:38, col:61>
| |     `-TextComment 0x556d3921d6d0 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x556d39167108 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x556d3921d800 <col:38, col:67>
| |   `-ParagraphComment 0x556d3921d7d0 <col:38, col:67>
| |     `-TextComment 0x556d3921d7a0 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x556d39167188 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x556d3921d8f0 <col:38, col:63>
| |   `-ParagraphComment 0x556d3921d8c0 <col:38, col:63>
| |     `-TextComment 0x556d3921d890 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x556d39167218 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x556d3921d9c0 <col:31, col:52>
| |   `-ParagraphComment 0x556d3921d990 <col:31, col:52>
| |     `-TextComment 0x556d3921d960 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x556d39167288 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x556d39167340 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x556d3921da90 <col:31, col:49>
| | |   `-ParagraphComment 0x556d3921da60 <col:31, col:49>
| | |     `-TextComment 0x556d3921da30 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x556d391673c8 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x556d3921db60 <col:31, col:49>
| |     `-ParagraphComment 0x556d3921db30 <col:31, col:49>
| |       `-TextComment 0x556d3921db00 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x556d39167490 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x556d391674e8 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x556d3921dc30 <col:26, col:32>
|     `-ParagraphComment 0x556d3921dc00 <col:26, col:32>
|       `-TextComment 0x556d3921dbd0 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x556d39167920 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x556d39167700 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d39167778 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x556d391677e8 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x556d3921e290 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x556d3921dcd0 <line:4145:3>
|   | `-TextComment 0x556d3921dca0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921dcf0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x556d3921dd50 <col:10, col:28>
|   |   `-TextComment 0x556d3921dd20 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x556d3921dda0 <line:4147:3, col:66>
|   | `-TextComment 0x556d3921dd70 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x556d3921ddf0 <line:4149:3>
|   | `-TextComment 0x556d3921ddc0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921de10 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x556d3921dec0 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x556d3921de70 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x556d3921de90 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x556d3921dee0 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x556d3921dfc0 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x556d3921df40 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x556d3921df60 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x556d3921df80 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x556d3921dfe0 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x556d3921e090 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x556d3921e040 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x556d3921e060 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x556d3921e0e0 <line:4155:3>
|   | `-TextComment 0x556d3921e0b0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921e100 <col:4, line:4156:3> Name="return"
|   | `-ParagraphComment 0x556d3921e180 <line:4155:11, line:4156:3>
|   |   |-TextComment 0x556d3921e130 <line:4155:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d3921e150 <line:4156:3> Text=" "
|   |-VerbatimLineComment 0x556d3921e1a0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x556d3921e210 <line:4157:1>
|     `-TextComment 0x556d3921e1e0 <col:1> Text=" "
|-FunctionDecl 0x556d39169578 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x556d39169470 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x556d3921e750 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x556d3921e330 <line:4161:3>
|   | `-TextComment 0x556d3921e300 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921e350 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x556d3921e3b0 <col:10, col:43>
|   |   `-TextComment 0x556d3921e380 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x556d3921e450 <line:4163:3, line:4165:46>
|   | |-TextComment 0x556d3921e3d0 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x556d3921e3f0 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x556d3921e410 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x556d3921e4a0 <line:4167:3>
|   | `-TextComment 0x556d3921e470 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921e4c0 <col:4, line:4170:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x556d3921e660 <line:4167:15, line:4170:3>
|   |   |-TextComment 0x556d3921e520 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   |-TextComment 0x556d3921e540 <line:4168:3> Text=" "
|   |   |-InlineCommandComment 0x556d3921e560 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x556d3921e580 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x556d3921e5a0 <line:4169:3> Text=" "
|   |   |-InlineCommandComment 0x556d3921e5c0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x556d3921e5e0 <col:11, col:37> Text=" -EAGAIN nothing to cleanup"
|   |   `-TextComment 0x556d3921e600 <line:4170:3> Text=" "
|   |-VerbatimLineComment 0x556d3921e680 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x556d3921e6f0 <line:4171:1>
|     `-TextComment 0x556d3921e6c0 <col:1> Text=" "
|-FunctionDecl 0x556d391697f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x556d39169670 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d391696e0 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x556d3921ed70 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x556d3921e7f0 <line:4175:3>
|   | `-TextComment 0x556d3921e7c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921e810 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x556d3921e870 <col:10, col:56>
|   |   `-TextComment 0x556d3921e840 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x556d3921e910 <line:4177:3, line:4179:74>
|   | |-TextComment 0x556d3921e890 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x556d3921e8b0 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x556d3921e8d0 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x556d3921e960 <line:4181:3, col:69>
|   | `-TextComment 0x556d3921e930 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x556d3921e9b0 <line:4183:3>
|   | `-TextComment 0x556d3921e980 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921e9d0 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x556d3921ea80 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x556d3921ea30 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x556d3921ea50 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x556d3921eaa0 <col:4, line:4188:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x556d3921ec70 <line:4184:15, line:4188:3>
|   |   |-TextComment 0x556d3921eb00 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x556d3921eb20 <line:4185:3, col:30> Text="             buffer is used."
|   |   |-TextComment 0x556d3921eb40 <line:4186:3> Text=" "
|   |   |-InlineCommandComment 0x556d3921eb60 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x556d3921eb80 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x556d3921eba0 <line:4187:3> Text=" "
|   |   |-InlineCommandComment 0x556d3921ebc0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x556d3921ebe0 <col:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x556d3921ec00 <line:4188:3> Text=" "
|   |-VerbatimLineComment 0x556d3921ec90 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x556d3921ed00 <line:4189:1>
|     `-TextComment 0x556d3921ecd0 <col:1> Text=" "
|-FunctionDecl 0x556d39169ce8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x556d39169900 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d39169978 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x556d391699e8 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39169a88 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x556d39169af8 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39169b68 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x556d3921f910 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x556d3921ee10 <line:4193:3>
|   | `-TextComment 0x556d3921ede0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921ee30 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x556d3921ee90 <col:10, col:31>
|   |   `-TextComment 0x556d3921ee60 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x556d3921efb0 <line:4195:3, col:66>
|   | |-TextComment 0x556d3921eeb0 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x556d3921ef00 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x556d3921ef20 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x556d3921ef70 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x556d3921f000 <line:4197:3>
|   | `-TextComment 0x556d3921efd0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921f020 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x556d3921f0d0 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x556d3921f080 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x556d3921f0a0 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x556d3921f0f0 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d3921f1a0 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x556d3921f150 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x556d3921f170 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x556d3921f1c0 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x556d3921f270 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x556d3921f220 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x556d3921f240 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x556d3921f290 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x556d3921f340 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x556d3921f2f0 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x556d3921f310 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x556d3921f360 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x556d3921f410 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x556d3921f3c0 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x556d3921f3e0 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x556d3921f430 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x556d3921f510 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x556d3921f490 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x556d3921f4b0 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x556d3921f4d0 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x556d3921f7c0 <line:4206:3, line:4210:3>
|   | |-TextComment 0x556d3921f530 <line:4206:3> Text=" "
|   | |-InlineCommandComment 0x556d3921f550 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921f570 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x556d3921f5c0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x556d3921f5e0 <col:34, col:61> Text=" bytes of data were written."
|   | |-TextComment 0x556d3921f600 <line:4207:3> Text=" "
|   | |-InlineCommandComment 0x556d3921f620 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921f640 <col:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   | |-TextComment 0x556d3921f660 <line:4208:3> Text=" "
|   | |-InlineCommandComment 0x556d3921f680 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d3921f6a0 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x556d3921f6f0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x556d3921f710 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|   | `-TextComment 0x556d3921f730 <line:4210:3> Text=" "
|   |-VerbatimLineComment 0x556d3921f7e0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x556d3921f850 <line:4211:1>
|     `-TextComment 0x556d3921f820 <col:1> Text=" "
|-FunctionDecl 0x556d3916a100 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x556d39169e10 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d39169e88 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x556d39169ef8 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39169f68 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x556d39169fd8 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3916a048 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x556d39220500 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x556d3921f9b0 <line:4217:3>
|   | `-TextComment 0x556d3921f980 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3921f9d0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x556d3921fa30 <col:10, col:32>
|   |   `-TextComment 0x556d3921fa00 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x556d3921fb50 <line:4219:3, col:66>
|   | |-TextComment 0x556d3921fa50 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x556d3921faa0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x556d3921fac0 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x556d3921fb10 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x556d3921fba0 <line:4221:3>
|   | `-TextComment 0x556d3921fb70 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3921fbc0 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x556d3921fc70 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x556d3921fc20 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x556d3921fc40 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x556d3921fc90 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x556d3921fd40 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x556d3921fcf0 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x556d3921fd10 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x556d3921fd60 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x556d3921fe10 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x556d3921fdc0 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x556d3921fde0 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x556d3921fe30 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x556d3921fee0 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x556d3921fe90 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x556d3921feb0 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x556d3921ff00 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x556d3921ffb0 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x556d3921ff60 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x556d3921ff80 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x556d3921ffd0 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x556d392200b0 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x556d39220030 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x556d39220050 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x556d39220070 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x556d392203e0 <line:4230:3, line:4235:3>
|   | |-TextComment 0x556d392200d0 <line:4230:3> Text=" "
|   | |-InlineCommandComment 0x556d392200f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39220110 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x556d39220160 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x556d39220180 <col:34, col:58> Text=" bytes of data were read."
|   | |-TextComment 0x556d392201a0 <line:4231:3> Text=" "
|   | |-InlineCommandComment 0x556d392201c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392201e0 <col:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   | |-TextComment 0x556d39220200 <line:4232:3> Text=" "
|   | |-InlineCommandComment 0x556d39220220 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39220240 <col:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   | |-TextComment 0x556d39220260 <line:4233:3> Text=" "
|   | |-InlineCommandComment 0x556d39220280 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392202a0 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x556d392202f0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x556d39220310 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|   | `-TextComment 0x556d39220330 <line:4235:3> Text=" "
|   |-VerbatimLineComment 0x556d39220400 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x556d39220470 <line:4236:1>
|     `-TextComment 0x556d39220440 <col:1> Text=" "
|-FunctionDecl 0x556d3916a510 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x556d3916a220 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d3916a2a8 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x556d3916a318 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3916a3a0 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x556d39220d80 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x556d392205a0 <line:4242:3>
|   | `-TextComment 0x556d39220570 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392205c0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x556d39220620 <col:10, col:39>
|   |   `-TextComment 0x556d392205f0 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x556d39220810 <line:4244:3, line:4246:79>
|   | |-TextComment 0x556d39220640 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x556d39220690 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x556d392206b0 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x556d392206d0 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x556d39220720 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x556d39220740 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x556d39220790 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x556d392207b0 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x556d39220860 <line:4248:3>
|   | `-TextComment 0x556d39220830 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39220880 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x556d39220930 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x556d392208e0 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x556d39220900 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x556d39220950 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x556d39220a00 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x556d392209b0 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x556d392209d0 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x556d39220a20 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x556d39220ad0 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x556d39220a80 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x556d39220aa0 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x556d39220af0 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x556d39220b80 <col:14, col:61>
|   |   `-TextComment 0x556d39220b50 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x556d39220bd0 <line:4253:3>
|   | `-TextComment 0x556d39220ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39220bf0 <col:4, line:4254:3> Name="return"
|   | `-ParagraphComment 0x556d39220c70 <line:4253:11, line:4254:3>
|   |   |-TextComment 0x556d39220c20 <line:4253:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39220c40 <line:4254:3> Text=" "
|   |-VerbatimLineComment 0x556d39220c90 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x556d39220d00 <line:4255:1>
|     `-TextComment 0x556d39220cd0 <col:1> Text=" "
|-RecordDecl 0x556d3916a628 prev 0x556d39127ef0 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x556d39220ea0 <line:4262:3, col:24>
| | `-ParagraphComment 0x556d39220e70 <col:3, col:24>
| |   |-TextComment 0x556d39220df0 <col:3> Text=" "
| |   |-InlineCommandComment 0x556d39220e10 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x556d39220e30 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x556d3916a6c0 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x556d3916a718 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x556d3916a770 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x556d3916a7d0 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x556d3916a830 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x556d3916a888 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x556d3916ace8 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x556d3916aa40 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x556d3916aab8 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x556d3916ab28 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3916ab98 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x556d392218b0 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x556d39220f40 <line:4330:3>
|   | `-TextComment 0x556d39220f10 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39220f60 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x556d39220fc0 <col:10, col:35>
|   |   `-TextComment 0x556d39220f90 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x556d39221010 <line:4332:3, col:53>
|   | `-TextComment 0x556d39220fe0 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x556d392212a0 <line:4334:3, line:4339:51>
|   | |-TextComment 0x556d39221030 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x556d39221080 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x556d392210a0 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x556d392210c0 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x556d39221110 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x556d39221130 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x556d39221150 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x556d39221170 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x556d39221190 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x556d392211b0 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x556d39221200 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x556d39221220 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x556d392212f0 <line:4341:3>
|   | `-TextComment 0x556d392212c0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39221310 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x556d392213c0 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x556d39221370 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x556d39221390 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x556d392213e0 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x556d39221490 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x556d39221440 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x556d39221460 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x556d392214b0 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x556d39221560 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x556d39221510 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x556d39221530 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x556d39221580 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x556d39221610 <col:21, col:45>
|   |   `-TextComment 0x556d392215e0 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x556d39221720 <line:4346:3, line:4347:40>
|   | |-TextComment 0x556d39221630 <line:4346:3> Text=" "
|   | |-InlineCommandComment 0x556d39221650 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39221670 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x556d39221690 <line:4347:3> Text=" "
|   | |-InlineCommandComment 0x556d392216b0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x556d392216d0 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   |-ParagraphComment 0x556d39221770 <line:4349:3>
|   | `-TextComment 0x556d39221740 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d39221790 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x556d39221800 <line:4350:1>
|     `-TextComment 0x556d392217d0 <col:1> Text=" "
|-FunctionDecl 0x556d3916b028 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x556d3916ae00 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x556d3916ae78 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x556d3916aee8 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x556d392220c0 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x556d39221950 <line:4355:3>
|   | `-TextComment 0x556d39221920 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39221970 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x556d392219d0 <col:10, col:45>
|   |   `-TextComment 0x556d392219a0 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x556d39221a20 <line:4357:3, col:60>
|   | `-TextComment 0x556d392219f0 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x556d39221a70 <line:4359:3>
|   | `-TextComment 0x556d39221a40 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39221a90 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x556d39221b40 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x556d39221af0 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x556d39221b10 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x556d39221b60 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x556d39221c10 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x556d39221bc0 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x556d39221be0 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x556d39221c30 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x556d39221d10 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x556d39221c90 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x556d39221cb0 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x556d39221cd0 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x556d39221fc0 <line:4365:3, line:4370:3>
|   | |-TextComment 0x556d39221d30 <line:4365:3> Text=" "
|   | |-InlineCommandComment 0x556d39221d50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39221d70 <col:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   | |-InlineCommandComment 0x556d39221dc0 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   | |-TextComment 0x556d39221de0 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x556d39221e00 <line:4367:3> Text=" "
|   | |-InlineCommandComment 0x556d39221e20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39221e40 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x556d39221e60 <line:4368:3> Text=" "
|   | |-InlineCommandComment 0x556d39221e80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39221ea0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x556d39221ec0 <line:4369:3> Text=" "
|   | |-InlineCommandComment 0x556d39221ee0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39221f00 <col:11, col:40> Text=" -EINVAL Invalid data supplied"
|   | `-TextComment 0x556d39221f20 <line:4370:3> Text=" "
|   |-VerbatimLineComment 0x556d39221fe0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x556d39222050 <line:4371:1>
|     `-TextComment 0x556d39222020 <col:1> Text=" "
|-FunctionDecl 0x556d3916b2c0 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x556d3916b130 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x556d3916b1a8 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x556d39222610 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x556d39222160 <line:4376:3>
|   | `-TextComment 0x556d39222130 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39222180 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x556d392221e0 <col:10, col:51>
|   |   `-TextComment 0x556d392221b0 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x556d39222250 <line:4378:3, line:4379:26>
|   | |-TextComment 0x556d39222200 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x556d39222220 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x556d392222a0 <line:4381:3>
|   | `-TextComment 0x556d39222270 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392222c0 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x556d39222370 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x556d39222320 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x556d39222340 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x556d39222390 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x556d39222420 <col:14, col:75>
|   |   `-TextComment 0x556d392223f0 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x556d39222470 <line:4384:3>
|   | `-TextComment 0x556d39222440 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39222490 <col:4, line:4385:3> Name="return"
|   | `-ParagraphComment 0x556d39222510 <line:4384:11, line:4385:3>
|   |   |-TextComment 0x556d392224c0 <line:4384:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d392224e0 <line:4385:3> Text=" "
|   |-VerbatimLineComment 0x556d39222530 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x556d392225a0 <line:4386:1>
|     `-TextComment 0x556d39222570 <col:1> Text=" "
|-FunctionDecl 0x556d3916c250 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x556d3916b3c0 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x556d3916c3c8 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x556d3916c388 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x556d3916c370 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x556d3916c338 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x556d3916a888
| |       `-ImplicitCastExpr 0x556d3916c320 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x556d3916c2f8 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x556d3916b3c0 'slab' 'struct k_mem_slab *'
| `-FullComment 0x556d39222af0 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x556d392226b0 <line:4390:3>
|   | `-TextComment 0x556d39222680 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392226d0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x556d39222730 <col:10, col:57>
|   |   `-TextComment 0x556d39222700 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x556d39222800 <line:4392:3, line:4393:18>
|   | |-TextComment 0x556d39222750 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x556d39222770 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x556d392227c0 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x556d39222850 <line:4395:3>
|   | `-TextComment 0x556d39222820 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39222870 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x556d39222900 <col:15, col:42>
|   |   `-TextComment 0x556d392228d0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x556d39222950 <line:4397:3>
|   | `-TextComment 0x556d39222920 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39222970 <col:4, line:4398:3> Name="return"
|   | `-ParagraphComment 0x556d392229f0 <line:4397:11, line:4398:3>
|   |   |-TextComment 0x556d392229a0 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|   |   `-TextComment 0x556d392229c0 <line:4398:3> Text=" "
|   |-VerbatimLineComment 0x556d39222a10 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x556d39222a80 <line:4399:1>
|     `-TextComment 0x556d39222a50 <col:1> Text=" "
|-FunctionDecl 0x556d3916c490 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x556d3916c408 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x556d3916c6f8 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x556d3916c680 <line:4418:2, col:34>
| |   `-BinaryOperator 0x556d3916c658 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x556d3916c628 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x556d3916c578 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x556d3916a718
| |     |   `-ImplicitCastExpr 0x556d3916c560 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x556d3916c538 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x556d3916c408 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x556d3916c640 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x556d3916c5f0 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x556d3916a888
| |         `-ImplicitCastExpr 0x556d3916c5d8 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x556d3916c5b0 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x556d3916c408 'slab' 'struct k_mem_slab *'
| `-FullComment 0x556d39222fd0 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x556d39222b90 <line:4406:3>
|   | `-TextComment 0x556d39222b60 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39222bb0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x556d39222c10 <col:10, col:59>
|   |   `-TextComment 0x556d39222be0 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x556d39222ce0 <line:4408:3, line:4409:20>
|   | |-TextComment 0x556d39222c30 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x556d39222c50 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x556d39222ca0 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x556d39222d30 <line:4411:3>
|   | `-TextComment 0x556d39222d00 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39222d50 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x556d39222de0 <col:15, col:42>
|   |   `-TextComment 0x556d39222db0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x556d39222e30 <line:4413:3>
|   | `-TextComment 0x556d39222e00 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39222e50 <col:4, line:4414:3> Name="return"
|   | `-ParagraphComment 0x556d39222ed0 <line:4413:11, line:4414:3>
|   |   |-TextComment 0x556d39222e80 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|   |   `-TextComment 0x556d39222ea0 <line:4414:3> Text=" "
|   |-VerbatimLineComment 0x556d39222ef0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x556d39222f60 <line:4415:1>
|     `-TextComment 0x556d39222f30 <col:1> Text=" "
|-RecordDecl 0x556d3916c710 prev 0x556d39127fa0 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x556d392230f0 <line:4424:3, col:24>
| | `-ParagraphComment 0x556d392230c0 <col:3, col:24>
| |   |-TextComment 0x556d39223040 <col:3> Text=" "
| |   |-InlineCommandComment 0x556d39223060 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x556d39223080 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x556d3916c7b8 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x556d3916c810 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x556d3916cc68 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x556d3916c9b0 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x556d3916ca38 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x556d3916caa8 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3916cb18 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x556d392239b0 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x556d39223190 <line:4478:3>
|   | `-TextComment 0x556d39223160 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392231b0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x556d39223210 <col:10, col:45>
|   |   `-TextComment 0x556d392231e0 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x556d39223260 <line:4480:3, col:60>
|   | `-TextComment 0x556d39223230 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x556d392232b0 <line:4482:3>
|   | `-TextComment 0x556d39223280 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392232d0 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x556d39223380 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x556d39223330 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x556d39223350 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x556d392233a0 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x556d39223450 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x556d39223400 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x556d39223420 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x556d39223470 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x556d39223520 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x556d392234d0 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x556d392234f0 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x556d39223540 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x556d39223620 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x556d392235a0 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x556d392235c0 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x556d392235e0 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x556d39223880 <line:4489:3, line:4493:3>
|   | |-TextComment 0x556d39223640 <line:4489:3> Text=" "
|   | |-InlineCommandComment 0x556d39223660 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39223680 <col:11, col:35> Text=" 0 Memory allocated. The "
|   | |-InlineCommandComment 0x556d392236d0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x556d392236f0 <col:43, col:72> Text=" field of the block descriptor"
|   | |-TextComment 0x556d39223710 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x556d39223730 <line:4491:3> Text=" "
|   | |-InlineCommandComment 0x556d39223750 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39223770 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x556d39223790 <line:4492:3> Text=" "
|   | |-InlineCommandComment 0x556d392237b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392237d0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x556d392237f0 <line:4493:3> Text=" "
|   |-VerbatimLineComment 0x556d392238c0 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x556d39223930 <line:4494:1>
|     `-TextComment 0x556d39223900 <col:1> Text=" "
|-FunctionDecl 0x556d3916cf08 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x556d3916cd80 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x556d3916cdf0 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x556d39223eb0 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x556d39223a50 <line:4499:3>
|   | `-TextComment 0x556d39223a20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39223a70 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x556d39223ad0 <col:10, col:68>
|   |   `-TextComment 0x556d39223aa0 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x556d39223b20 <line:4501:3, col:47>
|   | `-TextComment 0x556d39223af0 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x556d39223b70 <line:4503:3>
|   | `-TextComment 0x556d39223b40 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39223b90 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x556d39223c40 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x556d39223bf0 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x556d39223c10 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x556d39223c60 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x556d39223d10 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x556d39223cc0 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x556d39223ce0 <line:4505:3> Text=" "
|   |-BlockCommandComment 0x556d39223d30 <col:4, line:4506:3> Name="return"
|   | `-ParagraphComment 0x556d39223db0 <line:4505:11, line:4506:3>
|   |   |-TextComment 0x556d39223d60 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|   |   `-TextComment 0x556d39223d80 <line:4506:3> Text=" "
|   |-VerbatimLineComment 0x556d39223dd0 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x556d39223e40 <line:4507:1>
|     `-TextComment 0x556d39223e10 <col:1> Text=" "
|-FunctionDecl 0x556d3916d110 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x556d3916d010 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x556d39224330 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x556d39223f50 <line:4511:3>
|   | `-TextComment 0x556d39223f20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39223f70 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x556d39223fd0 <col:10, col:51>
|   |   `-TextComment 0x556d39223fa0 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x556d39224040 <line:4513:3, line:4514:15>
|   | |-TextComment 0x556d39223ff0 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x556d39224010 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x556d39224090 <line:4516:3>
|   | `-TextComment 0x556d39224060 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392240b0 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x556d39224140 <col:16, col:69>
|   |   `-TextComment 0x556d39224110 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x556d39224190 <line:4518:3>
|   | `-TextComment 0x556d39224160 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392241b0 <col:4, line:4519:3> Name="return"
|   | `-ParagraphComment 0x556d39224230 <line:4518:11, line:4519:3>
|   |   |-TextComment 0x556d392241e0 <line:4518:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39224200 <line:4519:3> Text=" "
|   |-VerbatimLineComment 0x556d39224250 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x556d392242c0 <line:4520:1>
|     `-TextComment 0x556d39224290 <col:1> Text=" "
|-FunctionDecl 0x556d3916f570 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x556d3916f470 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x556d392247b0 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x556d392243d0 <line:4524:3>
|   | `-TextComment 0x556d392243a0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392243f0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x556d39224450 <col:10, col:51>
|   |   `-TextComment 0x556d39224420 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x556d392244c0 <line:4526:3, line:4527:14>
|   | |-TextComment 0x556d39224470 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x556d39224490 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x556d39224510 <line:4529:3>
|   | `-TextComment 0x556d392244e0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39224530 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x556d392245c0 <col:13, col:37>
|   |   `-TextComment 0x556d39224590 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x556d39224610 <line:4531:3>
|   | `-TextComment 0x556d392245e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39224630 <col:4, line:4532:3> Name="return"
|   | `-ParagraphComment 0x556d392246b0 <line:4531:11, line:4532:3>
|   |   |-TextComment 0x556d39224660 <line:4531:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39224680 <line:4532:3> Text=" "
|   |-VerbatimLineComment 0x556d392246d0 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x556d39224740 <line:4533:1>
|     `-TextComment 0x556d39224710 <col:1> Text=" "
|-FunctionDecl 0x556d3916f7c8 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x556d3916f6b8 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x556d39224c30 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x556d39224850 <line:4547:3>
|   | `-TextComment 0x556d39224820 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39224870 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x556d392248d0 <col:10, col:36>
|   |   `-TextComment 0x556d392248a0 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x556d39224940 <line:4549:3, line:4550:39>
|   | |-TextComment 0x556d392248f0 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x556d39224910 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x556d39224990 <line:4552:3>
|   | `-TextComment 0x556d39224960 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392249b0 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x556d39224a40 <col:15, col:53>
|   |   `-TextComment 0x556d39224a10 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x556d39224a90 <line:4554:3>
|   | `-TextComment 0x556d39224a60 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39224ab0 <col:4, line:4555:3> Name="return"
|   | `-ParagraphComment 0x556d39224b30 <line:4554:11, line:4555:3>
|   |   |-TextComment 0x556d39224ae0 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x556d39224b00 <line:4555:3> Text=" "
|   |-VerbatimLineComment 0x556d39224b50 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x556d39224bc0 <line:4556:1>
|     `-TextComment 0x556d39224b90 <col:1> Text=" "
|-FunctionDecl 0x556d3916f938 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x556d3916f8b0 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x556d392251b0 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x556d39224cd0 <line:4560:3>
|   | `-TextComment 0x556d39224ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39224cf0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d39224d50 <col:10, col:42>
|   |   `-TextComment 0x556d39224d20 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x556d39224df0 <line:4562:3, line:4564:23>
|   | |-TextComment 0x556d39224d70 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x556d39224d90 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x556d39224db0 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x556d39224ec0 <line:4566:3, col:48>
|   | |-TextComment 0x556d39224e10 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x556d39224e60 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x556d39224e80 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x556d39224f10 <line:4568:3>
|   | `-TextComment 0x556d39224ee0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39224f30 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x556d39224fc0 <col:14, col:53>
|   |   `-TextComment 0x556d39224f90 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x556d39225010 <line:4570:3>
|   | `-TextComment 0x556d39224fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39225030 <col:4, line:4571:3> Name="return"
|   | `-ParagraphComment 0x556d392250b0 <line:4570:11, line:4571:3>
|   |   |-TextComment 0x556d39225060 <line:4570:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39225080 <line:4571:3> Text=" "
|   |-VerbatimLineComment 0x556d392250d0 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x556d39225140 <line:4572:1>
|     `-TextComment 0x556d39225110 <col:1> Text=" "
|-FunctionDecl 0x556d3916fba8 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x556d3916fa18 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3916fa88 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x556d39225700 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x556d39225250 <line:4576:3>
|   | `-TextComment 0x556d39225220 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39225270 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x556d392252d0 <col:10, col:48>
|   |   `-TextComment 0x556d392252a0 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x556d39225340 <line:4578:3, line:4579:50>
|   | |-TextComment 0x556d392252f0 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x556d39225310 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x556d39225390 <line:4581:3>
|   | `-TextComment 0x556d39225360 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392253b0 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x556d39225460 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x556d39225410 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x556d39225430 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x556d39225480 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x556d39225510 <col:15, col:53>
|   |   `-TextComment 0x556d392254e0 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x556d39225560 <line:4584:3>
|   | `-TextComment 0x556d39225530 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39225580 <col:4, line:4585:3> Name="return"
|   | `-ParagraphComment 0x556d39225600 <line:4584:11, line:4585:3>
|   |   |-TextComment 0x556d392255b0 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x556d392255d0 <line:4585:3> Text=" "
|   |-VerbatimLineComment 0x556d39225620 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x556d39225690 <line:4586:1>
|     `-TextComment 0x556d39225660 <col:1> Text=" "
|-EnumDecl 0x556d3916fc88 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x556d3916fd40 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x556d3916fd88 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x556d3916fdd0 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x556d3916fe18 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x556d3916fe60 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x556d3916fea8 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x556d3916ff60 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x556d3916ffa8 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x556d3916fff0 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x556d39170038 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x556d39170080 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x556d391700c8 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x556d39170138 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x556d39170210 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-IntegerLiteral 0x556d391701f0 <col:28> 'int' 0
| `-EnumConstantDecl 0x556d39170258 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x556d391702a0 prev 0x556d391281b0 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x556d39170368 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x556d392257d0 <line:4684:5, col:28>
| |   `-ParagraphComment 0x556d392257a0 <col:5, col:28>
| |     `-TextComment 0x556d39225770 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x556d391718f0 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x556d392258d0 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x556d39225890 <line:4688:4, line:4689:24>
| |     |-TextComment 0x556d39225840 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x556d39225860 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x556d39171980 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x556d392259a0 <line:4693:5, col:67>
|     `-ParagraphComment 0x556d39225970 <col:5, col:67>
|       `-TextComment 0x556d39225940 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x556d391719f8 prev 0x556d39128100 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x556d39225b50 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x556d39225a40 <line:4704:3>
| | | `-TextComment 0x556d39225a10 <col:3> Text=" "
| | |-BlockCommandComment 0x556d39225a60 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x556d39225ac0 <col:10, col:20>
| | |   `-TextComment 0x556d39225a90 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x556d39225b10 <line:4706:1>
| |   `-TextComment 0x556d39225ae0 <col:1> Text=" "
| |-FieldDecl 0x556d39171ab8 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x556d39225c20 <line:4708:5, col:28>
| |   `-ParagraphComment 0x556d39225bf0 <col:5, col:28>
| |     `-TextComment 0x556d39225bc0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x556d39171bb0 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x556d39225cf0 <line:4711:5, col:28>
| |   `-ParagraphComment 0x556d39225cc0 <col:5, col:28>
| |     `-TextComment 0x556d39225c90 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x556d39171c58 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x556d39171c28 <col:12> 'int' 8
| | `-FullComment 0x556d39225dc0 <line:4714:5, col:63>
| |   `-ParagraphComment 0x556d39225d90 <col:5, col:63>
| |     `-TextComment 0x556d39225d60 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x556d39171d00 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x556d39171cc8 <col:13> 'int' EnumConstant 0x556d3916fe60 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x556d39225e90 <line:4717:5, col:67>
| |   `-ParagraphComment 0x556d39225e60 <col:5, col:67>
| |     `-TextComment 0x556d39225e30 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x556d39171db0 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x556d39171d78 <col:14> 'int' EnumConstant 0x556d391700c8 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x556d39225f60 <line:4720:5, col:69>
| |   `-ParagraphComment 0x556d39225f30 <col:5, col:69>
| |     `-TextComment 0x556d39225f00 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x556d39171e58 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x556d39171e28 <col:13> 'int' 1
| | `-FullComment 0x556d39226030 <line:4723:5, col:47>
| |   `-ParagraphComment 0x556d39226000 <col:5, col:47>
| |     `-TextComment 0x556d39225fd0 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x556d391720b0 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ParenExpr 0x556d39172080 <line:4641:2, line:4646:9> 'int'
| | | `-BinaryOperator 0x556d39172058 <line:4641:3, line:4646:8> 'int' '-'
| | |   |-IntegerLiteral 0x556d39171ec8 <line:4641:3> 'int' 32
| | |   `-ParenExpr 0x556d39172038 <col:8, line:4646:8> 'int'
| | |     `-BinaryOperator 0x556d39172010 <line:4641:9, line:4645:11> 'int' '+'
| | |       |-BinaryOperator 0x556d39171fc8 <line:4641:9, line:4644:11> 'int' '+'
| | |       | |-BinaryOperator 0x556d39171f78 <line:4641:9, line:4643:11> 'int' '+'
| | |       | | |-BinaryOperator 0x556d39171f28 <line:4641:9, line:4642:11> 'int' '+'
| | |       | | | |-IntegerLiteral 0x556d39171ee8 <line:4641:9> 'int' 0
| | |       | | | `-IntegerLiteral 0x556d39171f08 <line:4642:11> 'int' 8
| | |       | | `-DeclRefExpr 0x556d39171f50 <line:4643:11> 'int' EnumConstant 0x556d3916fe60 '_POLL_NUM_TYPES' 'int'
| | |       | `-DeclRefExpr 0x556d39171fa0 <line:4644:11> 'int' EnumConstant 0x556d391700c8 '_POLL_NUM_STATES' 'int'
| | |       `-IntegerLiteral 0x556d39171ff0 <line:4645:11> 'int' 1
| | `-FullComment 0x556d39226100 <line:4726:5, col:32>
| |   `-ParagraphComment 0x556d392260d0 <col:5, col:32>
| |     `-TextComment 0x556d392260a0 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x556d39172128 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x556d392261d0 <line:4729:5, col:19>
| | | `-ParagraphComment 0x556d392261a0 <col:5, col:19>
| | |   `-TextComment 0x556d39226170 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x556d391721e8 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x556d391722e0 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x556d39172350 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x556d39172450 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x556d391724c0 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x556d39172560 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x556d391725b8 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x556d39172560 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x556d391721e8 'obj' 'void *'
| |-IndirectFieldDecl 0x556d39172608 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x556d39172560 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x556d391722e0 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x556d39172658 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x556d39172560 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x556d39172350 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x556d391726a8 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x556d39172560 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x556d39172450 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x556d391726f8 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x556d39172560 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x556d391724c0 'queue' 'struct k_queue *'
|-FunctionDecl 0x556d39173430 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x556d39172790 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x556d39172800 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x556d39172878 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x556d391732f0 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x556d39226950 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x556d39226270 <line:4761:3>
|   | `-TextComment 0x556d39226240 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39226290 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x556d392262f0 <col:10, col:53>
|   |   `-TextComment 0x556d392262c0 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x556d39226360 <line:4763:3, line:4764:53>
|   | |-TextComment 0x556d39226310 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x556d39226330 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x556d392263b0 <line:4766:3>
|   | `-TextComment 0x556d39226380 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392263d0 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x556d39226480 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x556d39226430 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x556d39226450 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x556d392264a0 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x556d392265d0 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x556d39226500 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x556d39226520 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x556d39226540 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x556d39226560 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x556d39226580 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x556d392265f0 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x556d392266a0 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x556d39226650 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x556d39226670 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x556d392266c0 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x556d39226750 <col:14, col:43>
|   |   `-TextComment 0x556d39226720 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x556d392267a0 <line:4774:3>
|   | `-TextComment 0x556d39226770 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392267c0 <col:4, line:4775:3> Name="return"
|   | `-ParagraphComment 0x556d39226840 <line:4774:11, line:4775:3>
|   |   |-TextComment 0x556d392267f0 <line:4774:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39226810 <line:4775:3> Text=" "
|   |-VerbatimLineComment 0x556d39226860 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x556d392268d0 <line:4776:1>
|     `-TextComment 0x556d392268a0 <col:1> Text=" "
|-FunctionDecl 0x556d39173768 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x556d39173540 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x556d391735b8 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x556d39173628 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x556d39227570 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x556d392269f0 <line:4782:3>
|   | `-TextComment 0x556d392269c0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39226a10 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x556d39226a70 <col:10, col:63>
|   |   `-TextComment 0x556d39226a40 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x556d39226b10 <line:4784:3, line:4786:61>
|   | |-TextComment 0x556d39226a90 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x556d39226ab0 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x556d39226ad0 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x556d39226ca0 <line:4788:3, line:4796:68>
|   | |-TextComment 0x556d39226b30 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x556d39226b50 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x556d39226b70 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x556d39226b90 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x556d39226bb0 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x556d39226bd0 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x556d39226bf0 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x556d39226c10 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x556d39226c30 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x556d39226d40 <line:4798:3, line:4800:44>
|   | |-TextComment 0x556d39226cc0 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x556d39226ce0 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x556d39226d00 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x556d39226db0 <line:4802:3, line:4803:41>
|   | |-TextComment 0x556d39226d60 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x556d39226d80 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x556d39226e20 <line:4805:3, line:4806:30>
|   | |-TextComment 0x556d39226dd0 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x556d39226df0 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x556d39226e70 <line:4808:3>
|   | `-TextComment 0x556d39226e40 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39226e90 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x556d39226f40 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x556d39226ef0 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x556d39226f10 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x556d39226f60 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x556d39227010 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x556d39226fc0 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x556d39226fe0 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x556d39227030 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x556d39227110 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x556d39227090 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x556d392270b0 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x556d392270d0 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x556d39227450 <line:4814:3, line:4823:3>
|   | |-TextComment 0x556d39227130 <line:4814:3> Text=" "
|   | |-InlineCommandComment 0x556d39227150 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39227170 <col:11, col:42> Text=" 0 One or more events are ready."
|   | |-TextComment 0x556d39227190 <line:4815:3> Text=" "
|   | |-InlineCommandComment 0x556d392271b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392271d0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x556d392271f0 <line:4816:3> Text=" "
|   | |-InlineCommandComment 0x556d39227210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39227230 <col:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   | |-TextComment 0x556d39227250 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   | |-TextComment 0x556d39227270 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   | |-TextComment 0x556d39227290 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   | |-TextComment 0x556d392272b0 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   | |-TextComment 0x556d392272d0 <line:4821:3> Text=" "
|   | |-InlineCommandComment 0x556d392272f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39227310 <col:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   | |-TextComment 0x556d39227330 <line:4822:3> Text=" "
|   | |-InlineCommandComment 0x556d39227350 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39227370 <col:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|   | `-TextComment 0x556d39227390 <line:4823:3> Text=" "
|   |-VerbatimLineComment 0x556d39227470 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x556d392274e0 <line:4824:1>
|     `-TextComment 0x556d392274b0 <col:1> Text=" "
|-FunctionDecl 0x556d39173970 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x556d39173870 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x556d392279e0 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x556d39227610 <line:4830:3>
|   | `-TextComment 0x556d392275e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39227630 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x556d39227690 <col:10, col:42>
|   |   `-TextComment 0x556d39227660 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x556d392276e0 <line:4832:3, col:71>
|   | `-TextComment 0x556d392276b0 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x556d39227730 <line:4834:3>
|   | `-TextComment 0x556d39227700 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39227750 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x556d392277e0 <col:17, col:31>
|   |   `-TextComment 0x556d392277b0 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x556d39227830 <line:4836:3>
|   | `-TextComment 0x556d39227800 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39227850 <col:4, line:4837:3> Name="return"
|   | `-ParagraphComment 0x556d392278e0 <line:4836:11, line:4837:3>
|   |   |-TextComment 0x556d39227880 <line:4836:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d392278a0 <line:4837:3> Text=" "
|   |-VerbatimLineComment 0x556d39227900 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x556d39227970 <line:4838:1>
|     `-TextComment 0x556d39227940 <col:1> Text=" "
|-FunctionDecl 0x556d39173ac8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x556d39173a40 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x556d39173c20 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x556d39173b98 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x556d39173db8 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x556d39173d60 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x556d39173d08 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x556d391718f0
|     | `-ImplicitCastExpr 0x556d39173cf0 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x556d39173cc8 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x556d39173b98 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x556d39173d40 <col:21> 'unsigned int' 0
|-FunctionDecl 0x556d39174020 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x556d39173df8 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x556d39173e70 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x556d39173ee8 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x556d39227f30 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x556d39227a80 <line:4856:3>
|   | `-TextComment 0x556d39227a50 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39227aa0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x556d39227b00 <col:10, col:68>
|   |   `-TextComment 0x556d39227ad0 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x556d39227b50 <line:4858:3>
|   | `-TextComment 0x556d39227b20 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39227b70 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x556d39227c20 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x556d39227bd0 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x556d39227bf0 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x556d39227c40 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x556d39227d20 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x556d39227ca0 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x556d39227cc0 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x556d39227ce0 <line:4861:3> Text=" "
|   |-ParamCommandComment 0x556d39227d40 <col:4, line:4864:3> [in] implicitly Param="result" ParamIndex=2
|   | `-ParagraphComment 0x556d39227e40 <line:4861:17, line:4864:3>
|   |   |-TextComment 0x556d39227da0 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|   |   |-TextComment 0x556d39227dc0 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|   |   |-TextComment 0x556d39227de0 <line:4863:3, col:27> Text="		   value if it was not."
|   |   `-TextComment 0x556d39227e00 <line:4864:3> Text=" "
|   |-VerbatimLineComment 0x556d39227e60 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x556d39227ed0 <line:4865:1>
|     `-TextComment 0x556d39227ea0 <col:1> Text=" "
|-FunctionDecl 0x556d39174770 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x556d39174130 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x556d391741a8 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x556d392287a0 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x556d39227fd0 <line:4870:3>
|   | `-TextComment 0x556d39227fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39227ff0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x556d39228050 <col:10, col:38>
|   |   `-TextComment 0x556d39228020 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x556d39228170 <line:4872:3, line:4874:57>
|   | |-TextComment 0x556d39228070 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x556d39228090 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x556d392280b0 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x556d39228100 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x556d39228120 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x556d39228260 <line:4876:3, line:4880:27>
|   | |-TextComment 0x556d39228190 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x556d392281b0 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x556d392281d0 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x556d392281f0 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x556d39228210 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x556d392282b0 <line:4882:3>
|   | `-TextComment 0x556d39228280 <col:3> Text=" "
|   |-BlockCommandComment 0x556d392282d0 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x556d39228380 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x556d39228300 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x556d39228320 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x556d39228340 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x556d392283d0 <line:4886:3>
|   | `-TextComment 0x556d392283a0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392283f0 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x556d392284a0 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x556d39228450 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x556d39228470 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x556d392284c0 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x556d39228550 <col:17, col:70>
|   |   `-TextComment 0x556d39228520 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x556d39228690 <line:4889:3, line:4891:3>
|   | |-TextComment 0x556d39228570 <line:4889:3> Text=" "
|   | |-InlineCommandComment 0x556d39228590 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d392285b0 <col:11, col:51> Text=" 0 The signal was delivered successfully."
|   | |-TextComment 0x556d392285d0 <line:4890:3> Text=" "
|   | |-InlineCommandComment 0x556d392285f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x556d39228610 <col:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|   | `-TextComment 0x556d39228630 <line:4891:3> Text=" "
|   |-VerbatimLineComment 0x556d392286b0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x556d39228720 <line:4892:1>
|     `-TextComment 0x556d392286f0 <col:1> Text=" "
|-FunctionDecl 0x556d391749e0 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x556d39174858 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x556d391748c8 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x556d39228890 <line:4897:3, col:12>
|   `-ParagraphComment 0x556d39228860 <col:3, col:12>
|     |-TextComment 0x556d39228810 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39228830 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d39174b78 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x556d39174ca8 <line:4922:1, line:4924:1>
| | `-CallExpr 0x556d39174c58 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x556d39174c40 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x556d39174c18 <col:2> 'void (void)' Function 0x556d390ed300 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x556d39228e90 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x556d39228930 <line:4904:3>
|   | `-TextComment 0x556d39228900 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d39228950 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x556d392289c0 <line:4905:3>
|   | `-TextComment 0x556d39228990 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d392289e0 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x556d39228aa0 <line:4906:3, col:5>
|   | |-TextComment 0x556d39228a20 <col:3> Text=" "
|   | |-TextComment 0x556d39228a40 <col:4> Text="@"
|   | `-TextComment 0x556d39228a60 <col:5> Text="{"
|   |-ParagraphComment 0x556d39228af0 <line:4909:3>
|   | `-TextComment 0x556d39228ac0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39228b10 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x556d39228b70 <col:10, col:28>
|   |   `-TextComment 0x556d39228b40 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x556d39228bc0 <line:4911:3, col:63>
|   | `-TextComment 0x556d39228b90 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x556d39228c80 <line:4913:3, line:4916:59>
|   | |-TextComment 0x556d39228be0 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x556d39228c00 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x556d39228c20 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x556d39228c40 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x556d39228cd0 <line:4918:3>
|   | `-TextComment 0x556d39228ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39228cf0 <col:4, line:4919:3> Name="return"
|   | `-ParagraphComment 0x556d39228d70 <line:4918:11, line:4919:3>
|   |   |-TextComment 0x556d39228d20 <line:4918:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d39228d40 <line:4919:3> Text=" "
|   |-VerbatimLineComment 0x556d39228d90 <col:4, col:23> Text=" K-CPU-IDLE-001"
|   `-ParagraphComment 0x556d39228e00 <line:4920:1>
|     `-TextComment 0x556d39228dd0 <col:1> Text=" "
|-FunctionDecl 0x556d39174d60 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x556d39174cd8 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x556d39174f18 <line:4938:1, line:4940:1>
| | `-CallExpr 0x556d39174e70 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x556d39174e58 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x556d39174e08 <col:2> 'void (unsigned int)' Function 0x556d390ed4a0 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x556d39174ea0 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x556d39174e30 <col:23> 'unsigned int' lvalue ParmVar 0x556d39174cd8 'key' 'unsigned int'
| `-FullComment 0x556d39229310 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x556d39228f30 <line:4927:3>
|   | `-TextComment 0x556d39228f00 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39228f50 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x556d39228fb0 <col:10, col:49>
|   |   `-TextComment 0x556d39228f80 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x556d39229020 <line:4929:3, line:4930:54>
|   | |-TextComment 0x556d39228fd0 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x556d39228ff0 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x556d39229070 <line:4932:3>
|   | `-TextComment 0x556d39229040 <col:3> Text=" "
|   |-ParamCommandComment 0x556d39229090 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x556d39229120 <col:14, col:61>
|   |   `-TextComment 0x556d392290f0 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x556d39229170 <line:4934:3>
|   | `-TextComment 0x556d39229140 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39229190 <col:4, line:4935:3> Name="return"
|   | `-ParagraphComment 0x556d39229210 <line:4934:11, line:4935:3>
|   |   |-TextComment 0x556d392291c0 <line:4934:11, col:14> Text=" N/A"
|   |   `-TextComment 0x556d392291e0 <line:4935:3> Text=" "
|   |-VerbatimLineComment 0x556d39229230 <col:4, col:23> Text=" K-CPU-IDLE-002"
|   `-ParagraphComment 0x556d392292a0 <line:4936:1>
|     `-TextComment 0x556d39229270 <col:1> Text=" "
|-FunctionDecl 0x556d39175040 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x556d39174f40 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x556d39229400 <line:4947:3, col:12>
|   `-ParagraphComment 0x556d392293d0 <col:3, col:12>
|     |-TextComment 0x556d39229380 <col:3> Text=" "
|     `-InlineCommandComment 0x556d392293a0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d391754a0 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x556d39175200 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x556d39175278 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x556d391752e8 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x556d39175360 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x556d392294f0 <line:5006:3, col:12>
|   `-ParagraphComment 0x556d392294c0 <col:3, col:12>
|     |-TextComment 0x556d39229470 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39229490 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d39175648 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x556d392295e0 <line:5025:3, col:12>
|   `-ParagraphComment 0x556d392295b0 <col:3, col:12>
|     |-TextComment 0x556d39229560 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39229580 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d39177b78 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x556d39177af0 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x556d392296d0 <line:5029:3, col:12>
|   `-ParagraphComment 0x556d392296a0 <col:3, col:12>
|     |-TextComment 0x556d39229650 <col:3> Text=" "
|     `-InlineCommandComment 0x556d39229670 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x556d39177eb8 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x556d39177da8 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x556d39178058 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x556d39177fe0 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x556d39177fb8 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x556d39177fa0 <col:17> 'k_thread_stack_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x556d39177f60 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x556d39177da8 'sym' 'k_thread_stack_t *'
| `-FullComment 0x556d39229b30 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x556d39229770 <line:5168:3>
|   | `-TextComment 0x556d39229740 <col:3> Text=" "
|   |-BlockCommandComment 0x556d39229790 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x556d392297f0 <col:10, col:52>
|   |   `-TextComment 0x556d392297c0 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x556d39229860 <line:5170:3, line:5171:76>
|   | |-TextComment 0x556d39229810 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x556d39229830 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x556d392298b0 <line:5173:3>
|   | `-TextComment 0x556d39229880 <col:3> Text=" "
|   |-ParamCommandComment 0x556d392298f0 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x556d392299a0 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x556d39229950 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x556d39229970 <line:5174:3> Text=" "
|   |-BlockCommandComment 0x556d392299c0 <col:4, line:5175:3> Name="return"
|   | `-ParagraphComment 0x556d39229a40 <line:5174:11, line:5175:3>
|   |   |-TextComment 0x556d392299f0 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|   |   `-TextComment 0x556d39229a10 <line:5175:3> Text=" "
|   |-VerbatimLineComment 0x556d39229a60 <col:4, col:21> Text=" K-TSTACK-001"
|   `-ParagraphComment 0x556d39229ad0 <line:5176:1>
|     `-TextComment 0x556d39229aa0 <col:1> Text=" "
|-RecordDecl 0x556d39178070 prev 0x556d391282e8 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x556d39178138 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x556d39229c00 <line:5208:5, col:39>
| |   `-ParagraphComment 0x556d39229bd0 <col:5, col:39>
| |     `-TextComment 0x556d39229ba0 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x556d391781b8 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x556d39229cd0 <line:5210:5, col:30>
|     `-ParagraphComment 0x556d39229ca0 <col:5, col:30>
|       `-TextComment 0x556d39229c70 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x556d39178228 prev 0x556d39128260 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x556d39229e80 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x556d39229d70 <line:5219:3>
| | | `-TextComment 0x556d39229d40 <col:3> Text=" "
| | |-BlockCommandComment 0x556d39229d90 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x556d39229df0 <col:10, col:23>
| | |   `-TextComment 0x556d39229dc0 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x556d39229e40 <line:5221:1>
| |   `-TextComment 0x556d39229e10 <col:1> Text=" "
| |-FieldDecl 0x556d391782e8 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x556d39229f50 <line:5227:5, col:14>
| |   `-ParagraphComment 0x556d39229f20 <col:5, col:14>
| |     `-TextComment 0x556d39229ef0 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x556d39178368 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x556d3922a020 <line:5229:5, col:40>
|     `-ParagraphComment 0x556d39229ff0 <col:5, col:40>
|       `-TextComment 0x556d39229fc0 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x556d39178840 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x556d39178490 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x556d39178500 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x556d39178710 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x556d3922a5f0 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x556d3922a0c0 <line:5235:3>
|   | `-TextComment 0x556d3922a090 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3922a0e0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x556d3922a140 <col:10, col:37>
|   |   `-TextComment 0x556d3922a110 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x556d3922a190 <line:5237:3, col:68>
|   | `-TextComment 0x556d3922a160 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x556d3922a200 <line:5239:3, line:5240:25>
|   | |-TextComment 0x556d3922a1b0 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x556d3922a1d0 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x556d3922a250 <line:5242:3>
|   | `-TextComment 0x556d3922a220 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3922a270 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x556d3922a320 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x556d3922a2d0 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x556d3922a2f0 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x556d3922a340 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x556d3922a3f0 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x556d3922a3a0 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x556d3922a3c0 <line:5244:3> Text=" "
|   |-ParamCommandComment 0x556d3922a410 <col:4, line:5246:3> [in] implicitly Param="parts" ParamIndex=2
|   | `-ParagraphComment 0x556d3922a4f0 <line:5244:16, line:5246:3>
|   |   |-TextComment 0x556d3922a470 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|   |   |-TextComment 0x556d3922a490 <line:5245:3, col:37> Text="              if num_parts is zero."
|   |   `-TextComment 0x556d3922a4b0 <line:5246:3> Text=" "
|   |-VerbatimLineComment 0x556d3922a510 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x556d3922a580 <line:5247:1>
|     `-TextComment 0x556d3922a550 <col:1> Text=" "
|-FunctionDecl 0x556d39178a50 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x556d39178950 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x556d3922a970 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x556d3922a690 <line:5251:3>
|   | `-TextComment 0x556d3922a660 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3922a6b0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x556d3922a710 <col:10, col:34>
|   |   `-TextComment 0x556d3922a6e0 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x556d3922a760 <line:5253:3, col:27>
|   | `-TextComment 0x556d3922a730 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x556d3922a7b0 <line:5255:3>
|   | `-TextComment 0x556d3922a780 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3922a7d0 <col:4, line:5256:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x556d3922a880 <line:5255:17, line:5256:3>
|   |   |-TextComment 0x556d3922a830 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|   |   `-TextComment 0x556d3922a850 <line:5256:3> Text=" "
|   |-VerbatimLineComment 0x556d3922a8a0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x556d3922a910 <line:5257:1>
|     `-TextComment 0x556d3922a8e0 <col:1> Text=" "
|-FunctionDecl 0x556d39179380 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x556d391791e0 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x556d39179268 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x556d3922b010 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x556d3922aa10 <line:5261:3>
|   | `-TextComment 0x556d3922a9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3922aa30 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x556d3922aa90 <col:10, col:54>
|   |   `-TextComment 0x556d3922aa60 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x556d3922ab00 <line:5263:3, line:5264:29>
|   | |-TextComment 0x556d3922aab0 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x556d3922aad0 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x556d3922acb0 <line:5266:3, line:5275:28>
|   | |-TextComment 0x556d3922ab20 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x556d3922ab40 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x556d3922ab60 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x556d3922ab80 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x556d3922aba0 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x556d3922abc0 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x556d3922abe0 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x556d3922ac00 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x556d3922ac20 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x556d3922ac40 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x556d3922ad20 <line:5277:3, line:5278:12>
|   | |-TextComment 0x556d3922acd0 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x556d3922acf0 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x556d3922ad70 <line:5280:3>
|   | `-TextComment 0x556d3922ad40 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3922ad90 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x556d3922ae40 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x556d3922adf0 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x556d3922ae10 <line:5281:3> Text=" "
|   |-ParamCommandComment 0x556d3922ae60 <col:4, line:5282:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x556d3922af10 <line:5281:15, line:5282:3>
|   |   |-TextComment 0x556d3922aec0 <line:5281:15, col:47> Text=" The memory partition to be added"
|   |   `-TextComment 0x556d3922aee0 <line:5282:3> Text=" "
|   |-VerbatimLineComment 0x556d3922af30 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x556d3922afa0 <line:5283:1>
|     `-TextComment 0x556d3922af70 <col:1> Text=" "
|-FunctionDecl 0x556d39179598 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x556d39179480 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x556d39179508 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x556d3922b460 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x556d3922b0b0 <line:5288:3>
|   | `-TextComment 0x556d3922b080 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3922b0d0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x556d3922b130 <col:10, col:57>
|   |   `-TextComment 0x556d3922b100 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x556d3922b180 <line:5290:3, col:50>
|   | `-TextComment 0x556d3922b150 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x556d3922b1d0 <line:5292:3>
|   | `-TextComment 0x556d3922b1a0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3922b1f0 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x556d3922b2a0 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x556d3922b250 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x556d3922b270 <line:5293:3> Text=" "
|   |-ParamCommandComment 0x556d3922b2c0 <col:4, line:5294:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x556d3922b370 <line:5293:15, line:5294:3>
|   |   |-TextComment 0x556d3922b320 <line:5293:15, col:49> Text=" The memory partition to be removed"
|   |   `-TextComment 0x556d3922b340 <line:5294:3> Text=" "
|   |-VerbatimLineComment 0x556d3922b390 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x556d3922b400 <line:5295:1>
|     `-TextComment 0x556d3922b3d0 <col:1> Text=" "
|-FunctionDecl 0x556d39179820 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x556d391796a0 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x556d39179710 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d3922b900 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x556d3922b500 <line:5300:3>
|   | `-TextComment 0x556d3922b4d0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3922b520 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x556d3922b580 <col:10, col:44>
|   |   `-TextComment 0x556d3922b550 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x556d3922b5d0 <line:5302:3, col:37>
|   | `-TextComment 0x556d3922b5a0 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x556d3922b620 <line:5304:3>
|   | `-TextComment 0x556d3922b5f0 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3922b640 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x556d3922b6f0 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x556d3922b6a0 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x556d3922b6c0 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x556d3922b710 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x556d3922b7a0 <col:17, col:71>
|   |   `-TextComment 0x556d3922b770 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   |-ParagraphComment 0x556d3922b7f0 <line:5307:3>
|   | `-TextComment 0x556d3922b7c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x556d3922b810 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x556d3922b880 <line:5308:1>
|     `-TextComment 0x556d3922b850 <col:1> Text=" "
|-FunctionDecl 0x556d39179990 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x556d39179908 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x556d3922bc80 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x556d3922b9a0 <line:5313:3>
|   | `-TextComment 0x556d3922b970 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3922b9c0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x556d3922ba20 <col:10, col:49>
|   |   `-TextComment 0x556d3922b9f0 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x556d3922ba70 <line:5315:3, col:42>
|   | `-TextComment 0x556d3922ba40 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x556d3922bac0 <line:5317:3>
|   | `-TextComment 0x556d3922ba90 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3922bae0 <col:4, line:5318:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d3922bb90 <line:5317:17, line:5318:3>
|   |   |-TextComment 0x556d3922bb40 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|   |   `-TextComment 0x556d3922bb60 <line:5318:3> Text=" "
|   |-VerbatimLineComment 0x556d3922bbb0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x556d3922bc20 <line:5319:1>
|     `-TextComment 0x556d3922bbf0 <col:1> Text=" "
|-FunctionDecl 0x556d39179b88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x556d39179ac0 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x556d3922c2a0 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x556d3922bd20 <line:5337:3>
|   | `-TextComment 0x556d3922bcf0 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3922bd40 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x556d3922bda0 <col:10, col:69>
|   |   `-TextComment 0x556d3922bd70 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x556d3922be10 <line:5339:3, line:5340:56>
|   | |-TextComment 0x556d3922bdc0 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x556d3922bde0 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x556d3922be60 <line:5342:3>
|   | `-TextComment 0x556d3922be30 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3922be80 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x556d3922bf00 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x556d3922beb0 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x556d3922bed0 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x556d3922bf50 <line:5346:3>
|   | `-TextComment 0x556d3922bf20 <col:3> Text=" "
|   |-BlockCommandComment 0x556d3922bf70 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x556d3922bff0 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x556d3922bfa0 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x556d3922bfc0 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x556d3922c040 <line:5350:3>
|   | `-TextComment 0x556d3922c010 <col:3> Text=" "
|   |-ParamCommandComment 0x556d3922c060 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x556d3922c0f0 <col:17, col:30>
|   |   `-TextComment 0x556d3922c0c0 <col:17, col:30> Text=" ID of thread."
|   `-ParagraphComment 0x556d3922c230 <line:5352:3, line:5354:74>
|     |-TextComment 0x556d3922c110 <line:5352:3> Text=" "
|     |-InlineCommandComment 0x556d3922c130 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d3922c150 <col:11, col:30> Text=" 0       On success."
|     |-TextComment 0x556d3922c170 <line:5353:3> Text=" "
|     |-InlineCommandComment 0x556d3922c190 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x556d3922c1b0 <col:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|     `-TextComment 0x556d3922c1d0 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x556d3917eaf0 prev 0x556d3912a6f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x556d39179fd0 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x556d3917a058 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x556d3917ecd0 prev 0x556d3912c820 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x556d3917ebb8 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x556d3917ec40 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x556d3917efd8 <line:26:1, line:35:1>
|   |-DoStmt 0x556d3917ee60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3917ee28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3917edd8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3917ee40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d3917ef70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x556d3917ef58 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d3917ee80 <col:2> 'void (void *, struct k_thread *)' Function 0x556d3917eaf0 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x556d3917efa8 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d3917eea8 <col:31> 'void *' lvalue ParmVar 0x556d3917ebb8 'object' 'void *'
|     `-ImplicitCastExpr 0x556d3917efc0 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x556d3917eed0 <col:39> 'struct k_thread *' lvalue ParmVar 0x556d3917ec40 'thread' 'struct k_thread *'
|-FunctionDecl 0x556d3917f098 prev 0x556d3912c318 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x556d3917f010 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x556d3917f1e0 prev 0x556d3912cba8 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x556d3917f158 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x556d3917f438 <line:40:1, line:49:1>
|   |-DoStmt 0x556d3917f368 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3917f330 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3917f2e0 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3917f348 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d3917f3f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x556d3917f3d8 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d3917f388 <col:2> 'void (void *)' Function 0x556d3917f098 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x556d3917f420 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x556d3917f3b0 <col:26> 'void *' lvalue ParmVar 0x556d3917f158 'object' 'void *'
|-FunctionDecl 0x556d3917f508 prev 0x556d3912d0c8 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x556d3917f478 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x556d3917f660 prev 0x556d3912cf70 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x556d3917f5d0 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x556d3917f930 <line:54:1, line:62:1>
|   |-DoStmt 0x556d3917f7e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3917f7b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3917f760 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3917f7c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3917f918 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x556d3917f8d0 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x556d3917f8b8 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3917f808 <col:9> 'void *(enum k_objects)' Function 0x556d3917f508 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x556d3917f900 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x556d3917f830 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x556d3917f5d0 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x556d3917fe90 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x556d3917f978 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x556d3917f9e8 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x556d3917fa58 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d3917fb00 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x556d3917fb78 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x556d3917fbf0 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x556d3917fc68 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x556d3917fce0 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x556d3917fd50 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x556d3917fdc0 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x556d39180488 prev 0x556d391319c0 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x556d3917ffa8 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x556d39180018 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x556d39180088 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d391800f8 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x556d39180170 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x556d391801e8 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x556d39180260 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x556d391802d8 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x556d39180348 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x556d391803b8 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x556d39180a20 <line:67:1, line:82:1>
|   |-DoStmt 0x556d39180658 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39180620 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391805d0 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39180638 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39180a08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x556d391808a0 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x556d39180888 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39180678 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x556d3917fe90 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x556d39180918 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391806a0 <col:32> 'struct k_thread *' lvalue ParmVar 0x556d3917ffa8 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x556d39180930 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391806c8 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x556d39180018 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x556d39180948 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391806f0 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x556d39180088 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x556d39180960 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39180718 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x556d391800f8 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x556d39180978 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39180740 <col:70> 'void *' lvalue ParmVar 0x556d39180170 'p1' 'void *'
|       |-ImplicitCastExpr 0x556d39180990 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39180768 <col:74> 'void *' lvalue ParmVar 0x556d391801e8 'p2' 'void *'
|       |-ImplicitCastExpr 0x556d391809a8 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39180790 <col:78> 'void *' lvalue ParmVar 0x556d39180260 'p3' 'void *'
|       |-ImplicitCastExpr 0x556d391809c0 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391807b8 <col:82> 'int' lvalue ParmVar 0x556d391802d8 'prio' 'int'
|       |-ImplicitCastExpr 0x556d391809d8 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391807e0 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x556d39180348 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x556d391809f0 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d39180808 <col:97> 's32_t':'int' lvalue ParmVar 0x556d391803b8 'delay' 's32_t':'int'
|-FunctionDecl 0x556d39180b10 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x556d39180a50 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x556d39180c50 prev 0x556d39135450 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x556d39180bc8 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x556d39180f20 <line:87:1, line:95:1>
|   |-DoStmt 0x556d39180dd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39180da0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39180d50 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39180db8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39180f08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x556d39180ec0 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x556d39180ea8 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39180df8 <col:9> 's32_t (s32_t)' Function 0x556d39180b10 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x556d39180ef0 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d39180e20 <col:24> 's32_t':'int' lvalue ParmVar 0x556d39180bc8 'ms' 's32_t':'int'
|-FunctionDecl 0x556d39180fd8 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x556d39180f50 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x556d39181118 prev 0x556d391355c0 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x556d39181090 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x556d39181388 <line:100:1, line:108:1>
|   |-DoStmt 0x556d391812a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39181268 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39181218 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39181280 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39181370 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x556d39181328 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x556d39181310 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d391812c0 <col:9> 's32_t (s32_t)' Function 0x556d39180fd8 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x556d39181358 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d391812e8 <col:25> 's32_t':'int' lvalue ParmVar 0x556d39181090 'us' 's32_t':'int'
|-FunctionDecl 0x556d39181440 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x556d391813b8 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x556d39181580 prev 0x556d39135770 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x556d391814f8 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x556d39181808 <line:113:1, line:122:1>
|   |-DoStmt 0x556d39181708 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391816d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39181680 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391816e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d391817c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x556d391817a8 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39181728 <col:2> 'void (u32_t)' Function 0x556d39181440 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x556d391817f0 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x556d39181750 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x556d391814f8 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x556d39181848 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x556d39181908 prev 0x556d391358d8 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x556d39181b48 <line:127:1, line:136:1>
|   |-DoStmt 0x556d39181a88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39181a50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39181a00 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39181a68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39181b20 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x556d39181af8 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x556d39181aa8 <col:2> 'void ()' Function 0x556d39181848 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x556d39181c00 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x556d39181b78 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39181d40 prev 0x556d39135ac0 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39181cb8 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x556d39181ff8 <line:141:1, line:150:1>
|   |-DoStmt 0x556d39181ec8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39181e90 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39181e40 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39181ea8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39181fb0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x556d39181f98 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39181ee8 <col:2> 'void (k_tid_t)' Function 0x556d39181c00 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x556d39181fe0 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39181f10 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d39181cb8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39182098 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x556d39182158 prev 0x556d39135cb0 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x556d391823d0 <line:155:1, line:163:1>
|   |-DoStmt 0x556d391822d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391822a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39182250 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391822b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d391823b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x556d39182390 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x556d39182378 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556d391822f8 <col:9> 'k_tid_t ()' Function 0x556d39182098 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x556d39182488 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x556d39182400 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d391825c8 prev 0x556d39135e10 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39182540 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x556d39182820 <line:168:1, line:177:1>
|   |-DoStmt 0x556d39182750 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39182718 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391826c8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39182730 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d391827d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x556d391827c0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39182770 <col:2> 'void (k_tid_t)' Function 0x556d39182488 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x556d39182808 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39182798 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d39182540 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d391828d8 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x556d39182850 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39182a18 prev 0x556d39135f80 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39182990 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x556d39182c88 <line:182:1, line:191:1>
|   |-DoStmt 0x556d39182bb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39182b80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39182b30 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39182b98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39182c40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x556d39182c28 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39182bd8 <col:2> 'void (k_tid_t)' Function 0x556d391828d8 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x556d39182c70 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39182c00 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d39182990 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39182d48 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x556d39182cb8 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39182e90 prev 0x556d391367a8 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39182e00 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x556d39183160 <line:196:1, line:204:1>
|   |-DoStmt 0x556d39183018 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39182fe0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39182f90 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39182ff8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39183148 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x556d39183100 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x556d391830e8 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39183038 <col:9> 'int (k_tid_t)' Function 0x556d39182d48 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x556d39183130 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39183060 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d39182e00 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39183298 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x556d39183190 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x556d39183208 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x556d39183460 prev 0x556d39136a10 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x556d39183358 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x556d391833d0 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x556d39183768 <line:209:1, line:218:1>
|   |-DoStmt 0x556d391835f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391835b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39183568 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391835d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39183700 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x556d391836e8 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39183610 <col:2> 'void (k_tid_t, int)' Function 0x556d39183298 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x556d39183738 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d39183638 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d39183358 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x556d39183750 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x556d39183660 <col:39> 'int' lvalue ParmVar 0x556d391833d0 'prio' 'int'
|-FunctionDecl 0x556d391838a0 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x556d39183798 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x556d39183810 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x556d39183a68 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x556d39183960 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x556d391839d8 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x556d39183d38 <line:223:1, line:232:1>
|   |-DoStmt 0x556d39183c20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39183be8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39183b98 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39183c00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39183cd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x556d39183cb8 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39183c40 <col:2> 'void (k_tid_t, int)' Function 0x556d391838a0 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x556d39183d08 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d39183c68 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d39183960 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x556d39183d20 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x556d39183c90 <col:39> 'int' lvalue ParmVar 0x556d391839d8 'deadline' 'int'
|-FunctionDecl 0x556d39183df0 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x556d39183d68 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39183f30 prev 0x556d39137290 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d39183ea8 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x556d39184188 <line:237:1, line:246:1>
|   |-DoStmt 0x556d391840b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39184080 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39184030 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39184098 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39184140 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x556d39184128 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d391840d8 <col:2> 'void (k_tid_t)' Function 0x556d39183df0 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x556d39184170 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39184100 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d39183ea8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39184240 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x556d391841b8 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39184380 prev 0x556d39137400 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x556d391842f8 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x556d391845d8 <line:251:1, line:260:1>
|   |-DoStmt 0x556d39184508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391844d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39184480 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391844e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39184590 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x556d39184578 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39184528 <col:2> 'void (k_tid_t)' Function 0x556d39184240 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x556d391845c0 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39184550 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d391842f8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x556d39184650 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x556d39184718 prev 0x556d391379a0 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x556d39184960 <line:265:1, line:273:1>
|   |-DoStmt 0x556d39184898 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39184860 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39184810 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39184878 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39184948 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x556d39184920 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x556d39184908 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556d391848b8 <col:9> 'int ()' Function 0x556d39184650 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x556d39184a20 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x556d39184998 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x556d39184b78 prev 0x556d391380c8 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x556d39184ae0 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x556d39184dd0 <line:278:1, line:287:1>
|   |-DoStmt 0x556d39184d00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39184cc8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39184c78 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39184ce0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39184d88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x556d39184d70 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39184d20 <col:2> 'void (void *)' Function 0x556d39184a20 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x556d39184db8 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39184d48 <col:34> 'void *' lvalue ParmVar 0x556d39184ae0 'value' 'void *'
|-FunctionDecl 0x556d39184e40 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x556d39184f08 prev 0x556d391382a0 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x556d39185150 <line:292:1, line:300:1>
|   |-DoStmt 0x556d39185088 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39185050 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39185000 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39185068 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39185138 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x556d39185110 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x556d391850f8 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556d391850a8 <col:9> 'void *()' Function 0x556d39184e40 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x556d39185290 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x556d39185180 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x556d391851f8 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x556d39185460 prev 0x556d39138508 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x556d39185350 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x556d391853c8 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x556d39185780 <line:305:1, line:313:1>
|   |-DoStmt 0x556d391855f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391855b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39185568 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391855d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39185768 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x556d39185700 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x556d391856e8 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39185610 <col:9> 'int (k_tid_t, const char *)' Function 0x556d39185290 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x556d39185738 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39185638 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d39185350 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x556d39185750 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39185660 <col:45> 'const char *' lvalue ParmVar 0x556d391853c8 'value' 'const char *'
|-FunctionDecl 0x556d39185938 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x556d391857b0 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x556d39185828 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x556d39185898 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x556d39185ba0 prev 0x556d39138a08 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x556d39185a00 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x556d39185a78 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x556d39185ae8 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x556d39185f10 <line:318:1, line:326:1>
|   |-DoStmt 0x556d39185d38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39185d00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39185cb0 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39185d18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39185ef8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x556d39185e70 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x556d39185e58 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39185d58 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x556d39185938 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x556d39185eb0 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39185d80 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x556d39185a00 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x556d39185ec8 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39185da8 <col:46> 'char *' lvalue ParmVar 0x556d39185a78 'buf' 'char *'
|       `-ImplicitCastExpr 0x556d39185ee0 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x556d39185dd0 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x556d39185ae8 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x556d391860d0 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x556d39185f58 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x556d39185fc8 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x556d39186038 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x556d39186328 prev 0x556d3913be80 <line:330:1, line:340:1> line:330:20 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x556d391861b0 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x556d39186220 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x556d39186290 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x556d39186678 <line:331:1, line:340:1>
|   |-DoStmt 0x556d391864c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39186488 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39186438 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391864a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d391865f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x556d391865d8 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d391864e0 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x556d391860d0 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x556d39186630 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d39186508 <col:23> 'struct k_timer *' lvalue ParmVar 0x556d391861b0 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x556d39186648 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x556d39186530 <col:30> 's32_t':'int' lvalue ParmVar 0x556d39186220 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x556d39186660 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x556d39186558 <col:40> 's32_t':'int' lvalue ParmVar 0x556d39186290 'period' 's32_t':'int'
|-FunctionDecl 0x556d39186748 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x556d391866c0 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x556d391868a0 prev 0x556d3913c018 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x556d39186818 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x556d39186b28 <line:345:1, line:354:1>
|   |-DoStmt 0x556d39186a28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391869f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391869a0 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39186a08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39186ae0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x556d39186ac8 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39186a48 <col:2> 'void (struct k_timer *)' Function 0x556d39186748 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x556d39186b10 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39186a70 <col:22> 'struct k_timer *' lvalue ParmVar 0x556d39186818 'timer' 'struct k_timer *'
|-FunctionDecl 0x556d39187430 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x556d391873a8 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x556d39187588 prev 0x556d3913c210 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x556d39187500 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x556d39187850 <line:359:1, line:367:1>
|   |-DoStmt 0x556d39187710 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391876d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39187688 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391876f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39187838 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x556d391877f0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x556d391877d8 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39187730 <col:9> 'u32_t (struct k_timer *)' Function 0x556d39187430 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x556d39187820 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39187758 <col:35> 'struct k_timer *' lvalue ParmVar 0x556d39187500 'timer' 'struct k_timer *'
|-FunctionDecl 0x556d39187920 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x556d39187898 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x556d39187a78 prev 0x556d3913cc08 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x556d391879f0 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x556d39187ce8 <line:372:1, line:380:1>
|   |-DoStmt 0x556d39187c00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39187bc8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39187b78 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39187be0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39187cd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x556d39187c88 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x556d39187c70 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39187c20 <col:9> 'u32_t (struct k_timer *)' Function 0x556d39187920 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x556d39187cb8 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39187c48 <col:36> 'struct k_timer *' lvalue ParmVar 0x556d391879f0 'timer' 'struct k_timer *'
|-FunctionDecl 0x556d39187db8 prev 0x556d3913d0c0 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x556d39187d30 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x556d39187f10 prev 0x556d3913cf68 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x556d39187e88 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x556d39188180 <line:385:1, line:393:1>
|   |-DoStmt 0x556d39188098 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39188060 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39188010 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39188078 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39188168 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x556d39188120 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x556d39188108 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d391880b8 <col:9> 'u32_t (struct k_timer *)' Function 0x556d39187db8 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x556d39188150 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x556d391880e0 <col:38> 'struct k_timer *' lvalue ParmVar 0x556d39187e88 'timer' 'struct k_timer *'
|-FunctionDecl 0x556d391882d0 prev 0x556d3913da28 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x556d391881c8 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x556d39188240 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x556d391884c0 prev 0x556d3913d820 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x556d391883b8 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x556d39188430 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x556d391887c8 <line:398:1, line:407:1>
|   |-DoStmt 0x556d39188650 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39188618 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391885c8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39188630 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39188760 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x556d39188748 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39188670 <col:2> 'void (struct k_timer *, void *)' Function 0x556d391882d0 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x556d39188798 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d39188698 <col:31> 'struct k_timer *' lvalue ParmVar 0x556d391883b8 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x556d391887b0 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x556d391886c0 <col:38> 'void *' lvalue ParmVar 0x556d39188430 'user_data' 'void *'
|-FunctionDecl 0x556d391888a0 prev 0x556d3913e2c8 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x556d39188810 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x556d39188a00 prev 0x556d3913e168 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x556d39188970 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x556d39188cd0 <line:412:1, line:420:1>
|   |-DoStmt 0x556d39188b88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39188b50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39188b00 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39188b68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39188cb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x556d39188c70 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x556d39188c58 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39188ba8 <col:9> 'void *(struct k_timer *)' Function 0x556d391888a0 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x556d39188ca0 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39188bd0 <col:38> 'struct k_timer *' lvalue ParmVar 0x556d39188970 'timer' 'struct k_timer *'
|-FunctionDecl 0x556d39188d68 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x556d39188e28 prev 0x556d3913e550 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x556d391890a0 <line:425:1, line:435:1>
|   |-DoStmt 0x556d39188fa8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39188f70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39188f20 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39188f88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39189088 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x556d39189060 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x556d39189048 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556d39188fc8 <col:9> 's64_t ()' Function 0x556d39188d68 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x556d39189170 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x556d391890e8 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x556d391892c8 prev 0x556d39140a40 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x556d39189240 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x556d391895a8 <line:440:1, line:449:1>
|   |-DoStmt 0x556d39189480 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39189448 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391893f8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39189460 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39189560 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x556d39189548 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d391894a0 <col:2> 'void (struct k_queue *)' Function 0x556d39189170 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x556d39189590 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x556d391894c8 <col:22> 'struct k_queue *' lvalue ParmVar 0x556d39189240 'queue' 'struct k_queue *'
|-FunctionDecl 0x556d39189678 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x556d391895f0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x556d391897d0 prev 0x556d39140bc8 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x556d39189748 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x556d39189a28 <line:454:1, line:463:1>
|   |-DoStmt 0x556d39189958 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39189920 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391898d0 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39189938 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d391899e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x556d391899c8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39189978 <col:2> 'void (struct k_queue *)' Function 0x556d39189678 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x556d39189a10 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x556d391899a0 <col:29> 'struct k_queue *' lvalue ParmVar 0x556d39189748 'queue' 'struct k_queue *'
|-FunctionDecl 0x556d39189b78 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x556d39189a70 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x556d39189ae8 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x556d39189d58 prev 0x556d391410e0 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x556d39189c50 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x556d39189cc8 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x556d3918a018 <line:468:1, line:476:1>
|   |-DoStmt 0x556d39189ee8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39189eb0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39189e60 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39189ec8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918a000 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x556d39189f98 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x556d39189f80 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39189f08 <col:9> 's32_t (struct k_queue *, void *)' Function 0x556d39189b78 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x556d39189fd0 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39189f30 <col:37> 'struct k_queue *' lvalue ParmVar 0x556d39189c50 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x556d39189fe8 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39189f58 <col:44> 'void *' lvalue ParmVar 0x556d39189cc8 'data' 'void *'
|-FunctionDecl 0x556d3918a168 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x556d3918a060 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x556d3918a0d8 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x556d3918a3b0 prev 0x556d391414f8 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x556d3918a240 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x556d3918a2b8 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x556d3918a670 <line:481:1, line:489:1>
|   |-DoStmt 0x556d3918a540 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918a508 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918a4b8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918a520 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918a658 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x556d3918a5f0 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x556d3918a5d8 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918a560 <col:9> 's32_t (struct k_queue *, void *)' Function 0x556d3918a168 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x556d3918a628 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918a588 <col:38> 'struct k_queue *' lvalue ParmVar 0x556d3918a240 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x556d3918a640 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918a5b0 <col:45> 'void *' lvalue ParmVar 0x556d3918a2b8 'data' 'void *'
|-FunctionDecl 0x556d3918a7c0 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x556d3918a6b8 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x556d3918a728 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x556d3918a9a0 prev 0x556d39142088 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x556d3918a898 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x556d3918a908 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d3918acc0 <line:494:1, line:502:1>
|   |-DoStmt 0x556d3918ab30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918aaf8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918aaa8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918ab10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918aca8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x556d3918ac40 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x556d3918ac28 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918ab50 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x556d3918a7c0 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x556d3918ac78 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918ab78 <col:28> 'struct k_queue *' lvalue ParmVar 0x556d3918a898 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x556d3918ac90 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918aba0 <col:35> 's32_t':'int' lvalue ParmVar 0x556d3918a908 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d3918ad98 prev 0x556d39143268 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x556d3918ad08 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x556d3918aef8 prev 0x556d39143108 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x556d3918ae68 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x556d3918b1c0 <line:507:1, line:515:1>
|   |-DoStmt 0x556d3918b080 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918b048 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918aff8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918b060 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918b1a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x556d3918b160 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x556d3918b148 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918b0a0 <col:9> 'int (struct k_queue *)' Function 0x556d3918ad98 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x556d3918b190 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918b0c8 <col:33> 'struct k_queue *' lvalue ParmVar 0x556d3918ae68 'queue' 'struct k_queue *'
|-FunctionDecl 0x556d3918b298 prev 0x556d391440c0 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x556d3918b208 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x556d3918b450 prev 0x556d391435e8 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x556d3918b3c0 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x556d3918b720 <line:520:1, line:528:1>
|   |-DoStmt 0x556d3918b5d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918b5a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918b550 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918b5b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918b708 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x556d3918b6c0 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x556d3918b6a8 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918b5f8 <col:9> 'void *(struct k_queue *)' Function 0x556d3918b298 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x556d3918b6f0 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918b620 <col:34> 'struct k_queue *' lvalue ParmVar 0x556d3918b3c0 'queue' 'struct k_queue *'
|-FunctionDecl 0x556d3918b7f8 prev 0x556d391445f8 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x556d3918b768 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x556d3918b958 prev 0x556d39144498 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x556d3918b8c8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x556d3918bbc8 <line:533:1, line:541:1>
|   |-DoStmt 0x556d3918bae0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918baa8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918ba58 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918bac0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918bbb0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x556d3918bb68 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x556d3918bb50 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918bb00 <col:9> 'void *(struct k_queue *)' Function 0x556d3918b7f8 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x556d3918bb98 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918bb28 <col:34> 'struct k_queue *' lvalue ParmVar 0x556d3918b8c8 'queue' 'struct k_queue *'
|-FunctionDecl 0x556d3918bec8 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x556d3918bca0 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x556d3918bd18 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x556d3918bd88 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x556d3918c130 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x556d3918bfa8 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x556d3918c020 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x556d3918c090 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d3918c4b0 <line:546:1, line:554:1>
|   |-DoStmt 0x556d3918c2c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918c290 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918c240 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918c2a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918c498 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x556d3918c410 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x556d3918c3f8 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918c2e8 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x556d3918bec8 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x556d3918c450 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918c310 <col:29> 'struct k_futex *' lvalue ParmVar 0x556d3918bfa8 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x556d3918c468 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918c338 <col:36> 'int' lvalue ParmVar 0x556d3918c020 'expected' 'int'
|       `-ImplicitCastExpr 0x556d3918c480 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918c360 <col:46> 's32_t':'int' lvalue ParmVar 0x556d3918c090 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d3918c688 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x556d3918c4f8 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x556d3918c568 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x556d3918c868 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x556d3918c760 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x556d3918c7d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x556d3918cb80 <line:559:1, line:567:1>
|   |-DoStmt 0x556d3918c9f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918c9c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918c970 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918c9d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918cb68 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x556d3918cb00 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x556d3918cae8 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918ca18 <col:9> 'int (struct k_futex *, bool)' Function 0x556d3918c688 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x556d3918cb38 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918ca40 <col:29> 'struct k_futex *' lvalue ParmVar 0x556d3918c760 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x556d3918cb50 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918ca68 <col:36> 'bool' lvalue ParmVar 0x556d3918c7d0 'wake_all' 'bool'
|-FunctionDecl 0x556d3918ccc8 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x556d3918cbc8 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x556d3918cc38 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x556d3918cea0 prev 0x556d390426e0 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x556d3918cda0 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x556d3918ce10 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x556d3918d1c0 <line:572:1, line:580:1>
|   |-DoStmt 0x556d3918d030 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918cff8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918cfa8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918d010 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918d1a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x556d3918d140 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x556d3918d128 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918d050 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x556d3918ccc8 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x556d3918d178 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918d078 <col:35> 'struct k_stack *' lvalue ParmVar 0x556d3918cda0 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x556d3918d190 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918d0a0 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x556d3918ce10 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x556d3918d310 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x556d3918d208 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x556d3918d278 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x556d3918d510 prev 0x556d39042b68 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x556d3918d408 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x556d3918d478 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x556d3918d830 <line:585:1, line:593:1>
|   |-DoStmt 0x556d3918d6a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918d668 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918d618 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918d680 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918d818 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x556d3918d7b0 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x556d3918d798 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918d6c0 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x556d3918d310 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x556d3918d7e8 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918d6e8 <col:29> 'struct k_stack *' lvalue ParmVar 0x556d3918d408 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x556d3918d800 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918d710 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x556d3918d478 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x556d3918d9f8 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x556d3918d878 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x556d3918d8e8 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x556d3918d958 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x556d3918dc58 prev 0x556d39043208 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x556d3918dad8 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x556d3918db48 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x556d3918dbb8 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d3918dfc0 <line:598:1, line:606:1>
|   |-DoStmt 0x556d3918ddf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918ddb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918dd68 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918ddd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918dfa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x556d3918df20 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x556d3918df08 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918de10 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x556d3918d9f8 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x556d3918df60 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918de38 <col:28> 'struct k_stack *' lvalue ParmVar 0x556d3918dad8 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x556d3918df78 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918de60 <col:35> 'stack_data_t *' lvalue ParmVar 0x556d3918db48 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x556d3918df90 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918de88 <col:41> 's32_t':'int' lvalue ParmVar 0x556d3918dbb8 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d3918e098 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x556d3918e008 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x556d3918e1f8 prev 0x556d3915ba08 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x556d3918e168 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x556d3918e4f0 <line:611:1, line:619:1>
|   |-DoStmt 0x556d3918e380 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918e348 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918e2f8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918e360 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918e4d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x556d3918e490 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x556d3918e478 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918e3a0 <col:9> 'int (struct k_mutex *)' Function 0x556d3918e098 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x556d3918e4c0 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918e3f0 <col:29> 'struct k_mutex *' lvalue ParmVar 0x556d3918e168 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x556d3918e640 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x556d3918e538 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x556d3918e5a8 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x556d3918e820 prev 0x556d3915bc88 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x556d3918e718 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x556d3918e788 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d3918eb40 <line:624:1, line:632:1>
|   |-DoStmt 0x556d3918e9b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918e978 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918e928 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918e990 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918eb28 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x556d3918eac0 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x556d3918eaa8 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918e9d0 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x556d3918e640 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x556d3918eaf8 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918e9f8 <col:29> 'struct k_mutex *' lvalue ParmVar 0x556d3918e718 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x556d3918eb10 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918ea20 <col:36> 's32_t':'int' lvalue ParmVar 0x556d3918e788 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d3918ec18 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x556d3918eb88 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x556d3918ed78 prev 0x556d3915be20 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x556d3918ece8 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x556d3918efe8 <line:637:1, line:645:1>
|   |-DoStmt 0x556d3918ef00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918eec8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918ee78 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918eee0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918efd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x556d3918ef88 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x556d3918ef70 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918ef20 <col:9> 'int (struct k_mutex *)' Function 0x556d3918ec18 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x556d3918efb8 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918ef48 <col:31> 'struct k_mutex *' lvalue ParmVar 0x556d3918ece8 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x556d3918f1c0 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x556d3918f030 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x556d3918f0a8 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x556d3918f120 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x556d3918f430 prev 0x556d3915c428 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x556d3918f2a0 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x556d3918f318 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x556d3918f390 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x556d3918f7a0 <line:650:1, line:658:1>
|   |-DoStmt 0x556d3918f5c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918f590 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918f540 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918f5a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918f788 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x556d3918f700 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x556d3918f6e8 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918f5e8 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x556d3918f1c0 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x556d3918f740 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918f610 <col:27> 'struct k_sem *' lvalue ParmVar 0x556d3918f2a0 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x556d3918f758 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918f638 <col:32> 'unsigned int' lvalue ParmVar 0x556d3918f318 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x556d3918f770 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918f660 <col:47> 'unsigned int' lvalue ParmVar 0x556d3918f390 'limit' 'unsigned int'
|-FunctionDecl 0x556d3918f8f0 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x556d3918f7e8 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x556d3918f858 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x556d3918fad0 prev 0x556d3915c6b8 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x556d3918f9c8 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x556d3918fa38 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d3918fdf0 <line:663:1, line:671:1>
|   |-DoStmt 0x556d3918fc60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d3918fc28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d3918fbd8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d3918fc40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d3918fdd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x556d3918fd70 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x556d3918fd58 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d3918fc80 <col:9> 'int (struct k_sem *, s32_t)' Function 0x556d3918f8f0 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x556d3918fda8 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d3918fca8 <col:27> 'struct k_sem *' lvalue ParmVar 0x556d3918f9c8 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x556d3918fdc0 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d3918fcd0 <col:32> 's32_t':'int' lvalue ParmVar 0x556d3918fa38 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d3918fec0 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x556d3918fe38 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x556d39190018 prev 0x556d3915d910 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x556d3918ff90 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x556d391902c8 <line:676:1, line:685:1>
|   |-DoStmt 0x556d391901a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39190168 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39190118 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39190180 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39190280 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x556d39190268 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d391901c0 <col:2> 'void (struct k_sem *)' Function 0x556d3918fec0 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x556d391902b0 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x556d391901e8 <col:20> 'struct k_sem *' lvalue ParmVar 0x556d3918ff90 'sem' 'struct k_sem *'
|-FunctionDecl 0x556d39190400 prev 0x556d3915dc18 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x556d39190310 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x556d39190558 prev 0x556d3915da98 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x556d391904d0 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x556d391907b0 <line:690:1, line:699:1>
|   |-DoStmt 0x556d391906e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391906a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39190658 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391906c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39190768 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x556d39190750 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39190700 <col:2> 'void (struct k_sem *)' Function 0x556d39190400 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x556d39190798 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39190728 <col:21> 'struct k_sem *' lvalue ParmVar 0x556d391904d0 'sem' 'struct k_sem *'
|-FunctionDecl 0x556d39190888 prev 0x556d3915e080 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x556d391907f8 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x556d391909e8 prev 0x556d3915def8 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x556d39190958 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x556d39190cb0 <line:704:1, line:712:1>
|   |-DoStmt 0x556d39190b70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39190b38 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39190ae8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39190b50 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39190c98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x556d39190c50 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x556d39190c38 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39190b90 <col:9> 'unsigned int (struct k_sem *)' Function 0x556d39190888 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x556d39190c80 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39190bb8 <col:32> 'struct k_sem *' lvalue ParmVar 0x556d39190958 'sem' 'struct k_sem *'
|-FunctionDecl 0x556d39190e78 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x556d39190cf8 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39190d68 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x556d39190dd8 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x556d391910d8 prev 0x556d3910e668 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x556d39190f58 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39190fc8 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39191038 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x556d39191440 <line:717:1, line:725:1>
|   |-DoStmt 0x556d39191270 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39191238 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391911e8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39191250 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39191428 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x556d391913a0 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x556d39191388 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39191290 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x556d39190e78 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x556d391913e0 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391912b8 <col:34> 'struct k_msgq *' lvalue ParmVar 0x556d39190f58 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x556d391913f8 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391912e0 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x556d39190fc8 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x556d39191410 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x556d39191308 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x556d39191038 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x556d39191610 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x556d39191488 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39191500 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x556d39191570 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x556d39191878 prev 0x556d3910eb98 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x556d391916f0 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39191768 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x556d391917d8 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d39191be0 <line:730:1, line:738:1>
|   |-DoStmt 0x556d39191a10 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391919d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39191988 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391919f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39191bc8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x556d39191b40 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x556d39191b28 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39191a30 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x556d39191610 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x556d39191b80 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39191a58 <col:27> 'struct k_msgq *' lvalue ParmVar 0x556d391916f0 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x556d39191b98 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39191a80 <col:33> 'void *' lvalue ParmVar 0x556d39191768 'data' 'void *'
|       `-ImplicitCastExpr 0x556d39191bb0 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d39191aa8 <col:39> 's32_t':'int' lvalue ParmVar 0x556d391917d8 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d39191db0 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x556d39191c28 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39191ca0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x556d39191d10 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x556d39192018 prev 0x556d39162288 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x556d39191e90 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39191f08 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x556d39191f78 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d39192328 <line:743:1, line:751:1>
|   |-DoStmt 0x556d391921b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39192178 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39192128 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39192190 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39192310 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x556d39192288 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x556d39192270 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d391921d0 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x556d39191db0 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x556d391922c8 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391921f8 <col:27> 'struct k_msgq *' lvalue ParmVar 0x556d39191e90 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x556d391922e0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39192220 <col:33> 'void *' lvalue ParmVar 0x556d39191f08 'data' 'void *'
|       `-ImplicitCastExpr 0x556d391922f8 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d39192248 <col:39> 's32_t':'int' lvalue ParmVar 0x556d39191f78 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d391924a8 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x556d39192370 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x556d39192410 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x556d39192690 prev 0x556d39162528 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x556d39192580 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d391925f8 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x556d391929b0 <line:756:1, line:764:1>
|   |-DoStmt 0x556d39192820 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391927e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39192798 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39192800 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39192998 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x556d39192930 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x556d39192918 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39192840 <col:9> 'int (struct k_msgq *, void *)' Function 0x556d391924a8 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x556d39192968 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39192868 <col:28> 'struct k_msgq *' lvalue ParmVar 0x556d39192580 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x556d39192980 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39192890 <col:34> 'void *' lvalue ParmVar 0x556d391925f8 'data' 'void *'
|-FunctionDecl 0x556d39192a80 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x556d391929f8 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x556d39192bd8 prev 0x556d39162730 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x556d39192b50 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x556d39192e88 <line:769:1, line:778:1>
|   |-DoStmt 0x556d39192d60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39192d28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39192cd8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39192d40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39192e40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x556d39192e28 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39192d80 <col:2> 'void (struct k_msgq *)' Function 0x556d39192a80 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x556d39192e70 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39192da8 <col:22> 'struct k_msgq *' lvalue ParmVar 0x556d39192b50 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x556d39192f58 prev 0x556d39162db0 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x556d39192ed0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x556d391930b0 prev 0x556d39162930 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x556d39193028 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x556d39193380 <line:783:1, line:791:1>
|   |-DoStmt 0x556d39193238 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39193200 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391931b0 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39193218 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39193368 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x556d39193320 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x556d39193308 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39193258 <col:9> 'u32_t (struct k_msgq *)' Function 0x556d39192f58 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x556d39193350 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39193280 <col:36> 'struct k_msgq *' lvalue ParmVar 0x556d39193028 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x556d391934e0 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x556d391933c8 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x556d39193450 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x556d391936d0 prev 0x556d39162c50 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x556d391935b8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x556d39193640 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x556d391939d8 <line:796:1, line:805:1>
|   |-DoStmt 0x556d39193860 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39193828 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391937d8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39193840 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39193970 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x556d39193958 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39193880 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x556d391934e0 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x556d391939a8 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d391938a8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x556d391935b8 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x556d391939c0 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x556d391938d0 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x556d39193640 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x556d39193aa8 prev 0x556d39163688 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x556d39193a20 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x556d39193c00 prev 0x556d39163530 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x556d39193b78 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x556d39193e70 <line:810:1, line:818:1>
|   |-DoStmt 0x556d39193d88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39193d50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39193d00 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39193d68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39193e58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x556d39193e10 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x556d39193df8 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39193da8 <col:9> 'u32_t (struct k_msgq *)' Function 0x556d39193aa8 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x556d39193e40 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39193dd0 <col:36> 'struct k_msgq *' lvalue ParmVar 0x556d39193b78 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x556d39193fc0 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x556d39193eb8 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x556d39193f28 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x556d391941a0 prev 0x556d391697f8 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x556d39194098 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d39194108 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x556d391944e0 <line:823:1, line:831:1>
|   |-DoStmt 0x556d39194330 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391942f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391942a8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39194310 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d391944c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x556d39194460 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x556d39194448 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39194350 <col:9> 'int (struct k_pipe *, size_t)' Function 0x556d39193fc0 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x556d39194498 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39194378 <col:34> 'struct k_pipe *' lvalue ParmVar 0x556d39194098 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x556d391944b0 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x556d391943a0 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x556d39194108 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x556d39194818 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x556d39194528 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d391945a0 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x556d39194610 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39194680 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x556d391946f0 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x556d39194760 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x556d39194c00 prev 0x556d39169ce8 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x556d39194910 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d39194988 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x556d391949f8 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39194a68 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x556d39194ad8 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39194b48 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d39195060 <line:836:1, line:844:1>
|   |-DoStmt 0x556d39194db0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39194d78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39194d28 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39194d90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39195048 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x556d39194f60 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x556d39194f48 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39194dd0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x556d39194818 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x556d39194fb8 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39194df8 <col:27> 'struct k_pipe *' lvalue ParmVar 0x556d39194910 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x556d39194fd0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39194e20 <col:33> 'void *' lvalue ParmVar 0x556d39194988 'data' 'void *'
|       |-ImplicitCastExpr 0x556d39194fe8 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39194e48 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x556d391949f8 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x556d39195000 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39194e70 <col:55> 'size_t *' lvalue ParmVar 0x556d39194a68 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x556d39195018 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39194e98 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x556d39194ad8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x556d39195030 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d39194ec0 <col:80> 's32_t':'int' lvalue ParmVar 0x556d39194b48 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d39195398 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x556d391950a8 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d39195120 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x556d39195190 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d39195200 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x556d39195270 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x556d391952e0 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x556d39195780 prev 0x556d3916a100 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x556d39195490 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x556d39195508 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x556d39195578 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d391955e8 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x556d39195658 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x556d391956c8 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d39195b80 <line:849:1, line:857:1>
|   |-DoStmt 0x556d39195930 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391958f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391958a8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39195910 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39195b68 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x556d39195a80 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x556d39195a68 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39195950 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x556d39195398 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x556d39195ad8 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39195978 <col:27> 'struct k_pipe *' lvalue ParmVar 0x556d39195490 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x556d39195af0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391959a0 <col:33> 'void *' lvalue ParmVar 0x556d39195508 'data' 'void *'
|       |-ImplicitCastExpr 0x556d39195b08 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391959c8 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x556d39195578 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x556d39195b20 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391959f0 <col:54> 'size_t *' lvalue ParmVar 0x556d391955e8 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x556d39195b38 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39195a18 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x556d39195658 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x556d39195b50 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d39195a40 <col:76> 's32_t':'int' lvalue ParmVar 0x556d391956c8 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d39195d50 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x556d39195bc8 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x556d39195c40 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x556d39195cb0 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x556d39195fb8 prev 0x556d39173768 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x556d39195e30 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x556d39195ea8 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x556d39195f18 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x556d39196320 <line:862:1, line:870:1>
|   |-DoStmt 0x556d39196150 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39196118 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d391960c8 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39196130 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39196308 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x556d39196280 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x556d39196268 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39196170 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x556d39195d50 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x556d391962c0 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39196198 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x556d39195e30 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x556d391962d8 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x556d391961c0 <col:31> 'int' lvalue ParmVar 0x556d39195ea8 'num_events' 'int'
|       `-ImplicitCastExpr 0x556d391962f0 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d391961e8 <col:43> 's32_t':'int' lvalue ParmVar 0x556d39195f18 'timeout' 's32_t':'int'
|-FunctionDecl 0x556d39196430 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x556d39196368 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x556d39196588 prev 0x556d39173970 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x556d39196500 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x556d39196838 <line:875:1, line:884:1>
|   |-DoStmt 0x556d39196710 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391966d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39196688 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391966f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d391967f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x556d391967d8 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39196730 <col:2> 'void (struct k_poll_signal *)' Function 0x556d39196430 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x556d39196820 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39196758 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x556d39196500 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x556d39196908 prev 0x556d39173c20 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x556d39196880 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x556d39196a60 prev 0x556d39173ac8 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x556d391969d8 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x556d39196cb8 <line:889:1, line:898:1>
|   |-DoStmt 0x556d39196be8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39196bb0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39196b60 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39196bc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d39196c70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x556d39196c58 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39196c08 <col:2> 'void (struct k_poll_signal *)' Function 0x556d39196908 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x556d39196ca0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39196c30 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x556d391969d8 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x556d39196e88 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x556d39196d00 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x556d39196d78 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x556d39196df0 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x556d391970f0 prev 0x556d39174020 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x556d39196f68 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x556d39196fe0 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x556d39197058 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x556d39197448 <line:903:1, line:912:1>
|   |-DoStmt 0x556d39197288 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39197250 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39197200 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39197268 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d391973c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x556d391973a8 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d391972a8 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x556d39196e88 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x556d39197400 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d391972d0 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x556d39196f68 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x556d39197418 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d391972f8 <col:37> 'unsigned int *' lvalue ParmVar 0x556d39196fe0 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x556d39197430 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x556d39197320 <col:47> 'int *' lvalue ParmVar 0x556d39197058 'result' 'int *'
|-FunctionDecl 0x556d391975a0 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x556d39197490 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x556d39197508 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x556d39197788 prev 0x556d39174770 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x556d39197678 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x556d391976f0 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x556d39197aa0 <line:917:1, line:925:1>
|   |-DoStmt 0x556d39197918 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391978e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39197890 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391978f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39197a88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x556d39197a20 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x556d39197a08 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39197938 <col:9> 'int (struct k_poll_signal *, int)' Function 0x556d391975a0 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x556d39197a58 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x556d39197960 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x556d39197678 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x556d39197a70 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x556d39197988 <col:44> 'int' lvalue ParmVar 0x556d391976f0 'result' 'int'
|-FunctionDecl 0x556d39197c60 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x556d39197ad8 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x556d39197b48 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x556d39197e28 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x556d39197d28 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x556d39197d98 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x556d39198128 <line:930:1, line:939:1>
|   |-DoStmt 0x556d39197fb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d39197f80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39197f30 <col:2, col:39>
|   | `-IntegerLiteral 0x556d39197f98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x556d391980c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x556d391980a8 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556d39197fd8 <col:2> 'void (char *, size_t)' Function 0x556d39197c60 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x556d391980f8 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x556d39198000 <col:19> 'char *' lvalue ParmVar 0x556d39197d28 'c' 'char *'
|     `-ImplicitCastExpr 0x556d39198110 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x556d39198028 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x556d39197d98 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x556d39198200 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x556d39198170 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x556d39198360 prev 0x556d39179b88 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x556d391982d0 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x556d39199620 <line:944:1, line:952:1>
|   |-DoStmt 0x556d39199508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x556d391994d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x556d39199480 <col:2, col:39>
|   | `-IntegerLiteral 0x556d391994e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x556d39199608 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x556d391995c0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x556d391995a8 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556d39199528 <col:9> 'int (struct k_thread *)' Function 0x556d39198200 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x556d391995f0 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x556d39199550 <col:32> 'struct k_thread *' lvalue ParmVar 0x556d391982d0 'thread' 'struct k_thread *'
|-FunctionDecl 0x556d39199720 </vagrant/apps/plc_bottlewash/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x556d391998f0 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x556d391997f0 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x556d39199a30 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x556d391999a8 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x556d39199bf0 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x556d39199ae8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x556d39199d30 <line:16:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x556d39199ca8 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x556d39199e70 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x556d39199de8 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x556d39199fb0 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x556d39199f28 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x556d3919a0f0 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x556d3919a068 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x556d3919a230 prev 0x556d39199bf0 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x556d3919a1a8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x556d3919a2d8 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x556d3919a390 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x556d3919a3e8 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x556d3919a4d0 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x556d3919a570 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x556d3919a520 'struct gpio_int_config' sugar
|   `-RecordType 0x556d3919a360 'gpio_int_config'
|     `-Record 0x556d3919a2d8 ''
|-FunctionDecl 0x556d3919a7f0 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x556d3919a5f0 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x556d3919a6d8 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x556d3919a938 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x556d3919a8b0 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x556d3919a9f8 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x556d38f8aa00 'short'
|-TypedefDecl 0x556d3919aa68 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x556d38f8aa80 'unsigned char'
|-EnumDecl 0x556d3919aac0 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x556d3919aba0 <line:26:2, col:6> col:2 R 'int'
| | `-IntegerLiteral 0x556d3919ab80 <col:6> 'int' 2
| |-EnumConstantDecl 0x556d3919ac08 <line:27:2, col:6> col:2 G 'int'
| | `-IntegerLiteral 0x556d3919abe8 <col:6> 'int' 3
| `-EnumConstantDecl 0x556d3919ac70 <line:28:2, col:6> col:2 B 'int'
|   `-IntegerLiteral 0x556d3919ac50 <col:6> 'int' 4
|-TypedefDecl 0x556d3919ad10 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x556d3919acc0 'enum LED' sugar
|   `-EnumType 0x556d3919ab60 'LED'
|     `-Enum 0x556d3919aac0 ''
|-FunctionDecl 0x556d3919af40 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x556d3919adb8 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x556d3919ae28 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x556d3919b100 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x556d3919b000 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x556d3919b238 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x556d3919b368 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x556d3919d0d8 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x556d3919d050 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x556d3922c370 <line:39:4, col:42>
|   `-ParagraphComment 0x556d3922c340 <col:4, col:42>
|     `-TextComment 0x556d3922c310 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x556d3919d218 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x556d3919d190 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x556d3919d470 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x556d3919d2d0 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x556d3919d360 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x556d3919d5f0 <line:47:1, col:26> col:6 read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x556d3919d530 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x556d3919d7d0 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x556d3919d6d0 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x556d3919d910 <line:51:1, col:23> col:6 LED_off 'void (LED)'
| `-ParmVarDecl 0x556d3919d888 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x556d3919dad0 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x556d3919d9c8 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x556d3919dd10 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x556d3919db88 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x556d3919dbf8 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x556d3919de58 <line:57:1, col:40> col:6 read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x556d3919ddd0 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x556d3919df18 prev 0x556d3919a9f8 </vagrant/apps/plc_bottlewash/./inc/ladder.h:7:1, col:22> col:22 referenced SWORD 'short'
| `-BuiltinType 0x556d38f8aa00 'short'
|-TypedefDecl 0x556d3919df88 prev 0x556d3919aa68 <line:8:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x556d38f8aa80 'unsigned char'
|-VarDecl 0x556d3919e0c8 <line:13:1, col:100> col:16 output_pins 'uint8_t [5]' static cinit
| |-InitListExpr 0x556d3919e288 <col:68, col:100> 'uint8_t [5]'
| | |-ImplicitCastExpr 0x556d3919e2c8 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:16:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x556d3919e180 <col:14> 'int' 8
| | |-ImplicitCastExpr 0x556d3919e2e8 <line:17:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x556d3919e1a0 <col:14> 'int' 9
| | |-ImplicitCastExpr 0x556d3919e310 <line:18:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x556d3919e1c0 <col:15> 'int' 10
| | |-ImplicitCastExpr 0x556d3919e348 <line:19:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x556d3919e1e0 <col:15> 'int' 11
| | `-ImplicitCastExpr 0x556d3919e360 <line:20:15> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x556d3919e200 <col:15> 'int' 12
| `-SectionAttr 0x556d3919e128 </vagrant/apps/plc_bottlewash/./inc/ladder.h:13:45, col:62> section ".rodata"
|-FunctionDecl 0x556d3919e528 <line:33:1, col:19> col:6 PlcCycle 'void (void)'
| `-FullComment 0x556d3922c440 <line:30:4, col:57>
|   `-ParagraphComment 0x556d3922c410 <col:4, col:57>
|     `-TextComment 0x556d3922c3e0 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x556d3919e678 <line:36:1, col:36> col:6 plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x556d3919e5f0 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x556d3919e7b0 <line:39:1, col:19> col:6 init_plc 'void (void)'
|-FunctionDecl 0x556d3919e9c0 <line:46:1, col:26> col:6 used Read_U_b_XStart 'BOOL (void)'
| `-FullComment 0x556d3922c510 <line:44:4, col:57>
|   `-ParagraphComment 0x556d3922c4e0 <col:4, col:57>
|     `-TextComment 0x556d3922c4b0 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x556d3919eaf0 <line:48:1, col:25> col:6 used Read_U_b_XStop 'BOOL (void)'
|-FunctionDecl 0x556d3919ec20 <line:50:1, col:30> col:6 used Read_U_b_XBottle_IN 'BOOL (void)'
|-FunctionDecl 0x556d3919ed50 <line:52:1, col:30> col:6 used Read_U_b_XBottle_UP 'BOOL (void)'
|-FunctionDecl 0x556d3919ee80 <line:54:1, col:34> col:6 used Read_U_b_XPosition_DOWN 'BOOL (void)'
|-FunctionDecl 0x556d3919efb0 <line:56:1, col:32> col:6 Read_U_b_YBottle_HOLD 'BOOL (void)'
|-FunctionDecl 0x556d391a1230 <line:57:1, col:35> col:6 used Write_U_b_YBottle_HOLD 'void (BOOL)'
| `-ParmVarDecl 0x556d391a1170 <col:29, col:34> col:34 v 'BOOL':'unsigned char'
|-FunctionDecl 0x556d391a1368 <line:59:1, col:34> col:6 Read_U_b_YMotor_FORWARD 'BOOL (void)'
|-FunctionDecl 0x556d391a14a0 <line:60:1, col:37> col:6 used Write_U_b_YMotor_FORWARD 'void (BOOL)'
| `-ParmVarDecl 0x556d391a1418 <col:31, col:36> col:36 v 'BOOL':'unsigned char'
|-FunctionDecl 0x556d391a15d8 <line:62:1, col:29> col:6 Read_U_b_YWater_ON 'BOOL (void)'
|-FunctionDecl 0x556d391a1710 <line:63:1, col:32> col:6 used Write_U_b_YWater_ON 'void (BOOL)'
| `-ParmVarDecl 0x556d391a1688 <col:26, col:31> col:31 v 'BOOL':'unsigned char'
|-FunctionDecl 0x556d391a1848 <line:65:1, col:34> col:6 Read_U_b_YMotor_REVERSE 'BOOL (void)'
|-FunctionDecl 0x556d391a1980 <line:66:1, col:37> col:6 used Write_U_b_YMotor_REVERSE 'void (BOOL)'
| `-ParmVarDecl 0x556d391a18f8 <col:31, col:36> col:36 v 'BOOL':'unsigned char'
|-FunctionDecl 0x556d391a1ab8 <line:68:1, col:35> col:6 Read_U_b_YBottle_RELEASE 'BOOL (void)'
|-FunctionDecl 0x556d391a1bf0 <line:69:1, col:38> col:6 used Write_U_b_YBottle_RELEASE 'void (BOOL)'
| `-ParmVarDecl 0x556d391a1b68 <col:32, col:37> col:37 v 'BOOL':'unsigned char'
|-VarDecl 0x556d391a1ca8 <./src/BottleWash.c:26:16, line:43:23> col:13 used I_b_mcr 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a1d28 <col:23> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a1d08 <col:23> 'int' 0
|-VarDecl 0x556d391a1d50 <line:26:16, line:46:28> col:13 used I_b_rung_top 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a1dd0 <col:28> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a1db0 <col:28> 'int' 0
|-VarDecl 0x556d391a1df8 <line:26:16, line:49:31> col:13 used I_b_parOut_0000 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a1e78 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a1e58 <col:31> 'int' 0
|-VarDecl 0x556d391a1ea0 <line:26:16, line:52:32> col:13 used I_b_parThis_0000 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a1f20 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a1f00 <col:32> 'int' 0
|-FunctionDecl 0x556d391a1fc8 prev 0x556d3919e9c0 <line:57:7, col:39> col:19 used Read_U_b_XStart 'BOOL (void)' extern
|-VarDecl 0x556d391a2078 <line:26:16, line:59:27> col:13 used U_b_RMaster 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a20f8 <col:27> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a20d8 <col:27> 'int' 0
|-FunctionDecl 0x556d391a21a0 prev 0x556d3919eaf0 <line:64:7, col:38> col:19 used Read_U_b_XStop 'BOOL (void)' extern
|-VarDecl 0x556d391a2250 <line:26:16, line:66:31> col:13 used I_b_parOut_0001 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a22d0 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a22b0 <col:31> 'int' 0
|-VarDecl 0x556d391a22f8 <line:26:16, line:69:32> col:13 used I_b_parThis_0001 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a2378 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2358 <col:32> 'int' 0
|-FunctionDecl 0x556d391a2420 prev 0x556d3919ec20 <line:74:7, col:43> col:19 used Read_U_b_XBottle_IN 'BOOL (void)' extern
|-VarDecl 0x556d391a24d0 <line:26:16, line:76:32> col:13 used U_b_RBottle_HOLD 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a2550 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2530 <col:32> 'int' 0
|-VarDecl 0x556d391a2578 <line:26:16, line:79:35> col:13 used U_b_RBottle_RELEASE 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a25f8 <col:35> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a25d8 <col:35> 'int' 0
|-VarDecl 0x556d391a2620 <line:26:16, line:82:31> col:13 used I_b_parOut_0002 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a26a0 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2680 <col:31> 'int' 0
|-VarDecl 0x556d391a26c8 <line:26:16, line:85:32> col:13 used I_b_parThis_0002 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a2748 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2728 <col:32> 'int' 0
|-FunctionDecl 0x556d391a27f0 prev 0x556d3919efb0 <line:90:7, col:38> col:12 Read_U_b_YBottle_HOLD 'BOOL (void)'
|-FunctionDecl 0x556d391a2928 prev 0x556d391a1230 <line:91:7, col:41> col:12 used Write_U_b_YBottle_HOLD 'void (BOOL)'
| `-ParmVarDecl 0x556d391a28a0 <col:35, col:40> col:40 v 'BOOL':'unsigned char'
|-VarDecl 0x556d391a2a00 <line:26:16, line:93:23> col:14 used U_i_T0 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x556d391a2a80 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2a60 <col:23> 'int' 0
|-VarDecl 0x556d391a2aa8 <line:26:16, line:94:28> col:13 used U_b_RHOLD_DN 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a2b28 <col:28> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2b08 <col:28> 'int' 0
|-VarDecl 0x556d391a2b50 <line:26:16, line:97:29> col:13 used U_b_RWater_ON 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a2bd0 <col:29> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2bb0 <col:29> 'int' 0
|-VarDecl 0x556d391a2bf8 <line:26:16, line:100:34> col:13 used U_b_RMotor_REVERSE 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a2c78 <col:34> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2c58 <col:34> 'int' 0
|-VarDecl 0x556d391a2ca0 <line:26:16, line:103:31> col:13 used I_b_parOut_0003 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a2d20 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2d00 <col:31> 'int' 0
|-VarDecl 0x556d391a2d48 <line:26:16, line:106:32> col:13 used I_b_parThis_0003 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a2dc8 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a2da8 <col:32> 'int' 0
|-FunctionDecl 0x556d391a2e70 prev 0x556d391a1368 <line:111:7, col:40> col:12 Read_U_b_YMotor_FORWARD 'BOOL (void)'
|-FunctionDecl 0x556d391a2fa8 prev 0x556d391a14a0 <line:112:7, col:43> col:12 used Write_U_b_YMotor_FORWARD 'void (BOOL)'
| `-ParmVarDecl 0x556d391a2f20 <col:37, col:42> col:42 v 'BOOL':'unsigned char'
|-VarDecl 0x556d391a3060 <line:26:16, line:114:34> col:13 used U_b_RMotor_FORWARD 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a30e0 <col:34> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a30c0 <col:34> 'int' 0
|-VarDecl 0x556d391a73e0 <line:26:16, line:117:31> col:13 used I_b_parOut_0004 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a7460 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a7440 <col:31> 'int' 0
|-VarDecl 0x556d391a7488 <line:26:16, line:120:32> col:13 used I_b_parThis_0004 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a7508 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a74e8 <col:32> 'int' 0
|-FunctionDecl 0x556d391a75b0 prev 0x556d3919ee80 <line:125:7, col:47> col:19 used Read_U_b_XPosition_DOWN 'BOOL (void)' extern
|-VarDecl 0x556d391a7660 <line:26:16, line:127:30> col:13 used U_b_RWater_OFF 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a76e0 <col:30> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a76c0 <col:30> 'int' 0
|-VarDecl 0x556d391a7708 <line:26:16, line:130:31> col:13 used I_b_parOut_0005 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a7788 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a7768 <col:31> 'int' 0
|-VarDecl 0x556d391a77b0 <line:26:16, line:133:32> col:13 used I_b_parThis_0005 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a7830 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a7810 <col:32> 'int' 0
|-FunctionDecl 0x556d391a78d8 prev 0x556d391a15d8 <line:138:7, col:35> col:12 Read_U_b_YWater_ON 'BOOL (void)'
|-FunctionDecl 0x556d391a7a10 prev 0x556d391a1710 <line:139:7, col:38> col:12 used Write_U_b_YWater_ON 'void (BOOL)'
| `-ParmVarDecl 0x556d391a7988 <col:32, col:37> col:37 v 'BOOL':'unsigned char'
|-VarDecl 0x556d391a7ac8 <line:26:16, line:141:23> col:14 used U_i_T1 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x556d391a7b48 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x556d391a7b28 <col:23> 'int' 0
|-VarDecl 0x556d391a7b70 <line:26:16, line:142:31> col:13 used I_b_parOut_0006 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a7bf0 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a7bd0 <col:31> 'int' 0
|-VarDecl 0x556d391a7c18 <line:26:16, line:145:32> col:13 used I_b_parThis_0006 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a7c98 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a7c78 <col:32> 'int' 0
|-FunctionDecl 0x556d391a7d40 prev 0x556d3919ed50 <line:150:7, col:43> col:19 used Read_U_b_XBottle_UP 'BOOL (void)' extern
|-VarDecl 0x556d391a7df0 <line:26:16, line:152:31> col:13 used I_b_parOut_0007 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a7e70 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a7e50 <col:31> 'int' 0
|-VarDecl 0x556d391a7e98 <line:26:16, line:155:32> col:13 used I_b_parThis_0007 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a7f18 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a7ef8 <col:32> 'int' 0
|-FunctionDecl 0x556d391a7fc0 prev 0x556d391a1848 <line:160:7, col:40> col:12 Read_U_b_YMotor_REVERSE 'BOOL (void)'
|-FunctionDecl 0x556d391a80f8 prev 0x556d391a1980 <line:161:7, col:43> col:12 used Write_U_b_YMotor_REVERSE 'void (BOOL)'
| `-ParmVarDecl 0x556d391a8070 <col:37, col:42> col:42 v 'BOOL':'unsigned char'
|-VarDecl 0x556d391a81b0 <line:26:16, line:163:31> col:13 used I_b_parOut_0008 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a8230 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a8210 <col:31> 'int' 0
|-VarDecl 0x556d391a8258 <line:26:16, line:166:32> col:13 used I_b_parThis_0008 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a82d8 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a82b8 <col:32> 'int' 0
|-VarDecl 0x556d391a8300 <line:26:16, line:169:23> col:14 used U_i_T2 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x556d391a8380 <col:23> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x556d391a8360 <col:23> 'int' 0
|-VarDecl 0x556d391a83a8 <line:26:16, line:170:31> col:13 used I_b_parOut_0009 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a8428 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a8408 <col:31> 'int' 0
|-VarDecl 0x556d391a8450 <line:26:16, line:173:32> col:13 used I_b_parThis_0009 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x556d391a84d0 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x556d391a84b0 <col:32> 'int' 0
|-FunctionDecl 0x556d391a8578 prev 0x556d391a1ab8 <line:178:7, col:41> col:12 Read_U_b_YBottle_RELEASE 'BOOL (void)'
|-FunctionDecl 0x556d391a86b0 prev 0x556d391a1bf0 <line:179:7, col:44> col:12 used Write_U_b_YBottle_RELEASE 'void (BOOL)'
| `-ParmVarDecl 0x556d391a8628 <col:38, col:43> col:43 v 'BOOL':'unsigned char'
`-FunctionDecl 0x556d391a87e8 prev 0x556d3919e528 <line:186:1, line:518:1> line:186:6 PlcCycle 'void (void)'
  `-CompoundStmt 0x556d39104908 <line:187:1, line:518:1>
    |-BinaryOperator 0x556d391a88e8 <line:45:26, line:188:19> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391a8888 <line:45:26> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ca8 'I_b_mcr' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391a88d0 <line:188:19> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d391a88b0 <col:19> 'int' 1
    |-BinaryOperator 0x556d391a8978 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391a8910 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391a8960 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391a8938 <col:24> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ca8 'I_b_mcr' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d391a8a00 <line:51:34, line:195:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391a89a0 <line:51:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a1df8 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391a89e8 <line:195:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d391a89c8 <col:27> 'int' 0
    |-BinaryOperator 0x556d391a8a90 <line:54:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391a8a28 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ea0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391a8a78 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391a8a50 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d391a8c38 <line:197:5, line:199:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d391a8b78 <line:197:8, col:25> 'int' prefix '!'
    | | `-CallExpr 0x556d391a8b50 <col:9, col:25> 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391a8b38 <col:9> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x556d391a8ab8 <col:9> 'BOOL (void)' Function 0x556d391a1fc8 'Read_U_b_XStart' 'BOOL (void)'
    | |-CompoundStmt 0x556d391a8c20 <col:28, line:199:5>
    | | `-BinaryOperator 0x556d391a8bf8 <line:54:35, line:198:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391a8b98 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ea0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391a8be0 <line:198:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391a8bc0 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d391a8d50 <line:201:5, line:203:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391a8c98 <line:53:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d391a8c70 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ea0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d391a8d38 <line:201:33, line:203:5>
    | | `-BinaryOperator 0x556d391a8d10 <line:51:34, line:202:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391a8cb0 <line:51:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a1df8 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391a8cf8 <line:202:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391a8cd8 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d391a8df0 <line:54:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391a8d88 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ea0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391a8dd8 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391a8db0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d391a8f18 <line:205:5, line:207:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d391a8e58 <line:205:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d391a8e40 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d391a8e18 <col:28> 'BOOL':'unsigned char' lvalue Var 0x556d391a2078 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d391a8f00 <line:205:29, line:207:5>
    | | `-BinaryOperator 0x556d391a8ed8 <line:54:35, line:206:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391a8e78 <line:54:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ea0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391a8ec0 <line:206:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391a8ea0 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d391a9030 <line:209:5, line:211:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391a8f78 <line:53:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d391a8f50 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ea0 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d391a9018 <line:209:33, line:211:5>
    | | `-BinaryOperator 0x556d391a8ff0 <line:51:34, line:210:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391a8f90 <line:51:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a1df8 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391a8fd8 <line:210:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391a8fb8 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d391a90d0 <line:48:31, line:50:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391a9068 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391a90b8 <line:50:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391a9090 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a1df8 'I_b_parOut_0000' 'BOOL':'unsigned char'
    |-IfStmt 0x556d391a9200 <line:214:5, line:216:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-CallExpr 0x556d391a9138 <line:214:8, col:23> 'BOOL':'unsigned char'
    | | `-ImplicitCastExpr 0x556d391a9120 <col:8> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x556d391a90f8 <col:8> 'BOOL (void)' Function 0x556d391a21a0 'Read_U_b_XStop' 'BOOL (void)'
    | |-CompoundStmt 0x556d391a91e8 <col:26, line:216:5>
    | | `-BinaryOperator 0x556d391a91c0 <line:48:31, line:215:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391a9160 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391a91a8 <line:215:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391a9188 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d391a92a0 <line:61:30, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391a9238 <line:61:30> 'BOOL':'unsigned char' lvalue Var 0x556d391a2078 'U_b_RMaster' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391a9288 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391a9260 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d391a9330 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391a92c8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391a9318 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391a92f0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ca8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x556d390fecb8 <line:226:5, line:228:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d391a9398 <line:226:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d391a9380 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d391a9358 <col:28> 'BOOL':'unsigned char' lvalue Var 0x556d391a2078 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d390feca0 <line:226:29, line:228:5>
    | | `-BinaryOperator 0x556d390fec78 <line:48:31, line:227:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391a93b8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390fec60 <line:227:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390fec40 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d390fed50 <line:68:34, line:231:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390fecf0 <line:68:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a2250 'I_b_parOut_0001' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390fed38 <line:231:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d390fed18 <col:27> 'int' 0
    |-BinaryOperator 0x556d390fede0 <line:71:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390fed78 <line:71:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a22f8 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390fedc8 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d390feda0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d390fef30 <line:233:5, line:235:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d390fee70 <line:233:8, col:29> 'int' prefix '!'
    | | `-CallExpr 0x556d390fee48 <col:9, col:29> 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390fee30 <col:9> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x556d390fee08 <col:9> 'BOOL (void)' Function 0x556d391a2420 'Read_U_b_XBottle_IN' 'BOOL (void)'
    | |-CompoundStmt 0x556d390fef18 <col:32, line:235:5>
    | | `-BinaryOperator 0x556d390feef0 <line:71:35, line:234:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d390fee90 <line:71:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a22f8 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390feed8 <line:234:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390feeb8 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d390ff048 <line:237:5, line:239:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d390fef90 <line:70:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d390fef68 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a22f8 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d390ff030 <line:237:33, line:239:5>
    | | `-BinaryOperator 0x556d390ff008 <line:68:34, line:238:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d390fefa8 <line:68:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a2250 'I_b_parOut_0001' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390feff0 <line:238:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390fefd0 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d390ff0e8 <line:71:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390ff080 <line:71:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a22f8 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390ff0d0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d390ff0a8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d390ff210 <line:241:5, line:243:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d390ff150 <line:241:8, line:77:33> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d390ff138 <col:33> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d390ff110 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a24d0 'U_b_RBottle_HOLD' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d390ff1f8 <line:241:34, line:243:5>
    | | `-BinaryOperator 0x556d390ff1d0 <line:71:35, line:242:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d390ff170 <line:71:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a22f8 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390ff1b8 <line:242:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390ff198 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d390ff328 <line:245:5, line:247:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d390ff270 <line:70:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d390ff248 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a22f8 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d390ff310 <line:245:33, line:247:5>
    | | `-BinaryOperator 0x556d390ff2e8 <line:68:34, line:246:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d390ff288 <line:68:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a2250 'I_b_parOut_0001' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390ff2d0 <line:246:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390ff2b0 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d390ff3c8 <line:48:31, line:67:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390ff360 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390ff3b0 <line:67:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d390ff388 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a2250 'I_b_parOut_0001' 'BOOL':'unsigned char'
    |-IfStmt 0x556d390ff4d0 <line:250:5, line:252:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d390ff418 <line:80:36> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d390ff3f0 <col:36> 'BOOL':'unsigned char' lvalue Var 0x556d391a2578 'U_b_RBottle_RELEASE' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d390ff4b8 <line:250:36, line:252:5>
    | | `-BinaryOperator 0x556d390ff490 <line:48:31, line:251:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d390ff430 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390ff478 <line:251:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390ff458 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d390ff568 <line:84:34, line:255:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390ff508 <line:84:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a2620 'I_b_parOut_0002' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390ff550 <line:255:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d390ff530 <col:27> 'int' 0
    |-BinaryOperator 0x556d390ff5f8 <line:87:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390ff590 <line:87:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a26c8 'I_b_parThis_0002' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390ff5e0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d390ff5b8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-CallExpr 0x556d390ff6e0 <line:257:5, col:51> 'void'
    | |-ImplicitCastExpr 0x556d390ff6c8 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556d390ff620 <col:5> 'void (BOOL)' Function 0x556d391a2928 'Write_U_b_YBottle_HOLD' 'void (BOOL)'
    | `-ImplicitCastExpr 0x556d390ff710 <line:86:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d390ff648 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a26c8 'I_b_parThis_0002' 'BOOL':'unsigned char'
    |-IfStmt 0x556d390ff808 <line:259:5, line:261:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d390ff750 <line:86:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d390ff728 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a26c8 'I_b_parThis_0002' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d390ff7f0 <line:259:33, line:261:5>
    | | `-BinaryOperator 0x556d390ff7c8 <line:84:34, line:260:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d390ff768 <line:84:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a2620 'I_b_parOut_0002' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390ff7b0 <line:260:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390ff790 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d390ff8a8 <line:87:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390ff840 <line:87:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a26c8 'I_b_parThis_0002' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390ff890 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d390ff868 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d390ff938 <line:78:35, line:86:33> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390ff8d0 <line:78:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a24d0 'U_b_RBottle_HOLD' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390ff920 <line:86:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d390ff8f8 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a26c8 'I_b_parThis_0002' 'BOOL':'unsigned char'
    |-IfStmt 0x556d390ffa40 <line:265:5, line:267:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d390ff988 <line:86:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d390ff960 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a26c8 'I_b_parThis_0002' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d390ffa28 <line:265:33, line:267:5>
    | | `-BinaryOperator 0x556d390ffa00 <line:84:34, line:266:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d390ff9a0 <line:84:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a2620 'I_b_parOut_0002' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390ff9e8 <line:266:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390ff9c8 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d390ffae0 <line:48:31, line:83:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390ffa78 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390ffac8 <line:83:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d390ffaa0 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a2620 'I_b_parOut_0002' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d390ffb70 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d390ffb08 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d390ffb58 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d390ffb30 <col:24> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ca8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x556d390ffc98 <line:276:5, line:278:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d390ffbd8 <line:276:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d390ffbc0 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d390ffb98 <col:28> 'BOOL':'unsigned char' lvalue Var 0x556d391a2078 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d390ffc80 <line:276:29, line:278:5>
    | | `-BinaryOperator 0x556d390ffc58 <line:48:31, line:277:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d390ffbf8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390ffc40 <line:277:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390ffc20 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d390ffdd0 <line:280:5, line:282:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d390ffd10 <line:280:8, line:77:33> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d390ffcf8 <col:33> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d390ffcd0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a24d0 'U_b_RBottle_HOLD' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d390ffdb8 <line:280:34, line:282:5>
    | | `-BinaryOperator 0x556d390ffd90 <line:48:31, line:281:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d390ffd30 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d390ffd78 <line:281:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d390ffd58 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d391000c8 <line:284:5, line:291:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d390ffe30 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d390ffe08 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39100010 <line:284:29, line:289:5>
    | | `-IfStmt 0x556d390fffd8 <line:285:9, line:288:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x556d390ffec0 <line:285:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x556d390ffea8 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x556d390ffe90 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x556d390ffe48 <col:12> 'SWORD':'short' lvalue Var 0x556d391a2a00 'U_i_T0' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x556d390ffe70 <col:21> 'int' 99
    | |   |-CompoundStmt 0x556d390fffb8 <col:25, line:288:9>
    | |   | |-UnaryOperator 0x556d390fff10 <line:286:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x556d390ffee8 <col:13> 'SWORD':'short' lvalue Var 0x556d391a2a00 'U_i_T0' 'SWORD':'short'
    | |   | `-BinaryOperator 0x556d390fff90 <line:48:31, line:287:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x556d390fff30 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x556d390fff78 <line:287:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x556d390fff58 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x556d391000b0 <line:289:12, line:291:5>
    |   `-BinaryOperator 0x556d39100088 <line:290:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x556d39100028 <col:9> 'SWORD':'short' lvalue Var 0x556d391a2a00 'U_i_T0' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x556d39100070 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x556d39100050 <col:18> 'int' 0
    |-BinaryOperator 0x556d39100168 <line:96:31, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39100100 <line:96:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a2aa8 'U_b_RHOLD_DN' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39100150 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39100128 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d391001f8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39100190 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391001e0 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391001b8 <col:24> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ca8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39100320 <line:301:5, line:303:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39100260 <line:301:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39100248 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39100220 <col:28> 'BOOL':'unsigned char' lvalue Var 0x556d391a2078 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39100308 <line:301:29, line:303:5>
    | | `-BinaryOperator 0x556d391002e0 <line:48:31, line:302:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39100280 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391002c8 <line:302:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391002a8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39100458 <line:305:5, line:307:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39100398 <line:305:8, line:95:29> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39100380 <col:29> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39100358 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a2aa8 'U_b_RHOLD_DN' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39100440 <line:305:30, line:307:5>
    | | `-BinaryOperator 0x556d39100418 <line:48:31, line:306:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391003b8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39100400 <line:306:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391003e0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39100570 <line:309:5, line:311:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391004b8 <line:98:30> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39100490 <col:30> 'BOOL':'unsigned char' lvalue Var 0x556d391a2b50 'U_b_RWater_ON' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39100558 <line:309:30, line:311:5>
    | | `-BinaryOperator 0x556d39100530 <line:48:31, line:310:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391004d0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39100518 <line:310:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391004f8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39100688 <line:313:5, line:315:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391005d0 <line:101:35> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d391005a8 <col:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a2bf8 'U_b_RMotor_REVERSE' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39100670 <line:313:35, line:315:5>
    | | `-BinaryOperator 0x556d39100648 <line:48:31, line:314:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391005e8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39100630 <line:314:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39100610 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39100720 <line:105:34, line:318:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391006c0 <line:105:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a2ca0 'I_b_parOut_0003' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39100708 <line:318:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d391006e8 <col:27> 'int' 0
    |-BinaryOperator 0x556d391007b0 <line:108:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39100748 <line:108:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a2d48 'I_b_parThis_0003' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39100798 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39100770 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-CallExpr 0x556d39100840 <line:320:5, col:53> 'void'
    | |-ImplicitCastExpr 0x556d39100828 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556d391007d8 <col:5> 'void (BOOL)' Function 0x556d391a2fa8 'Write_U_b_YMotor_FORWARD' 'void (BOOL)'
    | `-ImplicitCastExpr 0x556d39100870 <line:107:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39100800 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a2d48 'I_b_parThis_0003' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39100968 <line:322:5, line:324:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391008b0 <line:107:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39100888 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a2d48 'I_b_parThis_0003' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39100950 <line:322:33, line:324:5>
    | | `-BinaryOperator 0x556d39100928 <line:105:34, line:323:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391008c8 <line:105:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a2ca0 'I_b_parOut_0003' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39100910 <line:323:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391008f0 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39100a08 <line:108:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391009a0 <line:108:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a2d48 'I_b_parThis_0003' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391009f0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391009c8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d39100a98 <line:116:37, line:107:33> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39100a30 <line:116:37> 'BOOL':'unsigned char' lvalue Var 0x556d391a3060 'U_b_RMotor_FORWARD' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39100a80 <line:107:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39100a58 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a2d48 'I_b_parThis_0003' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39100ba0 <line:328:5, line:330:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39100ae8 <line:107:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39100ac0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a2d48 'I_b_parThis_0003' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39100b88 <line:328:33, line:330:5>
    | | `-BinaryOperator 0x556d39100b60 <line:105:34, line:329:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39100b00 <line:105:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a2ca0 'I_b_parOut_0003' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39100b48 <line:329:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39100b28 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39100c50 <line:48:31, line:104:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39100bd8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39100c28 <line:104:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39100c00 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a2ca0 'I_b_parOut_0003' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d39100ce0 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39100c78 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39100cc8 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39100ca0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ca8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39100e08 <line:339:5, line:341:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39100d48 <line:339:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39100d30 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39100d08 <col:28> 'BOOL':'unsigned char' lvalue Var 0x556d391a2078 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39100df0 <line:339:29, line:341:5>
    | | `-BinaryOperator 0x556d39100dc8 <line:48:31, line:340:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39100d68 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39100db0 <line:340:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39100d90 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39100ea0 <line:119:34, line:344:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39100e40 <line:119:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a73e0 'I_b_parOut_0004' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39100e88 <line:344:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d39100e68 <col:27> 'int' 0
    |-BinaryOperator 0x556d39100f30 <line:122:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39100ec8 <line:122:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7488 'I_b_parThis_0004' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39100f18 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39100ef0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39101080 <line:346:5, line:348:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39100fc0 <line:346:8, col:33> 'int' prefix '!'
    | | `-CallExpr 0x556d39100f98 <col:9, col:33> 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39100f80 <col:9> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x556d39100f58 <col:9> 'BOOL (void)' Function 0x556d391a75b0 'Read_U_b_XPosition_DOWN' 'BOOL (void)'
    | |-CompoundStmt 0x556d39101068 <col:36, line:348:5>
    | | `-BinaryOperator 0x556d39101040 <line:122:35, line:347:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39100fe0 <line:122:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7488 'I_b_parThis_0004' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39101028 <line:347:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39101008 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39101198 <line:350:5, line:352:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391010e0 <line:121:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d391010b8 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a7488 'I_b_parThis_0004' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39101180 <line:350:33, line:352:5>
    | | `-BinaryOperator 0x556d39101158 <line:119:34, line:351:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391010f8 <line:119:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a73e0 'I_b_parOut_0004' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39101140 <line:351:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39101120 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39101238 <line:122:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391011d0 <line:122:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7488 'I_b_parThis_0004' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39101220 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391011f8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39101360 <line:354:5, line:356:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d391012a0 <line:354:8, line:98:30> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39101288 <col:30> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39101260 <col:30> 'BOOL':'unsigned char' lvalue Var 0x556d391a2b50 'U_b_RWater_ON' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39101348 <line:354:31, line:356:5>
    | | `-BinaryOperator 0x556d39101320 <line:122:35, line:355:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391012c0 <line:122:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7488 'I_b_parThis_0004' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39101308 <line:355:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391012e8 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39101478 <line:358:5, line:360:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391013c0 <line:121:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39101398 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a7488 'I_b_parThis_0004' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39101460 <line:358:33, line:360:5>
    | | `-BinaryOperator 0x556d39101438 <line:119:34, line:359:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391013d8 <line:119:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a73e0 'I_b_parOut_0004' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39101420 <line:359:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39101400 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39101518 <line:48:31, line:118:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391014b0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39101500 <line:118:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391014d8 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a73e0 'I_b_parOut_0004' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39101620 <line:363:5, line:365:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39101568 <line:128:31> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39101540 <col:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a7660 'U_b_RWater_OFF' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39101608 <line:363:31, line:365:5>
    | | `-BinaryOperator 0x556d391015e0 <line:48:31, line:364:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39101580 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391015c8 <line:364:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391015a8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d391016b8 <line:132:34, line:368:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39101658 <line:132:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a7708 'I_b_parOut_0005' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391016a0 <line:368:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d39101680 <col:27> 'int' 0
    |-BinaryOperator 0x556d39101748 <line:135:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391016e0 <line:135:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a77b0 'I_b_parThis_0005' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39101730 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39101708 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-CallExpr 0x556d391017d8 <line:370:5, col:48> 'void'
    | |-ImplicitCastExpr 0x556d391017c0 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556d39101770 <col:5> 'void (BOOL)' Function 0x556d391a7a10 'Write_U_b_YWater_ON' 'void (BOOL)'
    | `-ImplicitCastExpr 0x556d39101808 <line:134:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39101798 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a77b0 'I_b_parThis_0005' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39101900 <line:372:5, line:374:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39101848 <line:134:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39101820 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a77b0 'I_b_parThis_0005' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d391018e8 <line:372:33, line:374:5>
    | | `-BinaryOperator 0x556d391018c0 <line:132:34, line:373:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39101860 <line:132:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a7708 'I_b_parOut_0005' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391018a8 <line:373:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39101888 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d391019a0 <line:135:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39101938 <line:135:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a77b0 'I_b_parThis_0005' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39101988 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39101960 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d39101a30 <line:99:32, line:134:33> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391019c8 <line:99:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a2b50 'U_b_RWater_ON' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39101a18 <line:134:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391019f0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a77b0 'I_b_parThis_0005' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39101b38 <line:378:5, line:380:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39101a80 <line:134:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39101a58 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a77b0 'I_b_parThis_0005' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39101b20 <line:378:33, line:380:5>
    | | `-BinaryOperator 0x556d39101af8 <line:132:34, line:379:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39101a98 <line:132:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a7708 'I_b_parOut_0005' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39101ae0 <line:379:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39101ac0 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39101bd8 <line:48:31, line:131:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39101b70 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39101bc0 <line:131:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39101b98 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a7708 'I_b_parOut_0005' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d39101c68 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39101c00 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39101c50 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39101c28 <col:24> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ca8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39101d90 <line:389:5, line:391:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39101cd0 <line:389:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39101cb8 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39101c90 <col:28> 'BOOL':'unsigned char' lvalue Var 0x556d391a2078 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39101d78 <line:389:29, line:391:5>
    | | `-BinaryOperator 0x556d39101d50 <line:48:31, line:390:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39101cf0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39101d38 <line:390:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39101d18 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39101ec8 <line:393:5, line:395:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39101e08 <line:393:8, line:98:30> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39101df0 <col:30> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39101dc8 <col:30> 'BOOL':'unsigned char' lvalue Var 0x556d391a2b50 'U_b_RWater_ON' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39101eb0 <line:393:31, line:395:5>
    | | `-BinaryOperator 0x556d39101e88 <line:48:31, line:394:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39101e28 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39101e70 <line:394:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39101e50 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d391021c0 <line:397:5, line:404:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39101f28 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39101f00 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39102108 <line:397:29, line:402:5>
    | | `-IfStmt 0x556d391020d0 <line:398:9, line:401:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x556d39101fb8 <line:398:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x556d39101fa0 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x556d39101f88 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x556d39101f40 <col:12> 'SWORD':'short' lvalue Var 0x556d391a7ac8 'U_i_T1' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x556d39101f68 <col:21> 'int' 499
    | |   |-CompoundStmt 0x556d391020b0 <col:26, line:401:9>
    | |   | |-UnaryOperator 0x556d39102008 <line:399:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x556d39101fe0 <col:13> 'SWORD':'short' lvalue Var 0x556d391a7ac8 'U_i_T1' 'SWORD':'short'
    | |   | `-BinaryOperator 0x556d39102088 <line:48:31, line:400:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x556d39102028 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x556d39102070 <line:400:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x556d39102050 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x556d391021a8 <line:402:12, line:404:5>
    |   `-BinaryOperator 0x556d39102180 <line:403:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x556d39102120 <col:9> 'SWORD':'short' lvalue Var 0x556d391a7ac8 'U_i_T1' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x556d39102168 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x556d39102148 <col:18> 'int' 0
    |-BinaryOperator 0x556d39102260 <line:129:33, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391021f8 <line:129:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a7660 'U_b_RWater_OFF' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39102248 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39102220 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d391022f0 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39102288 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391022d8 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391022b0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ca8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39102418 <line:414:5, line:416:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39102358 <line:414:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39102340 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39102318 <col:28> 'BOOL':'unsigned char' lvalue Var 0x556d391a2078 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39102400 <line:414:29, line:416:5>
    | | `-BinaryOperator 0x556d391023d8 <line:48:31, line:415:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39102378 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391023c0 <line:415:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391023a0 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d391024b0 <line:144:34, line:419:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39102450 <line:144:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a7b70 'I_b_parOut_0006' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39102498 <line:419:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d39102478 <col:27> 'int' 0
    |-BinaryOperator 0x556d39102540 <line:147:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391024d8 <line:147:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7c18 'I_b_parThis_0006' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39102528 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39102500 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39102668 <line:421:5, line:423:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d391025a8 <line:421:8, line:128:31> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39102590 <col:31> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39102568 <col:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a7660 'U_b_RWater_OFF' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39102650 <line:421:32, line:423:5>
    | | `-BinaryOperator 0x556d39102628 <line:147:35, line:422:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391025c8 <line:147:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7c18 'I_b_parThis_0006' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39102610 <line:422:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391025f0 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39102780 <line:425:5, line:427:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391026c8 <line:146:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d391026a0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a7c18 'I_b_parThis_0006' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39102768 <line:425:33, line:427:5>
    | | `-BinaryOperator 0x556d39102740 <line:144:34, line:426:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391026e0 <line:144:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a7b70 'I_b_parOut_0006' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39102728 <line:426:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39102708 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39102820 <line:147:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391027b8 <line:147:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7c18 'I_b_parThis_0006' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39102808 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391027e0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39102948 <line:429:5, line:431:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39102888 <line:429:8, line:101:35> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39102870 <col:35> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39102848 <col:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a2bf8 'U_b_RMotor_REVERSE' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39102930 <line:429:36, line:431:5>
    | | `-BinaryOperator 0x556d39102908 <line:147:35, line:430:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391028a8 <line:147:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7c18 'I_b_parThis_0006' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391028f0 <line:430:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391028d0 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39102a60 <line:433:5, line:435:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391029a8 <line:146:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39102980 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a7c18 'I_b_parThis_0006' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39102a48 <line:433:33, line:435:5>
    | | `-BinaryOperator 0x556d39102a20 <line:144:34, line:434:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391029c0 <line:144:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a7b70 'I_b_parOut_0006' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39102a08 <line:434:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391029e8 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39102b00 <line:48:31, line:143:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39102a98 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39102ae8 <line:143:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39102ac0 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a7b70 'I_b_parOut_0006' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39103080 <line:438:5, line:440:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-CallExpr 0x556d39102b68 <line:438:8, col:28> 'BOOL':'unsigned char'
    | | `-ImplicitCastExpr 0x556d39102b50 <col:8> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x556d39102b28 <col:8> 'BOOL (void)' Function 0x556d391a7d40 'Read_U_b_XBottle_UP' 'BOOL (void)'
    | |-CompoundStmt 0x556d39102c18 <col:31, line:440:5>
    | | `-BinaryOperator 0x556d39102bf0 <line:48:31, line:439:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39102b90 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39102bd8 <line:439:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39102bb8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39103118 <line:154:34, line:443:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391030b8 <line:154:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a7df0 'I_b_parOut_0007' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39103100 <line:443:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d391030e0 <col:27> 'int' 0
    |-BinaryOperator 0x556d391031a8 <line:157:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39103140 <line:157:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7e98 'I_b_parThis_0007' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39103190 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39103168 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-CallExpr 0x556d39103238 <line:445:5, col:53> 'void'
    | |-ImplicitCastExpr 0x556d39103220 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556d391031d0 <col:5> 'void (BOOL)' Function 0x556d391a80f8 'Write_U_b_YMotor_REVERSE' 'void (BOOL)'
    | `-ImplicitCastExpr 0x556d39103268 <line:156:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391031f8 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a7e98 'I_b_parThis_0007' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39103360 <line:447:5, line:449:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391032a8 <line:156:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39103280 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a7e98 'I_b_parThis_0007' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39103348 <line:447:33, line:449:5>
    | | `-BinaryOperator 0x556d39103320 <line:154:34, line:448:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391032c0 <line:154:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a7df0 'I_b_parOut_0007' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39103308 <line:448:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391032e8 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39103400 <line:157:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39103398 <line:157:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a7e98 'I_b_parThis_0007' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391033e8 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391033c0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d39103490 <line:102:37, line:156:33> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39103428 <line:102:37> 'BOOL':'unsigned char' lvalue Var 0x556d391a2bf8 'U_b_RMotor_REVERSE' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39103478 <line:156:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39103450 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a7e98 'I_b_parThis_0007' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39103598 <line:453:5, line:455:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d391034e0 <line:156:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d391034b8 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a7e98 'I_b_parThis_0007' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39103580 <line:453:33, line:455:5>
    | | `-BinaryOperator 0x556d39103558 <line:154:34, line:454:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391034f8 <line:154:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a7df0 'I_b_parOut_0007' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39103540 <line:454:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39103520 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39103638 <line:48:31, line:153:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391035d0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39103620 <line:153:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391035f8 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a7df0 'I_b_parOut_0007' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d391036c8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39103660 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391036b0 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39103688 <col:24> 'BOOL':'unsigned char' lvalue Var 0x556d391a1ca8 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x556d391037f0 <line:464:5, line:466:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39103730 <line:464:8, line:60:28> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39103718 <col:28> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d391036f0 <col:28> 'BOOL':'unsigned char' lvalue Var 0x556d391a2078 'U_b_RMaster' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d391037d8 <line:464:29, line:466:5>
    | | `-BinaryOperator 0x556d391037b0 <line:48:31, line:465:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39103750 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39103798 <line:465:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39103778 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39103888 <line:165:34, line:469:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39103828 <line:165:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a81b0 'I_b_parOut_0008' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39103870 <line:469:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d39103850 <col:27> 'int' 0
    |-BinaryOperator 0x556d39103918 <line:168:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391038b0 <line:168:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a8258 'I_b_parThis_0008' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39103900 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391038d8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39103a68 <line:471:5, line:473:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d391039a8 <line:471:8, col:29> 'int' prefix '!'
    | | `-CallExpr 0x556d39103980 <col:9, col:29> 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39103968 <col:9> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x556d39103940 <col:9> 'BOOL (void)' Function 0x556d391a7d40 'Read_U_b_XBottle_UP' 'BOOL (void)'
    | |-CompoundStmt 0x556d39103a50 <col:32, line:473:5>
    | | `-BinaryOperator 0x556d39103a28 <line:168:35, line:472:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391039c8 <line:168:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a8258 'I_b_parThis_0008' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39103a10 <line:472:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391039f0 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39103b80 <line:475:5, line:477:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39103ac8 <line:167:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39103aa0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a8258 'I_b_parThis_0008' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39103b68 <line:475:33, line:477:5>
    | | `-BinaryOperator 0x556d39103b40 <line:165:34, line:476:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39103ae0 <line:165:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a81b0 'I_b_parOut_0008' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39103b28 <line:476:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39103b08 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39103c20 <line:168:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39103bb8 <line:168:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a8258 'I_b_parThis_0008' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39103c08 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39103be0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39103d48 <line:479:5, line:481:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x556d39103c88 <line:479:8, line:80:36> 'int' prefix '!'
    | | `-ImplicitCastExpr 0x556d39103c70 <col:36> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x556d39103c48 <col:36> 'BOOL':'unsigned char' lvalue Var 0x556d391a2578 'U_b_RBottle_RELEASE' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39103d30 <line:479:37, line:481:5>
    | | `-BinaryOperator 0x556d39103d08 <line:168:35, line:480:32> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39103ca8 <line:168:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a8258 'I_b_parThis_0008' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39103cf0 <line:480:32> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39103cd0 <col:32> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39103e60 <line:483:5, line:485:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39103da8 <line:167:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39103d80 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a8258 'I_b_parThis_0008' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39103e48 <line:483:33, line:485:5>
    | | `-BinaryOperator 0x556d39103e20 <line:165:34, line:484:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39103dc0 <line:165:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a81b0 'I_b_parOut_0008' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39103e08 <line:484:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39103de8 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d39103f00 <line:48:31, line:164:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39103e98 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39103ee8 <line:164:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39103ec0 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a81b0 'I_b_parOut_0008' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39104030 <line:488:5, line:490:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-CallExpr 0x556d39103f68 <line:488:8, col:28> 'BOOL':'unsigned char'
    | | `-ImplicitCastExpr 0x556d39103f50 <col:8> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x556d39103f28 <col:8> 'BOOL (void)' Function 0x556d391a2420 'Read_U_b_XBottle_IN' 'BOOL (void)'
    | |-CompoundStmt 0x556d39104018 <col:31, line:490:5>
    | | `-BinaryOperator 0x556d39103ff0 <line:48:31, line:489:28> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39103f90 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d39103fd8 <line:489:28> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39103fb8 <col:28> 'int' 0
    | `-<<<NULL>>>
    |-IfStmt 0x556d39104328 <line:492:5, line:499:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39104090 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39104068 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39104270 <line:492:29, line:497:5>
    | | `-IfStmt 0x556d39104238 <line:493:9, line:496:9>
    | |   |-<<<NULL>>>
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x556d39104120 <line:493:12, col:21> 'int' '<'
    | |   | |-ImplicitCastExpr 0x556d39104108 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x556d391040f0 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x556d391040a8 <col:12> 'SWORD':'short' lvalue Var 0x556d391a8300 'U_i_T2' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x556d391040d0 <col:21> 'int' 99
    | |   |-CompoundStmt 0x556d39104218 <col:25, line:496:9>
    | |   | |-UnaryOperator 0x556d39104170 <line:494:13, col:19> 'SWORD':'short' postfix '++'
    | |   | | `-DeclRefExpr 0x556d39104148 <col:13> 'SWORD':'short' lvalue Var 0x556d391a8300 'U_i_T2' 'SWORD':'short'
    | |   | `-BinaryOperator 0x556d391041f0 <line:48:31, line:495:32> 'BOOL':'unsigned char' '='
    | |   |   |-DeclRefExpr 0x556d39104190 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    | |   |   `-ImplicitCastExpr 0x556d391041d8 <line:495:32> 'BOOL':'unsigned char' <IntegralCast>
    | |   |     `-IntegerLiteral 0x556d391041b8 <col:32> 'int' 0
    | |   `-<<<NULL>>>
    | `-CompoundStmt 0x556d39104310 <line:497:12, line:499:5>
    |   `-BinaryOperator 0x556d391042e8 <line:498:9, col:18> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x556d39104288 <col:9> 'SWORD':'short' lvalue Var 0x556d391a8300 'U_i_T2' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x556d391042d0 <col:18> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x556d391042b0 <col:18> 'int' 0
    |-BinaryOperator 0x556d391043c0 <line:172:34, line:502:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39104360 <line:172:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a83a8 'I_b_parOut_0009' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d391043a8 <line:502:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x556d39104388 <col:27> 'int' 0
    |-BinaryOperator 0x556d39104450 <line:175:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391043e8 <line:175:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a8450 'I_b_parThis_0009' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39104438 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39104410 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-CallExpr 0x556d391044e0 <line:504:5, col:54> 'void'
    | |-ImplicitCastExpr 0x556d391044c8 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556d39104478 <col:5> 'void (BOOL)' Function 0x556d391a86b0 'Write_U_b_YBottle_RELEASE' 'void (BOOL)'
    | `-ImplicitCastExpr 0x556d39104510 <line:174:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391044a0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a8450 'I_b_parThis_0009' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39104608 <line:506:5, line:508:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39104550 <line:174:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39104528 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a8450 'I_b_parThis_0009' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d391045f0 <line:506:33, line:508:5>
    | | `-BinaryOperator 0x556d391045c8 <line:172:34, line:507:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d39104568 <line:172:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a83a8 'I_b_parOut_0009' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391045b0 <line:507:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d39104590 <col:31> 'int' 1
    | `-<<<NULL>>>
    |-BinaryOperator 0x556d391046a8 <line:175:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d39104640 <line:175:35> 'BOOL':'unsigned char' lvalue Var 0x556d391a8450 'I_b_parThis_0009' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39104690 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d39104668 <col:29> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x556d39104738 <line:81:38, line:174:33> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x556d391046d0 <line:81:38> 'BOOL':'unsigned char' lvalue Var 0x556d391a2578 'U_b_RBottle_RELEASE' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x556d39104720 <line:174:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x556d391046f8 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a8450 'I_b_parThis_0009' 'BOOL':'unsigned char'
    |-IfStmt 0x556d39104840 <line:512:5, line:514:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x556d39104788 <line:174:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x556d39104760 <col:33> 'BOOL':'unsigned char' lvalue Var 0x556d391a8450 'I_b_parThis_0009' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x556d39104828 <line:512:33, line:514:5>
    | | `-BinaryOperator 0x556d39104800 <line:172:34, line:513:31> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x556d391047a0 <line:172:34> 'BOOL':'unsigned char' lvalue Var 0x556d391a83a8 'I_b_parOut_0009' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x556d391047e8 <line:513:31> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x556d391047c8 <col:31> 'int' 1
    | `-<<<NULL>>>
    `-BinaryOperator 0x556d391048e0 <line:48:31, line:171:32> 'BOOL':'unsigned char' '='
      |-DeclRefExpr 0x556d39104878 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x556d391a1d50 'I_b_rung_top' 'BOOL':'unsigned char'
      `-ImplicitCastExpr 0x556d391048c8 <line:171:32> 'BOOL':'unsigned char' <LValueToRValue>
        `-DeclRefExpr 0x556d391048a0 <col:32> 'BOOL':'unsigned char' lvalue Var 0x556d391a83a8 'I_b_parOut_0009' 'BOOL':'unsigned char'
TranslationUnitDecl 0x55ccce167928 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55ccce167ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55ccce167bc0 '__int128'
|-TypedefDecl 0x55ccce167f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55ccce167be0 'unsigned __int128'
|-TypedefDecl 0x55ccce1681e8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55ccce167ff0 'struct __NSConstantString_tag'
|   `-Record 0x55ccce167f68 '__NSConstantString_tag'
|-TypedefDecl 0x55ccce168280 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55ccce168240 'char *'
|   `-BuiltinType 0x55ccce1679c0 'char'
|-TypedefDecl 0x55ccce168548 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55ccce1684f0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55ccce168360 'struct __va_list_tag'
|     `-Record 0x55ccce1682d8 '__va_list_tag'
|-TypedefDecl 0x55ccce1ca9a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x55ccce167a40 'long'
|-TypedefDecl 0x55ccce1caa10 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x55ccce167ae0 'unsigned long'
|-TypedefDecl 0x55ccce1caa80 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x55ccce167a20 'int'
|-RecordDecl 0x55ccce1caad8 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x55ccce1cabd0 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x55ccce1cac18 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x55ccce1cab98 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x55ccce1cacb8 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x55ccce1cad00 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x55ccce1cac80 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x55ccce1cada0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x55ccce1cad50 'struct max_align_t' sugar
|   `-RecordType 0x55ccce1cab60 'max_align_t'
|     `-Record 0x55ccce1caad8 ''
|-TypedefDecl 0x55ccce1cae40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55ccce1cae10 '__builtin_va_list' sugar
|   |-Typedef 0x55ccce168548 '__builtin_va_list'
|   `-ConstantArrayType 0x55ccce1684f0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x55ccce168360 'struct __va_list_tag'
|       `-Record 0x55ccce1682d8 '__va_list_tag'
|-TypedefDecl 0x55ccce1caed0 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55ccce1caea0 '__gnuc_va_list' sugar
|   |-Typedef 0x55ccce1cae40 '__gnuc_va_list'
|   `-TypedefType 0x55ccce1cae10 '__builtin_va_list' sugar
|     |-Typedef 0x55ccce168548 '__builtin_va_list'
|     `-ConstantArrayType 0x55ccce1684f0 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x55ccce168360 'struct __va_list_tag'
|         `-Record 0x55ccce1682d8 '__va_list_tag'
|-TypedefDecl 0x55ccce1caf40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x55ccce1679e0 'signed char'
|-TypedefDecl 0x55ccce1cafb0 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x55ccce167a00 'short'
|-TypedefDecl 0x55ccce1cb020 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x55ccce167a20 'int'
|-TypedefDecl 0x55ccce1cb090 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x55ccce167a40 'long'
|-TypedefDecl 0x55ccce1cb100 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x55ccce1679e0 'signed char'
|-TypedefDecl 0x55ccce1cb170 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x55ccce167a00 'short'
|-TypedefDecl 0x55ccce1cb1e0 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x55ccce167a20 'int'
|-TypedefDecl 0x55ccce1cb250 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x55ccce167a40 'long'
|-TypedefDecl 0x55ccce1cb2c0 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x55ccce1679e0 'signed char'
|-TypedefDecl 0x55ccce1cb330 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x55ccce167a00 'short'
|-TypedefDecl 0x55ccce1cb3a0 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x55ccce167a20 'int'
|-TypedefDecl 0x55ccce1cb410 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x55ccce167a40 'long'
|-TypedefDecl 0x55ccce1cb480 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x55ccce167a80 'unsigned char'
|-TypedefDecl 0x55ccce1cb4f0 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x55ccce167aa0 'unsigned short'
|-TypedefDecl 0x55ccce1cb560 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x55ccce167ac0 'unsigned int'
|-TypedefDecl 0x55ccce1cb5d0 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x55ccce167ae0 'unsigned long'
|-TypedefDecl 0x55ccce1cb640 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x55ccce167a80 'unsigned char'
|-TypedefDecl 0x55ccce1cb6b0 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x55ccce167aa0 'unsigned short'
|-TypedefDecl 0x55ccce1cb720 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x55ccce167ac0 'unsigned int'
|-TypedefDecl 0x55ccce1cb790 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x55ccce167ae0 'unsigned long'
|-TypedefDecl 0x55ccce1cb800 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x55ccce167a80 'unsigned char'
|-TypedefDecl 0x55ccce1cb870 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x55ccce167aa0 'unsigned short'
|-TypedefDecl 0x55ccce1e77a0 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x55ccce167ac0 'unsigned int'
|-TypedefDecl 0x55ccce1e7810 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x55ccce167ae0 'unsigned long'
|-TypedefDecl 0x55ccce1e7880 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x55ccce167a40 'long'
|-TypedefDecl 0x55ccce1e78f0 <line:71:1, col:26> col:26 uintptr_t 'unsigned long'
| `-BuiltinType 0x55ccce167ae0 'unsigned long'
|-FunctionDecl 0x55ccce1e7aa0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 used printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x55ccce1e79e0 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x55ccce1e7ca8 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x55ccce1e7c80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55ccce1e7c68 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x55ccce1e7c48 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x55ccce1e7be0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x55ccce1e79e0 'fmt' 'const char *'
| `-FormatAttr 0x55ccce1e7b48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x55ccce1e7f30 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x55ccce1e7d28 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x55ccce1e7e20 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x55ccce1e81c8 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x55ccce1e80d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55ccce1e80c0 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x55ccce1e80a0 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x55ccce1e8038 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x55ccce1e7d28 'fmt' 'const char *'
| | `-CStyleCastExpr 0x55ccce1e81a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55ccce1e8188 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x55ccce1e8168 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x55ccce1e8100 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x55ccce1e7e20 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55ccce1e7fe0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x55ccce1e8498 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x55ccce1e8250 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x55ccce1e82e0 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55ccce1e8358 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x55ccce1e8550 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x55ccce1eba78 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55ccce1e8610 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x55ccce1e8680 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55ccce1e86f8 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x55ccce1eb930 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55ccce1ebb38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x55ccce1ec080 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55ccce1ebde0 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x55ccce1ebe58 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x55ccce1ebed0 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x55ccce1ebf40 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55ccce1ec140 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x55ccce1ec2b0 </vagrant/apps/plc_bottlewash/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 used tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x55ccce1ec480 <line:12:1, col:40> col:9 used tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55ccce1ec380 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x55ccce1ec5c0 <line:13:1, col:46> col:9 used tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55ccce1ec538 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x55ccce1ec780 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55ccce1ec678 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55ccce1ee510 <line:16:1, col:43> col:9 used tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55ccce1ec838 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55ccce1ee650 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55ccce1ee5c8 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55ccce1ee790 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55ccce1ee708 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55ccce1ee8d0 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55ccce1ee848 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55ccce1eea10 prev 0x55ccce1ec780 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55ccce1ee988 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x55ccce1eeab8 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x55ccce1eeb70 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x55ccce1eebc8 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x55ccce1eed68 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x55ccce1eee00 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x55ccce1eedb0 'struct gpio_int_config' sugar
|   `-RecordType 0x55ccce1eeb40 'gpio_int_config'
|     `-Record 0x55ccce1eeab8 ''
|-FunctionDecl 0x55ccce1ef080 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x55ccce1eee80 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55ccce1eef68 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x55ccce1ef1c8 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55ccce1ef140 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x55ccce1ef288 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x55ccce167a00 'short'
|-TypedefDecl 0x55ccce1ef2f8 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55ccce167a80 'unsigned char'
|-EnumDecl 0x55ccce1ef350 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x55ccce1ef430 <line:26:2, col:6> col:2 R 'int'
| | `-IntegerLiteral 0x55ccce1ef410 <col:6> 'int' 2
| |-EnumConstantDecl 0x55ccce1ef498 <line:27:2, col:6> col:2 G 'int'
| | `-IntegerLiteral 0x55ccce1ef478 <col:6> 'int' 3
| `-EnumConstantDecl 0x55ccce1f29b0 <line:28:2, col:6> col:2 B 'int'
|   `-IntegerLiteral 0x55ccce1ef4e0 <col:6> 'int' 4
|-TypedefDecl 0x55ccce1f2a50 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x55ccce1f2a00 'enum LED' sugar
|   `-EnumType 0x55ccce1ef3f0 'LED'
|     `-Enum 0x55ccce1ef350 ''
|-FunctionDecl 0x55ccce1f2cb0 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x55ccce1f2b28 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x55ccce1f2b98 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x55ccce1f2e70 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x55ccce1f2d70 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55ccce1f2fa8 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x55ccce1f30d8 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x55ccce1f3240 <line:41:1, col:25> col:6 used set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x55ccce1f31b8 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x55ccce1f7700 <line:39:4, col:42>
|   `-ParagraphComment 0x55ccce1f76d0 <col:4, col:42>
|     `-TextComment 0x55ccce1f76a0 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x55ccce1f3380 <line:43:1, col:25> col:6 used clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x55ccce1f32f8 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55ccce1f35e0 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x55ccce1f3438 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55ccce1f34d0 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x55ccce1f3760 <line:47:1, col:26> col:6 used read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55ccce1f36a0 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55ccce1f39c0 <line:49:1, col:22> col:6 used LED_on 'void (LED)'
| `-ParmVarDecl 0x55ccce1f3840 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x55ccce1f3b00 <line:51:1, col:23> col:6 used LED_off 'void (LED)'
| `-ParmVarDecl 0x55ccce1f3a78 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x55ccce1f3cc0 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x55ccce1f3bb8 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x55ccce1f3f00 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x55ccce1f3d78 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x55ccce1f3de8 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55ccce1f4048 <line:57:1, col:40> col:6 read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55ccce1f3fc0 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-VarDecl 0x55ccce1f4100 <./src/plc_platform.c:6:1, col:33> col:17 used gpio_in_table 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x55ccce1f4180 <col:33> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x55ccce1f4160 <col:33> 'int' 0
|-VarDecl 0x55ccce1f41a8 <line:7:1, col:34> col:17 used gpio_out_table 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x55ccce1f4228 <col:34> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x55ccce1f4208 <col:34> 'int' 0
|-VarDecl 0x55ccce1f4250 <line:10:1, col:10> col:10 cntr 'uint32_t':'unsigned int'
|-FunctionDecl 0x55ccce1f43c0 prev 0x55ccce1f2cb0 <line:12:1, line:20:1> line:12:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x55ccce1f42c0 <col:25, col:34> col:34 used pins 'uint8_t *'
| |-ParmVarDecl 0x55ccce1f4330 <col:40, col:48> col:48 used num_pins 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55ccce1f4da0 <col:58, line:20:1>
|   |-DeclStmt 0x55ccce1f4518 <line:13:2, col:18>
|   | `-VarDecl 0x55ccce1f4480 <col:2, col:17> col:11 used out 'uint32_t':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x55ccce1f4500 <col:17> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x55ccce1f44e0 <col:17> 'int' 0
|   |-ForStmt 0x55ccce1f48e0 <line:14:2, line:16:2>
|   | |-DeclStmt 0x55ccce1f45d8 <line:14:7, col:20>
|   | | `-VarDecl 0x55ccce1f4540 <col:7, col:19> col:15 used i 'uint8_t':'unsigned char' cinit
|   | |   `-ImplicitCastExpr 0x55ccce1f45c0 <col:19> 'uint8_t':'unsigned char' <IntegralCast>
|   | |     `-IntegerLiteral 0x55ccce1f45a0 <col:19> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ccce1f46a0 <col:22, col:26> 'int' '<'
|   | | |-ImplicitCastExpr 0x55ccce1f4658 <col:22> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55ccce1f4640 <col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55ccce1f45f0 <col:22> 'uint8_t':'unsigned char' lvalue Var 0x55ccce1f4540 'i' 'uint8_t':'unsigned char'
|   | | `-ImplicitCastExpr 0x55ccce1f4688 <col:26> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x55ccce1f4670 <col:26> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55ccce1f4618 <col:26> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f4330 'num_pins' 'uint8_t':'unsigned char'
|   | |-UnaryOperator 0x55ccce1f46f0 <col:36, col:37> 'uint8_t':'unsigned char' postfix '++'
|   | | `-DeclRefExpr 0x55ccce1f46c8 <col:36> 'uint8_t':'unsigned char' lvalue Var 0x55ccce1f4540 'i' 'uint8_t':'unsigned char'
|   | `-CompoundStmt 0x55ccce1f48c8 <col:41, line:16:2>
|   |   `-CompoundAssignOperator 0x55ccce1f4890 <line:15:3, col:23> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |     |-DeclRefExpr 0x55ccce1f4710 <col:3> 'uint32_t':'unsigned int' lvalue Var 0x55ccce1f4480 'out' 'uint32_t':'unsigned int'
|   |     `-ImplicitCastExpr 0x55ccce1f4878 <col:10, col:23> 'unsigned int' <IntegralCast>
|   |       `-ParenExpr 0x55ccce1f4858 <col:10, col:23> 'int'
|   |         `-BinaryOperator 0x55ccce1f4830 <col:11, col:22> 'int' '<<'
|   |           |-IntegerLiteral 0x55ccce1f4738 <col:11> 'int' 1
|   |           `-ImplicitCastExpr 0x55ccce1f4818 <col:16, col:22> 'int' <IntegralCast>
|   |             `-ImplicitCastExpr 0x55ccce1f4800 <col:16, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|   |               `-ArraySubscriptExpr 0x55ccce1f47d8 <col:16, col:22> 'uint8_t':'unsigned char' lvalue
|   |                 |-ImplicitCastExpr 0x55ccce1f47a8 <col:16> 'uint8_t *' <LValueToRValue>
|   |                 | `-DeclRefExpr 0x55ccce1f4758 <col:16> 'uint8_t *' lvalue ParmVar 0x55ccce1f42c0 'pins' 'uint8_t *'
|   |                 `-ImplicitCastExpr 0x55ccce1f47c0 <col:21> 'uint8_t':'unsigned char' <LValueToRValue>
|   |                   `-DeclRefExpr 0x55ccce1f4780 <col:21> 'uint8_t':'unsigned char' lvalue Var 0x55ccce1f4540 'i' 'uint8_t':'unsigned char'
|   |-CallExpr 0x55ccce1f4c00 <line:17:2, col:38> 'void'
|   | |-ImplicitCastExpr 0x55ccce1f4be8 <col:2> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55ccce1f4918 <col:2> 'void (const char *, ...)' Function 0x55ccce1e7aa0 'printk' 'void (const char *, ...)'
|   | |-ImplicitCastExpr 0x55ccce1f4c50 <col:9> 'const char *' <BitCast>
|   | | `-ImplicitCastExpr 0x55ccce1f4c38 <col:9> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x55ccce1f4978 <col:9> 'char [22]' lvalue "Enabling Outputs: %x\n"
|   | `-ImplicitCastExpr 0x55ccce1f4c68 <col:35> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ccce1f4b90 <col:35> 'uint32_t':'unsigned int' lvalue Var 0x55ccce1f4480 'out' 'uint32_t':'unsigned int'
|   |-CallExpr 0x55ccce1f4d40 <line:18:2, col:29> 'uint8_t':'unsigned char'
|   | |-ImplicitCastExpr 0x55ccce1f4d28 <col:2> 'uint8_t (*)(uint32_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55ccce1f4c80 <col:2> 'uint8_t (uint32_t)' Function 0x55ccce1ec5c0 'tfm_gpio_enable_outputs' 'uint8_t (uint32_t)'
|   | `-ImplicitCastExpr 0x55ccce1f4d70 <col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ccce1f4ca8 <col:26> 'uint32_t':'unsigned int' lvalue Var 0x55ccce1f4480 'out' 'uint32_t':'unsigned int'
|   `-ReturnStmt 0x55ccce1f4d88 <line:19:2>
|-FunctionDecl 0x55ccce1f4e70 prev 0x55ccce1f2e70 <line:22:1, line:27:1> line:22:6 enable_pin_output 'void (uint8_t)'
| |-ParmVarDecl 0x55ccce1f4de8 <col:24, col:32> col:32 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55ccce1f5210 <col:37, line:27:1>
|   |-IfStmt 0x55ccce1f51c0 <line:23:2, line:25:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ccce1f5060 <line:23:6, col:37> 'int' '!='
|   | | |-ImplicitCastExpr 0x55ccce1f5048 <col:6, col:32> 'int' <IntegralCast>
|   | | | `-CallExpr 0x55ccce1f4fe0 <col:6, col:32> 'uint8_t':'unsigned char'
|   | | |   |-ImplicitCastExpr 0x55ccce1f4fc8 <col:6> 'uint8_t (*)(uint8_t)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55ccce1f4f18 <col:6> 'uint8_t (uint8_t)' Function 0x55ccce1ee510 'tfm_gpio_enable_output' 'uint8_t (uint8_t)'
|   | | |   `-ImplicitCastExpr 0x55ccce1f5010 <col:29> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55ccce1f4f40 <col:29> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f4de8 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55ccce1f5028 <col:37> 'int' 0
|   | |-CompoundStmt 0x55ccce1f51a8 <col:40, line:25:2>
|   | | `-CallExpr 0x55ccce1f5148 <line:24:3, col:37> 'void'
|   | |   |-ImplicitCastExpr 0x55ccce1f5130 <col:3> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55ccce1f5088 <col:3> 'void (const char *, ...)' Function 0x55ccce1e7aa0 'printk' 'void (const char *, ...)'
|   | |   `-ImplicitCastExpr 0x55ccce1f5190 <col:10> 'const char *' <BitCast>
|   | |     `-ImplicitCastExpr 0x55ccce1f5178 <col:10> 'char *' <ArrayToPointerDecay>
|   | |       `-StringLiteral 0x55ccce1f50e8 <col:10> 'char [26]' lvalue "Error! Cannot Enable Pin!"
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55ccce1f51f8 <line:26:2>
|-FunctionDecl 0x55ccce1f52c0 prev 0x55ccce1f2fa8 <line:29:1, line:36:1> line:29:6 read_in_table 'void (void)'
| `-CompoundStmt 0x55ccce1f5488 <col:26, line:36:1>
|   |-BinaryOperator 0x55ccce1f5448 <line:30:2, col:36> 'uint32_t':'unsigned int' '='
|   | |-DeclRefExpr 0x55ccce1f5360 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x55ccce1f4100 'gpio_in_table' 'uint32_t':'unsigned int'
|   | `-CallExpr 0x55ccce1f5420 <col:18, col:36> 'uint32_t':'unsigned int'
|   |   `-ImplicitCastExpr 0x55ccce1f5408 <col:18> 'uint32_t (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55ccce1f5388 <col:18> 'uint32_t (void)' Function 0x55ccce1ec2b0 'tfm_gpio_read_all' 'uint32_t (void)'
|   `-ReturnStmt 0x55ccce1f5470 <line:35:2>
|-FunctionDecl 0x55ccce1f5538 prev 0x55ccce1f30d8 <line:38:1, line:46:1> line:38:6 write_out_table 'void (void)'
| `-CompoundStmt 0x55ccce1f56a0 <col:28, line:46:1>
|   |-CallExpr 0x55ccce1f5640 <line:44:2, col:35> 'uint8_t':'unsigned char'
|   | |-ImplicitCastExpr 0x55ccce1f5628 <col:2> 'uint8_t (*)(uint32_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55ccce1f55d8 <col:2> 'uint8_t (uint32_t)' Function 0x55ccce1ec480 'tfm_gpio_write_all' 'uint8_t (uint32_t)'
|   | `-ImplicitCastExpr 0x55ccce1f5670 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ccce1f5600 <col:21> 'uint32_t':'unsigned int' lvalue Var 0x55ccce1f41a8 'gpio_out_table' 'uint32_t':'unsigned int'
|   `-ReturnStmt 0x55ccce1f5688 <line:45:2>
|-FunctionDecl 0x55ccce1f5758 prev 0x55ccce1f3240 <line:48:1, line:52:1> line:48:6 used set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x55ccce1f56d0 <col:14, col:22> col:22 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55ccce1f5a58 <col:27, line:52:1>
|   |-IfStmt 0x55ccce1f58d0 <line:49:2, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ccce1f5878 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x55ccce1f5860 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55ccce1f5848 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55ccce1f5800 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f56d0 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55ccce1f5828 <col:12> 'int' 15
|   | |-CompoundStmt 0x55ccce1f58b8 <col:16, col:26>
|   | | `-ReturnStmt 0x55ccce1f58a0 <col:18>
|   | `-<<<NULL>>>
|   |-CompoundAssignOperator 0x55ccce1f5a08 <line:50:2, col:29> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x55ccce1f5908 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x55ccce1f41a8 'gpio_out_table' 'uint32_t':'unsigned int'
|   | `-ImplicitCastExpr 0x55ccce1f59f0 <col:20, col:29> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x55ccce1f59d0 <col:20, col:29> 'int'
|   |     `-BinaryOperator 0x55ccce1f59a8 <col:21, col:26> 'int' '<<'
|   |       |-IntegerLiteral 0x55ccce1f5930 <col:21> 'int' 1
|   |       `-ImplicitCastExpr 0x55ccce1f5990 <col:26> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x55ccce1f5978 <col:26> 'uint8_t':'unsigned char' <LValueToRValue>
|   |           `-DeclRefExpr 0x55ccce1f5950 <col:26> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f56d0 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x55ccce1f5a40 <line:51:2>
|-FunctionDecl 0x55ccce1f5ba0 prev 0x55ccce1f3380 <line:54:1, line:58:1> line:54:6 used clr_pin 'void (uint8_t)'
| |-ParmVarDecl 0x55ccce1f5a90 <col:14, col:22> col:22 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55ccce1f5ec0 <col:27, line:58:1>
|   |-IfStmt 0x55ccce1f5d18 <line:55:2, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ccce1f5cc0 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x55ccce1f5ca8 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55ccce1f5c90 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55ccce1f5c48 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f5a90 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55ccce1f5c70 <col:12> 'int' 15
|   | |-CompoundStmt 0x55ccce1f5d00 <col:16, col:26>
|   | | `-ReturnStmt 0x55ccce1f5ce8 <col:18>
|   | `-<<<NULL>>>
|   |-CompoundAssignOperator 0x55ccce1f5e70 <line:56:2, col:30> 'uint32_t':'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x55ccce1f5d50 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x55ccce1f41a8 'gpio_out_table' 'uint32_t':'unsigned int'
|   | `-ImplicitCastExpr 0x55ccce1f5e58 <col:20, col:30> 'unsigned int' <IntegralCast>
|   |   `-UnaryOperator 0x55ccce1f5e38 <col:20, col:30> 'int' prefix '~'
|   |     `-ParenExpr 0x55ccce1f5e18 <col:21, col:30> 'int'
|   |       `-BinaryOperator 0x55ccce1f5df0 <col:22, col:27> 'int' '<<'
|   |         |-IntegerLiteral 0x55ccce1f5d78 <col:22> 'int' 1
|   |         `-ImplicitCastExpr 0x55ccce1f5dd8 <col:27> 'int' <IntegralCast>
|   |           `-ImplicitCastExpr 0x55ccce1f5dc0 <col:27> 'uint8_t':'unsigned char' <LValueToRValue>
|   |             `-DeclRefExpr 0x55ccce1f5d98 <col:27> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f5a90 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x55ccce1f5ea8 <line:57:2>
|-FunctionDecl 0x55ccce1f5ff8 prev 0x55ccce1f35e0 <line:60:1, line:67:1> line:60:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x55ccce1f5ef8 <col:16, col:24> col:24 used pin 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x55ccce1f5f68 <col:29, col:34> col:34 used val 'BOOL':'unsigned char'
| `-CompoundStmt 0x55ccce1f6328 <col:39, line:67:1>
|   |-IfStmt 0x55ccce1f62d8 <line:61:2, line:65:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x55ccce1f60d0 <line:61:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | `-DeclRefExpr 0x55ccce1f60a8 <col:6> 'BOOL':'unsigned char' lvalue ParmVar 0x55ccce1f5f68 'val' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x55ccce1f61f8 <col:11, line:63:2>
|   | | `-CallExpr 0x55ccce1f61b0 <line:62:3, col:14> 'void'
|   | |   |-ImplicitCastExpr 0x55ccce1f6198 <col:3> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55ccce1f60e8 <col:3> 'void (uint8_t)' Function 0x55ccce1f5758 'set_pin' 'void (uint8_t)'
|   | |   `-ImplicitCastExpr 0x55ccce1f61e0 <col:11> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55ccce1f6110 <col:11> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f5ef8 'pin' 'uint8_t':'unsigned char'
|   | `-CompoundStmt 0x55ccce1f62c0 <line:63:9, line:65:2>
|   |   `-CallExpr 0x55ccce1f6278 <line:64:3, col:14> 'void'
|   |     |-ImplicitCastExpr 0x55ccce1f6260 <col:3> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ccce1f6210 <col:3> 'void (uint8_t)' Function 0x55ccce1f5ba0 'clr_pin' 'void (uint8_t)'
|   |     `-ImplicitCastExpr 0x55ccce1f62a8 <col:11> 'uint8_t':'unsigned char' <LValueToRValue>
|   |       `-DeclRefExpr 0x55ccce1f6238 <col:11> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f5ef8 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x55ccce1f6310 <line:66:2>
|-FunctionDecl 0x55ccce1f63e0 prev 0x55ccce1f3760 <line:69:1, line:72:1> line:69:6 used read_pin 'BOOL (uint8_t)'
| |-ParmVarDecl 0x55ccce1f6358 <col:15, col:23> col:23 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55ccce1f67a8 <col:28, line:72:1>
|   |-IfStmt 0x55ccce1f6598 <line:70:2, col:30>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ccce1f6500 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x55ccce1f64e8 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55ccce1f64d0 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55ccce1f6488 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f6358 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55ccce1f64b0 <col:12> 'int' 15
|   | |-CompoundStmt 0x55ccce1f6580 <col:16, col:30>
|   | | `-ReturnStmt 0x55ccce1f6568 <col:18, col:25>
|   | |   `-ImplicitCastExpr 0x55ccce1f6550 <col:25> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55ccce1f6528 <col:25> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f6358 'pin' 'uint8_t':'unsigned char'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55ccce1f6790 <line:71:2, col:41>
|     `-ImplicitCastExpr 0x55ccce1f6778 <col:9, col:41> 'BOOL':'unsigned char' <IntegralCast>
|       `-BinaryOperator 0x55ccce1f6750 <col:9, col:41> 'int' '%'
|         |-ImplicitCastExpr 0x55ccce1f6738 <col:9, col:37> 'int' <IntegralCast>
|         | `-CStyleCastExpr 0x55ccce1f66f0 <col:9, col:37> 'BOOL':'unsigned char' <IntegralCast>
|         |   `-ParenExpr 0x55ccce1f66d0 <col:16, col:37> 'uint32_t':'unsigned int'
|         |     `-BinaryOperator 0x55ccce1f6668 <col:17, col:34> 'uint32_t':'unsigned int' '>>'
|         |       |-ImplicitCastExpr 0x55ccce1f6620 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x55ccce1f65d0 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55ccce1f4100 'gpio_in_table' 'uint32_t':'unsigned int'
|         |       `-ImplicitCastExpr 0x55ccce1f6650 <col:34> 'int' <IntegralCast>
|         |         `-ImplicitCastExpr 0x55ccce1f6638 <col:34> 'uint8_t':'unsigned char' <LValueToRValue>
|         |           `-DeclRefExpr 0x55ccce1f65f8 <col:34> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f6358 'pin' 'uint8_t':'unsigned char'
|         `-IntegerLiteral 0x55ccce1f6718 <col:41> 'int' 2
|-FunctionDecl 0x55ccce1f6860 prev 0x55ccce1f39c0 <line:74:1, line:77:1> line:74:6 used LED_on 'void (LED)'
| |-ParmVarDecl 0x55ccce1f67d8 <col:13, col:17> col:17 used color 'LED':'LED'
| `-CompoundStmt 0x55ccce1f69e8 <col:24, line:77:1>
|   |-CallExpr 0x55ccce1f6970 <line:75:2, col:15> 'void'
|   | |-ImplicitCastExpr 0x55ccce1f6958 <col:2> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55ccce1f6908 <col:2> 'void (uint8_t)' Function 0x55ccce1f5ba0 'clr_pin' 'void (uint8_t)'
|   | `-ImplicitCastExpr 0x55ccce1f69b8 <col:10> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x55ccce1f69a0 <col:10> 'LED':'LED' <LValueToRValue>
|   |     `-DeclRefExpr 0x55ccce1f6930 <col:10> 'LED':'LED' lvalue ParmVar 0x55ccce1f67d8 'color' 'LED':'LED'
|   `-ReturnStmt 0x55ccce1f69d0 <line:76:2>
|-FunctionDecl 0x55ccce1f6aa0 prev 0x55ccce1f3b00 <line:79:1, line:82:1> line:79:6 used LED_off 'void (LED)'
| |-ParmVarDecl 0x55ccce1f6a18 <col:14, col:18> col:18 used color 'LED':'LED'
| `-CompoundStmt 0x55ccce1f6c40 <col:25, line:82:1>
|   |-CallExpr 0x55ccce1f6bc8 <line:80:2, col:15> 'void'
|   | |-ImplicitCastExpr 0x55ccce1f6bb0 <col:2> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55ccce1f6b48 <col:2> 'void (uint8_t)' Function 0x55ccce1f5758 'set_pin' 'void (uint8_t)'
|   | `-ImplicitCastExpr 0x55ccce1f6c10 <col:10> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x55ccce1f6bf8 <col:10> 'LED':'LED' <LValueToRValue>
|   |     `-DeclRefExpr 0x55ccce1f6b70 <col:10> 'LED':'LED' lvalue ParmVar 0x55ccce1f6a18 'color' 'LED':'LED'
|   `-ReturnStmt 0x55ccce1f6c28 <line:81:2>
|-FunctionDecl 0x55ccce1f6cf8 prev 0x55ccce1f3cc0 <line:84:1, line:86:1> line:84:6 read_LED 'BOOL (LED)'
| |-ParmVarDecl 0x55ccce1f6c70 <col:15, col:19> col:19 used color 'LED':'LED'
| `-CompoundStmt 0x55ccce1f6ee0 <col:26, line:86:1>
|   `-ReturnStmt 0x55ccce1f6ec8 <line:85:2, col:30>
|     `-CStyleCastExpr 0x55ccce1f6ea0 <col:9, col:30> 'BOOL':'unsigned char' <NoOp>
|       `-CallExpr 0x55ccce1f6e30 <col:16, col:30> 'BOOL':'unsigned char'
|         |-ImplicitCastExpr 0x55ccce1f6e18 <col:16> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55ccce1f6da0 <col:16> 'BOOL (uint8_t)' Function 0x55ccce1f63e0 'read_pin' 'BOOL (uint8_t)'
|         `-ImplicitCastExpr 0x55ccce1f6e78 <col:25> 'uint8_t':'unsigned char' <IntegralCast>
|           `-ImplicitCastExpr 0x55ccce1f6e60 <col:25> 'LED':'LED' <LValueToRValue>
|             `-DeclRefExpr 0x55ccce1f6dc8 <col:25> 'LED':'LED' lvalue ParmVar 0x55ccce1f6c70 'color' 'LED':'LED'
|-FunctionDecl 0x55ccce1f7008 prev 0x55ccce1f3f00 <line:88:1, line:94:1> line:88:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x55ccce1f6f08 <col:16, col:20> col:20 used color 'LED':'LED'
| |-ParmVarDecl 0x55ccce1f6f78 <col:27, col:32> col:32 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x55ccce1f7380 <col:35, line:94:1>
|   `-IfStmt 0x55ccce1f7348 <line:89:2, line:93:2>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55ccce1f7130 <line:89:6, col:11> 'int' '=='
|     | |-ImplicitCastExpr 0x55ccce1f7118 <col:6> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x55ccce1f7100 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ccce1f70b8 <col:6> 'BOOL':'unsigned char' lvalue ParmVar 0x55ccce1f6f78 'v' 'BOOL':'unsigned char'
|     | `-IntegerLiteral 0x55ccce1f70e0 <col:11> 'int' 0
|     |-CompoundStmt 0x55ccce1f7268 <col:14, line:91:2>
|     | `-CallExpr 0x55ccce1f7220 <line:90:3, col:16> 'void'
|     |   |-ImplicitCastExpr 0x55ccce1f7208 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55ccce1f7158 <col:3> 'void (LED)' Function 0x55ccce1f6aa0 'LED_off' 'void (LED)'
|     |   `-ImplicitCastExpr 0x55ccce1f7250 <col:11> 'LED':'LED' <LValueToRValue>
|     |     `-DeclRefExpr 0x55ccce1f7180 <col:11> 'LED':'LED' lvalue ParmVar 0x55ccce1f6f08 'color' 'LED':'LED'
|     `-CompoundStmt 0x55ccce1f7330 <line:91:9, line:93:2>
|       `-CallExpr 0x55ccce1f72e8 <line:92:3, col:15> 'void'
|         |-ImplicitCastExpr 0x55ccce1f72d0 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55ccce1f7280 <col:3> 'void (LED)' Function 0x55ccce1f6860 'LED_on' 'void (LED)'
|         `-ImplicitCastExpr 0x55ccce1f7318 <col:10> 'LED':'LED' <LValueToRValue>
|           `-DeclRefExpr 0x55ccce1f72a8 <col:10> 'LED':'LED' lvalue ParmVar 0x55ccce1f6f08 'color' 'LED':'LED'
`-FunctionDecl 0x55ccce1f7430 prev 0x55ccce1f4048 <line:96:1, line:98:1> line:96:6 read_button_active_low 'BOOL (uint8_t)'
  |-ParmVarDecl 0x55ccce1f73a8 <col:29, col:37> col:37 used pin 'uint8_t':'unsigned char'
  `-CompoundStmt 0x55ccce1f7640 <col:42, line:98:1>
    `-ReturnStmt 0x55ccce1f7628 <line:97:2, col:29>
      `-ImplicitCastExpr 0x55ccce1f7610 <col:9, col:29> 'BOOL':'unsigned char' <IntegralCast>
        `-ConditionalOperator 0x55ccce1f75e0 <col:9, col:29> 'int'
          |-ImplicitCastExpr 0x55ccce1f75c8 <col:9, col:21> 'int' <IntegralCast>
          | `-CallExpr 0x55ccce1f7540 <col:9, col:21> 'BOOL':'unsigned char'
          |   |-ImplicitCastExpr 0x55ccce1f7528 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
          |   | `-DeclRefExpr 0x55ccce1f74d8 <col:9> 'BOOL (uint8_t)' Function 0x55ccce1f63e0 'read_pin' 'BOOL (uint8_t)'
          |   `-ImplicitCastExpr 0x55ccce1f7570 <col:18> 'uint8_t':'unsigned char' <LValueToRValue>
          |     `-DeclRefExpr 0x55ccce1f7500 <col:18> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ccce1f73a8 'pin' 'uint8_t':'unsigned char'
          |-IntegerLiteral 0x55ccce1f7588 <col:25> 'int' 0
          `-IntegerLiteral 0x55ccce1f75a8 <col:29> 'int' 1
TranslationUnitDecl 0x55f08f1ea6a8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55f08f1eac20 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55f08f1ea940 '__int128'
|-TypedefDecl 0x55f08f1eac90 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55f08f1ea960 'unsigned __int128'
|-TypedefDecl 0x55f08f1eaf68 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55f08f1ead70 'struct __NSConstantString_tag'
|   `-Record 0x55f08f1eace8 '__NSConstantString_tag'
|-TypedefDecl 0x55f08f1eb000 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55f08f1eafc0 'char *'
|   `-BuiltinType 0x55f08f1ea740 'char'
|-TypedefDecl 0x55f08f1eb2c8 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55f08f1eb270 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55f08f1eb0e0 'struct __va_list_tag'
|     `-Record 0x55f08f1eb058 '__va_list_tag'
|-TypedefDecl 0x55f08f24d2f0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x55f08f1ea7c0 'long'
|-TypedefDecl 0x55f08f24d360 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x55f08f1ea860 'unsigned long'
|-TypedefDecl 0x55f08f24d3d0 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x55f08f1ea7a0 'int'
|-RecordDecl 0x55f08f24d428 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x55f08f24d520 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x55f08f24d568 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x55f08f24d4e8 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x55f08f24d608 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x55f08f24d650 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x55f08f24d5d0 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x55f08f24d6f0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x55f08f24d6a0 'struct max_align_t' sugar
|   `-RecordType 0x55f08f24d4b0 'max_align_t'
|     `-Record 0x55f08f24d428 ''
|-TypedefDecl 0x55f08f24d790 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55f08f24d760 '__builtin_va_list' sugar
|   |-Typedef 0x55f08f1eb2c8 '__builtin_va_list'
|   `-ConstantArrayType 0x55f08f1eb270 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x55f08f1eb0e0 'struct __va_list_tag'
|       `-Record 0x55f08f1eb058 '__va_list_tag'
|-TypedefDecl 0x55f08f24d820 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x55f08f24d7f0 '__gnuc_va_list' sugar
|   |-Typedef 0x55f08f24d790 '__gnuc_va_list'
|   `-TypedefType 0x55f08f24d760 '__builtin_va_list' sugar
|     |-Typedef 0x55f08f1eb2c8 '__builtin_va_list'
|     `-ConstantArrayType 0x55f08f1eb270 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x55f08f1eb0e0 'struct __va_list_tag'
|         `-Record 0x55f08f1eb058 '__va_list_tag'
|-TypedefDecl 0x55f08f24d890 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x55f08f1ea760 'signed char'
|-TypedefDecl 0x55f08f24d900 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x55f08f1ea780 'short'
|-TypedefDecl 0x55f08f24d970 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x55f08f1ea7a0 'int'
|-TypedefDecl 0x55f08f24d9e0 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x55f08f1ea7c0 'long'
|-TypedefDecl 0x55f08f24da50 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x55f08f1ea760 'signed char'
|-TypedefDecl 0x55f08f24dac0 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x55f08f1ea780 'short'
|-TypedefDecl 0x55f08f24db30 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x55f08f1ea7a0 'int'
|-TypedefDecl 0x55f08f24dba0 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x55f08f1ea7c0 'long'
|-TypedefDecl 0x55f08f24dc10 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x55f08f1ea760 'signed char'
|-TypedefDecl 0x55f08f24dc80 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x55f08f1ea780 'short'
|-TypedefDecl 0x55f08f24dcf0 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x55f08f1ea7a0 'int'
|-TypedefDecl 0x55f08f24dd60 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x55f08f1ea7c0 'long'
|-TypedefDecl 0x55f08f24ddd0 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x55f08f1ea800 'unsigned char'
|-TypedefDecl 0x55f08f24de40 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x55f08f1ea820 'unsigned short'
|-TypedefDecl 0x55f08f24deb0 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x55f08f1ea840 'unsigned int'
|-TypedefDecl 0x55f08f24df20 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x55f08f1ea860 'unsigned long'
|-TypedefDecl 0x55f08f24df90 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x55f08f1ea800 'unsigned char'
|-TypedefDecl 0x55f08f24e000 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x55f08f1ea820 'unsigned short'
|-TypedefDecl 0x55f08f24e070 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x55f08f1ea840 'unsigned int'
|-TypedefDecl 0x55f08f24e0e0 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x55f08f1ea860 'unsigned long'
|-TypedefDecl 0x55f08f24e150 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x55f08f1ea800 'unsigned char'
|-TypedefDecl 0x55f08f24e1c0 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x55f08f1ea820 'unsigned short'
|-TypedefDecl 0x55f08f26a140 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x55f08f1ea840 'unsigned int'
|-TypedefDecl 0x55f08f26a1b0 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x55f08f1ea860 'unsigned long'
|-TypedefDecl 0x55f08f26a220 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x55f08f1ea7c0 'long'
|-TypedefDecl 0x55f08f26a290 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x55f08f1ea860 'unsigned long'
|-FunctionDecl 0x55f08f26a440 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x55f08f26a380 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x55f08f26a648 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x55f08f26a620 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55f08f26a608 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x55f08f26a5e8 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x55f08f26a580 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x55f08f26a380 'fmt' 'const char *'
| `-FormatAttr 0x55f08f26a4e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x55f08f26a8d0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x55f08f26a6c8 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x55f08f26a7c0 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x55f08f26ab68 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x55f08f26aa78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55f08f26aa60 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x55f08f26aa40 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x55f08f26a9d8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x55f08f26a6c8 'fmt' 'const char *'
| | `-CStyleCastExpr 0x55f08f26ab40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55f08f26ab28 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x55f08f26ab08 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x55f08f26aaa0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x55f08f26a7c0 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55f08f26a980 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x55f08f26ae38 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x55f08f26abf0 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x55f08f26ac80 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f26acf8 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x55f08f26aef0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x55f08f26e418 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55f08f26afb0 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x55f08f26b020 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f26b098 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x55f08f26e2d0 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55f08f26e4d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x55f08f26ea20 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x55f08f26e780 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x55f08f26e7f8 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x55f08f26e870 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x55f08f26e8e0 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x55f08f26eae0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-TypedefDecl 0x55f08f26ebb0 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x55f08f1ea760 'signed char'
|-TypedefDecl 0x55f08f26ec20 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x55f08f1ea780 'short'
|-TypedefDecl 0x55f08f26ec90 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x55f08f1ea7a0 'int'
|-TypedefDecl 0x55f08f26ed00 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x55f08f1ea7e0 'long long'
|-TypedefDecl 0x55f08f26ed70 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x55f08f1ea800 'unsigned char'
|-TypedefDecl 0x55f08f26ede0 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x55f08f1ea820 'unsigned short'
|-TypedefDecl 0x55f08f26ee50 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x55f08f1ea840 'unsigned int'
|-TypedefDecl 0x55f08f26eec0 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x55f08f1ea880 'unsigned long long'
|-TypedefDecl 0x55f08f26ef30 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x55f08f1ea860 'unsigned long'
|-TypedefDecl 0x55f08f26efd0 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x55f08f1ea7a0 'int'
|-TypedefDecl 0x55f08f26f060 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x55f08f26f030 'atomic_t' sugar
|   |-Typedef 0x55f08f26efd0 'atomic_t'
|   `-BuiltinType 0x55f08f1ea7a0 'int'
|-FunctionDecl 0x55f08f27c258 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x55f08f26f188 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x55f08f26f220 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x55f08f27c120 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x55f08f27c4d0 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55f08f27c348 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55f08f27c3b8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55f08f27c6b8 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55f08f27c5b8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55f08f27c628 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55f08f27c8b0 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x55f08f27c7a8 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x55f08f27ca20 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x55f08f27c998 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x55f08f27cc40 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x55f08f27cb38 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x55f08f27ce28 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55f08f27cd28 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55f08f27cd98 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55f08f27cfa0 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x55f08f27cf18 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x55f08f27d1c0 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55f08f27d088 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x55f08f27d130 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x55f08f27d3a8 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55f08f27d2a8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55f08f27d318 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55f08f27d598 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55f08f27d498 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x55f08f27d508 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x55f08f27d788 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x55f08f27d688 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x55f08f27d6f8 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x55f08f27dac0 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x55f08f27d938 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x55f08f27d9b0 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x55f08f27fab8 <line:352:1, line:356:1>
| | |-DeclStmt 0x55f08f27dec0 <line:353:2, col:57>
| | | `-VarDecl 0x55f08f27db80 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x55f08f27de90 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x55f08f27de78 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x55f08f27dbe0 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x55f08f27cc40 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x55f08f27de00 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x55f08f27ddd8 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x55f08f27ddc0 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x55f08f27dc30 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x55f08f27dc08 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x55f08f27d938 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x55f08f27dda0 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x55f08f27dd78 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x55f08f27dd60 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x55f08f27dd48 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x55f08f27dc78 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x55f08f27dc50 <line:353:52> 'int' lvalue ParmVar 0x55f08f27d9b0 'bit' 'int'
| | |             `-ParenExpr 0x55f08f27dd28 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x55f08f27dd00 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x55f08f27dca8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x55f08f27dce8 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x55f08f27dcc8 <col:45> 'int' 8
| | `-ReturnStmt 0x55f08f27fa78 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x55f08f27fa60 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55f08f27fa38 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x55f08f27f9f8 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x55f08f27f9d0 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x55f08f27ded8 <col:10> 'int' 1
| |       |   `-ParenExpr 0x55f08f27f9b0 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x55f08f27e108 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x55f08f27e0f0 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x55f08f27def8 <col:15> 'atomic_val_t':'int' lvalue Var 0x55f08f27db80 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x55f08f27e0d0 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x55f08f27e0a8 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x55f08f27e090 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x55f08f27e078 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x55f08f27df20 <col:23> 'int' lvalue ParmVar 0x55f08f27d9b0 'bit' 'int'
| |       |           `-ParenExpr 0x55f08f27e058 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x55f08f27e030 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x55f08f27dfd8 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x55f08f27dfb0 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x55f08f27df58 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x55f08f27df98 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x55f08f27df78 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x55f08f27e018 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x55f08f27dff8 <col:44> 'int' 1
| |       `-IntegerLiteral 0x55f08f27fa18 <col:53> 'int' 0
| `-FullComment 0x55f08f3fe5d0 <line:341:3, line:349:55>
|   |-ParagraphComment 0x55f08f3fe0e0 <line:341:3>
|   | `-TextComment 0x55f08f3fe0b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f3fe100 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x55f08f3fe160 <col:10, col:32>
|   |   `-TextComment 0x55f08f3fe130 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x55f08f3fe2d0 <line:343:3, line:344:66>
|   | |-TextComment 0x55f08f3fe180 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x55f08f3fe1d0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55f08f3fe1f0 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x55f08f3fe240 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55f08f3fe260 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x55f08f3fe280 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55f08f3fe320 <line:346:3>
|   | `-TextComment 0x55f08f3fe2f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f3fe340 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55f08f3fe3f0 <line:346:17, line:347:3>
|   |   |-TextComment 0x55f08f3fe3a0 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55f08f3fe3c0 <line:347:3> Text=" "
|   |-ParamCommandComment 0x55f08f3fe410 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55f08f3fe4a0 <col:14, col:43>
|   |   `-TextComment 0x55f08f3fe470 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55f08f3fe4f0 <line:349:3>
|   | `-TextComment 0x55f08f3fe4c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f3fe510 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55f08f3fe570 <col:11, col:55>
|       `-TextComment 0x55f08f3fe540 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x55f08f27fc70 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55f08f27fae8 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x55f08f27fb60 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x55f08f280618 <line:370:1, line:377:1>
| | |-DeclStmt 0x55f08f280070 <line:371:2, col:38>
| | | `-VarDecl 0x55f08f27fd30 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55f08f280050 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55f08f280028 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55f08f27fd90 <col:27> 'int' 1
| | |       `-ParenExpr 0x55f08f280008 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55f08f27ffe0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55f08f27ffc8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55f08f27fe70 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55f08f27fe58 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55f08f27fe38 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55f08f27fdd0 <line:371:34> 'int' lvalue ParmVar 0x55f08f27fb60 'bit' 'int'
| | |           `-ParenExpr 0x55f08f27ffa8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55f08f27ff80 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55f08f27ff28 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55f08f27ff00 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55f08f27fea8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55f08f27fee8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55f08f27fec8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55f08f27ff68 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55f08f27ff48 <col:63> 'int' 1
| | |-DeclStmt 0x55f08f2800f8 <line:372:2, col:18>
| | | `-VarDecl 0x55f08f280098 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x55f08f280488 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x55f08f280110 <col:2> 'atomic_val_t':'int' lvalue Var 0x55f08f280098 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x55f08f280450 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x55f08f280438 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x55f08f280138 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55f08f27d598 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x55f08f280358 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x55f08f280330 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x55f08f280318 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x55f08f280188 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x55f08f280160 <line:374:31> 'atomic_t *' lvalue ParmVar 0x55f08f27fae8 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x55f08f2802f8 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x55f08f2802d0 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x55f08f2802b8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x55f08f2802a0 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x55f08f2801d0 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x55f08f2801a8 <line:374:39> 'int' lvalue ParmVar 0x55f08f27fb60 'bit' 'int'
| | |   |       `-ParenExpr 0x55f08f280280 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x55f08f280258 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x55f08f280200 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x55f08f280240 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x55f08f280220 <col:45> 'int' 8
| | |   `-UnaryOperator 0x55f08f2803b8 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~'
| | |     `-ImplicitCastExpr 0x55f08f2803a0 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x55f08f280378 <col:46> 'atomic_val_t':'int' lvalue Var 0x55f08f27fd30 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x55f08f2805d8 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x55f08f2805c0 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55f08f280598 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x55f08f280558 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x55f08f280530 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x55f08f280500 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55f08f2804b0 <col:10> 'atomic_val_t':'int' lvalue Var 0x55f08f280098 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x55f08f280518 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55f08f2804d8 <col:16> 'atomic_val_t':'int' lvalue Var 0x55f08f27fd30 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x55f08f280578 <col:25> 'int' 0
| `-FullComment 0x55f08f3feb60 <line:359:3, line:367:55>
|   |-ParagraphComment 0x55f08f3fe670 <line:359:3>
|   | `-TextComment 0x55f08f3fe640 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f3fe690 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f3fe6f0 <col:10, col:42>
|   |   `-TextComment 0x55f08f3fe6c0 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x55f08f3fe860 <line:361:3, line:362:66>
|   | |-TextComment 0x55f08f3fe710 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x55f08f3fe760 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55f08f3fe780 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x55f08f3fe7d0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55f08f3fe7f0 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x55f08f3fe810 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55f08f3fe8b0 <line:364:3>
|   | `-TextComment 0x55f08f3fe880 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f3fe8d0 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55f08f3fe980 <line:364:17, line:365:3>
|   |   |-TextComment 0x55f08f3fe930 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55f08f3fe950 <line:365:3> Text=" "
|   |-ParamCommandComment 0x55f08f3fe9a0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55f08f3fea30 <col:14, col:43>
|   |   `-TextComment 0x55f08f3fea00 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55f08f3fea80 <line:367:3>
|   | `-TextComment 0x55f08f3fea50 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f3feaa0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55f08f3feb00 <col:11, col:55>
|       `-TextComment 0x55f08f3fead0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x55f08f280760 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55f08f280658 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x55f08f2806d0 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x55f08f281098 <line:391:1, line:398:1>
| | |-DeclStmt 0x55f08f280b68 <line:392:2, col:38>
| | | `-VarDecl 0x55f08f280820 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55f08f280b48 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55f08f280b20 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55f08f280880 <col:27> 'int' 1
| | |       `-ParenExpr 0x55f08f280b00 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55f08f280ad8 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55f08f280ac0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55f08f280940 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55f08f280928 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55f08f280908 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55f08f2808a0 <line:392:34> 'int' lvalue ParmVar 0x55f08f2806d0 'bit' 'int'
| | |           `-ParenExpr 0x55f08f280aa0 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55f08f280a78 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55f08f280a20 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55f08f2809f8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55f08f280978 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55f08f2809e0 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55f08f2809c0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55f08f280a60 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55f08f280a40 <col:63> 'int' 1
| | |-DeclStmt 0x55f08f280bf0 <line:393:2, col:18>
| | | `-VarDecl 0x55f08f280b90 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x55f08f280f00 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x55f08f280c08 <col:2> 'atomic_val_t':'int' lvalue Var 0x55f08f280b90 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x55f08f280eb0 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x55f08f280e98 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x55f08f280c30 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55f08f27d1c0 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x55f08f280e50 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x55f08f280e28 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x55f08f280e10 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x55f08f280c80 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x55f08f280c58 <line:395:30> 'atomic_t *' lvalue ParmVar 0x55f08f280658 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x55f08f280df0 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x55f08f280dc8 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x55f08f280db0 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x55f08f280d98 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x55f08f280cc8 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x55f08f280ca0 <line:395:38> 'int' lvalue ParmVar 0x55f08f2806d0 'bit' 'int'
| | |   |       `-ParenExpr 0x55f08f280d78 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x55f08f280d50 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x55f08f280cf8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x55f08f280d38 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x55f08f280d18 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x55f08f280ee8 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x55f08f280e70 <col:44> 'atomic_val_t':'int' lvalue Var 0x55f08f280820 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x55f08f281050 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x55f08f281038 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55f08f281010 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x55f08f280fd0 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x55f08f280fa8 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x55f08f280f78 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55f08f280f28 <col:10> 'atomic_val_t':'int' lvalue Var 0x55f08f280b90 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x55f08f280f90 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55f08f280f50 <col:16> 'atomic_val_t':'int' lvalue Var 0x55f08f280820 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x55f08f280ff0 <col:25> 'int' 0
| `-FullComment 0x55f08f402930 <line:380:3, line:388:55>
|   |-ParagraphComment 0x55f08f3fec00 <line:380:3>
|   | `-TextComment 0x55f08f3febd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f3fec20 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55f08f3fec80 <col:10, col:31>
|   |   `-TextComment 0x55f08f3fec50 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x55f08f402630 <line:382:3, line:383:66>
|   | |-TextComment 0x55f08f3feca0 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x55f08f3fecf0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55f08f3fed10 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x55f08f4025a0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55f08f4025c0 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x55f08f4025e0 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55f08f402680 <line:385:3>
|   | `-TextComment 0x55f08f402650 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4026a0 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55f08f402750 <line:385:17, line:386:3>
|   |   |-TextComment 0x55f08f402700 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55f08f402720 <line:386:3> Text=" "
|   |-ParamCommandComment 0x55f08f402770 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55f08f402800 <col:14, col:43>
|   |   `-TextComment 0x55f08f4027d0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55f08f402850 <line:388:3>
|   | `-TextComment 0x55f08f402820 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f402870 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55f08f4028d0 <col:11, col:55>
|       `-TextComment 0x55f08f4028a0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x55f08f281260 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55f08f2810d8 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x55f08f281150 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x55f08f2819d0 <line:412:1, line:416:1>
| | |-DeclStmt 0x55f08f281640 <line:413:2, col:38>
| | | `-VarDecl 0x55f08f281320 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55f08f281620 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55f08f2815f8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55f08f281380 <col:27> 'int' 1
| | |       `-ParenExpr 0x55f08f2815d8 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55f08f2815b0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55f08f281598 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55f08f281440 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55f08f281428 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55f08f281408 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55f08f2813a0 <line:413:34> 'int' lvalue ParmVar 0x55f08f281150 'bit' 'int'
| | |           `-ParenExpr 0x55f08f281578 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55f08f281550 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55f08f2814f8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55f08f2814d0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55f08f281478 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55f08f2814b8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55f08f281498 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55f08f281538 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55f08f281518 <col:63> 'int' 1
| | `-CStyleCastExpr 0x55f08f281958 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x55f08f281910 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x55f08f2818f8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f281658 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55f08f27d598 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x55f08f281878 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x55f08f281850 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x55f08f281838 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x55f08f2816a8 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x55f08f281680 <line:415:31> 'atomic_t *' lvalue ParmVar 0x55f08f2810d8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x55f08f281818 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x55f08f2817f0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x55f08f2817d8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x55f08f2817c0 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x55f08f2816f0 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x55f08f2816c8 <line:415:39> 'int' lvalue ParmVar 0x55f08f281150 'bit' 'int'
| |     |       `-ParenExpr 0x55f08f2817a0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x55f08f281778 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x55f08f281720 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x55f08f281760 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x55f08f281740 <col:45> 'int' 8
| |     `-UnaryOperator 0x55f08f2818d8 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~'
| |       `-ImplicitCastExpr 0x55f08f2818c0 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f281898 <col:46> 'atomic_val_t':'int' lvalue Var 0x55f08f281320 'mask' 'atomic_val_t':'int'
| `-FullComment 0x55f08f402ea0 <line:401:3, line:409:14>
|   |-ParagraphComment 0x55f08f4029d0 <line:401:3>
|   | `-TextComment 0x55f08f4029a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4029f0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55f08f402a50 <col:10, col:33>
|   |   `-TextComment 0x55f08f402a20 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x55f08f402ba0 <line:403:3, line:404:66>
|   | |-TextComment 0x55f08f402a70 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x55f08f402ac0 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55f08f402ae0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x55f08f402b30 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x55f08f402b50 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55f08f402bf0 <line:406:3>
|   | `-TextComment 0x55f08f402bc0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f402c10 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55f08f402cc0 <line:406:17, line:407:3>
|   |   |-TextComment 0x55f08f402c70 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55f08f402c90 <line:407:3> Text=" "
|   |-ParamCommandComment 0x55f08f402ce0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55f08f402d70 <col:14, col:43>
|   |   `-TextComment 0x55f08f402d40 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55f08f402dc0 <line:409:3>
|   | `-TextComment 0x55f08f402d90 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f402de0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f402e40 <col:11, col:14>
|       `-TextComment 0x55f08f402e10 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f281b08 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x55f08f281a00 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x55f08f281a78 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x55f08f282238 <line:430:1, line:434:1>
| | |-DeclStmt 0x55f08f281ee8 <line:431:2, col:38>
| | | `-VarDecl 0x55f08f281bc8 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55f08f281ec8 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55f08f281ea0 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55f08f281c28 <col:27> 'int' 1
| | |       `-ParenExpr 0x55f08f281e80 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55f08f281e58 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55f08f281e40 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55f08f281ce8 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55f08f281cd0 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55f08f281cb0 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55f08f281c48 <line:431:34> 'int' lvalue ParmVar 0x55f08f281a78 'bit' 'int'
| | |           `-ParenExpr 0x55f08f281e20 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55f08f281df8 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55f08f281da0 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55f08f281d78 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55f08f281d20 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55f08f281d60 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55f08f281d40 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55f08f281de0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55f08f281dc0 <col:63> 'int' 1
| | `-CStyleCastExpr 0x55f08f2821e0 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x55f08f282180 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x55f08f282168 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f281f00 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55f08f27d1c0 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x55f08f282120 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x55f08f2820f8 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x55f08f2820e0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x55f08f281f50 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x55f08f281f28 <line:433:30> 'atomic_t *' lvalue ParmVar 0x55f08f281a00 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x55f08f2820c0 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x55f08f282098 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x55f08f282080 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x55f08f282068 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x55f08f281f98 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x55f08f281f70 <line:433:38> 'int' lvalue ParmVar 0x55f08f281a78 'bit' 'int'
| |     |       `-ParenExpr 0x55f08f282048 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x55f08f282020 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x55f08f281fc8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x55f08f282008 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x55f08f281fe8 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x55f08f2821b8 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x55f08f282140 <col:44> 'atomic_val_t':'int' lvalue Var 0x55f08f281bc8 'mask' 'atomic_val_t':'int'
| `-FullComment 0x55f08f403410 <line:419:3, line:427:14>
|   |-ParagraphComment 0x55f08f402f40 <line:419:3>
|   | `-TextComment 0x55f08f402f10 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f402f60 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55f08f402fc0 <col:10, col:31>
|   |   `-TextComment 0x55f08f402f90 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x55f08f403110 <line:421:3, line:422:66>
|   | |-TextComment 0x55f08f402fe0 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x55f08f403030 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55f08f403050 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x55f08f4030a0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x55f08f4030c0 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55f08f403160 <line:424:3>
|   | `-TextComment 0x55f08f403130 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f403180 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55f08f403230 <line:424:17, line:425:3>
|   |   |-TextComment 0x55f08f4031e0 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55f08f403200 <line:425:3> Text=" "
|   |-ParamCommandComment 0x55f08f403250 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4032e0 <col:14, col:43>
|   |   `-TextComment 0x55f08f4032b0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x55f08f403330 <line:427:3>
|   | `-TextComment 0x55f08f403300 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f403350 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f4033b0 <col:11, col:14>
|       `-TextComment 0x55f08f403380 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f282480 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x55f08f282268 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x55f08f2822e0 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x55f08f282350 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x55f08f284818 <line:449:1, line:457:1>
| | |-DeclStmt 0x55f08f282868 <line:450:2, col:38>
| | | `-VarDecl 0x55f08f282548 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x55f08f282848 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x55f08f282820 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x55f08f2825a8 <col:27> 'int' 1
| | |       `-ParenExpr 0x55f08f282800 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x55f08f2827d8 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x55f08f2827c0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x55f08f282668 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x55f08f282650 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x55f08f282630 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x55f08f2825c8 <line:450:34> 'int' lvalue ParmVar 0x55f08f2822e0 'bit' 'int'
| | |           `-ParenExpr 0x55f08f2827a0 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x55f08f282778 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x55f08f282720 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x55f08f2826f8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x55f08f2826a0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x55f08f2826e0 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x55f08f2826c0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x55f08f282760 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x55f08f282740 <col:63> 'int' 1
| | `-IfStmt 0x55f08f284728 <line:452:2, line:456:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x55f08f2828a8 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x55f08f282880 <col:6> 'bool' lvalue ParmVar 0x55f08f282350 'val' 'bool'
| |   |-CompoundStmt 0x55f08f2843d0 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x55f08f2843a8 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x55f08f284348 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x55f08f284330 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x55f08f2828c0 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55f08f27d1c0 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x55f08f2842e8 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x55f08f2842c0 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x55f08f2842a8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x55f08f282910 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x55f08f2828e8 <line:453:31> 'atomic_t *' lvalue ParmVar 0x55f08f282268 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x55f08f284288 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x55f08f284260 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x55f08f284248 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x55f08f284230 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x55f08f282958 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x55f08f282930 <line:453:39> 'int' lvalue ParmVar 0x55f08f2822e0 'bit' 'int'
| |   |     |       `-ParenExpr 0x55f08f284210 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x55f08f2841e8 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x55f08f282988 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x55f08f2841d0 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x55f08f2829a8 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x55f08f284380 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x55f08f284308 <col:45> 'atomic_val_t':'int' lvalue Var 0x55f08f282548 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x55f08f284710 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x55f08f2846e8 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x55f08f2846a0 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x55f08f284688 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x55f08f2843e8 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x55f08f27d598 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x55f08f284608 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x55f08f2845e0 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x55f08f2845c8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x55f08f284438 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x55f08f284410 <line:455:32> 'atomic_t *' lvalue ParmVar 0x55f08f282268 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x55f08f2845a8 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x55f08f284580 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x55f08f284568 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x55f08f284550 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x55f08f284480 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x55f08f284458 <line:455:40> 'int' lvalue ParmVar 0x55f08f2822e0 'bit' 'int'
| |         |       `-ParenExpr 0x55f08f284530 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x55f08f284508 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x55f08f2844b0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x55f08f2844f0 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x55f08f2844d0 <col:45> 'int' 8
| |         `-UnaryOperator 0x55f08f284668 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~'
| |           `-ImplicitCastExpr 0x55f08f284650 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x55f08f284628 <col:47> 'atomic_val_t':'int' lvalue Var 0x55f08f282548 'mask' 'atomic_val_t':'int'
| `-FullComment 0x55f08f403ae0 <line:437:3, line:446:14>
|   |-ParagraphComment 0x55f08f4034b0 <line:437:3>
|   | `-TextComment 0x55f08f403480 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4034d0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55f08f403530 <col:10, col:48>
|   |   `-TextComment 0x55f08f403500 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x55f08f403700 <line:439:3, line:440:66>
|   | |-TextComment 0x55f08f403550 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x55f08f4035a0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x55f08f4035c0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x55f08f403610 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x55f08f403630 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x55f08f403680 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x55f08f4036a0 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x55f08f403750 <line:442:3>
|   | `-TextComment 0x55f08f403720 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f403770 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x55f08f403820 <line:442:17, line:443:3>
|   |   |-TextComment 0x55f08f4037d0 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x55f08f4037f0 <line:443:3> Text=" "
|   |-ParamCommandComment 0x55f08f403840 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4038f0 <line:443:14, line:444:3>
|   |   |-TextComment 0x55f08f4038a0 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x55f08f4038c0 <line:444:3> Text=" "
|   |-ParamCommandComment 0x55f08f403910 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x55f08f4039a0 <col:14, col:38>
|   |   `-TextComment 0x55f08f403970 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x55f08f4039f0 <line:446:3>
|   | `-TextComment 0x55f08f4039c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f403a10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f403a70 <col:11, col:14>
|       `-TextComment 0x55f08f403a40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f284910 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x55f08f284850 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x55f08f284c68 <line:114:1, line:116:1>
|   `-ReturnStmt 0x55f08f284c50 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x55f08f284c38 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55f08f284c10 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x55f08f284a40 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x55f08f284a18 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x55f08f284a00 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x55f08f2849b8 <col:10> 'unsigned int' lvalue ParmVar 0x55f08f284850 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x55f08f2849e0 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x55f08f284bf0 <col:22, col:42> 'int'
|           `-BinaryOperator 0x55f08f284bc8 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x55f08f284b88 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x55f08f284b60 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x55f08f284b48 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x55f08f284a60 <col:24> 'unsigned int' lvalue ParmVar 0x55f08f284850 'x' 'unsigned int'
|             |   `-ParenExpr 0x55f08f284b28 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x55f08f284b00 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x55f08f284ad0 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x55f08f284a88 <col:29> 'unsigned int' lvalue ParmVar 0x55f08f284850 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x55f08f284ae8 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x55f08f284ab0 <col:33> 'int' 1
|             `-IntegerLiteral 0x55f08f284ba8 <col:40> 'unsigned int' 0
|-FunctionDecl 0x55f08f284e50 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x55f08f284cb0 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x55f08f284d40 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x55f08f28cd58 <line:119:1, line:134:1>
|   |-DeclStmt 0x55f08f284f70 <line:120:2, col:16>
|   | `-VarDecl 0x55f08f284f10 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x55f08f285098 <line:122:2, line:124:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55f08f285000 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x55f08f284fe8 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x55f08f284fd0 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55f08f284f88 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x55f08f284d40 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x55f08f284fb0 <col:15> 'unsigned int' 0
|   | |-CompoundStmt 0x55f08f285080 <col:19, line:124:2>
|   | | `-ReturnStmt 0x55f08f285068 <line:123:3, col:10>
|   | |   `-ImplicitCastExpr 0x55f08f285050 <col:10> 's64_t':'long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55f08f285028 <col:10> 's64_t':'long long' lvalue ParmVar 0x55f08f284cb0 'value' 's64_t':'long long'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x55f08f28c9f0 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x55f08f2850d0 <col:2> 's64_t':'long long' lvalue Var 0x55f08f284f10 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x55f08f28c9c8 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x55f08f285180 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x55f08f285158 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x55f08f285140 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55f08f2850f8 <col:14> 's64_t':'long long' lvalue ParmVar 0x55f08f284cb0 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x55f08f285120 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x55f08f28c9b0 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x55f08f2851a0 <col:29> 'int' 1
|   |-BinaryOperator 0x55f08f28caa0 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x55f08f28ca18 <col:2> 's64_t':'long long' lvalue Var 0x55f08f284f10 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x55f08f28ca80 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x55f08f28ca68 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f28ca40 <col:14> 's64_t':'long long' lvalue Var 0x55f08f284f10 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x55f08f28cd18 <line:133:2, col:53>
|     `-BinaryOperator 0x55f08f28ccf0 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x55f08f28cb88 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x55f08f28cb60 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x55f08f28cb18 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55f08f28cac8 <col:10> 's64_t':'long long' lvalue ParmVar 0x55f08f284cb0 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x55f08f28cb48 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x55f08f28cb30 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x55f08f28caf0 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x55f08f284d40 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x55f08f28ccd0 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x55f08f28cca8 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x55f08f28cc90 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x55f08f28cba8 <col:29> 's64_t':'long long' lvalue Var 0x55f08f284f10 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x55f08f28cc70 <col:41, col:52> 'int'
|             `-BinaryOperator 0x55f08f28cc48 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x55f08f28cbd0 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x55f08f28cc30 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x55f08f28cc18 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x55f08f28cbf0 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x55f08f284d40 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x55f08f28cf88 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x55f08f28cda0 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x55f08f28ce68 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x55f08f403f00 <line:137:3, line:142:63>
|   |-ParagraphComment 0x55f08f403b80 <line:137:3>
|   | `-TextComment 0x55f08f403b50 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f403ba0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55f08f403c00 <col:10, col:68>
|   |   `-TextComment 0x55f08f403bd0 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x55f08f403c50 <line:139:3>
|   | `-TextComment 0x55f08f403c20 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f403c70 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x55f08f403d20 <line:139:17, line:140:3>
|   |   |-TextComment 0x55f08f403cd0 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x55f08f403cf0 <line:140:3> Text=" "
|   |-ParamCommandComment 0x55f08f403d40 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x55f08f403dd0 <col:17, col:69>
|   |   `-TextComment 0x55f08f403da0 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x55f08f403e20 <line:142:3, col:4>
|   | `-TextComment 0x55f08f403df0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x55f08f403e40 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x55f08f403ea0 <col:12, col:63>
|       `-TextComment 0x55f08f403e70 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x55f08f28d208 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x55f08f28d078 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x55f08f28d0f0 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x55f08f404320 <line:147:3, line:152:63>
|   |-ParagraphComment 0x55f08f403fa0 <line:147:3>
|   | `-TextComment 0x55f08f403f70 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f403fc0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55f08f404020 <col:10, col:68>
|   |   `-TextComment 0x55f08f403ff0 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x55f08f404070 <line:149:3>
|   | `-TextComment 0x55f08f404040 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f404090 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x55f08f404140 <line:149:17, line:150:3>
|   |   |-TextComment 0x55f08f4040f0 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x55f08f404110 <line:150:3> Text=" "
|   |-ParamCommandComment 0x55f08f404160 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4041f0 <col:17, col:72>
|   |   `-TextComment 0x55f08f4041c0 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x55f08f404240 <line:152:3, col:4>
|   | `-TextComment 0x55f08f404210 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x55f08f404260 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x55f08f4042c0 <col:12, col:63>
|       `-TextComment 0x55f08f404290 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x55f08f28d5f0 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x55f08f28d358 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x55f08f28d3c8 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f28d440 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x55f08f28d4b0 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x55f08f406940 <line:157:3, line:164:77>
|   |-ParagraphComment 0x55f08f4043c0 <line:157:3>
|   | `-TextComment 0x55f08f404390 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4043e0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55f08f404440 <col:10, col:65>
|   |   `-TextComment 0x55f08f404410 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x55f08f404490 <line:159:3>
|   | `-TextComment 0x55f08f404460 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4044b0 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4065b0 <line:159:19, line:160:3>
|   |   |-TextComment 0x55f08f404510 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x55f08f404530 <line:160:3> Text=" "
|   |-ParamCommandComment 0x55f08f4065d0 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x55f08f406680 <line:160:22, line:161:3>
|   |   |-TextComment 0x55f08f406630 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x55f08f406650 <line:161:3> Text=" "
|   |-ParamCommandComment 0x55f08f4066a0 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x55f08f406750 <line:161:19, line:162:3>
|   |   |-TextComment 0x55f08f406700 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x55f08f406720 <line:162:3> Text=" "
|   |-ParamCommandComment 0x55f08f406770 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x55f08f406800 <col:22, col:74>
|   |   `-TextComment 0x55f08f4067d0 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x55f08f406850 <line:164:3>
|   | `-TextComment 0x55f08f406820 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f406870 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x55f08f4068d0 <col:11, col:77>
|       `-TextComment 0x55f08f4068a0 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x55f08f28d9c0 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x55f08f28d6f0 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x55f08f28d760 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f28d7d0 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x55f08f28d840 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x55f08f406f10 <line:175:3, line:182:74>
|   |-ParagraphComment 0x55f08f4069e0 <line:175:3>
|   | `-TextComment 0x55f08f4069b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f406a00 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55f08f406a60 <col:10, col:64>
|   |   `-TextComment 0x55f08f406a30 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x55f08f406ab0 <line:177:3>
|   | `-TextComment 0x55f08f406a80 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f406ad0 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x55f08f406b80 <line:177:19, line:178:3>
|   |   |-TextComment 0x55f08f406b30 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x55f08f406b50 <line:178:3> Text=" "
|   |-ParamCommandComment 0x55f08f406ba0 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x55f08f406c50 <line:178:22, line:179:3>
|   |   |-TextComment 0x55f08f406c00 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x55f08f406c20 <line:179:3> Text=" "
|   |-ParamCommandComment 0x55f08f406c70 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x55f08f406d20 <line:179:19, line:180:3>
|   |   |-TextComment 0x55f08f406cd0 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x55f08f406cf0 <line:180:3> Text=" "
|   |-ParamCommandComment 0x55f08f406d40 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x55f08f406dd0 <col:22, col:63>
|   |   `-TextComment 0x55f08f406da0 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x55f08f406e20 <line:182:3>
|   | `-TextComment 0x55f08f406df0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f406e40 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x55f08f406ea0 <col:11, col:74>
|       `-TextComment 0x55f08f406e70 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x55f08f28dcd0 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x55f08f28dac0 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x55f08f28db30 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x55f08f28dba0 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x55f08f4074a0 <line:187:3, line:197:47>
|   |-ParagraphComment 0x55f08f406fb0 <line:187:3>
|   | `-TextComment 0x55f08f406f80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f406fd0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55f08f407030 <col:10, col:65>
|   |   `-TextComment 0x55f08f407000 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x55f08f4070a0 <line:189:3, line:190:60>
|   | |-TextComment 0x55f08f407050 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x55f08f407070 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x55f08f4070f0 <line:192:3>
|   | `-TextComment 0x55f08f4070c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f407110 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4071c0 <line:192:19, line:193:3>
|   |   |-TextComment 0x55f08f407170 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x55f08f407190 <line:193:3> Text=" "
|   |-ParamCommandComment 0x55f08f4071e0 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x55f08f407290 <line:193:22, line:194:3>
|   |   |-TextComment 0x55f08f407240 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x55f08f407260 <line:194:3> Text=" "
|   |-ParamCommandComment 0x55f08f4072b0 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x55f08f407340 <col:21, col:61>
|   |   `-TextComment 0x55f08f407310 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x55f08f407390 <line:196:3>
|   | `-TextComment 0x55f08f407360 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4073b0 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x55f08f407430 <line:196:11, line:197:47>
|       |-TextComment 0x55f08f4073e0 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x55f08f407400 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x55f08f28e088 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x55f08f28e130 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x55f08f28e290 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x55f08f28e300 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x55f08f28e3a0 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x55f08f28e3f8 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x55f08f28e3a0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x55f08f28e290 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x55f08f28e448 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x55f08f28e3a0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x55f08f28e300 'next' 'struct _dnode *'
| |-RecordDecl 0x55f08f28e488 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x55f08f28e558 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x55f08f28e5c8 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x55f08f28e660 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x55f08f28e6b8 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x55f08f28e660 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x55f08f28e558 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x55f08f28e708 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x55f08f28e660 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x55f08f28e5c8 'prev' 'struct _dnode *'
|-TypedefDecl 0x55f08f28e7b8 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x55f08f28e1e0 'struct _dnode' sugar
|   `-RecordType 0x55f08f28e110 'struct _dnode'
|     `-Record 0x55f08f28e088 '_dnode'
|-TypedefDecl 0x55f08f28e830 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x55f08f28e1e0 'struct _dnode' sugar
|   `-RecordType 0x55f08f28e110 'struct _dnode'
|     `-Record 0x55f08f28e088 '_dnode'
|-FunctionDecl 0x55f08f2c7930 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55f08f2c7828 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55f08f2c7d28 <line:193:1, line:196:1>
| | |-BinaryOperator 0x55f08f2c7b68 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2c7a68 <col:2, col:8> 'struct _dnode *' lvalue .head 0x55f08f28e290
| | | | `-MemberExpr 0x55f08f2c7a18 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |   `-ImplicitCastExpr 0x55f08f2c7a00 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2c79d8 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2c7828 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x55f08f2c7b40 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x55f08f2c7b28 <col:30> 'sys_dlist_t *' <LValueToRValue>
| | |     `-DeclRefExpr 0x55f08f2c7ac0 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2c7828 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x55f08f2c7cd0 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x55f08f2c7c20 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x55f08f28e558
| |   | `-MemberExpr 0x55f08f2c7bd0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| |   |   `-ImplicitCastExpr 0x55f08f2c7bb8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55f08f2c7b90 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2c7828 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x55f08f2c7ca8 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x55f08f2c7c90 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x55f08f2c7c58 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2c7828 'list' 'sys_dlist_t *'
| `-FullComment 0x55f08f4077e0 <line:185:3, line:189:14>
|   |-ParagraphComment 0x55f08f407540 <line:185:3>
|   | `-TextComment 0x55f08f407510 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f407560 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f4075c0 <col:10, col:44>
|   |   `-TextComment 0x55f08f407590 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x55f08f407610 <line:187:3>
|   | `-TextComment 0x55f08f4075e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f407630 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4076c0 <col:15, col:37>
|   |   `-TextComment 0x55f08f407690 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x55f08f407710 <line:189:3>
|   | `-TextComment 0x55f08f4076e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f407730 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f407790 <col:11, col:14>
|       `-TextComment 0x55f08f407760 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f2c7e20 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2c7d58 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2c8208 <line:209:1, line:212:1>
| | |-BinaryOperator 0x55f08f2c8028 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2c7f58 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x55f08f28e300
| | | | `-MemberExpr 0x55f08f2c7f08 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |   `-ImplicitCastExpr 0x55f08f2c7ef0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2c7ec8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2c7d58 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2c8010 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x55f08f2c7ff0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55f08f2c7fc8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55f08f2c7f90 <col:23> 'int' 0
| | `-BinaryOperator 0x55f08f2c81b0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x55f08f2c80e0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| |   | `-MemberExpr 0x55f08f2c8090 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| |   |   `-ImplicitCastExpr 0x55f08f2c8078 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55f08f2c8050 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2c7d58 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x55f08f2c8198 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x55f08f2c8178 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x55f08f2c8150 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x55f08f2c8118 <col:23> 'int' 0
| `-FullComment 0x55f08f407b20 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x55f08f407880 <line:201:3>
|   | `-TextComment 0x55f08f407850 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4078a0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55f08f407900 <col:10, col:57>
|   |   `-TextComment 0x55f08f4078d0 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x55f08f407950 <line:203:3>
|   | `-TextComment 0x55f08f407920 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f407970 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f407a00 <col:15, col:23>
|   |   `-TextComment 0x55f08f4079d0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x55f08f407a50 <line:205:3>
|   | `-TextComment 0x55f08f407a20 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f407a70 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f407ad0 <col:11, col:14>
|       `-TextComment 0x55f08f407aa0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f2c83a0 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2c8298 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x55f08f2c8648 <line:223:1, line:225:1>
| | `-ReturnStmt 0x55f08f2c8600 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x55f08f2c85e8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55f08f2c85c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x55f08f2c8590 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55f08f2c84d8 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x55f08f28e300
| |       |   `-MemberExpr 0x55f08f2c8488 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| |       |     `-ImplicitCastExpr 0x55f08f2c8470 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55f08f2c8448 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x55f08f2c8298 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x55f08f2c85a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x55f08f2c8570 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x55f08f2c8548 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x55f08f2c8510 <col:23> 'int' 0
| `-FullComment 0x55f08f407e60 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x55f08f407bc0 <line:215:3>
|   | `-TextComment 0x55f08f407b90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f407be0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f407c40 <col:10, col:49>
|   |   `-TextComment 0x55f08f407c10 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x55f08f407c90 <line:217:3>
|   | `-TextComment 0x55f08f407c60 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f407cb0 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f407d40 <col:15, col:23>
|   |   `-TextComment 0x55f08f407d10 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x55f08f407d90 <line:219:3>
|   | `-TextComment 0x55f08f407d60 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f407db0 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x55f08f407e10 <col:11, col:65>
|       `-TextComment 0x55f08f407de0 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x55f08f2c99d0 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2c8670 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f2c86e0 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2c9c28 <line:237:1, line:239:1>
| | `-ReturnStmt 0x55f08f2c9be0 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x55f08f2c9bc8 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55f08f2c9ba0 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x55f08f2c9b70 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55f08f2c9b10 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55f08f28e290
| |       |   `-MemberExpr 0x55f08f2c9ac0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| |       |     `-ImplicitCastExpr 0x55f08f2c9aa8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55f08f2c9a80 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2c8670 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55f08f2c9b88 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f2c9b48 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2c86e0 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f408280 <line:228:3, line:233:52>
|   |-ParagraphComment 0x55f08f407f00 <line:228:3>
|   | `-TextComment 0x55f08f407ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f407f20 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f407f80 <col:10, col:44>
|   |   `-TextComment 0x55f08f407f50 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x55f08f407fd0 <line:230:3>
|   | `-TextComment 0x55f08f407fa0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f407ff0 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4080a0 <line:230:15, line:231:3>
|   |   |-TextComment 0x55f08f408050 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55f08f408070 <line:231:3> Text=" "
|   |-ParamCommandComment 0x55f08f4080c0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f408150 <col:15, col:32>
|   |   `-TextComment 0x55f08f408120 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x55f08f4081a0 <line:233:3>
|   | `-TextComment 0x55f08f408170 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4081c0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55f08f408220 <col:11, col:52>
|       `-TextComment 0x55f08f4081f0 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x55f08f2c9d50 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2c9c50 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f2c9cc0 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2c9fa8 <line:251:1, line:253:1>
| | `-ReturnStmt 0x55f08f2c9f60 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x55f08f2c9f48 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55f08f2c9f20 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x55f08f2c9ef0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55f08f2c9e90 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x55f08f28e558
| |       |   `-MemberExpr 0x55f08f2c9e40 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| |       |     `-ImplicitCastExpr 0x55f08f2c9e28 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55f08f2c9e00 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2c9c50 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55f08f2c9f08 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f2c9ec8 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2c9cc0 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f4096c0 <line:242:3, line:247:52>
|   |-ParagraphComment 0x55f08f408320 <line:242:3>
|   | `-TextComment 0x55f08f4082f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f408340 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f4083a0 <col:10, col:44>
|   |   `-TextComment 0x55f08f408370 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x55f08f4083f0 <line:244:3>
|   | `-TextComment 0x55f08f4083c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f408410 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4084c0 <line:244:15, line:245:3>
|   |   |-TextComment 0x55f08f408470 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55f08f408490 <line:245:3> Text=" "
|   |-ParamCommandComment 0x55f08f4084e0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f408570 <col:15, col:32>
|   |   `-TextComment 0x55f08f408540 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x55f08f4095e0 <line:247:3>
|   | `-TextComment 0x55f08f408590 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f409600 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55f08f409660 <col:11, col:52>
|       `-TextComment 0x55f08f409630 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x55f08f2ca0d0 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55f08f2c9fd0 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55f08f2ca318 <line:264:1, line:266:1>
| | `-ReturnStmt 0x55f08f2ca2d8 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x55f08f2ca2c0 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55f08f2ca298 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x55f08f2ca268 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55f08f2ca208 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55f08f28e290
| |       |   `-MemberExpr 0x55f08f2ca1b8 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| |       |     `-ImplicitCastExpr 0x55f08f2ca1a0 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55f08f2ca178 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2c9fd0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55f08f2ca280 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f2ca240 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2c9fd0 'list' 'sys_dlist_t *'
| `-FullComment 0x55f08f409a00 <line:256:3, line:260:41>
|   |-ParagraphComment 0x55f08f409760 <line:256:3>
|   | `-TextComment 0x55f08f409730 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f409780 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55f08f4097e0 <col:10, col:36>
|   |   `-TextComment 0x55f08f4097b0 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x55f08f409830 <line:258:3>
|   | `-TextComment 0x55f08f409800 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f409850 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4098e0 <col:15, col:51>
|   |   `-TextComment 0x55f08f4098b0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55f08f409930 <line:260:3>
|   | `-TextComment 0x55f08f409900 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f409950 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x55f08f4099b0 <col:11, col:41>
|       `-TextComment 0x55f08f409980 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x55f08f2ca3c8 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55f08f2ca340 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55f08f2ca6b8 <line:279:1, line:281:1>
| | `-ReturnStmt 0x55f08f2ca670 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x55f08f2ca658 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x55f08f2ca630 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x55f08f2ca600 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x55f08f2ca500 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55f08f28e290
| |       |   `-MemberExpr 0x55f08f2ca4b0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| |       |     `-ImplicitCastExpr 0x55f08f2ca498 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x55f08f2ca470 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2ca340 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x55f08f2ca618 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x55f08f2ca5c8 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x55f08f28e558
| |           `-MemberExpr 0x55f08f2ca578 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| |             `-ImplicitCastExpr 0x55f08f2ca560 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x55f08f2ca538 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2ca340 'list' 'sys_dlist_t *'
| `-FullComment 0x55f08f409da0 <line:269:3, line:275:50>
|   |-ParagraphComment 0x55f08f409aa0 <line:269:3>
|   | `-TextComment 0x55f08f409a70 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f409ac0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55f08f409b20 <col:10, col:45>
|   |   `-TextComment 0x55f08f409af0 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x55f08f409b70 <line:271:3, col:62>
|   | `-TextComment 0x55f08f409b40 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f409bc0 <line:273:3>
|   | `-TextComment 0x55f08f409b90 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f409be0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f409c70 <col:15, col:51>
|   |   `-TextComment 0x55f08f409c40 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55f08f409cc0 <line:275:3>
|   | `-TextComment 0x55f08f409c90 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f409ce0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55f08f409d40 <col:11, col:50>
|       `-TextComment 0x55f08f409d10 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x55f08f2ca7e0 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55f08f2ca6e0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55f08f2cabb8 <line:292:1, line:294:1>
| | `-ReturnStmt 0x55f08f2cab70 <line:293:2, col:49>
| |   `-ConditionalOperator 0x55f08f2cab40 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x55f08f2caaf8 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x55f08f2ca950 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x55f08f2ca938 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x55f08f2ca888 <col:9> 'bool (sys_dlist_t *)' Function 0x55f08f2ca0d0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x55f08f2ca980 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55f08f2ca8b0 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2ca6e0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55f08f2cab28 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55f08f2caa10 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55f08f2ca9e8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55f08f2ca9b0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f2cab10 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55f08f2caac0 <col:43, col:49> 'struct _dnode *' lvalue .head 0x55f08f28e290
| |         `-MemberExpr 0x55f08f2caa70 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| |           `-ImplicitCastExpr 0x55f08f2caa58 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55f08f2caa30 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2ca6e0 'list' 'sys_dlist_t *'
| `-FullComment 0x55f08f40a0e0 <line:284:3, line:288:63>
|   |-ParagraphComment 0x55f08f409e40 <line:284:3>
|   | `-TextComment 0x55f08f409e10 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f409e60 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55f08f409ec0 <col:10, col:54>
|   |   `-TextComment 0x55f08f409e90 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x55f08f409f10 <line:286:3>
|   | `-TextComment 0x55f08f409ee0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f409f30 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f409fc0 <col:15, col:51>
|   |   `-TextComment 0x55f08f409f90 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55f08f40a010 <line:288:3>
|   | `-TextComment 0x55f08f409fe0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40a030 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x55f08f40a090 <col:11, col:63>
|       `-TextComment 0x55f08f40a060 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x55f08f2cac68 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55f08f2cabe0 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55f08f2cae38 <line:307:1, line:309:1>
| | `-ReturnStmt 0x55f08f2cadf0 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x55f08f2cadd8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x55f08f2cada0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x55f08f28e290
| |       `-MemberExpr 0x55f08f2cad50 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| |         `-ImplicitCastExpr 0x55f08f2cad38 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x55f08f2cad10 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cabe0 'list' 'sys_dlist_t *'
| `-FullComment 0x55f08f40a480 <line:297:3, line:303:40>
|   |-ParagraphComment 0x55f08f40a180 <line:297:3>
|   | `-TextComment 0x55f08f40a150 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40a1a0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55f08f40a200 <col:10, col:54>
|   |   `-TextComment 0x55f08f40a1d0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x55f08f40a250 <line:299:3, col:42>
|   | `-TextComment 0x55f08f40a220 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x55f08f40a2a0 <line:301:3>
|   | `-TextComment 0x55f08f40a270 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40a2c0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40a350 <col:15, col:51>
|   |   `-TextComment 0x55f08f40a320 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55f08f40a3a0 <line:303:3>
|   | `-TextComment 0x55f08f40a370 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40a3c0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x55f08f40a420 <col:11, col:40>
|       `-TextComment 0x55f08f40a3f0 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x55f08f2cafe0 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2cae60 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f2caed0 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2cb3e8 <line:324:1, line:326:1>
| | `-ReturnStmt 0x55f08f2cb3a0 <line:325:2, col:45>
| |   `-ConditionalOperator 0x55f08f2cb370 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x55f08f2cb1d8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x55f08f2cb1b0 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x55f08f2cb180 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55f08f2cb090 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2caed0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55f08f2cb198 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x55f08f2cb148 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x55f08f28e558
| |     |       `-MemberExpr 0x55f08f2cb0f8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| |     |         `-ImplicitCastExpr 0x55f08f2cb0e0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x55f08f2cb0b8 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cae60 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55f08f2cb358 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55f08f2cb258 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55f08f2cb230 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55f08f2cb1f8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f2cb340 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55f08f2cb308 <col:39, col:45> 'struct _dnode *' lvalue .next 0x55f08f28e300
| |         `-MemberExpr 0x55f08f2cb2b8 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| |           `-ImplicitCastExpr 0x55f08f2cb2a0 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55f08f2cb278 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2caed0 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f40a8f0 <line:312:3, line:319:78>
|   |-ParagraphComment 0x55f08f40a520 <line:312:3>
|   | `-TextComment 0x55f08f40a4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40a540 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x55f08f40a5a0 <col:10, col:72>
|   |   `-TextComment 0x55f08f40a570 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x55f08f40a5f0 <line:314:3, col:69>
|   | `-TextComment 0x55f08f40a5c0 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x55f08f40a640 <line:316:3>
|   | `-TextComment 0x55f08f40a610 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40a660 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40a710 <line:316:15, line:317:3>
|   |   |-TextComment 0x55f08f40a6c0 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55f08f40a6e0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x55f08f40a730 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f40a7c0 <col:15, col:70>
|   |   `-TextComment 0x55f08f40a790 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x55f08f40a810 <line:319:3>
|   | `-TextComment 0x55f08f40a7e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40a830 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x55f08f40a890 <col:11, col:78>
|       `-TextComment 0x55f08f40a860 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x55f08f2cb510 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2cb410 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f2cb480 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2cb948 <line:340:1, line:342:1>
| | `-ReturnStmt 0x55f08f2cb900 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x55f08f2cb8d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x55f08f2cb6c0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x55f08f2cb698 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x55f08f2cb668 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55f08f2cb5c0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cb480 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55f08f2cb680 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x55f08f2cb648 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x55f08f2cb620 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x55f08f2cb5e8 <col:23> 'int' 0
| |     |-CallExpr 0x55f08f2cb7d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x55f08f2cb7b8 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x55f08f2cb6e0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x55f08f2cafe0 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x55f08f2cb808 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x55f08f2cb708 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cb410 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x55f08f2cb820 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x55f08f2cb730 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cb480 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x55f08f2cb8b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x55f08f2cb898 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x55f08f2cb870 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x55f08f2cb838 <col:23> 'int' 0
| `-FullComment 0x55f08f40ad30 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x55f08f40a990 <line:329:3>
|   | `-TextComment 0x55f08f40a960 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40a9b0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55f08f40aa10 <col:10, col:54>
|   |   `-TextComment 0x55f08f40a9e0 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x55f08f40aa60 <line:331:3>
|   | `-TextComment 0x55f08f40aa30 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40aa80 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40ab30 <line:331:15, line:332:3>
|   |   |-TextComment 0x55f08f40aae0 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55f08f40ab00 <line:332:3> Text=" "
|   |-ParamCommandComment 0x55f08f40ab50 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f40abe0 <col:15, col:70>
|   |   `-TextComment 0x55f08f40abb0 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x55f08f40ac30 <line:334:3>
|   | `-TextComment 0x55f08f40ac00 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40ac50 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x55f08f40acd0 <line:334:11, line:335:68>
|       |-TextComment 0x55f08f40ac80 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x55f08f40aca0 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x55f08f2cbac0 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2cb9c0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f2cba30 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2cbec8 <line:358:1, line:360:1>
| | `-ReturnStmt 0x55f08f2cbe80 <line:359:2, col:45>
| |   `-ConditionalOperator 0x55f08f2cbe50 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x55f08f2cbcb8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x55f08f2cbc90 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x55f08f2cbc60 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55f08f2cbb70 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cba30 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55f08f2cbc78 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x55f08f2cbc28 <col:18, col:24> 'struct _dnode *' lvalue .head 0x55f08f28e290
| |     |       `-MemberExpr 0x55f08f2cbbd8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| |     |         `-ImplicitCastExpr 0x55f08f2cbbc0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x55f08f2cbb98 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cb9c0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55f08f2cbe38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55f08f2cbd38 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55f08f2cbd10 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55f08f2cbcd8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f2cbe20 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55f08f2cbde8 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| |         `-MemberExpr 0x55f08f2cbd98 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| |           `-ImplicitCastExpr 0x55f08f2cbd80 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55f08f2cbd58 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cba30 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f40b1c0 <line:345:3, line:353:10>
|   |-ParagraphComment 0x55f08f40add0 <line:345:3>
|   | `-TextComment 0x55f08f40ada0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40adf0 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x55f08f40ae50 <col:10, col:76>
|   |   `-TextComment 0x55f08f40ae20 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x55f08f40aea0 <line:347:3, col:69>
|   | `-TextComment 0x55f08f40ae70 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x55f08f40aef0 <line:349:3>
|   | `-TextComment 0x55f08f40aec0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40af10 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40afc0 <line:349:15, line:350:3>
|   |   |-TextComment 0x55f08f40af70 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55f08f40af90 <line:350:3> Text=" "
|   |-ParamCommandComment 0x55f08f40afe0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f40b070 <col:15, col:74>
|   |   `-TextComment 0x55f08f40b040 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x55f08f40b0c0 <line:352:3>
|   | `-TextComment 0x55f08f40b090 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40b0e0 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x55f08f40b160 <line:352:11, line:353:10>
|       |-TextComment 0x55f08f40b110 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x55f08f40b130 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x55f08f2cbff0 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2cbef0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f2cbf60 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2cc3c8 <line:375:1, line:377:1>
| | `-ReturnStmt 0x55f08f2cc380 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x55f08f2cc350 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x55f08f2cc1a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x55f08f2cc178 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x55f08f2cc148 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55f08f2cc0a0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cbf60 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x55f08f2cc160 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x55f08f2cc128 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x55f08f2cc100 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x55f08f2cc0c8 <col:23> 'int' 0
| |     |-CallExpr 0x55f08f2cc250 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x55f08f2cc238 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x55f08f2cc1c0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x55f08f2cbac0 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x55f08f2cc288 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x55f08f2cc1e8 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cbef0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x55f08f2cc2a0 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x55f08f2cc210 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cbf60 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x55f08f2cc338 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x55f08f2cc318 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x55f08f2cc2f0 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x55f08f2cc2b8 <col:23> 'int' 0
| `-FullComment 0x55f08f40b640 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x55f08f40b260 <line:363:3>
|   | `-TextComment 0x55f08f40b230 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40b280 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55f08f40b2e0 <col:10, col:58>
|   |   `-TextComment 0x55f08f40b2b0 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x55f08f40b330 <line:365:3>
|   | `-TextComment 0x55f08f40b300 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40b350 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40b400 <line:365:15, line:366:3>
|   |   |-TextComment 0x55f08f40b3b0 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55f08f40b3d0 <line:366:3> Text=" "
|   |-ParamCommandComment 0x55f08f40b420 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f40b4b0 <col:15, col:74>
|   |   `-TextComment 0x55f08f40b480 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x55f08f40b500 <line:368:3>
|   | `-TextComment 0x55f08f40b4d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40b520 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x55f08f40b5e0 <line:368:11, line:370:13>
|       |-TextComment 0x55f08f40b550 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x55f08f40b570 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x55f08f40b590 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x55f08f2cc478 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55f08f2cc3f0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55f08f2cc7d8 <line:388:1, line:390:1>
| | `-ReturnStmt 0x55f08f2cc790 <line:389:2, col:49>
| |   `-ConditionalOperator 0x55f08f2cc760 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x55f08f2cc718 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x55f08f2cc588 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x55f08f2cc570 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x55f08f2cc520 <col:9> 'bool (sys_dlist_t *)' Function 0x55f08f2ca0d0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x55f08f2cc5b8 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55f08f2cc548 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cc3f0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x55f08f2cc748 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x55f08f2cc630 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x55f08f2cc608 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x55f08f2cc5d0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f2cc730 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x55f08f2cc6e0 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x55f08f28e558
| |         `-MemberExpr 0x55f08f2cc690 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| |           `-ImplicitCastExpr 0x55f08f2cc678 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55f08f2cc650 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cc3f0 'list' 'sys_dlist_t *'
| `-FullComment 0x55f08f40b980 <line:380:3, line:384:63>
|   |-ParagraphComment 0x55f08f40b6e0 <line:380:3>
|   | `-TextComment 0x55f08f40b6b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40b700 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55f08f40b760 <col:10, col:54>
|   |   `-TextComment 0x55f08f40b730 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x55f08f40b7b0 <line:382:3>
|   | `-TextComment 0x55f08f40b780 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40b7d0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40b860 <col:15, col:51>
|   |   `-TextComment 0x55f08f40b830 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55f08f40b8b0 <line:384:3>
|   | `-TextComment 0x55f08f40b880 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40b8d0 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x55f08f40b930 <col:11, col:63>
|       `-TextComment 0x55f08f40b900 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x55f08f2cc9d0 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2cc800 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f2cc870 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2cd0a8 <line:404:1, line:410:1>
| | |-BinaryOperator 0x55f08f2ccb88 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2ccb10 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55f08f28e300
| | | | `-MemberExpr 0x55f08f2ccac0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |   `-ImplicitCastExpr 0x55f08f2ccaa8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2cca80 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cc870 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2ccb70 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f08f2ccb48 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cc800 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55f08f2ccd58 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2ccc40 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| | | | `-MemberExpr 0x55f08f2ccbf0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | | |   `-ImplicitCastExpr 0x55f08f2ccbd8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2ccbb0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cc870 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2ccd40 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55f08f2ccd08 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x55f08f28e558
| | |     `-MemberExpr 0x55f08f2cccb8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | |       `-ImplicitCastExpr 0x55f08f2ccca0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55f08f2ccc78 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cc800 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55f08f2ccf28 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2cceb0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x55f08f28e300
| | | | `-MemberExpr 0x55f08f2cce60 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |   `-ImplicitCastExpr 0x55f08f2cce48 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55f08f2cce10 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x55f08f28e558
| | | |       `-MemberExpr 0x55f08f2ccdc0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | | |         `-ImplicitCastExpr 0x55f08f2ccda8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55f08f2ccd80 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cc800 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x55f08f2ccf10 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f08f2ccee8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cc870 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55f08f2cd058 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x55f08f2ccfe0 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x55f08f28e558
| |   | `-MemberExpr 0x55f08f2ccf90 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| |   |   `-ImplicitCastExpr 0x55f08f2ccf78 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55f08f2ccf50 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cc800 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x55f08f2cd040 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f2cd018 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cc870 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f40bdf0 <line:393:3, line:400:14>
|   |-ParagraphComment 0x55f08f40ba20 <line:393:3>
|   | `-TextComment 0x55f08f40b9f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40ba40 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55f08f40baa0 <col:10, col:34>
|   |   `-TextComment 0x55f08f40ba70 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x55f08f40baf0 <line:395:3, col:62>
|   | `-TextComment 0x55f08f40bac0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f40bb40 <line:397:3>
|   | `-TextComment 0x55f08f40bb10 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40bb60 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40bc10 <line:397:15, line:398:3>
|   |   |-TextComment 0x55f08f40bbc0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55f08f40bbe0 <line:398:3> Text=" "
|   |-ParamCommandComment 0x55f08f40bc30 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f40bcc0 <col:15, col:36>
|   |   `-TextComment 0x55f08f40bc90 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x55f08f40bd10 <line:400:3>
|   | `-TextComment 0x55f08f40bce0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40bd30 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f40bd90 <col:11, col:14>
|       `-TextComment 0x55f08f40bd60 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f2cd1e8 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2cd0e8 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f2cd158 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2cd8c8 <line:424:1, line:430:1>
| | |-BinaryOperator 0x55f08f2cd440 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2cd328 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55f08f28e300
| | | | `-MemberExpr 0x55f08f2cd2d8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |   `-ImplicitCastExpr 0x55f08f2cd2c0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2cd298 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cd158 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2cd428 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55f08f2cd3f0 <col:15, col:21> 'struct _dnode *' lvalue .head 0x55f08f28e290
| | |     `-MemberExpr 0x55f08f2cd3a0 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | |       `-ImplicitCastExpr 0x55f08f2cd388 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55f08f2cd360 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cd0e8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55f08f2cd570 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2cd4f8 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| | | | `-MemberExpr 0x55f08f2cd4a8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | | |   `-ImplicitCastExpr 0x55f08f2cd490 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2cd468 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cd158 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2cd558 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f08f2cd530 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cd0e8 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x55f08f2cd740 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2cd6c8 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| | | | `-MemberExpr 0x55f08f2cd678 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | | |   `-ImplicitCastExpr 0x55f08f2cd660 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55f08f2cd628 <col:2, col:8> 'struct _dnode *' lvalue .head 0x55f08f28e290
| | | |       `-MemberExpr 0x55f08f2cd5d8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |         `-ImplicitCastExpr 0x55f08f2cd5c0 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55f08f2cd598 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cd0e8 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x55f08f2cd728 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f08f2cd700 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cd158 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55f08f2cd870 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x55f08f2cd7f8 <col:2, col:8> 'struct _dnode *' lvalue .head 0x55f08f28e290
| |   | `-MemberExpr 0x55f08f2cd7a8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| |   |   `-ImplicitCastExpr 0x55f08f2cd790 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55f08f2cd768 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2cd0e8 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x55f08f2cd858 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f2cd830 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cd158 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f40c260 <line:413:3, line:420:14>
|   |-ParagraphComment 0x55f08f40be90 <line:413:3>
|   | `-TextComment 0x55f08f40be60 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40beb0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55f08f40bf10 <col:10, col:34>
|   |   `-TextComment 0x55f08f40bee0 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x55f08f40bf60 <line:415:3, col:62>
|   | `-TextComment 0x55f08f40bf30 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f40bfb0 <line:417:3>
|   | `-TextComment 0x55f08f40bf80 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40bfd0 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40c080 <line:417:15, line:418:3>
|   |   |-TextComment 0x55f08f40c030 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55f08f40c050 <line:418:3> Text=" "
|   |-ParamCommandComment 0x55f08f40c0a0 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f40c130 <col:15, col:36>
|   |   `-TextComment 0x55f08f40c100 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x55f08f40c180 <line:420:3>
|   | `-TextComment 0x55f08f40c150 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40c1a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f40c200 <col:11, col:14>
|       `-TextComment 0x55f08f40c1d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f2ce2c0 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2cd908 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x55f08f2ce1f0 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2ce998 <line:441:1, line:446:1>
| | |-BinaryOperator 0x55f08f2ce518 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2ce400 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| | | | `-MemberExpr 0x55f08f2ce3b0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | | |   `-ImplicitCastExpr 0x55f08f2ce398 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2ce370 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2ce1f0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2ce500 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55f08f2ce4c8 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| | |     `-MemberExpr 0x55f08f2ce478 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | |       `-ImplicitCastExpr 0x55f08f2ce460 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55f08f2ce438 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cd908 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x55f08f2ce648 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2ce5d0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55f08f28e300
| | | | `-MemberExpr 0x55f08f2ce580 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |   `-ImplicitCastExpr 0x55f08f2ce568 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2ce540 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2ce1f0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2ce630 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f08f2ce608 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cd908 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x55f08f2ce818 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2ce7a0 <col:2, col:19> 'struct _dnode *' lvalue .next 0x55f08f28e300
| | | | `-MemberExpr 0x55f08f2ce750 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |   `-ImplicitCastExpr 0x55f08f2ce738 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55f08f2ce700 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| | | |       `-MemberExpr 0x55f08f2ce6b0 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | | |         `-ImplicitCastExpr 0x55f08f2ce698 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55f08f2ce670 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cd908 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2ce800 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f08f2ce7d8 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2ce1f0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x55f08f2ce948 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x55f08f2ce8d0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| |   | `-MemberExpr 0x55f08f2ce880 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| |   |   `-ImplicitCastExpr 0x55f08f2ce868 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55f08f2ce840 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cd908 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x55f08f2ce930 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f2ce908 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2ce1f0 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f40c5f0 <line:433:3, line:438:36>
|   |-ParagraphComment 0x55f08f40c300 <line:433:3>
|   | `-TextComment 0x55f08f40c2d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40c320 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55f08f40c380 <col:10, col:35>
|   |   `-TextComment 0x55f08f40c350 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x55f08f40c3d0 <line:435:3, col:52>
|   | `-TextComment 0x55f08f40c3a0 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x55f08f40c420 <line:437:3>
|   | `-TextComment 0x55f08f40c3f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40c440 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40c4f0 <line:437:20, line:438:3>
|   |   |-TextComment 0x55f08f40c4a0 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x55f08f40c4c0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x55f08f40c510 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55f08f40c5a0 <col:15, col:36>
|       `-TextComment 0x55f08f40c570 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x55f08f2ceea0 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x55f08f2ce9d8 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f2cea48 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x55f08f2cece0 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x55f08f2ced58 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x55f08f2d4b68 <line:467:1, line:482:1>
| | `-IfStmt 0x55f08f2d4b00 <line:468:2, line:481:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-CallExpr 0x55f08f2cefc8 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x55f08f2cefb0 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x55f08f2cef60 <col:6> 'bool (sys_dlist_t *)' Function 0x55f08f2ca0d0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x55f08f2ceff8 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55f08f2cef88 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2ce9d8 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x55f08f2cf168 <col:32, line:470:2>
| |   | `-CallExpr 0x55f08f2cf100 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x55f08f2cf0e8 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55f08f2cf010 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x55f08f2cc9d0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x55f08f2cf138 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x55f08f2cf038 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2ce9d8 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x55f08f2cf150 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55f08f2cf060 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cea48 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x55f08f2d4ad8 <line:470:9, line:481:2>
| |     |-DeclStmt 0x55f08f2d4318 <line:471:3, col:47>
| |     | `-VarDecl 0x55f08f2cf190 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x55f08f2d42d0 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x55f08f2d42b8 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x55f08f2d4210 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x55f08f2ca7e0 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x55f08f2d4300 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55f08f2d4238 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2ce9d8 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x55f08f2d4738 <line:473:3, line:475:3>
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x55f08f2d45b0 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x55f08f2d4430 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x55f08f2d4408 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x55f08f2d43d8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x55f08f2d4330 <col:11> 'sys_dnode_t *' lvalue Var 0x55f08f2cf190 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x55f08f2d43f0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x55f08f2d43b8 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x55f08f2d4390 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x55f08f2d4358 <col:23> 'int' 0
| |     | | `-ParenExpr 0x55f08f2d4590 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x55f08f2d4568 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x55f08f2d44e0 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x55f08f2d44c8 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x55f08f2d4450 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x55f08f2cece0 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x55f08f2d4518 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x55f08f2d4478 <col:33> 'sys_dnode_t *' lvalue Var 0x55f08f2cf190 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x55f08f2d4530 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x55f08f2d44a0 <col:38> 'void *' lvalue ParmVar 0x55f08f2ced58 'data' 'void *'
| |     | |     `-IntegerLiteral 0x55f08f2d4548 <col:47> 'int' 0
| |     | `-CompoundStmt 0x55f08f2d4720 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x55f08f2d46f8 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x55f08f2d45d8 <col:4> 'sys_dnode_t *' lvalue Var 0x55f08f2cf190 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x55f08f2d4690 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x55f08f2d4678 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x55f08f2d4600 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x55f08f2cb510 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x55f08f2d46c8 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x55f08f2d4628 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2ce9d8 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x55f08f2d46e0 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x55f08f2d4650 <col:36> 'sys_dnode_t *' lvalue Var 0x55f08f2cf190 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x55f08f2d4aa0 <line:476:3, line:480:3>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-BinaryOperator 0x55f08f2d4830 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x55f08f2d4800 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55f08f2d4758 <col:7> 'sys_dnode_t *' lvalue Var 0x55f08f2cf190 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x55f08f2d4818 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x55f08f2d47e0 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x55f08f2d47b8 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x55f08f2d4780 <col:23> 'int' 0
| |       |-CompoundStmt 0x55f08f2d4978 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x55f08f2d4910 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x55f08f2d48f8 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x55f08f2d4858 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x55f08f2ce2c0 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x55f08f2d4948 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x55f08f2d4880 <col:21> 'sys_dnode_t *' lvalue Var 0x55f08f2cf190 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x55f08f2d4960 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55f08f2d48a8 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cea48 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x55f08f2d4a88 <line:478:10, line:480:3>
| |         `-CallExpr 0x55f08f2d4a20 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x55f08f2d4a08 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x55f08f2d4990 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x55f08f2cc9d0 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x55f08f2d4a58 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x55f08f2d49b8 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2ce9d8 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x55f08f2d4a70 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x55f08f2d49e0 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2cea48 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f40ccb0 <line:449:3, line:462:14>
|   |-ParagraphComment 0x55f08f40c690 <line:449:3>
|   | `-TextComment 0x55f08f40c660 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40c6b0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55f08f40c710 <col:10, col:33>
|   |   `-TextComment 0x55f08f40c6e0 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x55f08f40c7d0 <line:451:3, line:454:62>
|   | |-TextComment 0x55f08f40c730 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x55f08f40c750 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x55f08f40c770 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x55f08f40c790 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f40c820 <line:456:3>
|   | `-TextComment 0x55f08f40c7f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40c840 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40c8f0 <line:456:15, line:457:3>
|   |   |-TextComment 0x55f08f40c8a0 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x55f08f40c8c0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x55f08f40c910 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f40c9c0 <line:457:15, line:458:3>
|   |   |-TextComment 0x55f08f40c970 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x55f08f40c990 <line:458:3> Text=" "
|   |-ParamCommandComment 0x55f08f40c9e0 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x55f08f40cac0 <line:458:15, line:460:3>
|   |   |-TextComment 0x55f08f40ca40 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x55f08f40ca60 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x55f08f40ca80 <line:460:3> Text=" "
|   |-ParamCommandComment 0x55f08f40cae0 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x55f08f40cb70 <col:15, col:34>
|   |   `-TextComment 0x55f08f40cb40 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x55f08f40cbc0 <line:462:3>
|   | `-TextComment 0x55f08f40cb90 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40cbe0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f40cc40 <col:11, col:14>
|       `-TextComment 0x55f08f40cc10 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f2d4c18 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2d4b90 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x55f08f2d5688 <line:496:1, line:500:1>
| | |-BinaryOperator 0x55f08f2d4f08 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2d4df0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x55f08f28e300
| | | | `-MemberExpr 0x55f08f2d4da0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |   `-ImplicitCastExpr 0x55f08f2d4d88 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55f08f2d4d50 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| | | |       `-MemberExpr 0x55f08f2d4d00 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | | |         `-ImplicitCastExpr 0x55f08f2d4ce8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55f08f2d4cc0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2d4b90 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2d4ef0 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55f08f2d4eb8 <col:21, col:27> 'struct _dnode *' lvalue .next 0x55f08f28e300
| | |     `-MemberExpr 0x55f08f2d4e68 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | |       `-ImplicitCastExpr 0x55f08f2d4e50 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55f08f2d4e28 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2d4b90 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x55f08f2d5178 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x55f08f2d5060 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| | | | `-MemberExpr 0x55f08f2d5010 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | | |   `-ImplicitCastExpr 0x55f08f2d4ff8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x55f08f2d4fc0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x55f08f28e300
| | | |       `-MemberExpr 0x55f08f2d4f70 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | |         `-ImplicitCastExpr 0x55f08f2d4f58 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x55f08f2d4f30 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2d4b90 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x55f08f2d5160 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x55f08f2d5128 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x55f08f28e5c8
| | |     `-MemberExpr 0x55f08f2d50d8 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x55f08f28e660
| | |       `-ImplicitCastExpr 0x55f08f2d50c0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55f08f2d5098 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2d4b90 'node' 'sys_dnode_t *'
| | `-CallExpr 0x55f08f2d5610 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x55f08f2d55f8 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55f08f2d51a0 <col:2> 'void (sys_dnode_t *)' Function 0x55f08f2c7e20 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x55f08f2d5640 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f2d51c8 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x55f08f2d4b90 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f40d070 <line:485:3, line:492:14>
|   |-ParagraphComment 0x55f08f40cd50 <line:485:3>
|   | `-TextComment 0x55f08f40cd20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40cd70 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f40cdd0 <col:10, col:44>
|   |   `-TextComment 0x55f08f40cda0 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x55f08f40ce40 <line:487:3, line:488:62>
|   | |-TextComment 0x55f08f40cdf0 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x55f08f40ce10 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f40ce90 <line:490:3>
|   | `-TextComment 0x55f08f40ce60 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40ceb0 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40cf40 <col:15, col:33>
|   |   `-TextComment 0x55f08f40cf10 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x55f08f40cf90 <line:492:3>
|   | `-TextComment 0x55f08f40cf60 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40cfb0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f40d010 <col:11, col:14>
|       `-TextComment 0x55f08f40cfe0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f2d5748 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x55f08f2d56c0 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x55f08f2d5c98 <line:513:1, line:522:1>
| | |-DeclStmt 0x55f08f2d58f8 <line:514:2, col:26>
| | | `-VarDecl 0x55f08f2d5800 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x55f08f2d58e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x55f08f2d58c0 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x55f08f2d5898 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x55f08f2d5860 <col:23> 'int' 0
| | |-IfStmt 0x55f08f2d5be0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55f08f2d59c0 <line:516:6, col:30> 'int' prefix '!'
| | | | `-CallExpr 0x55f08f2d5978 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x55f08f2d5960 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55f08f2d5910 <col:7> 'bool (sys_dlist_t *)' Function 0x55f08f2ca0d0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x55f08f2d59a8 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2d5938 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2d56c0 'list' 'sys_dlist_t *'
| | | |-CompoundStmt 0x55f08f2d5bc0 <col:33, line:519:2>
| | | | |-BinaryOperator 0x55f08f2d5ae8 <line:517:3, col:16> 'sys_dnode_t *' '='
| | | | | |-DeclRefExpr 0x55f08f2d59e0 <col:3> 'sys_dnode_t *' lvalue Var 0x55f08f2d5800 'node' 'sys_dnode_t *'
| | | | | `-ImplicitCastExpr 0x55f08f2d5ad0 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | | | |   `-MemberExpr 0x55f08f2d5a98 <col:10, col:16> 'struct _dnode *' lvalue .head 0x55f08f28e290
| | | | |     `-MemberExpr 0x55f08f2d5a48 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x55f08f28e3a0
| | | | |       `-ImplicitCastExpr 0x55f08f2d5a30 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | | | |         `-DeclRefExpr 0x55f08f2d5a08 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x55f08f2d56c0 'list' 'sys_dlist_t *'
| | | | `-CallExpr 0x55f08f2d5b78 <line:518:3, col:24> 'void'
| | | |   |-ImplicitCastExpr 0x55f08f2d5b60 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55f08f2d5b10 <col:3> 'void (sys_dnode_t *)' Function 0x55f08f2d4c18 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | | |   `-ImplicitCastExpr 0x55f08f2d5ba8 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f2d5b38 <col:20> 'sys_dnode_t *' lvalue Var 0x55f08f2d5800 'node' 'sys_dnode_t *'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x55f08f2d5c58 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x55f08f2d5c40 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f2d5c18 <col:9> 'sys_dnode_t *' lvalue Var 0x55f08f2d5800 'node' 'sys_dnode_t *'
| `-FullComment 0x55f08f40d410 <line:503:3, line:509:60>
|   |-ParagraphComment 0x55f08f40d110 <line:503:3>
|   | `-TextComment 0x55f08f40d0e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40d130 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55f08f40d190 <col:10, col:38>
|   |   `-TextComment 0x55f08f40d160 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x55f08f40d1e0 <line:505:3, col:62>
|   | `-TextComment 0x55f08f40d1b0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f40d230 <line:507:3>
|   | `-TextComment 0x55f08f40d200 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40d250 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40d2e0 <col:15, col:51>
|   |   `-TextComment 0x55f08f40d2b0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x55f08f40d330 <line:509:3>
|   | `-TextComment 0x55f08f40d300 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40d350 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x55f08f40d3b0 <col:11, col:60>
|       `-TextComment 0x55f08f40d380 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x55f08f2d5cc0 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x55f08f2d5ed0 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x55f08f2d61a8 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x55f08f2d6140 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x55f08f2d60e0 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x55f08f2d60a0 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x55f08f1ea720 'bool'
| |     |-PointerType 0x55f08f2d5df0 'struct rbnode *'
| |     | `-ElaboratedType 0x55f08f2d5d90 'struct rbnode' sugar
| |     |   `-RecordType 0x55f08f2d5d50 'struct rbnode'
| |     |     `-Record 0x55f08f2d5cc0 'rbnode'
| |     `-PointerType 0x55f08f2d5df0 'struct rbnode *'
| |       `-ElaboratedType 0x55f08f2d5d90 'struct rbnode' sugar
| |         `-RecordType 0x55f08f2d5d50 'struct rbnode'
| |           `-Record 0x55f08f2d5cc0 'rbnode'
| `-FullComment 0x55f08f40d780 <line:62:3, line:72:36>
|   |-ParagraphComment 0x55f08f40d4b0 <line:62:3>
|   | `-TextComment 0x55f08f40d480 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f40d4d0 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x55f08f40d540 <line:63:3>
|   | `-TextComment 0x55f08f40d510 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40d560 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55f08f40d5c0 <col:10, col:45>
|   |   `-TextComment 0x55f08f40d590 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x55f08f40d640 <line:65:3, line:66:68>
|   | |-TextComment 0x55f08f40d5f0 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x55f08f40d610 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x55f08f40d730 <line:68:3, line:72:36>
|     |-TextComment 0x55f08f40d660 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x55f08f40d680 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x55f08f40d6a0 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x55f08f40d6c0 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x55f08f40d6e0 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x55f08f2d6200 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x55f08f2d62d8 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x55f08f2d6350 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x55f08f2d63b0 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x55f08f2d8868 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x55f08f2d8800 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x55f08f2d87a0 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x55f08f2d6540 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x55f08f1ea700 'void'
|       |-PointerType 0x55f08f2d5df0 'struct rbnode *'
|       | `-ElaboratedType 0x55f08f2d5d90 'struct rbnode' sugar
|       |   `-RecordType 0x55f08f2d5d50 'struct rbnode'
|       |     `-Record 0x55f08f2d5cc0 'rbnode'
|       `-PointerType 0x55f08f1eaba0 'void *'
|         `-BuiltinType 0x55f08f1ea700 'void'
|-FunctionDecl 0x55f08f2d8a88 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x55f08f2d88e8 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x55f08f2d8960 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x55f08f2d8c68 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x55f08f2d8b60 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x55f08f2d8f80 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x55f08f2d8d38 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x55f08f2d8dd0 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x55f08f2d8e48 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x55f08f2d9298 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x55f08f2d90f0 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x55f08f2d9168 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x55f08f2d9540 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x55f08f2d93a0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x55f08f2d9428 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x55f08f40d8d0 <line:96:3, col:31>
|   |-ParagraphComment 0x55f08f40d820 <col:3>
|   | `-TextComment 0x55f08f40d7f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40d840 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x55f08f40d8a0 <col:10, col:31>
|       `-TextComment 0x55f08f40d870 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x55f08f2d97b0 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x55f08f2d9640 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x55f08f2d96c8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x55f08f40da20 <line:101:3, col:31>
|   |-ParagraphComment 0x55f08f40d970 <col:3>
|   | `-TextComment 0x55f08f40d940 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40d990 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x55f08f40d9f0 <col:10, col:31>
|       `-TextComment 0x55f08f40d9c0 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x55f08f2d99c8 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x55f08f2d98b0 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x55f08f2d9be8 <line:109:1, line:111:1>
| | `-ReturnStmt 0x55f08f2d9ba0 <line:110:2, col:32>
| |   `-CallExpr 0x55f08f2d9b50 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x55f08f2d9b38 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f2d9a70 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x55f08f2d9298 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x55f08f2d9b88 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f2d9a98 <col:25> 'struct rbtree *' lvalue ParmVar 0x55f08f2d98b0 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x55f08f2d9ac0 <col:31> 'int' 0
| `-FullComment 0x55f08f40db70 <line:106:3, col:54>
|   |-ParagraphComment 0x55f08f40dac0 <col:3>
|   | `-TextComment 0x55f08f40da90 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40dae0 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x55f08f40db40 <col:10, col:54>
|       `-TextComment 0x55f08f40db10 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x55f08f2d9cc8 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x55f08f2d9c28 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x55f08f2d9e88 <line:117:1, line:119:1>
| | `-ReturnStmt 0x55f08f2d9e48 <line:118:2, col:32>
| |   `-CallExpr 0x55f08f2d9df8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x55f08f2d9de0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f2d9d70 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x55f08f2d9298 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x55f08f2d9e30 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f2d9d98 <col:25> 'struct rbtree *' lvalue ParmVar 0x55f08f2d9c28 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x55f08f2d9dc0 <col:31> 'int' 1
| `-FullComment 0x55f08f40dcc0 <line:114:3, col:55>
|   |-ParagraphComment 0x55f08f40dc10 <col:3>
|   | `-TextComment 0x55f08f40dbe0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40dc30 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x55f08f40dc90 <col:10, col:55>
|       `-TextComment 0x55f08f40dc60 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x55f08f2da060 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x55f08f2d9ec8 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x55f08f2d9f50 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x55f08f40df10 <line:122:3, line:128:10>
|   |-ParagraphComment 0x55f08f40dd60 <line:122:3>
|   | `-TextComment 0x55f08f40dd30 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40dd80 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x55f08f40dde0 <col:10, col:60>
|   |   `-TextComment 0x55f08f40ddb0 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x55f08f40ded0 <line:124:3, line:128:10>
|     |-TextComment 0x55f08f40de00 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x55f08f40de20 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x55f08f40de40 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x55f08f40de60 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x55f08f40de80 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x55f08f2da380 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x55f08f2da160 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x55f08f2da1d0 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x55f08f2da248 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x55f08f2da628 <line:143:1, line:145:1>
| | `-CallExpr 0x55f08f2da5a0 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x55f08f2da588 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55f08f2da438 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x55f08f2d8f80 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x55f08f2da5e0 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x55f08f2da4a0 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x55f08f2d62d8
| |   |   `-ImplicitCastExpr 0x55f08f2da488 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55f08f2da460 <col:12> 'struct rbtree *' lvalue ParmVar 0x55f08f2da160 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x55f08f2da5f8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x55f08f2da4d8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x55f08f2da1d0 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x55f08f2da610 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f2da500 <col:34> 'void *' lvalue ParmVar 0x55f08f2da248 'cookie' 'void *'
| `-FullComment 0x55f08f40e130 <line:134:3, line:139:18>
|   |-ParagraphComment 0x55f08f40dfb0 <line:134:3>
|   | `-TextComment 0x55f08f40df80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40dfd0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55f08f40e030 <col:10, col:33>
|   |   `-TextComment 0x55f08f40e000 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x55f08f40e0f0 <line:136:3, line:139:18>
|     |-TextComment 0x55f08f40e050 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x55f08f40e070 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x55f08f40e090 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x55f08f40e0b0 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x55f08f2da640 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x55f08f2da7c0 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x55f08f2da820 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x55f08f2da880 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x55f08f2dab28 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x55f08f2da8f0 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x55f08f2daa00 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x55f08f2dac98 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x55f08f2daef8 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x55f08f2dad50 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x55f08f2db150 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x55f08f2dafb0 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x55f08f2db038 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x55f08f2db328 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x55f08f2db210 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x55f08f2db298 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x55f08f2db3d8 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x55f08f2db4a0 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x55f08f2db500 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x55f08f2dd8c0 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x55f08f2db650 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x55f08f2db6d8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x55f08f2ddab0 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x55f08f2dd998 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x55f08f2dda20 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x55f08f2ddca8 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x55f08f2ddb88 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x55f08f2ddd50 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x55f08f2ddf58 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x55f08f2ddfb8 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x55f08f2de250 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x55f08f2de0b0 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x55f08f2de138 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x55f08f2de440 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x55f08f2de328 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x55f08f2de3b0 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x55f08f2de638 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x55f08f2de518 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x55f08f2de708 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x55f08f2f0ae0 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x55f08f2f0b48 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x55f08f2de7b0 'struct _snode' sugar
|   `-RecordType 0x55f08f2de790 'struct _snode'
|     `-Record 0x55f08f2de708 '_snode'
|-RecordDecl 0x55f08f2f0ba0 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x55f08f2f0ca8 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x55f08f2f0d00 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x55f08f2f0da0 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x55f08f2f0d50 'struct _slist' sugar
|   `-RecordType 0x55f08f2f0c30 'struct _slist'
|     `-Record 0x55f08f2f0ba0 '_slist'
|-FunctionDecl 0x55f08f2f10b0 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2f0fa8 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x55f08f2f13c8 <line:191:1, line:194:1>
| | |-BinaryOperator 0x55f08f2f1268 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x55f08f2f1198 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x55f08f2f0ca8
| | | | `-ImplicitCastExpr 0x55f08f2f1180 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55f08f2f1158 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f0fa8 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x55f08f2f1250 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x55f08f2f1230 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55f08f2f1208 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55f08f2f11d0 <col:23> 'int' 0
| | `-BinaryOperator 0x55f08f2f13a0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x55f08f2f12d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x55f08f2f0d00
| |   | `-ImplicitCastExpr 0x55f08f2f12b8 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55f08f2f1290 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f0fa8 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x55f08f2f1388 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x55f08f2f1368 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x55f08f2f1340 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x55f08f2f1308 <col:23> 'int' 0
| `-FullComment 0x55f08f40e390 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x55f08f40e1d0 <line:186:3>
|   | `-TextComment 0x55f08f40e1a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40e1f0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55f08f40e250 <col:10, col:27>
|   |   `-TextComment 0x55f08f40e220 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x55f08f40e2a0 <line:188:3>
|   | `-TextComment 0x55f08f40e270 <col:3> Text=" "
|   `-ParamCommandComment 0x55f08f40e2c0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x55f08f40e350 <col:15, col:50>
|       `-TextComment 0x55f08f40e320 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x55f08f2f1500 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f13f8 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2f1650 <line:199:1, line:201:1>
|   `-ReturnStmt 0x55f08f2f1638 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x55f08f2f1620 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x55f08f2f15e8 <col:9, col:15> 'struct _snode *' lvalue ->next 0x55f08f2f0ae0
|         `-ImplicitCastExpr 0x55f08f2f15d0 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55f08f2f15a8 <col:9> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f13f8 'node' 'sys_snode_t *'
|-FunctionDecl 0x55f08f2f1800 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f1678 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x55f08f2f16e8 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2f1990 <line:204:1, line:206:1>
|   `-BinaryOperator 0x55f08f2f1968 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x55f08f2f18f0 <col:2, col:10> 'struct _snode *' lvalue ->next 0x55f08f2f0ae0
|     | `-ImplicitCastExpr 0x55f08f2f18d8 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f08f2f18b0 <col:2> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f1678 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x55f08f2f1950 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f2f1928 <col:17> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f16e8 'child' 'sys_snode_t *'
|-FunctionDecl 0x55f08f2f4460 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f19b8 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2f1a28 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2f45f0 <line:209:1, line:211:1>
|   `-BinaryOperator 0x55f08f2f45c8 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x55f08f2f4550 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x55f08f2f0ca8
|     | `-ImplicitCastExpr 0x55f08f2f4538 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f08f2f4510 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f19b8 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x55f08f2f45b0 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f2f4588 <col:15> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f1a28 'node' 'sys_snode_t *'
|-FunctionDecl 0x55f08f2f4718 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f4618 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2f4688 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2f48d8 <line:214:1, line:216:1>
|   `-BinaryOperator 0x55f08f2f4880 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x55f08f2f4808 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x55f08f2f0d00
|     | `-ImplicitCastExpr 0x55f08f2f47f0 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f08f2f47c8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f4618 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x55f08f2f4868 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f2f4840 <col:15> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f4688 'node' 'sys_snode_t *'
|-FunctionDecl 0x55f08f2f4a00 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2f4900 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x55f08f2f4b78 <line:226:1, line:228:1>
| | `-ReturnStmt 0x55f08f2f4b38 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x55f08f2f4b20 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55f08f2f4ae8 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x55f08f2f0ca8
| |       `-ImplicitCastExpr 0x55f08f2f4ad0 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f2f4aa8 <col:9> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f4900 'list' 'sys_slist_t *'
| `-FullComment 0x55f08f40e6d0 <line:219:3, line:223:68>
|   |-ParagraphComment 0x55f08f40e430 <line:219:3>
|   | `-TextComment 0x55f08f40e400 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40e450 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f40e4b0 <col:10, col:43>
|   |   `-TextComment 0x55f08f40e480 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x55f08f40e500 <line:221:3>
|   | `-TextComment 0x55f08f40e4d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40e520 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40e5b0 <col:15, col:62>
|   |   `-TextComment 0x55f08f40e580 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x55f08f40e600 <line:223:3>
|   | `-TextComment 0x55f08f40e5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40e620 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x55f08f40e680 <col:11, col:68>
|       `-TextComment 0x55f08f40e650 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x55f08f2f4c28 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2f4ba0 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x55f08f2f4da8 <line:238:1, line:240:1>
| | `-ReturnStmt 0x55f08f2f4d60 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x55f08f2f4d48 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55f08f2f4d10 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x55f08f2f0d00
| |       `-ImplicitCastExpr 0x55f08f2f4cf8 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f2f4cd0 <col:9> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f4ba0 'list' 'sys_slist_t *'
| `-FullComment 0x55f08f40ea10 <line:231:3, line:235:67>
|   |-ParagraphComment 0x55f08f40e770 <line:231:3>
|   | `-TextComment 0x55f08f40e740 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40e790 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f40e7f0 <col:10, col:42>
|   |   `-TextComment 0x55f08f40e7c0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x55f08f40e840 <line:233:3>
|   | `-TextComment 0x55f08f40e810 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40e860 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40e8f0 <col:15, col:61>
|   |   `-TextComment 0x55f08f40e8c0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x55f08f40e940 <line:235:3>
|   | `-TextComment 0x55f08f40e910 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40e960 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x55f08f40e9c0 <col:11, col:67>
|       `-TextComment 0x55f08f40e990 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x55f08f2f4ed0 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2f4dd0 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x55f08f40ed50 <line:247:3, line:251:57>
|   |-ParagraphComment 0x55f08f40eab0 <line:247:3>
|   | `-TextComment 0x55f08f40ea80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40ead0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f40eb30 <col:10, col:41>
|   |   `-TextComment 0x55f08f40eb00 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x55f08f40eb80 <line:249:3>
|   | `-TextComment 0x55f08f40eb50 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40eba0 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40ec30 <col:15, col:44>
|   |   `-TextComment 0x55f08f40ec00 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x55f08f40ec80 <line:251:3>
|   | `-TextComment 0x55f08f40ec50 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40eca0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x55f08f40ed00 <col:11, col:57>
|       `-TextComment 0x55f08f40ecd0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x55f08f2f5010 prev 0x55f08f2f4ed0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2f4f88 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x55f08f2f5308 <line:60:2, line:62:2>
|   `-ReturnStmt 0x55f08f2f52c0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x55f08f2f52a8 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x55f08f2f5288 <col:10, col:54> 'int'
|         `-BinaryOperator 0x55f08f2f5260 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x55f08f2f5180 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x55f08f2f5168 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x55f08f2f50b8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4a00 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x55f08f2f51b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x55f08f2f50e0 <col:41> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f4f88 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x55f08f2f5248 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x55f08f2f5228 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x55f08f2f5200 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x55f08f2f51c8 <col:23> 'int' 0
|-FunctionDecl 0x55f08f2f7420 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f5330 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x55f08f40f0f0 <line:258:3, line:264:55>
|   |-ParagraphComment 0x55f08f40edf0 <line:258:3>
|   | `-TextComment 0x55f08f40edc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40ee10 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55f08f40ee70 <col:10, col:64>
|   |   `-TextComment 0x55f08f40ee40 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x55f08f40eec0 <line:260:3, col:69>
|   | `-TextComment 0x55f08f40ee90 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x55f08f40ef10 <line:262:3>
|   | `-TextComment 0x55f08f40eee0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40ef30 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40efc0 <col:15, col:64>
|   |   `-TextComment 0x55f08f40ef90 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55f08f40f010 <line:264:3>
|   | `-TextComment 0x55f08f40efe0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40f030 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55f08f40f090 <col:11, col:55>
|       `-TextComment 0x55f08f40f060 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55f08f2f7560 prev 0x55f08f2f7420 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f74d8 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2f7758 <line:67:2, line:69:2>
|   `-ReturnStmt 0x55f08f2f7718 <line:68:3, col:42>
|     `-CallExpr 0x55f08f2f76d0 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x55f08f2f76b8 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f2f7608 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55f08f2f1500 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x55f08f2f7700 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f2f7630 <col:38> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f74d8 'node' 'sys_snode_t *'
|-FunctionDecl 0x55f08f2f7808 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f7780 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x55f08f40f430 <line:271:3, line:275:55>
|   |-ParagraphComment 0x55f08f40f190 <line:271:3>
|   | `-TextComment 0x55f08f40f160 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40f1b0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55f08f40f210 <col:10, col:46>
|   |   `-TextComment 0x55f08f40f1e0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x55f08f40f260 <line:273:3>
|   | `-TextComment 0x55f08f40f230 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f40f280 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f40f310 <col:15, col:64>
|   |   `-TextComment 0x55f08f40f2e0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55f08f40f360 <line:275:3>
|   | `-TextComment 0x55f08f40f330 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f40f380 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55f08f40f3e0 <col:11, col:55>
|       `-TextComment 0x55f08f40f3b0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55f08f2f7948 prev 0x55f08f2f7808 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f78c0 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2f7ca8 <line:74:2, line:78:2>
|   `-ReturnStmt 0x55f08f2f7c68 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x55f08f2f7c38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x55f08f2f7ac8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x55f08f2f7a98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x55f08f2f79f0 <col:10> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f78c0 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x55f08f2f7ab0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x55f08f2f7a78 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55f08f2f7a50 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55f08f2f7a18 <col:23> 'int' 0
|       |-CallExpr 0x55f08f2f7b58 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x55f08f2f7b40 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55f08f2f7af0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55f08f2f7560 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x55f08f2f7b88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55f08f2f7b18 <col:43> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f78c0 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x55f08f2f7c20 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x55f08f2f7c00 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x55f08f2f7bd8 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55f08f2f7ba0 <col:23> 'int' 0
|-FunctionDecl 0x55f08f2f7dd0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f7cd0 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2f7d40 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x55f08f4107e0 <line:282:3, line:287:47>
|   |-ParagraphComment 0x55f08f40f4d0 <line:282:3>
|   | `-TextComment 0x55f08f40f4a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f40f4f0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f40f550 <col:10, col:42>
|   |   `-TextComment 0x55f08f40f520 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x55f08f40f5a0 <line:284:3, col:62>
|   | `-TextComment 0x55f08f40f570 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f410610 <line:286:3>
|   | `-TextComment 0x55f08f40f5c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f410630 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4106e0 <line:286:15, line:287:3>
|   |   |-TextComment 0x55f08f410690 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f4106b0 <line:287:3> Text=" "
|   `-ParamCommandComment 0x55f08f410700 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55f08f410790 <col:15, col:47>
|       `-TextComment 0x55f08f410760 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x55f08f2f7f90 prev 0x55f08f2f7dd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f7e90 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2f7f00 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2f9388 <line:84:2, line:93:2>
|   |-CallExpr 0x55f08f2f81b0 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x55f08f2f8198 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f2f8040 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55f08f2f1800 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55f08f2f81e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f2f8068 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f7f00 'node' 'sys_snode_t *'
|   | `-CallExpr 0x55f08f2f80f8 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55f08f2f80e0 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55f08f2f8090 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4a00 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x55f08f2f8128 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f2f80b8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f7e90 'list' 'sys_slist_t *'
|   |-CallExpr 0x55f08f2f82f0 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x55f08f2f82d8 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f2f8200 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4460 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55f08f2f8328 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f2f8228 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f7e90 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x55f08f2f8340 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55f08f2f8250 <col:36> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f7f00 'node' 'sys_snode_t *'
|   `-IfStmt 0x55f08f2f9320 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55f08f2f9178 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55f08f2f83c0 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x55f08f2f83a8 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55f08f2f8358 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4c28 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x55f08f2f83f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55f08f2f8380 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f7e90 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x55f08f2f9160 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55f08f2f9140 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55f08f2f9118 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55f08f2f90e0 <col:23> 'int' 0
|     |-CompoundStmt 0x55f08f2f9308 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x55f08f2f92b8 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x55f08f2f92a0 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55f08f2f91a0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4718 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55f08f2f92f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55f08f2f91c8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f7e90 'list' 'sys_slist_t *'
|     |   `-CallExpr 0x55f08f2f9258 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|     |     |-ImplicitCastExpr 0x55f08f2f9240 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55f08f2f91f0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4a00 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|     |     `-ImplicitCastExpr 0x55f08f2f9288 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x55f08f2f9218 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f7e90 'list' 'sys_slist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x55f08f2f94c0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f93c0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2f9430 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x55f08f410b70 <line:295:3, line:300:46>
|   |-ParagraphComment 0x55f08f410880 <line:295:3>
|   | `-TextComment 0x55f08f410850 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4108a0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f410900 <col:10, col:41>
|   |   `-TextComment 0x55f08f4108d0 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x55f08f410950 <line:297:3, col:62>
|   | `-TextComment 0x55f08f410920 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f4109a0 <line:299:3>
|   | `-TextComment 0x55f08f410970 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4109c0 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f410a70 <line:299:15, line:300:3>
|   |   |-TextComment 0x55f08f410a20 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f410a40 <line:300:3> Text=" "
|   `-ParamCommandComment 0x55f08f410a90 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55f08f410b20 <col:15, col:46>
|       `-TextComment 0x55f08f410af0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x55f08f2f9680 prev 0x55f08f2f94c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2f9580 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2f95f0 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2f9ee8 <line:99:2, line:111:2>
|   |-CallExpr 0x55f08f2f9818 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x55f08f2f9800 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f2f9730 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55f08f2f1800 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55f08f2f9850 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f2f9758 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f95f0 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x55f08f2f9868 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x55f08f2f97e0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x55f08f2f97b8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x55f08f2f9780 <col:23> 'int' 0
|   `-IfStmt 0x55f08f2f9e80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55f08f2f99c8 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55f08f2f98e8 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x55f08f2f98d0 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55f08f2f9880 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4c28 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x55f08f2f9918 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55f08f2f98a8 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f9580 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x55f08f2f99b0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55f08f2f9990 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55f08f2f9968 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55f08f2f9930 <col:23> 'int' 0
|     |-CompoundStmt 0x55f08f2f9be0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x55f08f2f9a80 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x55f08f2f9a68 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55f08f2f99f0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4718 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x55f08f2f9ab8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55f08f2f9a18 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f9580 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x55f08f2f9ad0 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55f08f2f9a40 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f95f0 'node' 'sys_snode_t *'
|     | `-CallExpr 0x55f08f2f9b78 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x55f08f2f9b60 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55f08f2f9ae8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4460 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55f08f2f9bb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55f08f2f9b10 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f9580 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x55f08f2f9bc8 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55f08f2f9b38 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f95f0 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x55f08f2f9e60 <line:105:10, line:110:3>
|       |-CallExpr 0x55f08f2f9d18 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x55f08f2f9d00 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55f08f2f9c00 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55f08f2f1800 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x55f08f2f9c90 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x55f08f2f9c78 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55f08f2f9c28 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4c28 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x55f08f2f9cc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55f08f2f9c50 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f9580 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x55f08f2f9d50 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55f08f2f9cd8 <col:5> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f95f0 'node' 'sys_snode_t *'
|       `-CallExpr 0x55f08f2f9df8 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x55f08f2f9de0 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55f08f2f9d68 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4718 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x55f08f2f9e30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x55f08f2f9d90 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55f08f2f9580 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x55f08f2f9e48 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55f08f2f9db8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55f08f2f95f0 'node' 'sys_snode_t *'
|-FunctionDecl 0x55f08f2fa170 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55f08f2f9f18 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2f9f90 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x55f08f2fa008 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x55f08f4110d0 <line:308:3, line:318:66>
|   |-ParagraphComment 0x55f08f410c10 <line:308:3>
|   | `-TextComment 0x55f08f410be0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f410c30 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f410c90 <col:10, col:41>
|   |   `-TextComment 0x55f08f410c60 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x55f08f410d80 <line:310:3, line:312:62>
|   | |-TextComment 0x55f08f410cb0 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x55f08f410cd0 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x55f08f410d20 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x55f08f410d40 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f410dd0 <line:314:3, col:48>
|   | `-TextComment 0x55f08f410da0 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x55f08f410e20 <line:316:3>
|   | `-TextComment 0x55f08f410df0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f410e40 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f410ef0 <line:316:15, line:317:3>
|   |   |-TextComment 0x55f08f410ea0 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f410ec0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x55f08f410f10 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55f08f410fc0 <line:317:15, line:318:3>
|   |   |-TextComment 0x55f08f410f70 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x55f08f410f90 <line:318:3> Text=" "
|   `-ParamCommandComment 0x55f08f410fe0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x55f08f411070 <col:15, col:66>
|       `-TextComment 0x55f08f411040 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x55f08f2fa3c0 prev 0x55f08f2fa170 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55f08f2fa238 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2fa2b0 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x55f08f2fa328 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x55f08f2faa78 <col:31, line:127:42>
|   |-IfStmt 0x55f08f2fa8e8 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55f08f2fa5c0 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x55f08f2fa4e0 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x55f08f2fa4c8 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55f08f2fa478 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4c28 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x55f08f2fa510 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55f08f2fa4a0 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fa238 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x55f08f2fa5a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55f08f2fa588 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55f08f2fa560 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55f08f2fa528 <col:23> 'int' 0
|   | |-CompoundStmt 0x55f08f2fa718 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x55f08f2fa6c8 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x55f08f2fa6b0 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55f08f2fa5e8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4460 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x55f08f2fa700 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55f08f2fa610 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fa238 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x55f08f2fa688 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x55f08f2fa670 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55f08f2fa638 <col:31> 'void *' lvalue ParmVar 0x55f08f2fa2b0 'head' 'void *'
|   | `-CompoundStmt 0x55f08f2fa8d0 <line:121:9, line:125:2>
|   |   `-CallExpr 0x55f08f2fa898 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x55f08f2fa880 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f08f2fa730 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55f08f2f1800 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x55f08f2fa7c0 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x55f08f2fa7a8 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x55f08f2fa758 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4c28 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x55f08f2fa7f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55f08f2fa780 <col:34> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fa238 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x55f08f2fa858 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x55f08f2fa840 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x55f08f2fa808 <col:29> 'void *' lvalue ParmVar 0x55f08f2fa2b0 'head' 'void *'
|   `-CallExpr 0x55f08f2faa00 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x55f08f2fa9e8 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f2fa920 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4718 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x55f08f2faa38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f2fa948 <col:29> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fa238 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x55f08f2fa9c0 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x55f08f2fa9a8 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f2fa970 <col:35> 'void *' lvalue ParmVar 0x55f08f2fa328 'tail' 'void *'
|-FunctionDecl 0x55f08f2fac30 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2faaa8 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2fab18 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x55f08f411480 <line:326:3, line:332:57>
|   |-ParagraphComment 0x55f08f411170 <line:326:3>
|   | `-TextComment 0x55f08f411140 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f411190 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55f08f4111f0 <col:10, col:65>
|   |   `-TextComment 0x55f08f4111c0 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x55f08f411260 <line:328:3, line:329:62>
|   | |-TextComment 0x55f08f411210 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x55f08f411230 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f4112b0 <line:331:3>
|   | `-TextComment 0x55f08f411280 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4112d0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f411380 <line:331:15, line:332:3>
|   |   |-TextComment 0x55f08f411330 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f411350 <line:332:3> Text=" "
|   `-ParamCommandComment 0x55f08f4113a0 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x55f08f411430 <col:25, col:57>
|       `-TextComment 0x55f08f411400 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x55f08f2fadf0 prev 0x55f08f2fac30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2facf0 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2fad60 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x55f08f282dc8 <line:135:2, line:141:2>
|   |-DeclStmt 0x55f08f2faf98 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x55f08f2faeb0 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x55f08f2faf20 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x55f08f2fb088 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x55f08f2fafb0 <col:3> 'sys_snode_t *' lvalue Var 0x55f08f2faeb0 'head' 'sys_snode_t *'
|   | `-CallExpr 0x55f08f2fb040 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55f08f2fb028 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55f08f2fafd8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4a00 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x55f08f2fb070 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f2fb000 <col:40> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fad60 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x55f08f282a90 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x55f08f2fb0b0 <col:3> 'sys_snode_t *' lvalue Var 0x55f08f2faf20 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x55f08f282a48 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55f08f282a30 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55f08f2829e0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4c28 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x55f08f282a78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f282a08 <col:40> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fad60 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x55f08f282bd0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x55f08f282bb8 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f282ab8 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x55f08f2fa3c0 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x55f08f282c10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f282ae0 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55f08f2facf0 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x55f08f282c40 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x55f08f282c28 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f08f282b08 <col:41> 'sys_snode_t *' lvalue Var 0x55f08f2faeb0 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x55f08f282c70 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x55f08f282c58 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f282b30 <col:47> 'sys_snode_t *' lvalue Var 0x55f08f2faf20 'tail' 'sys_snode_t *'
|   `-CallExpr 0x55f08f282d50 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x55f08f282d38 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f282c88 <col:1> 'void (sys_slist_t *)' Function 0x55f08f2f10b0 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x55f08f282d80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f282cb0 <col:28> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fad60 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x55f08f283020 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f282e10 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f282e80 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x55f08f282ef0 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x55f08f4118f0 <line:340:3, line:346:46>
|   |-ParagraphComment 0x55f08f411520 <line:340:3>
|   | `-TextComment 0x55f08f4114f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f411540 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f4115a0 <col:10, col:41>
|   |   `-TextComment 0x55f08f411570 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x55f08f4115f0 <line:342:3, col:62>
|   | `-TextComment 0x55f08f4115c0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f411640 <line:344:3>
|   | `-TextComment 0x55f08f411610 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f411660 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f411710 <line:344:15, line:345:3>
|   |   |-TextComment 0x55f08f4116c0 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f4116e0 <line:345:3> Text=" "
|   |-ParamCommandComment 0x55f08f411730 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4117e0 <line:345:15, line:346:3>
|   |   |-TextComment 0x55f08f411790 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x55f08f4117b0 <line:346:3> Text=" "
|   `-ParamCommandComment 0x55f08f411800 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55f08f411890 <col:15, col:46>
|       `-TextComment 0x55f08f411860 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x55f08f283260 prev 0x55f08f283020 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2830e8 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f283158 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x55f08f2831c8 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2fe1d8 <line:148:2, line:158:2>
|   `-IfStmt 0x55f08f2fe178 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55f08f2833f0 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x55f08f2833c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x55f08f283318 <col:7> 'sys_snode_t *' lvalue ParmVar 0x55f08f283158 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x55f08f2833d8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x55f08f2833a0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55f08f283378 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55f08f283340 <col:23> 'int' 0
|     |-CompoundStmt 0x55f08f283510 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x55f08f2834a8 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x55f08f283490 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55f08f283418 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f7f90 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x55f08f2834e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55f08f283440 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55f08f2830e8 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x55f08f2834f8 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55f08f283468 <col:38> 'sys_snode_t *' lvalue ParmVar 0x55f08f2831c8 'node' 'sys_snode_t *'
|     `-IfStmt 0x55f08f2fe140 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55f08f283670 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x55f08f283590 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x55f08f283578 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55f08f283528 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55f08f2f1500 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x55f08f2835c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55f08f283550 <col:42> 'sys_snode_t *' lvalue ParmVar 0x55f08f283158 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x55f08f283658 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x55f08f283638 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55f08f283610 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55f08f2835d8 <col:23> 'int' 0
|       |-CompoundStmt 0x55f08f283790 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x55f08f283728 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x55f08f283710 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55f08f283698 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f9680 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x55f08f283760 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55f08f2836c0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55f08f2830e8 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x55f08f283778 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55f08f2836e8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55f08f2831c8 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x55f08f2fe120 <line:153:10, line:157:3>
|         |-CallExpr 0x55f08f2838c0 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x55f08f2838a8 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55f08f2837a8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55f08f2f1800 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x55f08f2838f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x55f08f2837d0 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55f08f2831c8 'node' 'sys_snode_t *'
|         | `-CallExpr 0x55f08f283860 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x55f08f283848 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x55f08f2837f8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55f08f2f1500 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x55f08f283890 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x55f08f283820 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55f08f283158 'prev' 'sys_snode_t *'
|         `-CallExpr 0x55f08f2839a0 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x55f08f283988 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55f08f283910 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55f08f2f1800 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x55f08f2fe0f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x55f08f283938 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55f08f283158 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x55f08f2fe108 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x55f08f283960 <col:37> 'sys_snode_t *' lvalue ParmVar 0x55f08f2831c8 'node' 'sys_snode_t *'
|-FunctionDecl 0x55f08f2fe288 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2fe200 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x55f08f411cb0 <line:355:3, line:362:50>
|   |-ParagraphComment 0x55f08f411990 <line:355:3>
|   | `-TextComment 0x55f08f411960 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4119b0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55f08f411a10 <col:10, col:59>
|   |   `-TextComment 0x55f08f4119e0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55f08f411a80 <line:357:3, line:358:62>
|   | |-TextComment 0x55f08f411a30 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x55f08f411a50 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f411ad0 <line:360:3>
|   | `-TextComment 0x55f08f411aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f411af0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f411b80 <col:15, col:46>
|   |   `-TextComment 0x55f08f411b50 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55f08f411bd0 <line:362:3>
|   | `-TextComment 0x55f08f411ba0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f411bf0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55f08f411c50 <col:11, col:50>
|       `-TextComment 0x55f08f411c20 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x55f08f2fe3c8 prev 0x55f08f2fe288 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2fe340 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x55f08f2fea68 <line:163:2, line:175:2>
|   |-DeclStmt 0x55f08f2fe590 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x55f08f2fe480 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x55f08f2fe548 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x55f08f2fe530 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f08f2fe4e0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4a00 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x55f08f2fe578 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55f08f2fe508 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fe340 'list' 'sys_slist_t *'
|   |-CallExpr 0x55f08f2fe6c0 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x55f08f2fe6a8 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f2fe5a8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4460 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x55f08f2fe6f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f2fe5d0 <col:30> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fe340 'list' 'sys_slist_t *'
|   | `-CallExpr 0x55f08f2fe660 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x55f08f2fe648 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55f08f2fe5f8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55f08f2f1500 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x55f08f2fe690 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f2fe620 <col:33> 'sys_snode_t *' lvalue Var 0x55f08f2fe480 'node' 'sys_snode_t *'
|   |-IfStmt 0x55f08f2fe9a8 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55f08f2fe800 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x55f08f2fe778 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x55f08f2fe760 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55f08f2fe710 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4c28 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x55f08f2fe7a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55f08f2fe738 <col:37> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fe340 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x55f08f2fe7e8 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f08f2fe7c0 <col:46> 'sys_snode_t *' lvalue Var 0x55f08f2fe480 'node' 'sys_snode_t *'
|   | |-CompoundStmt 0x55f08f2fe990 <col:52, line:172:3>
|   | | `-CallExpr 0x55f08f2fe940 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x55f08f2fe928 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55f08f2fe828 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4718 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x55f08f2fe978 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55f08f2fe850 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fe340 'list' 'sys_slist_t *'
|   | |   `-CallExpr 0x55f08f2fe8e0 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   | |     |-ImplicitCastExpr 0x55f08f2fe8c8 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x55f08f2fe878 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4a00 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |     `-ImplicitCastExpr 0x55f08f2fe910 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55f08f2fe8a0 <col:35> 'sys_slist_t *' lvalue ParmVar 0x55f08f2fe340 'list' 'sys_slist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55f08f2fea20 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x55f08f2fea08 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f2fe9e0 <col:10> 'sys_snode_t *' lvalue Var 0x55f08f2fe480 'node' 'sys_snode_t *'
|-FunctionDecl 0x55f08f2feb30 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2feaa8 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x55f08f412050 <line:369:3, line:375:69>
|   |-ParagraphComment 0x55f08f411d50 <line:369:3>
|   | `-TextComment 0x55f08f411d20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f411d70 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55f08f411dd0 <col:10, col:59>
|   |   `-TextComment 0x55f08f411da0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55f08f411e20 <line:371:3, col:62>
|   | `-TextComment 0x55f08f411df0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f411e70 <line:373:3>
|   | `-TextComment 0x55f08f411e40 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f411e90 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f411f20 <col:15, col:46>
|   |   `-TextComment 0x55f08f411ef0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55f08f411f70 <line:375:3>
|   | `-TextComment 0x55f08f411f40 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f411f90 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55f08f411ff0 <col:11, col:69>
|       `-TextComment 0x55f08f411fc0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x55f08f2fec70 prev 0x55f08f2feb30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x55f08f2febe8 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x55f08f2feff8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x55f08f2fefb8 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x55f08f2fef88 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x55f08f2fef58 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x55f08f2fede0 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x55f08f2fedc8 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55f08f2fed18 <col:1> 'bool (sys_slist_t *)' Function 0x55f08f2f5010 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x55f08f2fee10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55f08f2fed40 <col:39> 'sys_slist_t *' lvalue ParmVar 0x55f08f2febe8 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x55f08f2fef70 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x55f08f2fee88 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x55f08f2fee60 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x55f08f2fee28 <col:23> 'int' 0
|       `-CallExpr 0x55f08f2fef10 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x55f08f2feef8 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55f08f2feea8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2fe3c8 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x55f08f2fef40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55f08f2feed0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55f08f2febe8 'list' 'sys_slist_t *'
|-FunctionDecl 0x55f08f2ff1a8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2ff020 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2ff090 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x55f08f2ff110 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x55f08f4124f0 <line:382:3, line:389:46>
|   |-ParagraphComment 0x55f08f4120f0 <line:382:3>
|   | `-TextComment 0x55f08f4120c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f412110 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55f08f412170 <col:10, col:23>
|   |   `-TextComment 0x55f08f412140 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x55f08f4121c0 <line:384:3, col:62>
|   | `-TextComment 0x55f08f412190 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f412210 <line:386:3>
|   | `-TextComment 0x55f08f4121e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f412230 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4122e0 <line:386:15, line:387:3>
|   |   |-TextComment 0x55f08f412290 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f4122b0 <line:387:3> Text=" "
|   |-ParamCommandComment 0x55f08f412300 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4123e0 <line:387:20, line:389:3>
|   |   |-TextComment 0x55f08f412360 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x55f08f412380 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x55f08f4123a0 <line:389:3> Text=" "
|   `-ParamCommandComment 0x55f08f412400 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55f08f412490 <col:15, col:46>
|       `-TextComment 0x55f08f412460 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x55f08f2ff3e8 prev 0x55f08f2ff1a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2ff270 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f2ff2e0 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x55f08f2ff350 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f2fff98 <line:190:2, line:212:2>
|   |-IfStmt 0x55f08f2ffde0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55f08f2ff578 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x55f08f2ff548 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55f08f2ff4a0 <col:7> 'sys_snode_t *' lvalue ParmVar 0x55f08f2ff2e0 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x55f08f2ff560 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55f08f2ff528 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55f08f2ff500 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55f08f2ff4c8 <col:23> 'int' 0
|   | |-CompoundStmt 0x55f08f2ff9d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x55f08f2ff6b8 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x55f08f2ff6a0 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55f08f2ff5a0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4460 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x55f08f2ff6f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55f08f2ff5c8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x55f08f2ff270 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x55f08f2ff658 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x55f08f2ff640 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55f08f2ff5f0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55f08f2f1500 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x55f08f2ff688 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55f08f2ff618 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55f08f2ff350 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x55f08f2ff9a0 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55f08f2ff7f8 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x55f08f2ff770 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x55f08f2ff758 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x55f08f2ff708 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4c28 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x55f08f2ff7a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x55f08f2ff730 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55f08f2ff270 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x55f08f2ff7e0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55f08f2ff7b8 <col:47> 'sys_snode_t *' lvalue ParmVar 0x55f08f2ff350 'node' 'sys_snode_t *'
|   | |   |-CompoundStmt 0x55f08f2ff988 <col:53, line:199:4>
|   | |   | `-CallExpr 0x55f08f2ff938 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x55f08f2ff920 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55f08f2ff820 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4718 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |   |-ImplicitCastExpr 0x55f08f2ff970 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x55f08f2ff848 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55f08f2ff270 'list' 'sys_slist_t *'
|   | |   |   `-CallExpr 0x55f08f2ff8d8 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |   |     |-ImplicitCastExpr 0x55f08f2ff8c0 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x55f08f2ff870 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4a00 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   |     `-ImplicitCastExpr 0x55f08f2ff908 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55f08f2ff898 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55f08f2ff270 'list' 'sys_slist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x55f08f2ffdc0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x55f08f2ffb10 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x55f08f2ffaf8 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x55f08f2ff9f8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55f08f2f1800 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x55f08f2ffb48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55f08f2ffa20 <col:31> 'sys_snode_t *' lvalue ParmVar 0x55f08f2ff2e0 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x55f08f2ffab0 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x55f08f2ffa98 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x55f08f2ffa48 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55f08f2f1500 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x55f08f2ffae0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55f08f2ffa70 <col:33> 'sys_snode_t *' lvalue ParmVar 0x55f08f2ff350 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x55f08f2ffd88 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55f08f2ffc50 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x55f08f2ffbc8 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x55f08f2ffbb0 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x55f08f2ffb60 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4c28 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x55f08f2ffbf8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55f08f2ffb88 <col:38> 'sys_slist_t *' lvalue ParmVar 0x55f08f2ff270 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x55f08f2ffc38 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55f08f2ffc10 <col:47> 'sys_snode_t *' lvalue ParmVar 0x55f08f2ff350 'node' 'sys_snode_t *'
|   |     |-CompoundStmt 0x55f08f2ffd70 <col:53, line:208:4>
|   |     | `-CallExpr 0x55f08f2ffd08 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x55f08f2ffcf0 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x55f08f2ffc78 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x55f08f2f4718 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |   |-ImplicitCastExpr 0x55f08f2ffd40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x55f08f2ffca0 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55f08f2ff270 'list' 'sys_slist_t *'
|   |     |   `-ImplicitCastExpr 0x55f08f2ffd58 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55f08f2ffcc8 <col:13> 'sys_snode_t *' lvalue ParmVar 0x55f08f2ff2e0 'prev_node' 'sys_snode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x55f08f2fff00 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x55f08f2ffee8 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f2ffe18 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x55f08f2f1800 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x55f08f2fff38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f2ffe40 <col:30> 'sys_snode_t *' lvalue ParmVar 0x55f08f2ff350 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x55f08f2fff50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x55f08f2ffec8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x55f08f2ffea0 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x55f08f2ffe68 <col:23> 'int' 0
|-FunctionDecl 0x55f08f300180 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f2fffc8 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f300038 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x55f08f412970 <line:398:3, line:405:35>
|   |-ParagraphComment 0x55f08f412590 <line:398:3>
|   | `-TextComment 0x55f08f412560 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4125b0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f412620 <col:10, col:44>
|   |   `-TextComment 0x55f08f4125e0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x55f08f412670 <line:400:3, col:62>
|   | `-TextComment 0x55f08f412640 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f4126c0 <line:402:3>
|   | `-TextComment 0x55f08f412690 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4126e0 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f412790 <line:402:15, line:403:3>
|   |   |-TextComment 0x55f08f412740 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f412760 <line:403:3> Text=" "
|   |-ParamCommandComment 0x55f08f4127b0 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f412840 <col:15, col:60>
|   |   `-TextComment 0x55f08f412810 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x55f08f412890 <line:405:3>
|   | `-TextComment 0x55f08f412860 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4128b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f412910 <col:11, col:35>
|       `-TextComment 0x55f08f4128e0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x55f08f300340 prev 0x55f08f300180 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x55f08f300240 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x55f08f3002b0 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x55f08f300ce8 <line:218:2, line:233:2>
|   |-DeclStmt 0x55f08f3004f8 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x55f08f300400 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x55f08f3004e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x55f08f3004c0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x55f08f300498 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x55f08f300460 <col:23> 'int' 0
|   |-DeclStmt 0x55f08f300580 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x55f08f300520 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x55f08f300c30 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x55f08f300670 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x55f08f300598 <line:222:42> 'sys_snode_t *' lvalue Var 0x55f08f300520 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x55f08f300628 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x55f08f300610 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55f08f3005c0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x55f08f2f4a00 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x55f08f300658 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55f08f3005e8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x55f08f300240 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55f08f300770 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x55f08f300740 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55f08f300698 <col:42> 'sys_snode_t *' lvalue Var 0x55f08f300520 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x55f08f300758 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x55f08f300720 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55f08f3006f8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55f08f3006c0 <col:23> 'int' 0
|   | |-BinaryOperator 0x55f08f300870 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x55f08f300798 <line:222:42> 'sys_snode_t *' lvalue Var 0x55f08f300520 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x55f08f300828 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x55f08f300810 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55f08f3007c0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x55f08f2f7948 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x55f08f300858 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55f08f3007e8 <col:42> 'sys_snode_t *' lvalue Var 0x55f08f300520 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x55f08f300c10 <col:48, line:230:3>
|   |   |-IfStmt 0x55f08f300b48 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x55f08f300918 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x55f08f3008e8 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x55f08f300898 <col:8> 'sys_snode_t *' lvalue Var 0x55f08f300520 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x55f08f300900 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55f08f3008c0 <col:16> 'sys_snode_t *' lvalue ParmVar 0x55f08f3002b0 'node' 'sys_snode_t *'
|   |   | |-CompoundStmt 0x55f08f300b28 <col:22, line:227:4>
|   |   | | |-CallExpr 0x55f08f300a50 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x55f08f300a38 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x55f08f300940 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x55f08f2ff3e8 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   | | | |-ImplicitCastExpr 0x55f08f300a90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55f08f300968 <col:32> 'sys_slist_t *' lvalue ParmVar 0x55f08f300240 'list' 'sys_slist_t *'
|   |   | | | |-ImplicitCastExpr 0x55f08f300aa8 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55f08f300990 <col:38> 'sys_snode_t *' lvalue Var 0x55f08f300400 'prev' 'sys_snode_t *'
|   |   | | | `-ImplicitCastExpr 0x55f08f300ac0 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55f08f3009b8 <col:11> 'sys_snode_t *' lvalue ParmVar 0x55f08f3002b0 'node' 'sys_snode_t *'
|   |   | | `-ReturnStmt 0x55f08f300b10 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x55f08f300af8 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x55f08f300ad8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x55f08f300be8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x55f08f300b80 <col:4> 'sys_snode_t *' lvalue Var 0x55f08f300400 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x55f08f300bd0 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55f08f300ba8 <col:11> 'sys_snode_t *' lvalue Var 0x55f08f300520 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x55f08f300ca0 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x55f08f300c88 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x55f08f300c68 <col:16> 'int' 0
|-TypedefDecl 0x55f08f300d50 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x55f08f300d20 'u64_t' sugar
|   |-Typedef 0x55f08f26eec0 'u64_t'
|   `-BuiltinType 0x55f08f1ea880 'unsigned long long'
|-RecordDecl 0x55f08f300da8 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x55f08f300e80 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x55f08f300f20 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x55f08f300ed0 'struct _sfnode' sugar
|   `-RecordType 0x55f08f300e30 'struct _sfnode'
|     `-Record 0x55f08f300da8 '_sfnode'
|-RecordDecl 0x55f08f300f78 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x55f08f3010a8 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x55f08f3068c0 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x55f08f306960 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x55f08f306910 'struct _sflist' sugar
|   `-RecordType 0x55f08f301000 'struct _sflist'
|     `-Record 0x55f08f300f78 '_sflist'
|-FunctionDecl 0x55f08f306c70 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f306b68 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x55f08f306f88 <line:197:1, line:200:1>
| | |-BinaryOperator 0x55f08f306e28 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x55f08f306d58 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x55f08f3010a8
| | | | `-ImplicitCastExpr 0x55f08f306d40 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55f08f306d18 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55f08f306b68 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x55f08f306e10 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x55f08f306df0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x55f08f306dc8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x55f08f306d90 <col:23> 'int' 0
| | `-BinaryOperator 0x55f08f306f60 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x55f08f306e90 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x55f08f3068c0
| |   | `-ImplicitCastExpr 0x55f08f306e78 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55f08f306e50 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55f08f306b68 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x55f08f306f48 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x55f08f306f28 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x55f08f306f00 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x55f08f306ec8 <col:23> 'int' 0
| `-FullComment 0x55f08f412bd0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x55f08f412a10 <line:192:3>
|   | `-TextComment 0x55f08f4129e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f412a30 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55f08f412a90 <col:10, col:27>
|   |   `-TextComment 0x55f08f412a60 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x55f08f412ae0 <line:194:3>
|   | `-TextComment 0x55f08f412ab0 <col:3> Text=" "
|   `-ParamCommandComment 0x55f08f412b00 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x55f08f412b90 <col:15, col:50>
|       `-TextComment 0x55f08f412b60 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x55f08f3070c0 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f306fb8 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f307318 <line:206:1, line:208:1>
|   `-ReturnStmt 0x55f08f307300 <line:207:2, col:71>
|     `-CStyleCastExpr 0x55f08f3072d8 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x55f08f3072b8 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x55f08f307250 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x55f08f307220 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x55f08f3071a8 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55f08f300e80
|           |   `-ImplicitCastExpr 0x55f08f307190 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x55f08f307168 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f306fb8 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x55f08f307238 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x55f08f307200 <line:207:49, line:203:31> 'unsigned long' prefix '~'
|               `-IntegerLiteral 0x55f08f3071e0 <col:31> 'unsigned long' 3
|-FunctionDecl 0x55f08f307440 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x55f08f307340 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x55f08f307680 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f3074f8 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x55f08f307568 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f308a78 <line:214:1, line:218:1>
|   |-DeclStmt 0x55f08f3078a8 <line:215:2, col:47>
|   | `-VarDecl 0x55f08f307740 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x55f08f307860 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x55f08f307848 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f08f3077a0 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x55f08f307440 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x55f08f307890 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55f08f3077c8 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f3074f8 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x55f08f308a50 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x55f08f308920 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55f08f300e80
|     | `-ImplicitCastExpr 0x55f08f308908 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f08f3088e0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f3074f8 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x55f08f308a28 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x55f08f308a10 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x55f08f3089f8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x55f08f308958 <col:27> 'u8_t':'unsigned char' lvalue Var 0x55f08f307740 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x55f08f3089d0 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x55f08f3089b8 <col:50> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55f08f308980 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f307568 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x55f08f308c30 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f308aa8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f308b18 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f308dc0 <line:221:1, line:223:1>
|   `-BinaryOperator 0x55f08f308d98 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x55f08f308d20 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x55f08f3010a8
|     | `-ImplicitCastExpr 0x55f08f308d08 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f08f308ce0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55f08f308aa8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x55f08f308d80 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f308d58 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f308b18 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55f08f308ee8 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f308de8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f308e58 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f3090a8 <line:226:1, line:228:1>
|   `-BinaryOperator 0x55f08f309050 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x55f08f308fd8 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x55f08f3068c0
|     | `-ImplicitCastExpr 0x55f08f308fc0 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f08f308f98 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x55f08f308de8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x55f08f309038 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f309010 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f308e58 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55f08f3091d0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f3090d0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x55f08f309348 <line:238:1, line:240:1>
| | `-ReturnStmt 0x55f08f309308 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x55f08f3092f0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55f08f3092b8 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x55f08f3010a8
| |       `-ImplicitCastExpr 0x55f08f3092a0 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f309278 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x55f08f3090d0 'list' 'sys_sflist_t *'
| `-FullComment 0x55f08f412f10 <line:231:3, line:235:68>
|   |-ParagraphComment 0x55f08f412c70 <line:231:3>
|   | `-TextComment 0x55f08f412c40 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f412c90 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f412cf0 <col:10, col:43>
|   |   `-TextComment 0x55f08f412cc0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x55f08f412d40 <line:233:3>
|   | `-TextComment 0x55f08f412d10 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f412d60 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f412df0 <col:15, col:62>
|   |   `-TextComment 0x55f08f412dc0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x55f08f412e40 <line:235:3>
|   | `-TextComment 0x55f08f412e10 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f412e60 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x55f08f412ec0 <col:11, col:68>
|       `-TextComment 0x55f08f412e90 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x55f08f3093f8 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f309370 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x55f08f309578 <line:250:1, line:252:1>
| | `-ReturnStmt 0x55f08f309530 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x55f08f309518 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x55f08f3094e0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x55f08f3068c0
| |       `-ImplicitCastExpr 0x55f08f3094c8 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f3094a0 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x55f08f309370 'list' 'sys_sflist_t *'
| `-FullComment 0x55f08f413250 <line:243:3, line:247:67>
|   |-ParagraphComment 0x55f08f412fb0 <line:243:3>
|   | `-TextComment 0x55f08f412f80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f412fd0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f413030 <col:10, col:42>
|   |   `-TextComment 0x55f08f413000 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x55f08f413080 <line:245:3>
|   | `-TextComment 0x55f08f413050 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4130a0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f413130 <col:15, col:61>
|   |   `-TextComment 0x55f08f413100 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x55f08f413180 <line:247:3>
|   | `-TextComment 0x55f08f413150 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4131a0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x55f08f413200 <col:11, col:67>
|       `-TextComment 0x55f08f4131d0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x55f08f309628 prev 0x55f08f307440 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f3095a0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x55f08f309818 <line:265:1, line:267:1>
| | `-ReturnStmt 0x55f08f3097d8 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x55f08f3097c0 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x55f08f309798 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x55f08f309768 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x55f08f309710 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55f08f300e80
| |       |   `-ImplicitCastExpr 0x55f08f3096f8 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x55f08f3096d0 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f3095a0 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x55f08f309780 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x55f08f309748 <col:31> 'unsigned long' 3
| `-FullComment 0x55f08f413560 <line:259:3, line:262:60>
|   |-ParagraphComment 0x55f08f4132f0 <line:259:3>
|   | `-TextComment 0x55f08f4132c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f413310 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55f08f413370 <col:10, col:51>
|   |   `-TextComment 0x55f08f413340 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x55f08f4133c0 <line:261:3>
|   | `-TextComment 0x55f08f413390 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4133e0 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f413490 <line:261:15, line:262:3>
|   |   |-TextComment 0x55f08f413440 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x55f08f413460 <line:262:3> Text=" "
|   `-BlockCommandComment 0x55f08f4134b0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x55f08f413510 <col:11, col:60>
|       `-TextComment 0x55f08f4134e0 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x55f08f309a00 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x55f08f309840 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55f08f3098f0 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x55f08f309bf8 <line:283:1, line:286:1>
| | |-CompoundStmt 0x55f08f309ab0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x55f08f309ac0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x55f08f309ba0 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x55f08f309b10 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55f08f300e80
| |   | `-ImplicitCastExpr 0x55f08f309af8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55f08f309ad0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f309840 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x55f08f309b88 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x55f08f309b70 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x55f08f309b48 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x55f08f3098f0 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x55f08f4139c0 <line:270:3, line:280:62>
|   |-ParagraphComment 0x55f08f413600 <line:270:3>
|   | `-TextComment 0x55f08f4135d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f413620 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55f08f413680 <col:10, col:35>
|   |   `-TextComment 0x55f08f413650 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x55f08f413720 <line:272:3, line:274:64>
|   | |-TextComment 0x55f08f4136a0 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x55f08f4136c0 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x55f08f4136e0 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x55f08f413790 <line:276:3, line:277:61>
|   | |-TextComment 0x55f08f413740 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x55f08f413760 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x55f08f4137e0 <line:279:3>
|   | `-TextComment 0x55f08f4137b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f413800 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4138b0 <line:279:15, line:280:3>
|   |   |-TextComment 0x55f08f413860 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x55f08f413880 <line:280:3> Text=" "
|   `-ParamCommandComment 0x55f08f4138d0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x55f08f413960 <col:16, col:62>
|       `-TextComment 0x55f08f413930 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x55f08f309d30 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x55f08f309c30 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55f08f309ca0 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x55f08f30a0e8 <line:299:1, line:302:1>
| | |-CompoundStmt 0x55f08f309de0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x55f08f309df0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x55f08f30a090 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x55f08f309e40 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x55f08f300e80
| |   | `-ImplicitCastExpr 0x55f08f309e28 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55f08f309e00 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f309c30 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x55f08f30a068 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x55f08f309fe8 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x55f08f309fc8 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x55f08f309f40 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x55f08f309f28 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x55f08f309e78 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f3070c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x55f08f309f70 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55f08f309ea0 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f309c30 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x55f08f30a050 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x55f08f30a038 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f30a010 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x55f08f309ca0 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x55f08f413da0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x55f08f413a60 <line:289:3>
|   | `-TextComment 0x55f08f413a30 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f413a80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f413ae0 <col:10, col:44>
|   |   `-TextComment 0x55f08f413ab0 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x55f08f413b80 <line:291:3, line:293:64>
|   | |-TextComment 0x55f08f413b00 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x55f08f413b20 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x55f08f413b40 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x55f08f413bd0 <line:295:3>
|   | `-TextComment 0x55f08f413ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f413bf0 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f413ca0 <line:295:15, line:296:3>
|   |   |-TextComment 0x55f08f413c50 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x55f08f413c70 <line:296:3> Text=" "
|   `-ParamCommandComment 0x55f08f413cc0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x55f08f413d50 <col:16, col:62>
|       `-TextComment 0x55f08f413d20 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x55f08f30a220 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f30a120 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x55f08f4140e0 <line:309:3, line:313:57>
|   |-ParagraphComment 0x55f08f413e40 <line:309:3>
|   | `-TextComment 0x55f08f413e10 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f413e60 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f413ec0 <col:10, col:41>
|   |   `-TextComment 0x55f08f413e90 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x55f08f413f10 <line:311:3>
|   | `-TextComment 0x55f08f413ee0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f413f30 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f413fc0 <col:15, col:44>
|   |   `-TextComment 0x55f08f413f90 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x55f08f414010 <line:313:3>
|   | `-TextComment 0x55f08f413fe0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f414030 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x55f08f414090 <col:11, col:57>
|       `-TextComment 0x55f08f414060 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x55f08f30a360 prev 0x55f08f30a220 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f30a2d8 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55f08f30a658 <line:60:2, line:62:2>
|   `-ReturnStmt 0x55f08f30a610 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x55f08f30a5f8 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x55f08f30a5d8 <col:10, col:54> 'int'
|         `-BinaryOperator 0x55f08f30a5b0 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x55f08f30a4d0 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x55f08f30a4b8 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x55f08f30a408 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x55f08f30a500 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x55f08f30a430 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30a2d8 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x55f08f30a598 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x55f08f30a578 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x55f08f30a550 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x55f08f30a518 <col:23> 'int' 0
|-FunctionDecl 0x55f08f30a708 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f30a680 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x55f08f414480 <line:320:3, line:326:55>
|   |-ParagraphComment 0x55f08f414180 <line:320:3>
|   | `-TextComment 0x55f08f414150 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4141a0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55f08f414200 <col:10, col:64>
|   |   `-TextComment 0x55f08f4141d0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x55f08f414250 <line:322:3, col:70>
|   | `-TextComment 0x55f08f414220 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x55f08f4142a0 <line:324:3>
|   | `-TextComment 0x55f08f414270 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4142c0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f414350 <col:15, col:64>
|   |   `-TextComment 0x55f08f414320 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55f08f4143a0 <line:326:3>
|   | `-TextComment 0x55f08f414370 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4143c0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55f08f414420 <col:11, col:55>
|       `-TextComment 0x55f08f4143f0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55f08f30a848 prev 0x55f08f30a708 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f30a7c0 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f30ba08 <line:67:2, line:69:2>
|   `-ReturnStmt 0x55f08f30b9c0 <line:68:3, col:42>
|     `-CallExpr 0x55f08f30b978 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x55f08f30b960 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f30b910 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f3070c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x55f08f30b9a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f30b938 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30a7c0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55f08f30bab8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f30ba30 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x55f08f4157f0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x55f08f414520 <line:333:3>
|   | `-TextComment 0x55f08f4144f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f414540 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55f08f4145a0 <col:10, col:46>
|   |   `-TextComment 0x55f08f414570 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x55f08f4145f0 <line:335:3>
|   | `-TextComment 0x55f08f4145c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f415640 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4156d0 <col:15, col:64>
|   |   `-TextComment 0x55f08f4156a0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x55f08f415720 <line:337:3>
|   | `-TextComment 0x55f08f4156f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f415740 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55f08f4157a0 <col:11, col:55>
|       `-TextComment 0x55f08f415770 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x55f08f30bbf8 prev 0x55f08f30bab8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f30bb70 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f30bf58 <line:74:2, line:78:2>
|   `-ReturnStmt 0x55f08f30bf18 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x55f08f30bee8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x55f08f30bd78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x55f08f30bd48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x55f08f30bca0 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30bb70 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x55f08f30bd60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x55f08f30bd28 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55f08f30bd00 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55f08f30bcc8 <col:23> 'int' 0
|       |-CallExpr 0x55f08f30be08 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55f08f30bdf0 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55f08f30bda0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f30a848 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x55f08f30be38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55f08f30bdc8 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30bb70 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x55f08f30bed0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x55f08f30beb0 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x55f08f30be88 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55f08f30be50 <col:23> 'int' 0
|-FunctionDecl 0x55f08f30c080 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f30bf80 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f30bff0 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x55f08f415b80 <line:344:3, line:349:47>
|   |-ParagraphComment 0x55f08f415890 <line:344:3>
|   | `-TextComment 0x55f08f415860 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4158b0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f415910 <col:10, col:42>
|   |   `-TextComment 0x55f08f4158e0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x55f08f415960 <line:346:3, col:63>
|   | `-TextComment 0x55f08f415930 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f4159b0 <line:348:3>
|   | `-TextComment 0x55f08f415980 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4159d0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f415a80 <line:348:15, line:349:3>
|   |   |-TextComment 0x55f08f415a30 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f415a50 <line:349:3> Text=" "
|   `-ParamCommandComment 0x55f08f415aa0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55f08f415b30 <col:15, col:47>
|       `-TextComment 0x55f08f415b00 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x55f08f30c240 prev 0x55f08f30c080 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f30c140 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f30c1b0 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f30c988 <line:84:2, line:93:2>
|   |-CallExpr 0x55f08f30c460 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x55f08f30c448 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f30c2f0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55f08f307680 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55f08f30c498 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f30c318 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30c1b0 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x55f08f30c3a8 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55f08f30c390 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55f08f30c340 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55f08f30c3d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f30c368 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30c140 'list' 'sys_sflist_t *'
|   |-CallExpr 0x55f08f30c5a0 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x55f08f30c588 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f30c4b0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55f08f30c5d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f30c4d8 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30c140 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x55f08f30c5f0 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55f08f30c500 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30c1b0 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x55f08f30c920 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55f08f30c750 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55f08f30c670 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x55f08f30c658 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55f08f30c608 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x55f08f30c6a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55f08f30c630 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30c140 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x55f08f30c738 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55f08f30c718 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55f08f30c6f0 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55f08f30c6b8 <col:23> 'int' 0
|     |-CompoundStmt 0x55f08f30c8e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x55f08f30c890 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x55f08f30c878 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55f08f30c778 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308ee8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55f08f30c8c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55f08f30c7a0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30c140 'list' 'sys_sflist_t *'
|     |   `-CallExpr 0x55f08f30c830 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|     |     |-ImplicitCastExpr 0x55f08f30c818 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55f08f30c7c8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|     |     `-ImplicitCastExpr 0x55f08f30c860 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x55f08f30c7f0 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30c140 'list' 'sys_sflist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x55f08f30cac0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f30c9c0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f30ca30 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55f08f415f10 <line:357:3, line:362:46>
|   |-ParagraphComment 0x55f08f415c20 <line:357:3>
|   | `-TextComment 0x55f08f415bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f415c40 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f415ca0 <col:10, col:41>
|   |   `-TextComment 0x55f08f415c70 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x55f08f415cf0 <line:359:3, col:63>
|   | `-TextComment 0x55f08f415cc0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f415d40 <line:361:3>
|   | `-TextComment 0x55f08f415d10 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f415d60 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f415e10 <line:361:15, line:362:3>
|   |   |-TextComment 0x55f08f415dc0 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f415de0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x55f08f415e30 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x55f08f415ec0 <col:15, col:46>
|       `-TextComment 0x55f08f415e90 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x55f08f30cc80 prev 0x55f08f30cac0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f30cb80 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f30cbf0 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f30d4e8 <line:99:2, line:111:2>
|   |-CallExpr 0x55f08f30ce18 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x55f08f30ce00 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f30cd30 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55f08f307680 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55f08f30ce50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f30cd58 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30cbf0 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x55f08f30ce68 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x55f08f30cde0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x55f08f30cdb8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x55f08f30cd80 <col:23> 'int' 0
|   `-IfStmt 0x55f08f30d480 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55f08f30cfc8 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x55f08f30cee8 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x55f08f30ced0 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55f08f30ce80 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x55f08f30cf18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55f08f30cea8 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30cb80 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x55f08f30cfb0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55f08f30cf90 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55f08f30cf68 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55f08f30cf30 <col:23> 'int' 0
|     |-CompoundStmt 0x55f08f30d1e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x55f08f30d080 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x55f08f30d068 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x55f08f30cff0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308ee8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x55f08f30d0b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55f08f30d018 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30cb80 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x55f08f30d0d0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55f08f30d040 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30cbf0 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x55f08f30d178 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x55f08f30d160 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55f08f30d0e8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55f08f30d1b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55f08f30d110 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30cb80 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x55f08f30d1c8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55f08f30d138 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30cbf0 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x55f08f30d460 <line:105:10, line:110:3>
|       |-CallExpr 0x55f08f30d318 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x55f08f30d300 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55f08f30d200 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55f08f307680 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x55f08f30d290 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x55f08f30d278 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55f08f30d228 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x55f08f30d2c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55f08f30d250 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30cb80 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x55f08f30d350 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x55f08f30d2d8 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30cbf0 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x55f08f30d3f8 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x55f08f30d3e0 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55f08f30d368 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308ee8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x55f08f30d430 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x55f08f30d390 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30cb80 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x55f08f30d448 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55f08f30d3b8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f30cbf0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55f08f30d740 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55f08f30d518 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f30d590 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x55f08f30d608 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x55f08f416470 <line:370:3, line:380:66>
|   |-ParagraphComment 0x55f08f415fb0 <line:370:3>
|   | `-TextComment 0x55f08f415f80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f415fd0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f416030 <col:10, col:41>
|   |   `-TextComment 0x55f08f416000 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x55f08f416120 <line:372:3, line:374:63>
|   | |-TextComment 0x55f08f416050 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x55f08f416070 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x55f08f4160c0 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x55f08f4160e0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f416170 <line:376:3, col:48>
|   | `-TextComment 0x55f08f416140 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x55f08f4161c0 <line:378:3>
|   | `-TextComment 0x55f08f416190 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4161e0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f416290 <line:378:15, line:379:3>
|   |   |-TextComment 0x55f08f416240 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f416260 <line:379:3> Text=" "
|   |-ParamCommandComment 0x55f08f4162b0 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55f08f416360 <line:379:15, line:380:3>
|   |   |-TextComment 0x55f08f416310 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x55f08f416330 <line:380:3> Text=" "
|   `-ParamCommandComment 0x55f08f416380 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x55f08f416410 <col:15, col:66>
|       `-TextComment 0x55f08f4163e0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x55f08f30d9c8 prev 0x55f08f30d740 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x55f08f30d808 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f30d880 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x55f08f30d930 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x55f08f30e088 <col:31, line:127:42>
|   |-IfStmt 0x55f08f30def0 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55f08f30dbc8 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x55f08f30dae8 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x55f08f30dad0 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55f08f30da80 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x55f08f30db18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55f08f30daa8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30d808 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x55f08f30dbb0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55f08f30db90 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55f08f30db68 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55f08f30db30 <col:23> 'int' 0
|   | |-CompoundStmt 0x55f08f30dd20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x55f08f30dcd0 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x55f08f30dcb8 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55f08f30dbf0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x55f08f30dd08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55f08f30dc18 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30d808 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x55f08f30dc90 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x55f08f30dc78 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55f08f30dc40 <col:31> 'void *' lvalue ParmVar 0x55f08f30d880 'head' 'void *'
|   | `-CompoundStmt 0x55f08f30ded8 <line:121:9, line:125:2>
|   |   `-CallExpr 0x55f08f30dea0 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x55f08f30de88 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f08f30dd38 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55f08f307680 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x55f08f30ddc8 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x55f08f30ddb0 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x55f08f30dd60 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x55f08f30ddf8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55f08f30dd88 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30d808 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x55f08f30de60 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x55f08f30de48 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x55f08f30de10 <col:29> 'void *' lvalue ParmVar 0x55f08f30d880 'head' 'void *'
|   `-CallExpr 0x55f08f30e008 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x55f08f30dff0 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f30df28 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308ee8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x55f08f30e040 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f30df50 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30d808 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x55f08f30dfc8 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x55f08f30dfb0 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f30df78 <col:35> 'void *' lvalue ParmVar 0x55f08f30d930 'tail' 'void *'
|-FunctionDecl 0x55f08f30e240 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f30e0b8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f30e128 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x55f08f416820 <line:388:3, line:394:57>
|   |-ParagraphComment 0x55f08f416510 <line:388:3>
|   | `-TextComment 0x55f08f4164e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f416530 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55f08f416590 <col:10, col:66>
|   |   `-TextComment 0x55f08f416560 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x55f08f416600 <line:390:3, line:391:63>
|   | |-TextComment 0x55f08f4165b0 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x55f08f4165d0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f416650 <line:393:3>
|   | `-TextComment 0x55f08f416620 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f416670 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f416720 <line:393:15, line:394:3>
|   |   |-TextComment 0x55f08f4166d0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f4166f0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x55f08f416740 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x55f08f4167d0 <col:25, col:57>
|       `-TextComment 0x55f08f4167a0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x55f08f30e400 prev 0x55f08f30e240 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f30e300 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f30e370 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x55f08f2fc2b8 <line:135:2, line:141:2>
|   |-DeclStmt 0x55f08f30e5a8 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x55f08f30e4c0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x55f08f30e530 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x55f08f30e698 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x55f08f30e5c0 <col:3> 'sys_sfnode_t *' lvalue Var 0x55f08f30e4c0 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x55f08f30e650 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55f08f30e638 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55f08f30e5e8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55f08f30e680 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f30e610 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30e370 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x55f08f30e798 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x55f08f30e6c0 <col:3> 'sys_sfnode_t *' lvalue Var 0x55f08f30e530 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x55f08f30e750 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55f08f30e738 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55f08f30e6e8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x55f08f30e780 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f30e710 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30e370 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x55f08f30e8d0 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x55f08f30e8b8 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f30e7c0 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x55f08f30d9c8 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x55f08f30e910 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f30e7e8 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30e300 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x55f08f2fc138 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x55f08f2fc120 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f08f30e810 <col:41> 'sys_sfnode_t *' lvalue Var 0x55f08f30e4c0 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x55f08f2fc168 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x55f08f2fc150 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f30e838 <col:47> 'sys_sfnode_t *' lvalue Var 0x55f08f30e530 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x55f08f2fc240 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x55f08f2fc228 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f2fc180 <col:1> 'void (sys_sflist_t *)' Function 0x55f08f306c70 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x55f08f2fc270 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f2fc1a8 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x55f08f30e370 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x55f08f2fc510 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2fc300 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f2fc370 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x55f08f2fc3e0 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55f08f416c90 <line:402:3, line:408:46>
|   |-ParagraphComment 0x55f08f4168c0 <line:402:3>
|   | `-TextComment 0x55f08f416890 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4168e0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f416940 <col:10, col:41>
|   |   `-TextComment 0x55f08f416910 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x55f08f416990 <line:404:3, col:63>
|   | `-TextComment 0x55f08f416960 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f4169e0 <line:406:3>
|   | `-TextComment 0x55f08f4169b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f416a00 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f416ab0 <line:406:15, line:407:3>
|   |   |-TextComment 0x55f08f416a60 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f416a80 <line:407:3> Text=" "
|   |-ParamCommandComment 0x55f08f416ad0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55f08f416b80 <line:407:15, line:408:3>
|   |   |-TextComment 0x55f08f416b30 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x55f08f416b50 <line:408:3> Text=" "
|   `-ParamCommandComment 0x55f08f416ba0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55f08f416c30 <col:15, col:46>
|       `-TextComment 0x55f08f416c00 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x55f08f2fc750 prev 0x55f08f2fc510 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f2fc5d8 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f2fc648 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x55f08f2fc6b8 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f2fcfb8 <line:148:2, line:158:2>
|   `-IfStmt 0x55f08f2fcf50 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55f08f2fc8e0 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x55f08f2fc8b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x55f08f2fc808 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f2fc648 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x55f08f2fc8c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x55f08f2fc890 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x55f08f2fc868 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x55f08f2fc830 <col:23> 'int' 0
|     |-CompoundStmt 0x55f08f2fca00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x55f08f2fc998 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x55f08f2fc980 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55f08f2fc908 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f30c240 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x55f08f2fc9d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55f08f2fc930 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55f08f2fc5d8 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x55f08f2fc9e8 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55f08f2fc958 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f2fc6b8 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x55f08f2fcf18 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55f08f2fcb60 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x55f08f2fca80 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x55f08f2fca68 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55f08f2fca18 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f3070c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x55f08f2fcab0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55f08f2fca40 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f2fc648 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x55f08f2fcb48 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x55f08f2fcb28 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x55f08f2fcb00 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x55f08f2fcac8 <col:23> 'int' 0
|       |-CompoundStmt 0x55f08f2fcc80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x55f08f2fcc18 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x55f08f2fcc00 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55f08f2fcb88 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f30cc80 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x55f08f2fcc50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55f08f2fcbb0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55f08f2fc5d8 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x55f08f2fcc68 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55f08f2fcbd8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f2fc6b8 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x55f08f2fcef8 <line:153:10, line:157:3>
|         |-CallExpr 0x55f08f2fcdb0 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x55f08f2fcd98 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55f08f2fcc98 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55f08f307680 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x55f08f2fcde8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x55f08f2fccc0 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f2fc6b8 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x55f08f2fcd50 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x55f08f2fcd38 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x55f08f2fcce8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f3070c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x55f08f2fcd80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x55f08f2fcd10 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f2fc648 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x55f08f2fce90 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x55f08f2fce78 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55f08f2fce00 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55f08f307680 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x55f08f2fcec8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x55f08f2fce28 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f2fc648 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x55f08f2fcee0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x55f08f2fce50 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f2fc6b8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55f08f2fd068 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f2fcfe0 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x55f08f417050 <line:417:3, line:424:50>
|   |-ParagraphComment 0x55f08f416d30 <line:417:3>
|   | `-TextComment 0x55f08f416d00 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f416d50 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55f08f416db0 <col:10, col:59>
|   |   `-TextComment 0x55f08f416d80 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55f08f416e20 <line:419:3, line:420:63>
|   | |-TextComment 0x55f08f416dd0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x55f08f416df0 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f416e70 <line:422:3>
|   | `-TextComment 0x55f08f416e40 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f416e90 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f416f20 <col:15, col:46>
|   |   `-TextComment 0x55f08f416ef0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55f08f416f70 <line:424:3>
|   | `-TextComment 0x55f08f416f40 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f416f90 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x55f08f416ff0 <col:11, col:50>
|       `-TextComment 0x55f08f416fc0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x55f08f3149b8 prev 0x55f08f2fd068 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f314930 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55f08f315058 <line:163:2, line:175:2>
|   |-DeclStmt 0x55f08f314b80 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x55f08f314a70 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x55f08f314b38 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x55f08f314b20 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f08f314ad0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x55f08f314b68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55f08f314af8 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55f08f314930 'list' 'sys_sflist_t *'
|   |-CallExpr 0x55f08f314cb0 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x55f08f314c98 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55f08f314b98 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x55f08f314ce8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x55f08f314bc0 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x55f08f314930 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x55f08f314c50 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x55f08f314c38 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55f08f314be8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f3070c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x55f08f314c80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55f08f314c10 <col:33> 'sys_sfnode_t *' lvalue Var 0x55f08f314a70 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x55f08f314f98 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55f08f314df0 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x55f08f314d68 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x55f08f314d50 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55f08f314d00 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x55f08f314d98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55f08f314d28 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x55f08f314930 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x55f08f314dd8 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f08f314db0 <col:46> 'sys_sfnode_t *' lvalue Var 0x55f08f314a70 'node' 'sys_sfnode_t *'
|   | |-CompoundStmt 0x55f08f314f80 <col:52, line:172:3>
|   | | `-CallExpr 0x55f08f314f30 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x55f08f314f18 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55f08f314e18 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308ee8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x55f08f314f68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55f08f314e40 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55f08f314930 'list' 'sys_sflist_t *'
|   | |   `-CallExpr 0x55f08f314ed0 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   | |     |-ImplicitCastExpr 0x55f08f314eb8 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x55f08f314e68 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |     `-ImplicitCastExpr 0x55f08f314f00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55f08f314e90 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x55f08f314930 'list' 'sys_sflist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55f08f315010 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x55f08f314ff8 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f314fd0 <col:10> 'sys_sfnode_t *' lvalue Var 0x55f08f314a70 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x55f08f315120 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f315098 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x55f08f4173f0 <line:431:3, line:437:69>
|   |-ParagraphComment 0x55f08f4170f0 <line:431:3>
|   | `-TextComment 0x55f08f4170c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f417110 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55f08f417170 <col:10, col:59>
|   |   `-TextComment 0x55f08f417140 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x55f08f4171c0 <line:433:3, col:63>
|   | `-TextComment 0x55f08f417190 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f417210 <line:435:3>
|   | `-TextComment 0x55f08f4171e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f417230 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4172c0 <col:15, col:46>
|   |   `-TextComment 0x55f08f417290 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x55f08f417310 <line:437:3>
|   | `-TextComment 0x55f08f4172e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f417330 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55f08f417390 <col:11, col:69>
|       `-TextComment 0x55f08f417360 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x55f08f315260 prev 0x55f08f315120 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x55f08f3151d8 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x55f08f3155e8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x55f08f3155a8 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x55f08f315578 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x55f08f315548 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x55f08f3153d0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x55f08f3153b8 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55f08f315308 <col:1> 'bool (sys_sflist_t *)' Function 0x55f08f30a360 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x55f08f315400 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55f08f315330 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x55f08f3151d8 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x55f08f315560 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x55f08f315478 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x55f08f315450 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x55f08f315418 <col:23> 'int' 0
|       `-CallExpr 0x55f08f315500 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x55f08f3154e8 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55f08f315498 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3149b8 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x55f08f315530 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55f08f3154c0 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55f08f3151d8 'list' 'sys_sflist_t *'
|-FunctionDecl 0x55f08f315788 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f315610 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f315680 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55f08f3156f0 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x55f08f4178b0 <line:444:3, line:451:46>
|   |-ParagraphComment 0x55f08f417490 <line:444:3>
|   | `-TextComment 0x55f08f417460 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4174b0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55f08f417510 <col:10, col:23>
|   |   `-TextComment 0x55f08f4174e0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x55f08f417560 <line:446:3, col:63>
|   | `-TextComment 0x55f08f417530 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f4175b0 <line:448:3>
|   | `-TextComment 0x55f08f417580 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4175d0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4176a0 <line:448:15, line:449:3>
|   |   |-TextComment 0x55f08f417650 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f417670 <line:449:3> Text=" "
|   |-ParamCommandComment 0x55f08f4176c0 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4177a0 <line:449:20, line:451:3>
|   |   |-TextComment 0x55f08f417720 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x55f08f417740 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x55f08f417760 <line:451:3> Text=" "
|   `-ParamCommandComment 0x55f08f4177c0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x55f08f417850 <col:15, col:46>
|       `-TextComment 0x55f08f417820 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x55f08f3159d8 prev 0x55f08f315788 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f315850 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f3158c0 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x55f08f315940 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f316588 <line:190:2, line:212:2>
|   |-IfStmt 0x55f08f3163d0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55f08f315b68 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x55f08f315b38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55f08f315a90 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f3158c0 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x55f08f315b50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55f08f315b18 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55f08f315af0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55f08f315ab8 <col:23> 'int' 0
|   | |-CompoundStmt 0x55f08f315fc8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x55f08f315ca8 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x55f08f315c90 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55f08f315b90 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x55f08f315ce0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55f08f315bb8 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x55f08f315850 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x55f08f315c48 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x55f08f315c30 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x55f08f315be0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f3070c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x55f08f315c78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55f08f315c08 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f315940 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x55f08f315f90 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55f08f315de8 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x55f08f315d60 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x55f08f315d48 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x55f08f315cf8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x55f08f315d90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x55f08f315d20 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55f08f315850 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x55f08f315dd0 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55f08f315da8 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f315940 'node' 'sys_sfnode_t *'
|   | |   |-CompoundStmt 0x55f08f315f78 <col:53, line:199:4>
|   | |   | `-CallExpr 0x55f08f315f28 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x55f08f315f10 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x55f08f315e10 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308ee8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |   |-ImplicitCastExpr 0x55f08f315f60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x55f08f315e38 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55f08f315850 'list' 'sys_sflist_t *'
|   | |   |   `-CallExpr 0x55f08f315ec8 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |   |     |-ImplicitCastExpr 0x55f08f315eb0 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x55f08f315e60 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   |     `-ImplicitCastExpr 0x55f08f315ef8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55f08f315e88 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55f08f315850 'list' 'sys_sflist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x55f08f3163b0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x55f08f316100 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x55f08f3160e8 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x55f08f315fe8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55f08f307680 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x55f08f316138 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55f08f316010 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f3158c0 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x55f08f3160a0 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x55f08f316088 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x55f08f316038 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f3070c0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x55f08f3160d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55f08f316060 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f315940 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x55f08f316378 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55f08f316240 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x55f08f3161b8 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x55f08f3161a0 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x55f08f316150 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x55f08f3161e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55f08f316178 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x55f08f315850 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x55f08f316228 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55f08f316200 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f315940 'node' 'sys_sfnode_t *'
|   |     |-CompoundStmt 0x55f08f316360 <col:53, line:208:4>
|   |     | `-CallExpr 0x55f08f3162f8 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x55f08f3162e0 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x55f08f316268 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f308ee8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |   |-ImplicitCastExpr 0x55f08f316330 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x55f08f316290 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55f08f315850 'list' 'sys_sflist_t *'
|   |     |   `-ImplicitCastExpr 0x55f08f316348 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55f08f3162b8 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f3158c0 'prev_node' 'sys_sfnode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x55f08f3164f0 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x55f08f3164d8 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f316408 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x55f08f307680 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x55f08f316528 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f316430 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f315940 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x55f08f316540 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x55f08f3164b8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x55f08f316490 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x55f08f316458 <col:23> 'int' 0
|-FunctionDecl 0x55f08f316740 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f3165b8 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f316628 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x55f08f417d20 <line:460:3, line:467:35>
|   |-ParagraphComment 0x55f08f417950 <line:460:3>
|   | `-TextComment 0x55f08f417920 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f417970 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f4179d0 <col:10, col:44>
|   |   `-TextComment 0x55f08f4179a0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x55f08f417a20 <line:462:3, col:63>
|   | `-TextComment 0x55f08f4179f0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x55f08f417a70 <line:464:3>
|   | `-TextComment 0x55f08f417a40 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f417a90 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x55f08f417b40 <line:464:15, line:465:3>
|   |   |-TextComment 0x55f08f417af0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x55f08f417b10 <line:465:3> Text=" "
|   |-ParamCommandComment 0x55f08f417b60 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x55f08f417bf0 <col:15, col:60>
|   |   `-TextComment 0x55f08f417bc0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x55f08f417c40 <line:467:3>
|   | `-TextComment 0x55f08f417c10 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f417c60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f417cc0 <col:11, col:35>
|       `-TextComment 0x55f08f417c90 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x55f08f316950 prev 0x55f08f316740 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x55f08f316800 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x55f08f316870 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x55f08f3172c8 <line:218:2, line:233:2>
|   |-DeclStmt 0x55f08f316b08 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x55f08f316a10 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x55f08f316af0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x55f08f316ad0 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x55f08f316aa8 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x55f08f316a70 <col:23> 'int' 0
|   |-DeclStmt 0x55f08f316b90 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x55f08f316b30 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x55f08f317240 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x55f08f316c80 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x55f08f316ba8 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x55f08f316b30 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x55f08f316c38 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x55f08f316c20 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55f08f316bd0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x55f08f316c68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55f08f316bf8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x55f08f316800 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55f08f316d80 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x55f08f316d50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55f08f316ca8 <col:42> 'sys_sfnode_t *' lvalue Var 0x55f08f316b30 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x55f08f316d68 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x55f08f316d30 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x55f08f316d08 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x55f08f316cd0 <col:23> 'int' 0
|   | |-BinaryOperator 0x55f08f316e80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x55f08f316da8 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x55f08f316b30 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x55f08f316e38 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x55f08f316e20 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x55f08f316dd0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f30bbf8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x55f08f316e68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55f08f316df8 <col:42> 'sys_sfnode_t *' lvalue Var 0x55f08f316b30 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x55f08f317220 <col:48, line:230:3>
|   |   |-IfStmt 0x55f08f317158 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x55f08f316f28 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x55f08f316ef8 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x55f08f316ea8 <col:8> 'sys_sfnode_t *' lvalue Var 0x55f08f316b30 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x55f08f316f10 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55f08f316ed0 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f316870 'node' 'sys_sfnode_t *'
|   |   | |-CompoundStmt 0x55f08f317138 <col:22, line:227:4>
|   |   | | |-CallExpr 0x55f08f317060 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x55f08f317048 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x55f08f316f50 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x55f08f3159d8 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   | | | |-ImplicitCastExpr 0x55f08f3170a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55f08f316f78 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x55f08f316800 'list' 'sys_sflist_t *'
|   |   | | | |-ImplicitCastExpr 0x55f08f3170b8 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x55f08f316fa0 <col:38> 'sys_sfnode_t *' lvalue Var 0x55f08f316a10 'prev' 'sys_sfnode_t *'
|   |   | | | `-ImplicitCastExpr 0x55f08f3170d0 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55f08f316fc8 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x55f08f316870 'node' 'sys_sfnode_t *'
|   |   | | `-ReturnStmt 0x55f08f317120 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x55f08f317108 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x55f08f3170e8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x55f08f3171f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x55f08f317190 <col:4> 'sys_sfnode_t *' lvalue Var 0x55f08f316a10 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x55f08f3171e0 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55f08f3171b8 <col:11> 'sys_sfnode_t *' lvalue Var 0x55f08f316b30 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x55f08f3172b0 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x55f08f317298 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x55f08f317278 <col:16> 'int' 0
|-RecordDecl 0x55f08f3172f8 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x55f08f3173a0 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x55f08f3174b8 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x55f08f317628 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x55f08f3176c0 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x55f08f317718 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x55f08f3176c0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x55f08f3174b8 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x55f08f317768 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x55f08f3176c0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x55f08f317628 'bits' 'u32_t [2]'
| `-FieldDecl 0x55f08f3177b8 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x55f08f317850 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x55f08f318730 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x55f08f318788 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x55f08f318800 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x55f08f318858 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x55f08f3188d0 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x55f08f3189d0 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x55f08f318a28 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x55f08f318c20 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x55f08f318b20 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x55f08f319048 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x55f08f318cf0 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x55f08f318d60 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f318dd0 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x55f08f318e40 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x55f08f318ee0 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x55f08f319350 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x55f08f319138 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x55f08f3191a8 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x55f08f319218 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x55f08f319408 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x55f08f3194d8 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x55f08f319570 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x55f08f319520 'struct _ready_q' sugar
|   `-RecordType 0x55f08f319490 'struct _ready_q'
|     `-Record 0x55f08f319408 '_ready_q'
|-RecordDecl 0x55f08f3195c8 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x55f08f319680 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x55f08f3196e0 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x55f08f321fc8 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x55f08f322038 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x55f08f322090 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x55f08f322130 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x55f08f3220e0 'struct _cpu' sugar
|   `-RecordType 0x55f08f319650 'struct _cpu'
|     `-Record 0x55f08f3195c8 '_cpu'
|-RecordDecl 0x55f08f322188 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x55f08f322230 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x55f08f322328 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x55f08f322370 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x55f08f322430 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x55f08f322490 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x55f08f322500 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x55f08f3225a0 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x55f08f3225f8 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x55f08f3225a0 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x55f08f322430 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x55f08f322648 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x55f08f3225a0 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x55f08f322490 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x55f08f322698 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x55f08f3225a0 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x55f08f322500 'current' 'struct k_thread *'
| `-FieldDecl 0x55f08f322760 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x55f08f322840 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x55f08f3227f0 'struct z_kernel' sugar
|   `-RecordType 0x55f08f322210 'struct z_kernel'
|     `-Record 0x55f08f322188 'z_kernel'
|-VarDecl 0x55f08f3228b8 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x55f08f322a70 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x55f08f417fd0 <line:40:3, line:45:25>
|   |-ParagraphComment 0x55f08f417dc0 <line:40:3>
|   | `-TextComment 0x55f08f417d90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f417de0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55f08f417e40 <col:10, col:56>
|   |   `-TextComment 0x55f08f417e10 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x55f08f417eb0 <line:42:3, line:43:27>
|   | |-TextComment 0x55f08f417e60 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x55f08f417e80 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x55f08f417f00 <line:45:3>
|   | `-TextComment 0x55f08f417ed0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f417f20 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x55f08f417f80 <col:11, col:25>
|       `-TextComment 0x55f08f417f50 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x55f08f322c58 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x55f08f418320 <line:37:3, line:43:31>
|   |-ParagraphComment 0x55f08f418070 <line:37:3>
|   | `-TextComment 0x55f08f418040 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f418090 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x55f08f418110 <line:37:10, line:38:20>
|   |   |-TextComment 0x55f08f4180c0 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x55f08f4180e0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x55f08f418160 <line:40:3>
|   | `-TextComment 0x55f08f418130 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f418180 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x55f08f418200 <line:40:9, line:41:23>
|   |   |-TextComment 0x55f08f4181b0 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x55f08f4181d0 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x55f08f418250 <line:43:3>
|   | `-TextComment 0x55f08f418220 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f418270 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x55f08f4182d0 <col:11, col:31>
|       `-TextComment 0x55f08f4182a0 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x55f08f322ec0 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x55f08f322d40 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x55f08f322db0 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x55f08f4187d0 <line:47:3, line:56:1>
|   |-ParagraphComment 0x55f08f4183c0 <line:47:3>
|   | `-TextComment 0x55f08f418390 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4183e0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x55f08f418460 <line:47:10, line:48:33>
|   |   |-TextComment 0x55f08f418410 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x55f08f418430 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x55f08f4184b0 <line:50:3>
|   | `-TextComment 0x55f08f418480 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4184d0 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x55f08f418550 <line:50:9, line:51:31>
|   |   |-TextComment 0x55f08f418500 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x55f08f418520 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x55f08f4185a0 <line:53:3>
|   | `-TextComment 0x55f08f418570 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4185c0 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x55f08f418670 <line:53:20, line:54:3>
|   |   |-TextComment 0x55f08f418620 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x55f08f418640 <line:54:3> Text=" "
|   |-ParamCommandComment 0x55f08f418690 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x55f08f418720 <col:14, col:45>
|   |   `-TextComment 0x55f08f4186f0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x55f08f418770 <line:56:1>
|     `-TextComment 0x55f08f418740 <col:1> Text=" "
|-FunctionDecl 0x55f08f326fd8 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x55f08f326e48 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x55f08f326eb8 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x55f08f418d60 <line:60:3, line:71:1>
|   |-ParagraphComment 0x55f08f418870 <line:60:3>
|   | `-TextComment 0x55f08f418840 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f418890 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x55f08f418910 <line:60:10, line:61:22>
|   |   |-TextComment 0x55f08f4188c0 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x55f08f4188e0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x55f08f418960 <line:63:3>
|   | `-TextComment 0x55f08f418930 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f418980 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x55f08f418a00 <line:63:9, line:64:42>
|   |   |-TextComment 0x55f08f4189b0 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x55f08f4189d0 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x55f08f418a50 <line:66:3>
|   | `-TextComment 0x55f08f418a20 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f418a70 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x55f08f418b20 <line:66:20, line:67:3>
|   |   |-TextComment 0x55f08f418ad0 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x55f08f418af0 <line:67:3> Text=" "
|   |-ParamCommandComment 0x55f08f418b40 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x55f08f418bd0 <col:14, col:45>
|   |   `-TextComment 0x55f08f418ba0 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x55f08f418c20 <line:69:3>
|   | `-TextComment 0x55f08f418bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f418c40 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x55f08f418ca0 <col:11, col:53>
|   |   `-TextComment 0x55f08f418c70 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x55f08f418cf0 <line:71:1>
|     `-TextComment 0x55f08f418cc0 <col:1> Text=" "
|-TypedefDecl 0x55f08f327600 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x55f08f327570 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x55f08f327510 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x55f08f3274a0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x55f08f3270f0 'uintptr_t' sugar
| |     | |-Typedef 0x55f08f26a290 'uintptr_t'
| |     | `-BuiltinType 0x55f08f1ea860 'unsigned long'
| |     |-TypedefType 0x55f08f3270f0 'uintptr_t' sugar
| |     | |-Typedef 0x55f08f26a290 'uintptr_t'
| |     | `-BuiltinType 0x55f08f1ea860 'unsigned long'
| |     |-TypedefType 0x55f08f3270f0 'uintptr_t' sugar
| |     | |-Typedef 0x55f08f26a290 'uintptr_t'
| |     | `-BuiltinType 0x55f08f1ea860 'unsigned long'
| |     |-TypedefType 0x55f08f3270f0 'uintptr_t' sugar
| |     | |-Typedef 0x55f08f26a290 'uintptr_t'
| |     | `-BuiltinType 0x55f08f1ea860 'unsigned long'
| |     |-TypedefType 0x55f08f3270f0 'uintptr_t' sugar
| |     | |-Typedef 0x55f08f26a290 'uintptr_t'
| |     | `-BuiltinType 0x55f08f1ea860 'unsigned long'
| |     |-TypedefType 0x55f08f3270f0 'uintptr_t' sugar
| |     | |-Typedef 0x55f08f26a290 'uintptr_t'
| |     | `-BuiltinType 0x55f08f1ea860 'unsigned long'
| |     |-TypedefType 0x55f08f3270f0 'uintptr_t' sugar
| |     | |-Typedef 0x55f08f26a290 'uintptr_t'
| |     | `-BuiltinType 0x55f08f1ea860 'unsigned long'
| |     `-PointerType 0x55f08f1eaba0 'void *'
| |       `-BuiltinType 0x55f08f1ea700 'void'
| `-FullComment 0x55f08f419a00 <line:50:3, line:84:1>
|   |-ParagraphComment 0x55f08f418e00 <line:50:3>
|   | `-TextComment 0x55f08f418dd0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f418e20 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x55f08f418e90 <line:51:3>
|   | `-TextComment 0x55f08f418e60 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f418eb0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f418f10 <col:10, col:43>
|   |   `-TextComment 0x55f08f418ee0 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x55f08f418f80 <line:53:3, line:54:67>
|   | |-TextComment 0x55f08f418f30 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x55f08f418f50 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x55f08f419160 <line:56:3, line:66:41>
|   | |-TextComment 0x55f08f418fa0 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x55f08f418fc0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x55f08f418fe0 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x55f08f419000 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x55f08f419020 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x55f08f419040 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x55f08f419060 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x55f08f419080 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x55f08f4190a0 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x55f08f4190c0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x55f08f4190e0 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x55f08f4191d0 <line:68:3, line:69:70>
|   | |-TextComment 0x55f08f419180 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x55f08f4191a0 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x55f08f419220 <line:71:3, col:80>
|   | `-TextComment 0x55f08f4191f0 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x55f08f419270 <line:73:3>
|   | `-TextComment 0x55f08f419240 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f419290 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x55f08f419340 <line:73:15, line:74:3>
|   |   |-TextComment 0x55f08f4192f0 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x55f08f419310 <line:74:3> Text=" "
|   |-ParamCommandComment 0x55f08f419360 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x55f08f419410 <line:74:15, line:75:3>
|   |   |-TextComment 0x55f08f4193c0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x55f08f4193e0 <line:75:3> Text=" "
|   |-ParamCommandComment 0x55f08f419430 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x55f08f4194e0 <line:75:15, line:76:3>
|   |   |-TextComment 0x55f08f419490 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x55f08f4194b0 <line:76:3> Text=" "
|   |-ParamCommandComment 0x55f08f419500 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x55f08f4195b0 <line:76:15, line:77:3>
|   |   |-TextComment 0x55f08f419560 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x55f08f419580 <line:77:3> Text=" "
|   |-ParamCommandComment 0x55f08f4195d0 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x55f08f419690 <line:77:15, line:78:3>
|   |   |-TextComment 0x55f08f419630 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x55f08f419660 <line:78:3> Text=" "
|   |-ParamCommandComment 0x55f08f4196b0 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x55f08f419760 <line:78:15, line:79:3>
|   |   |-TextComment 0x55f08f419710 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x55f08f419730 <line:79:3> Text=" "
|   |-ParamCommandComment 0x55f08f419780 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x55f08f419860 <line:79:14, line:81:3>
|   |   |-TextComment 0x55f08f4197e0 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x55f08f419800 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x55f08f419820 <line:81:3> Text=" "
|   |-BlockCommandComment 0x55f08f419880 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x55f08f419900 <line:81:11, line:82:22>
|   |   |-TextComment 0x55f08f4198b0 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x55f08f4198d0 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x55f08f419950 <line:84:1>
|     `-TextComment 0x55f08f419920 <col:1> Text=" "
|-FunctionDecl 0x55f08f327720 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x55f08f327948 <line:94:1, line:106:1>
| | |-DeclStmt 0x55f08f3278b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x55f08f327818 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x55f08f327898 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x55f08f327878 <col:16> 'int' 0
| | `-ReturnStmt 0x55f08f327908 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x55f08f3278f0 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f3278c8 <col:9> 'bool' lvalue Var 0x55f08f327818 'ret' 'bool'
| `-AlwaysInlineAttr 0x55f08f3277c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55f08f3279f8 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x55f08f327b48 <line:114:1, line:120:1>
| | `-ReturnStmt 0x55f08f327ad0 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x55f08f327ab8 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x55f08f327a98 <col:16> 'int' 0
| `-FullComment 0x55f08f419bb0 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x55f08f419aa0 <line:109:3, col:53>
|   | `-TextComment 0x55f08f419a70 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x55f08f419af0 <line:111:3>
|   | `-TextComment 0x55f08f419ac0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f419b10 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x55f08f419b70 <col:11, col:69>
|       `-TextComment 0x55f08f419b40 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-RecordDecl 0x55f08f327b60 prev 0x55f08f2dac98 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x55f08f327be8 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x55f08f327c90 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x55f08f327d90 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x55f08f327d40 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x55f08f327d20 'struct _k_thread_stack_element'
|     `-Record 0x55f08f388ad0 '_k_thread_stack_element'
|-TypedefDecl 0x55f08f347c70 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x55f08f347c00 'void (*)(void *, void *, void *)'
|   `-ParenType 0x55f08f347ba0 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x55f08f347b50 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x55f08f1ea700 'void'
|       |-PointerType 0x55f08f1eaba0 'void *'
|       | `-BuiltinType 0x55f08f1ea700 'void'
|       |-PointerType 0x55f08f1eaba0 'void *'
|       | `-BuiltinType 0x55f08f1ea700 'void'
|       `-PointerType 0x55f08f1eaba0 'void *'
|         `-BuiltinType 0x55f08f1ea700 'void'
|-FunctionDecl 0x55f08f347db8 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x55f08f419d60 <line:55:3, line:57:24>
|   |-ParagraphComment 0x55f08f419c50 <line:55:3, col:70>
|   | `-TextComment 0x55f08f419c20 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x55f08f419ca0 <line:57:3>
|   | `-TextComment 0x55f08f419c70 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f419cc0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x55f08f419d20 <col:8, col:24>
|       `-TextComment 0x55f08f419cf0 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x55f08f348130 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x55f08f41a0e0 <line:120:3, line:130:20>
|   |-ParagraphComment 0x55f08f419e00 <line:120:3>
|   | `-TextComment 0x55f08f419dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f419e20 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55f08f419e80 <col:10, col:33>
|   |   `-TextComment 0x55f08f419e50 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x55f08f419f20 <line:122:3, line:124:47>
|   | |-TextComment 0x55f08f419ea0 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x55f08f419ec0 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x55f08f419ee0 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x55f08f419fc0 <line:126:3, line:128:35>
|   | |-TextComment 0x55f08f419f40 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x55f08f419f60 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x55f08f419f80 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x55f08f41a010 <line:130:3>
|   | `-TextComment 0x55f08f419fe0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41a030 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x55f08f41a090 <col:8, col:20>
|       `-TextComment 0x55f08f41a060 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x55f08f3482d0 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x55f08f348210 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x55f08f41a5f0 <line:135:3, line:150:76>
|   |-ParagraphComment 0x55f08f41a180 <line:135:3>
|   | `-TextComment 0x55f08f41a150 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f41a1a0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55f08f41a200 <col:10, col:66>
|   |   `-TextComment 0x55f08f41a1d0 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x55f08f41a250 <line:137:3, col:62>
|   | `-TextComment 0x55f08f41a220 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x55f08f41a340 <line:139:3, line:143:44>
|   | |-TextComment 0x55f08f41a270 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x55f08f41a290 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x55f08f41a2b0 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x55f08f41a2d0 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x55f08f41a2f0 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x55f08f41a3b0 <line:145:3, line:146:65>
|   | |-TextComment 0x55f08f41a360 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x55f08f41a380 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x55f08f41a400 <line:148:3>
|   | `-TextComment 0x55f08f41a3d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f41a420 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x55f08f41a480 <col:8, col:27>
|   |   `-TextComment 0x55f08f41a450 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x55f08f41a4d0 <line:150:3>
|   | `-TextComment 0x55f08f41a4a0 <col:3> Text=" "
|   `-ParamCommandComment 0x55f08f41a4f0 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x55f08f41a580 <col:14, col:76>
|       `-TextComment 0x55f08f41a550 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x55f08f3485c0 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x55f08f348560 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x55f08f348500 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x55f08f3484c0 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x55f08f1ea700 'void'
| |     `-PointerType 0x55f08f1eaba0 'void *'
| |       `-BuiltinType 0x55f08f1ea700 'void'
| `-FullComment 0x55f08f41a7d0 <line:163:3, line:165:52>
|   |-ParagraphComment 0x55f08f41a690 <line:163:3, col:25>
|   | `-TextComment 0x55f08f41a660 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x55f08f41a6e0 <line:165:3>
|   | `-TextComment 0x55f08f41a6b0 <col:3> Text=" "
|   `-ParamCommandComment 0x55f08f41a700 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x55f08f41a790 <col:18, col:52>
|       `-TextComment 0x55f08f41a760 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x55f08f349a68 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x55f08f348660 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x55f08f348748 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55f08f3487c0 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x55f08f348850 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x55f08f3488c8 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x55f08f41af50 <line:170:3, line:187:51>
|   |-ParagraphComment 0x55f08f41a870 <line:170:3>
|   | `-TextComment 0x55f08f41a840 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f41a890 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55f08f41a8f0 <col:10, col:53>
|   |   `-TextComment 0x55f08f41a8c0 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x55f08f41a9e0 <line:172:3, line:176:68>
|   | |-TextComment 0x55f08f41a910 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x55f08f41a930 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x55f08f41a950 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x55f08f41a970 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x55f08f41a990 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x55f08f41aaa0 <line:178:3, line:181:41>
|   | |-TextComment 0x55f08f41aa00 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x55f08f41aa20 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x55f08f41aa40 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x55f08f41aa60 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x55f08f41aaf0 <line:183:3>
|   | `-TextComment 0x55f08f41aac0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f41ab10 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x55f08f41abc0 <line:183:18, line:184:3>
|   |   |-TextComment 0x55f08f41ab70 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x55f08f41ab90 <line:184:3> Text=" "
|   |-ParamCommandComment 0x55f08f41abe0 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55f08f41ac90 <line:184:16, line:185:3>
|   |   |-TextComment 0x55f08f41ac40 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x55f08f41ac60 <line:185:3> Text=" "
|   |-ParamCommandComment 0x55f08f41acb0 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x55f08f41ad60 <line:185:13, line:186:3>
|   |   |-TextComment 0x55f08f41ad10 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x55f08f41ad30 <line:186:3> Text=" "
|   |-ParamCommandComment 0x55f08f41ad80 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x55f08f41ae30 <line:186:13, line:187:3>
|   |   |-TextComment 0x55f08f41ade0 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x55f08f41ae00 <line:187:3> Text=" "
|   `-ParamCommandComment 0x55f08f41ae50 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x55f08f41aee0 <col:14, col:51>
|       `-TextComment 0x55f08f41aeb0 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x55f08f349c50 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x55f08f41b100 <line:200:3, line:202:18>
|   |-ParagraphComment 0x55f08f41aff0 <line:200:3, col:37>
|   | `-TextComment 0x55f08f41afc0 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x55f08f41b040 <line:202:3>
|   | `-TextComment 0x55f08f41b010 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41b060 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x55f08f41b0c0 <col:8, col:18>
|       `-TextComment 0x55f08f41b090 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x55f08f349db8 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x55f08f349d30 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x55f08f41b2b0 <line:207:3, line:209:20>
|   |-ParagraphComment 0x55f08f41b1a0 <line:207:3, col:39>
|   | `-TextComment 0x55f08f41b170 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x55f08f41b1f0 <line:209:3>
|   | `-TextComment 0x55f08f41b1c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41b210 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x55f08f41b270 <col:8, col:20>
|       `-TextComment 0x55f08f41b240 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x55f08f349f28 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x55f08f349ea0 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x55f08f41b550 <line:214:3, line:218:39>
|   |-ParagraphComment 0x55f08f41b350 <line:214:3, col:68>
|   | `-TextComment 0x55f08f41b320 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x55f08f41b3a0 <line:216:3>
|   | `-TextComment 0x55f08f41b370 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f41b3c0 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x55f08f41b470 <line:216:14, line:217:3>
|   |   |-TextComment 0x55f08f41b420 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x55f08f41b440 <line:217:3> Text=" "
|   `-BlockCommandComment 0x55f08f41b490 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x55f08f41b510 <line:217:11, line:218:39>
|       |-TextComment 0x55f08f41b4c0 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x55f08f41b4e0 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x55f08f34a098 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x55f08f34a010 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x55f08f41b710 <line:223:3, line:225:21>
|   |-ParagraphComment 0x55f08f41b5f0 <line:223:3, col:39>
|   | `-TextComment 0x55f08f41b5c0 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x55f08f41b640 <line:225:3>
|   | `-TextComment 0x55f08f41b610 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41b670 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x55f08f41b6d0 <col:8, col:21>
|       `-TextComment 0x55f08f41b6a0 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x55f08f34a208 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x55f08f34a180 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x55f08f41b8c0 <line:230:3, line:232:20>
|   |-ParagraphComment 0x55f08f41b7b0 <line:230:3, col:38>
|   | `-TextComment 0x55f08f41b780 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x55f08f41b800 <line:232:3>
|   | `-TextComment 0x55f08f41b7d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41b820 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x55f08f41b880 <col:8, col:20>
|       `-TextComment 0x55f08f41b850 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x55f08f34a3b8 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x55f08f34a2f0 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x55f08f41ba70 <line:237:3, line:239:24>
|   |-ParagraphComment 0x55f08f41b960 <line:237:3, col:39>
|   | `-TextComment 0x55f08f41b930 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x55f08f41b9b0 <line:239:3>
|   | `-TextComment 0x55f08f41b980 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41b9d0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x55f08f41ba30 <col:8, col:24>
|       `-TextComment 0x55f08f41ba00 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x55f08f34a908 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x55f08f34a4a0 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x55f08f34a518 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x55f08f34a6b0 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x55f08f34a728 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x55f08f34a798 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x55f08f41c090 <line:244:3, line:252:48>
|   |-ParagraphComment 0x55f08f41bb10 <line:244:3, col:53>
|   | `-TextComment 0x55f08f41bae0 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x55f08f41bb60 <line:246:3>
|   | `-TextComment 0x55f08f41bb30 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f41bb80 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f41bc30 <line:246:14, line:247:3>
|   |   |-TextComment 0x55f08f41bbe0 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x55f08f41bc00 <line:247:3> Text=" "
|   |-ParamCommandComment 0x55f08f41bc50 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x55f08f41bd00 <line:247:19, line:248:3>
|   |   |-TextComment 0x55f08f41bcb0 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x55f08f41bcd0 <line:248:3> Text=" "
|   |-ParamCommandComment 0x55f08f41bd20 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x55f08f41bdd0 <line:248:18, line:249:3>
|   |   |-TextComment 0x55f08f41bd80 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x55f08f41bda0 <line:249:3> Text=" "
|   |-ParamCommandComment 0x55f08f41bdf0 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x55f08f41bea0 <line:249:20, line:250:3>
|   |   |-TextComment 0x55f08f41be50 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x55f08f41be70 <line:250:3> Text=" "
|   |-ParamCommandComment 0x55f08f41bec0 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x55f08f41bf50 <col:16, col:52>
|   |   `-TextComment 0x55f08f41bf20 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x55f08f41bfa0 <line:252:3>
|   | `-TextComment 0x55f08f41bf70 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41bfc0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x55f08f41c020 <col:11, col:48>
|       `-TextComment 0x55f08f41bff0 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x55f08f34ad68 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x55f08f34ae18 <line:28:1, line:34:1>
|-FunctionDecl 0x55f08f34b270 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x55f08f34ae38 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x55f08f34aea8 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55f08f34af18 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55f08f34af88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x55f08f34aff8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x55f08f34b068 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x55f08f34b0d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x55f08f34fa08 <line:58:1, line:105:1>
| | |-DeclStmt 0x55f08f34b6d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x55f08f34b3a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x55f08f34b6b8 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x55f08f34b690 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x55f08f34b520 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x55f08f34b508 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x55f08f34b4f0 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x55f08f34b400 <col:19> 'bool' lvalue ParmVar 0x55f08f34af88 'const_hz' 'bool'
| | |       | `-ParenExpr 0x55f08f34b4d0 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x55f08f34b4a8 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x55f08f34b478 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x55f08f34b428 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x55f08f34b490 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x55f08f34b450 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x55f08f34b670 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x55f08f34b648 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x55f08f34b5f0 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x55f08f34b5c8 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x55f08f34b598 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x55f08f34b548 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x55f08f34b5b0 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x55f08f34b570 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x55f08f34b630 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x55f08f34b610 <col:46> 'int' 0
| | |-DeclStmt 0x55f08f34e200 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x55f08f34b6f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x55f08f34ba10 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x55f08f34b9e8 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x55f08f34b878 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x55f08f34b860 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x55f08f34b848 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x55f08f34b758 <col:19> 'bool' lvalue ParmVar 0x55f08f34af88 'const_hz' 'bool'
| | |       | `-ParenExpr 0x55f08f34b828 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x55f08f34b800 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x55f08f34b7d0 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x55f08f34b780 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x55f08f34b7e8 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x55f08f34b7a8 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x55f08f34b9c8 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x55f08f34b9a0 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x55f08f34b948 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x55f08f34b920 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x55f08f34b8f0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x55f08f34b8a0 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x55f08f34b908 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x55f08f34b8c8 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x55f08f34b988 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x55f08f34b968 <col:46> 'int' 0
| | |-IfStmt 0x55f08f34e468 <line:64:2, line:66:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x55f08f34e298 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x55f08f34e268 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x55f08f34e218 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x55f08f34e280 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55f08f34e240 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| | | |-CompoundStmt 0x55f08f34e450 <col:24, line:66:2>
| | | | `-ReturnStmt 0x55f08f34e438 <line:65:3, col:34>
| | | |   `-ConditionalOperator 0x55f08f34e408 <col:10, col:34> 'unsigned long long'
| | | |     |-ImplicitCastExpr 0x55f08f34e3c0 <col:10> 'int' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0x55f08f34e3a8 <col:10> 'bool' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0x55f08f34e2c0 <col:10> 'bool' lvalue ParmVar 0x55f08f34aff8 'result32' 'bool'
| | | |     |-ImplicitCastExpr 0x55f08f34e3f0 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | | |     | `-ParenExpr 0x55f08f34e360 <col:21, col:30> 'u32_t':'unsigned int'
| | | |     |   `-CStyleCastExpr 0x55f08f34e338 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | | |     |     `-ImplicitCastExpr 0x55f08f34e320 <col:29> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |     |       `-DeclRefExpr 0x55f08f34e2e8 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ae38 't' 'u64_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x55f08f34e3d8 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |       `-DeclRefExpr 0x55f08f34e380 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ae38 't' 'u64_t':'unsigned long long'
| | | `-<<<NULL>>>
| | |-DeclStmt 0x55f08f34e548 <line:68:2, col:15>
| | | `-VarDecl 0x55f08f34e4b0 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x55f08f34e530 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x55f08f34e510 <col:14> 'int' 0
| | |-IfStmt 0x55f08f34eb28 <line:70:2, line:78:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55f08f34e5a0 <line:70:6, col:7> 'int' prefix '!'
| | | | `-ImplicitCastExpr 0x55f08f34e588 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55f08f34e560 <col:7> 'bool' lvalue Var 0x55f08f34b3a0 'mul_ratio' 'bool'
| | | |-CompoundStmt 0x55f08f34eb08 <col:18, line:78:2>
| | | | |-DeclStmt 0x55f08f34e7c0 <line:71:3, col:59>
| | | | | `-VarDecl 0x55f08f34e5d0 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | | | |   `-ConditionalOperator 0x55f08f34e790 <col:20, col:52> 'unsigned int'
| | | | |     |-ImplicitCastExpr 0x55f08f34e760 <col:20> 'int' <IntegralCast>
| | | | |     | `-ImplicitCastExpr 0x55f08f34e748 <col:20> 'bool' <LValueToRValue>
| | | | |     |   `-DeclRefExpr 0x55f08f34e630 <col:20> 'bool' lvalue Var 0x55f08f34b6f8 'div_ratio' 'bool'
| | | | |     |-ParenExpr 0x55f08f34e700 <col:32, col:48> 'unsigned int'
| | | | |     | `-BinaryOperator 0x55f08f34e6d8 <col:33, col:43> 'unsigned int' '/'
| | | | |     |   |-ImplicitCastExpr 0x55f08f34e6a8 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |   | `-DeclRefExpr 0x55f08f34e658 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| | | | |     |   `-ImplicitCastExpr 0x55f08f34e6c0 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |     `-DeclRefExpr 0x55f08f34e680 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| | | | |     `-ImplicitCastExpr 0x55f08f34e778 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x55f08f34e720 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| | | | `-IfStmt 0x55f08f34ead0 <line:73:3, line:77:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-ImplicitCastExpr 0x55f08f34e800 <line:73:7> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x55f08f34e7d8 <col:7> 'bool' lvalue ParmVar 0x55f08f34b068 'round_up' 'bool'
| | | |   |-CompoundStmt 0x55f08f34e920 <col:17, line:75:3>
| | | |   | `-BinaryOperator 0x55f08f34e8f8 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | | |   |   |-DeclRefExpr 0x55f08f34e818 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x55f08f34e4b0 'off' 'u64_t':'unsigned long long'
| | | |   |   `-ImplicitCastExpr 0x55f08f34e8e0 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |   |     `-BinaryOperator 0x55f08f34e8b8 <col:10, col:21> 'unsigned int' '-'
| | | |   |       |-ImplicitCastExpr 0x55f08f34e888 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   |       | `-DeclRefExpr 0x55f08f34e840 <col:10> 'u32_t':'unsigned int' lvalue Var 0x55f08f34e5d0 'rdivisor' 'u32_t':'unsigned int'
| | | |   |       `-ImplicitCastExpr 0x55f08f34e8a0 <col:21> 'unsigned int' <IntegralCast>
| | | |   |         `-IntegerLiteral 0x55f08f34e868 <col:21> 'int' 1
| | | |   `-IfStmt 0x55f08f34ea98 <line:75:10, line:77:3>
| | | |     |-<<<NULL>>>
| | | |     |-<<<NULL>>>
| | | |     |-ImplicitCastExpr 0x55f08f34e960 <line:75:14> 'bool' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x55f08f34e938 <col:14> 'bool' lvalue ParmVar 0x55f08f34b0d8 'round_off' 'bool'
| | | |     |-CompoundStmt 0x55f08f34ea80 <col:25, line:77:3>
| | | |     | `-BinaryOperator 0x55f08f34ea58 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | | |     |   |-DeclRefExpr 0x55f08f34e978 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x55f08f34e4b0 'off' 'u64_t':'unsigned long long'
| | | |     |   `-ImplicitCastExpr 0x55f08f34ea40 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |     |     `-BinaryOperator 0x55f08f34ea18 <col:10, col:21> 'unsigned int' '/'
| | | |     |       |-ImplicitCastExpr 0x55f08f34e9e8 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |     |       | `-DeclRefExpr 0x55f08f34e9a0 <col:10> 'u32_t':'unsigned int' lvalue Var 0x55f08f34e5d0 'rdivisor' 'u32_t':'unsigned int'
| | | |     |       `-ImplicitCastExpr 0x55f08f34ea00 <col:21> 'unsigned int' <IntegralCast>
| | | |     |         `-IntegerLiteral 0x55f08f34e9c8 <col:21> 'int' 2
| | | |     `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-IfStmt 0x55f08f34f9a0 <line:85:2, line:104:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x55f08f34eb88 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x55f08f34eb60 <col:6> 'bool' lvalue Var 0x55f08f34b6f8 'div_ratio' 'bool'
| |   |-CompoundStmt 0x55f08f34f000 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x55f08f34ec08 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x55f08f34eba0 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ae38 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x55f08f34ebf0 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x55f08f34ebc8 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x55f08f34e4b0 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x55f08f34efc8 <line:87:3, line:91:3>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x55f08f34ec68 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x55f08f34ec40 <col:7> 'bool' lvalue ParmVar 0x55f08f34aff8 'result32' 'bool'
| |   |   |-CompoundStmt 0x55f08f34ee38 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x55f08f34ee20 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x55f08f34ee08 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x55f08f34ede0 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x55f08f34ecf8 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x55f08f34ecd0 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x55f08f34ecb8 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |   |       |     `-DeclRefExpr 0x55f08f34ec80 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ae38 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x55f08f34edc0 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x55f08f34ed98 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x55f08f34ed68 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x55f08f34ed18 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x55f08f34ed80 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x55f08f34ed40 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x55f08f34efb0 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x55f08f34ef98 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x55f08f34ef70 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x55f08f34ef40 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x55f08f34ee50 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ae38 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x55f08f34ef58 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x55f08f34ef20 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x55f08f34eef8 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x55f08f34eec8 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x55f08f34ee78 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x55f08f34eee0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x55f08f34eea0 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x55f08f34f968 <line:92:9, line:104:2>
| |     |-<<<NULL>>>
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x55f08f34f048 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f34f020 <col:13> 'bool' lvalue Var 0x55f08f34b3a0 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x55f08f34f430 <col:24, line:98:2>
| |     | `-IfStmt 0x55f08f34f3f8 <line:93:3, line:97:3>
| |     |   |-<<<NULL>>>
| |     |   |-<<<NULL>>>
| |     |   |-ImplicitCastExpr 0x55f08f34f088 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x55f08f34f060 <col:7> 'bool' lvalue ParmVar 0x55f08f34aff8 'result32' 'bool'
| |     |   |-CompoundStmt 0x55f08f34f268 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x55f08f34f250 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x55f08f34f238 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x55f08f34f210 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x55f08f34f118 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x55f08f34f0f0 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x55f08f34f0d8 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |   |       |     `-DeclRefExpr 0x55f08f34f0a0 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ae38 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x55f08f34f1e0 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x55f08f34f1b8 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x55f08f34f188 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x55f08f34f138 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x55f08f34f1a0 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x55f08f34f160 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x55f08f34f3e0 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x55f08f34f3c8 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x55f08f34f3a0 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x55f08f34f370 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x55f08f34f280 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ae38 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x55f08f34f388 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x55f08f34f350 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x55f08f34f328 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x55f08f34f2f8 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x55f08f34f2a8 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x55f08f34f310 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x55f08f34f2d0 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x55f08f34f950 <line:98:9, line:104:2>
| |       `-IfStmt 0x55f08f34f918 <line:99:3, line:103:3>
| |         |-<<<NULL>>>
| |         |-<<<NULL>>>
| |         |-ImplicitCastExpr 0x55f08f34f470 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x55f08f34f448 <col:7> 'bool' lvalue ParmVar 0x55f08f34aff8 'result32' 'bool'
| |         |-CompoundStmt 0x55f08f34f708 <col:17, line:101:3>
| |         | `-ReturnStmt 0x55f08f34f6f0 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x55f08f34f6d8 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x55f08f34f6b0 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x55f08f34f690 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x55f08f34f628 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x55f08f34f5b0 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x55f08f34f588 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x55f08f34f520 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x55f08f34f4d8 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x55f08f34f488 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ae38 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x55f08f34f508 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x55f08f34f4f0 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x55f08f34f4b0 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x55f08f34f570 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x55f08f34f548 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x55f08f34e4b0 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x55f08f34f610 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x55f08f34f5f8 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x55f08f34f5d0 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x55f08f34f900 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x55f08f34f8e8 <line:102:4, col:31>
| |             `-BinaryOperator 0x55f08f34f8c0 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x55f08f34f848 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x55f08f34f820 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x55f08f34f7b8 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x55f08f34f770 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x55f08f34f720 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ae38 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x55f08f34f7a0 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x55f08f34f788 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x55f08f34f748 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34af18 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x55f08f34f808 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x55f08f34f7e0 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x55f08f34e4b0 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x55f08f34f8a8 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x55f08f34f890 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x55f08f34f868 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34aea8 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x55f08f34b348 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55f08f34fb60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f34fa58 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f34ffb8 <line:191:1, line:194:1>
| | `-ReturnStmt 0x55f08f34ff78 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x55f08f34ff60 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f34fe40 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f34fe28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f34fc08 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f34feb8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f34fea0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f34fc30 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f34fa58 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f34fed0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f34fc58 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55f08f34fee8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f34fce0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f34fcc8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f34fc78 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f34ff00 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f34fd48 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f34fd28 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f34fd08 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f34ff18 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f34fd68 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f34ff30 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f34fd88 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f34ff48 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f34fda8 <col:16> 'int' 0
| `-FullComment 0x55f08f41c370 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x55f08f41c130 <line:182:4>
|   | `-TextComment 0x55f08f41c100 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41c150 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41c1b0 <col:11, col:50>
|   |   `-TextComment 0x55f08f41c180 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41c250 <line:184:3, line:186:44>
|   | |-TextComment 0x55f08f41c1d0 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55f08f41c1f0 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41c210 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f41c2a0 <line:188:3>
|   | `-TextComment 0x55f08f41c270 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41c2c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41c320 <col:11, col:35>
|       `-TextComment 0x55f08f41c2f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3500e0 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f34ffe0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f351a28 <line:205:1, line:208:1>
| | `-ReturnStmt 0x55f08f3519e8 <line:207:2, col:66>
| |   `-CallExpr 0x55f08f3518e0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f3518c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f350188 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f351940 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f3501b0 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f34ffe0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f351958 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f3501d8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55f08f351970 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f3517e0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f3517c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f3517a0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f351988 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f351848 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f351828 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f351808 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f3519a0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f351868 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f3519b8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f351888 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f3519d0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f3518a8 <col:16> 'int' 0
| `-FullComment 0x55f08f41c650 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x55f08f41c410 <line:196:4>
|   | `-TextComment 0x55f08f41c3e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41c430 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41c490 <col:11, col:50>
|   |   `-TextComment 0x55f08f41c460 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41c530 <line:198:3, line:200:44>
|   | |-TextComment 0x55f08f41c4b0 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55f08f41c4d0 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41c4f0 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f41c580 <line:202:3>
|   | `-TextComment 0x55f08f41c550 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41c5a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41c600 <col:11, col:35>
|       `-TextComment 0x55f08f41c5d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f351ad8 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f351a50 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f351ea8 <line:219:1, line:222:1>
| | `-ReturnStmt 0x55f08f351e68 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f351e50 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f351d30 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f351d18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f351b80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f351da8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f351d90 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f351ba8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f351a50 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f351dc0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f351bd0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55f08f351dd8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f351c30 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f351c18 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f351bf0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f351df0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f351c98 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f351c78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f351c58 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f351e08 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f351cb8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f351e20 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f351cd8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f351e38 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f351cf8 <col:16> 'int' 1
| `-FullComment 0x55f08f41c930 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x55f08f41c6f0 <line:210:4>
|   | `-TextComment 0x55f08f41c6c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41c710 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41c770 <col:11, col:50>
|   |   `-TextComment 0x55f08f41c740 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41c810 <line:212:3, line:214:37>
|   | |-TextComment 0x55f08f41c790 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55f08f41c7b0 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41c7d0 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f41c860 <line:216:3>
|   | `-TextComment 0x55f08f41c830 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41c880 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41c8e0 <col:11, col:35>
|       `-TextComment 0x55f08f41c8b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f351f58 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f351ed0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f3522f8 <line:233:1, line:236:1>
| | `-ReturnStmt 0x55f08f3522b8 <line:235:2, col:65>
| |   `-CallExpr 0x55f08f3521b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f352198 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f352000 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f352210 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f352028 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f351ed0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f352228 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f352050 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55f08f352240 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f3520b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f352098 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f352070 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f352258 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f352118 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f3520f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f3520d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f352270 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f352138 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f352288 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f352158 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f3522a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f352178 <col:16> 'int' 1
| `-FullComment 0x55f08f41cc10 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x55f08f41c9d0 <line:224:4>
|   | `-TextComment 0x55f08f41c9a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41c9f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41ca50 <col:11, col:50>
|   |   `-TextComment 0x55f08f41ca20 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41caf0 <line:226:3, line:228:37>
|   | |-TextComment 0x55f08f41ca70 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55f08f41ca90 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41cab0 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f41cb40 <line:230:3>
|   | `-TextComment 0x55f08f41cb10 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41cb60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41cbc0 <col:11, col:35>
|       `-TextComment 0x55f08f41cb90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3523a8 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f352320 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f352778 <line:247:1, line:250:1>
| | `-ReturnStmt 0x55f08f352738 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f352720 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f352600 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f3525e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f352450 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f352678 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f352660 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f352478 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f352320 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f352690 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f3524a0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55f08f3526a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f352500 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f3524e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f3524c0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f3526c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f352568 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f352548 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f352528 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f3526d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f352588 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f3526f0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3525a8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55f08f352708 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f3525c8 <col:16> 'int' 0
| `-FullComment 0x55f08f41cef0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x55f08f41ccb0 <line:238:4>
|   | `-TextComment 0x55f08f41cc80 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41ccd0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41cd30 <col:11, col:50>
|   |   `-TextComment 0x55f08f41cd00 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41cdd0 <line:240:3, line:242:45>
|   | |-TextComment 0x55f08f41cd50 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55f08f41cd70 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41cd90 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f41ce20 <line:244:3>
|   | `-TextComment 0x55f08f41cdf0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41ce40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41cea0 <col:11, col:35>
|       `-TextComment 0x55f08f41ce70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f352838 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3527b0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f352bd8 <line:261:1, line:264:1>
| | `-ReturnStmt 0x55f08f352b98 <line:263:2, col:65>
| |   `-CallExpr 0x55f08f352a90 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f352a78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f3528e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f352af0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f352908 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f3527b0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f352b08 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f352930 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55f08f352b20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f352990 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f352978 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f352950 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f352b38 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f3529f8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f3529d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f3529b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f352b50 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f352a18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f352b68 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f352a38 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55f08f352b80 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f352a58 <col:16> 'int' 0
| `-FullComment 0x55f08f41d1d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x55f08f41cf90 <line:252:4>
|   | `-TextComment 0x55f08f41cf60 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41cfb0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41d010 <col:11, col:50>
|   |   `-TextComment 0x55f08f41cfe0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41d0b0 <line:254:3, line:256:45>
|   | |-TextComment 0x55f08f41d030 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x55f08f41d050 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41d070 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f41d100 <line:258:3>
|   | `-TextComment 0x55f08f41d0d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41d120 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41d180 <col:11, col:35>
|       `-TextComment 0x55f08f41d150 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f352c88 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f352c00 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f352ed8 <line:275:1, line:278:1>
| `-FullComment 0x55f08f41d4b0 <line:266:4, line:272:35>
|   |-ParagraphComment 0x55f08f41d270 <line:266:4>
|   | `-TextComment 0x55f08f41d240 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41d290 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41d2f0 <col:11, col:40>
|   |   `-TextComment 0x55f08f41d2c0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55f08f41d390 <line:268:3, line:270:44>
|   | |-TextComment 0x55f08f41d310 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55f08f41d330 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41d350 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f41d3e0 <line:272:3>
|   | `-TextComment 0x55f08f41d3b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41d400 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41d460 <col:11, col:35>
|       `-TextComment 0x55f08f41d430 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f352f80 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f352ef8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f3531c8 <line:289:1, line:292:1>
| `-FullComment 0x55f08f41d7a0 <line:280:4, line:286:35>
|   |-ParagraphComment 0x55f08f41d550 <line:280:4>
|   | `-TextComment 0x55f08f41d520 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41d570 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41d5d0 <col:11, col:40>
|   |   `-TextComment 0x55f08f41d5a0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55f08f41d680 <line:282:3, line:284:44>
|   | |-TextComment 0x55f08f41d5f0 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55f08f41d610 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41d630 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f41d6d0 <line:286:3>
|   | `-TextComment 0x55f08f41d6a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41d6f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41d750 <col:11, col:35>
|       `-TextComment 0x55f08f41d720 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f353270 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f3531e8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f3534b8 <line:303:1, line:306:1>
| `-FullComment 0x55f08f41da80 <line:294:4, line:300:35>
|   |-ParagraphComment 0x55f08f41d840 <line:294:4>
|   | `-TextComment 0x55f08f41d810 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41d860 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41d8c0 <col:11, col:40>
|   |   `-TextComment 0x55f08f41d890 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55f08f41d960 <line:296:3, line:298:37>
|   | |-TextComment 0x55f08f41d8e0 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55f08f41d900 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41d920 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f41d9b0 <line:300:3>
|   | `-TextComment 0x55f08f41d980 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41d9d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41da30 <col:11, col:35>
|       `-TextComment 0x55f08f41da00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f353560 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3534d8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f353f20 <line:317:1, line:320:1>
| `-FullComment 0x55f08f41dd60 <line:308:4, line:314:35>
|   |-ParagraphComment 0x55f08f41db20 <line:308:4>
|   | `-TextComment 0x55f08f41daf0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41db40 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41dba0 <col:11, col:40>
|   |   `-TextComment 0x55f08f41db70 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55f08f41dc40 <line:310:3, line:312:37>
|   | |-TextComment 0x55f08f41dbc0 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55f08f41dbe0 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41dc00 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f41dc90 <line:314:3>
|   | `-TextComment 0x55f08f41dc60 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41dcb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41dd10 <col:11, col:35>
|       `-TextComment 0x55f08f41dce0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f353fc8 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f353f40 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f354218 <line:331:1, line:334:1>
| `-FullComment 0x55f08f41e040 <line:322:4, line:328:35>
|   |-ParagraphComment 0x55f08f41de00 <line:322:4>
|   | `-TextComment 0x55f08f41ddd0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41de20 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41de80 <col:11, col:40>
|   |   `-TextComment 0x55f08f41de50 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55f08f41df20 <line:324:3, line:326:45>
|   | |-TextComment 0x55f08f41dea0 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55f08f41dec0 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41dee0 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f41df70 <line:328:3>
|   | `-TextComment 0x55f08f41df40 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41df90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41dff0 <col:11, col:35>
|       `-TextComment 0x55f08f41dfc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3542c0 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f354238 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f354508 <line:345:1, line:348:1>
| `-FullComment 0x55f08f41e320 <line:336:4, line:342:35>
|   |-ParagraphComment 0x55f08f41e0e0 <line:336:4>
|   | `-TextComment 0x55f08f41e0b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41e100 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41e160 <col:11, col:40>
|   |   `-TextComment 0x55f08f41e130 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x55f08f41e200 <line:338:3, line:340:45>
|   | |-TextComment 0x55f08f41e180 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x55f08f41e1a0 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41e1c0 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f41e250 <line:342:3>
|   | `-TextComment 0x55f08f41e220 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41e270 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41e2d0 <col:11, col:35>
|       `-TextComment 0x55f08f41e2a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3545b0 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f354528 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f354988 <line:359:1, line:362:1>
| | `-ReturnStmt 0x55f08f354940 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x55f08f354928 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f354808 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f3547f0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f354658 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f354880 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f354868 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f354680 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f354528 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f354898 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f3546a8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55f08f3548b0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f354708 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f3546f0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f3546c8 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f3548c8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f354770 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f354750 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f354730 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f3548e0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f354790 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f3548f8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3547b0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f354910 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f3547d0 <col:16> 'int' 0
| `-FullComment 0x55f08f41e600 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x55f08f41e3c0 <line:350:4>
|   | `-TextComment 0x55f08f41e390 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41e3e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41e440 <col:11, col:50>
|   |   `-TextComment 0x55f08f41e410 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41e4e0 <line:352:3, line:354:44>
|   | |-TextComment 0x55f08f41e460 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55f08f41e480 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41e4a0 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f41e530 <line:356:3>
|   | `-TextComment 0x55f08f41e500 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41e550 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41e5b0 <col:11, col:35>
|       `-TextComment 0x55f08f41e580 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f354a38 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3549b0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f354dd8 <line:373:1, line:376:1>
| | `-ReturnStmt 0x55f08f354d98 <line:375:2, col:66>
| |   `-CallExpr 0x55f08f354c90 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f354c78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f354ae0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f354cf0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f354b08 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f3549b0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f354d08 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f354b30 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55f08f354d20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f354b90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f354b78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f354b50 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f354d38 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f354bf8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f354bd8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f354bb8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f354d50 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f354c18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f354d68 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f354c38 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f354d80 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f354c58 <col:16> 'int' 0
| `-FullComment 0x55f08f41e8e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x55f08f41e6a0 <line:364:4>
|   | `-TextComment 0x55f08f41e670 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41e6c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41e720 <col:11, col:50>
|   |   `-TextComment 0x55f08f41e6f0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41e7c0 <line:366:3, line:368:44>
|   | |-TextComment 0x55f08f41e740 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55f08f41e760 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41e780 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f41e810 <line:370:3>
|   | `-TextComment 0x55f08f41e7e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41e830 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41e890 <col:11, col:35>
|       `-TextComment 0x55f08f41e860 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f354f30 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f354e00 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f355308 <line:387:1, line:390:1>
| | `-ReturnStmt 0x55f08f3552c0 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f3552a8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f355188 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f355170 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f354fd8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f355200 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f3551e8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f355000 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f354e00 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f355218 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f355028 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55f08f355230 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f355088 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f355070 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f355048 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f355248 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f3550f0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f3550d0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f3550b0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f355260 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f355110 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f355278 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f355130 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f355290 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f355150 <col:16> 'int' 1
| `-FullComment 0x55f08f41ebc0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x55f08f41e980 <line:378:4>
|   | `-TextComment 0x55f08f41e950 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41e9a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41ea00 <col:11, col:50>
|   |   `-TextComment 0x55f08f41e9d0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41eaa0 <line:380:3, line:382:37>
|   | |-TextComment 0x55f08f41ea20 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55f08f41ea40 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41ea60 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f41eaf0 <line:384:3>
|   | `-TextComment 0x55f08f41eac0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41eb10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41eb70 <col:11, col:35>
|       `-TextComment 0x55f08f41eb40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3553b8 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f355330 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f355758 <line:401:1, line:404:1>
| | `-ReturnStmt 0x55f08f355718 <line:403:2, col:65>
| |   `-CallExpr 0x55f08f355610 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f3555f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f355460 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f355670 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f355488 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f355330 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f355688 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f3554b0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55f08f3556a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f355510 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f3554f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f3554d0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f3556b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f355578 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f355558 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f355538 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f3556d0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f355598 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f3556e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f3555b8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f355700 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f3555d8 <col:16> 'int' 1
| `-FullComment 0x55f08f41eea0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x55f08f41ec60 <line:392:4>
|   | `-TextComment 0x55f08f41ec30 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41ec80 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41ece0 <col:11, col:50>
|   |   `-TextComment 0x55f08f41ecb0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41ed80 <line:394:3, line:396:37>
|   | |-TextComment 0x55f08f41ed00 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55f08f41ed20 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41ed40 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f41edd0 <line:398:3>
|   | `-TextComment 0x55f08f41eda0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41edf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41ee50 <col:11, col:35>
|       `-TextComment 0x55f08f41ee20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f355808 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f355780 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f355bd8 <line:415:1, line:418:1>
| | `-ReturnStmt 0x55f08f355b98 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f355b80 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f355a60 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f355a48 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f3558b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f355ad8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f355ac0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f3558d8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f355780 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f355af0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f355900 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55f08f355b08 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f355960 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f355948 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f355920 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f355b20 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f3559c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f3559a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f355988 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f355b38 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3559e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f355b50 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f355a08 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55f08f355b68 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f355a28 <col:16> 'int' 0
| `-FullComment 0x55f08f41f180 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x55f08f41ef40 <line:406:4>
|   | `-TextComment 0x55f08f41ef10 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41ef60 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41efc0 <col:11, col:50>
|   |   `-TextComment 0x55f08f41ef90 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41f060 <line:408:3, line:410:45>
|   | |-TextComment 0x55f08f41efe0 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55f08f41f000 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41f020 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f41f0b0 <line:412:3>
|   | `-TextComment 0x55f08f41f080 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41f0d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41f130 <col:11, col:35>
|       `-TextComment 0x55f08f41f100 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f355c88 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f355c00 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f356068 <line:429:1, line:432:1>
| | `-ReturnStmt 0x55f08f356028 <line:431:2, col:65>
| |   `-CallExpr 0x55f08f355ee0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f355ec8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f355d30 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f355f80 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f355d58 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f355c00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f355f98 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f355d80 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55f08f355fb0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f355de0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f355dc8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f355da0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f355fc8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f355e48 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f355e28 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f355e08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f355fe0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f355e68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f355ff8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f355e88 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55f08f356010 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f355ea8 <col:16> 'int' 0
| `-FullComment 0x55f08f41f460 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x55f08f41f220 <line:420:4>
|   | `-TextComment 0x55f08f41f1f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41f240 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f41f2a0 <col:11, col:50>
|   |   `-TextComment 0x55f08f41f270 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f41f340 <line:422:3, line:424:45>
|   | |-TextComment 0x55f08f41f2c0 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x55f08f41f2e0 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41f300 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f41f390 <line:426:3>
|   | `-TextComment 0x55f08f41f360 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41f3b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41f410 <col:11, col:35>
|       `-TextComment 0x55f08f41f3e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f356118 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f356090 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f356368 <line:443:1, line:446:1>
| `-FullComment 0x55f08f41f760 <line:434:4, line:440:35>
|   |-ParagraphComment 0x55f08f41f500 <line:434:4>
|   | `-TextComment 0x55f08f41f4d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41f520 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41f580 <col:11, col:40>
|   |   `-TextComment 0x55f08f41f550 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55f08f41f620 <line:436:3, line:438:44>
|   | |-TextComment 0x55f08f41f5a0 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55f08f41f5c0 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41f5e0 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f41f690 <line:440:3>
|   | `-TextComment 0x55f08f41f640 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41f6b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41f710 <col:11, col:35>
|       `-TextComment 0x55f08f41f6e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f356410 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f356388 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f356658 <line:457:1, line:460:1>
| `-FullComment 0x55f08f41fa40 <line:448:4, line:454:35>
|   |-ParagraphComment 0x55f08f41f800 <line:448:4>
|   | `-TextComment 0x55f08f41f7d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41f820 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41f880 <col:11, col:40>
|   |   `-TextComment 0x55f08f41f850 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55f08f41f920 <line:450:3, line:452:44>
|   | |-TextComment 0x55f08f41f8a0 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55f08f41f8c0 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41f8e0 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f41f970 <line:454:3>
|   | `-TextComment 0x55f08f41f940 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41f990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41f9f0 <col:11, col:35>
|       `-TextComment 0x55f08f41f9c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f356700 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f356678 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f356948 <line:471:1, line:474:1>
| `-FullComment 0x55f08f41fd20 <line:462:4, line:468:35>
|   |-ParagraphComment 0x55f08f41fae0 <line:462:4>
|   | `-TextComment 0x55f08f41fab0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41fb00 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41fb60 <col:11, col:40>
|   |   `-TextComment 0x55f08f41fb30 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55f08f41fc00 <line:464:3, line:466:37>
|   | |-TextComment 0x55f08f41fb80 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55f08f41fba0 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f41fbc0 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f41fc50 <line:468:3>
|   | `-TextComment 0x55f08f41fc20 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41fc70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41fcd0 <col:11, col:35>
|       `-TextComment 0x55f08f41fca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3569f0 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f356968 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f356c38 <line:485:1, line:488:1>
| `-FullComment 0x55f08f420000 <line:476:4, line:482:35>
|   |-ParagraphComment 0x55f08f41fdc0 <line:476:4>
|   | `-TextComment 0x55f08f41fd90 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f41fde0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f41fe40 <col:11, col:40>
|   |   `-TextComment 0x55f08f41fe10 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55f08f41fee0 <line:478:3, line:480:37>
|   | |-TextComment 0x55f08f41fe60 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55f08f41fe80 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f41fea0 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f41ff30 <line:482:3>
|   | `-TextComment 0x55f08f41ff00 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f41ff50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f41ffb0 <col:11, col:35>
|       `-TextComment 0x55f08f41ff80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f356ce0 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f356c58 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f356f28 <line:499:1, line:502:1>
| `-FullComment 0x55f08f4202e0 <line:490:4, line:496:35>
|   |-ParagraphComment 0x55f08f4200a0 <line:490:4>
|   | `-TextComment 0x55f08f420070 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4200c0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f420120 <col:11, col:40>
|   |   `-TextComment 0x55f08f4200f0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55f08f4201c0 <line:492:3, line:494:45>
|   | |-TextComment 0x55f08f420140 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55f08f420160 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f420180 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f420210 <line:496:3>
|   | `-TextComment 0x55f08f4201e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f420230 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f420290 <col:11, col:35>
|       `-TextComment 0x55f08f420260 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f356fe8 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f356f60 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f357238 <line:513:1, line:516:1>
| `-FullComment 0x55f08f4205c0 <line:504:4, line:510:35>
|   |-ParagraphComment 0x55f08f420380 <line:504:4>
|   | `-TextComment 0x55f08f420350 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4203a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f420400 <col:11, col:40>
|   |   `-TextComment 0x55f08f4203d0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x55f08f4204a0 <line:506:3, line:508:45>
|   | |-TextComment 0x55f08f420420 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x55f08f420440 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f420460 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f4204f0 <line:510:3>
|   | `-TextComment 0x55f08f4204c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f420510 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f420570 <col:11, col:35>
|       `-TextComment 0x55f08f420540 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3572e0 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f357258 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f3576b8 <line:527:1, line:530:1>
| | `-ReturnStmt 0x55f08f357670 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x55f08f357658 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f357538 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f357520 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f357388 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f3575b0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f357598 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f3573b0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f357258 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f3575c8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f3573d8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55f08f3575e0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f357438 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f357420 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f3573f8 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f3575f8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f3574a0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f357480 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f357460 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f357610 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3574c0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f357628 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3574e0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f357640 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f357500 <col:16> 'int' 0
| `-FullComment 0x55f08f4208a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x55f08f420660 <line:518:4>
|   | `-TextComment 0x55f08f420630 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f420680 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f4206e0 <col:11, col:49>
|   |   `-TextComment 0x55f08f4206b0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f420780 <line:520:3, line:522:44>
|   | |-TextComment 0x55f08f420700 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55f08f420720 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f420740 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f4207d0 <line:524:3>
|   | `-TextComment 0x55f08f4207a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4207f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f420850 <col:11, col:35>
|       `-TextComment 0x55f08f420820 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f357768 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3576e0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f357b08 <line:541:1, line:544:1>
| | `-ReturnStmt 0x55f08f357ac8 <line:543:2, col:66>
| |   `-CallExpr 0x55f08f3579c0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f3579a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f357810 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f357a20 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f357838 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f3576e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f357a38 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f357860 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55f08f357a50 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f3578c0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f3578a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f357880 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f357a68 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f357928 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f357908 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f3578e8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f357a80 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f357948 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f357a98 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f357968 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f357ab0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f357988 <col:16> 'int' 0
| `-FullComment 0x55f08f420b80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x55f08f420940 <line:532:4>
|   | `-TextComment 0x55f08f420910 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f420960 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f4209c0 <col:11, col:49>
|   |   `-TextComment 0x55f08f420990 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f420a60 <line:534:3, line:536:44>
|   | |-TextComment 0x55f08f4209e0 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55f08f420a00 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f420a20 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f420ab0 <line:538:3>
|   | `-TextComment 0x55f08f420a80 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f420ad0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f420b30 <col:11, col:35>
|       `-TextComment 0x55f08f420b00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f357bb8 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f357b30 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f358fb8 <line:555:1, line:558:1>
| | `-ReturnStmt 0x55f08f358f70 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f357f30 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f357e10 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f357df8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f357c60 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f357e88 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f357e70 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f357c88 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f357b30 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f357ea0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f357cb0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55f08f357eb8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f357d10 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f357cf8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f357cd0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f357ed0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f357d78 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f357d58 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f357d38 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f357ee8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f357d98 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f357f00 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f357db8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f357f18 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f357dd8 <col:16> 'int' 1
| `-FullComment 0x55f08f420e60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x55f08f420c20 <line:546:4>
|   | `-TextComment 0x55f08f420bf0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f420c40 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f420ca0 <col:11, col:49>
|   |   `-TextComment 0x55f08f420c70 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f420d40 <line:548:3, line:550:37>
|   | |-TextComment 0x55f08f420cc0 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55f08f420ce0 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f420d00 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f420d90 <line:552:3>
|   | `-TextComment 0x55f08f420d60 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f420db0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f420e10 <col:11, col:35>
|       `-TextComment 0x55f08f420de0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f359068 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f358fe0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f359408 <line:569:1, line:572:1>
| | `-ReturnStmt 0x55f08f3593c8 <line:571:2, col:65>
| |   `-CallExpr 0x55f08f3592c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f3592a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f359110 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f359320 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f359138 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f358fe0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f359338 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f359160 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55f08f359350 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f3591c0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f3591a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f359180 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f359368 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f359228 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f359208 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f3591e8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f359380 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f359248 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f359398 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f359268 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f3593b0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f359288 <col:16> 'int' 1
| `-FullComment 0x55f08f421140 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x55f08f420f00 <line:560:4>
|   | `-TextComment 0x55f08f420ed0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f420f20 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f420f80 <col:11, col:49>
|   |   `-TextComment 0x55f08f420f50 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f421020 <line:562:3, line:564:37>
|   | |-TextComment 0x55f08f420fa0 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55f08f420fc0 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f420fe0 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f421070 <line:566:3>
|   | `-TextComment 0x55f08f421040 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f421090 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4210f0 <col:11, col:35>
|       `-TextComment 0x55f08f4210c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3594b8 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f359430 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f359888 <line:583:1, line:586:1>
| | `-ReturnStmt 0x55f08f359848 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f359830 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f359710 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f3596f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f359560 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f359788 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f359770 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f359588 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f359430 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f3597a0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f3595b0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55f08f3597b8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f359610 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f3595f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f3595d0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f3597d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f359678 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f359658 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f359638 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f3597e8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f359698 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f359800 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3596b8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55f08f359818 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f3596d8 <col:16> 'int' 0
| `-FullComment 0x55f08f421420 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x55f08f4211e0 <line:574:4>
|   | `-TextComment 0x55f08f4211b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f421200 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f421260 <col:11, col:49>
|   |   `-TextComment 0x55f08f421230 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f421300 <line:576:3, line:578:45>
|   | |-TextComment 0x55f08f421280 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55f08f4212a0 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f4212c0 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f421350 <line:580:3>
|   | `-TextComment 0x55f08f421320 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f421370 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4213d0 <col:11, col:35>
|       `-TextComment 0x55f08f4213a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f359938 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3598b0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f359cd8 <line:597:1, line:600:1>
| | `-ReturnStmt 0x55f08f359c98 <line:599:2, col:65>
| |   `-CallExpr 0x55f08f359b90 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f359b78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f3599e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f359bf0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f359a08 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f3598b0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f359c08 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f359a30 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55f08f359c20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f359a90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f359a78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f359a50 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f359c38 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f359af8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f359ad8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f359ab8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f359c50 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f359b18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f359c68 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f359b38 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55f08f359c80 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f359b58 <col:16> 'int' 0
| `-FullComment 0x55f08f421720 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x55f08f4214c0 <line:588:4>
|   | `-TextComment 0x55f08f421490 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4214e0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f421540 <col:11, col:49>
|   |   `-TextComment 0x55f08f421510 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x55f08f4215e0 <line:590:3, line:592:45>
|   | |-TextComment 0x55f08f421560 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x55f08f421580 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f4215a0 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f421630 <line:594:3>
|   | `-TextComment 0x55f08f421600 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f421650 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4216d0 <col:11, col:35>
|       `-TextComment 0x55f08f4216a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f359d88 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f359d00 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f30e9a8 <line:611:1, line:614:1>
| `-FullComment 0x55f08f421a00 <line:602:4, line:608:35>
|   |-ParagraphComment 0x55f08f4217c0 <line:602:4>
|   | `-TextComment 0x55f08f421790 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4217e0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f421840 <col:11, col:39>
|   |   `-TextComment 0x55f08f421810 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55f08f4218e0 <line:604:3, line:606:44>
|   | |-TextComment 0x55f08f421860 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55f08f421880 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f4218a0 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f421930 <line:608:3>
|   | `-TextComment 0x55f08f421900 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f421950 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4219b0 <col:11, col:35>
|       `-TextComment 0x55f08f421980 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f30ea50 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f30e9c8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f30ec98 <line:625:1, line:628:1>
| `-FullComment 0x55f08f421ce0 <line:616:4, line:622:35>
|   |-ParagraphComment 0x55f08f421aa0 <line:616:4>
|   | `-TextComment 0x55f08f421a70 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f421ac0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f421b20 <col:11, col:39>
|   |   `-TextComment 0x55f08f421af0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55f08f421bc0 <line:618:3, line:620:44>
|   | |-TextComment 0x55f08f421b40 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55f08f421b60 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f421b80 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f421c10 <line:622:3>
|   | `-TextComment 0x55f08f421be0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f421c30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f421c90 <col:11, col:35>
|       `-TextComment 0x55f08f421c60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f30ed40 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f30ecb8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f30ef88 <line:639:1, line:642:1>
| `-FullComment 0x55f08f421fc0 <line:630:4, line:636:35>
|   |-ParagraphComment 0x55f08f421d80 <line:630:4>
|   | `-TextComment 0x55f08f421d50 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f421da0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f421e00 <col:11, col:39>
|   |   `-TextComment 0x55f08f421dd0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55f08f421ea0 <line:632:3, line:634:37>
|   | |-TextComment 0x55f08f421e20 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55f08f421e40 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f421e60 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f421ef0 <line:636:3>
|   | `-TextComment 0x55f08f421ec0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f421f10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f421f70 <col:11, col:35>
|       `-TextComment 0x55f08f421f40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f30f030 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f30efa8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f30f278 <line:653:1, line:656:1>
| `-FullComment 0x55f08f4222a0 <line:644:4, line:650:35>
|   |-ParagraphComment 0x55f08f422060 <line:644:4>
|   | `-TextComment 0x55f08f422030 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f422080 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f4220e0 <col:11, col:39>
|   |   `-TextComment 0x55f08f4220b0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55f08f422180 <line:646:3, line:648:37>
|   | |-TextComment 0x55f08f422100 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55f08f422120 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f422140 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f4221d0 <line:650:3>
|   | `-TextComment 0x55f08f4221a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4221f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f422250 <col:11, col:35>
|       `-TextComment 0x55f08f422220 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f30f320 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f30f298 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f30f4e8 <line:667:1, line:670:1>
| `-FullComment 0x55f08f422580 <line:658:4, line:664:35>
|   |-ParagraphComment 0x55f08f422340 <line:658:4>
|   | `-TextComment 0x55f08f422310 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f422360 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f4223c0 <col:11, col:39>
|   |   `-TextComment 0x55f08f422390 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55f08f422460 <line:660:3, line:662:45>
|   | |-TextComment 0x55f08f4223e0 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55f08f422400 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f422420 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f4224b0 <line:664:3>
|   | `-TextComment 0x55f08f422480 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4224d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f422530 <col:11, col:35>
|       `-TextComment 0x55f08f422500 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f30f590 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f30f508 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f30f758 <line:681:1, line:684:1>
| `-FullComment 0x55f08f422860 <line:672:4, line:678:35>
|   |-ParagraphComment 0x55f08f422620 <line:672:4>
|   | `-TextComment 0x55f08f4225f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f422640 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f4226a0 <col:11, col:39>
|   |   `-TextComment 0x55f08f422670 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x55f08f422740 <line:674:3, line:676:45>
|   | |-TextComment 0x55f08f4226c0 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x55f08f4226e0 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f422700 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f422790 <line:678:3>
|   | `-TextComment 0x55f08f422760 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4227b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f422810 <col:11, col:35>
|       `-TextComment 0x55f08f4227e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f30f800 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f30f778 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f30fbe8 <line:695:1, line:698:1>
| | `-ReturnStmt 0x55f08f30fba8 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x55f08f30fb90 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f30fa70 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f30fa58 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f30f8a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f30fae8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f30fad0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f30f8d0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f30f778 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f30fb00 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f30f950 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f30f920 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f30f8f8 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f30fb18 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f30f978 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55f08f30fb30 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f30f9d8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f30f9b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f30f998 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f30fb48 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f30f9f8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f30fb60 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f30fa18 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f30fb78 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f30fa38 <col:16> 'int' 0
| `-FullComment 0x55f08f422b40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x55f08f422900 <line:686:4>
|   | `-TextComment 0x55f08f4228d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f422920 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f422980 <col:11, col:50>
|   |   `-TextComment 0x55f08f422950 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55f08f422a20 <line:688:3, line:690:44>
|   | |-TextComment 0x55f08f4229a0 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55f08f4229c0 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f4229e0 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f422a70 <line:692:3>
|   | `-TextComment 0x55f08f422a40 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f422a90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f422af0 <col:11, col:35>
|       `-TextComment 0x55f08f422ac0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f30fc98 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f30fc10 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f310038 <line:709:1, line:712:1>
| | `-ReturnStmt 0x55f08f30fff8 <line:711:2, col:66>
| |   `-CallExpr 0x55f08f30fef0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f30fed8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f30fd40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f30ff50 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f30fd68 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f30fc10 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f30ff68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f30fdd0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f30fdb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f30fd90 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f30ff80 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f30fdf8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55f08f30ff98 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f30fe58 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f30fe38 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f30fe18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f30ffb0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f30fe78 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f30ffc8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f30fe98 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f30ffe0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f30feb8 <col:16> 'int' 0
| `-FullComment 0x55f08f422e20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x55f08f422be0 <line:700:4>
|   | `-TextComment 0x55f08f422bb0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f422c00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f422c60 <col:11, col:50>
|   |   `-TextComment 0x55f08f422c30 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55f08f422d00 <line:702:3, line:704:44>
|   | |-TextComment 0x55f08f422c80 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55f08f422ca0 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f422cc0 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f422d50 <line:706:3>
|   | `-TextComment 0x55f08f422d20 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f422d70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f422dd0 <col:11, col:35>
|       `-TextComment 0x55f08f422da0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3100e8 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f310060 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f3104b8 <line:723:1, line:726:1>
| | `-ReturnStmt 0x55f08f310478 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f310460 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f310340 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f310328 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f310190 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f3103b8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f3103a0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f3101b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f310060 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f3103d0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f310220 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f310208 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f3101e0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f3103e8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f310248 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55f08f310400 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f3102a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f310288 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f310268 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f310418 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3102c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f310430 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3102e8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f310448 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f310308 <col:16> 'int' 1
| `-FullComment 0x55f08f423100 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x55f08f422ec0 <line:714:4>
|   | `-TextComment 0x55f08f422e90 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f422ee0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f422f40 <col:11, col:50>
|   |   `-TextComment 0x55f08f422f10 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55f08f422fe0 <line:716:3, line:718:37>
|   | |-TextComment 0x55f08f422f60 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55f08f422f80 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f422fa0 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f423030 <line:720:3>
|   | `-TextComment 0x55f08f423000 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f423050 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4230b0 <col:11, col:35>
|       `-TextComment 0x55f08f423080 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f310568 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3104e0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f310908 <line:737:1, line:740:1>
| | `-ReturnStmt 0x55f08f3108c8 <line:739:2, col:65>
| |   `-CallExpr 0x55f08f3107c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f3107a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f310610 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f310820 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f310638 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f3104e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f310838 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f3106a0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f310688 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f310660 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f310850 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f3106c8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55f08f310868 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f310728 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f310708 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f3106e8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f310880 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f310748 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f310898 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f310768 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f3108b0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f310788 <col:16> 'int' 1
| `-FullComment 0x55f08f4233e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x55f08f4231a0 <line:728:4>
|   | `-TextComment 0x55f08f423170 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4231c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f423220 <col:11, col:50>
|   |   `-TextComment 0x55f08f4231f0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55f08f4232c0 <line:730:3, line:732:37>
|   | |-TextComment 0x55f08f423240 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55f08f423260 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f423280 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f423310 <line:734:3>
|   | `-TextComment 0x55f08f4232e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f423330 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f423390 <col:11, col:35>
|       `-TextComment 0x55f08f423360 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3109e8 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f310960 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f310db8 <line:751:1, line:754:1>
| | `-ReturnStmt 0x55f08f310d78 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f310d60 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f310c40 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f310c28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f310a90 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f310cb8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f310ca0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f310ab8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f310960 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f310cd0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f310b20 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f310b08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f310ae0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f310ce8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f310b48 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x55f08f310d00 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f310ba8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f310b88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f310b68 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f310d18 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f310bc8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f310d30 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f310be8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55f08f310d48 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f310c08 <col:16> 'int' 0
| `-FullComment 0x55f08f4236e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x55f08f423480 <line:742:4>
|   | `-TextComment 0x55f08f423450 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4234a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f423500 <col:11, col:50>
|   |   `-TextComment 0x55f08f4234d0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55f08f4235a0 <line:744:3, line:746:45>
|   | |-TextComment 0x55f08f423520 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55f08f423540 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f423560 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f4235f0 <line:748:3>
|   | `-TextComment 0x55f08f4235c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f423610 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f423670 <col:11, col:35>
|       `-TextComment 0x55f08f423640 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f310e68 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f310de0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f311208 <line:765:1, line:768:1>
| | `-ReturnStmt 0x55f08f3111c8 <line:767:2, col:65>
| |   `-CallExpr 0x55f08f3110c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f3110a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f310f10 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f311120 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f310f38 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f310de0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f311138 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f310fa0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f310f88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f310f60 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f311150 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f310fc8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x55f08f311168 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f311028 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f311008 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f310fe8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f311180 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f311048 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f311198 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f311068 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55f08f3111b0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f311088 <col:16> 'int' 0
| `-FullComment 0x55f08f4239c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x55f08f423780 <line:756:4>
|   | `-TextComment 0x55f08f423750 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4237a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f423800 <col:11, col:50>
|   |   `-TextComment 0x55f08f4237d0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x55f08f4238a0 <line:758:3, line:760:45>
|   | |-TextComment 0x55f08f423820 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x55f08f423840 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f423860 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f4238f0 <line:762:3>
|   | `-TextComment 0x55f08f4238c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f423910 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f423970 <col:11, col:35>
|       `-TextComment 0x55f08f423940 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3112b8 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f311230 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f311688 <line:779:1, line:782:1>
| | `-ReturnStmt 0x55f08f311648 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x55f08f311630 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f311510 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f3114f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f311360 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f311588 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f311570 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f311388 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f311230 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f3115a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f3113f0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f3113d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f3113b0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f3115b8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f311418 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55f08f3115d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f311478 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f311458 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f311438 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f3115e8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f311498 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f311600 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3114b8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f311618 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f3114d8 <col:16> 'int' 0
| `-FullComment 0x55f08f423ca0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x55f08f423a60 <line:770:4>
|   | `-TextComment 0x55f08f423a30 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f423a80 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f423ae0 <col:11, col:50>
|   |   `-TextComment 0x55f08f423ab0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55f08f423b80 <line:772:3, line:774:44>
|   | |-TextComment 0x55f08f423b00 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55f08f423b20 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f423b40 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f423bd0 <line:776:3>
|   | `-TextComment 0x55f08f423ba0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f423bf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f423c50 <col:11, col:35>
|       `-TextComment 0x55f08f423c20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f311738 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3116b0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f311af8 <line:793:1, line:796:1>
| | `-ReturnStmt 0x55f08f311ab0 <line:795:2, col:66>
| |   `-CallExpr 0x55f08f3119a8 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f311990 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f3117e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f311a08 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f311808 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f3116b0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f311a20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f311870 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f311858 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f311830 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f311a38 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f311898 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55f08f311a50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f3118f8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f3118d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f3118b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f311a68 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f311918 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f311a80 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f311938 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f311a98 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f311970 <col:16> 'int' 0
| `-FullComment 0x55f08f423f80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x55f08f423d40 <line:784:4>
|   | `-TextComment 0x55f08f423d10 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f423d60 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f423dc0 <col:11, col:50>
|   |   `-TextComment 0x55f08f423d90 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55f08f423e60 <line:786:3, line:788:44>
|   | |-TextComment 0x55f08f423de0 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55f08f423e00 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f423e20 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f423eb0 <line:790:3>
|   | `-TextComment 0x55f08f423e80 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f423ed0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f423f30 <col:11, col:35>
|       `-TextComment 0x55f08f423f00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f311ba8 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f311b20 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f311f78 <line:807:1, line:810:1>
| | `-ReturnStmt 0x55f08f311f38 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f311f20 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f311e00 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f311de8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f311c50 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f311e78 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f311e60 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f311c78 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f311b20 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f311e90 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f311ce0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f311cc8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f311ca0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f311ea8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f311d08 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55f08f311ec0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f311d68 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f311d48 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f311d28 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f311ed8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f311d88 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f311ef0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f311da8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f311f08 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f311dc8 <col:16> 'int' 1
| `-FullComment 0x55f08f424260 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x55f08f424020 <line:798:4>
|   | `-TextComment 0x55f08f423ff0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f424040 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f4240a0 <col:11, col:50>
|   |   `-TextComment 0x55f08f424070 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55f08f424140 <line:800:3, line:802:37>
|   | |-TextComment 0x55f08f4240c0 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55f08f4240e0 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f424100 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f424190 <line:804:3>
|   | `-TextComment 0x55f08f424160 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4241b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f424210 <col:11, col:35>
|       `-TextComment 0x55f08f4241e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f312028 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f311fa0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f3123c8 <line:821:1, line:824:1>
| | `-ReturnStmt 0x55f08f312388 <line:823:2, col:65>
| |   `-CallExpr 0x55f08f312280 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f312268 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f3120d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f3122e0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f3120f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f311fa0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f3122f8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f312160 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f312148 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f312120 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f312310 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f312188 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55f08f312328 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f3121e8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f3121c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f3121a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f312340 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f312208 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f312358 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f312228 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f312370 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f312248 <col:16> 'int' 1
| `-FullComment 0x55f08f424540 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x55f08f424300 <line:812:4>
|   | `-TextComment 0x55f08f4242d0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f424320 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f424380 <col:11, col:50>
|   |   `-TextComment 0x55f08f424350 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55f08f424420 <line:814:3, line:816:37>
|   | |-TextComment 0x55f08f4243a0 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55f08f4243c0 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f4243e0 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f424470 <line:818:3>
|   | `-TextComment 0x55f08f424440 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f424490 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4244f0 <col:11, col:35>
|       `-TextComment 0x55f08f4244c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f312478 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f3123f0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f312848 <line:835:1, line:838:1>
| | `-ReturnStmt 0x55f08f312808 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f3127f0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f3126d0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f3126b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f312520 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f312748 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f312730 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f312548 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f3123f0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f312760 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f3125b0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f312598 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f312570 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f312778 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f3125d8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x55f08f312790 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f312638 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f312618 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f3125f8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f3127a8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f312658 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f3127c0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f312678 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55f08f3127d8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f312698 <col:16> 'int' 0
| `-FullComment 0x55f08f424820 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x55f08f4245e0 <line:826:4>
|   | `-TextComment 0x55f08f4245b0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f424600 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f424660 <col:11, col:50>
|   |   `-TextComment 0x55f08f424630 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55f08f424700 <line:828:3, line:830:45>
|   | |-TextComment 0x55f08f424680 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55f08f4246a0 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f4246c0 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f424750 <line:832:3>
|   | `-TextComment 0x55f08f424720 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f424770 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4247d0 <col:11, col:35>
|       `-TextComment 0x55f08f4247a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f312980 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f312870 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f312d28 <line:849:1, line:852:1>
| | `-ReturnStmt 0x55f08f312ce0 <line:851:2, col:65>
| |   `-CallExpr 0x55f08f312bd8 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f312bc0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f312a28 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f312c38 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f312a50 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f312870 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f312c50 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f312ab8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f312aa0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f312a78 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f312c68 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f312ae0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x55f08f312c80 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f312b40 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f312b20 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f312b00 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f312c98 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f312b60 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f312cb0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f312b80 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55f08f312cc8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f312ba0 <col:16> 'int' 0
| `-FullComment 0x55f08f424b00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x55f08f4248c0 <line:840:4>
|   | `-TextComment 0x55f08f424890 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4248e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f424940 <col:11, col:50>
|   |   `-TextComment 0x55f08f424910 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x55f08f4249e0 <line:842:3, line:844:45>
|   | |-TextComment 0x55f08f424960 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x55f08f424980 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f4249a0 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f424a30 <line:846:3>
|   | `-TextComment 0x55f08f424a00 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f424a50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f424ab0 <col:11, col:35>
|       `-TextComment 0x55f08f424a80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f312dd8 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f312d50 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f3131a8 <line:863:1, line:866:1>
| | `-ReturnStmt 0x55f08f313168 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x55f08f313150 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f313030 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f313018 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f312e80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f3130a8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f313090 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f312ea8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f312d50 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f3130c0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f312f10 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f312ef8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f312ed0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f3130d8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f312f38 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55f08f3130f0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f312f98 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f312f78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f312f58 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f313108 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f312fb8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f313120 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f312fd8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f313138 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f312ff8 <col:16> 'int' 0
| `-FullComment 0x55f08f424de0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x55f08f424ba0 <line:854:4>
|   | `-TextComment 0x55f08f424b70 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f424bc0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f424c20 <col:11, col:49>
|   |   `-TextComment 0x55f08f424bf0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55f08f424cc0 <line:856:3, line:858:44>
|   | |-TextComment 0x55f08f424c40 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55f08f424c60 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f424c80 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f424d10 <line:860:3>
|   | `-TextComment 0x55f08f424ce0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f424d30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f424d90 <col:11, col:35>
|       `-TextComment 0x55f08f424d60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f313258 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3131d0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f3135f8 <line:877:1, line:880:1>
| | `-ReturnStmt 0x55f08f3135b8 <line:879:2, col:66>
| |   `-CallExpr 0x55f08f3134b0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f313498 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f313300 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f313510 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f313328 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f3131d0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f313528 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f313390 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f313378 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f313350 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f313540 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f3133b8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55f08f313558 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f313418 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f3133f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f3133d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f313570 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f313438 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f313588 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f313458 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f3135a0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f313478 <col:16> 'int' 0
| `-FullComment 0x55f08f4250c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x55f08f424e80 <line:868:4>
|   | `-TextComment 0x55f08f424e50 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f424ea0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f424f00 <col:11, col:49>
|   |   `-TextComment 0x55f08f424ed0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55f08f424fa0 <line:870:3, line:872:44>
|   | |-TextComment 0x55f08f424f20 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55f08f424f40 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f424f60 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f424ff0 <line:874:3>
|   | `-TextComment 0x55f08f424fc0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f425010 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f425070 <col:11, col:35>
|       `-TextComment 0x55f08f425040 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3136a8 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f313620 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f366078 <line:891:1, line:894:1>
| | `-ReturnStmt 0x55f08f366030 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f366018 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f313900 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f3138e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f313750 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f365f70 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f313960 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f313778 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f313620 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f365f88 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f3137e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f3137c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f3137a0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f365fa0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f313808 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55f08f365fb8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f313868 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f313848 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f313828 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f365fd0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f313888 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f365fe8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f3138a8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x55f08f366000 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f3138c8 <col:16> 'int' 1
| `-FullComment 0x55f08f4253a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x55f08f425160 <line:882:4>
|   | `-TextComment 0x55f08f425130 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f425180 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f4251e0 <col:11, col:49>
|   |   `-TextComment 0x55f08f4251b0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55f08f425280 <line:884:3, line:886:37>
|   | |-TextComment 0x55f08f425200 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55f08f425220 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f425240 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f4252d0 <line:888:3>
|   | `-TextComment 0x55f08f4252a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4252f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f425350 <col:11, col:35>
|       `-TextComment 0x55f08f425320 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f366128 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3660a0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f3664c8 <line:905:1, line:908:1>
| | `-ReturnStmt 0x55f08f366488 <line:907:2, col:65>
| |   `-CallExpr 0x55f08f366380 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f366368 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f3661d0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f3663e0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f3661f8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f3660a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f3663f8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f366260 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f366248 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f366220 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f366410 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f366288 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55f08f366428 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f3662e8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f3662c8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f3662a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f366440 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f366308 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f366458 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f366328 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x55f08f366470 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f366348 <col:16> 'int' 1
| `-FullComment 0x55f08f425680 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x55f08f425440 <line:896:4>
|   | `-TextComment 0x55f08f425410 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f425460 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f4254c0 <col:11, col:49>
|   |   `-TextComment 0x55f08f425490 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55f08f425560 <line:898:3, line:900:37>
|   | |-TextComment 0x55f08f4254e0 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55f08f425500 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f425520 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f4255b0 <line:902:3>
|   | `-TextComment 0x55f08f425580 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4255d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f425630 <col:11, col:35>
|       `-TextComment 0x55f08f425600 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f366578 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f3664f0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f366948 <line:919:1, line:922:1>
| | `-ReturnStmt 0x55f08f366908 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x55f08f3668f0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f3667d0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f3667b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f366620 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x55f08f366848 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x55f08f366830 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f08f366648 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f3664f0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x55f08f366860 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x55f08f3666b0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x55f08f366698 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x55f08f366670 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x55f08f366878 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x55f08f3666d8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x55f08f366890 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x55f08f366738 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x55f08f366718 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x55f08f3666f8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x55f08f3668a8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f366758 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x55f08f3668c0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x55f08f366778 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x55f08f3668d8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x55f08f366798 <col:16> 'int' 0
| `-FullComment 0x55f08f425970 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x55f08f425730 <line:910:4>
|   | `-TextComment 0x55f08f425700 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f425750 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f4257b0 <col:11, col:49>
|   |   `-TextComment 0x55f08f425780 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55f08f425850 <line:912:3, line:914:45>
|   | |-TextComment 0x55f08f4257d0 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55f08f4257f0 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f425810 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f4258a0 <line:916:3>
|   | `-TextComment 0x55f08f425870 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4258c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f425920 <col:11, col:35>
|       `-TextComment 0x55f08f4258f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3669f8 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f366970 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f366d98 <line:933:1, line:936:1>
| | `-ReturnStmt 0x55f08f366d58 <line:935:2, col:65>
| |   `-CallExpr 0x55f08f366c50 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f366c38 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f366aa0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x55f08f34b270 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x55f08f366cb0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f366ac8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x55f08f366970 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x55f08f366cc8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x55f08f366b30 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x55f08f366b18 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x55f08f366af0 <col:18> 'int (void)' Function 0x55f08f34ad68 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x55f08f366ce0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x55f08f366b58 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x55f08f366cf8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x55f08f366bb8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x55f08f366b98 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x55f08f366b78 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f366d10 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f366bd8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x55f08f366d28 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x55f08f366bf8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x55f08f366d40 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x55f08f366c18 <col:16> 'int' 0
| `-FullComment 0x55f08f425c50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x55f08f425a10 <line:924:4>
|   | `-TextComment 0x55f08f4259e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f425a30 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f425a90 <col:11, col:49>
|   |   `-TextComment 0x55f08f425a60 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x55f08f425b30 <line:926:3, line:928:45>
|   | |-TextComment 0x55f08f425ab0 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x55f08f425ad0 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f425af0 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f425b80 <line:930:3>
|   | `-TextComment 0x55f08f425b50 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f425ba0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f425c00 <col:11, col:35>
|       `-TextComment 0x55f08f425bd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f366e48 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f366dc0 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f3670a8 <line:947:1, line:950:1>
| `-FullComment 0x55f08f425f30 <line:938:4, line:944:35>
|   |-ParagraphComment 0x55f08f425cf0 <line:938:4>
|   | `-TextComment 0x55f08f425cc0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f425d10 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f425d70 <col:11, col:43>
|   |   `-TextComment 0x55f08f425d40 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55f08f425e10 <line:940:3, line:942:44>
|   | |-TextComment 0x55f08f425d90 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55f08f425db0 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f425dd0 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f425e60 <line:944:3>
|   | `-TextComment 0x55f08f425e30 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f425e80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f425ee0 <col:11, col:35>
|       `-TextComment 0x55f08f425eb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f367150 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3670c8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f367398 <line:961:1, line:964:1>
| `-FullComment 0x55f08f426210 <line:952:4, line:958:35>
|   |-ParagraphComment 0x55f08f425fd0 <line:952:4>
|   | `-TextComment 0x55f08f425fa0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f425ff0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f426050 <col:11, col:43>
|   |   `-TextComment 0x55f08f426020 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55f08f4260f0 <line:954:3, line:956:44>
|   | |-TextComment 0x55f08f426070 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55f08f426090 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f4260b0 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f426140 <line:958:3>
|   | `-TextComment 0x55f08f426110 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f426160 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4261c0 <col:11, col:35>
|       `-TextComment 0x55f08f426190 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f367440 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f3673b8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f367688 <line:975:1, line:978:1>
| `-FullComment 0x55f08f4264f0 <line:966:4, line:972:35>
|   |-ParagraphComment 0x55f08f4262b0 <line:966:4>
|   | `-TextComment 0x55f08f426280 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4262d0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f426330 <col:11, col:43>
|   |   `-TextComment 0x55f08f426300 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55f08f4263d0 <line:968:3, line:970:37>
|   | |-TextComment 0x55f08f426350 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55f08f426370 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f426390 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f426420 <line:972:3>
|   | `-TextComment 0x55f08f4263f0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f426440 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4264a0 <col:11, col:35>
|       `-TextComment 0x55f08f426470 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f367730 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3676a8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f367978 <line:989:1, line:992:1>
| `-FullComment 0x55f08f4267d0 <line:980:4, line:986:35>
|   |-ParagraphComment 0x55f08f426590 <line:980:4>
|   | `-TextComment 0x55f08f426560 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4265b0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f426610 <col:11, col:43>
|   |   `-TextComment 0x55f08f4265e0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55f08f4266b0 <line:982:3, line:984:37>
|   | |-TextComment 0x55f08f426630 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55f08f426650 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f426670 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f426700 <line:986:3>
|   | `-TextComment 0x55f08f4266d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f426720 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f426780 <col:11, col:35>
|       `-TextComment 0x55f08f426750 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f367a20 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f367998 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f367c68 <line:1003:1, line:1006:1>
| `-FullComment 0x55f08f426ab0 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x55f08f426870 <line:994:4>
|   | `-TextComment 0x55f08f426840 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f426890 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f4268f0 <col:11, col:43>
|   |   `-TextComment 0x55f08f4268c0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55f08f426990 <line:996:3, line:998:45>
|   | |-TextComment 0x55f08f426910 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55f08f426930 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f426950 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f4269e0 <line:1000:3>
|   | `-TextComment 0x55f08f4269b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f426a00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f426a60 <col:11, col:35>
|       `-TextComment 0x55f08f426a30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f367d10 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f367c88 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f367f58 <line:1017:1, line:1020:1>
| `-FullComment 0x55f08f426d90 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x55f08f426b50 <line:1008:4>
|   | `-TextComment 0x55f08f426b20 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f426b70 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f426bd0 <col:11, col:43>
|   |   `-TextComment 0x55f08f426ba0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x55f08f426c70 <line:1010:3, line:1012:45>
|   | |-TextComment 0x55f08f426bf0 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x55f08f426c10 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f426c30 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f426cc0 <line:1014:3>
|   | `-TextComment 0x55f08f426c90 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f426ce0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f426d40 <col:11, col:35>
|       `-TextComment 0x55f08f426d10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f368018 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f367f90 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f3681d8 <line:1031:1, line:1034:1>
| `-FullComment 0x55f08f427070 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x55f08f426e30 <line:1022:4>
|   | `-TextComment 0x55f08f426e00 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f426e50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f426eb0 <col:11, col:40>
|   |   `-TextComment 0x55f08f426e80 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55f08f426f50 <line:1024:3, line:1026:44>
|   | |-TextComment 0x55f08f426ed0 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55f08f426ef0 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f426f10 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f426fa0 <line:1028:3>
|   | `-TextComment 0x55f08f426f70 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f426fc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f427020 <col:11, col:35>
|       `-TextComment 0x55f08f426ff0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f368280 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3681f8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f368448 <line:1045:1, line:1048:1>
| `-FullComment 0x55f08f427350 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x55f08f427110 <line:1036:4>
|   | `-TextComment 0x55f08f4270e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f427130 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f427190 <col:11, col:40>
|   |   `-TextComment 0x55f08f427160 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55f08f427230 <line:1038:3, line:1040:44>
|   | |-TextComment 0x55f08f4271b0 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55f08f4271d0 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f4271f0 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f427280 <line:1042:3>
|   | `-TextComment 0x55f08f427250 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4272a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f427300 <col:11, col:35>
|       `-TextComment 0x55f08f4272d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3684f0 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f368468 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f3686b8 <line:1059:1, line:1062:1>
| `-FullComment 0x55f08f427630 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x55f08f4273f0 <line:1050:4>
|   | `-TextComment 0x55f08f4273c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f427410 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f427470 <col:11, col:40>
|   |   `-TextComment 0x55f08f427440 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55f08f427510 <line:1052:3, line:1054:37>
|   | |-TextComment 0x55f08f427490 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55f08f4274b0 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f4274d0 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f427560 <line:1056:3>
|   | `-TextComment 0x55f08f427530 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f427580 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4275e0 <col:11, col:35>
|       `-TextComment 0x55f08f4275b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f368760 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f3686d8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f368928 <line:1073:1, line:1076:1>
| `-FullComment 0x55f08f427920 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x55f08f4276e0 <line:1064:4>
|   | `-TextComment 0x55f08f4276a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f427700 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f427760 <col:11, col:40>
|   |   `-TextComment 0x55f08f427730 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55f08f427800 <line:1066:3, line:1068:37>
|   | |-TextComment 0x55f08f427780 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55f08f4277a0 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f4277c0 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f427850 <line:1070:3>
|   | `-TextComment 0x55f08f427820 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f427870 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4278d0 <col:11, col:35>
|       `-TextComment 0x55f08f4278a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f3689d0 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f368948 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f368b98 <line:1087:1, line:1090:1>
| `-FullComment 0x55f08f427c00 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x55f08f4279c0 <line:1078:4>
|   | `-TextComment 0x55f08f427990 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4279e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f427a40 <col:11, col:40>
|   |   `-TextComment 0x55f08f427a10 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55f08f427ae0 <line:1080:3, line:1082:45>
|   | |-TextComment 0x55f08f427a60 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55f08f427a80 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f427aa0 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f427b30 <line:1084:3>
|   | `-TextComment 0x55f08f427b00 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f427b50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f427bb0 <col:11, col:35>
|       `-TextComment 0x55f08f427b80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f368c40 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f368bb8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f368e08 <line:1101:1, line:1104:1>
| `-FullComment 0x55f08f427ee0 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x55f08f427ca0 <line:1092:4>
|   | `-TextComment 0x55f08f427c70 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f427cc0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f427d20 <col:11, col:40>
|   |   `-TextComment 0x55f08f427cf0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x55f08f427dc0 <line:1094:3, line:1096:45>
|   | |-TextComment 0x55f08f427d40 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x55f08f427d60 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f427d80 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f427e10 <line:1098:3>
|   | `-TextComment 0x55f08f427de0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f427e30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f427e90 <col:11, col:35>
|       `-TextComment 0x55f08f427e60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f368eb0 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f368e28 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f36a0a8 <line:1115:1, line:1118:1>
| `-FullComment 0x55f08f4281c0 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x55f08f427f80 <line:1106:4>
|   | `-TextComment 0x55f08f427f50 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f427fa0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f428000 <col:11, col:40>
|   |   `-TextComment 0x55f08f427fd0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55f08f4280a0 <line:1108:3, line:1110:44>
|   | |-TextComment 0x55f08f428020 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55f08f428040 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f428060 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f4280f0 <line:1112:3>
|   | `-TextComment 0x55f08f4280c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f428110 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f428170 <col:11, col:35>
|       `-TextComment 0x55f08f428140 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36a150 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f36a0c8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f36a318 <line:1129:1, line:1132:1>
| `-FullComment 0x55f08f4284a0 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x55f08f428260 <line:1120:4>
|   | `-TextComment 0x55f08f428230 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f428280 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f4282e0 <col:11, col:40>
|   |   `-TextComment 0x55f08f4282b0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55f08f428380 <line:1122:3, line:1124:44>
|   | |-TextComment 0x55f08f428300 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55f08f428320 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f428340 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f4283d0 <line:1126:3>
|   | `-TextComment 0x55f08f4283a0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4283f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f428450 <col:11, col:35>
|       `-TextComment 0x55f08f428420 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36a3c0 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f36a338 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f36a588 <line:1143:1, line:1146:1>
| `-FullComment 0x55f08f428780 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x55f08f428540 <line:1134:4>
|   | `-TextComment 0x55f08f428510 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f428560 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f4285c0 <col:11, col:40>
|   |   `-TextComment 0x55f08f428590 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55f08f428660 <line:1136:3, line:1138:37>
|   | |-TextComment 0x55f08f4285e0 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55f08f428600 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f428620 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f4286b0 <line:1140:3>
|   | `-TextComment 0x55f08f428680 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4286d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f428730 <col:11, col:35>
|       `-TextComment 0x55f08f428700 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36a630 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f36a5a8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f36a7f8 <line:1157:1, line:1160:1>
| `-FullComment 0x55f08f428a60 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x55f08f428820 <line:1148:4>
|   | `-TextComment 0x55f08f4287f0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f428840 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f4288a0 <col:11, col:40>
|   |   `-TextComment 0x55f08f428870 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55f08f428940 <line:1150:3, line:1152:37>
|   | |-TextComment 0x55f08f4288c0 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55f08f4288e0 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f428900 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f428990 <line:1154:3>
|   | `-TextComment 0x55f08f428960 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4289b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f428a10 <col:11, col:35>
|       `-TextComment 0x55f08f4289e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36a8a0 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f36a818 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f36aa68 <line:1171:1, line:1174:1>
| `-FullComment 0x55f08f428d40 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x55f08f428b00 <line:1162:4>
|   | `-TextComment 0x55f08f428ad0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f428b20 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f428b80 <col:11, col:40>
|   |   `-TextComment 0x55f08f428b50 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55f08f428c20 <line:1164:3, line:1166:45>
|   | |-TextComment 0x55f08f428ba0 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55f08f428bc0 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f428be0 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f428c70 <line:1168:3>
|   | `-TextComment 0x55f08f428c40 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f428c90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f428cf0 <col:11, col:35>
|       `-TextComment 0x55f08f428cc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36ab10 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f36aa88 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f36acd8 <line:1185:1, line:1188:1>
| `-FullComment 0x55f08f429020 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x55f08f428de0 <line:1176:4>
|   | `-TextComment 0x55f08f428db0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f428e00 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f428e60 <col:11, col:40>
|   |   `-TextComment 0x55f08f428e30 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x55f08f428f00 <line:1178:3, line:1180:45>
|   | |-TextComment 0x55f08f428e80 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x55f08f428ea0 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f428ec0 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f428f50 <line:1182:3>
|   | `-TextComment 0x55f08f428f20 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f428f70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f428fd0 <col:11, col:35>
|       `-TextComment 0x55f08f428fa0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36ad80 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f36acf8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f36af48 <line:1199:1, line:1202:1>
| `-FullComment 0x55f08f429300 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x55f08f4290c0 <line:1190:4>
|   | `-TextComment 0x55f08f429090 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4290e0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f429140 <col:11, col:39>
|   |   `-TextComment 0x55f08f429110 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55f08f4291e0 <line:1192:3, line:1194:44>
|   | |-TextComment 0x55f08f429160 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55f08f429180 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f4291a0 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f429230 <line:1196:3>
|   | `-TextComment 0x55f08f429200 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f429250 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f4292b0 <col:11, col:35>
|       `-TextComment 0x55f08f429280 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36b048 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f36afc0 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f36b208 <line:1213:1, line:1216:1>
| `-FullComment 0x55f08f4295e0 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x55f08f4293a0 <line:1204:4>
|   | `-TextComment 0x55f08f429370 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4293c0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f429420 <col:11, col:39>
|   |   `-TextComment 0x55f08f4293f0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55f08f4294c0 <line:1206:3, line:1208:44>
|   | |-TextComment 0x55f08f429440 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55f08f429460 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f429480 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f429510 <line:1210:3>
|   | `-TextComment 0x55f08f4294e0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f429530 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f429590 <col:11, col:35>
|       `-TextComment 0x55f08f429560 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36b2b0 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f36b228 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f36b478 <line:1227:1, line:1230:1>
| `-FullComment 0x55f08f4298d0 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x55f08f429680 <line:1218:4>
|   | `-TextComment 0x55f08f429650 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f4296a0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f429710 <col:11, col:39>
|   |   `-TextComment 0x55f08f4296e0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55f08f4297b0 <line:1220:3, line:1222:37>
|   | |-TextComment 0x55f08f429730 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55f08f429750 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f429770 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f429800 <line:1224:3>
|   | `-TextComment 0x55f08f4297d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f429820 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f429880 <col:11, col:35>
|       `-TextComment 0x55f08f429850 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36b520 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f36b498 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f36b6e8 <line:1241:1, line:1244:1>
| `-FullComment 0x55f08f429bb0 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x55f08f429970 <line:1232:4>
|   | `-TextComment 0x55f08f429940 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f429990 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f4299f0 <col:11, col:39>
|   |   `-TextComment 0x55f08f4299c0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55f08f429a90 <line:1234:3, line:1236:37>
|   | |-TextComment 0x55f08f429a10 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55f08f429a30 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f429a50 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f429ae0 <line:1238:3>
|   | `-TextComment 0x55f08f429ab0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f429b00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f429b60 <col:11, col:35>
|       `-TextComment 0x55f08f429b30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36b790 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f36b708 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f36b958 <line:1255:1, line:1258:1>
| `-FullComment 0x55f08f429e90 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x55f08f429c50 <line:1246:4>
|   | `-TextComment 0x55f08f429c20 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f429c70 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f429cd0 <col:11, col:39>
|   |   `-TextComment 0x55f08f429ca0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55f08f429d70 <line:1248:3, line:1250:45>
|   | |-TextComment 0x55f08f429cf0 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55f08f429d10 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f429d30 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f429dc0 <line:1252:3>
|   | `-TextComment 0x55f08f429d90 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f429de0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f429e40 <col:11, col:35>
|       `-TextComment 0x55f08f429e10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36ba00 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f36b978 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f36bbc8 <line:1269:1, line:1272:1>
| `-FullComment 0x55f08f42a170 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x55f08f429f30 <line:1260:4>
|   | `-TextComment 0x55f08f429f00 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f429f50 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f429fb0 <col:11, col:39>
|   |   `-TextComment 0x55f08f429f80 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x55f08f42a050 <line:1262:3, line:1264:45>
|   | |-TextComment 0x55f08f429fd0 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x55f08f429ff0 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f42a010 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f42a0a0 <line:1266:3>
|   | `-TextComment 0x55f08f42a070 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f42a0c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f42a120 <col:11, col:35>
|       `-TextComment 0x55f08f42a0f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36bc70 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f36bbe8 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f36beb8 <line:1283:1, line:1286:1>
| `-FullComment 0x55f08f42a450 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x55f08f42a210 <line:1274:4>
|   | `-TextComment 0x55f08f42a1e0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f42a230 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f42a290 <col:11, col:43>
|   |   `-TextComment 0x55f08f42a260 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55f08f42a330 <line:1276:3, line:1278:44>
|   | |-TextComment 0x55f08f42a2b0 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55f08f42a2d0 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f42a2f0 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f42a380 <line:1280:3>
|   | `-TextComment 0x55f08f42a350 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f42a3a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f42a400 <col:11, col:35>
|       `-TextComment 0x55f08f42a3d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36bfd0 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f36bed8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f36c218 <line:1297:1, line:1300:1>
| `-FullComment 0x55f08f42a730 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x55f08f42a4f0 <line:1288:4>
|   | `-TextComment 0x55f08f42a4c0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f42a510 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f42a570 <col:11, col:43>
|   |   `-TextComment 0x55f08f42a540 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55f08f42a610 <line:1290:3, line:1292:44>
|   | |-TextComment 0x55f08f42a590 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55f08f42a5b0 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f42a5d0 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x55f08f42a660 <line:1294:3>
|   | `-TextComment 0x55f08f42a630 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f42a680 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f42a6e0 <col:11, col:35>
|       `-TextComment 0x55f08f42a6b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36c2c0 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f36c238 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f36c508 <line:1311:1, line:1314:1>
| `-FullComment 0x55f08f42aa10 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x55f08f42a7d0 <line:1302:4>
|   | `-TextComment 0x55f08f42a7a0 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f42a7f0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f42a850 <col:11, col:43>
|   |   `-TextComment 0x55f08f42a820 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55f08f42a8f0 <line:1304:3, line:1306:37>
|   | |-TextComment 0x55f08f42a870 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55f08f42a890 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f42a8b0 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f42a940 <line:1308:3>
|   | `-TextComment 0x55f08f42a910 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f42a960 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f42a9c0 <col:11, col:35>
|       `-TextComment 0x55f08f42a990 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36c5b0 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f36c528 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f36c7f8 <line:1325:1, line:1328:1>
| `-FullComment 0x55f08f42acf0 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x55f08f42aab0 <line:1316:4>
|   | `-TextComment 0x55f08f42aa80 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f42aad0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f42ab30 <col:11, col:43>
|   |   `-TextComment 0x55f08f42ab00 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55f08f42abd0 <line:1318:3, line:1320:37>
|   | |-TextComment 0x55f08f42ab50 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55f08f42ab70 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f42ab90 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x55f08f42ac20 <line:1322:3>
|   | `-TextComment 0x55f08f42abf0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f42ac40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f42aca0 <col:11, col:35>
|       `-TextComment 0x55f08f42ac70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36c8a0 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x55f08f36c818 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f36cae8 <line:1339:1, line:1342:1>
| `-FullComment 0x55f08f42afd0 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x55f08f42ad90 <line:1330:4>
|   | `-TextComment 0x55f08f42ad60 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f42adb0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f42ae10 <col:11, col:43>
|   |   `-TextComment 0x55f08f42ade0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55f08f42aeb0 <line:1332:3, line:1334:45>
|   | |-TextComment 0x55f08f42ae30 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55f08f42ae50 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x55f08f42ae70 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f42af00 <line:1336:3>
|   | `-TextComment 0x55f08f42aed0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f42af20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f42af80 <col:11, col:35>
|       `-TextComment 0x55f08f42af50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36cb90 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x55f08f36cb08 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x55f08f36ce38 <line:1353:1, line:1356:1>
| `-FullComment 0x55f08f42b2b0 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x55f08f42b070 <line:1344:4>
|   | `-TextComment 0x55f08f42b040 <col:4> Text=" "
|   |-BlockCommandComment 0x55f08f42b090 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f42b0f0 <col:11, col:43>
|   |   `-TextComment 0x55f08f42b0c0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x55f08f42b190 <line:1346:3, line:1348:45>
|   | |-TextComment 0x55f08f42b110 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x55f08f42b130 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x55f08f42b150 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x55f08f42b1e0 <line:1350:3>
|   | `-TextComment 0x55f08f42b1b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f42b200 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x55f08f42b260 <col:11, col:35>
|       `-TextComment 0x55f08f42b230 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x55f08f36ced8 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x55f08f42b540 <line:112:3, line:116:1>
|   |-ParagraphComment 0x55f08f42b350 <line:112:3>
|   | `-TextComment 0x55f08f42b320 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f42b370 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55f08f42b3d0 <col:10, col:64>
|   |   `-TextComment 0x55f08f42b3a0 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x55f08f42b420 <line:114:3>
|   | `-TextComment 0x55f08f42b3f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f42b440 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x55f08f42b4a0 <col:11, col:40>
|   |   `-TextComment 0x55f08f42b470 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x55f08f42b4f0 <line:116:1>
|     `-TextComment 0x55f08f42b4c0 <col:1> Text=" "
|-FunctionDecl 0x55f08f36f0e0 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x55f08f42b7f0 <line:121:3, line:125:1>
|   |-ParagraphComment 0x55f08f42b5e0 <line:121:3>
|   | `-TextComment 0x55f08f42b5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f42b600 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55f08f42b660 <col:10, col:46>
|   |   `-TextComment 0x55f08f42b630 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x55f08f42b6b0 <line:123:3>
|   | `-TextComment 0x55f08f42b680 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f42b6f0 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x55f08f42b750 <col:11, col:40>
|   |   `-TextComment 0x55f08f42b720 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x55f08f42b7a0 <line:125:1>
|     `-TextComment 0x55f08f42b770 <col:1> Text=" "
|-RecordDecl 0x55f08f36f180 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x55f08f36f480 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x55f08f36f420 'void (*)(struct _timeout *)'
|   `-ParenType 0x55f08f36f3c0 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x55f08f36f380 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x55f08f1ea700 'void'
|       `-PointerType 0x55f08f36f290 'struct _timeout *'
|         `-ElaboratedType 0x55f08f36f230 'struct _timeout' sugar
|           `-RecordType 0x55f08f36f210 'struct _timeout'
|             `-Record 0x55f08f36f4d8 '_timeout'
|-RecordDecl 0x55f08f36f4d8 prev 0x55f08f36f180 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x55f08f36f570 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x55f08f36f5f0 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x55f08f36f670 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x55f08f36f6b8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x55f08f36f778 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x55f08f36f810 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x55f08f36f7c0 'struct k_spinlock_key' sugar
|   `-RecordType 0x55f08f36f740 'struct k_spinlock_key'
|     `-Record 0x55f08f36f6b8 'k_spinlock_key'
|-RecordDecl 0x55f08f36f868 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x55f08f36fae0 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x55f08f36f9e0 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x55f08f36fef8 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x55f08f36fc70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55f08f36fc58 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x55f08f36fc38 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x55f08f36fbd0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x55f08f36f9e0 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x55f08f36fd08 <line:65:2, col:20>
| | | `-VarDecl 0x55f08f36fca8 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key'
| | |-BinaryOperator 0x55f08f36fe30 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x55f08f36fd48 <col:2, col:4> 'int' lvalue .key 0x55f08f36f778
| | | | `-DeclRefExpr 0x55f08f36fd20 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x55f08f36fca8 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x55f08f36fe18 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x55f08f36fdf0 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x55f08f36fdd8 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x55f08f36fd80 <col:10> 'unsigned int (void)' Function 0x55f08f349c50 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x55f08f36fee0 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x55f08f36fec8 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f36fea0 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x55f08f36fca8 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x55f08f36fb88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55f08f371e70 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x55f08f36ff50 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x55f08f371d60 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x55f08f372160 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x55f08f372008 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55f08f371ff0 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x55f08f371fd0 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x55f08f371f68 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x55f08f36ff50 'l' 'struct k_spinlock *'
| | `-CallExpr 0x55f08f372100 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x55f08f3720e8 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55f08f372030 <col:2> 'void (unsigned int)' Function 0x55f08f349db8 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x55f08f372148 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x55f08f372130 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x55f08f372080 <col:18, col:22> 'int' lvalue .key 0x55f08f36f778
| |         `-DeclRefExpr 0x55f08f372058 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x55f08f371d60 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x55f08f371f20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x55f08f3722b0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x55f08f3721a8 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x55f08f3724c8 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x55f08f372440 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55f08f372428 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| |     `-ParenExpr 0x55f08f372408 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x55f08f3723a0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x55f08f3721a8 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x55f08f372358 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x55f08f3724e0 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x55f08f42ba50 <line:18:3, line:20:5>
| | |-ParagraphComment 0x55f08f42b890 <line:18:3>
| | | `-TextComment 0x55f08f42b860 <col:3> Text=" "
| | |-VerbatimLineComment 0x55f08f42b8b0 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x55f08f42b920 <line:19:3>
| | | `-TextComment 0x55f08f42b8f0 <col:3> Text=" "
| | |-VerbatimLineComment 0x55f08f42b940 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x55f08f42ba00 <line:20:3, col:5>
| |   |-TextComment 0x55f08f42b980 <col:3> Text=" "
| |   |-TextComment 0x55f08f42b9a0 <col:4> Text="@"
| |   `-TextComment 0x55f08f42b9c0 <col:5> Text="{"
| |-EnumConstantDecl 0x55f08f3725c8 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x55f08f42bb20 <line:24:5, col:55>
| |   `-ParagraphComment 0x55f08f42baf0 <col:5, col:55>
| |     `-TextComment 0x55f08f42bac0 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x55f08f372638 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x55f08f42bbf0 <line:27:5, col:34>
| |   `-ParagraphComment 0x55f08f42bbc0 <col:5, col:34>
| |     `-TextComment 0x55f08f42bb90 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x55f08f3726a8 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x55f08f42bcc0 <line:30:5, col:50>
| |   `-ParagraphComment 0x55f08f42bc90 <col:5, col:50>
| |     `-TextComment 0x55f08f42bc60 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x55f08f372718 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x55f08f42bd90 <line:33:5, col:38>
| |   `-ParagraphComment 0x55f08f42bd60 <col:5, col:38>
| |     `-TextComment 0x55f08f42bd30 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x55f08f372788 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x55f08f42be60 <line:36:5, col:34>
|     `-ParagraphComment 0x55f08f42be30 <col:5, col:34>
|       `-TextComment 0x55f08f42be00 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x55f08f3728d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x55f08f372810 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x55f08f42c140 <line:45:3, line:50:44>
|   |-ParagraphComment 0x55f08f42bf00 <line:45:3>
|   | `-TextComment 0x55f08f42bed0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f42bf20 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f42bf80 <col:10, col:42>
|   |   `-TextComment 0x55f08f42bf50 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x55f08f42bff0 <line:47:3, line:48:76>
|   | |-TextComment 0x55f08f42bfa0 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x55f08f42bfc0 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x55f08f42c040 <line:50:3>
|   | `-TextComment 0x55f08f42c010 <col:3> Text=" "
|   `-ParamCommandComment 0x55f08f42c060 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x55f08f42c0f0 <col:17, col:44>
|       `-TextComment 0x55f08f42c0c0 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x55f08f372b10 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x55f08f3729c0 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x55f08f372a38 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x55f08f42c820 <line:55:3, line:81:71>
|   |-ParagraphComment 0x55f08f42c1e0 <line:55:3>
|   | `-TextComment 0x55f08f42c1b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f42c200 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55f08f42c260 <col:10, col:36>
|   |   `-TextComment 0x55f08f42c230 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x55f08f42c2d0 <line:57:3, line:58:67>
|   | |-TextComment 0x55f08f42c280 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x55f08f42c2a0 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x55f08f42c370 <line:60:3, line:62:71>
|   | |-TextComment 0x55f08f42c2f0 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x55f08f42c310 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x55f08f42c330 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x55f08f42c3e0 <line:64:3, line:65:11>
|   | |-TextComment 0x55f08f42c390 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x55f08f42c3b0 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x55f08f42c430 <line:67:3, col:42>
|   | `-TextComment 0x55f08f42c400 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x55f08f42c5c0 <line:69:3, line:77:23>
|   | |-TextComment 0x55f08f42c450 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x55f08f42c470 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x55f08f42c490 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x55f08f42c4b0 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x55f08f42c4d0 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x55f08f42c4f0 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x55f08f42c510 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x55f08f42c530 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x55f08f42c550 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x55f08f42c610 <line:79:3>
|   | `-TextComment 0x55f08f42c5e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f42c630 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x55f08f42c6e0 <line:79:17, line:80:3>
|   |   |-TextComment 0x55f08f42c690 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x55f08f42c6b0 <line:80:3> Text=" "
|   `-ParamCommandComment 0x55f08f42c700 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x55f08f42c7b0 <line:80:14, line:81:71>
|       |-TextComment 0x55f08f42c760 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x55f08f42c780 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x55f08f373a00 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x55f08f372c00 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x55f08f372c78 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x55f08f42cc10 <line:86:3, line:97:71>
|   |-ParagraphComment 0x55f08f42c8c0 <line:86:3, col:50>
|   | `-TextComment 0x55f08f42c890 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x55f08f42c960 <line:88:3, line:90:31>
|   | |-TextComment 0x55f08f42c8e0 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x55f08f42c900 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x55f08f42c920 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x55f08f42c9d0 <line:92:3, line:93:24>
|   | |-TextComment 0x55f08f42c980 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x55f08f42c9a0 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x55f08f42ca20 <line:95:3>
|   | `-TextComment 0x55f08f42c9f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f42ca40 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x55f08f42caf0 <line:95:17, line:96:3>
|   |   |-TextComment 0x55f08f42caa0 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x55f08f42cac0 <line:96:3> Text=" "
|   `-ParamCommandComment 0x55f08f42cb10 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x55f08f42cbc0 <line:96:14, line:97:71>
|       |-TextComment 0x55f08f42cb70 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x55f08f42cb90 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x55f08f373ed0 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x55f08f373bb0 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x55f08f373c28 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x55f08f373d38 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x55f08f373db0 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x55f08f373e20 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x55f08f374418 <line:70:1, line:73:1>
| | `-ReturnStmt 0x55f08f3741c8 <line:71:2, line:72:11>
| |   `-CallExpr 0x55f08f374100 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x55f08f3740e8 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f373f98 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x55f08f34a908 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x55f08f374150 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f373fc0 <col:34> 'unsigned int' lvalue ParmVar 0x55f08f373bb0 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x55f08f374168 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f373fe8 <col:39> 'unsigned int' lvalue ParmVar 0x55f08f373c28 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x55f08f374180 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f374010 <col:49> 'void (*)(void *)' lvalue ParmVar 0x55f08f373d38 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x55f08f374198 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f374038 <col:58> 'void *' lvalue ParmVar 0x55f08f373db0 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x55f08f3741b0 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x55f08f374060 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f373e20 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x55f08f42d280 <line:54:3, line:64:48>
|   |-ParagraphComment 0x55f08f42ccb0 <line:54:3, col:33>
|   | `-TextComment 0x55f08f42cc80 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x55f08f42cd00 <line:56:3, col:80>
|   | `-TextComment 0x55f08f42ccd0 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x55f08f42cd50 <line:58:3>
|   | `-TextComment 0x55f08f42cd20 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f42cd70 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f42ce20 <line:58:14, line:59:3>
|   |   |-TextComment 0x55f08f42cdd0 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x55f08f42cdf0 <line:59:3> Text=" "
|   |-ParamCommandComment 0x55f08f42ce40 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x55f08f42cef0 <line:59:19, line:60:3>
|   |   |-TextComment 0x55f08f42cea0 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x55f08f42cec0 <line:60:3> Text=" "
|   |-ParamCommandComment 0x55f08f42cf10 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x55f08f42cfc0 <line:60:18, line:61:3>
|   |   |-TextComment 0x55f08f42cf70 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x55f08f42cf90 <line:61:3> Text=" "
|   |-ParamCommandComment 0x55f08f42cfe0 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x55f08f42d090 <line:61:20, line:62:3>
|   |   |-TextComment 0x55f08f42d040 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x55f08f42d060 <line:62:3> Text=" "
|   |-ParamCommandComment 0x55f08f42d0b0 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x55f08f42d140 <col:16, col:53>
|   |   `-TextComment 0x55f08f42d110 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x55f08f42d190 <line:64:3>
|   | `-TextComment 0x55f08f42d160 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f42d1b0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x55f08f42d210 <col:11, col:48>
|       `-TextComment 0x55f08f42d1e0 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x55f08f3744f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x55f08f42d4a0 <line:21:3, line:26:59>
|   |-ParagraphComment 0x55f08f42d320 <line:21:3, col:57>
|   | `-TextComment 0x55f08f42d2f0 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x55f08f42d390 <line:23:3, line:24:52>
|   | |-TextComment 0x55f08f42d340 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x55f08f42d360 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x55f08f42d3e0 <line:26:3>
|   | `-TextComment 0x55f08f42d3b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f42d400 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x55f08f42d460 <col:11, col:59>
|       `-TextComment 0x55f08f42d430 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x55f08f3745f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x55f08f3746b8 prev 0x55f08f3744f8 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x55f08f3749a8 <line:26:1, line:34:1>
|   |-DoStmt 0x55f08f3748b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f374878 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f374828 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f374890 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f374968 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x55f08f374940 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x55f08f374928 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55f08f3748d0 <col:9> 'int *()' Function 0x55f08f3745f0 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x55f08f382bc0 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x55f08f382c80 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x55f08f382d20 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x55f08f382cd0 'struct _wait_q_t' sugar
|   `-RecordType 0x55f08f382c50 '_wait_q_t'
|     `-Record 0x55f08f382bc0 ''
|-RecordDecl 0x55f08f382d90 prev 0x55f08f327b60 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x55f08f382e18 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x55f08f382ec0 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x55f08f382f70 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x55f08f383020 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x55f08f3830d0 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x55f08f383180 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x55f08f383230 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x55f08f3832e0 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x55f08f383390 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x55f08f383440 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x55f08f3834f0 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x55f08f3835a0 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x55f08f383650 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x55f08f383700 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x55f08f3837b0 prev 0x55f08f327be8 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x55f08f383838 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x55f08f3838e0 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x55f08f3839b8 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x55f08f42d6a0 <line:140:3, line:144:33>
| | |-ParagraphComment 0x55f08f42d540 <line:140:3>
| | | `-TextComment 0x55f08f42d510 <col:3> Text=" "
| | |-BlockCommandComment 0x55f08f42d560 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x55f08f42d5c0 <col:10, col:29>
| | |   `-TextComment 0x55f08f42d590 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x55f08f42d660 <line:142:3, line:144:33>
| |   |-TextComment 0x55f08f42d5e0 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x55f08f42d600 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x55f08f42d620 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x55f08f383a70 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x55f08f383ae8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x55f08f383b30 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x55f08f383b78 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x55f08f384e90 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x55f08f384ed8 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x55f08f384f20 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x55f08f384f68 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x55f08f384fb0 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x55f08f384ff8 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x55f08f385040 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x55f08f385088 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x55f08f3850d0 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x55f08f385118 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x55f08f385160 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x55f08f3851a8 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x55f08f3851f0 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x55f08f385238 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x55f08f385280 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x55f08f3852c8 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x55f08f385310 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x55f08f385358 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x55f08f3853a0 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x55f08f3853e8 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x55f08f385430 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x55f08f385478 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x55f08f3854c0 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x55f08f385508 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x55f08f385550 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x55f08f385598 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x55f08f3855e0 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x55f08f385628 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x55f08f385670 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x55f08f3856b8 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x55f08f385700 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x55f08f385748 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x55f08f3857b8 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x55f08f400650 <line:156:5, col:13>
|     `-ParagraphComment 0x55f08f400620 <col:5, col:13>
|       |-TextComment 0x55f08f4005a0 <col:5> Text=" "
|       `-InlineCommandComment 0x55f08f4005f0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x55f08f3858f8 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x55f08f385870 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x55f08f385a98 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x55f08f385a40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55f08f385a28 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x55f08f385a08 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x55f08f3859a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x55f08f385870 'obj' 'void *'
| `-FullComment 0x55f08f400770 <line:227:3, col:12>
|   `-ParagraphComment 0x55f08f400740 <col:3, col:12>
|     |-TextComment 0x55f08f4006c0 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f400710 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f385c60 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55f08f385ac8 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x55f08f385b50 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x55f08f387408 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x55f08f385db0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55f08f385d98 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x55f08f385d78 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x55f08f385d10 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x55f08f385ac8 'object' 'void *'
| | `-CStyleCastExpr 0x55f08f3873b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55f08f385e60 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x55f08f385e40 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x55f08f385dd8 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x55f08f385b50 'thread' 'struct k_thread *'
| `-FullComment 0x55f08f400860 <line:235:3, col:12>
|   `-ParagraphComment 0x55f08f400830 <col:3, col:12>
|     |-TextComment 0x55f08f4007e0 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f400800 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f387558 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55f08f387440 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x55f08f3874c8 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x55f08f3877c8 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x55f08f3876a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x55f08f387690 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x55f08f387670 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x55f08f387608 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x55f08f387440 'object' 'void *'
| | `-CStyleCastExpr 0x55f08f387770 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55f08f387758 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x55f08f387738 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x55f08f3876d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x55f08f3874c8 'thread' 'struct k_thread *'
| `-FullComment 0x55f08f400950 <line:245:3, col:12>
|   `-ParagraphComment 0x55f08f400920 <col:3, col:12>
|     |-TextComment 0x55f08f4008d0 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f4008f0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f387888 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x55f08f387800 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x55f08f3879f8 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x55f08f3879d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55f08f3879b8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x55f08f387998 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x55f08f387930 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x55f08f387800 'object' 'void *'
| `-FullComment 0x55f08f400a40 <line:255:3, col:12>
|   `-ParagraphComment 0x55f08f400a10 <col:3, col:12>
|     |-TextComment 0x55f08f4009c0 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f4009e0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f387ab0 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x55f08f387a28 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x55f08f387c48 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x55f08f387bf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x55f08f387be0 <col:29, col:31> 'void *' <LValueToRValue>
|       `-ParenExpr 0x55f08f387bc0 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x55f08f387b58 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x55f08f387a28 'object' 'void *'
|-FunctionDecl 0x55f08f387d90 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55f08f387c78 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x55f08f387d00 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x55f08f400da0 <line:270:3, line:277:53>
|   |-ParagraphComment 0x55f08f400ae0 <line:270:3, col:43>
|   | `-TextComment 0x55f08f400ab0 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x55f08f400b80 <line:272:3, line:274:67>
|   | |-TextComment 0x55f08f400b00 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x55f08f400b20 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x55f08f400b40 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x55f08f400bd0 <line:276:3>
|   | `-TextComment 0x55f08f400ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f400bf0 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x55f08f400ca0 <line:276:17, line:277:3>
|   |   |-TextComment 0x55f08f400c50 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x55f08f400c70 <line:277:3> Text=" "
|   `-ParamCommandComment 0x55f08f400cc0 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x55f08f400d50 <col:17, col:53>
|       `-TextComment 0x55f08f400d20 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x55f08f387f98 prev 0x55f08f387558 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x55f08f387e80 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x55f08f387f08 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x55f08f401100 <line:282:3, line:289:54>
|   |-ParagraphComment 0x55f08f400e40 <line:282:3, col:46>
|   | `-TextComment 0x55f08f400e10 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x55f08f400ee0 <line:284:3, line:286:67>
|   | |-TextComment 0x55f08f400e60 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x55f08f400e80 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x55f08f400ea0 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x55f08f400f30 <line:288:3>
|   | `-TextComment 0x55f08f400f00 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f400f50 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x55f08f401000 <line:288:17, line:289:3>
|   |   |-TextComment 0x55f08f400fb0 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x55f08f400fd0 <line:289:3> Text=" "
|   `-ParamCommandComment 0x55f08f401020 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x55f08f4010b0 <col:17, col:54>
|       `-TextComment 0x55f08f401080 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x55f08f388118 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x55f08f388090 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x55f08f401430 <line:294:3, line:301:1>
|   |-ParagraphComment 0x55f08f4011a0 <line:294:3>
|   | `-TextComment 0x55f08f401170 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4011c0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55f08f401220 <col:10, col:27>
|   |   `-TextComment 0x55f08f4011f0 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x55f08f401290 <line:296:3, line:297:72>
|   | |-TextComment 0x55f08f401240 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x55f08f401260 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x55f08f4012e0 <line:299:3>
|   | `-TextComment 0x55f08f4012b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f401300 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x55f08f401390 <col:17, col:42>
|   |   `-TextComment 0x55f08f401360 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x55f08f4013e0 <line:301:1>
|     `-TextComment 0x55f08f4013b0 <col:1> Text=" "
|-FunctionDecl 0x55f08f388288 prev 0x55f08f387ab0 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x55f08f388200 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x55f08f4017f0 <line:305:3, line:319:41>
|   |-ParagraphComment 0x55f08f4014d0 <line:305:3, col:59>
|   | `-TextComment 0x55f08f4014a0 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x55f08f401590 <line:307:3, line:310:59>
|   | |-TextComment 0x55f08f4014f0 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x55f08f401510 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x55f08f401530 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x55f08f401550 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x55f08f401630 <line:312:3, line:314:43>
|   | |-TextComment 0x55f08f4015b0 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x55f08f4015d0 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x55f08f4015f0 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x55f08f4016a0 <line:316:3, line:317:25>
|   | |-TextComment 0x55f08f401650 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x55f08f401670 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x55f08f4016f0 <line:319:3>
|   | `-TextComment 0x55f08f4016c0 <col:3> Text=" "
|   `-ParamCommandComment 0x55f08f401710 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x55f08f4017a0 <col:17, col:41>
|       `-TextComment 0x55f08f401770 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x55f08f3884c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55f08f3883c0 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x55f08f401bb0 <line:324:3, line:335:12>
|   |-ParagraphComment 0x55f08f401890 <line:324:3, col:48>
|   | `-TextComment 0x55f08f401860 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x55f08f401950 <line:326:3, line:329:78>
|   | |-TextComment 0x55f08f4018b0 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x55f08f4018d0 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x55f08f4018f0 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x55f08f401910 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x55f08f4019a0 <line:331:3, col:59>
|   | `-TextComment 0x55f08f401970 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x55f08f4019f0 <line:333:3>
|   | `-TextComment 0x55f08f4019c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f401a10 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x55f08f401ac0 <line:333:16, line:334:3>
|   |   |-TextComment 0x55f08f401a70 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x55f08f401a90 <line:334:3> Text=" "
|   `-BlockCommandComment 0x55f08f401ae0 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x55f08f401b60 <line:334:11, line:335:12>
|       |-TextComment 0x55f08f401b10 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x55f08f401b30 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x55f08f388620 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55f08f388590 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x55f08f388858 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x55f08f388768 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x55f08f388750 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|   |   `-ParenExpr 0x55f08f388730 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x55f08f3886c8 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x55f08f388590 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x55f08f388810 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x55f08f3887f0 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x55f08f3887c8 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x55f08f388790 <col:23> 'int' 0
|-FunctionDecl 0x55f08f388918 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x55f08f388890 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x55f08f388ab8 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x55f08f388a60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x55f08f388a48 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x55f08f388a28 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x55f08f3889c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x55f08f388890 'obj' 'void *'
| `-FullComment 0x55f08f401e10 <line:359:3, line:362:1>
|   |-ParagraphComment 0x55f08f401c50 <line:359:3>
|   | `-TextComment 0x55f08f401c20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f401c70 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x55f08f401cd0 <col:10, col:24>
|   |   `-TextComment 0x55f08f401ca0 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x55f08f401d20 <line:361:3>
|   | `-TextComment 0x55f08f401cf0 <col:3> Text=" "
|   `-ParamCommandComment 0x55f08f401d40 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x55f08f401dd0 <col:1>
|       `-TextComment 0x55f08f401da0 <col:1> Text=" "
|-RecordDecl 0x55f08f388ad0 prev 0x55f08f327c90 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x55f08f388b58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x55f08f388bb0 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x55f08f388c58 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x55f08f388d00 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x55f08f388dc0 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x55f08f388e28 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x55f08f388ec0 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x55f08f388f18 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x55f08f388ec0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x55f08f388dc0 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x55f08f388f68 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x55f08f388ec0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x55f08f388e28 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x55f08f389038 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x55f08f389090 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x55f08f3890e8 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x55f08f389130 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x55f08f3891e0 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x55f08f3892a0 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x55f08f3892f8 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x55f08f325e20 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x55f08f325e78 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x55f08f325e20 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x55f08f3892a0 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x55f08f325ec8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x55f08f325e20 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x55f08f3892f8 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x55f08f325f18 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x55f08f326000 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x55f08f326060 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x55f08f326000 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x55f08f325e20 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x55f08f3892a0 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x55f08f3260b8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x55f08f326000 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x55f08f325e20 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x55f08f3892f8 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x55f08f326108 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x55f08f326000 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x55f08f325f18 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x55f08f326158 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x55f08f3261b8 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x55f08f3262f0 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x55f08f3262a0 'struct _thread_base' sugar
|   `-RecordType 0x55f08f388ce0 'struct _thread_base'
|     `-Record 0x55f08f388c58 '_thread_base'
|-RecordDecl 0x55f08f326378 prev 0x55f08f382d90 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x55f08f401f80 <line:542:3, line:543:19>
| | |-ParagraphComment 0x55f08f401eb0 <line:542:3>
| | | `-TextComment 0x55f08f401e80 <col:3> Text=" "
| | |-VerbatimLineComment 0x55f08f401ed0 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x55f08f401f40 <line:543:3, col:19>
| |   `-TextComment 0x55f08f401f10 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x55f08f326420 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x55f08f326498 parent 0x55f08f1ea6a8 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x55f08f3265a0 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x55f08f402050 <line:549:5, col:59>
| |   `-ParagraphComment 0x55f08f402020 <col:5, col:59>
| |     `-TextComment 0x55f08f401ff0 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x55f08f326630 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x55f08f402120 <line:552:5, col:29>
| |   `-ParagraphComment 0x55f08f4020f0 <col:5, col:29>
| |     `-TextComment 0x55f08f4020c0 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x55f08f3267d8 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x55f08f4022b0 <line:556:4, line:558:4>
| |   |-ParagraphComment 0x55f08f4021e0 <line:556:4, line:557:4>
| |   | |-TextComment 0x55f08f402190 <line:556:4, col:18> Text=" abort function"
| |   | `-TextComment 0x55f08f4021b0 <line:557:4> Text=" "
| |   |-VerbatimLineComment 0x55f08f402200 <col:5, col:22> Text=" K-THREAD-002"
| |   `-ParagraphComment 0x55f08f402270 <line:558:4>
| |     `-TextComment 0x55f08f402240 <col:4> Text=" "
| |-FieldDecl 0x55f08f326900 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x55f08f402380 <line:613:5, col:19>
| |   `-ParagraphComment 0x55f08f402350 <col:5, col:19>
| |     `-TextComment 0x55f08f402320 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x55f08f326978 parent 0x55f08f1ea6a8 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x55f08f326a80 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x55f08f402450 <line:616:5, col:47>
|     `-ParagraphComment 0x55f08f402420 <col:5, col:47>
|       `-TextComment 0x55f08f4023f0 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x55f08f326bb0 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x55f08f2dadb0 'struct k_thread' sugar
|   `-RecordType 0x55f08f2dad20 'struct k_thread'
|     `-Record 0x55f08f326378 'k_thread'
|-TypedefDecl 0x55f08f326c30 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x55f08f2dae10 'struct k_thread *'
|   `-ElaboratedType 0x55f08f2dadb0 'struct k_thread' sugar
|     `-RecordType 0x55f08f2dad20 'struct k_thread'
|       `-Record 0x55f08f326378 'k_thread'
|-EnumDecl 0x55f08f326c88 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x55f08f326d60 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-IntegerLiteral 0x55f08f326d40 <col:10> 'int' 0
| |-EnumConstantDecl 0x55f08f326da8 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x55f08f38bff0 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x55f08f38c318 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x55f08f38c2b0 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x55f08f38c250 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x55f08f38c210 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x55f08f1ea700 'void'
| |     |-PointerType 0x55f08f38c0a0 'const struct k_thread *'
| |     | `-QualType 0x55f08f2dadb1 'const struct k_thread' const
| |     |   `-ElaboratedType 0x55f08f2dadb0 'struct k_thread' sugar
| |     |     `-RecordType 0x55f08f2dad20 'struct k_thread'
| |     |       `-Record 0x55f08f326378 'k_thread'
| |     `-PointerType 0x55f08f1eaba0 'void *'
| |       `-BuiltinType 0x55f08f1ea700 'void'
| `-FullComment 0x55f08f4327e0 <line:630:3, line:631:5>
|   |-ParagraphComment 0x55f08f4024f0 <line:630:3>
|   | `-TextComment 0x55f08f4024c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f402510 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x55f08f4327a0 <line:631:3, col:5>
|     |-TextComment 0x55f08f432720 <col:3> Text=" "
|     |-TextComment 0x55f08f432740 <col:4> Text="@"
|     `-TextComment 0x55f08f432760 <col:5> Text="{"
|-FunctionDecl 0x55f08f38c560 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x55f08f38c3d0 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x55f08f38c448 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x55f08f432ef0 <line:638:3, line:652:14>
|   |-ParagraphComment 0x55f08f432880 <line:638:3>
|   | `-TextComment 0x55f08f432850 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4328a0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55f08f432900 <col:10, col:53>
|   |   `-TextComment 0x55f08f4328d0 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x55f08f432970 <line:640:3, line:641:46>
|   | |-TextComment 0x55f08f432920 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x55f08f432940 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x55f08f4329c0 <line:643:3>
|   | `-TextComment 0x55f08f432990 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4329e0 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x55f08f432a90 <line:643:18, line:644:3>
|   |   |-TextComment 0x55f08f432a40 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x55f08f432a60 <line:644:3> Text=" "
|   |-ParamCommandComment 0x55f08f432ab0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f432b40 <col:20, col:41>
|   |   `-TextComment 0x55f08f432b10 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x55f08f432b90 <line:646:3>
|   | `-TextComment 0x55f08f432b60 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f432bb0 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x55f08f432c60 <line:646:9, line:648:3>
|   |   |-TextComment 0x55f08f432be0 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x55f08f432c00 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x55f08f432c20 <line:648:3> Text=" "
|   |-BlockCommandComment 0x55f08f432c80 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x55f08f432ce0 <col:9, col:23>
|   |   `-TextComment 0x55f08f432cb0 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x55f08f432d00 <col:24, col:71> Text=" k_spin_lock to protect the _kernel.threads"
|   |-ParagraphComment 0x55f08f432d90 <line:649:3, line:650:46>
|   | |-TextComment 0x55f08f432d40 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   | `-TextComment 0x55f08f432d60 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x55f08f432de0 <line:652:3>
|   | `-TextComment 0x55f08f432db0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f432e00 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f432e60 <col:11, col:14>
|       `-TextComment 0x55f08f432e30 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f38c750 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x55f08f38c648 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x55f08f38c6c0 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x55f08f4339f0 <line:657:3, line:681:72>
|   |-ParagraphComment 0x55f08f432f90 <line:657:3>
|   | `-TextComment 0x55f08f432f60 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f432fb0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x55f08f433010 <col:10, col:69>
|   |   `-TextComment 0x55f08f432fe0 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x55f08f433060 <line:659:3, col:44>
|   | `-TextComment 0x55f08f433030 <col:3, col:44> Text=" This routine works exactly the same like "
|   |-VerbatimLineComment 0x55f08f433080 <col:45, col:66> Text=" k_thread_foreach"
|   |-ParagraphComment 0x55f08f4330f0 <line:660:3, col:51>
|   | `-TextComment 0x55f08f4330c0 <col:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x55f08f433140 <line:662:3>
|   | `-TextComment 0x55f08f433110 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f433160 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x55f08f433210 <line:662:18, line:663:3>
|   |   |-TextComment 0x55f08f4331c0 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x55f08f4331e0 <line:663:3> Text=" "
|   |-ParamCommandComment 0x55f08f433230 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4332c0 <col:20, col:41>
|   |   `-TextComment 0x55f08f433290 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x55f08f433310 <line:665:3>
|   | `-TextComment 0x55f08f4332e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f433330 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x55f08f4333e0 <line:665:9, line:667:3>
|   |   |-TextComment 0x55f08f433360 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x55f08f433380 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x55f08f4333a0 <line:667:3> Text=" "
|   |-BlockCommandComment 0x55f08f433400 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x55f08f433460 <col:9, col:23>
|   |   `-TextComment 0x55f08f433430 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x55f08f433480 <col:24, col:80> Text=" k_spin_lock only when accessing the _kernel.threads"
|   |-ParagraphComment 0x55f08f433660 <line:668:3, line:674:3>
|   | |-TextComment 0x55f08f4334c0 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   | |-TextComment 0x55f08f4334e0 <line:669:3, col:38> Text=" If a new task is created when this "
|   | |-InlineCommandComment 0x55f08f433530 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   | |-TextComment 0x55f08f433550 <col:49, col:73> Text=" function is in progress,"
|   | |-TextComment 0x55f08f433570 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   | |-TextComment 0x55f08f433590 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   | |-TextComment 0x55f08f4335b0 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   | |-TextComment 0x55f08f4335d0 <line:673:3, col:15> Text=" enumeration."
|   | `-TextComment 0x55f08f4335f0 <line:674:3> Text=" "
|   `-BlockCommandComment 0x55f08f433680 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x55f08f433960 <line:674:9, line:681:72>
|       |-TextComment 0x55f08f4336b0 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x55f08f433700 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x55f08f433720 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x55f08f433780 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x55f08f4337a0 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x55f08f4337c0 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x55f08f4337e0 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x55f08f433830 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x55f08f433850 <col:67, col:71> Text=" task"
|       |-TextComment 0x55f08f433870 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x55f08f433890 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x55f08f4338b0 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x55f08f4338d0 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x55f08f390010 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x55f08f38c968 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55f08f38c9d8 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55f08f38ca48 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f38cae0 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55f08f38cb58 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x55f08f38cbd0 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x55f08f38cc48 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x55f08f38ccc0 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x55f08f38cd30 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55f08f38cda0 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x55f08f434870 <line:746:3, line:778:1>
|   |-ParagraphComment 0x55f08f433a90 <line:746:3>
|   | `-TextComment 0x55f08f433a60 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f433ab0 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x55f08f433b10 <col:10, col:26>
|   |   `-TextComment 0x55f08f433ae0 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x55f08f433b60 <line:748:3, col:70>
|   | `-TextComment 0x55f08f433b30 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x55f08f433c20 <line:750:3, line:753:11>
|   | |-TextComment 0x55f08f433b80 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x55f08f433ba0 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x55f08f433bc0 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x55f08f433be0 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x55f08f433cc0 <line:755:3, line:757:44>
|   | |-TextComment 0x55f08f433c40 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x55f08f433c60 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x55f08f433c80 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x55f08f433d80 <line:759:3, line:762:13>
|   | |-TextComment 0x55f08f433ce0 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x55f08f433d00 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x55f08f433d20 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x55f08f433d40 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x55f08f433dd0 <line:764:3>
|   | `-TextComment 0x55f08f433da0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f433df0 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f433ea0 <line:764:21, line:765:3>
|   |   |-TextComment 0x55f08f433e50 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x55f08f433e70 <line:765:3> Text=" "
|   |-ParamCommandComment 0x55f08f433ec0 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55f08f433f70 <line:765:16, line:766:3>
|   |   |-TextComment 0x55f08f433f20 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x55f08f433f40 <line:766:3> Text=" "
|   |-ParamCommandComment 0x55f08f433f90 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55f08f434040 <line:766:21, line:767:3>
|   |   |-TextComment 0x55f08f433ff0 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x55f08f434010 <line:767:3> Text=" "
|   |-ParamCommandComment 0x55f08f434060 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x55f08f434110 <line:767:16, line:768:3>
|   |   |-TextComment 0x55f08f4340c0 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x55f08f4340e0 <line:768:3> Text=" "
|   |-ParamCommandComment 0x55f08f434130 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x55f08f4341e0 <line:768:13, line:769:3>
|   |   |-TextComment 0x55f08f434190 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x55f08f4341b0 <line:769:3> Text=" "
|   |-ParamCommandComment 0x55f08f434200 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x55f08f4342b0 <line:769:13, line:770:3>
|   |   |-TextComment 0x55f08f434260 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x55f08f434280 <line:770:3> Text=" "
|   |-ParamCommandComment 0x55f08f4342d0 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x55f08f434380 <line:770:13, line:771:3>
|   |   |-TextComment 0x55f08f434330 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x55f08f434350 <line:771:3> Text=" "
|   |-ParamCommandComment 0x55f08f4343a0 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x55f08f434450 <line:771:15, line:772:3>
|   |   |-TextComment 0x55f08f434400 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x55f08f434420 <line:772:3> Text=" "
|   |-ParamCommandComment 0x55f08f434470 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x55f08f434520 <line:772:18, line:773:3>
|   |   |-TextComment 0x55f08f4344d0 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x55f08f4344f0 <line:773:3> Text=" "
|   |-ParamCommandComment 0x55f08f434540 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x55f08f4345d0 <col:16, col:80>
|   |   `-TextComment 0x55f08f4345a0 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x55f08f434620 <line:775:3>
|   | `-TextComment 0x55f08f4345f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f434640 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x55f08f4346a0 <col:11, col:28>
|   |   `-TextComment 0x55f08f434670 <col:11, col:28> Text=" ID of new thread."
|   |-ParagraphComment 0x55f08f4346f0 <line:777:3>
|   | `-TextComment 0x55f08f4346c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f434730 <col:4, col:21> Text=" K-THREAD-001"
|   `-ParagraphComment 0x55f08f4347a0 <line:778:1>
|     `-TextComment 0x55f08f434770 <col:1> Text=" "
|-FunctionDecl 0x55f08f390480 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55f08f390138 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55f08f3901b0 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x55f08f390228 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x55f08f3902a0 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x55f08f434e20 <line:787:3, line:794:1>
|   |-ParagraphComment 0x55f08f434910 <line:787:3>
|   | `-TextComment 0x55f08f4348e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f434930 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x55f08f434990 <col:10, col:61>
|   |   `-TextComment 0x55f08f434960 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x55f08f4349e0 <line:789:3>
|   | `-TextComment 0x55f08f4349b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f434a00 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x55f08f434ab0 <line:789:16, line:790:3>
|   |   |-TextComment 0x55f08f434a60 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x55f08f434a80 <line:790:3> Text=" "
|   |-ParamCommandComment 0x55f08f434ad0 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x55f08f434b80 <line:790:13, line:791:3>
|   |   |-TextComment 0x55f08f434b30 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x55f08f434b50 <line:791:3> Text=" "
|   |-ParamCommandComment 0x55f08f434ba0 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x55f08f434c50 <line:791:13, line:792:3>
|   |   |-TextComment 0x55f08f434c00 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x55f08f434c20 <line:792:3> Text=" "
|   |-ParamCommandComment 0x55f08f434c70 <col:4, line:793:3> [in] implicitly Param="p3" ParamIndex=3
|   | `-ParagraphComment 0x55f08f434d20 <line:792:13, line:793:3>
|   |   |-TextComment 0x55f08f434cd0 <line:792:13, col:38> Text=" 3rd entry point parameter"
|   |   `-TextComment 0x55f08f434cf0 <line:793:3> Text=" "
|   |-VerbatimLineComment 0x55f08f434d40 <col:4, col:21> Text=" K-THREAD-003"
|   `-ParagraphComment 0x55f08f434db0 <line:794:1>
|     `-TextComment 0x55f08f434d80 <col:1> Text=" "
|-FunctionDecl 0x55f08f390760 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x55f08f3905c0 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x55f08f390648 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x55f08f390918 <line:833:1, line:835:1>
| | `-BinaryOperator 0x55f08f3908c8 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x55f08f390850 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x55f08f326900
| |   | `-ImplicitCastExpr 0x55f08f390838 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55f08f390810 <col:2> 'struct k_thread *' lvalue ParmVar 0x55f08f3905c0 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x55f08f3908b0 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f390888 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x55f08f390648 'pool' 'struct k_mem_pool *'
| `-FullComment 0x55f08f435370 <line:817:3, line:830:1>
|   |-ParagraphComment 0x55f08f434ec0 <line:817:3>
|   | `-TextComment 0x55f08f434e90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f434ee0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55f08f434f40 <col:10, col:51>
|   |   `-TextComment 0x55f08f434f10 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x55f08f434fe0 <line:819:3, line:821:51>
|   | |-TextComment 0x55f08f434f60 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x55f08f434f80 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x55f08f434fa0 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x55f08f435050 <line:823:3, line:824:17>
|   | |-TextComment 0x55f08f435000 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x55f08f435020 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x55f08f4350a0 <line:826:3>
|   | `-TextComment 0x55f08f435070 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4350c0 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4351a0 <line:826:17, line:828:3>
|   |   |-TextComment 0x55f08f435120 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x55f08f435140 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x55f08f435160 <line:828:3> Text=" "
|   |-ParamCommandComment 0x55f08f4351c0 <col:4, line:829:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x55f08f435270 <line:828:15, line:829:3>
|   |   |-TextComment 0x55f08f435220 <line:828:15, col:48> Text=" Memory pool to use for resources."
|   |   `-TextComment 0x55f08f435240 <line:829:3> Text=" "
|   |-VerbatimLineComment 0x55f08f435290 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x55f08f435300 <line:830:1>
|     `-TextComment 0x55f08f4352d0 <col:1> Text=" "
|-FunctionDecl 0x55f08f390a40 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55f08f390940 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x55f08f435850 <line:855:3, line:863:1>
|   |-ParagraphComment 0x55f08f435410 <line:855:3>
|   | `-TextComment 0x55f08f4353e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f435430 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f435490 <col:10, col:42>
|   |   `-TextComment 0x55f08f435460 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x55f08f435560 <line:857:3, col:78>
|   | |-TextComment 0x55f08f4354b0 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x55f08f435500 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x55f08f435520 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x55f08f4355b0 <line:859:3>
|   | `-TextComment 0x55f08f435580 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4355d0 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x55f08f435660 <col:13, col:45>
|   |   `-TextComment 0x55f08f435630 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x55f08f4356b0 <line:861:3>
|   | `-TextComment 0x55f08f435680 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4356d0 <col:4, line:862:44> Name="return"
|   | `-ParagraphComment 0x55f08f435750 <line:861:11, line:862:44>
|   |   |-TextComment 0x55f08f435700 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|   |   `-TextComment 0x55f08f435720 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x55f08f435770 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x55f08f4357e0 <line:863:1>
|     `-TextComment 0x55f08f4357b0 <col:1> Text=" "
|-FunctionDecl 0x55f08f390bb0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55f08f390b28 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x55f08f435d50 <line:867:3, line:879:1>
|   |-ParagraphComment 0x55f08f4358f0 <line:867:3>
|   | `-TextComment 0x55f08f4358c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f435910 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x55f08f435970 <col:10, col:70>
|   |   `-TextComment 0x55f08f435940 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x55f08f435a60 <line:869:3, line:873:71>
|   | |-TextComment 0x55f08f435990 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x55f08f4359b0 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x55f08f4359d0 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x55f08f4359f0 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x55f08f435a10 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x55f08f435ab0 <line:875:3>
|   | `-TextComment 0x55f08f435a80 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f435ad0 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x55f08f435b60 <col:13, col:45>
|   |   `-TextComment 0x55f08f435b30 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x55f08f435bb0 <line:877:3>
|   | `-TextComment 0x55f08f435b80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f435bd0 <col:4, line:878:44> Name="return"
|   | `-ParagraphComment 0x55f08f435c50 <line:877:11, line:878:44>
|   |   |-TextComment 0x55f08f435c00 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|   |   `-TextComment 0x55f08f435c20 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x55f08f435c70 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x55f08f435ce0 <line:879:1>
|     `-TextComment 0x55f08f435cb0 <col:1> Text=" "
|-FunctionDecl 0x55f08f390d60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x55f08f390c98 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x55f08f436080 <line:883:3, line:888:14>
|   |-ParagraphComment 0x55f08f435df0 <line:883:3>
|   | `-TextComment 0x55f08f435dc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f435e10 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55f08f435e70 <col:10, col:48>
|   |   `-TextComment 0x55f08f435e40 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x55f08f435f60 <line:885:3, line:886:32>
|   | |-TextComment 0x55f08f435e90 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x55f08f435eb0 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x55f08f435f00 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x55f08f435f20 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x55f08f435fb0 <line:888:3>
|   | `-TextComment 0x55f08f435f80 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f435fd0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f436030 <col:11, col:14>
|       `-TextComment 0x55f08f436000 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f390ec8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x55f08f436420 <line:893:3, line:901:1>
|   |-ParagraphComment 0x55f08f436120 <line:893:3>
|   | `-TextComment 0x55f08f4360f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f436140 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55f08f4361a0 <col:10, col:35>
|   |   `-TextComment 0x55f08f436170 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x55f08f436240 <line:895:3, line:897:67>
|   | |-TextComment 0x55f08f4361c0 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x55f08f4361e0 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x55f08f436200 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x55f08f436290 <line:899:3>
|   | `-TextComment 0x55f08f436260 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4362b0 <col:4, line:900:3> Name="return"
|   | `-ParagraphComment 0x55f08f436330 <line:899:11, line:900:3>
|   |   |-TextComment 0x55f08f4362e0 <line:899:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f436300 <line:900:3> Text=" "
|   |-VerbatimLineComment 0x55f08f436350 <col:4, col:21> Text=" K-THREAD-015"
|   `-ParagraphComment 0x55f08f4363c0 <line:901:1>
|     `-TextComment 0x55f08f436390 <col:1> Text=" "
|-FunctionDecl 0x55f08f3910c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f390fa8 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f4369e0 <line:905:3, line:915:1>
|   |-ParagraphComment 0x55f08f4364c0 <line:905:3>
|   | `-TextComment 0x55f08f436490 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4364e0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55f08f436540 <col:10, col:36>
|   |   `-TextComment 0x55f08f436510 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x55f08f436610 <line:907:3, col:61>
|   | |-TextComment 0x55f08f436560 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x55f08f4365b0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55f08f4365d0 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x55f08f4366e0 <line:909:3, col:69>
|   | |-TextComment 0x55f08f436630 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55f08f436680 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55f08f4366a0 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x55f08f436740 <line:911:3>
|   | `-TextComment 0x55f08f436700 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f436760 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4367f0 <col:17, col:38>
|   |   `-TextComment 0x55f08f4367c0 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x55f08f436840 <line:913:3>
|   | `-TextComment 0x55f08f436810 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f436860 <col:4, line:914:3> Name="return"
|   | `-ParagraphComment 0x55f08f4368e0 <line:913:11, line:914:3>
|   |   |-TextComment 0x55f08f436890 <line:913:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f4368b0 <line:914:3> Text=" "
|   |-VerbatimLineComment 0x55f08f436900 <col:4, col:21> Text=" K-THREAD-014"
|   `-ParagraphComment 0x55f08f436970 <line:915:1>
|     `-TextComment 0x55f08f436940 <col:1> Text=" "
|-FunctionDecl 0x55f08f391290 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x55f08f436d10 <line:919:3, line:924:1>
|   |-ParagraphComment 0x55f08f436a80 <line:919:3>
|   | `-TextComment 0x55f08f436a50 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f436aa0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55f08f436b00 <col:10, col:46>
|   |   `-TextComment 0x55f08f436ad0 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x55f08f436b50 <line:921:3>
|   | `-TextComment 0x55f08f436b20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f436b70 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x55f08f436bd0 <col:11, col:32>
|   |   `-TextComment 0x55f08f436ba0 <col:11, col:32> Text=" ID of current thread."
|   |-ParagraphComment 0x55f08f436c20 <line:923:3>
|   | `-TextComment 0x55f08f436bf0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f436c40 <col:4, col:21> Text=" K-THREAD-013"
|   `-ParagraphComment 0x55f08f436cb0 <line:924:1>
|     `-TextComment 0x55f08f436c80 <col:1> Text=" "
|-FunctionDecl 0x55f08f3913f0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f391368 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f4372b0 <line:928:3, line:941:1>
|   |-ParagraphComment 0x55f08f436db0 <line:928:3>
|   | `-TextComment 0x55f08f436d80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f436dd0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55f08f436e30 <col:10, col:25>
|   |   `-TextComment 0x55f08f436e00 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x55f08f436fc0 <line:930:3, line:935:38>
|   | |-TextComment 0x55f08f436e50 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x55f08f436ea0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x55f08f436ec0 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x55f08f436ee0 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x55f08f436f00 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x55f08f436f20 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x55f08f436f40 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x55f08f436f60 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x55f08f437010 <line:937:3>
|   | `-TextComment 0x55f08f436fe0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f437030 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4370c0 <col:17, col:39>
|   |   `-TextComment 0x55f08f437090 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x55f08f437110 <line:939:3>
|   | `-TextComment 0x55f08f4370e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f437130 <col:4, line:940:3> Name="return"
|   | `-ParagraphComment 0x55f08f4371b0 <line:939:11, line:940:3>
|   |   |-TextComment 0x55f08f437160 <line:939:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f437180 <line:940:3> Text=" "
|   |-VerbatimLineComment 0x55f08f4371d0 <col:4, col:21> Text=" K-THREAD-012"
|   `-ParagraphComment 0x55f08f437240 <line:941:1>
|     `-TextComment 0x55f08f437210 <col:1> Text=" "
|-FunctionDecl 0x55f08f391560 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f3914d8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f437680 <line:946:3, line:954:1>
|   |-ParagraphComment 0x55f08f437350 <line:946:3>
|   | `-TextComment 0x55f08f437320 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f437370 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55f08f4373d0 <col:10, col:34>
|   |   `-TextComment 0x55f08f4373a0 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x55f08f437470 <line:948:3, line:950:9>
|   | |-TextComment 0x55f08f4373f0 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x55f08f437410 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x55f08f437430 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x55f08f4374c0 <line:952:3>
|   | `-TextComment 0x55f08f437490 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4374e0 <col:4, line:953:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f437590 <line:952:17, line:953:3>
|   |   |-TextComment 0x55f08f437540 <line:952:17, col:32> Text=" thread to start"
|   |   `-TextComment 0x55f08f437560 <line:953:3> Text=" "
|   |-VerbatimLineComment 0x55f08f4375b0 <col:4, col:21> Text=" K-THREAD-011"
|   `-ParagraphComment 0x55f08f437620 <line:954:1>
|     `-TextComment 0x55f08f4375f0 <col:1> Text=" "
|-RecordDecl 0x55f08f391638 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x55f08f391708 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x55f08f391760 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x55f08f3917c0 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x55f08f391818 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x55f08f391878 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x55f08f3918d8 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x55f08f391938 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x55f08f391998 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x55f08f3919f0 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x55f08f391a48 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x55f08f391b30 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x55f08f391b90 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x55f08f391d88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f391c78 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f437b90 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x55f08f437720 <line:1044:3>
|   | `-TextComment 0x55f08f4376f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f437740 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55f08f4377a0 <col:10, col:34>
|   |   `-TextComment 0x55f08f437770 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x55f08f437840 <line:1046:3, col:39>
|   | |-TextComment 0x55f08f4377c0 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x55f08f437810 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x55f08f437890 <line:1048:3>
|   | `-TextComment 0x55f08f437860 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4378b0 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f437940 <col:17, col:55>
|   |   `-TextComment 0x55f08f437910 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x55f08f437990 <line:1050:3>
|   | `-TextComment 0x55f08f437960 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4379b0 <col:4, line:1051:3> Name="return"
|   | `-ParagraphComment 0x55f08f437a90 <line:1050:11, line:1051:3>
|   |   |-TextComment 0x55f08f4379e0 <line:1050:11, col:23> Text=" Priority of "
|   |   |-InlineCommandComment 0x55f08f437a30 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|   |   `-TextComment 0x55f08f437a50 <line:1051:3> Text=" "
|   |-VerbatimLineComment 0x55f08f437ab0 <col:4, col:21> Text=" K-THREAD-009"
|   `-ParagraphComment 0x55f08f437b20 <line:1052:1>
|     `-TextComment 0x55f08f437af0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3926e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55f08f391e68 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55f08f391ee0 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x55f08f438550 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x55f08f437c30 <line:1056:3>
|   | `-TextComment 0x55f08f437c00 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f437c50 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55f08f437cb0 <col:10, col:34>
|   |   `-TextComment 0x55f08f437c80 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x55f08f437d50 <line:1058:3, col:54>
|   | |-TextComment 0x55f08f437cd0 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x55f08f437d20 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x55f08f437e40 <line:1060:3, line:1061:10>
|   | |-TextComment 0x55f08f437d70 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x55f08f437dc0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55f08f437de0 <col:74, col:76> Text=" is"
|   | `-TextComment 0x55f08f437e00 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x55f08f437f30 <line:1063:3, line:1064:75>
|   | |-TextComment 0x55f08f437e60 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x55f08f437e80 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x55f08f437ed0 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55f08f437ef0 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x55f08f437fd0 <line:1066:3, line:1068:41>
|   | |-TextComment 0x55f08f437f50 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x55f08f437f70 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x55f08f437f90 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x55f08f438070 <line:1070:3, line:1072:20>
|   | |-TextComment 0x55f08f437ff0 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x55f08f438010 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x55f08f438030 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x55f08f4380c0 <line:1074:3>
|   | `-TextComment 0x55f08f438090 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4380e0 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f438190 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x55f08f438140 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x55f08f438160 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x55f08f4381b0 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x55f08f438240 <col:15, col:28>
|   |   `-TextComment 0x55f08f438210 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x55f08f438290 <line:1077:3>
|   | `-TextComment 0x55f08f438260 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4382b0 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x55f08f438330 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x55f08f4382e0 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x55f08f438300 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x55f08f438380 <line:1080:3>
|   | `-TextComment 0x55f08f438350 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4383a0 <col:4, line:1081:3> Name="return"
|   | `-ParagraphComment 0x55f08f438420 <line:1080:11, line:1081:3>
|   |   |-TextComment 0x55f08f4383d0 <line:1080:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f4383f0 <line:1081:3> Text=" "
|   |-VerbatimLineComment 0x55f08f438440 <col:4, col:21> Text=" K-THREAD-008"
|   `-ParagraphComment 0x55f08f4384b0 <line:1082:1>
|     `-TextComment 0x55f08f438480 <col:1> Text=" "
|-FunctionDecl 0x55f08f392850 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f3927c8 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f438c60 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x55f08f4385f0 <line:1196:3>
|   | `-TextComment 0x55f08f4385c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f438610 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55f08f438670 <col:10, col:27>
|   |   `-TextComment 0x55f08f438640 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x55f08f4388a0 <line:1198:3, line:1204:48>
|   | |-TextComment 0x55f08f438690 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x55f08f4386e0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55f08f438700 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x55f08f438770 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55f08f438790 <col:66, col:69> Text=" are"
|   | |-TextComment 0x55f08f4387b0 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x55f08f4387d0 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x55f08f4387f0 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x55f08f438810 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x55f08f438830 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x55f08f438970 <line:1206:3, col:64>
|   | |-TextComment 0x55f08f4388c0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55f08f438910 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55f08f438930 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x55f08f4389c0 <line:1208:3>
|   | `-TextComment 0x55f08f438990 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4389e0 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f438a70 <col:17, col:41>
|   |   `-TextComment 0x55f08f438a40 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x55f08f438ac0 <line:1210:3>
|   | `-TextComment 0x55f08f438a90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f438ae0 <col:4, line:1211:3> Name="return"
|   | `-ParagraphComment 0x55f08f438b60 <line:1210:11, line:1211:3>
|   |   |-TextComment 0x55f08f438b10 <line:1210:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f438b30 <line:1211:3> Text=" "
|   |-VerbatimLineComment 0x55f08f438b80 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x55f08f438bf0 <line:1212:1>
|     `-TextComment 0x55f08f438bc0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3929c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f392938 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f439230 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x55f08f438d00 <line:1216:3>
|   | `-TextComment 0x55f08f438cd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f438d20 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55f08f438d80 <col:10, col:36>
|   |   `-TextComment 0x55f08f438d50 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x55f08f438e70 <line:1218:3, line:1219:50>
|   | |-TextComment 0x55f08f438da0 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x55f08f438df0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x55f08f438e10 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x55f08f438e30 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x55f08f438f40 <line:1221:3, col:70>
|   | |-TextComment 0x55f08f438e90 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55f08f438ee0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x55f08f438f00 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x55f08f438f90 <line:1223:3>
|   | `-TextComment 0x55f08f438f60 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f438fb0 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f439040 <col:17, col:40>
|   |   `-TextComment 0x55f08f439010 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x55f08f439090 <line:1225:3>
|   | `-TextComment 0x55f08f439060 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4390b0 <col:4, line:1226:3> Name="return"
|   | `-ParagraphComment 0x55f08f439130 <line:1225:11, line:1226:3>
|   |   |-TextComment 0x55f08f4390e0 <line:1225:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f439100 <line:1226:3> Text=" "
|   |-VerbatimLineComment 0x55f08f439150 <col:4, col:21> Text=" K-THREAD-006"
|   `-ParagraphComment 0x55f08f4391c0 <line:1227:1>
|     `-TextComment 0x55f08f439190 <col:1> Text=" "
|-FunctionDecl 0x55f08f392c30 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x55f08f392aa8 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x55f08f392b20 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x55f08f439b80 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x55f08f4392d0 <line:1231:3>
|   | `-TextComment 0x55f08f4392a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4392f0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f439350 <col:10, col:44>
|   |   `-TextComment 0x55f08f439320 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x55f08f4393c0 <line:1233:3, line:1234:23>
|   | |-TextComment 0x55f08f439370 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x55f08f439390 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x55f08f4395b0 <line:1236:3, line:1240:74>
|   | |-TextComment 0x55f08f4393e0 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x55f08f439430 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x55f08f439450 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x55f08f439470 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x55f08f439490 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x55f08f4394b0 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x55f08f439500 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x55f08f439520 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x55f08f439540 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x55f08f439670 <line:1242:3, line:1245:32>
|   | |-TextComment 0x55f08f4395d0 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x55f08f4395f0 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x55f08f439610 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x55f08f439630 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x55f08f439710 <line:1247:3, line:1249:46>
|   | |-TextComment 0x55f08f439690 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x55f08f4396b0 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x55f08f4396d0 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x55f08f439860 <line:1251:3, col:65>
|   | |-TextComment 0x55f08f439730 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x55f08f439780 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x55f08f4397a0 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x55f08f4397f0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x55f08f439810 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x55f08f4398b0 <line:1253:3>
|   | `-TextComment 0x55f08f439880 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4398d0 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x55f08f439980 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x55f08f439930 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x55f08f439950 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x55f08f4399a0 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x55f08f439a30 <col:15, col:71>
|   |   `-TextComment 0x55f08f439a00 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x55f08f439a80 <line:1256:3>
|   | `-TextComment 0x55f08f439a50 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f439aa0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f439b00 <col:11, col:14>
|       `-TextComment 0x55f08f439ad0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f392df8 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x55f08f439fb0 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x55f08f439c20 <line:1268:3>
|   | `-TextComment 0x55f08f439bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f439c40 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55f08f439ca0 <col:10, col:58>
|   |   `-TextComment 0x55f08f439c70 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x55f08f439d10 <line:1270:3, line:1271:36>
|   | |-TextComment 0x55f08f439cc0 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x55f08f439ce0 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x55f08f439d60 <line:1273:3>
|   | `-TextComment 0x55f08f439d30 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f439d80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f439de0 <col:9, col:31>
|   |   `-TextComment 0x55f08f439db0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f439e30 <line:1275:3>
|   | `-TextComment 0x55f08f439e00 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f439e50 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x55f08f439ed0 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x55f08f439e80 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x55f08f439ea0 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x55f08f439ef0 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x55f08f439f50 <col:11, col:37>
|       `-TextComment 0x55f08f439f20 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x55f08f392f60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x55f08f43a4c0 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x55f08f43a050 <line:1281:3>
|   | `-TextComment 0x55f08f43a020 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43a070 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x55f08f43a0d0 <col:10, col:63>
|   |   `-TextComment 0x55f08f43a0a0 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x55f08f43a170 <line:1283:3, line:1285:52>
|   | |-TextComment 0x55f08f43a0f0 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x55f08f43a110 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x55f08f43a130 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x55f08f43a210 <line:1287:3, line:1289:45>
|   | |-TextComment 0x55f08f43a190 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x55f08f43a1b0 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x55f08f43a1d0 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x55f08f43a260 <line:1291:3>
|   | `-TextComment 0x55f08f43a230 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43a280 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f43a2e0 <col:9, col:31>
|   |   `-TextComment 0x55f08f43a2b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f43a330 <line:1293:3>
|   | `-TextComment 0x55f08f43a300 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43a350 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x55f08f43a3d0 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x55f08f43a380 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x55f08f43a3a0 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x55f08f43a3f0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x55f08f43a450 <col:11, col:55>
|       `-TextComment 0x55f08f43a420 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x55f08f3930b8 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x55f08f393308 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x55f08f3931d8 <line:1311:2, col:31>
| | | `-VarDecl 0x55f08f393168 parent 0x55f08f1ea6a8 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x55f08f393268 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x55f08f393250 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x55f08f393230 <col:9, col:10> 'int' prefix '!'
| |       `-ImplicitCastExpr 0x55f08f393218 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f3931f0 <col:10> 'bool' lvalue Var 0x55f08f393168 'z_sys_post_kernel' 'bool'
| `-FullComment 0x55f08f43b310 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x55f08f43a560 <line:1299:3>
|   | `-TextComment 0x55f08f43a530 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43a580 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x55f08f43a5e0 <col:10, col:64>
|   |   `-TextComment 0x55f08f43a5b0 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x55f08f43a650 <line:1301:3, line:1302:62>
|   | |-TextComment 0x55f08f43a600 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x55f08f43a620 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x55f08f43a6a0 <line:1304:3>
|   | `-TextComment 0x55f08f43a670 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43a6c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f43a720 <col:9, col:31>
|   |   `-TextComment 0x55f08f43a6f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f43b190 <line:1306:3>
|   | `-TextComment 0x55f08f43b160 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43b1b0 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x55f08f43b230 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x55f08f43b1e0 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x55f08f43b200 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x55f08f43b250 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x55f08f43b2b0 <col:11, col:67>
|       `-TextComment 0x55f08f43b280 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x55f08f3933b8 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x55f08f43b7e0 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x55f08f43b3b0 <line:1326:3>
|   | `-TextComment 0x55f08f43b380 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43b3d0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55f08f43b430 <col:10, col:29>
|   |   `-TextComment 0x55f08f43b400 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x55f08f43b520 <line:1328:3, line:1332:78>
|   | |-TextComment 0x55f08f43b450 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x55f08f43b470 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x55f08f43b490 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x55f08f43b4b0 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x55f08f43b4d0 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x55f08f43b570 <line:1334:3, col:42>
|   | `-TextComment 0x55f08f43b540 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x55f08f43b5c0 <line:1336:3>
|   | `-TextComment 0x55f08f43b590 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43b5e0 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x55f08f43b6b0 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x55f08f43b610 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x55f08f43b630 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x55f08f43b650 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x55f08f43b670 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x55f08f43b700 <line:1341:3>
|   | `-TextComment 0x55f08f43b6d0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43b720 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f43b780 <col:11, col:14>
|       `-TextComment 0x55f08f43b750 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f393518 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x55f08f43bac0 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x55f08f43b880 <line:1346:3>
|   | `-TextComment 0x55f08f43b850 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43b8a0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55f08f43b900 <col:10, col:31>
|   |   `-TextComment 0x55f08f43b8d0 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x55f08f43b9a0 <line:1348:3, line:1350:41>
|   | |-TextComment 0x55f08f43b920 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x55f08f43b940 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x55f08f43b960 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x55f08f43b9f0 <line:1352:3>
|   | `-TextComment 0x55f08f43b9c0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43ba10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f43ba70 <col:11, col:14>
|       `-TextComment 0x55f08f43ba40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f3936f0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x55f08f393600 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x55f08f43c050 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x55f08f43bb60 <line:1357:3>
|   | `-TextComment 0x55f08f43bb30 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43bb80 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f43bbe0 <col:10, col:43>
|   |   `-TextComment 0x55f08f43bbb0 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x55f08f43bc80 <line:1359:3, col:71>
|   | |-TextComment 0x55f08f43bc00 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x55f08f43bc20 <col:64> Text="@"
|   | `-TextComment 0x55f08f43bc40 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x55f08f43bd20 <line:1361:3, line:1363:44>
|   | |-TextComment 0x55f08f43bca0 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x55f08f43bcc0 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x55f08f43bce0 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x55f08f43bd70 <line:1365:3>
|   | `-TextComment 0x55f08f43bd40 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43bd90 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43be20 <col:16, col:38>
|   |   `-TextComment 0x55f08f43bdf0 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x55f08f43be70 <line:1367:3>
|   | `-TextComment 0x55f08f43be40 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43be90 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x55f08f43bef0 <col:11, col:14>
|   |   `-TextComment 0x55f08f43bec0 <col:11, col:14> Text=" N/A"
|   |-ParagraphComment 0x55f08f43bf40 <line:1369:3>
|   | `-TextComment 0x55f08f43bf10 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f43bf60 <col:4, col:21> Text=" K-THREAD-016"
|   `-ParagraphComment 0x55f08f43bfd0 <line:1370:1>
|     `-TextComment 0x55f08f43bfa0 <col:1> Text=" "
|-FunctionDecl 0x55f08f393898 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x55f08f43c3a0 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x55f08f43c0f0 <line:1374:3>
|   | `-TextComment 0x55f08f43c0c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43c110 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f43c170 <col:10, col:43>
|   |   `-TextComment 0x55f08f43c140 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x55f08f43c1c0 <line:1376:3, col:63>
|   | `-TextComment 0x55f08f43c190 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x55f08f43c210 <line:1378:3>
|   | `-TextComment 0x55f08f43c1e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43c230 <col:4, line:1379:3> Name="return"
|   | `-ParagraphComment 0x55f08f43c2b0 <line:1378:11, line:1379:3>
|   |   |-TextComment 0x55f08f43c260 <line:1378:11, col:37> Text=" Current custom data value."
|   |   `-TextComment 0x55f08f43c280 <line:1379:3> Text=" "
|   |-VerbatimLineComment 0x55f08f43c2d0 <col:4, col:21> Text=" K-THREAD-007"
|   `-ParagraphComment 0x55f08f43c340 <line:1380:1>
|     `-TextComment 0x55f08f43c310 <col:1> Text=" "
|-FunctionDecl 0x55f08f393b08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x55f08f393978 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55f08f3939f0 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x55f08f43c960 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x55f08f43c440 <line:1384:3>
|   | `-TextComment 0x55f08f43c410 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43c460 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55f08f43c4c0 <col:10, col:33>
|   |   `-TextComment 0x55f08f43c490 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x55f08f43c530 <line:1386:3, line:1387:25>
|   | |-TextComment 0x55f08f43c4e0 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x55f08f43c500 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x55f08f43c580 <line:1389:3>
|   | `-TextComment 0x55f08f43c550 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43c5a0 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43c650 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x55f08f43c600 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x55f08f43c620 <line:1390:3> Text=" "
|   `-ParamCommandComment 0x55f08f43c670 <col:4, line:1394:39> [in] implicitly Param="value" ParamIndex=1
|     `-ParagraphComment 0x55f08f43c910 <line:1390:16, line:1394:39>
|       |-TextComment 0x55f08f43c6d0 <line:1390:16, col:27> Text=" Name string"
|       |-TextComment 0x55f08f43c6f0 <line:1391:3> Text=" "
|       |-InlineCommandComment 0x55f08f43c740 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55f08f43c760 <col:11, col:23> Text=" 0 on success"
|       |-TextComment 0x55f08f43c780 <line:1392:3> Text=" "
|       |-InlineCommandComment 0x55f08f43c7a0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55f08f43c7c0 <col:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|       |-TextComment 0x55f08f43c7e0 <line:1393:3> Text=" "
|       |-InlineCommandComment 0x55f08f43c800 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55f08f43c820 <col:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|       |-TextComment 0x55f08f43c840 <line:1394:3> Text=" "
|       |-InlineCommandComment 0x55f08f43c860 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55f08f43c880 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x55f08f393d08 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x55f08f393bf8 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f43cc90 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x55f08f43ca00 <line:1399:3>
|   | `-TextComment 0x55f08f43c9d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43ca20 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55f08f43ca80 <col:10, col:25>
|   |   `-TextComment 0x55f08f43ca50 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x55f08f43cad0 <line:1401:3, col:27>
|   | `-TextComment 0x55f08f43caa0 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x55f08f43cb20 <line:1403:3>
|   | `-TextComment 0x55f08f43caf0 <col:3> Text=" "
|   `-ParamCommandComment 0x55f08f43cb40 <col:4, line:1404:60> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x55f08f43cc40 <line:1403:20, line:1404:60>
|       |-TextComment 0x55f08f43cba0 <line:1403:20, col:29> Text=" Thread ID"
|       |-TextComment 0x55f08f43cbc0 <line:1404:3> Text=" "
|       |-InlineCommandComment 0x55f08f43cbe0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55f08f43cc00 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x55f08f394008 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x55f08f393de8 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55f08f393e60 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x55f08f393ed0 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x55f08f43d290 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x55f08f43cd30 <line:1409:3>
|   | `-TextComment 0x55f08f43cd00 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43cd50 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55f08f43cdb0 <col:10, col:53>
|   |   `-TextComment 0x55f08f43cd80 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x55f08f43ce00 <line:1411:3>
|   | `-TextComment 0x55f08f43cdd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43ce20 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43ced0 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x55f08f43ce80 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x55f08f43cea0 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x55f08f43cef0 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x55f08f43cfa0 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x55f08f43cf50 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x55f08f43cf70 <line:1413:3> Text=" "
|   `-ParamCommandComment 0x55f08f43cfc0 <col:4, line:1417:20> [in] implicitly Param="size" ParamIndex=2
|     `-ParagraphComment 0x55f08f43d240 <line:1413:15, line:1417:20>
|       |-TextComment 0x55f08f43d020 <line:1413:15, col:38> Text=" Destination buffer size"
|       |-TextComment 0x55f08f43d040 <line:1414:3> Text=" "
|       |-InlineCommandComment 0x55f08f43d060 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55f08f43d080 <col:11, col:47> Text=" -ENOSPC Destination buffer too small"
|       |-TextComment 0x55f08f43d0a0 <line:1415:3> Text=" "
|       |-InlineCommandComment 0x55f08f43d0c0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55f08f43d0e0 <col:11, col:38> Text=" -EFAULT Memory access error"
|       |-TextComment 0x55f08f43d100 <line:1416:3> Text=" "
|       |-InlineCommandComment 0x55f08f43d120 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x55f08f43d140 <col:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|       |-TextComment 0x55f08f43d170 <line:1417:3> Text=" "
|       |-InlineCommandComment 0x55f08f43d190 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55f08f43d1b0 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x55f08f394188 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x55f08f3940f8 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f43d5c0 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x55f08f43d330 <line:1423:3>
|   | `-TextComment 0x55f08f43d300 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43d350 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55f08f43d3b0 <col:10, col:33>
|   |   `-TextComment 0x55f08f43d380 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x55f08f43d400 <line:1425:3, col:45>
|   | `-TextComment 0x55f08f43d3d0 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x55f08f43d450 <line:1427:3>
|   | `-TextComment 0x55f08f43d420 <col:3> Text=" "
|   `-ParamCommandComment 0x55f08f43d470 <col:4, line:1428:61> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x55f08f43d570 <line:1427:20, line:1428:61>
|       |-TextComment 0x55f08f43d4d0 <line:1427:20, col:29> Text=" Thread ID"
|       |-TextComment 0x55f08f43d4f0 <line:1428:3> Text=" "
|       |-InlineCommandComment 0x55f08f43d510 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x55f08f43d530 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x55f08f394408 prev 0x55f08f3835a0 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x55f08f43d710 <line:1514:3, col:24>
| | `-ParagraphComment 0x55f08f43d6e0 <col:3, col:24>
| |   |-TextComment 0x55f08f43d630 <col:3> Text=" "
| |   |-InlineCommandComment 0x55f08f43d680 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55f08f43d6a0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55f08f3944b0 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x55f08f394508 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55f08f3967e0 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x55f08f3968e8 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x55f08f396940 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x55f08f396998 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x55f08f3969f8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x55f08f396be8 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x55f08f396780 'void (*)(struct k_timer *)'
| | `-ParenType 0x55f08f396720 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x55f08f3946a0 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x55f08f1ea700 'void'
| |     `-PointerType 0x55f08f3945b0 'struct k_timer *'
| |       `-ElaboratedType 0x55f08f394550 'struct k_timer' sugar
| |         `-RecordType 0x55f08f383630 'struct k_timer'
| |           `-Record 0x55f08f394408 'k_timer'
| `-FullComment 0x55f08f43dba0 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x55f08f43d7b0 <line:1576:3>
|   | `-TextComment 0x55f08f43d780 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f43d7d0 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x55f08f43d840 <line:1577:3>
|   | `-TextComment 0x55f08f43d810 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43d860 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55f08f43d8c0 <col:10, col:37>
|   |   `-TextComment 0x55f08f43d890 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x55f08f43d960 <line:1579:3, line:1581:54>
|   | |-TextComment 0x55f08f43d8e0 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x55f08f43d900 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x55f08f43d920 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x55f08f43d9b0 <line:1583:3>
|   | `-TextComment 0x55f08f43d980 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43d9d0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43da60 <col:16, col:37>
|   |   `-TextComment 0x55f08f43da30 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55f08f43dab0 <line:1585:3>
|   | `-TextComment 0x55f08f43da80 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43dad0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f43db30 <col:11, col:14>
|       `-TextComment 0x55f08f43db00 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x55f08f396d28 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x55f08f396780 'void (*)(struct k_timer *)'
| | `-ParenType 0x55f08f396720 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x55f08f3946a0 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x55f08f1ea700 'void'
| |     `-PointerType 0x55f08f3945b0 'struct k_timer *'
| |       `-ElaboratedType 0x55f08f394550 'struct k_timer' sugar
| |         `-RecordType 0x55f08f383630 'struct k_timer'
| |           `-Record 0x55f08f394408 'k_timer'
| `-FullComment 0x55f08f43e050 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x55f08f43dc40 <line:1590:3>
|   | `-TextComment 0x55f08f43dc10 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f43dc60 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x55f08f43dcd0 <line:1591:3>
|   | `-TextComment 0x55f08f43dca0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43dcf0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55f08f43dd50 <col:10, col:35>
|   |   `-TextComment 0x55f08f43dd20 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x55f08f43de10 <line:1593:3, line:1596:24>
|   | |-TextComment 0x55f08f43dd70 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x55f08f43dd90 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x55f08f43ddb0 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x55f08f43ddd0 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x55f08f43de60 <line:1598:3>
|   | `-TextComment 0x55f08f43de30 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43de80 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43df10 <col:16, col:37>
|   |   `-TextComment 0x55f08f43dee0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55f08f43df60 <line:1600:3>
|   | `-TextComment 0x55f08f43df30 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43df80 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f43dfe0 <col:11, col:14>
|       `-TextComment 0x55f08f43dfb0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f397050 <line:1630:1, line:1632:27> line:1630:13 used k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x55f08f396e00 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x55f08f396e90 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x55f08f396f20 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x55f08f43e5a0 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x55f08f43e0f0 <line:1620:3>
|   | `-TextComment 0x55f08f43e0c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43e110 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55f08f43e170 <col:10, col:29>
|   |   `-TextComment 0x55f08f43e140 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x55f08f43e1c0 <line:1622:3, col:60>
|   | `-TextComment 0x55f08f43e190 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x55f08f43e210 <line:1624:3>
|   | `-TextComment 0x55f08f43e1e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43e230 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43e2e0 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x55f08f43e290 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x55f08f43e2b0 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x55f08f43e300 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x55f08f43e3b0 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x55f08f43e360 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x55f08f43e380 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x55f08f43e3d0 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x55f08f43e460 <col:18, col:77>
|   |   `-TextComment 0x55f08f43e430 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x55f08f43e4b0 <line:1628:3>
|   | `-TextComment 0x55f08f43e480 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43e4d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f43e530 <col:11, col:14>
|       `-TextComment 0x55f08f43e500 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f397158 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x55f08f397460 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 used k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x55f08f397250 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x55f08f3972c0 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x55f08f397330 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x55f08f43ebb0 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x55f08f43e640 <line:1637:3>
|   | `-TextComment 0x55f08f43e610 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43e660 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x55f08f43e6c0 <col:10, col:24>
|   |   `-TextComment 0x55f08f43e690 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x55f08f43e730 <line:1639:3, line:1640:71>
|   | |-TextComment 0x55f08f43e6e0 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x55f08f43e700 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x55f08f43e7d0 <line:1642:3, line:1644:44>
|   | |-TextComment 0x55f08f43e750 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x55f08f43e770 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x55f08f43e790 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x55f08f43e820 <line:1646:3>
|   | `-TextComment 0x55f08f43e7f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43e840 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43e8f0 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x55f08f43e8a0 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x55f08f43e8c0 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x55f08f43e910 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x55f08f43e9c0 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x55f08f43e970 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x55f08f43e990 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x55f08f43e9e0 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x55f08f43ea70 <col:17, col:51>
|   |   `-TextComment 0x55f08f43ea40 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x55f08f43eac0 <line:1650:3>
|   | `-TextComment 0x55f08f43ea90 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43eae0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f43eb40 <col:11, col:14>
|       `-TextComment 0x55f08f43eb10 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f3975f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f397570 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x55f08f43f180 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x55f08f43ec50 <line:1656:3>
|   | `-TextComment 0x55f08f43ec20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43ec70 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55f08f43ecd0 <col:10, col:23>
|   |   `-TextComment 0x55f08f43eca0 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x55f08f43ed40 <line:1658:3, line:1659:43>
|   | |-TextComment 0x55f08f43ecf0 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x55f08f43ed10 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x55f08f43edb0 <line:1661:3, line:1662:23>
|   | |-TextComment 0x55f08f43ed60 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x55f08f43ed80 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x55f08f43ee00 <line:1664:3>
|   | `-TextComment 0x55f08f43edd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43ee20 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x55f08f43ef20 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x55f08f43ee50 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x55f08f43ee70 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x55f08f43eec0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x55f08f43eee0 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x55f08f43ef70 <line:1667:3>
|   | `-TextComment 0x55f08f43ef40 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43ef90 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43f020 <col:16, col:37>
|   |   `-TextComment 0x55f08f43eff0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55f08f43f070 <line:1669:3>
|   | `-TextComment 0x55f08f43f040 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43f090 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f43f0f0 <col:11, col:14>
|       `-TextComment 0x55f08f43f0c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f398080 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f397f80 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x55f08f43f590 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x55f08f43f220 <line:1674:3>
|   | `-TextComment 0x55f08f43f1f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43f240 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55f08f43f2a0 <col:10, col:28>
|   |   `-TextComment 0x55f08f43f270 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x55f08f43f310 <line:1676:3, line:1677:49>
|   | |-TextComment 0x55f08f43f2c0 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x55f08f43f2e0 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x55f08f43f360 <line:1679:3, col:58>
|   | `-TextComment 0x55f08f43f330 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x55f08f43f3b0 <line:1681:3>
|   | `-TextComment 0x55f08f43f380 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43f3d0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43f460 <col:16, col:37>
|   |   `-TextComment 0x55f08f43f430 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55f08f43f4b0 <line:1683:3>
|   | `-TextComment 0x55f08f43f480 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43f4d0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55f08f43f530 <col:11, col:24>
|       `-TextComment 0x55f08f43f500 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x55f08f398208 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f398180 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x55f08f43fa70 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x55f08f43f630 <line:1688:3>
|   | `-TextComment 0x55f08f43f600 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43f650 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f43f6b0 <col:10, col:49>
|   |   `-TextComment 0x55f08f43f680 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x55f08f43f770 <line:1690:3, line:1693:73>
|   | |-TextComment 0x55f08f43f6d0 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x55f08f43f6f0 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x55f08f43f710 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x55f08f43f730 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x55f08f43f7c0 <line:1695:3, col:58>
|   | `-TextComment 0x55f08f43f790 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x55f08f43f830 <line:1697:3, line:1698:20>
|   | |-TextComment 0x55f08f43f7e0 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x55f08f43f800 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x55f08f43f880 <line:1700:3>
|   | `-TextComment 0x55f08f43f850 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43f8a0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43f930 <col:16, col:37>
|   |   `-TextComment 0x55f08f43f900 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55f08f43f980 <line:1702:3>
|   | `-TextComment 0x55f08f43f950 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43f9a0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55f08f43fa00 <col:11, col:24>
|       `-TextComment 0x55f08f43f9d0 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x55f08f3983e0 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x55f08f3982d8 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x55f08f398568 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f3984e0 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x55f08f43fe30 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x55f08f43fb10 <line:1709:3>
|   | `-TextComment 0x55f08f43fae0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43fb30 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55f08f43fb90 <col:10, col:57>
|   |   `-TextComment 0x55f08f43fb60 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x55f08f43fc00 <line:1711:3, line:1712:68>
|   | |-TextComment 0x55f08f43fbb0 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x55f08f43fbd0 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x55f08f43fc50 <line:1714:3>
|   | `-TextComment 0x55f08f43fc20 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f43fc70 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f43fd00 <col:16, col:37>
|   |   `-TextComment 0x55f08f43fcd0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55f08f43fd50 <line:1716:3>
|   | `-TextComment 0x55f08f43fd20 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f43fd70 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x55f08f43fdd0 <col:11, col:44>
|       `-TextComment 0x55f08f43fda0 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x55f08f3986c0 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f398638 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x55f08f398c48 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x55f08f398940 <line:1722:2, col:58>
|   | `-VarDecl 0x55f08f398778 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x55f08f398910 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x55f08f3988f8 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f08f3987d8 <col:22> 's32_t (struct _timeout *)' Function 0x55f08f3983e0 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x55f08f398878 <col:42, col:50> 'struct _timeout *' prefix '&'
|   |       `-MemberExpr 0x55f08f398840 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x55f08f3944b0
|   |         `-ImplicitCastExpr 0x55f08f398828 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x55f08f398800 <col:43> 'struct k_timer *' lvalue ParmVar 0x55f08f398638 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x55f08f398c00 <line:1723:2, col:61>
|     `-ConditionalOperator 0x55f08f398b78 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x55f08f3989e0 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x55f08f3989b8 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x55f08f3989a0 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55f08f398958 <col:10> 'const s32_t':'const int' lvalue Var 0x55f08f398778 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x55f08f398980 <col:18> 'int' 0
|       |-CStyleCastExpr 0x55f08f398b30 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x55f08f398ac0 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x55f08f398aa8 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55f08f398a00 <col:30> 'u64_t (u64_t)' Function 0x55f08f368280 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x55f08f398b08 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x55f08f398af0 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x55f08f398a28 <col:52> 'const s32_t':'const int' lvalue Var 0x55f08f398778 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x55f08f398b58 <col:61> 'unsigned int' 0
|-FunctionDecl 0x55f08f398e20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x55f08f398c90 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x55f08f398d08 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x55f08f440440 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x55f08f43fed0 <line:1727:3>
|   | `-TextComment 0x55f08f43fea0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f43fef0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x55f08f43ff50 <col:10, col:52>
|   |   `-TextComment 0x55f08f43ff20 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x55f08f4400c0 <line:1729:3, line:1730:9>
|   | |-TextComment 0x55f08f43ff70 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x55f08f43ffc0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x55f08f43ffe0 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x55f08f440030 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x55f08f440050 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x55f08f440070 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x55f08f440130 <line:1732:3, line:1733:73>
|   | |-TextComment 0x55f08f4400e0 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x55f08f440100 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x55f08f440180 <line:1735:3>
|   | `-TextComment 0x55f08f440150 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4401a0 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f440250 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x55f08f440200 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x55f08f440220 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x55f08f440270 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f440300 <col:20, col:58>
|   |   `-TextComment 0x55f08f4402d0 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x55f08f440350 <line:1738:3>
|   | `-TextComment 0x55f08f440320 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f440370 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f4403d0 <col:11, col:14>
|       `-TextComment 0x55f08f4403a0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f399448 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x55f08f398f20 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x55f08f3993b8 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x55f08f399608 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x55f08f3995b0 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x55f08f399538 <col:2, col:9> 'void *' lvalue ->user_data 0x55f08f3969f8
| |   | `-ImplicitCastExpr 0x55f08f399520 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55f08f3994f8 <col:2> 'struct k_timer *' lvalue ParmVar 0x55f08f398f20 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x55f08f399598 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f399570 <col:21> 'void *' lvalue ParmVar 0x55f08f3993b8 'user_data' 'void *'
| `-FullComment 0x55f08f440530 <line:1743:3, col:12>
|   `-ParagraphComment 0x55f08f440500 <col:3, col:12>
|     |-TextComment 0x55f08f4404b0 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f4404d0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f399758 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f399648 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x55f08f440870 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x55f08f4405d0 <line:1752:3>
|   | `-TextComment 0x55f08f4405a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4405f0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x55f08f440650 <col:10, col:55>
|   |   `-TextComment 0x55f08f440620 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x55f08f4406a0 <line:1754:3>
|   | `-TextComment 0x55f08f440670 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4406c0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x55f08f440750 <col:16, col:37>
|   |   `-TextComment 0x55f08f440720 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x55f08f4407a0 <line:1756:3>
|   | `-TextComment 0x55f08f440770 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4407c0 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x55f08f440820 <col:11, col:25>
|       `-TextComment 0x55f08f4407f0 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x55f08f3998b8 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f399828 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x55f08f399a98 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x55f08f3999f0 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x55f08f3999d8 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55f08f3999a0 <col:9, col:16> 'void *' lvalue ->user_data 0x55f08f3969f8
|         `-ImplicitCastExpr 0x55f08f399988 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x55f08f399960 <col:9> 'struct k_timer *' lvalue ParmVar 0x55f08f399828 'timer' 'struct k_timer *'
|-FunctionDecl 0x55f08f399b40 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x55f08f440d50 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x55f08f440910 <line:1773:3>
|   | `-TextComment 0x55f08f4408e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f440930 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55f08f440990 <col:10, col:28>
|   |   `-TextComment 0x55f08f440960 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x55f08f440a00 <line:1775:3, line:1776:19>
|   | |-TextComment 0x55f08f4409b0 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x55f08f4409d0 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x55f08f440a50 <line:1778:3>
|   | `-TextComment 0x55f08f440a20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f440a70 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x55f08f440c20 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x55f08f440aa0 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x55f08f440af0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x55f08f440b10 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x55f08f440b30 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x55f08f440b50 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x55f08f440b70 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x55f08f440bc0 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x55f08f440c70 <line:1785:3>
|   | `-TextComment 0x55f08f440c40 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f440c90 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x55f08f440cf0 <col:11, col:42>
|       `-TextComment 0x55f08f440cc0 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x55f08f399ca0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x55f08f399e48 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x55f08f399da0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x55f08f399db0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x55f08f399e00 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x55f08f399de0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     `-IntegerLiteral 0x55f08f399dc0 <col:16> 'int' 0
| |-DeprecatedAttr 0x55f08f399d40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x55f08f440ff0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x55f08f440df0 <line:1790:3>
|   | `-TextComment 0x55f08f440dc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f440e10 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55f08f440e70 <col:10, col:51>
|   |   `-TextComment 0x55f08f440e40 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x55f08f440f10 <line:1792:3, line:1794:11>
|   | |-TextComment 0x55f08f440e90 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x55f08f440eb0 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x55f08f440ed0 <line:1794:3, col:11> Text=" kconfig."
|   `-ParagraphComment 0x55f08f440fb0 <line:1796:3, col:56>
|     |-TextComment 0x55f08f440f30 <col:3> Text=" "
|     |-InlineCommandComment 0x55f08f440f50 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55f08f440f70 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x55f08f399f00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x55f08f39a048 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x55f08f39a000 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x55f08f39a010 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x55f08f399fa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x55f08f441210 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x55f08f441090 <line:1809:3>
|   | `-TextComment 0x55f08f441060 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4410b0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x55f08f441110 <col:10, col:52>
|   |   `-TextComment 0x55f08f4410e0 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x55f08f4411d0 <line:1811:3, line:1813:11>
|     |-TextComment 0x55f08f441130 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x55f08f441150 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x55f08f441190 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x55f08f39a0f8 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x55f08f39a2d8 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x55f08f39a290 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x55f08f39a268 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f39a230 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x55f08f39a218 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55f08f39a198 <col:16> 's64_t (void)' Function 0x55f08f399b40 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x55f08f441780 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x55f08f4412b0 <line:1824:3>
|   | `-TextComment 0x55f08f441280 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4412d0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55f08f441330 <col:10, col:45>
|   |   `-TextComment 0x55f08f441300 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x55f08f4413a0 <line:1826:3, line:1827:16>
|   | |-TextComment 0x55f08f441350 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x55f08f441370 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x55f08f441490 <line:1829:3, line:1833:38>
|   | |-TextComment 0x55f08f4413c0 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x55f08f4413e0 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x55f08f441400 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x55f08f441420 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x55f08f441440 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x55f08f4414e0 <line:1835:3>
|   | `-TextComment 0x55f08f4414b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f441500 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x55f08f441650 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x55f08f441530 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x55f08f441550 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x55f08f441570 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x55f08f441590 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x55f08f4415b0 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x55f08f4415d0 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x55f08f4415f0 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x55f08f4416a0 <line:1842:3>
|   | `-TextComment 0x55f08f441670 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4416c0 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x55f08f441720 <col:11, col:66>
|       `-TextComment 0x55f08f4416f0 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x55f08f39a5e0 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x55f08f39a4e0 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x55f08f39aac8 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x55f08f39a780 <line:1862:2, col:21>
| | | |-VarDecl 0x55f08f39a698 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x55f08f39a708 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x55f08f39a828 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x55f08f39a798 <col:2> 's64_t':'long long' lvalue Var 0x55f08f39a698 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x55f08f39a800 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x55f08f39a7e8 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x55f08f39a7c0 <col:11> 's64_t (void)' Function 0x55f08f399b40 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x55f08f39a958 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x55f08f39a850 <col:2> 's64_t':'long long' lvalue Var 0x55f08f39a708 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x55f08f39a930 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x55f08f39a900 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x55f08f39a878 <col:10> 's64_t':'long long' lvalue Var 0x55f08f39a698 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x55f08f39a918 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x55f08f39a8e0 <col:19, col:20> 's64_t':'long long' lvalue prefix '*'
| | |       `-ImplicitCastExpr 0x55f08f39a8c8 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x55f08f39a8a0 <col:20> 's64_t *' lvalue ParmVar 0x55f08f39a4e0 'reftime' 's64_t *'
| | |-BinaryOperator 0x55f08f39aa20 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x55f08f39a9c0 <col:2, col:3> 's64_t':'long long' lvalue prefix '*'
| | | | `-ImplicitCastExpr 0x55f08f39a9a8 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x55f08f39a980 <col:3> 's64_t *' lvalue ParmVar 0x55f08f39a4e0 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x55f08f39aa08 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f08f39a9e0 <col:13> 's64_t':'long long' lvalue Var 0x55f08f39a698 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x55f08f39aa88 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x55f08f39aa70 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f39aa48 <col:9> 's64_t':'long long' lvalue Var 0x55f08f39a708 'delta' 's64_t':'long long'
| `-FullComment 0x55f08f441b60 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x55f08f441820 <line:1850:3>
|   | `-TextComment 0x55f08f4417f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f441840 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55f08f4418a0 <col:10, col:27>
|   |   `-TextComment 0x55f08f441870 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x55f08f441910 <line:1852:3, line:1853:50>
|   | |-TextComment 0x55f08f4418c0 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x55f08f4418e0 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x55f08f441960 <line:1855:3>
|   | `-TextComment 0x55f08f441930 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f441980 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x55f08f441a30 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x55f08f4419e0 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x55f08f441a00 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x55f08f441a80 <line:1858:3>
|   | `-TextComment 0x55f08f441a50 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f441aa0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55f08f441b00 <col:11, col:24>
|       `-TextComment 0x55f08f441ad0 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x55f08f39ac10 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x55f08f39ab10 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x55f08f39ae48 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x55f08f39ae00 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x55f08f39add8 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x55f08f39ad80 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x55f08f39ad68 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f39acb8 <col:16> 's64_t (s64_t *)' Function 0x55f08f39a5e0 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x55f08f39adb0 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f39ace0 <col:31> 's64_t *' lvalue ParmVar 0x55f08f39ab10 'reftime' 's64_t *'
| `-FullComment 0x55f08f442000 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x55f08f441c00 <line:1872:3>
|   | `-TextComment 0x55f08f441bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f441c20 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f441c80 <col:10, col:44>
|   |   `-TextComment 0x55f08f441c50 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x55f08f441cf0 <line:1874:3, line:1875:50>
|   | |-TextComment 0x55f08f441ca0 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x55f08f441cc0 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x55f08f441db0 <line:1877:3, line:1880:41>
|   | |-TextComment 0x55f08f441d10 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x55f08f441d30 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x55f08f441d50 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x55f08f441d70 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x55f08f441e00 <line:1882:3>
|   | `-TextComment 0x55f08f441dd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f441e20 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x55f08f441ed0 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x55f08f441e80 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x55f08f441ea0 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x55f08f441f20 <line:1885:3>
|   | `-TextComment 0x55f08f441ef0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f441f40 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x55f08f441fa0 <col:11, col:24>
|       `-TextComment 0x55f08f441f70 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x55f08f39aef0 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x55f08f39b098 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x55f08f39b028 <line:1902:2, col:29>
| |   `-CallExpr 0x55f08f39b000 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x55f08f39afe8 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x55f08f39af90 <col:9> 'u32_t (void)' Function 0x55f08f347db8 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x55f08f4422b0 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x55f08f4420a0 <line:1893:3>
|   | `-TextComment 0x55f08f442070 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4420c0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55f08f442120 <col:10, col:34>
|   |   `-TextComment 0x55f08f4420f0 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x55f08f442190 <line:1895:3, line:1896:9>
|   | |-TextComment 0x55f08f442140 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x55f08f442160 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x55f08f4421e0 <line:1898:3>
|   | `-TextComment 0x55f08f4421b0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f442200 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x55f08f442260 <col:11, col:57>
|       `-TextComment 0x55f08f442230 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x55f08f39b0b0 prev 0x55f08f383180 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x55f08f4423d0 <line:1910:3, col:24>
| | `-ParagraphComment 0x55f08f4423a0 <col:3, col:24>
| |   |-TextComment 0x55f08f442320 <col:3> Text=" "
| |   |-InlineCommandComment 0x55f08f442340 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55f08f442360 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55f08f39b148 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x55f08f39b1b0 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x55f08f39b1f8 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x55f08f39b2b0 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55f08f39b390 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x55f08f39b3e8 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x55f08f39b390 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x55f08f39b2b0 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x55f08f39bd28 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x55f08f39bba0 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x55f08f39bc10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x55f08f39c020 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f39bf20 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x55f08f442770 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x55f08f442470 <line:1952:3>
|   | `-TextComment 0x55f08f442440 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f442490 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55f08f4424f0 <col:10, col:29>
|   |   `-TextComment 0x55f08f4424c0 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x55f08f442540 <line:1954:3, col:67>
|   | `-TextComment 0x55f08f442510 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x55f08f442590 <line:1956:3>
|   | `-TextComment 0x55f08f442560 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4425b0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f442640 <col:16, col:37>
|   |   `-TextComment 0x55f08f442610 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55f08f442690 <line:1958:3>
|   | `-TextComment 0x55f08f442660 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4426b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f442710 <col:11, col:14>
|       `-TextComment 0x55f08f4426e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f39c1a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f39c120 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x55f08f442d10 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x55f08f442810 <line:1963:3>
|   | `-TextComment 0x55f08f4427e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f442830 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55f08f442890 <col:10, col:36>
|   |   `-TextComment 0x55f08f442860 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x55f08f442a00 <line:1965:3, line:1969:35>
|   | |-TextComment 0x55f08f4428b0 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x55f08f442900 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x55f08f442920 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x55f08f442940 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x55f08f442960 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x55f08f442980 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x55f08f4429a0 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x55f08f442a50 <line:1971:3>
|   | `-TextComment 0x55f08f442a20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f442a70 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f442ad0 <col:9, col:31>
|   |   `-TextComment 0x55f08f442aa0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f442b20 <line:1973:3>
|   | `-TextComment 0x55f08f442af0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f442b40 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f442bd0 <col:16, col:37>
|   |   `-TextComment 0x55f08f442ba0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55f08f442c20 <line:1975:3>
|   | `-TextComment 0x55f08f442bf0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f442c40 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f442ca0 <col:11, col:14>
|       `-TextComment 0x55f08f442c70 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f39c430 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55f08f39c2a0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39c318 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x55f08f443340 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x55f08f442db0 <line:1980:3>
|   | `-TextComment 0x55f08f442d80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f442dd0 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f442e30 <col:10, col:50>
|   |   `-TextComment 0x55f08f442e00 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x55f08f442f50 <line:1982:3, line:1984:24>
|   | |-TextComment 0x55f08f442e50 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x55f08f442ea0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55f08f442ec0 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x55f08f442ee0 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x55f08f442f00 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x55f08f442fa0 <line:1986:3>
|   | `-TextComment 0x55f08f442f70 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f442fc0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f443020 <col:9, col:31>
|   |   `-TextComment 0x55f08f442ff0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f443070 <line:1988:3>
|   | `-TextComment 0x55f08f443040 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f443090 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f443140 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x55f08f4430f0 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f443110 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x55f08f443160 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f443200 <col:15, col:40>
|   |   `-TextComment 0x55f08f4431d0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55f08f443250 <line:1991:3>
|   | `-TextComment 0x55f08f443220 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f443270 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f4432d0 <col:11, col:14>
|       `-TextComment 0x55f08f4432a0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f39c6c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55f08f39c530 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39c5a8 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x55f08f4439c0 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x55f08f4433e0 <line:1996:3>
|   | `-TextComment 0x55f08f4433b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f443400 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f443460 <col:10, col:39>
|   |   `-TextComment 0x55f08f443430 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x55f08f4435a0 <line:1998:3, line:2001:50>
|   | |-TextComment 0x55f08f443480 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x55f08f4434d0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55f08f4434f0 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x55f08f443510 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x55f08f443530 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x55f08f443550 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x55f08f4435f0 <line:2003:3>
|   | `-TextComment 0x55f08f4435c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f443610 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f443670 <col:9, col:31>
|   |   `-TextComment 0x55f08f443640 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f4436c0 <line:2005:3>
|   | `-TextComment 0x55f08f443690 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4436e0 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f443790 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x55f08f443740 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f443760 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x55f08f4437b0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f443840 <col:15, col:40>
|   |   `-TextComment 0x55f08f443810 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x55f08f443950 <line:2008:3, line:2009:78>
|     |-TextComment 0x55f08f443860 <line:2008:3> Text=" "
|     |-InlineCommandComment 0x55f08f443880 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f4438a0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55f08f4438c0 <line:2009:3> Text=" "
|     |-InlineCommandComment 0x55f08f4438e0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55f08f443900 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x55f08f39c8c8 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55f08f39c7c0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39c838 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x55f08f443fe0 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x55f08f443a60 <line:2014:3>
|   | `-TextComment 0x55f08f443a30 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f443a80 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f443ae0 <col:10, col:40>
|   |   `-TextComment 0x55f08f443ab0 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x55f08f443c00 <line:2016:3, line:2018:24>
|   | |-TextComment 0x55f08f443b00 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x55f08f443b50 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55f08f443b70 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x55f08f443b90 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x55f08f443bb0 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x55f08f443c50 <line:2020:3>
|   | `-TextComment 0x55f08f443c20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f443c70 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f443cd0 <col:9, col:31>
|   |   `-TextComment 0x55f08f443ca0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f443d20 <line:2022:3>
|   | `-TextComment 0x55f08f443cf0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f443d40 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f443df0 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x55f08f443da0 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f443dc0 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x55f08f443e10 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f443ea0 <col:15, col:40>
|   |   `-TextComment 0x55f08f443e70 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55f08f443ef0 <line:2025:3>
|   | `-TextComment 0x55f08f443ec0 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f443f10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f443f70 <col:11, col:14>
|       `-TextComment 0x55f08f443f40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f39cad8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55f08f39c9d0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39ca48 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x55f08f444660 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x55f08f444080 <line:2030:3>
|   | `-TextComment 0x55f08f444050 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4440a0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f444100 <col:10, col:40>
|   |   `-TextComment 0x55f08f4440d0 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x55f08f444240 <line:2032:3, line:2035:50>
|   | |-TextComment 0x55f08f444120 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x55f08f444170 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55f08f444190 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x55f08f4441b0 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x55f08f4441d0 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x55f08f4441f0 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x55f08f444290 <line:2037:3>
|   | `-TextComment 0x55f08f444260 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4442b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f444310 <col:9, col:31>
|   |   `-TextComment 0x55f08f4442e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f444360 <line:2039:3>
|   | `-TextComment 0x55f08f444330 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f444380 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f444430 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x55f08f4443e0 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f444400 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x55f08f444450 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4444e0 <col:15, col:40>
|   |   `-TextComment 0x55f08f4444b0 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x55f08f4445f0 <line:2042:3, line:2043:78>
|     |-TextComment 0x55f08f444500 <line:2042:3> Text=" "
|     |-InlineCommandComment 0x55f08f444520 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f444540 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55f08f444560 <line:2043:3> Text=" "
|     |-InlineCommandComment 0x55f08f444580 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55f08f4445a0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x55f08f39ce20 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x55f08f39cc00 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39cc78 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x55f08f39ccf0 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x55f08f444d60 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x55f08f444700 <line:2048:3>
|   | `-TextComment 0x55f08f4446d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f444720 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f444780 <col:10, col:40>
|   |   `-TextComment 0x55f08f444750 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x55f08f4448a0 <line:2050:3, line:2052:45>
|   | |-TextComment 0x55f08f4447a0 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x55f08f4447f0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55f08f444810 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x55f08f444830 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x55f08f444850 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x55f08f4448f0 <line:2054:3>
|   | `-TextComment 0x55f08f4448c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f444910 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f444970 <col:9, col:31>
|   |   `-TextComment 0x55f08f444940 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f4449c0 <line:2056:3>
|   | `-TextComment 0x55f08f444990 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4449e0 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f444a90 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x55f08f444a40 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f444a60 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x55f08f444ab0 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x55f08f444b60 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x55f08f444b10 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x55f08f444b30 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x55f08f444b80 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x55f08f444c10 <col:15, col:40>
|   |   `-TextComment 0x55f08f444be0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55f08f444c60 <line:2060:3>
|   | `-TextComment 0x55f08f444c30 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f444c80 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f444ce0 <col:11, col:14>
|       `-TextComment 0x55f08f444cb0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f39d158 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x55f08f39cf30 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39cfa8 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x55f08f39d020 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x55f08f445520 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x55f08f444e00 <line:2065:3>
|   | `-TextComment 0x55f08f444dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f444e20 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55f08f444e80 <col:10, col:58>
|   |   `-TextComment 0x55f08f444e50 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x55f08f444fc0 <line:2067:3, line:2070:19>
|   | |-TextComment 0x55f08f444ea0 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x55f08f444ef0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55f08f444f10 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x55f08f444f30 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x55f08f444f50 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x55f08f444f70 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x55f08f445010 <line:2072:3>
|   | `-TextComment 0x55f08f444fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f445030 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f445090 <col:9, col:31>
|   |   `-TextComment 0x55f08f445060 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f4450e0 <line:2074:3>
|   | `-TextComment 0x55f08f4450b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f445100 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4451c0 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x55f08f445160 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f445180 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x55f08f4451e0 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x55f08f445290 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x55f08f445240 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x55f08f445260 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x55f08f4452b0 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x55f08f445340 <col:15, col:58>
|   |   `-TextComment 0x55f08f445310 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x55f08f445450 <line:2078:3, line:2079:43>
|   | |-TextComment 0x55f08f445360 <line:2078:3> Text=" "
|   | |-InlineCommandComment 0x55f08f445380 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4453a0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55f08f4453c0 <line:2079:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4453e0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55f08f445400 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x55f08f4454a0 <line:2081:1>
|     `-TextComment 0x55f08f445470 <col:1> Text=" "
|-FunctionDecl 0x55f08f39d3e8 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x55f08f39d260 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39d2d0 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x55f08f445b80 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x55f08f4455c0 <line:2085:3>
|   | `-TextComment 0x55f08f445590 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4455e0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x55f08f445640 <col:10, col:55>
|   |   `-TextComment 0x55f08f445610 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x55f08f445760 <line:2087:3, line:2089:67>
|   | |-TextComment 0x55f08f445660 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x55f08f4456b0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x55f08f4456d0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x55f08f4456f0 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x55f08f445710 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x55f08f4457b0 <line:2091:3>
|   | `-TextComment 0x55f08f445780 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4457d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f445830 <col:9, col:31>
|   |   `-TextComment 0x55f08f445800 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f445880 <line:2093:3>
|   | `-TextComment 0x55f08f445850 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4458a0 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f445950 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x55f08f445900 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f445920 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x55f08f445970 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x55f08f445a00 <col:15, col:45>
|   |   `-TextComment 0x55f08f4459d0 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   `-ParagraphComment 0x55f08f445b10 <line:2096:3, line:2097:34>
|     |-TextComment 0x55f08f445a20 <line:2096:3> Text=" "
|     |-InlineCommandComment 0x55f08f445a40 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f445a60 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55f08f445a80 <line:2097:3> Text=" "
|     |-InlineCommandComment 0x55f08f445aa0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55f08f445ac0 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x55f08f39d678 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f39d4f0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39d560 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x55f08f446260 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x55f08f445c20 <line:2102:3>
|   | `-TextComment 0x55f08f445bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f445c40 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55f08f445ca0 <col:10, col:38>
|   |   `-TextComment 0x55f08f445c70 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x55f08f445d90 <line:2104:3, line:2105:46>
|   | |-TextComment 0x55f08f445cc0 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x55f08f445d10 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55f08f445d30 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x55f08f445d50 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x55f08f445de0 <line:2107:3>
|   | `-TextComment 0x55f08f445db0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f445e00 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55f08f445ee0 <col:9, col:72>
|   |   |-TextComment 0x55f08f445e30 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55f08f445e80 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55f08f445ea0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55f08f445f30 <line:2109:3>
|   | `-TextComment 0x55f08f445f00 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f445f50 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f446000 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x55f08f445fb0 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f445fd0 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x55f08f446020 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55f08f446100 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x55f08f446080 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x55f08f4460a0 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55f08f4460c0 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55f08f446150 <line:2114:3>
|   | `-TextComment 0x55f08f446120 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f446170 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x55f08f4461f0 <line:2114:11, line:2115:48>
|       |-TextComment 0x55f08f4461a0 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x55f08f4461c0 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x55f08f39d910 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55f08f39d780 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39d7f8 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x55f08f39dc08 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x55f08f39dbc0 <line:2135:2, col:72>
| |   `-CallExpr 0x55f08f39db70 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x55f08f39db58 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f39d9c0 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x55f08f316950 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x55f08f39da60 <col:36, col:44> 'sys_sflist_t *' prefix '&'
| |     | `-MemberExpr 0x55f08f39da28 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55f08f39b148
| |     |   `-ImplicitCastExpr 0x55f08f39da10 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55f08f39d9e8 <col:37> 'struct k_queue *' lvalue ParmVar 0x55f08f39d780 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x55f08f39dad0 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x55f08f39dab8 <col:68> 'void *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f39da80 <col:68> 'void *' lvalue ParmVar 0x55f08f39d7f8 'data' 'void *'
| `-FullComment 0x55f08f446880 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x55f08f446300 <line:2120:3>
|   | `-TextComment 0x55f08f4462d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f446320 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f446380 <col:10, col:41>
|   |   `-TextComment 0x55f08f446350 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x55f08f4464a0 <line:2122:3, line:2124:76>
|   | |-TextComment 0x55f08f4463a0 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x55f08f4463f0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55f08f446410 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x55f08f446430 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x55f08f446450 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x55f08f4464f0 <line:2126:3>
|   | `-TextComment 0x55f08f4464c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f446510 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x55f08f446570 <col:9, col:30>
|   |   `-TextComment 0x55f08f446540 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x55f08f4465c0 <line:2128:3>
|   | `-TextComment 0x55f08f446590 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4465e0 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f446690 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x55f08f446640 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f446660 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x55f08f4466b0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f446740 <col:15, col:40>
|   |   `-TextComment 0x55f08f446710 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55f08f446790 <line:2131:3>
|   | `-TextComment 0x55f08f446760 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4467b0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x55f08f446810 <col:11, col:40>
|       `-TextComment 0x55f08f4467e0 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x55f08f39dd50 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55f08f39dc48 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f39dcc0 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x55f08f39e588 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x55f08f39de70 <line:2154:2, col:20>
| | | `-VarDecl 0x55f08f39de10 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x55f08f39e378 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x55f08f39dfb8 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x55f08f39de88 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x55f08f39de10 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x55f08f39df88 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x55f08f39df70 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55f08f39deb0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x55f08f39df50 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&'
| | | |     `-MemberExpr 0x55f08f39df18 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55f08f39b148
| | | |       `-ImplicitCastExpr 0x55f08f39df00 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x55f08f39ded8 <col:28> 'struct k_queue *' lvalue ParmVar 0x55f08f39dc48 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x55f08f39e0b8 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x55f08f39e088 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x55f08f39dfe0 <col:43> 'sys_sfnode_t *' lvalue Var 0x55f08f39de10 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x55f08f39e0a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x55f08f39e068 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x55f08f39e040 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x55f08f39e008 <col:23> 'int' 0
| | | |-BinaryOperator 0x55f08f39e1b8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x55f08f39e0e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x55f08f39de10 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x55f08f39e170 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x55f08f39e158 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55f08f39e108 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x55f08f30bbf8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x55f08f39e1a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x55f08f39e130 <col:43> 'sys_sfnode_t *' lvalue Var 0x55f08f39de10 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x55f08f39e360 <col:49, line:2160:2>
| | |   `-IfStmt 0x55f08f39e328 <line:2157:3, line:2159:3>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x55f08f39e298 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x55f08f39e280 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x55f08f39e1e0 <col:7> 'sys_sfnode_t *' lvalue Var 0x55f08f39de10 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x55f08f39e258 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x55f08f39e240 <col:32> 'void *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x55f08f39e208 <col:32> 'void *' lvalue ParmVar 0x55f08f39dcc0 'data' 'void *'
| | |     |-CompoundStmt 0x55f08f39e310 <col:38, line:2159:3>
| | |     | `-ReturnStmt 0x55f08f39e2f8 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |     |   `-ImplicitCastExpr 0x55f08f39e2e0 <col:16> 'bool' <IntegralToBoolean>
| | |     |     `-IntegerLiteral 0x55f08f39e2c0 <col:16> 'int' 0
| | |     `-<<<NULL>>>
| | |-CallExpr 0x55f08f39e4a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x55f08f39e488 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x55f08f39e3b0 <col:2> 'void (struct k_queue *, void *)' Function 0x55f08f39c430 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x55f08f39e4d8 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x55f08f39e3d8 <col:17> 'struct k_queue *' lvalue ParmVar 0x55f08f39dc48 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x55f08f39e4f0 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f08f39e400 <col:24> 'void *' lvalue ParmVar 0x55f08f39dcc0 'data' 'void *'
| | `-ReturnStmt 0x55f08f39e540 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x55f08f39e528 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x55f08f39e508 <col:16> 'int' 1
| `-FullComment 0x55f08f446ea0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x55f08f446920 <line:2139:3>
|   | `-TextComment 0x55f08f4468f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f446940 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x55f08f4469a0 <col:10, col:72>
|   |   `-TextComment 0x55f08f446970 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x55f08f446ac0 <line:2141:3, line:2143:78>
|   | |-TextComment 0x55f08f4469c0 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x55f08f446a10 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x55f08f446a30 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x55f08f446a50 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x55f08f446a70 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x55f08f446b10 <line:2145:3>
|   | `-TextComment 0x55f08f446ae0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f446b30 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x55f08f446b90 <col:9, col:30>
|   |   `-TextComment 0x55f08f446b60 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x55f08f446be0 <line:2147:3>
|   | `-TextComment 0x55f08f446bb0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f446c00 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f446cb0 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x55f08f446c60 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x55f08f446c80 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x55f08f446cd0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f446d60 <col:15, col:40>
|   |   `-TextComment 0x55f08f446d30 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x55f08f446db0 <line:2150:3>
|   | `-TextComment 0x55f08f446d80 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f446dd0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x55f08f446e30 <col:11, col:52>
|       `-TextComment 0x55f08f446e00 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x55f08f39e6e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f39e5e0 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x55f08f4473f0 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x55f08f446f40 <line:2167:3>
|   | `-TextComment 0x55f08f446f10 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f446f60 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55f08f446fc0 <col:10, col:56>
|   |   `-TextComment 0x55f08f446f90 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x55f08f447030 <line:2169:3, line:2170:59>
|   | |-TextComment 0x55f08f446fe0 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x55f08f447000 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x55f08f447080 <line:2172:3>
|   | `-TextComment 0x55f08f447050 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4470a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f447100 <col:9, col:31>
|   |   `-TextComment 0x55f08f4470d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f447150 <line:2174:3>
|   | `-TextComment 0x55f08f447120 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f447170 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f447210 <col:16, col:37>
|   |   `-TextComment 0x55f08f4471e0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55f08f447260 <line:2176:3>
|   | `-TextComment 0x55f08f447230 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f447280 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x55f08f447300 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x55f08f4472b0 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x55f08f4472d0 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x55f08f447320 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x55f08f447380 <col:11, col:34>
|       `-TextComment 0x55f08f447350 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x55f08f39e848 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f39e7b8 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x55f08f39ea78 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x55f08f39ea38 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x55f08f39ea10 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x55f08f39e9c8 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x55f08f39e9b0 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55f08f39e8f0 <col:14> 'bool (sys_sflist_t *)' Function 0x55f08f30a360 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x55f08f39e990 <col:34, col:42> 'sys_sflist_t *' prefix '&'
|           `-MemberExpr 0x55f08f39e958 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55f08f39b148
|             `-ImplicitCastExpr 0x55f08f39e940 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x55f08f39e918 <col:35> 'struct k_queue *' lvalue ParmVar 0x55f08f39e7b8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55f08f39f540 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f39eab8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x55f08f447790 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x55f08f447490 <line:2187:3>
|   | `-TextComment 0x55f08f447460 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4474b0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f447510 <col:10, col:44>
|   |   `-TextComment 0x55f08f4474e0 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x55f08f447560 <line:2189:3, col:61>
|   | `-TextComment 0x55f08f447530 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x55f08f4475b0 <line:2191:3>
|   | `-TextComment 0x55f08f447580 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4475d0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f447660 <col:16, col:37>
|   |   `-TextComment 0x55f08f447630 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55f08f4476b0 <line:2193:3>
|   | `-TextComment 0x55f08f447680 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f4476d0 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x55f08f447730 <col:11, col:51>
|       `-TextComment 0x55f08f447700 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x55f08f39f6a0 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f39f610 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x55f08f39f9a8 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x55f08f39f960 <line:2199:2, col:70>
|     `-CallExpr 0x55f08f39f910 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x55f08f39f8f8 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f39f748 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x55f08f39bd28 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x55f08f39f848 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55f08f39f830 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55f08f39f770 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3091d0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x55f08f39f810 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x55f08f39f7d8 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55f08f39b148
|       |     `-ImplicitCastExpr 0x55f08f39f7c0 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x55f08f39f798 <col:49> 'struct k_queue *' lvalue ParmVar 0x55f08f39f610 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55f08f39f948 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x55f08f39f878 <col:16> 'int' 0
|-FunctionDecl 0x55f08f39fa78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f39f9e8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x55f08f447b30 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x55f08f447830 <line:2203:3>
|   | `-TextComment 0x55f08f447800 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f447850 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f4478b0 <col:10, col:44>
|   |   `-TextComment 0x55f08f447880 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x55f08f447900 <line:2205:3, col:61>
|   | `-TextComment 0x55f08f4478d0 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x55f08f447950 <line:2207:3>
|   | `-TextComment 0x55f08f447920 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f447970 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x55f08f447a00 <col:16, col:37>
|   |   `-TextComment 0x55f08f4479d0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x55f08f447a50 <line:2209:3>
|   | `-TextComment 0x55f08f447a20 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f447a70 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x55f08f447ad0 <col:11, col:51>
|       `-TextComment 0x55f08f447aa0 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x55f08f39fbd8 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f39fb48 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x55f08f39fea8 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x55f08f39fe38 <line:2215:2, col:70>
|     `-CallExpr 0x55f08f39fde8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x55f08f39fdd0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f39fc80 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x55f08f39bd28 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x55f08f39fd80 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x55f08f39fd68 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55f08f39fca8 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x55f08f3093f8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x55f08f39fd48 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x55f08f39fd10 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x55f08f39b148
|       |     `-ImplicitCastExpr 0x55f08f39fcf8 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x55f08f39fcd0 <col:49> 'struct k_queue *' lvalue ParmVar 0x55f08f39fb48 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55f08f39fe20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x55f08f39fdb0 <col:16> 'int' 0
|-RecordDecl 0x55f08f39fec0 prev 0x55f08f383230 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x55f08f39ff68 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x55f08f3a0358 prev 0x55f08f3832e0 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x55f08f447c50 <line:2523:4, col:7>
| | `-ParagraphComment 0x55f08f447c20 <col:4, col:7>
| |   |-TextComment 0x55f08f447ba0 <col:4> Text=" "
| |   |-TextComment 0x55f08f447bc0 <col:5> Text="@"
| |   `-TextComment 0x55f08f447be0 <col:6, col:7> Text="} "
| `-FieldDecl 0x55f08f3a0400 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x55f08f29cdb8 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x55f08f3270f0 'uintptr_t' sugar
|   |-Typedef 0x55f08f26a290 'uintptr_t'
|   `-BuiltinType 0x55f08f1ea860 'unsigned long'
|-RecordDecl 0x55f08f29ce10 prev 0x55f08f383390 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x55f08f29cea8 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55f08f29cf10 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x55f08f29cfe8 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x55f08f29d040 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x55f08f29d098 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x55f08f29d0f0 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x55f08f29d490 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x55f08f29d280 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x55f08f29d2f0 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x55f08f29d360 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x55f08f448260 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x55f08f447cf0 <line:2675:3>
|   | `-TextComment 0x55f08f447cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f447d10 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55f08f447d70 <col:10, col:29>
|   |   `-TextComment 0x55f08f447d40 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x55f08f447dc0 <line:2677:3, col:67>
|   | `-TextComment 0x55f08f447d90 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x55f08f447e10 <line:2679:3>
|   | `-TextComment 0x55f08f447de0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f447e30 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55f08f447ee0 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x55f08f447e90 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55f08f447eb0 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x55f08f447f00 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55f08f447fb0 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x55f08f447f60 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x55f08f447f80 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x55f08f447fd0 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x55f08f448060 <col:22, col:67>
|   |   `-TextComment 0x55f08f448030 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x55f08f4480b0 <line:2683:3>
|   | `-TextComment 0x55f08f448080 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4480d0 <col:4, line:2684:3> Name="return"
|   | `-ParagraphComment 0x55f08f448150 <line:2683:11, line:2684:3>
|   |   |-TextComment 0x55f08f448100 <line:2683:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f448120 <line:2684:3> Text=" "
|   |-VerbatimLineComment 0x55f08f448170 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55f08f4481e0 <line:2685:1>
|     `-TextComment 0x55f08f4481b0 <col:1> Text=" "
|-FunctionDecl 0x55f08f29d720 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x55f08f29d5a0 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x55f08f29d610 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x55f08f448800 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x55f08f448300 <line:2691:3>
|   | `-TextComment 0x55f08f4482d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f448320 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55f08f448380 <col:10, col:29>
|   |   `-TextComment 0x55f08f448350 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x55f08f448440 <line:2693:3, line:2696:72>
|   | |-TextComment 0x55f08f4483a0 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x55f08f4483c0 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x55f08f4483e0 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x55f08f448400 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x55f08f448490 <line:2698:3>
|   | `-TextComment 0x55f08f448460 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4484b0 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55f08f448560 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x55f08f448510 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55f08f448530 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x55f08f448580 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x55f08f448610 <col:22, col:67>
|   |   `-TextComment 0x55f08f4485e0 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x55f08f448660 <line:2701:3>
|   | `-TextComment 0x55f08f448630 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f448680 <col:4, line:2702:3> Name="return"
|   | `-ParagraphComment 0x55f08f448700 <line:2701:11, line:2702:3>
|   |   |-TextComment 0x55f08f4486b0 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x55f08f4486d0 <line:2702:3> Text=" "
|   |-VerbatimLineComment 0x55f08f448720 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55f08f448790 <line:2703:1>
|     `-TextComment 0x55f08f448760 <col:1> Text=" "
|-FunctionDecl 0x55f08f29d928 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x55f08f29d820 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x55f08f448cc0 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x55f08f4488a0 <line:2709:3>
|   | `-TextComment 0x55f08f448870 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4488c0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f448920 <col:10, col:44>
|   |   `-TextComment 0x55f08f4488f0 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x55f08f4489c0 <line:2711:3, line:2713:46>
|   | |-TextComment 0x55f08f448940 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x55f08f448960 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x55f08f448980 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x55f08f448a10 <line:2715:3>
|   | `-TextComment 0x55f08f4489e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f448a30 <col:4, line:2718:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55f08f448bd0 <line:2715:16, line:2718:3>
|   |   |-TextComment 0x55f08f448a90 <line:2715:16, col:37> Text=" Address of the stack."
|   |   |-TextComment 0x55f08f448ab0 <line:2716:3> Text=" "
|   |   |-InlineCommandComment 0x55f08f448ad0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55f08f448af0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x55f08f448b10 <line:2717:3> Text=" "
|   |   |-InlineCommandComment 0x55f08f448b30 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55f08f448b50 <col:11, col:46> Text=" -EAGAIN when object is still in use"
|   |   `-TextComment 0x55f08f448b70 <line:2718:3> Text=" "
|   |-VerbatimLineComment 0x55f08f448bf0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55f08f448c60 <line:2719:1>
|     `-TextComment 0x55f08f448c30 <col:1> Text=" "
|-FunctionDecl 0x55f08f29dba8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x55f08f29da20 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x55f08f29da90 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x55f08f449400 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x55f08f448d60 <line:2723:3>
|   | `-TextComment 0x55f08f448d30 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f448d80 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f448de0 <col:10, col:39>
|   |   `-TextComment 0x55f08f448db0 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x55f08f448f00 <line:2725:3, col:55>
|   | |-TextComment 0x55f08f448e00 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x55f08f448e50 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x55f08f448e70 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x55f08f448ec0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x55f08f448f50 <line:2727:3>
|   | `-TextComment 0x55f08f448f20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f448f70 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f448fd0 <col:9, col:31>
|   |   `-TextComment 0x55f08f448fa0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f449020 <line:2729:3>
|   | `-TextComment 0x55f08f448ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f449040 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4490f0 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x55f08f4490a0 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55f08f4490c0 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x55f08f449110 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4491a0 <col:15, col:44>
|   |   `-TextComment 0x55f08f449170 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x55f08f4492f0 <line:2732:3, line:2734:3>
|   | |-TextComment 0x55f08f4491d0 <line:2732:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4491f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f449210 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55f08f449230 <line:2733:3> Text=" "
|   | |-InlineCommandComment 0x55f08f449250 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f449270 <col:11, col:35> Text=" -ENOMEM if stack is full"
|   | `-TextComment 0x55f08f449290 <line:2734:3> Text=" "
|   |-VerbatimLineComment 0x55f08f449310 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55f08f449380 <line:2735:1>
|     `-TextComment 0x55f08f449350 <col:1> Text=" "
|-FunctionDecl 0x55f08f29e8b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f29e698 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x55f08f29e708 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x55f08f29e778 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x55f08f449d70 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x55f08f4494a0 <line:2739:3>
|   | `-TextComment 0x55f08f449470 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4494c0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55f08f449520 <col:10, col:38>
|   |   `-TextComment 0x55f08f4494f0 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x55f08f449670 <line:2741:3, line:2742:47>
|   | |-TextComment 0x55f08f449540 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x55f08f449590 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x55f08f4495b0 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x55f08f4495d0 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x55f08f449620 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x55f08f4496c0 <line:2744:3>
|   | `-TextComment 0x55f08f449690 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4496e0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55f08f4497c0 <col:9, col:72>
|   |   |-TextComment 0x55f08f449710 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55f08f449760 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55f08f449780 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55f08f449810 <line:2746:3>
|   | `-TextComment 0x55f08f4497e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f449830 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4498e0 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x55f08f449890 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x55f08f4498b0 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x55f08f449900 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4499b0 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x55f08f449960 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x55f08f449980 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x55f08f4499d0 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55f08f449ab0 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x55f08f449a30 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x55f08f449a50 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55f08f449a70 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55f08f449c60 <line:2752:3, line:2755:3>
|   | |-TextComment 0x55f08f449ad0 <line:2752:3> Text=" "
|   | |-InlineCommandComment 0x55f08f449af0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f449b10 <col:11, col:39> Text=" 0 Element popped from stack."
|   | |-TextComment 0x55f08f449b30 <line:2753:3> Text=" "
|   | |-InlineCommandComment 0x55f08f449b50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f449b70 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55f08f449b90 <line:2754:3> Text=" "
|   | |-InlineCommandComment 0x55f08f449bb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f449bd0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55f08f449bf0 <line:2755:3> Text=" "
|   |-VerbatimLineComment 0x55f08f449c80 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x55f08f449cf0 <line:2756:1>
|     `-TextComment 0x55f08f449cc0 <col:1> Text=" "
|-RecordDecl 0x55f08f29e9c8 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x55f08f449e90 <line:2778:4, col:7>
|   `-ParagraphComment 0x55f08f449e60 <col:4, col:7>
|     |-TextComment 0x55f08f449de0 <col:4> Text=" "
|     |-TextComment 0x55f08f449e00 <col:5> Text="@"
|     `-TextComment 0x55f08f449e20 <col:6, col:7> Text="} "
|-RecordDecl 0x55f08f29ea70 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x55f08f29edf0 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x55f08f29ed80 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x55f08f29ed20 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x55f08f29ece0 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x55f08f1ea7a0 'int'
|       |-PointerType 0x55f08f29eb80 'struct k_poll_event *'
|       | `-ElaboratedType 0x55f08f29eb20 'struct k_poll_event' sugar
|       |   `-RecordType 0x55f08f3836e0 'struct k_poll_event'
|       |     `-Record 0x55f08f3cd108 'k_poll_event'
|       `-TypedefType 0x55f08f27fdb0 'u32_t' sugar
|         |-Typedef 0x55f08f26ee50 'u32_t'
|         `-BuiltinType 0x55f08f1ea840 'unsigned int'
|-RecordDecl 0x55f08f29ee48 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x55f08f29ef00 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x55f08f29ef70 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x55f08f29eff0 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x55f08f29f2f0 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x55f08f29f290 'void (*)(struct k_work *)'
| | `-ParenType 0x55f08f29f230 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x55f08f29f1f0 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x55f08f1ea700 'void'
| |     `-PointerType 0x55f08f29f100 'struct k_work *'
| |       `-ElaboratedType 0x55f08f29f0a0 'struct k_work' sugar
| |         `-RecordType 0x55f08f29ea50 'struct k_work'
| |           `-Record 0x55f08f29f9d0 'k_work'
| `-FullComment 0x55f08f44a3b0 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x55f08f449f30 <line:2797:3>
|   | `-TextComment 0x55f08f449f00 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f449f50 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x55f08f449fc0 <line:2798:3>
|   | `-TextComment 0x55f08f449f90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f449fe0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f44a040 <col:10, col:42>
|   |   `-TextComment 0x55f08f44a010 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x55f08f44a0b0 <line:2800:3, line:2801:52>
|   | |-TextComment 0x55f08f44a060 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x55f08f44a080 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x55f08f44a100 <line:2803:3>
|   | `-TextComment 0x55f08f44a0d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44a120 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44a1b0 <col:15, col:40>
|   |   `-TextComment 0x55f08f44a180 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x55f08f44a200 <line:2805:3>
|   | `-TextComment 0x55f08f44a1d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44a220 <col:4, line:2806:3> Name="return"
|   | `-ParagraphComment 0x55f08f44a2a0 <line:2805:11, line:2806:3>
|   |   |-TextComment 0x55f08f44a250 <line:2805:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f44a270 <line:2806:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44a2c0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55f08f44a330 <line:2807:1>
|     `-TextComment 0x55f08f44a300 <col:1> Text=" "
|-RecordDecl 0x55f08f29f378 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x55f08f44a4d0 <line:2811:3, col:24>
| | `-ParagraphComment 0x55f08f44a4a0 <col:3, col:24>
| |   |-TextComment 0x55f08f44a420 <col:3> Text=" "
| |   |-InlineCommandComment 0x55f08f44a440 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55f08f44a460 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55f08f29f440 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x55f08f29f4a8 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x55f08f29f4f0 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x55f08f29f5b0 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x55f08f29f9d0 prev 0x55f08f29e9c8 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x55f08f29fa70 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x55f08f29faf0 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x55f08f29fbf8 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x55f08f29fc40 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x55f08f29fd10 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x55f08f29fd78 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x55f08f29fe70 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x55f08f29ff10 prev 0x55f08f29ea70 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x55f08f29ffb8 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x55f08f2a0050 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x55f08f2a00c0 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x55f08f2a0120 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x55f08f2a0178 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x55f08f2a01e0 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x55f08f2a0240 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x55f08f2a02a8 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x55f08f2a0540 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x55f08f2a03c0 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x55f08f2a0430 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x55f08f2a1168 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x55f08f2a0990 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x55f08f2a0630 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*'
| |   | `-ImplicitCastExpr 0x55f08f2a0618 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55f08f2a05f0 <col:3> 'struct k_work *' lvalue ParmVar 0x55f08f2a03c0 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x55f08f2a0978 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x55f08f2a0950 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x55f08f2a0898 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x55f08f2a06d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x55f08f2a06a8 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x55f08f2a0670 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x55f08f2a08f0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x55f08f2a0730 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x55f08f2a0430 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x55f08f2a0908 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x55f08f2a0798 <col:13> 'int' 0
| `-FullComment 0x55f08f44aa00 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x55f08f44a570 <line:2876:3>
|   | `-TextComment 0x55f08f44a540 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44a590 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55f08f44a5f0 <col:10, col:33>
|   |   `-TextComment 0x55f08f44a5c0 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x55f08f44a640 <line:2878:3, col:74>
|   | `-TextComment 0x55f08f44a610 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x55f08f44a690 <line:2880:3>
|   | `-TextComment 0x55f08f44a660 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44a6b0 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44a760 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x55f08f44a710 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x55f08f44a730 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x55f08f44a780 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x55f08f44a810 <col:18, col:70>
|   |   `-TextComment 0x55f08f44a7e0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x55f08f44a860 <line:2883:3>
|   | `-TextComment 0x55f08f44a830 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44a880 <col:4, line:2884:3> Name="return"
|   | `-ParagraphComment 0x55f08f44a900 <line:2883:11, line:2884:3>
|   |   |-TextComment 0x55f08f44a8b0 <line:2883:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f44a8d0 <line:2884:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44a920 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55f08f44a990 <line:2885:1>
|     `-TextComment 0x55f08f44a960 <col:1> Text=" "
|-FunctionDecl 0x55f08f2a1340 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x55f08f2a11a8 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55f08f2a1230 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x55f08f2a1788 <line:2915:1, line:2919:1>
| | `-IfStmt 0x55f08f2a1720 <line:2916:2, line:2918:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x55f08f2a1580 <line:2916:6, col:64> 'int' prefix '!'
| |   | `-CallExpr 0x55f08f2a1530 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x55f08f2a1518 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55f08f2a13f0 <col:7> 'bool (atomic_t *, int)' Function 0x55f08f280760 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x55f08f2a1568 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x55f08f2a1458 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x55f08f29fbf8
| |   |   |   `-ImplicitCastExpr 0x55f08f2a1440 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x55f08f2a1418 <col:31> 'struct k_work *' lvalue ParmVar 0x55f08f2a1230 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x55f08f2a1490 <col:44> 'int' EnumConstant 0x55f08f29f5b0 'K_WORK_STATE_PENDING' 'int'
| |   |-CompoundStmt 0x55f08f2a1708 <col:67, line:2918:2>
| |   | `-CallExpr 0x55f08f2a16a0 <line:2917:3, col:38> 'void'
| |   |   |-ImplicitCastExpr 0x55f08f2a1688 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x55f08f2a15a0 <col:3> 'void (struct k_queue *, void *)' Function 0x55f08f39c430 'k_queue_append' 'void (struct k_queue *, void *)'
| |   |   |-UnaryOperator 0x55f08f2a1640 <col:18, col:27> 'struct k_queue *' prefix '&'
| |   |   | `-MemberExpr 0x55f08f2a1608 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x55f08f29f440
| |   |   |   `-ImplicitCastExpr 0x55f08f2a15f0 <col:19> 'struct k_work_q *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x55f08f2a15c8 <col:19> 'struct k_work_q *' lvalue ParmVar 0x55f08f2a11a8 'work_q' 'struct k_work_q *'
| |   |   `-ImplicitCastExpr 0x55f08f2a16f0 <col:34> 'void *' <BitCast>
| |   |     `-ImplicitCastExpr 0x55f08f2a16d8 <col:34> 'struct k_work *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x55f08f2a1660 <col:34> 'struct k_work *' lvalue ParmVar 0x55f08f2a1230 'work' 'struct k_work *'
| |   `-<<<NULL>>>
| `-FullComment 0x55f08f44b2e0 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x55f08f44aaa0 <line:2892:3>
|   | `-TextComment 0x55f08f44aa70 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44aac0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55f08f44ab20 <col:10, col:29>
|   |   `-TextComment 0x55f08f44aaf0 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x55f08f44ad30 <line:2894:3, line:2899:15>
|   | |-TextComment 0x55f08f44ab40 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x55f08f44ab90 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55f08f44abb0 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x55f08f44abd0 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44ac20 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x55f08f44ac40 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x55f08f44ac60 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x55f08f44ac80 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x55f08f44aca0 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x55f08f44acc0 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x55f08f44ad80 <line:2901:3>
|   | `-TextComment 0x55f08f44ad50 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44ada0 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x55f08f44ae20 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x55f08f44add0 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x55f08f44adf0 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x55f08f44ae70 <line:2905:3>
|   | `-TextComment 0x55f08f44ae40 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44ae90 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f44aef0 <col:9, col:31>
|   |   `-TextComment 0x55f08f44aec0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f44af40 <line:2907:3>
|   | `-TextComment 0x55f08f44af10 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44af60 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44b010 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x55f08f44afc0 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55f08f44afe0 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x55f08f44b030 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55f08f44b0c0 <col:15, col:36>
|   |   `-TextComment 0x55f08f44b090 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55f08f44b110 <line:2910:3>
|   | `-TextComment 0x55f08f44b0e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44b130 <col:4, line:2911:3> Name="return"
|   | `-ParagraphComment 0x55f08f44b1b0 <line:2910:11, line:2911:3>
|   |   |-TextComment 0x55f08f44b160 <line:2910:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f44b180 <line:2911:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44b1e0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55f08f44b250 <line:2912:1>
|     `-TextComment 0x55f08f44b220 <col:1> Text=" "
|-FunctionDecl 0x55f08f2a1968 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x55f08f2a17c8 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55f08f2a1850 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x55f08f2a21a8 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x55f08f2a1ad0 <line:2945:2, col:18>
| | | `-VarDecl 0x55f08f2a1a30 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x55f08f2a1ab0 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x55f08f2a1a90 <col:15> 'int' 16
| | |-IfStmt 0x55f08f2a20d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x55f08f2a1c18 <line:2947:6, col:64> 'int' prefix '!'
| | | | `-CallExpr 0x55f08f2a1bc8 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x55f08f2a1bb0 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x55f08f2a1ae8 <col:7> 'bool (atomic_t *, int)' Function 0x55f08f280760 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x55f08f2a1c00 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x55f08f2a1b50 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x55f08f29fbf8
| | | |   |   `-ImplicitCastExpr 0x55f08f2a1b38 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x55f08f2a1b10 <col:31> 'struct k_work *' lvalue ParmVar 0x55f08f2a1850 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x55f08f2a1b88 <col:44> 'int' EnumConstant 0x55f08f29f5b0 'K_WORK_STATE_PENDING' 'int'
| | | |-CompoundStmt 0x55f08f2a20b0 <col:67, line:2956:2>
| | | | |-BinaryOperator 0x55f08f2a1e28 <line:2948:3, col:50> 'int' '='
| | | | | |-DeclRefExpr 0x55f08f2a1c38 <col:3> 'int' lvalue Var 0x55f08f2a1a30 'ret' 'int'
| | | | | `-CallExpr 0x55f08f2a1dc0 <col:9, col:50> 's32_t':'int'
| | | | |   |-ImplicitCastExpr 0x55f08f2a1da8 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x55f08f2a1c60 <col:9> 's32_t (struct k_queue *, void *)' Function 0x55f08f39c6c0 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | | | |   |-UnaryOperator 0x55f08f2a1d00 <col:30, col:39> 'struct k_queue *' prefix '&'
| | | | |   | `-MemberExpr 0x55f08f2a1cc8 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x55f08f29f440
| | | | |   |   `-ImplicitCastExpr 0x55f08f2a1cb0 <col:31> 'struct k_work_q *' <LValueToRValue>
| | | | |   |     `-DeclRefExpr 0x55f08f2a1c88 <col:31> 'struct k_work_q *' lvalue ParmVar 0x55f08f2a17c8 'work_q' 'struct k_work_q *'
| | | | |   `-ImplicitCastExpr 0x55f08f2a1e10 <col:46> 'void *' <BitCast>
| | | | |     `-ImplicitCastExpr 0x55f08f2a1df8 <col:46> 'struct k_work *' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x55f08f2a1d20 <col:46> 'struct k_work *' lvalue ParmVar 0x55f08f2a1850 'work' 'struct k_work *'
| | | | `-IfStmt 0x55f08f2a2078 <line:2953:3, line:2955:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x55f08f2a1eb0 <line:2953:7, col:14> 'int' '!='
| | | |   | |-ImplicitCastExpr 0x55f08f2a1e98 <col:7> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x55f08f2a1e50 <col:7> 'int' lvalue Var 0x55f08f2a1a30 'ret' 'int'
| | | |   | `-IntegerLiteral 0x55f08f2a1e78 <col:14> 'int' 0
| | | |   |-CompoundStmt 0x55f08f2a2060 <col:17, line:2955:3>
| | | |   | `-CallExpr 0x55f08f2a2010 <line:2954:4, col:54> 'void'
| | | |   |   |-ImplicitCastExpr 0x55f08f2a1ff8 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   |   | `-DeclRefExpr 0x55f08f2a1ed8 <col:4> 'void (atomic_t *, int)' Function 0x55f08f281260 'atomic_clear_bit' 'void (atomic_t *, int)'
| | | |   |   |-ImplicitCastExpr 0x55f08f2a2048 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | | |   |   | `-MemberExpr 0x55f08f2a1f40 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x55f08f29fbf8
| | | |   |   |   `-ImplicitCastExpr 0x55f08f2a1f28 <col:21> 'struct k_work *' <LValueToRValue>
| | | |   |   |     `-DeclRefExpr 0x55f08f2a1f00 <col:21> 'struct k_work *' lvalue ParmVar 0x55f08f2a1850 'work' 'struct k_work *'
| | | |   |   `-DeclRefExpr 0x55f08f2a1f78 <col:34> 'int' EnumConstant 0x55f08f29f5b0 'K_WORK_STATE_PENDING' 'int'
| | | |   `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x55f08f2a2168 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x55f08f2a2150 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f2a2108 <col:9> 'int' lvalue Var 0x55f08f2a1a30 'ret' 'int'
| `-FullComment 0x55f08f44baa0 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x55f08f44b380 <line:2922:3>
|   | `-TextComment 0x55f08f44b350 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44b3a0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55f08f44b400 <col:10, col:53>
|   |   `-TextComment 0x55f08f44b3d0 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x55f08f44b4f0 <line:2924:3, line:2928:71>
|   | |-TextComment 0x55f08f44b420 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x55f08f44b440 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x55f08f44b460 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x55f08f44b480 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x55f08f44b4a0 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x55f08f44b540 <line:2930:3, col:61>
|   | `-TextComment 0x55f08f44b510 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x55f08f44b590 <line:2932:3>
|   | `-TextComment 0x55f08f44b560 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44b5b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f44b610 <col:9, col:31>
|   |   `-TextComment 0x55f08f44b5e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f44b660 <line:2934:3>
|   | `-TextComment 0x55f08f44b630 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44b680 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44b730 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x55f08f44b6e0 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55f08f44b700 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x55f08f44b750 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55f08f44b7e0 <col:15, col:36>
|   |   `-TextComment 0x55f08f44b7b0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55f08f44b990 <line:2937:3, line:2940:3>
|   | |-TextComment 0x55f08f44b800 <line:2937:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44b820 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44b840 <col:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   | |-TextComment 0x55f08f44b860 <line:2938:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44b880 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44b8a0 <col:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   | |-TextComment 0x55f08f44b8c0 <line:2939:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44b8e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44b900 <col:11, col:20> Text=" 0 Success"
|   | `-TextComment 0x55f08f44b920 <line:2940:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44b9b0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55f08f44ba20 <line:2941:1>
|     `-TextComment 0x55f08f44b9f0 <col:1> Text=" "
|-FunctionDecl 0x55f08f2a2300 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x55f08f2a21f8 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x55f08f2a2588 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x55f08f2a2548 <line:2976:2, col:58>
| |   `-CallExpr 0x55f08f2a24e0 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x55f08f2a24c8 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f2a23a8 <col:9> 'bool (const atomic_t *, int)' Function 0x55f08f27dac0 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x55f08f2a2530 <col:25, col:31> 'const atomic_t *' <BitCast>
| |     | `-ImplicitCastExpr 0x55f08f2a2518 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x55f08f2a2410 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x55f08f29fbf8
| |     |     `-ImplicitCastExpr 0x55f08f2a23f8 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x55f08f2a23d0 <col:25> 'struct k_work *' lvalue ParmVar 0x55f08f2a21f8 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x55f08f2a2448 <col:38> 'int' EnumConstant 0x55f08f29f5b0 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x55f08f44c080 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x55f08f44bb40 <line:2962:3>
|   | `-TextComment 0x55f08f44bb10 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44bb60 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f44bbc0 <col:10, col:42>
|   |   `-TextComment 0x55f08f44bb90 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x55f08f44bcb0 <line:2964:3, line:2965:9>
|   | |-TextComment 0x55f08f44bbe0 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x55f08f44bc30 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55f08f44bc50 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x55f08f44bc70 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x55f08f44bd00 <line:2967:3>
|   | `-TextComment 0x55f08f44bcd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44bd20 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f44bd80 <col:9, col:31>
|   |   `-TextComment 0x55f08f44bd50 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f44bdd0 <line:2969:3>
|   | `-TextComment 0x55f08f44bda0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44bdf0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44be80 <col:15, col:36>
|   |   `-TextComment 0x55f08f44be50 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55f08f44bed0 <line:2971:3>
|   | `-TextComment 0x55f08f44bea0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44bef0 <col:4, line:2972:3> Name="return"
|   | `-ParagraphComment 0x55f08f44bf70 <line:2971:11, line:2972:3>
|   |   |-TextComment 0x55f08f44bf20 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|   |   `-TextComment 0x55f08f44bf40 <line:2972:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44bf90 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55f08f44c000 <line:2973:1>
|     `-TextComment 0x55f08f44bfd0 <col:1> Text=" "
|-FunctionDecl 0x55f08f2a2860 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x55f08f2a25c8 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55f08f2a2638 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55f08f2a26a8 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f2a2720 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x55f08f44c880 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x55f08f44c120 <line:2980:3>
|   | `-TextComment 0x55f08f44c0f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44c140 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55f08f44c1a0 <col:10, col:28>
|   |   `-TextComment 0x55f08f44c170 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x55f08f44c290 <line:2982:3, line:2983:41>
|   | |-TextComment 0x55f08f44c1c0 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x55f08f44c210 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x55f08f44c230 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x55f08f44c250 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x55f08f44c2e0 <line:2985:3>
|   | `-TextComment 0x55f08f44c2b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44c300 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44c3b0 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x55f08f44c360 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55f08f44c380 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x55f08f44c3d0 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55f08f44c4b0 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x55f08f44c430 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x55f08f44c450 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x55f08f44c470 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x55f08f44c4d0 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55f08f44c5d0 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x55f08f44c530 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x55f08f44c550 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x55f08f44c570 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x55f08f44c590 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x55f08f44c5f0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x55f08f44c680 <col:15, col:51>
|   |   `-TextComment 0x55f08f44c650 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x55f08f44c6d0 <line:2993:3>
|   | `-TextComment 0x55f08f44c6a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44c6f0 <col:4, line:2994:3> Name="return"
|   | `-ParagraphComment 0x55f08f44c770 <line:2993:11, line:2994:3>
|   |   |-TextComment 0x55f08f44c720 <line:2993:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f44c740 <line:2994:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44c790 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55f08f44c800 <line:2995:1>
|     `-TextComment 0x55f08f44c7d0 <col:1> Text=" "
|-FunctionDecl 0x55f08f2a2b68 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x55f08f2a2970 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55f08f2a29e0 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55f08f2a2a50 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f2a2ac8 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x55f08f44d080 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x55f08f44c920 <line:3001:3>
|   | `-TextComment 0x55f08f44c8f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44c940 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x55f08f44c9a0 <col:10, col:40>
|   |   `-TextComment 0x55f08f44c970 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x55f08f44ca90 <line:3003:3, line:3007:21>
|   | |-TextComment 0x55f08f44c9c0 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x55f08f44c9e0 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x55f08f44ca00 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x55f08f44ca20 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x55f08f44ca40 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x55f08f44cae0 <line:3009:3>
|   | `-TextComment 0x55f08f44cab0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44cb00 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44cbb0 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x55f08f44cb60 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55f08f44cb80 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x55f08f44cbd0 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x55f08f44ccb0 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x55f08f44cc30 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x55f08f44cc50 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x55f08f44cc70 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x55f08f44ccd0 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x55f08f44cdd0 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x55f08f44cd30 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x55f08f44cd50 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x55f08f44cd70 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x55f08f44cd90 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x55f08f44cdf0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x55f08f44ce80 <col:15, col:51>
|   |   `-TextComment 0x55f08f44ce50 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x55f08f44ced0 <line:3017:3>
|   | `-TextComment 0x55f08f44cea0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44cef0 <col:4, line:3018:3> Name="return"
|   | `-ParagraphComment 0x55f08f44cf70 <line:3017:11, line:3018:3>
|   |   |-TextComment 0x55f08f44cf20 <line:3017:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f44cf40 <line:3018:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44cf90 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55f08f44d000 <line:3019:1>
|     `-TextComment 0x55f08f44cfd0 <col:1> Text=" "
|-FunctionDecl 0x55f08f2a2e90 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x55f08f2a2d10 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x55f08f2a2d80 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x55f08f44d5e0 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x55f08f44d120 <line:3025:3>
|   | `-TextComment 0x55f08f44d0f0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44d140 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x55f08f44d1a0 <col:10, col:41>
|   |   `-TextComment 0x55f08f44d170 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x55f08f44d220 <line:3027:3, line:3028:17>
|   | |-TextComment 0x55f08f44d1c0 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x55f08f44d1f0 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x55f08f44d270 <line:3030:3>
|   | `-TextComment 0x55f08f44d240 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44d290 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44d340 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x55f08f44d2f0 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55f08f44d310 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x55f08f44d360 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x55f08f44d3f0 <col:18, col:70>
|   |   `-TextComment 0x55f08f44d3c0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x55f08f44d440 <line:3033:3>
|   | `-TextComment 0x55f08f44d410 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44d460 <col:4, line:3034:3> Name="return"
|   | `-ParagraphComment 0x55f08f44d4e0 <line:3033:11, line:3034:3>
|   |   |-TextComment 0x55f08f44d490 <line:3033:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f44d4b0 <line:3034:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44d500 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55f08f44d570 <line:3035:1>
|     `-TextComment 0x55f08f44d540 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b4ca8 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x55f08f2a2f90 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55f08f2a3018 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x55f08f2a3088 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x55f08f44e1e0 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x55f08f44d680 <line:3040:3>
|   | `-TextComment 0x55f08f44d650 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44d6a0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55f08f44d700 <col:10, col:37>
|   |   `-TextComment 0x55f08f44d6d0 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x55f08f44d970 <line:3042:3, line:3046:37>
|   | |-TextComment 0x55f08f44d720 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55f08f44d770 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55f08f44d790 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x55f08f44d7b0 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44d800 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x55f08f44d820 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x55f08f44d870 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x55f08f44d890 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x55f08f44d8b0 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x55f08f44d8d0 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x55f08f44d8f0 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x55f08f44da80 <line:3048:3, line:3053:28>
|   | |-TextComment 0x55f08f44d990 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x55f08f44d9b0 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x55f08f44d9d0 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x55f08f44d9f0 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x55f08f44da10 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x55f08f44da30 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x55f08f44dad0 <line:3055:3>
|   | `-TextComment 0x55f08f44daa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44daf0 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x55f08f44db70 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x55f08f44db20 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x55f08f44db40 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x55f08f44dbc0 <line:3059:3>
|   | `-TextComment 0x55f08f44db90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44dbe0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f44dc40 <col:9, col:31>
|   |   `-TextComment 0x55f08f44dc10 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f44dc90 <line:3061:3>
|   | `-TextComment 0x55f08f44dc60 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44dcb0 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44dd60 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x55f08f44dd10 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55f08f44dd30 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x55f08f44dd80 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55f08f44de30 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x55f08f44dde0 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55f08f44de00 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x55f08f44de50 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x55f08f44df00 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x55f08f44deb0 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x55f08f44ded0 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x55f08f44e0b0 <line:3066:3, line:3069:3>
|   | |-TextComment 0x55f08f44df20 <line:3066:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44df40 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44df60 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x55f08f44df80 <line:3067:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44dfa0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44dfc0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x55f08f44dfe0 <line:3068:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44e000 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44e020 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x55f08f44e040 <line:3069:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44e0d0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55f08f44e140 <line:3070:1>
|     `-TextComment 0x55f08f44e110 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b4eb8 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x55f08f3b4db0 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x55f08f44e930 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x55f08f44e280 <line:3076:3>
|   | `-TextComment 0x55f08f44e250 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44e2a0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55f08f44e300 <col:10, col:37>
|   |   `-TextComment 0x55f08f44e2d0 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x55f08f44e3f0 <line:3078:3, line:3080:12>
|   | |-TextComment 0x55f08f44e320 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x55f08f44e370 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x55f08f44e390 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x55f08f44e3b0 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x55f08f44e440 <line:3082:3>
|   | `-TextComment 0x55f08f44e410 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44e460 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f44e4c0 <col:9, col:31>
|   |   `-TextComment 0x55f08f44e490 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f44e510 <line:3084:3>
|   | `-TextComment 0x55f08f44e4e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44e530 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x55f08f44e5e0 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x55f08f44e560 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x55f08f44e580 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x55f08f44e5a0 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x55f08f44e630 <line:3088:3>
|   | `-TextComment 0x55f08f44e600 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44e650 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44e6e0 <col:15, col:44>
|   |   `-TextComment 0x55f08f44e6b0 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x55f08f44e820 <line:3090:3, line:3092:3>
|   | |-TextComment 0x55f08f44e700 <line:3090:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44e720 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44e740 <col:11, col:42> Text=" 0 Work item countdown canceled."
|   | |-TextComment 0x55f08f44e760 <line:3091:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44e780 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44e7a0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | `-TextComment 0x55f08f44e7c0 <line:3092:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44e840 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55f08f44e8b0 <line:3093:1>
|     `-TextComment 0x55f08f44e880 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b5038 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x55f08f3b4fb0 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x55f08f3b5268 <line:3119:1, line:3121:1>
| | `-CallExpr 0x55f08f3b51f0 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x55f08f3b51d8 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55f08f3b50e0 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x55f08f2a1340 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x55f08f3b5130 <col:25, col:26> 'struct k_work_q *' prefix '&'
| |   | `-DeclRefExpr 0x55f08f3b5108 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x55f08f2a02a8 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x55f08f3b5228 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f3b5150 <col:40> 'struct k_work *' lvalue ParmVar 0x55f08f3b4fb0 'work' 'struct k_work *'
| `-FullComment 0x55f08f44f0e0 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x55f08f44e9d0 <line:3097:3>
|   | `-TextComment 0x55f08f44e9a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44e9f0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55f08f44ea50 <col:10, col:53>
|   |   `-TextComment 0x55f08f44ea20 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x55f08f44ebe0 <line:3099:3, line:3104:15>
|   | |-TextComment 0x55f08f44ea70 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x55f08f44eac0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55f08f44eae0 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x55f08f44eb00 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x55f08f44eb20 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x55f08f44eb40 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x55f08f44eb60 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x55f08f44eb80 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x55f08f44ec30 <line:3106:3>
|   | `-TextComment 0x55f08f44ec00 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44ec50 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x55f08f44ed00 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x55f08f44ec80 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x55f08f44eca0 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x55f08f44ecc0 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x55f08f44ed50 <line:3111:3>
|   | `-TextComment 0x55f08f44ed20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44ed70 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f44edd0 <col:9, col:31>
|   |   `-TextComment 0x55f08f44eda0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f44ee20 <line:3113:3>
|   | `-TextComment 0x55f08f44edf0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44ee40 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44eed0 <col:15, col:36>
|   |   `-TextComment 0x55f08f44eea0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x55f08f44ef20 <line:3115:3>
|   | `-TextComment 0x55f08f44eef0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44ef40 <col:4, line:3116:3> Name="return"
|   | `-ParagraphComment 0x55f08f44efc0 <line:3115:11, line:3116:3>
|   |   |-TextComment 0x55f08f44ef70 <line:3115:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f44ef90 <line:3116:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44efe0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x55f08f44f050 <line:3117:1>
|     `-TextComment 0x55f08f44f020 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b5438 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3b52a8 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x55f08f3b5318 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x55f08f3b56d8 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x55f08f3b5690 <line:3159:2, col:66>
| |   `-CallExpr 0x55f08f3b5620 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x55f08f3b5608 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f3b54e8 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x55f08f3b4ca8 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x55f08f3b5538 <col:40, col:41> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x55f08f3b5510 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x55f08f2a02a8 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x55f08f3b5660 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f3b5558 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x55f08f3b52a8 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x55f08f3b5678 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x55f08f3b5580 <col:61> 's32_t':'int' lvalue ParmVar 0x55f08f3b5318 'delay' 's32_t':'int'
| `-FullComment 0x55f08f44fbf0 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x55f08f44f180 <line:3124:3>
|   | `-TextComment 0x55f08f44f150 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44f1a0 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x55f08f44f210 <col:10, col:61>
|   |   `-TextComment 0x55f08f44f1d0 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x55f08f44f400 <line:3126:3, line:3130:37>
|   | |-TextComment 0x55f08f44f230 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55f08f44f280 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55f08f44f2a0 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x55f08f44f2c0 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x55f08f44f310 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x55f08f44f330 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x55f08f44f350 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x55f08f44f370 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x55f08f44f390 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x55f08f44f540 <line:3132:3, line:3138:72>
|   | |-TextComment 0x55f08f44f420 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x55f08f44f440 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x55f08f44f460 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x55f08f44f480 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x55f08f44f4a0 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x55f08f44f4c0 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x55f08f44f4e0 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x55f08f44f590 <line:3140:3>
|   | `-TextComment 0x55f08f44f560 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44f5b0 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x55f08f44f660 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x55f08f44f5e0 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x55f08f44f600 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x55f08f44f620 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x55f08f44f6b0 <line:3145:3>
|   | `-TextComment 0x55f08f44f680 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44f6d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f44f730 <col:9, col:31>
|   |   `-TextComment 0x55f08f44f700 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f44f780 <line:3147:3>
|   | `-TextComment 0x55f08f44f750 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44f7a0 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44f850 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x55f08f44f800 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55f08f44f820 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x55f08f44f870 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x55f08f44f920 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x55f08f44f8d0 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x55f08f44f8f0 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x55f08f44fad0 <line:3151:3, line:3154:3>
|   | |-TextComment 0x55f08f44f940 <line:3151:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44f960 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44f980 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x55f08f44f9a0 <line:3152:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44f9c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44f9e0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x55f08f44fa00 <line:3153:3> Text=" "
|   | |-InlineCommandComment 0x55f08f44fa20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f44fa40 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x55f08f44fa60 <line:3154:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44faf0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55f08f44fb60 <line:3155:1>
|     `-TextComment 0x55f08f44fb30 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b57e0 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x55f08f3b5718 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x55f08f3b5a78 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x55f08f3b5a30 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x55f08f3b5a18 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x55f08f3b59d0 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x55f08f3b59b8 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x55f08f3b5888 <col:9> 'u64_t (u64_t)' Function 0x55f08f368280 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x55f08f3b5a00 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x55f08f3b5988 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x55f08f3b5970 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x55f08f3b58b0 <col:31> 's32_t (struct _timeout *)' Function 0x55f08f3983e0 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x55f08f3b5950 <col:51, col:58> 'struct _timeout *' prefix '&'
| |             `-MemberExpr 0x55f08f3b5918 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x55f08f29fd78
| |               `-ImplicitCastExpr 0x55f08f3b5900 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x55f08f3b58d8 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x55f08f3b5718 'work' 'struct k_delayed_work *'
| `-FullComment 0x55f08f4500a0 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x55f08f44fc90 <line:3163:3>
|   | `-TextComment 0x55f08f44fc60 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44fcb0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x55f08f44fd10 <col:10, col:66>
|   |   `-TextComment 0x55f08f44fce0 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x55f08f44fdb0 <line:3165:3, line:3167:30>
|   | |-TextComment 0x55f08f44fd30 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x55f08f44fd50 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x55f08f44fd70 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x55f08f44fe00 <line:3169:3>
|   | `-TextComment 0x55f08f44fdd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f44fe20 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f44feb0 <col:15, col:37>
|   |   `-TextComment 0x55f08f44fe80 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x55f08f44ff00 <line:3171:3>
|   | `-TextComment 0x55f08f44fed0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f44ff20 <col:4, line:3172:3> Name="return"
|   | `-ParagraphComment 0x55f08f44ffa0 <line:3171:11, line:3172:3>
|   |   |-TextComment 0x55f08f44ff50 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|   |   `-TextComment 0x55f08f44ff70 <line:3172:3> Text=" "
|   |-VerbatimLineComment 0x55f08f44ffc0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x55f08f450030 <line:3173:1>
|     `-TextComment 0x55f08f450000 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b5ce0 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x55f08f3b5b40 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x55f08f3b5bb0 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x55f08f450530 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x55f08f450140 <line:3180:3>
|   | `-TextComment 0x55f08f450110 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f450160 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f4501c0 <col:10, col:43>
|   |   `-TextComment 0x55f08f450190 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x55f08f450230 <line:3182:3, line:3183:17>
|   | |-TextComment 0x55f08f4501e0 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x55f08f450200 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x55f08f450280 <line:3185:3>
|   | `-TextComment 0x55f08f450250 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4502a0 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f450350 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x55f08f450300 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x55f08f450320 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x55f08f450370 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x55f08f450400 <col:18, col:70>
|   |   `-TextComment 0x55f08f4503d0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x55f08f450450 <line:3188:3>
|   | `-TextComment 0x55f08f450420 <col:3> Text=" "
|   `-BlockCommandComment 0x55f08f450470 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x55f08f4504d0 <col:11, col:14>
|       `-TextComment 0x55f08f4504a0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x55f08f3b6148 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x55f08f3b5de0 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x55f08f3b5e68 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x55f08f3b5ef0 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55f08f3b5f68 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x55f08f3b5fd8 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x55f08f451290 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x55f08f4505d0 <line:3194:3>
|   | `-TextComment 0x55f08f4505a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4505f0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f450650 <col:10, col:39>
|   |   `-TextComment 0x55f08f450620 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x55f08f4508c0 <line:3196:3, line:3200:50>
|   | |-TextComment 0x55f08f450670 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55f08f4506c0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55f08f4506e0 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x55f08f450700 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x55f08f450750 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x55f08f450770 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x55f08f4507c0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x55f08f4507e0 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x55f08f450800 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x55f08f450820 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x55f08f450840 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x55f08f4509b0 <line:3202:3, line:3206:70>
|   | |-TextComment 0x55f08f4508e0 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x55f08f450900 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x55f08f450920 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x55f08f450940 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x55f08f450960 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x55f08f450a00 <line:3208:3>
|   | `-TextComment 0x55f08f4509d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f450a20 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f450a80 <col:9, col:31>
|   |   `-TextComment 0x55f08f450a50 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f450ad0 <line:3210:3>
|   | `-TextComment 0x55f08f450aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f450af0 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x55f08f450ba0 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x55f08f450b20 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x55f08f450b40 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x55f08f450b60 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x55f08f450bf0 <line:3215:3>
|   | `-TextComment 0x55f08f450bc0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f450c10 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x55f08f450cc0 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x55f08f450c70 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x55f08f450c90 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x55f08f450ce0 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x55f08f450d90 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x55f08f450d40 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55f08f450d60 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x55f08f450db0 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x55f08f450e60 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x55f08f450e10 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x55f08f450e30 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x55f08f450e80 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x55f08f450f30 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x55f08f450ee0 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x55f08f450f00 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x55f08f450f50 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x55f08f451000 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x55f08f450fb0 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x55f08f450fd0 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x55f08f451190 <line:3223:3, line:3225:69>
|     |-TextComment 0x55f08f451020 <line:3223:3> Text=" "
|     |-InlineCommandComment 0x55f08f451040 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f451060 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x55f08f451080 <line:3224:3> Text=" "
|     |-InlineCommandComment 0x55f08f4510a0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f4510c0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x55f08f4510e0 <line:3225:3> Text=" "
|     |-InlineCommandComment 0x55f08f451100 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55f08f451120 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x55f08f3b6518 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3b6260 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x55f08f3b62e8 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x55f08f3b6360 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x55f08f3b63d0 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x55f08f3b6858 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x55f08f3b6810 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x55f08f3b6760 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x55f08f3b6748 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f08f3b65d8 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x55f08f3b6148 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x55f08f3b6628 <col:37, col:38> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x55f08f3b6600 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x55f08f2a02a8 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x55f08f3b67b0 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f3b6648 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x55f08f3b6260 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x55f08f3b67c8 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f3b6670 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x55f08f3b62e8 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x55f08f3b67e0 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x55f08f3b6698 <col:15> 'int' lvalue ParmVar 0x55f08f3b6360 'num_events' 'int'
| |     `-ImplicitCastExpr 0x55f08f3b67f8 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x55f08f3b66c0 <col:27> 's32_t':'int' lvalue ParmVar 0x55f08f3b63d0 'timeout' 's32_t':'int'
| `-FullComment 0x55f08f451e00 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x55f08f451330 <line:3234:3>
|   | `-TextComment 0x55f08f451300 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f451350 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x55f08f4513b0 <col:10, col:63>
|   |   `-TextComment 0x55f08f451380 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x55f08f4515a0 <line:3236:3, line:3240:50>
|   | |-TextComment 0x55f08f4513d0 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x55f08f451420 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x55f08f451440 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x55f08f451460 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x55f08f4514b0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x55f08f4514d0 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x55f08f4514f0 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x55f08f451510 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x55f08f451530 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x55f08f451690 <line:3242:3, line:3246:70>
|   | |-TextComment 0x55f08f4515c0 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x55f08f4515e0 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x55f08f451600 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x55f08f451620 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x55f08f451640 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x55f08f4516e0 <line:3248:3>
|   | `-TextComment 0x55f08f4516b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f451700 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f451760 <col:9, col:31>
|   |   `-TextComment 0x55f08f451730 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f4517b0 <line:3250:3>
|   | `-TextComment 0x55f08f451780 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4517d0 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x55f08f451850 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x55f08f451800 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x55f08f451820 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x55f08f4518a0 <line:3254:3>
|   | `-TextComment 0x55f08f451870 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4518c0 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f451970 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x55f08f451920 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x55f08f451940 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x55f08f451990 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x55f08f451a40 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x55f08f4519f0 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x55f08f451a10 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x55f08f451a60 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x55f08f451b10 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x55f08f451ac0 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x55f08f451ae0 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x55f08f451b30 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55f08f451be0 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x55f08f451b90 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x55f08f451bb0 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x55f08f451d70 <line:3260:3, line:3262:69>
|     |-TextComment 0x55f08f451c00 <line:3260:3> Text=" "
|     |-InlineCommandComment 0x55f08f451c20 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f451c40 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x55f08f451c60 <line:3261:3> Text=" "
|     |-InlineCommandComment 0x55f08f451c80 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f451ca0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x55f08f451cc0 <line:3262:3> Text=" "
|     |-InlineCommandComment 0x55f08f451ce0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55f08f451d00 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x55f08f3b69a8 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x55f08f3b6898 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x55f08f452350 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x55f08f451ea0 <line:3274:3>
|   | `-TextComment 0x55f08f451e70 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f451ec0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f451f20 <col:10, col:39>
|   |   `-TextComment 0x55f08f451ef0 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x55f08f452010 <line:3276:3, line:3278:14>
|   | |-TextComment 0x55f08f451f40 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x55f08f451f90 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x55f08f451fb0 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x55f08f451fd0 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x55f08f452060 <line:3280:3>
|   | `-TextComment 0x55f08f452030 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f452080 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f4520e0 <col:9, col:31>
|   |   `-TextComment 0x55f08f4520b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f452130 <line:3282:3>
|   | `-TextComment 0x55f08f452100 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f452150 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4521e0 <col:15, col:44>
|   |   `-TextComment 0x55f08f4521b0 <col:15, col:44> Text=" Address of delayed work item."
|   `-ParagraphComment 0x55f08f4522f0 <line:3284:3, line:3285:74>
|     |-TextComment 0x55f08f452200 <line:3284:3> Text=" "
|     |-InlineCommandComment 0x55f08f452220 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f452240 <col:11, col:32> Text=" 0 Work item canceled."
|     |-TextComment 0x55f08f452260 <line:3285:3> Text=" "
|     |-InlineCommandComment 0x55f08f452280 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55f08f4522a0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x55f08f3b6aa8 prev 0x55f08f382e18 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x55f08f4524e0 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x55f08f452410 <line:3297:3, line:3298:3>
| | | |-TextComment 0x55f08f4523c0 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x55f08f4523e0 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x55f08f452430 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x55f08f4524a0 <line:3299:1>
| |   `-TextComment 0x55f08f452470 <col:1> Text=" "
| |-FieldDecl 0x55f08f3b6b68 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55f08f4525b0 <line:3301:5, col:22>
| |   `-ParagraphComment 0x55f08f452580 <col:5, col:22>
| |     `-TextComment 0x55f08f452550 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x55f08f3b6c40 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x55f08f452680 <line:3303:5, col:17>
| |   `-ParagraphComment 0x55f08f452650 <col:5, col:17>
| |     `-TextComment 0x55f08f452620 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x55f08f3b6cc8 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x55f08f452750 <line:3306:5, col:24>
| |   `-ParagraphComment 0x55f08f452720 <col:5, col:24>
| |     `-TextComment 0x55f08f4526f0 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x55f08f3b6d50 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x55f08f452820 <line:3309:5, col:30>
|     `-ParagraphComment 0x55f08f4527f0 <col:5, col:30>
|       `-TextComment 0x55f08f4527c0 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x55f08f3b7018 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55f08f3b6f10 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x55f08f452cd0 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x55f08f4528c0 <line:3349:3>
|   | `-TextComment 0x55f08f452890 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4528e0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x55f08f452940 <col:10, col:29>
|   |   `-TextComment 0x55f08f452910 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x55f08f452990 <line:3351:3, col:67>
|   | `-TextComment 0x55f08f452960 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x55f08f4529e0 <line:3353:3, col:70>
|   | `-TextComment 0x55f08f4529b0 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x55f08f452a30 <line:3355:3>
|   | `-TextComment 0x55f08f452a00 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f452a50 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55f08f452ae0 <col:16, col:37>
|   |   `-TextComment 0x55f08f452ab0 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x55f08f452b80 <line:3357:3, col:33>
|   | |-TextComment 0x55f08f452b00 <col:3> Text=" "
|   | |-InlineCommandComment 0x55f08f452b20 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55f08f452b40 <col:11, col:33> Text=" 0 Mutex object created"
|   |-ParagraphComment 0x55f08f452bd0 <line:3359:3>
|   | `-TextComment 0x55f08f452ba0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f452bf0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55f08f452c60 <line:3360:1>
|     `-TextComment 0x55f08f452c30 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b7298 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3b7110 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x55f08f3b7180 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x55f08f453470 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x55f08f452d70 <line:3365:3>
|   | `-TextComment 0x55f08f452d40 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f452d90 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x55f08f452df0 <col:10, col:23>
|   |   `-TextComment 0x55f08f452dc0 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x55f08f452f10 <line:3367:3, line:3369:20>
|   | |-TextComment 0x55f08f452e10 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x55f08f452e60 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x55f08f452e80 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x55f08f452ea0 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x55f08f452ec0 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x55f08f452f80 <line:3371:3, line:3372:62>
|   | |-TextComment 0x55f08f452f30 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x55f08f452f50 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x55f08f452fd0 <line:3374:3>
|   | `-TextComment 0x55f08f452fa0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f452ff0 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4530a0 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x55f08f453050 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x55f08f453070 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x55f08f4530c0 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4531a0 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x55f08f453120 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x55f08f453140 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55f08f453160 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55f08f453370 <line:3379:3, line:3382:3>
|   | |-TextComment 0x55f08f4531c0 <line:3379:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4531e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f453220 <col:11, col:26> Text=" 0 Mutex locked."
|   | |-TextComment 0x55f08f453240 <line:3380:3> Text=" "
|   | |-InlineCommandComment 0x55f08f453260 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f453280 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55f08f4532a0 <line:3381:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4532c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4532e0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55f08f453300 <line:3382:3> Text=" "
|   |-VerbatimLineComment 0x55f08f453390 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55f08f453400 <line:3383:1>
|     `-TextComment 0x55f08f4533d0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b7430 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55f08f3b73a0 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x55f08f453b00 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x55f08f453510 <line:3387:3>
|   | `-TextComment 0x55f08f4534e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f453530 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x55f08f453590 <col:10, col:25>
|   |   `-TextComment 0x55f08f453560 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x55f08f453680 <line:3389:3, line:3390:18>
|   | |-TextComment 0x55f08f4535b0 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x55f08f453600 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x55f08f453620 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x55f08f453640 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x55f08f453720 <line:3392:3, line:3394:10>
|   | |-TextComment 0x55f08f4536a0 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x55f08f4536c0 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x55f08f4536e0 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x55f08f453770 <line:3396:3>
|   | `-TextComment 0x55f08f453740 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f453790 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x55f08f453820 <col:16, col:37>
|   |   `-TextComment 0x55f08f4537f0 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x55f08f4539b0 <line:3398:3, line:3400:42>
|   | |-TextComment 0x55f08f453840 <line:3398:3> Text=" "
|   | |-InlineCommandComment 0x55f08f453860 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f453880 <col:11, col:28> Text=" 0 Mutex unlocked."
|   | |-TextComment 0x55f08f4538a0 <line:3399:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4538c0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4538e0 <col:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   | |-TextComment 0x55f08f453900 <line:3400:3> Text=" "
|   | |-InlineCommandComment 0x55f08f453920 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55f08f453940 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   |-ParagraphComment 0x55f08f453a00 <line:3402:3>
|   | `-TextComment 0x55f08f4539d0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f453a20 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x55f08f453a90 <line:3403:1>
|     `-TextComment 0x55f08f453a60 <col:1> Text=" "
|-RecordDecl 0x55f08f3b7538 prev 0x55f08f382ec0 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x55f08f453c20 <line:3411:3, col:24>
| | `-ParagraphComment 0x55f08f453bf0 <col:3, col:24>
| |   |-TextComment 0x55f08f453b70 <col:3> Text=" "
| |   |-InlineCommandComment 0x55f08f453b90 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55f08f453bb0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55f08f3b75d0 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55f08f3b7628 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x55f08f3b7680 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x55f08f3b7a38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x55f08f3b7810 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x55f08f3b7888 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x55f08f3b7900 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x55f08f4542a0 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x55f08f453cc0 <line:3446:3>
|   | `-TextComment 0x55f08f453c90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f453ce0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x55f08f453d40 <col:10, col:33>
|   |   `-TextComment 0x55f08f453d10 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x55f08f453d90 <line:3448:3, col:71>
|   | `-TextComment 0x55f08f453d60 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x55f08f453de0 <line:3450:3>
|   | `-TextComment 0x55f08f453db0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f453e00 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55f08f453eb0 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x55f08f453e60 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x55f08f453e80 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x55f08f453ed0 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x55f08f453f80 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x55f08f453f30 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x55f08f453f50 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x55f08f453fa0 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x55f08f454030 <col:16, col:50>
|   |   `-TextComment 0x55f08f454000 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x55f08f454140 <line:3454:3, line:3455:33>
|   | |-TextComment 0x55f08f454050 <line:3454:3> Text=" "
|   | |-InlineCommandComment 0x55f08f454070 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f454090 <col:11, col:43> Text=" 0 Semaphore created successfully"
|   | |-TextComment 0x55f08f4540b0 <line:3455:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4540d0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55f08f4540f0 <col:11, col:33> Text=" -EINVAL Invalid values"
|   |-ParagraphComment 0x55f08f454190 <line:3457:3>
|   | `-TextComment 0x55f08f454160 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f4541b0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55f08f454220 <line:3458:1>
|     `-TextComment 0x55f08f4541f0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b8d18 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3b7b40 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x55f08f3b7bb0 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x55f08f454a90 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x55f08f454340 <line:3463:3>
|   | `-TextComment 0x55f08f454310 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f454360 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55f08f4543c0 <col:10, col:27>
|   |   `-TextComment 0x55f08f454390 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x55f08f454460 <line:3465:3, col:24>
|   | |-TextComment 0x55f08f4543e0 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x55f08f454430 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x55f08f4544b0 <line:3467:3>
|   | `-TextComment 0x55f08f454480 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4544d0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55f08f4545b0 <col:9, col:72>
|   |   |-TextComment 0x55f08f454500 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55f08f454550 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55f08f454570 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55f08f454600 <line:3469:3>
|   | `-TextComment 0x55f08f4545d0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f454620 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4546d0 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x55f08f454680 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x55f08f4546a0 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x55f08f4546f0 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4547d0 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x55f08f454750 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x55f08f454770 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55f08f454790 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55f08f454980 <line:3474:3, line:3477:3>
|   | |-TextComment 0x55f08f4547f0 <line:3474:3> Text=" "
|   | |-InlineCommandComment 0x55f08f454810 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f454830 <col:11, col:29> Text=" 0 Semaphore taken."
|   | |-TextComment 0x55f08f454850 <line:3475:3> Text=" "
|   | |-InlineCommandComment 0x55f08f454870 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f454890 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x55f08f4548b0 <line:3476:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4548d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4548f0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55f08f454910 <line:3477:3> Text=" "
|   |-VerbatimLineComment 0x55f08f4549a0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55f08f454a10 <line:3478:1>
|     `-TextComment 0x55f08f4549e0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b8f20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55f08f3b8e20 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x55f08f455070 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x55f08f454b30 <line:3482:3>
|   | `-TextComment 0x55f08f454b00 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f454b50 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x55f08f454bb0 <col:10, col:27>
|   |   `-TextComment 0x55f08f454b80 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x55f08f454ca0 <line:3484:3, line:3485:19>
|   | |-TextComment 0x55f08f454bd0 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x55f08f454c20 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x55f08f454c40 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x55f08f454c60 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x55f08f454cf0 <line:3487:3>
|   | `-TextComment 0x55f08f454cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f454d10 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f454d70 <col:9, col:31>
|   |   `-TextComment 0x55f08f454d40 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f454dc0 <line:3489:3>
|   | `-TextComment 0x55f08f454d90 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f454de0 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55f08f454e70 <col:14, col:39>
|   |   `-TextComment 0x55f08f454e40 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55f08f454ec0 <line:3491:3>
|   | `-TextComment 0x55f08f454e90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f454ee0 <col:4, line:3492:3> Name="return"
|   | `-ParagraphComment 0x55f08f454f60 <line:3491:11, line:3492:3>
|   |   |-TextComment 0x55f08f454f10 <line:3491:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f454f30 <line:3492:3> Text=" "
|   |-VerbatimLineComment 0x55f08f454f80 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55f08f454ff0 <line:3493:1>
|     `-TextComment 0x55f08f454fc0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b90a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55f08f3b9020 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x55f08f455560 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x55f08f455110 <line:3497:3>
|   | `-TextComment 0x55f08f4550e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f455130 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f455190 <col:10, col:44>
|   |   `-TextComment 0x55f08f455160 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x55f08f455270 <line:3499:3, col:49>
|   | |-TextComment 0x55f08f4551b0 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x55f08f455200 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x55f08f455230 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x55f08f4552c0 <line:3501:3>
|   | `-TextComment 0x55f08f455290 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4552e0 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55f08f455370 <col:14, col:39>
|   |   `-TextComment 0x55f08f455340 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55f08f4553c0 <line:3503:3>
|   | `-TextComment 0x55f08f455390 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4553e0 <col:4, line:3504:3> Name="return"
|   | `-ParagraphComment 0x55f08f455460 <line:3503:11, line:3504:3>
|   |   |-TextComment 0x55f08f455410 <line:3503:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f455430 <line:3504:3> Text=" "
|   |-VerbatimLineComment 0x55f08f455480 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55f08f4554f0 <line:3505:1>
|     `-TextComment 0x55f08f4554c0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b9228 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55f08f3b91a0 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x55f08f3b93b8 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x55f08f3b9368 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x55f08f3b9310 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x55f08f3b7628
| |   | `-ImplicitCastExpr 0x55f08f3b92f8 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55f08f3b92d0 <col:2> 'struct k_sem *' lvalue ParmVar 0x55f08f3b91a0 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x55f08f3b9348 <col:15> 'unsigned int' 0
| `-FullComment 0x55f08f455650 <line:3509:3, col:12>
|   `-ParagraphComment 0x55f08f455620 <col:3, col:12>
|     |-TextComment 0x55f08f4555d0 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f4555f0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f3b9508 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55f08f3b93f8 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x55f08f455b00 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x55f08f4556f0 <line:3517:3>
|   | `-TextComment 0x55f08f4556c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f455710 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55f08f455770 <col:10, col:34>
|   |   `-TextComment 0x55f08f455740 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x55f08f455810 <line:3519:3, col:47>
|   | |-TextComment 0x55f08f455790 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x55f08f4557e0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x55f08f455860 <line:3521:3>
|   | `-TextComment 0x55f08f455830 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f455880 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x55f08f455910 <col:14, col:39>
|   |   `-TextComment 0x55f08f4558e0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x55f08f455960 <line:3523:3>
|   | `-TextComment 0x55f08f455930 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f455980 <col:4, line:3524:3> Name="return"
|   | `-ParagraphComment 0x55f08f455a00 <line:3523:11, line:3524:3>
|   |   |-TextComment 0x55f08f4559b0 <line:3523:11, col:35> Text=" Current semaphore count."
|   |   `-TextComment 0x55f08f4559d0 <line:3524:3> Text=" "
|   |-VerbatimLineComment 0x55f08f455a20 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x55f08f455a90 <line:3525:1>
|     `-TextComment 0x55f08f455a60 <col:1> Text=" "
|-FunctionDecl 0x55f08f3b9690 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55f08f3b9600 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x55f08f3b9898 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x55f08f3b97c8 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x55f08f3b97b0 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x55f08f3b9778 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x55f08f3b7628
| |       `-ImplicitCastExpr 0x55f08f3b9760 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f3b9738 <col:9> 'struct k_sem *' lvalue ParmVar 0x55f08f3b9600 'sem' 'struct k_sem *'
| `-FullComment 0x55f08f455bf0 <line:3529:3, col:12>
|   `-ParagraphComment 0x55f08f455bc0 <col:3, col:12>
|     |-TextComment 0x55f08f455b70 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f455b90 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x55f08f3b98b0 prev 0x55f08f382f70 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x55f08f455d40 <line:3563:3, col:33>
| | |-ParagraphComment 0x55f08f455c90 <col:3>
| | | `-TextComment 0x55f08f455c60 <col:3> Text=" "
| | `-BlockCommandComment 0x55f08f455cb0 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x55f08f455d10 <col:10, col:33>
| |     `-TextComment 0x55f08f455ce0 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x55f08f3b9978 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55f08f455e10 <line:3566:5, col:30>
| |   `-ParagraphComment 0x55f08f455de0 <col:5, col:30>
| |     `-TextComment 0x55f08f455db0 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x55f08f3b9a08 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x55f08f455ee0 <line:3568:5, col:10>
| |   `-ParagraphComment 0x55f08f455eb0 <col:5, col:10>
| |     `-TextComment 0x55f08f455e80 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x55f08f3b9a88 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x55f08f455fb0 <line:3570:5, col:18>
| |   `-ParagraphComment 0x55f08f455f80 <col:5, col:18>
| |     `-TextComment 0x55f08f455f50 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x55f08f3b9b08 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55f08f456080 <line:3572:5, col:32>
| |   `-ParagraphComment 0x55f08f456050 <col:5, col:32>
| |     `-TextComment 0x55f08f456020 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x55f08f3b9b90 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x55f08f456150 <line:3574:5, col:29>
| |   `-ParagraphComment 0x55f08f456120 <col:5, col:29>
| |     `-TextComment 0x55f08f4560f0 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x55f08f368fa0 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x55f08f456220 <line:3576:5, col:27>
| |   `-ParagraphComment 0x55f08f4561f0 <col:5, col:27>
| |     `-TextComment 0x55f08f4561c0 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x55f08f369030 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x55f08f4562f0 <line:3578:5, col:18>
| |   `-ParagraphComment 0x55f08f4562c0 <col:5, col:18>
| |     `-TextComment 0x55f08f456290 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x55f08f3690c0 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x55f08f4563c0 <line:3580:5, col:19>
| |   `-ParagraphComment 0x55f08f456390 <col:5, col:19>
| |     `-TextComment 0x55f08f456360 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x55f08f369148 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55f08f456490 <line:3582:5, col:29>
| |   `-ParagraphComment 0x55f08f456460 <col:5, col:29>
| |     `-TextComment 0x55f08f456430 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x55f08f3691c8 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x55f08f456560 <line:3588:5, col:19>
|     `-ParagraphComment 0x55f08f456530 <col:5, col:19>
|       `-TextComment 0x55f08f456500 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x55f08f369298 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x55f08f4566b0 <line:3617:3, col:34>
| | |-ParagraphComment 0x55f08f456600 <col:3>
| | | `-TextComment 0x55f08f4565d0 <col:3> Text=" "
| | `-BlockCommandComment 0x55f08f456620 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x55f08f456680 <col:10, col:34>
| |     `-TextComment 0x55f08f456650 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x55f08f369378 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x55f08f456780 <line:3620:5, col:18>
| |   `-ParagraphComment 0x55f08f456750 <col:5, col:18>
| |     `-TextComment 0x55f08f456720 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x55f08f3693f8 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x55f08f456850 <line:3622:5, col:32>
| |   `-ParagraphComment 0x55f08f456820 <col:5, col:32>
| |     `-TextComment 0x55f08f4567f0 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x55f08f369478 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x55f08f456920 <line:3624:5, col:19>
|     `-ParagraphComment 0x55f08f4568f0 <col:5, col:19>
|       `-TextComment 0x55f08f4568c0 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x55f08f369870 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x55f08f3695d0 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f369648 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x55f08f3696b8 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f369728 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x55f08f4572b0 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x55f08f4569c0 <line:3658:3>
|   | `-TextComment 0x55f08f456990 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4569e0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55f08f456a40 <col:10, col:37>
|   |   `-TextComment 0x55f08f456a10 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x55f08f456a90 <line:3660:3, col:75>
|   | `-TextComment 0x55f08f456a60 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x55f08f456cd0 <line:3662:3, line:3666:32>
|   | |-TextComment 0x55f08f456ab0 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x55f08f456b00 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x55f08f456b20 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x55f08f456b40 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x55f08f456b90 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x55f08f456bb0 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x55f08f456bd0 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x55f08f456bf0 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x55f08f456c40 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x55f08f456c60 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x55f08f456d20 <line:3668:3>
|   | `-TextComment 0x55f08f456cf0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f456d40 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x55f08f456df0 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x55f08f456da0 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x55f08f456dc0 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x55f08f456e10 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55f08f456ec0 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x55f08f456e70 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x55f08f456e90 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x55f08f456ee0 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x55f08f456f90 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x55f08f456f40 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x55f08f456f60 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x55f08f456fb0 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x55f08f457040 <col:19, col:65>
|   |   `-TextComment 0x55f08f457010 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x55f08f457090 <line:3673:3>
|   | `-TextComment 0x55f08f457060 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4570b0 <col:4, line:3674:3> Name="return"
|   | `-ParagraphComment 0x55f08f457130 <line:3673:11, line:3674:3>
|   |   |-TextComment 0x55f08f4570e0 <line:3673:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f457100 <line:3674:3> Text=" "
|   |-VerbatimLineComment 0x55f08f457150 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55f08f4571c0 <line:3675:1>
|     `-TextComment 0x55f08f457190 <col:1> Text=" "
|-FunctionDecl 0x55f08f369b98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x55f08f369980 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3699f0 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f369a60 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x55f08f457a00 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x55f08f457350 <line:3680:3>
|   | `-TextComment 0x55f08f457320 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f457370 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55f08f4573d0 <col:10, col:37>
|   |   `-TextComment 0x55f08f4573a0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x55f08f457470 <line:3682:3, line:3684:8>
|   | |-TextComment 0x55f08f4573f0 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x55f08f457410 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x55f08f457430 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x55f08f457510 <line:3686:3, line:3688:25>
|   | |-TextComment 0x55f08f457490 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x55f08f4574b0 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x55f08f4574d0 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x55f08f457560 <line:3690:3>
|   | `-TextComment 0x55f08f457530 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f457580 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f457630 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x55f08f4575e0 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55f08f457600 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x55f08f457650 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x55f08f457700 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x55f08f4576b0 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x55f08f4576d0 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x55f08f457720 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x55f08f4577b0 <col:19, col:65>
|   |   `-TextComment 0x55f08f457780 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x55f08f457800 <line:3694:3>
|   | `-TextComment 0x55f08f4577d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f457820 <col:4, line:3697:3> Name="return"
|   | `-ParagraphComment 0x55f08f4578f0 <line:3694:11, line:3697:3>
|   |   |-TextComment 0x55f08f457850 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|   |   |-TextComment 0x55f08f457870 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|   |   |-TextComment 0x55f08f457890 <line:3696:3, col:23> Text="	an integer overflow."
|   |   `-TextComment 0x55f08f4578b0 <line:3697:3> Text=" "
|   |-VerbatimLineComment 0x55f08f457910 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55f08f457980 <line:3698:1>
|     `-TextComment 0x55f08f457950 <col:1> Text=" "
|-FunctionDecl 0x55f08f369da8 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x55f08f369ca0 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x55f08f457dd0 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x55f08f457aa0 <line:3703:3>
|   | `-TextComment 0x55f08f457a70 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f457ac0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x55f08f457b20 <col:10, col:46>
|   |   `-TextComment 0x55f08f457af0 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x55f08f457b70 <line:3705:3, col:49>
|   | `-TextComment 0x55f08f457b40 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x55f08f457bc0 <line:3707:3>
|   | `-TextComment 0x55f08f457b90 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f457be0 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f457c70 <col:15, col:39>
|   |   `-TextComment 0x55f08f457c40 <col:15, col:39> Text=" message queue to cleanup"
|   `-ParagraphComment 0x55f08f457d80 <line:3709:3, line:3710:33>
|     |-TextComment 0x55f08f457c90 <line:3709:3> Text=" "
|     |-InlineCommandComment 0x55f08f457cb0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f457cd0 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x55f08f457cf0 <line:3710:3> Text=" "
|     |-InlineCommandComment 0x55f08f457d10 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x55f08f457d30 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x55f08f3bd638 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f369ea0 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f369f18 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55f08f3bd500 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x55f08f458610 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x55f08f457e70 <line:3715:3>
|   | `-TextComment 0x55f08f457e40 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f457e90 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f457ef0 <col:10, col:44>
|   |   `-TextComment 0x55f08f457ec0 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x55f08f457f90 <line:3717:3, col:51>
|   | |-TextComment 0x55f08f457f10 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x55f08f457f60 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x55f08f457fe0 <line:3719:3>
|   | `-TextComment 0x55f08f457fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f458000 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f458060 <col:9, col:31>
|   |   `-TextComment 0x55f08f458030 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f4580b0 <line:3721:3>
|   | `-TextComment 0x55f08f458080 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4580d0 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f458180 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x55f08f458130 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55f08f458150 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x55f08f4581a0 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f458250 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x55f08f458200 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x55f08f458220 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x55f08f458270 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55f08f458350 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x55f08f4582d0 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x55f08f4582f0 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55f08f458310 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55f08f458500 <line:3727:3, line:3730:3>
|   | |-TextComment 0x55f08f458370 <line:3727:3> Text=" "
|   | |-InlineCommandComment 0x55f08f458390 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4583b0 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x55f08f4583d0 <line:3728:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4583f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f458410 <col:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   | |-TextComment 0x55f08f458430 <line:3729:3> Text=" "
|   | |-InlineCommandComment 0x55f08f458450 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f458470 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55f08f458490 <line:3730:3> Text=" "
|   |-VerbatimLineComment 0x55f08f458520 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55f08f458590 <line:3731:1>
|     `-TextComment 0x55f08f458560 <col:1> Text=" "
|-FunctionDecl 0x55f08f3bd8c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3bd740 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3bd7b8 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55f08f3bd828 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x55f08f458f20 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x55f08f4586b0 <line:3735:3>
|   | `-TextComment 0x55f08f458680 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4586d0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f458730 <col:10, col:49>
|   |   `-TextComment 0x55f08f458700 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x55f08f458820 <line:3737:3, line:3738:21>
|   | |-TextComment 0x55f08f458750 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x55f08f4587a0 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x55f08f4587c0 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x55f08f4587e0 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x55f08f458870 <line:3740:3>
|   | `-TextComment 0x55f08f458840 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f458890 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x55f08f458970 <col:9, col:72>
|   |   |-TextComment 0x55f08f4588c0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x55f08f458910 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x55f08f458930 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x55f08f4589c0 <line:3742:3>
|   | `-TextComment 0x55f08f458990 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4589e0 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f458a90 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x55f08f458a40 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55f08f458a60 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x55f08f458ab0 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f458b60 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x55f08f458b10 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x55f08f458b30 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x55f08f458b80 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55f08f458c60 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x55f08f458be0 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x55f08f458c00 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55f08f458c20 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55f08f458e10 <line:3748:3, line:3751:3>
|   | |-TextComment 0x55f08f458c80 <line:3748:3> Text=" "
|   | |-InlineCommandComment 0x55f08f458ca0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f458cc0 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x55f08f458ce0 <line:3749:3> Text=" "
|   | |-InlineCommandComment 0x55f08f458d00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f458d20 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x55f08f458d40 <line:3750:3> Text=" "
|   | |-InlineCommandComment 0x55f08f458d60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f458d80 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55f08f458da0 <line:3751:3> Text=" "
|   |-VerbatimLineComment 0x55f08f458e30 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55f08f458ea0 <line:3752:1>
|     `-TextComment 0x55f08f458e70 <col:1> Text=" "
|-FunctionDecl 0x55f08f3bdb68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x55f08f3bd9d0 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3bda48 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x55f08f459630 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x55f08f458fc0 <line:3756:3>
|   | `-TextComment 0x55f08f458f90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f458fe0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55f08f459040 <col:10, col:51>
|   |   `-TextComment 0x55f08f459010 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x55f08f459130 <line:3758:3, line:3759:57>
|   | |-TextComment 0x55f08f459060 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x55f08f4590b0 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x55f08f4590d0 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x55f08f4590f0 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x55f08f459180 <line:3761:3>
|   | `-TextComment 0x55f08f459150 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4591a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x55f08f459200 <col:9, col:31>
|   |   `-TextComment 0x55f08f4591d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x55f08f459260 <line:3763:3>
|   | `-TextComment 0x55f08f459220 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f459280 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f459330 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x55f08f4592e0 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55f08f459300 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x55f08f459350 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4593e0 <col:15, col:71>
|   |   `-TextComment 0x55f08f4593b0 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x55f08f459520 <line:3766:3, line:3768:3>
|   | |-TextComment 0x55f08f459400 <line:3766:3> Text=" "
|   | |-InlineCommandComment 0x55f08f459420 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f459440 <col:11, col:26> Text=" 0 Message read."
|   | |-TextComment 0x55f08f459460 <line:3767:3> Text=" "
|   | |-InlineCommandComment 0x55f08f459480 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4594a0 <col:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|   | `-TextComment 0x55f08f4594c0 <line:3768:3> Text=" "
|   |-VerbatimLineComment 0x55f08f459540 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55f08f4595b0 <line:3769:1>
|     `-TextComment 0x55f08f459580 <col:1> Text=" "
|-FunctionDecl 0x55f08f3bdd70 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55f08f3bdc70 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x55f08f459ae0 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x55f08f4596d0 <line:3773:3>
|   | `-TextComment 0x55f08f4596a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4596f0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x55f08f459750 <col:10, col:32>
|   |   `-TextComment 0x55f08f459720 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x55f08f4597f0 <line:3775:3, line:3777:61>
|   | |-TextComment 0x55f08f459770 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x55f08f459790 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x55f08f4597b0 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x55f08f459840 <line:3779:3>
|   | `-TextComment 0x55f08f459810 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f459860 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4598f0 <col:15, col:44>
|   |   `-TextComment 0x55f08f4598c0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x55f08f459940 <line:3781:3>
|   | `-TextComment 0x55f08f459910 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f459960 <col:4, line:3782:3> Name="return"
|   | `-ParagraphComment 0x55f08f4599e0 <line:3781:11, line:3782:3>
|   |   |-TextComment 0x55f08f459990 <line:3781:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f4599b0 <line:3782:3> Text=" "
|   |-VerbatimLineComment 0x55f08f459a00 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55f08f459a70 <line:3783:1>
|     `-TextComment 0x55f08f459a40 <col:1> Text=" "
|-FunctionDecl 0x55f08f3bdf70 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55f08f3bde70 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x55f08f459f60 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x55f08f459b80 <line:3787:3>
|   | `-TextComment 0x55f08f459b50 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f459ba0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x55f08f459c00 <col:10, col:58>
|   |   `-TextComment 0x55f08f459bd0 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x55f08f459c70 <line:3789:3, line:3790:15>
|   | |-TextComment 0x55f08f459c20 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x55f08f459c40 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x55f08f459cc0 <line:3792:3>
|   | `-TextComment 0x55f08f459c90 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f459ce0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f459d70 <col:15, col:44>
|   |   `-TextComment 0x55f08f459d40 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x55f08f459dc0 <line:3794:3>
|   | `-TextComment 0x55f08f459d90 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f459de0 <col:4, line:3795:3> Name="return"
|   | `-ParagraphComment 0x55f08f459e60 <line:3794:11, line:3795:3>
|   |   |-TextComment 0x55f08f459e10 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|   |   `-TextComment 0x55f08f459e30 <line:3795:3> Text=" "
|   |-VerbatimLineComment 0x55f08f459e80 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55f08f459ef0 <line:3796:1>
|     `-TextComment 0x55f08f459ec0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3be290 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x55f08f3be070 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3be180 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x55f08f45a490 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x55f08f45a000 <line:3800:3>
|   | `-TextComment 0x55f08f459fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45a020 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x55f08f45a080 <col:10, col:50>
|   |   `-TextComment 0x55f08f45a050 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x55f08f45a0d0 <line:3802:3, col:77>
|   | `-TextComment 0x55f08f45a0a0 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x55f08f45a120 <line:3804:3>
|   | `-TextComment 0x55f08f45a0f0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45a140 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45a1f0 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x55f08f45a1a0 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x55f08f45a1c0 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x55f08f45a210 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x55f08f45a2a0 <col:16, col:61>
|   |   `-TextComment 0x55f08f45a270 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x55f08f45a2f0 <line:3807:3>
|   | `-TextComment 0x55f08f45a2c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45a310 <col:4, line:3808:3> Name="return"
|   | `-ParagraphComment 0x55f08f45a390 <line:3807:11, line:3808:3>
|   |   |-TextComment 0x55f08f45a340 <line:3807:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f45a360 <line:3808:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45a3b0 <col:4, col:19> Text=" K-MSGQ-003"
|   `-ParagraphComment 0x55f08f45a420 <line:3809:1>
|     `-TextComment 0x55f08f45a3f0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3be3f0 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55f08f3be368 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55f08f3beac8 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x55f08f3bea88 <line:3816:2, col:32>
|     `-BinaryOperator 0x55f08f3bea60 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x55f08f3bea30 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x55f08f3be980 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x55f08f3b9b08
|       |   `-ImplicitCastExpr 0x55f08f3be4c0 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x55f08f3be498 <col:9> 'struct k_msgq *' lvalue ParmVar 0x55f08f3be368 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x55f08f3bea48 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x55f08f3be9f8 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x55f08f369148
|           `-ImplicitCastExpr 0x55f08f3be9e0 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x55f08f3be9b8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x55f08f3be368 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55f08f3beb90 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55f08f3beb08 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x55f08f45a8f0 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x55f08f45a530 <line:3820:3>
|   | `-TextComment 0x55f08f45a500 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45a550 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55f08f45a5b0 <col:10, col:56>
|   |   `-TextComment 0x55f08f45a580 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x55f08f45a600 <line:3822:3, col:80>
|   | `-TextComment 0x55f08f45a5d0 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x55f08f45a650 <line:3824:3>
|   | `-TextComment 0x55f08f45a620 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45a670 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45a700 <col:15, col:44>
|   |   `-TextComment 0x55f08f45a6d0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x55f08f45a750 <line:3826:3>
|   | `-TextComment 0x55f08f45a720 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45a770 <col:4, line:3827:3> Name="return"
|   | `-ParagraphComment 0x55f08f45a7f0 <line:3826:11, line:3827:3>
|   |   |-TextComment 0x55f08f45a7a0 <line:3826:11, col:30> Text=" Number of messages."
|   |   `-TextComment 0x55f08f45a7c0 <line:3827:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45a810 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x55f08f45a880 <line:3828:1>
|     `-TextComment 0x55f08f45a850 <col:1> Text=" "
|-FunctionDecl 0x55f08f3bece8 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55f08f3bec60 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55f08f3bee98 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x55f08f3bee20 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x55f08f3bee08 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55f08f3bedd0 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x55f08f369148
|         `-ImplicitCastExpr 0x55f08f3bedb8 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x55f08f3bed90 <col:9> 'struct k_msgq *' lvalue ParmVar 0x55f08f3bec60 'msgq' 'struct k_msgq *'
|-RecordDecl 0x55f08f3beeb0 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x55f08f45ab50 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x55f08f45a990 <line:3839:3>
| | | `-TextComment 0x55f08f45a960 <col:3> Text=" "
| | |-VerbatimLineComment 0x55f08f45a9b0 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x55f08f45aa20 <line:3840:3>
| | | `-TextComment 0x55f08f45a9f0 <col:3> Text=" "
| | |-VerbatimLineComment 0x55f08f45aa40 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x55f08f45ab00 <line:3841:3, col:5>
| |   |-TextComment 0x55f08f45aa80 <col:3> Text=" "
| |   |-TextComment 0x55f08f45aaa0 <col:4> Text="@"
| |   `-TextComment 0x55f08f45aac0 <col:5> Text="{"
| |-FieldDecl 0x55f08f3bef90 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x55f08f3bef60 <col:15> 'int' 8
| |-FieldDecl 0x55f08f3bf008 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x55f08f3befd8 <col:16> 'int' 4
| `-FieldDecl 0x55f08f3bf080 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-IntegerLiteral 0x55f08f3bf050 <col:16> 'int' 20
|-RecordDecl 0x55f08f3bf0c8 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x55f08f3bf188 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x55f08f3bf220 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x55f08f3bf2f8 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x55f08f45ad00 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x55f08f45abf0 <line:3869:3>
| | | `-TextComment 0x55f08f45abc0 <col:3> Text=" "
| | |-BlockCommandComment 0x55f08f45ac10 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x55f08f45ac70 <col:10, col:35>
| | |   `-TextComment 0x55f08f45ac40 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x55f08f45acc0 <line:3871:1>
| |   `-TextComment 0x55f08f45ac90 <col:1> Text=" "
| |-FieldDecl 0x55f08f3bf3d8 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x55f08f45add0 <line:3873:5, col:55>
| |   `-ParagraphComment 0x55f08f45ada0 <col:5, col:55>
| |     `-TextComment 0x55f08f45ad70 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x55f08f3bf458 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x55f08f45aea0 <line:3875:5, col:32>
| |   `-ParagraphComment 0x55f08f45ae70 <col:5, col:32>
| |     `-TextComment 0x55f08f45ae40 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x55f08f3bf4d8 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x55f08f45af70 <line:3877:5, col:43>
| |   `-ParagraphComment 0x55f08f45af40 <col:5, col:43>
| |     `-TextComment 0x55f08f45af10 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x55f08f3bf560 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x55f08f45b040 <line:3879:5, col:34>
| |   `-ParagraphComment 0x55f08f45b010 <col:5, col:34>
| |     `-TextComment 0x55f08f45afe0 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x55f08f3bf5f0 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x55f08f45b110 <line:3881:5, col:55>
| |   `-ParagraphComment 0x55f08f45b0e0 <col:5, col:55>
| |     `-TextComment 0x55f08f45b0b0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x55f08f3bf6c0 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x55f08f45b1e0 <line:3883:5, col:35>
| |   `-ParagraphComment 0x55f08f45b1b0 <col:5, col:35>
| |     `-TextComment 0x55f08f45b180 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x55f08f3bf748 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x55f08f45b2c0 <line:3885:5, col:22>
| |   `-ParagraphComment 0x55f08f45b290 <col:5, col:22>
| |     `-TextComment 0x55f08f45b260 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x55f08f3bf7c8 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x55f08f45b390 <line:3887:5, col:22>
| |   `-ParagraphComment 0x55f08f45b360 <col:5, col:22>
| |     `-TextComment 0x55f08f45b330 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x55f08f3bf848 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x55f08f45b460 <line:3889:5, col:65>
|     `-ParagraphComment 0x55f08f45b430 <col:5, col:65>
|       `-TextComment 0x55f08f45b400 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x55f08f3bf8b8 prev 0x55f08f383020 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x55f08f45b610 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x55f08f45b500 <line:3897:3>
| | | `-TextComment 0x55f08f45b4d0 <col:3> Text=" "
| | |-BlockCommandComment 0x55f08f45b520 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x55f08f45b580 <col:10, col:27>
| | |   `-TextComment 0x55f08f45b550 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x55f08f45b5d0 <line:3899:1>
| |   `-TextComment 0x55f08f45b5a0 <col:1> Text=" "
| |-FieldDecl 0x55f08f3c09a0 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55f08f45b6e0 <line:3901:5, col:29>
| |   `-ParagraphComment 0x55f08f45b6b0 <col:5, col:29>
| |     `-TextComment 0x55f08f45b680 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x55f08f3c0a28 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x55f08f45b7b0 <line:3903:5, col:27>
| |   `-ParagraphComment 0x55f08f45b780 <col:5, col:27>
| |     `-TextComment 0x55f08f45b750 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x55f08f3c0a90 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x55f08f3c0d50 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x55f08f3c0c50 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x55f08f45bc10 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x55f08f45b850 <line:3942:3>
|   | `-TextComment 0x55f08f45b820 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45b870 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55f08f45b8d0 <col:10, col:31>
|   |   `-TextComment 0x55f08f45b8a0 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x55f08f45b920 <line:3944:3, col:69>
|   | `-TextComment 0x55f08f45b8f0 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x55f08f45b970 <line:3946:3>
|   | `-TextComment 0x55f08f45b940 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45b990 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45ba20 <col:15, col:38>
|   |   `-TextComment 0x55f08f45b9f0 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x55f08f45ba70 <line:3948:3>
|   | `-TextComment 0x55f08f45ba40 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45ba90 <col:4, line:3949:3> Name="return"
|   | `-ParagraphComment 0x55f08f45bb10 <line:3948:11, line:3949:3>
|   |   |-TextComment 0x55f08f45bac0 <line:3948:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f45bae0 <line:3949:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45bb30 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55f08f45bba0 <line:3950:1>
|     `-TextComment 0x55f08f45bb70 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c1108 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x55f08f3c0e50 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x55f08f3c0f60 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55f08f3c0fd0 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x55f08f45c440 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x55f08f45bcb0 <line:3954:3>
|   | `-TextComment 0x55f08f45bc80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45bcd0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55f08f45bd30 <col:10, col:57>
|   |   `-TextComment 0x55f08f45bd00 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x55f08f45be50 <line:3956:3, line:3958:55>
|   | |-TextComment 0x55f08f45bd50 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x55f08f45bda0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x55f08f45bdc0 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x55f08f45bde0 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x55f08f45be00 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x55f08f45bea0 <line:3960:3>
|   | `-TextComment 0x55f08f45be70 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45bec0 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45bf70 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x55f08f45bf20 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x55f08f45bf40 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x55f08f45bf90 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x55f08f45c040 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x55f08f45bff0 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x55f08f45c010 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x55f08f45c060 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55f08f45c190 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x55f08f45c0c0 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x55f08f45c0e0 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x55f08f45c100 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x55f08f45c120 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x55f08f45c140 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x55f08f45c340 <line:3968:3, line:3971:3>
|   | |-TextComment 0x55f08f45c1b0 <line:3968:3> Text=" "
|   | |-InlineCommandComment 0x55f08f45c1d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f45c1f0 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x55f08f45c210 <line:3969:3> Text=" "
|   | |-InlineCommandComment 0x55f08f45c230 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f45c250 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x55f08f45c270 <line:3970:3> Text=" "
|   | |-InlineCommandComment 0x55f08f45c290 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f45c2b0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55f08f45c2d0 <line:3971:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45c360 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55f08f45c3d0 <line:3972:1>
|     `-TextComment 0x55f08f45c3a0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c1450 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x55f08f3c1210 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x55f08f3c1298 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55f08f3c1320 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x55f08f45cbc0 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x55f08f45c4e0 <line:3977:3>
|   | `-TextComment 0x55f08f45c4b0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45c500 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55f08f45c560 <col:10, col:59>
|   |   `-TextComment 0x55f08f45c530 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x55f08f45c720 <line:3979:3, line:3983:29>
|   | |-TextComment 0x55f08f45c580 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x55f08f45c5d0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x55f08f45c5f0 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x55f08f45c610 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x55f08f45c630 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x55f08f45c680 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x55f08f45c6a0 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x55f08f45c6c0 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x55f08f45c770 <line:3985:3>
|   | `-TextComment 0x55f08f45c740 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45c790 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45c840 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x55f08f45c7f0 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x55f08f45c810 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x55f08f45c860 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x55f08f45c910 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x55f08f45c8c0 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x55f08f45c8e0 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x55f08f45c930 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x55f08f45c9c0 <col:14, col:64>
|   |   `-TextComment 0x55f08f45c990 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x55f08f45ca10 <line:3989:3>
|   | `-TextComment 0x55f08f45c9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45ca30 <col:4, line:3990:3> Name="return"
|   | `-ParagraphComment 0x55f08f45cab0 <line:3989:11, line:3990:3>
|   |   |-TextComment 0x55f08f45ca60 <line:3989:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f45ca80 <line:3990:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45cad0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55f08f45cb40 <line:3991:1>
|     `-TextComment 0x55f08f45cb10 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c1818 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x55f08f3c1560 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x55f08f3c15e8 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55f08f3c1660 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x55f08f3c16d0 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x55f08f45d490 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x55f08f45cc60 <line:3996:3>
|   | `-TextComment 0x55f08f45cc30 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45cc80 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55f08f45cce0 <col:10, col:36>
|   |   `-TextComment 0x55f08f45ccb0 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x55f08f45cdd0 <line:3998:3, line:3999:40>
|   | |-TextComment 0x55f08f45cd00 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x55f08f45cd50 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x55f08f45cd70 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x55f08f45cd90 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x55f08f45ce20 <line:4001:3>
|   | `-TextComment 0x55f08f45cdf0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45ce40 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45cef0 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x55f08f45cea0 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x55f08f45cec0 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x55f08f45cf10 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x55f08f45cfc0 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x55f08f45cf70 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x55f08f45cf90 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x55f08f45cfe0 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x55f08f45d0c0 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x55f08f45d040 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x55f08f45d060 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x55f08f45d080 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x55f08f45d0e0 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55f08f45d1c0 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x55f08f45d140 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x55f08f45d160 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55f08f45d180 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55f08f45d380 <line:4009:3, line:4012:3>
|   | |-TextComment 0x55f08f45d1e0 <line:4009:3> Text=" "
|   | |-InlineCommandComment 0x55f08f45d200 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f45d220 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x55f08f45d240 <line:4010:3> Text=" "
|   | |-InlineCommandComment 0x55f08f45d270 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f45d290 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x55f08f45d2b0 <line:4011:3> Text=" "
|   | |-InlineCommandComment 0x55f08f45d2d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f45d2f0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55f08f45d310 <line:4012:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45d3a0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55f08f45d410 <line:4013:1>
|     `-TextComment 0x55f08f45d3e0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c1fd0 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x55f08f3c1930 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55f08f3c1eb8 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x55f08f45da80 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x55f08f45d530 <line:4018:3>
|   | `-TextComment 0x55f08f45d500 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45d550 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55f08f45d5b0 <col:10, col:54>
|   |   `-TextComment 0x55f08f45d580 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x55f08f45d620 <line:4020:3, line:4021:57>
|   | |-TextComment 0x55f08f45d5d0 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x55f08f45d5f0 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x55f08f45d690 <line:4023:3, line:4024:31>
|   | |-TextComment 0x55f08f45d640 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x55f08f45d660 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x55f08f45d6e0 <line:4026:3>
|   | `-TextComment 0x55f08f45d6b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45d700 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45d7b0 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x55f08f45d760 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x55f08f45d780 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x55f08f45d7d0 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55f08f45d880 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x55f08f45d830 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x55f08f45d850 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x55f08f45d8d0 <line:4030:3>
|   | `-TextComment 0x55f08f45d8a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45d8f0 <col:4, line:4031:3> Name="return"
|   | `-ParagraphComment 0x55f08f45d970 <line:4030:11, line:4031:3>
|   |   |-TextComment 0x55f08f45d920 <line:4030:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f45d940 <line:4031:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45d990 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55f08f45da00 <line:4032:1>
|     `-TextComment 0x55f08f45d9d0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c23f8 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x55f08f3c20d0 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x55f08f3c2158 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x55f08f3c2240 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x55f08f3c22b0 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x55f08f45e4b0 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x55f08f45db20 <line:4036:3>
|   | `-TextComment 0x55f08f45daf0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45db40 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x55f08f45dba0 <col:10, col:65>
|   |   `-TextComment 0x55f08f45db70 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x55f08f45dc90 <line:4038:3, line:4042:42>
|   | |-TextComment 0x55f08f45dbc0 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x55f08f45dbe0 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x55f08f45dc00 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x55f08f45dc20 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x55f08f45dc40 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x55f08f45dd30 <line:4044:3, line:4046:33>
|   | |-TextComment 0x55f08f45dcb0 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x55f08f45dcd0 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x55f08f45dcf0 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x55f08f45de20 <line:4048:3, line:4052:55>
|   | |-TextComment 0x55f08f45dd50 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x55f08f45dd70 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x55f08f45dd90 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x55f08f45ddb0 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x55f08f45ddd0 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x55f08f45de70 <line:4054:3>
|   | `-TextComment 0x55f08f45de40 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45de90 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45df40 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x55f08f45def0 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x55f08f45df10 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x55f08f45df60 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x55f08f45e010 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x55f08f45dfc0 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x55f08f45dfe0 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x55f08f45e030 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x55f08f45e0e0 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x55f08f45e090 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x55f08f45e0b0 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x55f08f45e100 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55f08f45e1e0 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x55f08f45e160 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x55f08f45e180 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55f08f45e1a0 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55f08f45e390 <line:4061:3, line:4064:3>
|   | |-TextComment 0x55f08f45e200 <line:4061:3> Text=" "
|   | |-InlineCommandComment 0x55f08f45e220 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f45e240 <col:11, col:28> Text=" 0 Data retrieved."
|   | |-TextComment 0x55f08f45e260 <line:4062:3> Text=" "
|   | |-InlineCommandComment 0x55f08f45e280 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f45e2a0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x55f08f45e2c0 <line:4063:3> Text=" "
|   | |-InlineCommandComment 0x55f08f45e2e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f45e300 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55f08f45e320 <line:4064:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45e3b0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x55f08f45e420 <line:4065:1>
|     `-TextComment 0x55f08f45e3f0 <col:1> Text=" "
|-RecordDecl 0x55f08f3c2548 prev 0x55f08f3830d0 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x55f08f45e580 <line:4078:4, col:19>
| | `-ParagraphComment 0x55f08f45e550 <col:4, col:19>
| |   `-TextComment 0x55f08f45e520 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x55f08f3c25e8 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x55f08f45e650 <col:38, col:63>
| |   `-ParagraphComment 0x55f08f45e620 <col:38, col:63>
| |     `-TextComment 0x55f08f45e5f0 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x55f08f3c2668 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x55f08f45e720 <col:38, col:50>
| |   `-ParagraphComment 0x55f08f45e6f0 <col:38, col:50>
| |     `-TextComment 0x55f08f45e6c0 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x55f08f3c26e8 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x55f08f45e7f0 <col:38, col:61>
| |   `-ParagraphComment 0x55f08f45e7c0 <col:38, col:61>
| |     `-TextComment 0x55f08f45e790 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x55f08f3c2768 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x55f08f45e8c0 <col:38, col:67>
| |   `-ParagraphComment 0x55f08f45e890 <col:38, col:67>
| |     `-TextComment 0x55f08f45e860 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x55f08f3c27e8 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x55f08f45e990 <col:38, col:63>
| |   `-ParagraphComment 0x55f08f45e960 <col:38, col:63>
| |     `-TextComment 0x55f08f45e930 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x55f08f3c2878 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x55f08f45ea60 <col:31, col:52>
| |   `-ParagraphComment 0x55f08f45ea30 <col:31, col:52>
| |     `-TextComment 0x55f08f45ea00 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x55f08f3c28e8 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x55f08f3c29a0 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x55f08f45eb30 <col:31, col:49>
| | |   `-ParagraphComment 0x55f08f45eb00 <col:31, col:49>
| | |     `-TextComment 0x55f08f45ead0 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x55f08f3c2a28 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x55f08f45ec00 <col:31, col:49>
| |     `-ParagraphComment 0x55f08f45ebd0 <col:31, col:49>
| |       `-TextComment 0x55f08f45eba0 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x55f08f3c2af0 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x55f08f3c2b48 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x55f08f45ecd0 <col:26, col:32>
|     `-ParagraphComment 0x55f08f45eca0 <col:26, col:32>
|       `-TextComment 0x55f08f45ec70 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x55f08f3c49f0 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x55f08f3c2d60 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3c2dd8 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x55f08f3c48c0 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x55f08f45f370 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x55f08f45ed70 <line:4145:3>
|   | `-TextComment 0x55f08f45ed40 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45ed90 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55f08f45edf0 <col:10, col:28>
|   |   `-TextComment 0x55f08f45edc0 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x55f08f45ee40 <line:4147:3, col:66>
|   | `-TextComment 0x55f08f45ee10 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x55f08f45ee90 <line:4149:3>
|   | `-TextComment 0x55f08f45ee60 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45eeb0 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45ef60 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x55f08f45ef10 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55f08f45ef30 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x55f08f45ef80 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55f08f45f060 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x55f08f45efe0 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x55f08f45f000 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x55f08f45f020 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x55f08f45f080 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x55f08f45f130 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x55f08f45f0e0 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x55f08f45f100 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x55f08f45f180 <line:4155:3>
|   | `-TextComment 0x55f08f45f150 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45f1a0 <col:4, line:4156:3> Name="return"
|   | `-ParagraphComment 0x55f08f45f220 <line:4155:11, line:4156:3>
|   |   |-TextComment 0x55f08f45f1d0 <line:4155:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f45f1f0 <line:4156:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45f280 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55f08f45f2f0 <line:4157:1>
|     `-TextComment 0x55f08f45f2c0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c4c08 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x55f08f3c4b00 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x55f08f45f830 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x55f08f45f410 <line:4161:3>
|   | `-TextComment 0x55f08f45f3e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45f430 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x55f08f45f490 <col:10, col:43>
|   |   `-TextComment 0x55f08f45f460 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x55f08f45f530 <line:4163:3, line:4165:46>
|   | |-TextComment 0x55f08f45f4b0 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x55f08f45f4d0 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x55f08f45f4f0 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x55f08f45f580 <line:4167:3>
|   | `-TextComment 0x55f08f45f550 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45f5a0 <col:4, line:4170:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45f740 <line:4167:15, line:4170:3>
|   |   |-TextComment 0x55f08f45f600 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   |-TextComment 0x55f08f45f620 <line:4168:3> Text=" "
|   |   |-InlineCommandComment 0x55f08f45f640 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55f08f45f660 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x55f08f45f680 <line:4169:3> Text=" "
|   |   |-InlineCommandComment 0x55f08f45f6a0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55f08f45f6c0 <col:11, col:37> Text=" -EAGAIN nothing to cleanup"
|   |   `-TextComment 0x55f08f45f6e0 <line:4170:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45f760 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55f08f45f7d0 <line:4171:1>
|     `-TextComment 0x55f08f45f7a0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c4e88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x55f08f3c4d00 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3c4d70 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x55f08f45fe50 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x55f08f45f8d0 <line:4175:3>
|   | `-TextComment 0x55f08f45f8a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45f8f0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x55f08f45f950 <col:10, col:56>
|   |   `-TextComment 0x55f08f45f920 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x55f08f45f9f0 <line:4177:3, line:4179:74>
|   | |-TextComment 0x55f08f45f970 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x55f08f45f990 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x55f08f45f9b0 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x55f08f45fa40 <line:4181:3, col:69>
|   | `-TextComment 0x55f08f45fa10 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x55f08f45fa90 <line:4183:3>
|   | `-TextComment 0x55f08f45fa60 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f45fab0 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55f08f45fb60 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x55f08f45fb10 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55f08f45fb30 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x55f08f45fb80 <col:4, line:4188:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x55f08f45fd50 <line:4184:15, line:4188:3>
|   |   |-TextComment 0x55f08f45fbe0 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x55f08f45fc00 <line:4185:3, col:30> Text="             buffer is used."
|   |   |-TextComment 0x55f08f45fc20 <line:4186:3> Text=" "
|   |   |-InlineCommandComment 0x55f08f45fc40 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55f08f45fc60 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x55f08f45fc80 <line:4187:3> Text=" "
|   |   |-InlineCommandComment 0x55f08f45fca0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x55f08f45fcc0 <col:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x55f08f45fce0 <line:4188:3> Text=" "
|   |-VerbatimLineComment 0x55f08f45fd70 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55f08f45fde0 <line:4189:1>
|     `-TextComment 0x55f08f45fdb0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c5378 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3c4f90 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3c5008 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55f08f3c5078 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3c5118 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x55f08f3c5188 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3c51f8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x55f08f4609c0 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x55f08f45fef0 <line:4193:3>
|   | `-TextComment 0x55f08f45fec0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f45ff10 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x55f08f45ff70 <col:10, col:31>
|   |   `-TextComment 0x55f08f45ff40 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x55f08f460090 <line:4195:3, col:66>
|   | |-TextComment 0x55f08f45ff90 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x55f08f45ffe0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x55f08f460000 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x55f08f460050 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x55f08f4600e0 <line:4197:3>
|   | `-TextComment 0x55f08f4600b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f460100 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4601b0 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x55f08f460160 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55f08f460180 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x55f08f4601d0 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f460280 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x55f08f460230 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x55f08f460250 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x55f08f4602a0 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x55f08f460350 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x55f08f460300 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x55f08f460320 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x55f08f460370 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x55f08f460420 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x55f08f4603d0 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x55f08f4603f0 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x55f08f460440 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x55f08f4604f0 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x55f08f4604a0 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x55f08f4604c0 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x55f08f460510 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x55f08f4605f0 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x55f08f460570 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x55f08f460590 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55f08f4605b0 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55f08f4608a0 <line:4206:3, line:4210:3>
|   | |-TextComment 0x55f08f460610 <line:4206:3> Text=" "
|   | |-InlineCommandComment 0x55f08f460630 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f460650 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x55f08f4606a0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55f08f4606c0 <col:34, col:61> Text=" bytes of data were written."
|   | |-TextComment 0x55f08f4606e0 <line:4207:3> Text=" "
|   | |-InlineCommandComment 0x55f08f460700 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f460720 <col:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   | |-TextComment 0x55f08f460740 <line:4208:3> Text=" "
|   | |-InlineCommandComment 0x55f08f460760 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f460780 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x55f08f4607d0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55f08f4607f0 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|   | `-TextComment 0x55f08f460810 <line:4210:3> Text=" "
|   |-VerbatimLineComment 0x55f08f4608c0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55f08f460930 <line:4211:1>
|     `-TextComment 0x55f08f460900 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c5790 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3c54a0 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3c5518 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x55f08f3c5588 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3c55f8 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x55f08f3c5668 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3c56d8 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x55f08f4615d0 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x55f08f460a60 <line:4217:3>
|   | `-TextComment 0x55f08f460a30 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f460a80 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x55f08f460ae0 <col:10, col:32>
|   |   `-TextComment 0x55f08f460ab0 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x55f08f460c00 <line:4219:3, col:66>
|   | |-TextComment 0x55f08f460b00 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x55f08f460b50 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x55f08f460b70 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x55f08f460bc0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x55f08f460c50 <line:4221:3>
|   | `-TextComment 0x55f08f460c20 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f460c70 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55f08f460d20 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x55f08f460cd0 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55f08f460cf0 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x55f08f460d40 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x55f08f460df0 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x55f08f460da0 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x55f08f460dc0 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x55f08f460e10 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x55f08f460ec0 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x55f08f460e70 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x55f08f460e90 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x55f08f460ee0 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x55f08f460f90 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x55f08f460f40 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x55f08f460f60 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x55f08f460fb0 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x55f08f461060 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x55f08f461010 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x55f08f461030 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x55f08f461080 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x55f08f461160 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x55f08f4610e0 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x55f08f461100 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x55f08f461120 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x55f08f4614b0 <line:4230:3, line:4235:3>
|   | |-TextComment 0x55f08f461180 <line:4230:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4611a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4611c0 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x55f08f461210 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55f08f461230 <col:34, col:58> Text=" bytes of data were read."
|   | |-TextComment 0x55f08f461250 <line:4231:3> Text=" "
|   | |-InlineCommandComment 0x55f08f461290 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4612b0 <col:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   | |-TextComment 0x55f08f4612d0 <line:4232:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4612f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f461310 <col:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   | |-TextComment 0x55f08f461330 <line:4233:3> Text=" "
|   | |-InlineCommandComment 0x55f08f461350 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f461370 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x55f08f4613c0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x55f08f4613e0 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|   | `-TextComment 0x55f08f461400 <line:4235:3> Text=" "
|   |-VerbatimLineComment 0x55f08f4614d0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55f08f461540 <line:4236:1>
|     `-TextComment 0x55f08f461510 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c5b90 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x55f08f3c58d0 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3c5958 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x55f08f3c59c8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3c5a50 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x55f08f461e50 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x55f08f461670 <line:4242:3>
|   | `-TextComment 0x55f08f461640 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f461690 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x55f08f4616f0 <col:10, col:39>
|   |   `-TextComment 0x55f08f4616c0 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x55f08f4618e0 <line:4244:3, line:4246:79>
|   | |-TextComment 0x55f08f461710 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x55f08f461760 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x55f08f461780 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x55f08f4617a0 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x55f08f4617f0 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x55f08f461810 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x55f08f461860 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x55f08f461880 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x55f08f461930 <line:4248:3>
|   | `-TextComment 0x55f08f461900 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f461950 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x55f08f461a00 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x55f08f4619b0 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x55f08f4619d0 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x55f08f461a20 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x55f08f461ad0 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x55f08f461a80 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x55f08f461aa0 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x55f08f461af0 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x55f08f461ba0 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x55f08f461b50 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x55f08f461b70 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x55f08f461bc0 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x55f08f461c50 <col:14, col:61>
|   |   `-TextComment 0x55f08f461c20 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x55f08f461ca0 <line:4253:3>
|   | `-TextComment 0x55f08f461c70 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f461cc0 <col:4, line:4254:3> Name="return"
|   | `-ParagraphComment 0x55f08f461d40 <line:4253:11, line:4254:3>
|   |   |-TextComment 0x55f08f461cf0 <line:4253:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f461d10 <line:4254:3> Text=" "
|   |-VerbatimLineComment 0x55f08f461d60 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x55f08f461dd0 <line:4255:1>
|     `-TextComment 0x55f08f461da0 <col:1> Text=" "
|-RecordDecl 0x55f08f3c5ca8 prev 0x55f08f383440 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x55f08f461f70 <line:4262:3, col:24>
| | `-ParagraphComment 0x55f08f461f40 <col:3, col:24>
| |   |-TextComment 0x55f08f461ec0 <col:3> Text=" "
| |   |-InlineCommandComment 0x55f08f461ee0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55f08f461f00 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55f08f3c5d40 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x55f08f3c5d98 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x55f08f3c5df0 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x55f08f3c5e50 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x55f08f3c5eb0 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x55f08f3c5f08 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x55f08f3c6368 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x55f08f3c60c0 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x55f08f3c6138 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x55f08f3c61a8 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3c6218 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x55f08f462960 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x55f08f462010 <line:4330:3>
|   | `-TextComment 0x55f08f461fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f462030 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x55f08f462090 <col:10, col:35>
|   |   `-TextComment 0x55f08f462060 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x55f08f4620e0 <line:4332:3, col:53>
|   | `-TextComment 0x55f08f4620b0 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x55f08f462370 <line:4334:3, line:4339:51>
|   | |-TextComment 0x55f08f462100 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x55f08f462150 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x55f08f462170 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x55f08f462190 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x55f08f4621e0 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x55f08f462200 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x55f08f462220 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x55f08f462240 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x55f08f462260 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x55f08f462280 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4622d0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x55f08f4622f0 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x55f08f4623c0 <line:4341:3>
|   | `-TextComment 0x55f08f462390 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4623e0 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55f08f462490 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x55f08f462440 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x55f08f462460 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x55f08f4624b0 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x55f08f462560 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x55f08f462510 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x55f08f462530 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x55f08f462580 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x55f08f462630 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x55f08f4625e0 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x55f08f462600 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x55f08f462650 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x55f08f4626e0 <col:21, col:45>
|   |   `-TextComment 0x55f08f4626b0 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x55f08f4627f0 <line:4346:3, line:4347:40>
|   | |-TextComment 0x55f08f462700 <line:4346:3> Text=" "
|   | |-InlineCommandComment 0x55f08f462720 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f462740 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x55f08f462760 <line:4347:3> Text=" "
|   | |-InlineCommandComment 0x55f08f462780 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x55f08f4627a0 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   |-ParagraphComment 0x55f08f462840 <line:4349:3>
|   | `-TextComment 0x55f08f462810 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f462860 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55f08f4628d0 <line:4350:1>
|     `-TextComment 0x55f08f4628a0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c66a8 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x55f08f3c6480 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x55f08f3c64f8 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x55f08f3c6568 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x55f08f463170 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x55f08f462a00 <line:4355:3>
|   | `-TextComment 0x55f08f4629d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f462a20 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55f08f462a80 <col:10, col:45>
|   |   `-TextComment 0x55f08f462a50 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x55f08f462ad0 <line:4357:3, col:60>
|   | `-TextComment 0x55f08f462aa0 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x55f08f462b20 <line:4359:3>
|   | `-TextComment 0x55f08f462af0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f462b40 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55f08f462bf0 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x55f08f462ba0 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x55f08f462bc0 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x55f08f462c10 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x55f08f462cc0 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x55f08f462c70 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x55f08f462c90 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x55f08f462ce0 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55f08f462dc0 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x55f08f462d40 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x55f08f462d60 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x55f08f462d80 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x55f08f463070 <line:4365:3, line:4370:3>
|   | |-TextComment 0x55f08f462de0 <line:4365:3> Text=" "
|   | |-InlineCommandComment 0x55f08f462e00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f462e20 <col:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   | |-InlineCommandComment 0x55f08f462e70 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   | |-TextComment 0x55f08f462e90 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x55f08f462eb0 <line:4367:3> Text=" "
|   | |-InlineCommandComment 0x55f08f462ed0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f462ef0 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x55f08f462f10 <line:4368:3> Text=" "
|   | |-InlineCommandComment 0x55f08f462f30 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f462f50 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x55f08f462f70 <line:4369:3> Text=" "
|   | |-InlineCommandComment 0x55f08f462f90 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f462fb0 <col:11, col:40> Text=" -EINVAL Invalid data supplied"
|   | `-TextComment 0x55f08f462fd0 <line:4370:3> Text=" "
|   |-VerbatimLineComment 0x55f08f463090 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55f08f463100 <line:4371:1>
|     `-TextComment 0x55f08f4630d0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c76b0 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x55f08f3c67b0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x55f08f3c6828 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x55f08f4636d0 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x55f08f463210 <line:4376:3>
|   | `-TextComment 0x55f08f4631e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f463230 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55f08f4632a0 <col:10, col:51>
|   |   `-TextComment 0x55f08f463260 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x55f08f463310 <line:4378:3, line:4379:26>
|   | |-TextComment 0x55f08f4632c0 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x55f08f4632e0 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x55f08f463360 <line:4381:3>
|   | `-TextComment 0x55f08f463330 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f463380 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55f08f463430 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x55f08f4633e0 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x55f08f463400 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x55f08f463450 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4634e0 <col:14, col:75>
|   |   `-TextComment 0x55f08f4634b0 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x55f08f463530 <line:4384:3>
|   | `-TextComment 0x55f08f463500 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f463550 <col:4, line:4385:3> Name="return"
|   | `-ParagraphComment 0x55f08f4635d0 <line:4384:11, line:4385:3>
|   |   |-TextComment 0x55f08f463580 <line:4384:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f4635a0 <line:4385:3> Text=" "
|   |-VerbatimLineComment 0x55f08f4635f0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55f08f463660 <line:4386:1>
|     `-TextComment 0x55f08f463630 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c78b0 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x55f08f3c77b0 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x55f08f3c7a28 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x55f08f3c79e8 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x55f08f3c79d0 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x55f08f3c7998 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x55f08f3c5f08
| |       `-ImplicitCastExpr 0x55f08f3c7980 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x55f08f3c7958 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x55f08f3c77b0 'slab' 'struct k_mem_slab *'
| `-FullComment 0x55f08f463bb0 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x55f08f463770 <line:4390:3>
|   | `-TextComment 0x55f08f463740 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f463790 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55f08f4637f0 <col:10, col:57>
|   |   `-TextComment 0x55f08f4637c0 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x55f08f4638c0 <line:4392:3, line:4393:18>
|   | |-TextComment 0x55f08f463810 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x55f08f463830 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x55f08f463880 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x55f08f463910 <line:4395:3>
|   | `-TextComment 0x55f08f4638e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f463930 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4639c0 <col:15, col:42>
|   |   `-TextComment 0x55f08f463990 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x55f08f463a10 <line:4397:3>
|   | `-TextComment 0x55f08f4639e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f463a30 <col:4, line:4398:3> Name="return"
|   | `-ParagraphComment 0x55f08f463ab0 <line:4397:11, line:4398:3>
|   |   |-TextComment 0x55f08f463a60 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|   |   `-TextComment 0x55f08f463a80 <line:4398:3> Text=" "
|   |-VerbatimLineComment 0x55f08f463ad0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55f08f463b40 <line:4399:1>
|     `-TextComment 0x55f08f463b10 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c7af0 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x55f08f3c7a68 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x55f08f3c7d58 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x55f08f3c7ce0 <line:4418:2, col:34>
| |   `-BinaryOperator 0x55f08f3c7cb8 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x55f08f3c7c88 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x55f08f3c7bd8 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x55f08f3c5d98
| |     |   `-ImplicitCastExpr 0x55f08f3c7bc0 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x55f08f3c7b98 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x55f08f3c7a68 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x55f08f3c7ca0 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x55f08f3c7c50 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x55f08f3c5f08
| |         `-ImplicitCastExpr 0x55f08f3c7c38 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x55f08f3c7c10 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x55f08f3c7a68 'slab' 'struct k_mem_slab *'
| `-FullComment 0x55f08f464090 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x55f08f463c50 <line:4406:3>
|   | `-TextComment 0x55f08f463c20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f463c70 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x55f08f463cd0 <col:10, col:59>
|   |   `-TextComment 0x55f08f463ca0 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x55f08f463da0 <line:4408:3, line:4409:20>
|   | |-TextComment 0x55f08f463cf0 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x55f08f463d10 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x55f08f463d60 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x55f08f463df0 <line:4411:3>
|   | `-TextComment 0x55f08f463dc0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f463e10 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x55f08f463ea0 <col:15, col:42>
|   |   `-TextComment 0x55f08f463e70 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x55f08f463ef0 <line:4413:3>
|   | `-TextComment 0x55f08f463ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f463f10 <col:4, line:4414:3> Name="return"
|   | `-ParagraphComment 0x55f08f463f90 <line:4413:11, line:4414:3>
|   |   |-TextComment 0x55f08f463f40 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|   |   `-TextComment 0x55f08f463f60 <line:4414:3> Text=" "
|   |-VerbatimLineComment 0x55f08f463fb0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x55f08f464020 <line:4415:1>
|     `-TextComment 0x55f08f463ff0 <col:1> Text=" "
|-RecordDecl 0x55f08f3c7d70 prev 0x55f08f3834f0 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x55f08f4641b0 <line:4424:3, col:24>
| | `-ParagraphComment 0x55f08f464180 <col:3, col:24>
| |   |-TextComment 0x55f08f464100 <col:3> Text=" "
| |   |-InlineCommandComment 0x55f08f464120 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x55f08f464140 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x55f08f3c7e18 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x55f08f3c7e70 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x55f08f3c82c8 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55f08f3c8010 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x55f08f3c8098 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x55f08f3c8108 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3c8178 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x55f08f464a50 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x55f08f464250 <line:4478:3>
|   | `-TextComment 0x55f08f464220 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f464270 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x55f08f4642d0 <col:10, col:45>
|   |   `-TextComment 0x55f08f4642a0 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x55f08f464320 <line:4480:3, col:60>
|   | `-TextComment 0x55f08f4642f0 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x55f08f464370 <line:4482:3>
|   | `-TextComment 0x55f08f464340 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f464390 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x55f08f464440 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x55f08f4643f0 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x55f08f464410 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x55f08f464460 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x55f08f464510 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x55f08f4644c0 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x55f08f4644e0 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x55f08f464530 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x55f08f4645e0 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x55f08f464590 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x55f08f4645b0 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x55f08f464600 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x55f08f4646e0 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x55f08f464660 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x55f08f464680 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x55f08f4646a0 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x55f08f464940 <line:4489:3, line:4493:3>
|   | |-TextComment 0x55f08f464700 <line:4489:3> Text=" "
|   | |-InlineCommandComment 0x55f08f464720 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f464740 <col:11, col:35> Text=" 0 Memory allocated. The "
|   | |-InlineCommandComment 0x55f08f464790 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x55f08f4647b0 <col:43, col:72> Text=" field of the block descriptor"
|   | |-TextComment 0x55f08f4647d0 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x55f08f4647f0 <line:4491:3> Text=" "
|   | |-InlineCommandComment 0x55f08f464810 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f464830 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x55f08f464850 <line:4492:3> Text=" "
|   | |-InlineCommandComment 0x55f08f464870 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f464890 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x55f08f4648b0 <line:4493:3> Text=" "
|   |-VerbatimLineComment 0x55f08f464960 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55f08f4649d0 <line:4494:1>
|     `-TextComment 0x55f08f4649a0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c8568 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x55f08f3c83e0 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x55f08f3c8450 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x55f08f464f50 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x55f08f464af0 <line:4499:3>
|   | `-TextComment 0x55f08f464ac0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f464b10 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55f08f464b70 <col:10, col:68>
|   |   `-TextComment 0x55f08f464b40 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x55f08f464bc0 <line:4501:3, col:47>
|   | `-TextComment 0x55f08f464b90 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x55f08f464c10 <line:4503:3>
|   | `-TextComment 0x55f08f464be0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f464c30 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x55f08f464ce0 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x55f08f464c90 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x55f08f464cb0 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x55f08f464d00 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x55f08f464db0 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x55f08f464d60 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x55f08f464d80 <line:4505:3> Text=" "
|   |-BlockCommandComment 0x55f08f464dd0 <col:4, line:4506:3> Name="return"
|   | `-ParagraphComment 0x55f08f464e50 <line:4505:11, line:4506:3>
|   |   |-TextComment 0x55f08f464e00 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|   |   `-TextComment 0x55f08f464e20 <line:4506:3> Text=" "
|   |-VerbatimLineComment 0x55f08f464e70 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55f08f464ee0 <line:4507:1>
|     `-TextComment 0x55f08f464eb0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c9980 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x55f08f3c9880 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x55f08f4653e0 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x55f08f464ff0 <line:4511:3>
|   | `-TextComment 0x55f08f464fc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f465010 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55f08f465070 <col:10, col:51>
|   |   `-TextComment 0x55f08f465040 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x55f08f4650e0 <line:4513:3, line:4514:15>
|   | |-TextComment 0x55f08f465090 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x55f08f4650b0 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x55f08f465130 <line:4516:3>
|   | `-TextComment 0x55f08f465100 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f465150 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4651e0 <col:16, col:69>
|   |   `-TextComment 0x55f08f4651b0 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x55f08f465230 <line:4518:3>
|   | `-TextComment 0x55f08f465200 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f465250 <col:4, line:4519:3> Name="return"
|   | `-ParagraphComment 0x55f08f4652e0 <line:4518:11, line:4519:3>
|   |   |-TextComment 0x55f08f465280 <line:4518:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f4652b0 <line:4519:3> Text=" "
|   |-VerbatimLineComment 0x55f08f465300 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55f08f465370 <line:4520:1>
|     `-TextComment 0x55f08f465340 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c9be0 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x55f08f3c9ae0 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x55f08f465860 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x55f08f465480 <line:4524:3>
|   | `-TextComment 0x55f08f465450 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4654a0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x55f08f465500 <col:10, col:51>
|   |   `-TextComment 0x55f08f4654d0 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x55f08f465570 <line:4526:3, line:4527:14>
|   | |-TextComment 0x55f08f465520 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x55f08f465540 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x55f08f4655c0 <line:4529:3>
|   | `-TextComment 0x55f08f465590 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4655e0 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x55f08f465670 <col:13, col:37>
|   |   `-TextComment 0x55f08f465640 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x55f08f4656c0 <line:4531:3>
|   | `-TextComment 0x55f08f465690 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4656e0 <col:4, line:4532:3> Name="return"
|   | `-ParagraphComment 0x55f08f465760 <line:4531:11, line:4532:3>
|   |   |-TextComment 0x55f08f465710 <line:4531:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f465730 <line:4532:3> Text=" "
|   |-VerbatimLineComment 0x55f08f465780 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x55f08f4657f0 <line:4533:1>
|     `-TextComment 0x55f08f4657c0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c9e38 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x55f08f3c9d28 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x55f08f465ce0 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x55f08f465900 <line:4547:3>
|   | `-TextComment 0x55f08f4658d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f465920 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x55f08f465980 <col:10, col:36>
|   |   `-TextComment 0x55f08f465950 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x55f08f4659f0 <line:4549:3, line:4550:39>
|   | |-TextComment 0x55f08f4659a0 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x55f08f4659c0 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x55f08f465a40 <line:4552:3>
|   | `-TextComment 0x55f08f465a10 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f465a60 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x55f08f465af0 <col:15, col:53>
|   |   `-TextComment 0x55f08f465ac0 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x55f08f465b40 <line:4554:3>
|   | `-TextComment 0x55f08f465b10 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f465b60 <col:4, line:4555:3> Name="return"
|   | `-ParagraphComment 0x55f08f465be0 <line:4554:11, line:4555:3>
|   |   |-TextComment 0x55f08f465b90 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x55f08f465bb0 <line:4555:3> Text=" "
|   |-VerbatimLineComment 0x55f08f465c00 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x55f08f465c70 <line:4556:1>
|     `-TextComment 0x55f08f465c40 <col:1> Text=" "
|-FunctionDecl 0x55f08f3c9fa8 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x55f08f3c9f20 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x55f08f466260 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x55f08f465d80 <line:4560:3>
|   | `-TextComment 0x55f08f465d50 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f465da0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f465e00 <col:10, col:42>
|   |   `-TextComment 0x55f08f465dd0 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x55f08f465ea0 <line:4562:3, line:4564:23>
|   | |-TextComment 0x55f08f465e20 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x55f08f465e40 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x55f08f465e60 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x55f08f465f70 <line:4566:3, col:48>
|   | |-TextComment 0x55f08f465ec0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x55f08f465f10 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x55f08f465f30 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x55f08f465fc0 <line:4568:3>
|   | `-TextComment 0x55f08f465f90 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f465fe0 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x55f08f466070 <col:14, col:53>
|   |   `-TextComment 0x55f08f466040 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x55f08f4660c0 <line:4570:3>
|   | `-TextComment 0x55f08f466090 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4660e0 <col:4, line:4571:3> Name="return"
|   | `-ParagraphComment 0x55f08f466160 <line:4570:11, line:4571:3>
|   |   |-TextComment 0x55f08f466110 <line:4570:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f466130 <line:4571:3> Text=" "
|   |-VerbatimLineComment 0x55f08f466180 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x55f08f4661f0 <line:4572:1>
|     `-TextComment 0x55f08f4661c0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3ca218 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x55f08f3ca088 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3ca0f8 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x55f08f4667b0 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x55f08f466300 <line:4576:3>
|   | `-TextComment 0x55f08f4662d0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f466320 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x55f08f466380 <col:10, col:48>
|   |   `-TextComment 0x55f08f466350 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x55f08f4663f0 <line:4578:3, line:4579:50>
|   | |-TextComment 0x55f08f4663a0 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x55f08f4663c0 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x55f08f466440 <line:4581:3>
|   | `-TextComment 0x55f08f466410 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f466460 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x55f08f466510 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x55f08f4664c0 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x55f08f4664e0 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x55f08f466530 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4665c0 <col:15, col:53>
|   |   `-TextComment 0x55f08f466590 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x55f08f466610 <line:4584:3>
|   | `-TextComment 0x55f08f4665e0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f466630 <col:4, line:4585:3> Name="return"
|   | `-ParagraphComment 0x55f08f4666b0 <line:4584:11, line:4585:3>
|   |   |-TextComment 0x55f08f466660 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x55f08f466680 <line:4585:3> Text=" "
|   |-VerbatimLineComment 0x55f08f4666d0 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x55f08f466740 <line:4586:1>
|     `-TextComment 0x55f08f466710 <col:1> Text=" "
|-EnumDecl 0x55f08f3ca2f8 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x55f08f3ca3b0 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x55f08f3ca3f8 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x55f08f3ca440 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x55f08f3ca488 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x55f08f3ca4d0 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x55f08f3ca518 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x55f08f3ca5d0 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x55f08f3ca618 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x55f08f3ca660 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x55f08f3ca6a8 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x55f08f3ca6f0 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x55f08f3ca738 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x55f08f3ccd40 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x55f08f3cce20 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-IntegerLiteral 0x55f08f3cce00 <col:28> 'int' 0
| `-EnumConstantDecl 0x55f08f3cce68 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x55f08f3cceb0 prev 0x55f08f383700 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x55f08f3ccf78 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x55f08f466880 <line:4684:5, col:28>
| |   `-ParagraphComment 0x55f08f466850 <col:5, col:28>
| |     `-TextComment 0x55f08f466820 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55f08f3cd000 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x55f08f466970 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x55f08f466940 <line:4688:4, line:4689:24>
| |     |-TextComment 0x55f08f4668f0 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x55f08f466910 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x55f08f3cd090 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x55f08f466a40 <line:4693:5, col:67>
|     `-ParagraphComment 0x55f08f466a10 <col:5, col:67>
|       `-TextComment 0x55f08f4669e0 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x55f08f3cd108 prev 0x55f08f383650 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x55f08f466bf0 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x55f08f466ae0 <line:4704:3>
| | | `-TextComment 0x55f08f466ab0 <col:3> Text=" "
| | |-BlockCommandComment 0x55f08f466b00 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x55f08f466b60 <col:10, col:20>
| | |   `-TextComment 0x55f08f466b30 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x55f08f466bb0 <line:4706:1>
| |   `-TextComment 0x55f08f466b80 <col:1> Text=" "
| |-FieldDecl 0x55f08f3cd1c8 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x55f08f466cc0 <line:4708:5, col:28>
| |   `-ParagraphComment 0x55f08f466c90 <col:5, col:28>
| |     `-TextComment 0x55f08f466c60 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55f08f3cd2c0 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x55f08f466d90 <line:4711:5, col:28>
| |   `-ParagraphComment 0x55f08f466d60 <col:5, col:28>
| |     `-TextComment 0x55f08f466d30 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x55f08f3cd368 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x55f08f3cd338 <col:12> 'int' 8
| | `-FullComment 0x55f08f466e60 <line:4714:5, col:63>
| |   `-ParagraphComment 0x55f08f466e30 <col:5, col:63>
| |     `-TextComment 0x55f08f466e00 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x55f08f3cd410 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x55f08f3cd3d8 <col:13> 'int' EnumConstant 0x55f08f3ca4d0 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x55f08f466f30 <line:4717:5, col:67>
| |   `-ParagraphComment 0x55f08f466f00 <col:5, col:67>
| |     `-TextComment 0x55f08f466ed0 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x55f08f3cd4c0 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x55f08f3cd488 <col:14> 'int' EnumConstant 0x55f08f3ca738 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x55f08f467000 <line:4720:5, col:69>
| |   `-ParagraphComment 0x55f08f466fd0 <col:5, col:69>
| |     `-TextComment 0x55f08f466fa0 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x55f08f3cd568 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x55f08f3cd538 <col:13> 'int' 1
| | `-FullComment 0x55f08f4670d0 <line:4723:5, col:47>
| |   `-ParagraphComment 0x55f08f4670a0 <col:5, col:47>
| |     `-TextComment 0x55f08f467070 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x55f08f3cd7c0 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ParenExpr 0x55f08f3cd790 <line:4641:2, line:4646:9> 'int'
| | | `-BinaryOperator 0x55f08f3cd768 <line:4641:3, line:4646:8> 'int' '-'
| | |   |-IntegerLiteral 0x55f08f3cd5d8 <line:4641:3> 'int' 32
| | |   `-ParenExpr 0x55f08f3cd748 <col:8, line:4646:8> 'int'
| | |     `-BinaryOperator 0x55f08f3cd720 <line:4641:9, line:4645:11> 'int' '+'
| | |       |-BinaryOperator 0x55f08f3cd6d8 <line:4641:9, line:4644:11> 'int' '+'
| | |       | |-BinaryOperator 0x55f08f3cd688 <line:4641:9, line:4643:11> 'int' '+'
| | |       | | |-BinaryOperator 0x55f08f3cd638 <line:4641:9, line:4642:11> 'int' '+'
| | |       | | | |-IntegerLiteral 0x55f08f3cd5f8 <line:4641:9> 'int' 0
| | |       | | | `-IntegerLiteral 0x55f08f3cd618 <line:4642:11> 'int' 8
| | |       | | `-DeclRefExpr 0x55f08f3cd660 <line:4643:11> 'int' EnumConstant 0x55f08f3ca4d0 '_POLL_NUM_TYPES' 'int'
| | |       | `-DeclRefExpr 0x55f08f3cd6b0 <line:4644:11> 'int' EnumConstant 0x55f08f3ca738 '_POLL_NUM_STATES' 'int'
| | |       `-IntegerLiteral 0x55f08f3cd700 <line:4645:11> 'int' 1
| | `-FullComment 0x55f08f4671a0 <line:4726:5, col:32>
| |   `-ParagraphComment 0x55f08f467170 <col:5, col:32>
| |     `-TextComment 0x55f08f467140 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x55f08f3cd838 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x55f08f467270 <line:4729:5, col:19>
| | | `-ParagraphComment 0x55f08f467240 <col:5, col:19>
| | |   `-TextComment 0x55f08f467210 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x55f08f3cd8f8 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x55f08f3cd9f0 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x55f08f3cda60 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x55f08f3cdb60 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x55f08f3cdbd0 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x55f08f3cdc70 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x55f08f3cdcc8 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x55f08f3cdc70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55f08f3cd8f8 'obj' 'void *'
| |-IndirectFieldDecl 0x55f08f3ce0a0 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x55f08f3cdc70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55f08f3cd9f0 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x55f08f3ce0f0 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x55f08f3cdc70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55f08f3cda60 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x55f08f3ce140 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x55f08f3cdc70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x55f08f3cdb60 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x55f08f3ce190 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x55f08f3cdc70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x55f08f3cdbd0 'queue' 'struct k_queue *'
|-FunctionDecl 0x55f08f3ce4c0 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x55f08f3ce220 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x55f08f3ce290 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55f08f3ce308 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x55f08f3ce380 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x55f08f467a10 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x55f08f467330 <line:4761:3>
|   | `-TextComment 0x55f08f467300 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f467350 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x55f08f4673b0 <col:10, col:53>
|   |   `-TextComment 0x55f08f467380 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x55f08f467420 <line:4763:3, line:4764:53>
|   | |-TextComment 0x55f08f4673d0 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x55f08f4673f0 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x55f08f467470 <line:4766:3>
|   | `-TextComment 0x55f08f467440 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f467490 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x55f08f467540 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x55f08f4674f0 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x55f08f467510 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x55f08f467560 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x55f08f467690 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x55f08f4675c0 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x55f08f4675e0 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x55f08f467600 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x55f08f467620 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x55f08f467640 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x55f08f4676b0 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x55f08f467760 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x55f08f467710 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x55f08f467730 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x55f08f467780 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x55f08f467810 <col:14, col:43>
|   |   `-TextComment 0x55f08f4677e0 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x55f08f467860 <line:4774:3>
|   | `-TextComment 0x55f08f467830 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f467880 <col:4, line:4775:3> Name="return"
|   | `-ParagraphComment 0x55f08f467900 <line:4774:11, line:4775:3>
|   |   |-TextComment 0x55f08f4678b0 <line:4774:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f4678d0 <line:4775:3> Text=" "
|   |-VerbatimLineComment 0x55f08f467920 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55f08f467990 <line:4776:1>
|     `-TextComment 0x55f08f467960 <col:1> Text=" "
|-FunctionDecl 0x55f08f3ce7f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3ce5d0 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55f08f3ce648 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x55f08f3ce6b8 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x55f08f468630 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x55f08f467ab0 <line:4782:3>
|   | `-TextComment 0x55f08f467a80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f467ad0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x55f08f467b30 <col:10, col:63>
|   |   `-TextComment 0x55f08f467b00 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x55f08f467bd0 <line:4784:3, line:4786:61>
|   | |-TextComment 0x55f08f467b50 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x55f08f467b70 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x55f08f467b90 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x55f08f467d60 <line:4788:3, line:4796:68>
|   | |-TextComment 0x55f08f467bf0 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x55f08f467c10 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x55f08f467c30 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x55f08f467c50 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x55f08f467c70 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x55f08f467c90 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x55f08f467cb0 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x55f08f467cd0 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x55f08f467cf0 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x55f08f467e00 <line:4798:3, line:4800:44>
|   | |-TextComment 0x55f08f467d80 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x55f08f467da0 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x55f08f467dc0 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x55f08f467e70 <line:4802:3, line:4803:41>
|   | |-TextComment 0x55f08f467e20 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x55f08f467e40 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x55f08f467ee0 <line:4805:3, line:4806:30>
|   | |-TextComment 0x55f08f467e90 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x55f08f467eb0 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x55f08f467f30 <line:4808:3>
|   | `-TextComment 0x55f08f467f00 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f467f50 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x55f08f468000 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x55f08f467fb0 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x55f08f467fd0 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x55f08f468020 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x55f08f4680d0 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x55f08f468080 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x55f08f4680a0 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x55f08f4680f0 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x55f08f4681d0 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x55f08f468150 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x55f08f468170 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x55f08f468190 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x55f08f468510 <line:4814:3, line:4823:3>
|   | |-TextComment 0x55f08f4681f0 <line:4814:3> Text=" "
|   | |-InlineCommandComment 0x55f08f468210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f468230 <col:11, col:42> Text=" 0 One or more events are ready."
|   | |-TextComment 0x55f08f468250 <line:4815:3> Text=" "
|   | |-InlineCommandComment 0x55f08f468270 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f468290 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x55f08f4682b0 <line:4816:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4682d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4682f0 <col:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   | |-TextComment 0x55f08f468310 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   | |-TextComment 0x55f08f468330 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   | |-TextComment 0x55f08f468350 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   | |-TextComment 0x55f08f468370 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   | |-TextComment 0x55f08f468390 <line:4821:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4683b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4683d0 <col:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   | |-TextComment 0x55f08f4683f0 <line:4822:3> Text=" "
|   | |-InlineCommandComment 0x55f08f468410 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f468430 <col:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|   | `-TextComment 0x55f08f468450 <line:4823:3> Text=" "
|   |-VerbatimLineComment 0x55f08f468530 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55f08f4685a0 <line:4824:1>
|     `-TextComment 0x55f08f468570 <col:1> Text=" "
|-FunctionDecl 0x55f08f3cea00 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55f08f3ce900 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x55f08f468a90 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x55f08f4686d0 <line:4830:3>
|   | `-TextComment 0x55f08f4686a0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4686f0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x55f08f468750 <col:10, col:42>
|   |   `-TextComment 0x55f08f468720 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x55f08f4687a0 <line:4832:3, col:71>
|   | `-TextComment 0x55f08f468770 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x55f08f4687f0 <line:4834:3>
|   | `-TextComment 0x55f08f4687c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f468810 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x55f08f4688a0 <col:17, col:31>
|   |   `-TextComment 0x55f08f468870 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x55f08f4688f0 <line:4836:3>
|   | `-TextComment 0x55f08f4688c0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f468910 <col:4, line:4837:3> Name="return"
|   | `-ParagraphComment 0x55f08f468990 <line:4836:11, line:4837:3>
|   |   |-TextComment 0x55f08f468940 <line:4836:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f468960 <line:4837:3> Text=" "
|   |-VerbatimLineComment 0x55f08f4689b0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55f08f468a20 <line:4838:1>
|     `-TextComment 0x55f08f4689f0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3ceb58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x55f08f3cead0 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55f08f3cecb0 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55f08f3cec28 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55f08f3cee48 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x55f08f3cedf0 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x55f08f3ced98 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x55f08f3cd000
|     | `-ImplicitCastExpr 0x55f08f3ced80 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f08f3ced58 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x55f08f3cec28 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x55f08f3cedd0 <col:21> 'unsigned int' 0
|-FunctionDecl 0x55f08f3cfbf8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x55f08f3cee88 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55f08f3cef00 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x55f08f3cef78 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x55f08f468fe0 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x55f08f468b30 <line:4856:3>
|   | `-TextComment 0x55f08f468b00 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f468b50 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x55f08f468bb0 <col:10, col:68>
|   |   `-TextComment 0x55f08f468b80 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x55f08f468c00 <line:4858:3>
|   | `-TextComment 0x55f08f468bd0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f468c20 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x55f08f468cd0 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x55f08f468c80 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x55f08f468ca0 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x55f08f468cf0 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x55f08f468dd0 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x55f08f468d50 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x55f08f468d70 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x55f08f468d90 <line:4861:3> Text=" "
|   |-ParamCommandComment 0x55f08f468df0 <col:4, line:4864:3> [in] implicitly Param="result" ParamIndex=2
|   | `-ParagraphComment 0x55f08f468ef0 <line:4861:17, line:4864:3>
|   |   |-TextComment 0x55f08f468e50 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|   |   |-TextComment 0x55f08f468e70 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|   |   |-TextComment 0x55f08f468e90 <line:4863:3, col:27> Text="		   value if it was not."
|   |   `-TextComment 0x55f08f468eb0 <line:4864:3> Text=" "
|   |-VerbatimLineComment 0x55f08f468f10 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55f08f468f80 <line:4865:1>
|     `-TextComment 0x55f08f468f50 <col:1> Text=" "
|-FunctionDecl 0x55f08f3cfe98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x55f08f3cfd00 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55f08f3cfd78 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x55f08f469860 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x55f08f469080 <line:4870:3>
|   | `-TextComment 0x55f08f469050 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f4690a0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x55f08f469100 <col:10, col:38>
|   |   `-TextComment 0x55f08f4690d0 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x55f08f469220 <line:4872:3, line:4874:57>
|   | |-TextComment 0x55f08f469120 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x55f08f469140 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x55f08f469160 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x55f08f4691b0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x55f08f4691d0 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x55f08f469320 <line:4876:3, line:4880:27>
|   | |-TextComment 0x55f08f469240 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x55f08f469260 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x55f08f469280 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x55f08f4692a0 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x55f08f4692d0 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x55f08f469370 <line:4882:3>
|   | `-TextComment 0x55f08f469340 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f469390 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x55f08f469440 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x55f08f4693c0 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x55f08f4693e0 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x55f08f469400 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x55f08f469490 <line:4886:3>
|   | `-TextComment 0x55f08f469460 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f4694b0 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x55f08f469560 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x55f08f469510 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x55f08f469530 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x55f08f469580 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x55f08f469610 <col:17, col:70>
|   |   `-TextComment 0x55f08f4695e0 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x55f08f469750 <line:4889:3, line:4891:3>
|   | |-TextComment 0x55f08f469630 <line:4889:3> Text=" "
|   | |-InlineCommandComment 0x55f08f469650 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f469670 <col:11, col:51> Text=" 0 The signal was delivered successfully."
|   | |-TextComment 0x55f08f469690 <line:4890:3> Text=" "
|   | |-InlineCommandComment 0x55f08f4696b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x55f08f4696d0 <col:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|   | `-TextComment 0x55f08f4696f0 <line:4891:3> Text=" "
|   |-VerbatimLineComment 0x55f08f469770 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x55f08f4697e0 <line:4892:1>
|     `-TextComment 0x55f08f4697b0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3d0110 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x55f08f3cff88 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x55f08f3cfff8 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x55f08f469950 <line:4897:3, col:12>
|   `-ParagraphComment 0x55f08f469920 <col:3, col:12>
|     |-TextComment 0x55f08f4698d0 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f4698f0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f3d02a8 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x55f08f3d03d8 <line:4922:1, line:4924:1>
| | `-CallExpr 0x55f08f3d0388 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x55f08f3d0370 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x55f08f3d0348 <col:2> 'void (void)' Function 0x55f08f348130 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x55f08f469f50 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x55f08f4699f0 <line:4904:3>
|   | `-TextComment 0x55f08f4699c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f469a10 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x55f08f469a80 <line:4905:3>
|   | `-TextComment 0x55f08f469a50 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f469aa0 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x55f08f469b60 <line:4906:3, col:5>
|   | |-TextComment 0x55f08f469ae0 <col:3> Text=" "
|   | |-TextComment 0x55f08f469b00 <col:4> Text="@"
|   | `-TextComment 0x55f08f469b20 <col:5> Text="{"
|   |-ParagraphComment 0x55f08f469bb0 <line:4909:3>
|   | `-TextComment 0x55f08f469b80 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f469bd0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x55f08f469c30 <col:10, col:28>
|   |   `-TextComment 0x55f08f469c00 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x55f08f469c80 <line:4911:3, col:63>
|   | `-TextComment 0x55f08f469c50 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x55f08f469d40 <line:4913:3, line:4916:59>
|   | |-TextComment 0x55f08f469ca0 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x55f08f469cc0 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x55f08f469ce0 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x55f08f469d00 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x55f08f469d90 <line:4918:3>
|   | `-TextComment 0x55f08f469d60 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f469db0 <col:4, line:4919:3> Name="return"
|   | `-ParagraphComment 0x55f08f469e30 <line:4918:11, line:4919:3>
|   |   |-TextComment 0x55f08f469de0 <line:4918:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f469e00 <line:4919:3> Text=" "
|   |-VerbatimLineComment 0x55f08f469e50 <col:4, col:23> Text=" K-CPU-IDLE-001"
|   `-ParagraphComment 0x55f08f469ec0 <line:4920:1>
|     `-TextComment 0x55f08f469e90 <col:1> Text=" "
|-FunctionDecl 0x55f08f3d0490 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x55f08f3d0408 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x55f08f3d0648 <line:4938:1, line:4940:1>
| | `-CallExpr 0x55f08f3d05a0 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x55f08f3d0588 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x55f08f3d0538 <col:2> 'void (unsigned int)' Function 0x55f08f3482d0 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x55f08f3d05d0 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x55f08f3d0560 <col:23> 'unsigned int' lvalue ParmVar 0x55f08f3d0408 'key' 'unsigned int'
| `-FullComment 0x55f08f46a3d0 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x55f08f469ff0 <line:4927:3>
|   | `-TextComment 0x55f08f469fc0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46a010 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f46a070 <col:10, col:49>
|   |   `-TextComment 0x55f08f46a040 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x55f08f46a0e0 <line:4929:3, line:4930:54>
|   | |-TextComment 0x55f08f46a090 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x55f08f46a0b0 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x55f08f46a130 <line:4932:3>
|   | `-TextComment 0x55f08f46a100 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f46a150 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x55f08f46a1e0 <col:14, col:61>
|   |   `-TextComment 0x55f08f46a1b0 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x55f08f46a230 <line:4934:3>
|   | `-TextComment 0x55f08f46a200 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46a250 <col:4, line:4935:3> Name="return"
|   | `-ParagraphComment 0x55f08f46a2d0 <line:4934:11, line:4935:3>
|   |   |-TextComment 0x55f08f46a280 <line:4934:11, col:14> Text=" N/A"
|   |   `-TextComment 0x55f08f46a2a0 <line:4935:3> Text=" "
|   |-VerbatimLineComment 0x55f08f46a2f0 <col:4, col:23> Text=" K-CPU-IDLE-002"
|   `-ParagraphComment 0x55f08f46a360 <line:4936:1>
|     `-TextComment 0x55f08f46a330 <col:1> Text=" "
|-FunctionDecl 0x55f08f3d0770 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x55f08f3d0670 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x55f08f46a4c0 <line:4947:3, col:12>
|   `-ParagraphComment 0x55f08f46a490 <col:3, col:12>
|     |-TextComment 0x55f08f46a440 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f46a460 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f3d2f80 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x55f08f3d0930 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x55f08f3d09a8 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x55f08f3d0a18 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55f08f3d0a90 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x55f08f46a5b0 <line:5006:3, col:12>
|   `-ParagraphComment 0x55f08f46a580 <col:3, col:12>
|     |-TextComment 0x55f08f46a530 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f46a550 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f3d3128 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x55f08f46a6a0 <line:5025:3, col:12>
|   `-ParagraphComment 0x55f08f46a670 <col:3, col:12>
|     |-TextComment 0x55f08f46a620 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f46a640 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f3d32a8 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x55f08f3d3220 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x55f08f46a790 <line:5029:3, col:12>
|   `-ParagraphComment 0x55f08f46a760 <col:3, col:12>
|     |-TextComment 0x55f08f46a710 <col:3> Text=" "
|     `-InlineCommandComment 0x55f08f46a730 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x55f08f3d35e8 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x55f08f3d34d8 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x55f08f3d3788 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x55f08f3d3710 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x55f08f3d36e8 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x55f08f3d36d0 <col:17> 'k_thread_stack_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x55f08f3d3690 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x55f08f3d34d8 'sym' 'k_thread_stack_t *'
| `-FullComment 0x55f08f46abd0 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x55f08f46a830 <line:5168:3>
|   | `-TextComment 0x55f08f46a800 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46a850 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x55f08f46a8b0 <col:10, col:52>
|   |   `-TextComment 0x55f08f46a880 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x55f08f46a920 <line:5170:3, line:5171:76>
|   | |-TextComment 0x55f08f46a8d0 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x55f08f46a8f0 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x55f08f46a970 <line:5173:3>
|   | `-TextComment 0x55f08f46a940 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f46a990 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x55f08f46aa40 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x55f08f46a9f0 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x55f08f46aa10 <line:5174:3> Text=" "
|   |-BlockCommandComment 0x55f08f46aa60 <col:4, line:5175:3> Name="return"
|   | `-ParagraphComment 0x55f08f46aae0 <line:5174:11, line:5175:3>
|   |   |-TextComment 0x55f08f46aa90 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|   |   `-TextComment 0x55f08f46aab0 <line:5175:3> Text=" "
|   |-VerbatimLineComment 0x55f08f46ab00 <col:4, col:21> Text=" K-TSTACK-001"
|   `-ParagraphComment 0x55f08f46ab70 <line:5176:1>
|     `-TextComment 0x55f08f46ab40 <col:1> Text=" "
|-RecordDecl 0x55f08f3d37a0 prev 0x55f08f383838 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x55f08f3d3868 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x55f08f46aca0 <line:5208:5, col:39>
| |   `-ParagraphComment 0x55f08f46ac70 <col:5, col:39>
| |     `-TextComment 0x55f08f46ac40 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x55f08f3d38e8 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x55f08f46ad70 <line:5210:5, col:30>
|     `-ParagraphComment 0x55f08f46ad40 <col:5, col:30>
|       `-TextComment 0x55f08f46ad10 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x55f08f3d3958 prev 0x55f08f3837b0 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x55f08f46af20 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x55f08f46ae10 <line:5219:3>
| | | `-TextComment 0x55f08f46ade0 <col:3> Text=" "
| | |-BlockCommandComment 0x55f08f46ae30 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x55f08f46ae90 <col:10, col:23>
| | |   `-TextComment 0x55f08f46ae60 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x55f08f46aee0 <line:5221:1>
| |   `-TextComment 0x55f08f46aeb0 <col:1> Text=" "
| |-FieldDecl 0x55f08f3d3a18 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x55f08f46aff0 <line:5227:5, col:14>
| |   `-ParagraphComment 0x55f08f46afc0 <col:5, col:14>
| |     `-TextComment 0x55f08f46af90 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x55f08f3d3a98 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x55f08f46b0c0 <line:5229:5, col:40>
|     `-ParagraphComment 0x55f08f46b090 <col:5, col:40>
|       `-TextComment 0x55f08f46b060 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x55f08f3d4608 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x55f08f3d3bc0 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55f08f3d3c30 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x55f08f3d3e40 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x55f08f46b6b0 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x55f08f46b160 <line:5235:3>
|   | `-TextComment 0x55f08f46b130 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46b180 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x55f08f46b1e0 <col:10, col:37>
|   |   `-TextComment 0x55f08f46b1b0 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x55f08f46b230 <line:5237:3, col:68>
|   | `-TextComment 0x55f08f46b200 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x55f08f46b2a0 <line:5239:3, line:5240:25>
|   | |-TextComment 0x55f08f46b250 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x55f08f46b270 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x55f08f46b310 <line:5242:3>
|   | `-TextComment 0x55f08f46b2e0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f46b330 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55f08f46b3e0 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x55f08f46b390 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x55f08f46b3b0 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x55f08f46b400 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x55f08f46b4b0 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x55f08f46b460 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x55f08f46b480 <line:5244:3> Text=" "
|   |-ParamCommandComment 0x55f08f46b4d0 <col:4, line:5246:3> [in] implicitly Param="parts" ParamIndex=2
|   | `-ParagraphComment 0x55f08f46b5b0 <line:5244:16, line:5246:3>
|   |   |-TextComment 0x55f08f46b530 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|   |   |-TextComment 0x55f08f46b550 <line:5245:3, col:37> Text="              if num_parts is zero."
|   |   `-TextComment 0x55f08f46b570 <line:5246:3> Text=" "
|   |-VerbatimLineComment 0x55f08f46b5d0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55f08f46b640 <line:5247:1>
|     `-TextComment 0x55f08f46b610 <col:1> Text=" "
|-FunctionDecl 0x55f08f3d4810 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x55f08f3d4710 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x55f08f46ba30 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x55f08f46b750 <line:5251:3>
|   | `-TextComment 0x55f08f46b720 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46b770 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x55f08f46b7d0 <col:10, col:34>
|   |   `-TextComment 0x55f08f46b7a0 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x55f08f46b820 <line:5253:3, col:27>
|   | `-TextComment 0x55f08f46b7f0 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x55f08f46b870 <line:5255:3>
|   | `-TextComment 0x55f08f46b840 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f46b890 <col:4, line:5256:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55f08f46b940 <line:5255:17, line:5256:3>
|   |   |-TextComment 0x55f08f46b8f0 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|   |   `-TextComment 0x55f08f46b910 <line:5256:3> Text=" "
|   |-VerbatimLineComment 0x55f08f46b960 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55f08f46b9d0 <line:5257:1>
|     `-TextComment 0x55f08f46b9a0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3d4ab0 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x55f08f3d4910 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55f08f3d4998 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x55f08f46c0d0 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x55f08f46bad0 <line:5261:3>
|   | `-TextComment 0x55f08f46baa0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46baf0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x55f08f46bb50 <col:10, col:54>
|   |   `-TextComment 0x55f08f46bb20 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x55f08f46bbc0 <line:5263:3, line:5264:29>
|   | |-TextComment 0x55f08f46bb70 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x55f08f46bb90 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x55f08f46bd70 <line:5266:3, line:5275:28>
|   | |-TextComment 0x55f08f46bbe0 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x55f08f46bc00 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x55f08f46bc20 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x55f08f46bc40 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x55f08f46bc60 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x55f08f46bc80 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x55f08f46bca0 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x55f08f46bcc0 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x55f08f46bce0 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x55f08f46bd00 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x55f08f46bde0 <line:5277:3, line:5278:12>
|   | |-TextComment 0x55f08f46bd90 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x55f08f46bdb0 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x55f08f46be30 <line:5280:3>
|   | `-TextComment 0x55f08f46be00 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f46be50 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55f08f46bf00 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x55f08f46beb0 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x55f08f46bed0 <line:5281:3> Text=" "
|   |-ParamCommandComment 0x55f08f46bf20 <col:4, line:5282:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x55f08f46bfd0 <line:5281:15, line:5282:3>
|   |   |-TextComment 0x55f08f46bf80 <line:5281:15, col:47> Text=" The memory partition to be added"
|   |   `-TextComment 0x55f08f46bfa0 <line:5282:3> Text=" "
|   |-VerbatimLineComment 0x55f08f46bff0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55f08f46c060 <line:5283:1>
|     `-TextComment 0x55f08f46c030 <col:1> Text=" "
|-FunctionDecl 0x55f08f3d4cc8 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x55f08f3d4bb0 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55f08f3d4c38 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x55f08f46c520 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x55f08f46c170 <line:5288:3>
|   | `-TextComment 0x55f08f46c140 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46c190 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x55f08f46c1f0 <col:10, col:57>
|   |   `-TextComment 0x55f08f46c1c0 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x55f08f46c240 <line:5290:3, col:50>
|   | `-TextComment 0x55f08f46c210 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x55f08f46c290 <line:5292:3>
|   | `-TextComment 0x55f08f46c260 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f46c2b0 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55f08f46c360 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x55f08f46c310 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x55f08f46c330 <line:5293:3> Text=" "
|   |-ParamCommandComment 0x55f08f46c380 <col:4, line:5294:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x55f08f46c430 <line:5293:15, line:5294:3>
|   |   |-TextComment 0x55f08f46c3e0 <line:5293:15, col:49> Text=" The memory partition to be removed"
|   |   `-TextComment 0x55f08f46c400 <line:5294:3> Text=" "
|   |-VerbatimLineComment 0x55f08f46c450 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55f08f46c4c0 <line:5295:1>
|     `-TextComment 0x55f08f46c490 <col:1> Text=" "
|-FunctionDecl 0x55f08f3d4f50 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x55f08f3d4dd0 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x55f08f3d4e40 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f46c9b0 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x55f08f46c5c0 <line:5300:3>
|   | `-TextComment 0x55f08f46c590 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46c5e0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x55f08f46c640 <col:10, col:44>
|   |   `-TextComment 0x55f08f46c610 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x55f08f46c690 <line:5302:3, col:37>
|   | `-TextComment 0x55f08f46c660 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x55f08f46c6e0 <line:5304:3>
|   | `-TextComment 0x55f08f46c6b0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f46c700 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x55f08f46c7b0 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x55f08f46c760 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x55f08f46c780 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x55f08f46c7d0 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x55f08f46c860 <col:17, col:71>
|   |   `-TextComment 0x55f08f46c830 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   |-ParagraphComment 0x55f08f46c8b0 <line:5307:3>
|   | `-TextComment 0x55f08f46c880 <col:3> Text=" "
|   |-VerbatimLineComment 0x55f08f46c8d0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55f08f46c940 <line:5308:1>
|     `-TextComment 0x55f08f46c910 <col:1> Text=" "
|-FunctionDecl 0x55f08f3d50c0 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x55f08f3d5038 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x55f08f46cd30 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x55f08f46ca50 <line:5313:3>
|   | `-TextComment 0x55f08f46ca20 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46ca70 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x55f08f46cad0 <col:10, col:49>
|   |   `-TextComment 0x55f08f46caa0 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x55f08f46cb20 <line:5315:3, col:42>
|   | `-TextComment 0x55f08f46caf0 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x55f08f46cb70 <line:5317:3>
|   | `-TextComment 0x55f08f46cb40 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f46cb90 <col:4, line:5318:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f46cc40 <line:5317:17, line:5318:3>
|   |   |-TextComment 0x55f08f46cbf0 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|   |   `-TextComment 0x55f08f46cc10 <line:5318:3> Text=" "
|   |-VerbatimLineComment 0x55f08f46cc60 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x55f08f46ccd0 <line:5319:1>
|     `-TextComment 0x55f08f46cca0 <col:1> Text=" "
|-FunctionDecl 0x55f08f3d52b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x55f08f3d51f0 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x55f08f46d360 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x55f08f46cdd0 <line:5337:3>
|   | `-TextComment 0x55f08f46cda0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46cdf0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x55f08f46ce50 <col:10, col:69>
|   |   `-TextComment 0x55f08f46ce20 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x55f08f46cec0 <line:5339:3, line:5340:56>
|   | |-TextComment 0x55f08f46ce70 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x55f08f46ce90 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x55f08f46cf10 <line:5342:3>
|   | `-TextComment 0x55f08f46cee0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46cf30 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x55f08f46cfb0 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x55f08f46cf60 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x55f08f46cf80 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x55f08f46d000 <line:5346:3>
|   | `-TextComment 0x55f08f46cfd0 <col:3> Text=" "
|   |-BlockCommandComment 0x55f08f46d020 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x55f08f46d0a0 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x55f08f46d050 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x55f08f46d070 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x55f08f46d0f0 <line:5350:3>
|   | `-TextComment 0x55f08f46d0c0 <col:3> Text=" "
|   |-ParamCommandComment 0x55f08f46d110 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x55f08f46d1a0 <col:17, col:30>
|   |   `-TextComment 0x55f08f46d170 <col:17, col:30> Text=" ID of thread."
|   `-ParagraphComment 0x55f08f46d2f0 <line:5352:3, line:5354:74>
|     |-TextComment 0x55f08f46d1c0 <line:5352:3> Text=" "
|     |-InlineCommandComment 0x55f08f46d1e0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f46d200 <col:11, col:30> Text=" 0       On success."
|     |-TextComment 0x55f08f46d220 <line:5353:3> Text=" "
|     |-InlineCommandComment 0x55f08f46d240 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x55f08f46d260 <col:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|     `-TextComment 0x55f08f46d280 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x55f08f3d8618 prev 0x55f08f385c60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x55f08f3d8500 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x55f08f3d8588 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x55f08f3d87f8 prev 0x55f08f387d90 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x55f08f3d86e0 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x55f08f3d8768 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x55f08f3d8af8 <line:26:1, line:35:1>
|   |-DoStmt 0x55f08f3d8988 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3d8950 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3d8900 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3d8968 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3d8a90 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x55f08f3d8a78 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3d89a8 <col:2> 'void (void *, struct k_thread *)' Function 0x55f08f3d8618 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x55f08f3d8ac8 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3d89d0 <col:31> 'void *' lvalue ParmVar 0x55f08f3d86e0 'object' 'void *'
|     `-ImplicitCastExpr 0x55f08f3d8ae0 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3d89f8 <col:39> 'struct k_thread *' lvalue ParmVar 0x55f08f3d8768 'thread' 'struct k_thread *'
|-FunctionDecl 0x55f08f3d8bb8 prev 0x55f08f387888 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x55f08f3d8b30 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x55f08f3d8d00 prev 0x55f08f388118 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x55f08f3d8c78 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x55f08f3d8f58 <line:40:1, line:49:1>
|   |-DoStmt 0x55f08f3d8e88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3d8e50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3d8e00 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3d8e68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3d8f10 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x55f08f3d8ef8 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3d8ea8 <col:2> 'void (void *)' Function 0x55f08f3d8bb8 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x55f08f3d8f40 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3d8ed0 <col:26> 'void *' lvalue ParmVar 0x55f08f3d8c78 'object' 'void *'
|-FunctionDecl 0x55f08f3d9028 prev 0x55f08f388620 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x55f08f3d8f98 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x55f08f3d9180 prev 0x55f08f3884c8 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x55f08f3d90f0 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x55f08f3da7a0 <line:54:1, line:62:1>
|   |-DoStmt 0x55f08f3d9308 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3d92d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3d9280 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3d92e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3da788 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x55f08f3da740 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x55f08f3da728 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3d9328 <col:9> 'void *(enum k_objects)' Function 0x55f08f3d9028 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x55f08f3da770 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3d9350 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x55f08f3d90f0 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x55f08f3dacc8 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x55f08f3da7e8 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55f08f3da858 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55f08f3da8c8 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3da938 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55f08f3da9b0 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x55f08f3daa28 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x55f08f3daaa0 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x55f08f3dab18 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x55f08f3dab88 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x55f08f3dabf8 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x55f08f3db2c0 prev 0x55f08f390010 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3dade0 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x55f08f3dae50 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x55f08f3daec0 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3daf30 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x55f08f3dafa8 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x55f08f3db020 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x55f08f3db098 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x55f08f3db110 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x55f08f3db180 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x55f08f3db1f0 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x55f08f3db870 <line:67:1, line:82:1>
|   |-DoStmt 0x55f08f3db490 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3db458 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3db408 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3db470 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3db858 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x55f08f3db6e0 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x55f08f3db6c8 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3db4b0 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x55f08f3dacc8 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3db768 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3db4d8 <col:32> 'struct k_thread *' lvalue ParmVar 0x55f08f3dade0 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x55f08f3db780 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3db500 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x55f08f3dae50 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x55f08f3db798 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3db528 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x55f08f3daec0 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55f08f3db7b0 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3db550 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x55f08f3daf30 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x55f08f3db7c8 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3db578 <col:70> 'void *' lvalue ParmVar 0x55f08f3dafa8 'p1' 'void *'
|       |-ImplicitCastExpr 0x55f08f3db7e0 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3db5a0 <col:74> 'void *' lvalue ParmVar 0x55f08f3db020 'p2' 'void *'
|       |-ImplicitCastExpr 0x55f08f3db7f8 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3db5c8 <col:78> 'void *' lvalue ParmVar 0x55f08f3db098 'p3' 'void *'
|       |-ImplicitCastExpr 0x55f08f3db810 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3db5f0 <col:82> 'int' lvalue ParmVar 0x55f08f3db110 'prio' 'int'
|       |-ImplicitCastExpr 0x55f08f3db828 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3db618 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f3db180 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55f08f3db840 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3db640 <col:97> 's32_t':'int' lvalue ParmVar 0x55f08f3db1f0 'delay' 's32_t':'int'
|-FunctionDecl 0x55f08f3db928 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x55f08f3db8a0 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x55f08f3dba68 prev 0x55f08f390a40 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55f08f3db9e0 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x55f08f3dbd30 <line:87:1, line:95:1>
|   |-DoStmt 0x55f08f3dbbf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dbbb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dbb68 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dbbd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3dbd18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x55f08f3dbcd0 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x55f08f3dbcb8 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3dbc10 <col:9> 's32_t (s32_t)' Function 0x55f08f3db928 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x55f08f3dbd00 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3dbc38 <col:24> 's32_t':'int' lvalue ParmVar 0x55f08f3db9e0 'ms' 's32_t':'int'
|-FunctionDecl 0x55f08f3dbde8 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x55f08f3dbd60 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x55f08f3dbf28 prev 0x55f08f390bb0 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x55f08f3dbea0 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x55f08f3dc198 <line:100:1, line:108:1>
|   |-DoStmt 0x55f08f3dc0b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dc078 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dc028 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dc090 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3dc180 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x55f08f3dc138 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x55f08f3dc120 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3dc0d0 <col:9> 's32_t (s32_t)' Function 0x55f08f3dbde8 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x55f08f3dc168 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3dc0f8 <col:25> 's32_t':'int' lvalue ParmVar 0x55f08f3dbea0 'us' 's32_t':'int'
|-FunctionDecl 0x55f08f3dc250 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x55f08f3dc1c8 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x55f08f3dc390 prev 0x55f08f390d60 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x55f08f3dc308 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x55f08f3dc618 <line:113:1, line:122:1>
|   |-DoStmt 0x55f08f3dc518 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dc4e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dc490 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dc4f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3dc5d0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x55f08f3dc5b8 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3dc538 <col:2> 'void (u32_t)' Function 0x55f08f3dc250 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x55f08f3dc600 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3dc560 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f3dc308 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x55f08f3dc658 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x55f08f3dc740 prev 0x55f08f390ec8 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x55f08f3dc978 <line:127:1, line:136:1>
|   |-DoStmt 0x55f08f3dc8c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dc888 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dc838 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dc8a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3dc950 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x55f08f3dc938 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x55f08f3dc8e0 <col:2> 'void ()' Function 0x55f08f3dc658 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x55f08f3dca30 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55f08f3dc9a8 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3dcb70 prev 0x55f08f3910c0 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f3dcae8 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55f08f3dce28 <line:141:1, line:150:1>
|   |-DoStmt 0x55f08f3dccf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dccc0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dcc70 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dccd8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3dcde0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x55f08f3dcdc8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3dcd18 <col:2> 'void (k_tid_t)' Function 0x55f08f3dca30 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55f08f3dce10 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3dcd40 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3dcae8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3dcec8 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x55f08f3dcf88 prev 0x55f08f391290 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x55f08f3dd200 <line:155:1, line:163:1>
|   |-DoStmt 0x55f08f3dd108 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dd0d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dd080 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dd0e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3dd1e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x55f08f3dd1c0 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x55f08f3dd1a8 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55f08f3dd128 <col:9> 'k_tid_t ()' Function 0x55f08f3dcec8 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x55f08f3dd2b8 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55f08f3dd230 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3dd3f8 prev 0x55f08f3913f0 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f3dd370 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55f08f3dd650 <line:168:1, line:177:1>
|   |-DoStmt 0x55f08f3dd580 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dd548 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dd4f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dd560 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3dd608 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x55f08f3dd5f0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3dd5a0 <col:2> 'void (k_tid_t)' Function 0x55f08f3dd2b8 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55f08f3dd638 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3dd5c8 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3dd370 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3dd730 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55f08f3dd680 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3dd870 prev 0x55f08f391560 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f3dd7e8 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55f08f3ddac8 <line:182:1, line:191:1>
|   |-DoStmt 0x55f08f3dd9f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dd9c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dd970 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dd9d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3dda80 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x55f08f3dda68 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3dda18 <col:2> 'void (k_tid_t)' Function 0x55f08f3dd730 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55f08f3ddab0 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3dda40 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3dd7e8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3ddb88 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x55f08f3ddaf8 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3ddcd0 prev 0x55f08f391d88 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f3ddc40 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55f08f3ddfa0 <line:196:1, line:204:1>
|   |-DoStmt 0x55f08f3dde58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dde20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dddd0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dde38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3ddf88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x55f08f3ddf40 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55f08f3ddf28 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3dde78 <col:9> 'int (k_tid_t)' Function 0x55f08f3ddb88 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x55f08f3ddf70 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3ddea0 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3ddc40 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3de0d8 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x55f08f3ddfd0 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55f08f3de048 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x55f08f3de2a0 prev 0x55f08f3926e0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55f08f3de198 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55f08f3de210 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x55f08f3de5a8 <line:209:1, line:218:1>
|   |-DoStmt 0x55f08f3de430 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3de3f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3de3a8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3de410 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3de540 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x55f08f3de528 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3de450 <col:2> 'void (k_tid_t, int)' Function 0x55f08f3de0d8 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x55f08f3de578 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3de478 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3de198 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x55f08f3de590 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3de4a0 <col:39> 'int' lvalue ParmVar 0x55f08f3de210 'prio' 'int'
|-FunctionDecl 0x55f08f3de740 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x55f08f3de5d8 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55f08f3de650 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x55f08f3de908 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x55f08f3de800 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55f08f3de878 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x55f08f3debb0 <line:223:1, line:232:1>
|   |-DoStmt 0x55f08f3dea98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dea60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dea10 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dea78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3deb48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x55f08f3deb30 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3deab8 <col:2> 'void (k_tid_t, int)' Function 0x55f08f3de740 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x55f08f3deb80 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3deae0 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3de800 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x55f08f3deb98 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3deb08 <col:39> 'int' lvalue ParmVar 0x55f08f3de878 'deadline' 'int'
|-FunctionDecl 0x55f08f3dec68 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55f08f3debe0 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3deda8 prev 0x55f08f392850 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f3ded20 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55f08f3df000 <line:237:1, line:246:1>
|   |-DoStmt 0x55f08f3def30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3deef8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3deea8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3def10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3defb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x55f08f3defa0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3def50 <col:2> 'void (k_tid_t)' Function 0x55f08f3dec68 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55f08f3defe8 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3def78 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3ded20 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3df0b8 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x55f08f3df030 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3df1f8 prev 0x55f08f3929c0 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x55f08f3df170 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x55f08f3df450 <line:251:1, line:260:1>
|   |-DoStmt 0x55f08f3df380 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3df348 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3df2f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3df360 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3df408 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x55f08f3df3f0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3df3a0 <col:2> 'void (k_tid_t)' Function 0x55f08f3df0b8 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x55f08f3df438 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3df3c8 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3df170 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x55f08f3df4c0 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x55f08f3df588 prev 0x55f08f392f60 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x55f08f3df800 <line:265:1, line:273:1>
|   |-DoStmt 0x55f08f3df708 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3df6d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3df680 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3df6e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3df7e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x55f08f3df7c0 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x55f08f3df7a8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55f08f3df750 <col:9> 'int ()' Function 0x55f08f3df4c0 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x55f08f3df8c0 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x55f08f3df838 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x55f08f3dfa08 prev 0x55f08f3936f0 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x55f08f3df980 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x55f08f3dfc60 <line:278:1, line:287:1>
|   |-DoStmt 0x55f08f3dfb90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dfb58 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dfb08 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dfb70 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3dfc18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x55f08f3dfc00 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3dfbb0 <col:2> 'void (void *)' Function 0x55f08f3df8c0 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x55f08f3dfc48 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3dfbd8 <col:34> 'void *' lvalue ParmVar 0x55f08f3df980 'value' 'void *'
|-FunctionDecl 0x55f08f3dfcd0 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x55f08f3dfd98 prev 0x55f08f393898 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x55f08f3dffe0 <line:292:1, line:300:1>
|   |-DoStmt 0x55f08f3dff18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3dfee0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3dfe90 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3dfef8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3dffc8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x55f08f3dffa0 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x55f08f3dff88 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55f08f3dff38 <col:9> 'void *()' Function 0x55f08f3dfcd0 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x55f08f3e0120 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x55f08f3e0010 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x55f08f3e0088 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x55f08f3e02f0 prev 0x55f08f393b08 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x55f08f3e01e0 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55f08f3e0258 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x55f08f3e0610 <line:305:1, line:313:1>
|   |-DoStmt 0x55f08f3e0480 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e0448 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e03f8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e0460 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e05f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x55f08f3e0590 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x55f08f3e0578 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e04a0 <col:9> 'int (k_tid_t, const char *)' Function 0x55f08f3e0120 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x55f08f3e05c8 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e04c8 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3e01e0 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x55f08f3e05e0 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e04f0 <col:45> 'const char *' lvalue ParmVar 0x55f08f3e0258 'value' 'const char *'
|-FunctionDecl 0x55f08f3e0800 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x55f08f3e0640 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55f08f3e06b8 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x55f08f3e0760 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x55f08f3e0a50 prev 0x55f08f394008 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x55f08f3e08c8 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x55f08f3e0940 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x55f08f3e09b0 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x55f08f3e0dc0 <line:318:1, line:326:1>
|   |-DoStmt 0x55f08f3e0be8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e0bb0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e0b60 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e0bc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e0da8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x55f08f3e0d20 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x55f08f3e0d08 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e0c08 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x55f08f3e0800 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x55f08f3e0d60 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e0c30 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x55f08f3e08c8 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x55f08f3e0d78 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e0c58 <col:46> 'char *' lvalue ParmVar 0x55f08f3e0940 'buf' 'char *'
|       `-ImplicitCastExpr 0x55f08f3e0d90 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e0c80 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x55f08f3e09b0 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x55f08f3e0f80 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x55f08f3e0e08 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x55f08f3e0e78 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x55f08f3e0ee8 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x55f08f3e11d8 prev 0x55f08f397460 <line:330:1, line:340:1> line:330:20 used k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3e1060 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x55f08f3e10d0 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x55f08f3e1140 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x55f08f3e1528 <line:331:1, line:340:1>
|   |-DoStmt 0x55f08f3e1370 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e1338 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e12e8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e1350 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3e14a0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x55f08f3e1488 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3e1390 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x55f08f3e0f80 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x55f08f3e14e0 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3e13b8 <col:23> 'struct k_timer *' lvalue ParmVar 0x55f08f3e1060 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x55f08f3e14f8 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3e13e0 <col:30> 's32_t':'int' lvalue ParmVar 0x55f08f3e10d0 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x55f08f3e1510 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3e1408 <col:40> 's32_t':'int' lvalue ParmVar 0x55f08f3e1140 'period' 's32_t':'int'
|-FunctionDecl 0x55f08f3e15f8 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x55f08f3e1570 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x55f08f3e1f80 prev 0x55f08f3975f8 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f3e16c8 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x55f08f3e2208 <line:345:1, line:354:1>
|   |-DoStmt 0x55f08f3e2108 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e20d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e2080 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e20e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3e21c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x55f08f3e21a8 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3e2128 <col:2> 'void (struct k_timer *)' Function 0x55f08f3e15f8 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x55f08f3e21f0 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3e2150 <col:22> 'struct k_timer *' lvalue ParmVar 0x55f08f3e16c8 'timer' 'struct k_timer *'
|-FunctionDecl 0x55f08f3e22d8 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x55f08f3e2250 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x55f08f3e2430 prev 0x55f08f398080 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f3e23a8 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x55f08f3e2700 <line:359:1, line:367:1>
|   |-DoStmt 0x55f08f3e25b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e2580 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e2530 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e2598 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e26e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x55f08f3e26a0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55f08f3e2688 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e25d8 <col:9> 'u32_t (struct k_timer *)' Function 0x55f08f3e22d8 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x55f08f3e26d0 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e2600 <col:35> 'struct k_timer *' lvalue ParmVar 0x55f08f3e23a8 'timer' 'struct k_timer *'
|-FunctionDecl 0x55f08f3e27d0 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x55f08f3e2748 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x55f08f3e2928 prev 0x55f08f398208 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f3e28a0 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x55f08f3e2b98 <line:372:1, line:380:1>
|   |-DoStmt 0x55f08f3e2ab0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e2a78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e2a28 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e2a90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e2b80 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x55f08f3e2b38 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55f08f3e2b20 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e2ad0 <col:9> 'u32_t (struct k_timer *)' Function 0x55f08f3e27d0 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x55f08f3e2b68 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e2af8 <col:36> 'struct k_timer *' lvalue ParmVar 0x55f08f3e28a0 'timer' 'struct k_timer *'
|-FunctionDecl 0x55f08f3e2c68 prev 0x55f08f3986c0 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x55f08f3e2be0 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x55f08f3e2dc0 prev 0x55f08f398568 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f3e2d38 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x55f08f3e3058 <line:385:1, line:393:1>
|   |-DoStmt 0x55f08f3e2f48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e2f10 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e2ec0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e2f28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e3040 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x55f08f3e2ff8 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55f08f3e2fe0 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e2f90 <col:9> 'u32_t (struct k_timer *)' Function 0x55f08f3e2c68 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x55f08f3e3028 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e2fb8 <col:38> 'struct k_timer *' lvalue ParmVar 0x55f08f3e2d38 'timer' 'struct k_timer *'
|-FunctionDecl 0x55f08f3e31a8 prev 0x55f08f399448 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x55f08f3e30a0 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x55f08f3e3118 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x55f08f3e3388 prev 0x55f08f398e20 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x55f08f3e3280 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x55f08f3e32f8 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x55f08f3e3688 <line:398:1, line:407:1>
|   |-DoStmt 0x55f08f3e3518 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e34e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e3490 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e34f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3e3620 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x55f08f3e3608 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3e3538 <col:2> 'void (struct k_timer *, void *)' Function 0x55f08f3e31a8 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x55f08f3e3658 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3e3560 <col:31> 'struct k_timer *' lvalue ParmVar 0x55f08f3e3280 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x55f08f3e3670 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3e3588 <col:38> 'void *' lvalue ParmVar 0x55f08f3e32f8 'user_data' 'void *'
|-FunctionDecl 0x55f08f3e3760 prev 0x55f08f3998b8 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x55f08f3e36d0 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x55f08f3e38c0 prev 0x55f08f399758 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x55f08f3e3830 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x55f08f3e3b90 <line:412:1, line:420:1>
|   |-DoStmt 0x55f08f3e3a48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e3a10 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e39c0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e3a28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e3b78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x55f08f3e3b30 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x55f08f3e3b18 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e3a68 <col:9> 'void *(struct k_timer *)' Function 0x55f08f3e3760 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x55f08f3e3b60 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e3a90 <col:38> 'struct k_timer *' lvalue ParmVar 0x55f08f3e3830 'timer' 'struct k_timer *'
|-FunctionDecl 0x55f08f3e3c28 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x55f08f3e3ce8 prev 0x55f08f399b40 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x55f08f3e3f60 <line:425:1, line:435:1>
|   |-DoStmt 0x55f08f3e3e68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e3e30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e3de0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e3e48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e3f48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x55f08f3e3f20 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x55f08f3e3f08 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55f08f3e3e88 <col:9> 's64_t ()' Function 0x55f08f3e3c28 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x55f08f3e4050 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x55f08f3e3fc8 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x55f08f3e41a8 prev 0x55f08f39c020 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f3e4120 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x55f08f3e4458 <line:440:1, line:449:1>
|   |-DoStmt 0x55f08f3e4330 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e42f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e42a8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e4310 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3e4410 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x55f08f3e43f8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3e4350 <col:2> 'void (struct k_queue *)' Function 0x55f08f3e4050 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x55f08f3e4440 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3e4378 <col:22> 'struct k_queue *' lvalue ParmVar 0x55f08f3e4120 'queue' 'struct k_queue *'
|-FunctionDecl 0x55f08f3e4528 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x55f08f3e44a0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x55f08f3e4680 prev 0x55f08f39c1a8 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f3e45f8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x55f08f3e48d8 <line:454:1, line:463:1>
|   |-DoStmt 0x55f08f3e4808 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e47d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e4780 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e47e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3e4890 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x55f08f3e4878 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3e4828 <col:2> 'void (struct k_queue *)' Function 0x55f08f3e4528 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x55f08f3e48c0 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3e4850 <col:29> 'struct k_queue *' lvalue ParmVar 0x55f08f3e45f8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55f08f3e4a28 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55f08f3e4920 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x55f08f3e4998 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x55f08f3e4c08 prev 0x55f08f39c6c0 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55f08f3e4b00 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f3e4b78 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x55f08f3e4ec8 <line:468:1, line:476:1>
|   |-DoStmt 0x55f08f3e4d98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e4d60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e4d10 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e4d78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e4eb0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x55f08f3e4e48 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x55f08f3e4e30 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e4db8 <col:9> 's32_t (struct k_queue *, void *)' Function 0x55f08f3e4a28 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x55f08f3e4e80 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e4de0 <col:37> 'struct k_queue *' lvalue ParmVar 0x55f08f3e4b00 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55f08f3e4e98 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e4e08 <col:44> 'void *' lvalue ParmVar 0x55f08f3e4b78 'data' 'void *'
|-FunctionDecl 0x55f08f3e5040 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x55f08f3e4f10 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x55f08f3e4fb0 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x55f08f3e5220 prev 0x55f08f39cad8 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x55f08f3e5118 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f3e5190 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x55f08f3e54e0 <line:481:1, line:489:1>
|   |-DoStmt 0x55f08f3e53b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e5378 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e5328 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e5390 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e54c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x55f08f3e5460 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x55f08f3e5448 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e53d0 <col:9> 's32_t (struct k_queue *, void *)' Function 0x55f08f3e5040 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x55f08f3e5498 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e53f8 <col:38> 'struct k_queue *' lvalue ParmVar 0x55f08f3e5118 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55f08f3e54b0 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e5420 <col:45> 'void *' lvalue ParmVar 0x55f08f3e5190 'data' 'void *'
|-FunctionDecl 0x55f08f3e5630 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x55f08f3e5528 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x55f08f3e5598 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3e5810 prev 0x55f08f39d678 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3e5708 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x55f08f3e5778 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3e5b30 <line:494:1, line:502:1>
|   |-DoStmt 0x55f08f3e59a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e5968 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e5918 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e5980 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e5b18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x55f08f3e5ab0 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x55f08f3e5a98 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e59c0 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x55f08f3e5630 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3e5ae8 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e59e8 <col:28> 'struct k_queue *' lvalue ParmVar 0x55f08f3e5708 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x55f08f3e5b00 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e5a10 <col:35> 's32_t':'int' lvalue ParmVar 0x55f08f3e5778 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3e5c08 prev 0x55f08f39e848 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x55f08f3e5b78 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x55f08f3e5d68 prev 0x55f08f39e6e8 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f3e5cd8 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x55f08f3e6060 <line:507:1, line:515:1>
|   |-DoStmt 0x55f08f3e5ef0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e5eb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e5e68 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e5ed0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e6048 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x55f08f3e6000 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55f08f3e5fe8 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e5f10 <col:9> 'int (struct k_queue *)' Function 0x55f08f3e5c08 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x55f08f3e6030 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e5f38 <col:33> 'struct k_queue *' lvalue ParmVar 0x55f08f3e5cd8 'queue' 'struct k_queue *'
|-FunctionDecl 0x55f08f3e6138 prev 0x55f08f39f6a0 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x55f08f3e60a8 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x55f08f3e6298 prev 0x55f08f39f540 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f3e6208 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x55f08f3e6560 <line:520:1, line:528:1>
|   |-DoStmt 0x55f08f3e6420 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e63e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e6398 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e6400 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e6548 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x55f08f3e6500 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x55f08f3e64e8 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e6440 <col:9> 'void *(struct k_queue *)' Function 0x55f08f3e6138 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x55f08f3e6530 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e6468 <col:34> 'struct k_queue *' lvalue ParmVar 0x55f08f3e6208 'queue' 'struct k_queue *'
|-FunctionDecl 0x55f08f3e6638 prev 0x55f08f39fbd8 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x55f08f3e65a8 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x55f08f3e6798 prev 0x55f08f39fa78 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x55f08f3e6708 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x55f08f3e6a08 <line:533:1, line:541:1>
|   |-DoStmt 0x55f08f3e6920 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e68e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e6898 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e6900 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e69f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x55f08f3e69a8 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x55f08f3e6990 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e6940 <col:9> 'void *(struct k_queue *)' Function 0x55f08f3e6638 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x55f08f3e69d8 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e6968 <col:34> 'struct k_queue *' lvalue ParmVar 0x55f08f3e6708 'queue' 'struct k_queue *'
|-FunctionDecl 0x55f08f3e6d08 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x55f08f3e6ae0 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x55f08f3e6b58 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x55f08f3e6bc8 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3e6fd0 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3e6de8 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x55f08f3e6e60 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x55f08f3e6ed0 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3e7340 <line:546:1, line:554:1>
|   |-DoStmt 0x55f08f3e7168 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e7130 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e70e0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e7148 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e7328 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x55f08f3e72a0 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x55f08f3e7288 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e7188 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x55f08f3e6d08 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3e72e0 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e71b0 <col:29> 'struct k_futex *' lvalue ParmVar 0x55f08f3e6de8 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x55f08f3e72f8 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e71d8 <col:36> 'int' lvalue ParmVar 0x55f08f3e6e60 'expected' 'int'
|       `-ImplicitCastExpr 0x55f08f3e7310 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e7200 <col:46> 's32_t':'int' lvalue ParmVar 0x55f08f3e6ed0 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3e7518 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x55f08f3e7388 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x55f08f3e73f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x55f08f3e76f8 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x55f08f3e75f0 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x55f08f3e7660 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x55f08f3e7a10 <line:559:1, line:567:1>
|   |-DoStmt 0x55f08f3e7888 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e7850 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e7800 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e7868 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e79f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x55f08f3e7990 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55f08f3e7978 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e78a8 <col:9> 'int (struct k_futex *, bool)' Function 0x55f08f3e7518 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x55f08f3e79c8 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e78d0 <col:29> 'struct k_futex *' lvalue ParmVar 0x55f08f3e75f0 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x55f08f3e79e0 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e78f8 <col:36> 'bool' lvalue ParmVar 0x55f08f3e7660 'wake_all' 'bool'
|-FunctionDecl 0x55f08f3e7b58 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x55f08f3e7a58 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x55f08f3e7ac8 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x55f08f3e7d30 prev 0x55f08f29d720 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x55f08f3e7c30 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x55f08f3e7ca0 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x55f08f3e8060 <line:572:1, line:580:1>
|   |-DoStmt 0x55f08f3e7ec0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e7e88 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e7e38 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e7ea0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e8048 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x55f08f3e7fe0 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x55f08f3e7fb8 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e7ee0 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x55f08f3e7b58 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x55f08f3e8018 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e7f08 <col:35> 'struct k_stack *' lvalue ParmVar 0x55f08f3e7c30 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x55f08f3e8030 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e7f30 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f3e7ca0 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x55f08f3e81b0 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x55f08f3e80a8 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x55f08f3e8118 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x55f08f3e8390 prev 0x55f08f29dba8 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x55f08f3e8288 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x55f08f3e82f8 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x55f08f3e86b0 <line:585:1, line:593:1>
|   |-DoStmt 0x55f08f3e8520 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e84e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e8498 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e8500 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e8698 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x55f08f3e8630 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x55f08f3e8618 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e8540 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x55f08f3e81b0 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x55f08f3e8668 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e8568 <col:29> 'struct k_stack *' lvalue ParmVar 0x55f08f3e8288 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x55f08f3e8680 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e8590 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x55f08f3e82f8 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x55f08f3e8878 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x55f08f3e86f8 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x55f08f3e8768 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x55f08f3e87d8 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3e8ad8 prev 0x55f08f29e8b8 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3e8958 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x55f08f3e89c8 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x55f08f3e8a38 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3e8e40 <line:598:1, line:606:1>
|   |-DoStmt 0x55f08f3e8c70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e8c38 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e8be8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e8c50 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e8e28 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x55f08f3e8da0 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x55f08f3e8d88 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e8c90 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x55f08f3e8878 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3e8de0 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e8cb8 <col:28> 'struct k_stack *' lvalue ParmVar 0x55f08f3e8958 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x55f08f3e8df8 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e8ce0 <col:35> 'stack_data_t *' lvalue ParmVar 0x55f08f3e89c8 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x55f08f3e8e10 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e8d08 <col:41> 's32_t':'int' lvalue ParmVar 0x55f08f3e8a38 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3e8f18 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x55f08f3e8e88 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x55f08f3e90a8 prev 0x55f08f3b7018 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55f08f3e9018 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x55f08f3e9370 <line:611:1, line:619:1>
|   |-DoStmt 0x55f08f3e9230 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e91f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e91a8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e9210 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e9358 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x55f08f3e9310 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x55f08f3e92f8 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e9250 <col:9> 'int (struct k_mutex *)' Function 0x55f08f3e8f18 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x55f08f3e9340 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e9278 <col:29> 'struct k_mutex *' lvalue ParmVar 0x55f08f3e9018 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x55f08f3e94c0 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x55f08f3e93b8 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x55f08f3e9428 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3e96a0 prev 0x55f08f3b7298 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3e9598 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x55f08f3e9608 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3e99c0 <line:624:1, line:632:1>
|   |-DoStmt 0x55f08f3e9830 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e97f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e97a8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e9810 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e99a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x55f08f3e9940 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x55f08f3e9928 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e9850 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x55f08f3e94c0 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3e9978 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3e9878 <col:29> 'struct k_mutex *' lvalue ParmVar 0x55f08f3e9598 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x55f08f3e9990 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e98a0 <col:36> 's32_t':'int' lvalue ParmVar 0x55f08f3e9608 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3e9a98 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x55f08f3e9a08 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x55f08f3e9bf8 prev 0x55f08f3b7430 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x55f08f3e9b68 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x55f08f3e9e68 <line:637:1, line:645:1>
|   |-DoStmt 0x55f08f3e9d80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3e9d48 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3e9cf8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3e9d60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3e9e50 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x55f08f3e9e08 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x55f08f3e9df0 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3e9da0 <col:9> 'int (struct k_mutex *)' Function 0x55f08f3e9a98 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x55f08f3e9e38 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3e9dc8 <col:31> 'struct k_mutex *' lvalue ParmVar 0x55f08f3e9b68 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x55f08f3ea040 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x55f08f3e9eb0 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x55f08f3e9f28 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x55f08f3e9fa0 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x55f08f3ea2b0 prev 0x55f08f3b7a38 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x55f08f3ea120 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x55f08f3ea198 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x55f08f3ea210 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x55f08f3ea620 <line:650:1, line:658:1>
|   |-DoStmt 0x55f08f3ea448 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3ea410 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3ea3c0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3ea428 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3ea608 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x55f08f3ea580 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x55f08f3ea568 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3ea468 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x55f08f3ea040 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x55f08f3ea5c0 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ea490 <col:27> 'struct k_sem *' lvalue ParmVar 0x55f08f3ea120 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x55f08f3ea5d8 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ea4b8 <col:32> 'unsigned int' lvalue ParmVar 0x55f08f3ea198 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x55f08f3ea5f0 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3ea4e0 <col:47> 'unsigned int' lvalue ParmVar 0x55f08f3ea210 'limit' 'unsigned int'
|-FunctionDecl 0x55f08f3ea770 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x55f08f3ea668 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x55f08f3ea6d8 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3ea950 prev 0x55f08f3b8d18 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3ea848 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x55f08f3ea8b8 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3eac70 <line:663:1, line:671:1>
|   |-DoStmt 0x55f08f3eaae0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3eaaa8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3eaa58 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3eaac0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3eac58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x55f08f3eabf0 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x55f08f3eabd8 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3eab00 <col:9> 'int (struct k_sem *, s32_t)' Function 0x55f08f3ea770 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3eac28 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3eab28 <col:27> 'struct k_sem *' lvalue ParmVar 0x55f08f3ea848 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x55f08f3eac40 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3eab50 <col:32> 's32_t':'int' lvalue ParmVar 0x55f08f3ea8b8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3ead40 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x55f08f3eacb8 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x55f08f3eae98 prev 0x55f08f3b8f20 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55f08f3eae10 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x55f08f3eb168 <line:676:1, line:685:1>
|   |-DoStmt 0x55f08f3eb038 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3eb000 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3eaf98 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3eb018 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3eb120 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x55f08f3eb108 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3eb058 <col:2> 'void (struct k_sem *)' Function 0x55f08f3ead40 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x55f08f3eb150 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3eb080 <col:20> 'struct k_sem *' lvalue ParmVar 0x55f08f3eae10 'sem' 'struct k_sem *'
|-FunctionDecl 0x55f08f3eb238 prev 0x55f08f3b9228 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x55f08f3eb1b0 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x55f08f3eb390 prev 0x55f08f3b90a8 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x55f08f3eb308 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x55f08f3eb5e8 <line:690:1, line:699:1>
|   |-DoStmt 0x55f08f3eb518 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3eb4e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3eb490 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3eb4f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3eb5a0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x55f08f3eb588 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3eb538 <col:2> 'void (struct k_sem *)' Function 0x55f08f3eb238 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x55f08f3eb5d0 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3eb560 <col:21> 'struct k_sem *' lvalue ParmVar 0x55f08f3eb308 'sem' 'struct k_sem *'
|-FunctionDecl 0x55f08f3eb6c0 prev 0x55f08f3b9690 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x55f08f3eb630 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x55f08f3eb820 prev 0x55f08f3b9508 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x55f08f3eb790 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x55f08f3ebaf0 <line:704:1, line:712:1>
|   |-DoStmt 0x55f08f3eb9a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3eb970 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3eb920 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3eb988 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3ebad8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x55f08f3eba90 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x55f08f3eba78 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3eb9c8 <col:9> 'unsigned int (struct k_sem *)' Function 0x55f08f3eb6c0 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x55f08f3ebac0 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3eb9f0 <col:32> 'struct k_sem *' lvalue ParmVar 0x55f08f3eb790 'sem' 'struct k_sem *'
|-FunctionDecl 0x55f08f3ebcb8 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x55f08f3ebb38 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3ebba8 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x55f08f3ebc18 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x55f08f3ebf18 prev 0x55f08f369b98 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x55f08f3ebd98 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3ebe08 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3ebe78 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x55f08f3ec280 <line:717:1, line:725:1>
|   |-DoStmt 0x55f08f3ec0b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3ec078 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3ec028 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3ec090 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3ec268 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x55f08f3ec1e0 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x55f08f3ec1c8 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3ec0d0 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x55f08f3ebcb8 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x55f08f3ec220 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ec0f8 <col:34> 'struct k_msgq *' lvalue ParmVar 0x55f08f3ebd98 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55f08f3ec238 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ec120 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x55f08f3ebe08 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55f08f3ec250 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3ec148 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x55f08f3ebe78 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x55f08f3ec450 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x55f08f3ec2c8 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3ec340 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x55f08f3ec3b0 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3ec6b8 prev 0x55f08f3bd638 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3ec530 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3ec5a8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55f08f3ec618 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3eca20 <line:730:1, line:738:1>
|   |-DoStmt 0x55f08f3ec850 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3ec818 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3ec7c8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3ec830 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3eca08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x55f08f3ec980 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x55f08f3ec968 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3ec870 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x55f08f3ec450 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3ec9c0 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ec898 <col:27> 'struct k_msgq *' lvalue ParmVar 0x55f08f3ec530 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55f08f3ec9d8 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ec8c0 <col:33> 'void *' lvalue ParmVar 0x55f08f3ec5a8 'data' 'void *'
|       `-ImplicitCastExpr 0x55f08f3ec9f0 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3ec8e8 <col:39> 's32_t':'int' lvalue ParmVar 0x55f08f3ec618 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3ecbf0 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x55f08f3eca68 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3ecae0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x55f08f3ecb50 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3ece58 prev 0x55f08f3bd8c8 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3eccd0 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3ecd48 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55f08f3ecdb8 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3ed188 <line:743:1, line:751:1>
|   |-DoStmt 0x55f08f3ed010 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3ecfb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3ecf68 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3ecfd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3ed170 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x55f08f3ed0e8 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x55f08f3ed0d0 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3ed030 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x55f08f3ecbf0 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3ed128 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ed058 <col:27> 'struct k_msgq *' lvalue ParmVar 0x55f08f3eccd0 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x55f08f3ed140 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ed080 <col:33> 'void *' lvalue ParmVar 0x55f08f3ecd48 'data' 'void *'
|       `-ImplicitCastExpr 0x55f08f3ed158 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3ed0a8 <col:39> 's32_t':'int' lvalue ParmVar 0x55f08f3ecdb8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3ed2e0 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x55f08f3ed1d0 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x55f08f3ed248 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x55f08f3ed4c8 prev 0x55f08f3bdb68 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x55f08f3ed3b8 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3ed430 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x55f08f3ed7e0 <line:756:1, line:764:1>
|   |-DoStmt 0x55f08f3ed658 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3ed620 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3ed5d0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3ed638 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3ed7c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x55f08f3ed760 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55f08f3ed748 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3ed678 <col:9> 'int (struct k_msgq *, void *)' Function 0x55f08f3ed2e0 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x55f08f3ed798 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ed6a0 <col:28> 'struct k_msgq *' lvalue ParmVar 0x55f08f3ed3b8 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x55f08f3ed7b0 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3ed6c8 <col:34> 'void *' lvalue ParmVar 0x55f08f3ed430 'data' 'void *'
|-FunctionDecl 0x55f08f3ed8b0 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x55f08f3ed828 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x55f08f3eda08 prev 0x55f08f3bdd70 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55f08f3ed980 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55f08f3edcb8 <line:769:1, line:778:1>
|   |-DoStmt 0x55f08f3edb90 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3edb58 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3edb08 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3edb70 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3edc70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x55f08f3edc58 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3edbb0 <col:2> 'void (struct k_msgq *)' Function 0x55f08f3ed8b0 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x55f08f3edca0 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3edbd8 <col:22> 'struct k_msgq *' lvalue ParmVar 0x55f08f3ed980 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55f08f3edd88 prev 0x55f08f3be3f0 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x55f08f3edd00 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x55f08f3edee0 prev 0x55f08f3bdf70 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55f08f3ede58 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55f08f3ee1b0 <line:783:1, line:791:1>
|   |-DoStmt 0x55f08f3ee068 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3ee030 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3edfe0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3ee048 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3ee198 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x55f08f3ee150 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55f08f3ee138 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3ee088 <col:9> 'u32_t (struct k_msgq *)' Function 0x55f08f3edd88 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x55f08f3ee180 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3ee0b0 <col:36> 'struct k_msgq *' lvalue ParmVar 0x55f08f3ede58 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55f08f3ee310 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x55f08f3ee1f8 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x55f08f3ee280 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x55f08f3ee500 prev 0x55f08f3be290 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x55f08f3ee3e8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x55f08f3ee470 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x55f08f3ee808 <line:796:1, line:805:1>
|   |-DoStmt 0x55f08f3ee690 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3ee658 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3ee608 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3ee670 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3ee7a0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x55f08f3ee788 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3ee6b0 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x55f08f3ee310 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x55f08f3ee7d8 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3ee6d8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x55f08f3ee3e8 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x55f08f3ee7f0 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3ee700 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x55f08f3ee470 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x55f08f3ee8d8 prev 0x55f08f3bece8 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x55f08f3ee850 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x55f08f3eea30 prev 0x55f08f3beb90 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x55f08f3ee9a8 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x55f08f3eeca0 <line:810:1, line:818:1>
|   |-DoStmt 0x55f08f3eebb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3eeb80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3eeb30 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3eeb98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3eec88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x55f08f3eec40 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55f08f3eec28 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3eebd8 <col:9> 'u32_t (struct k_msgq *)' Function 0x55f08f3ee8d8 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x55f08f3eec70 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3eec00 <col:36> 'struct k_msgq *' lvalue ParmVar 0x55f08f3ee9a8 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x55f08f3eedf0 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x55f08f3eece8 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x55f08f3eed58 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x55f08f3ef020 prev 0x55f08f3c4e88 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x55f08f3eeec8 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3eef38 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x55f08f3ef340 <line:823:1, line:831:1>
|   |-DoStmt 0x55f08f3ef1b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3ef178 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3ef128 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3ef190 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3ef328 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x55f08f3ef2c0 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x55f08f3ef2a8 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3ef1d0 <col:9> 'int (struct k_pipe *, size_t)' Function 0x55f08f3eedf0 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x55f08f3ef2f8 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3ef1f8 <col:34> 'struct k_pipe *' lvalue ParmVar 0x55f08f3eeec8 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x55f08f3ef310 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3ef220 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x55f08f3eef38 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x55f08f3ef678 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55f08f3ef388 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3ef400 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x55f08f3ef470 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3ef4e0 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x55f08f3ef550 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x55f08f3ef5c0 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3efa60 prev 0x55f08f3c5378 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3ef770 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3ef7e8 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55f08f3ef858 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3ef8c8 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x55f08f3ef938 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3ef9a8 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3efec0 <line:836:1, line:844:1>
|   |-DoStmt 0x55f08f3efc10 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3efbd8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3efb88 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3efbf0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3efea8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x55f08f3efdc0 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x55f08f3efda8 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3efc30 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x55f08f3ef678 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3efe18 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3efc58 <col:27> 'struct k_pipe *' lvalue ParmVar 0x55f08f3ef770 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x55f08f3efe30 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3efc80 <col:33> 'void *' lvalue ParmVar 0x55f08f3ef7e8 'data' 'void *'
|       |-ImplicitCastExpr 0x55f08f3efe48 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3efca8 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x55f08f3ef858 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55f08f3efe60 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3efcd0 <col:55> 'size_t *' lvalue ParmVar 0x55f08f3ef8c8 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x55f08f3efe78 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3efcf8 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x55f08f3ef938 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55f08f3efe90 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3efd20 <col:80> 's32_t':'int' lvalue ParmVar 0x55f08f3ef9a8 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3f01f8 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x55f08f3eff08 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3eff80 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x55f08f3efff0 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3f0060 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x55f08f3f00d0 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x55f08f3f0140 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3f05e0 prev 0x55f08f3c5790 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3f02f0 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x55f08f3f0368 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x55f08f3f03d8 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3f0448 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x55f08f3f04b8 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x55f08f3f0528 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3f09e0 <line:849:1, line:857:1>
|   |-DoStmt 0x55f08f3f0790 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3f0758 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3f0708 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3f0770 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3f09c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x55f08f3f08e0 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x55f08f3f08c8 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3f07b0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x55f08f3f01f8 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3f0938 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3f07d8 <col:27> 'struct k_pipe *' lvalue ParmVar 0x55f08f3f02f0 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x55f08f3f0950 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3f0800 <col:33> 'void *' lvalue ParmVar 0x55f08f3f0368 'data' 'void *'
|       |-ImplicitCastExpr 0x55f08f3f0968 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3f0828 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x55f08f3f03d8 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x55f08f3f0980 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3f0850 <col:54> 'size_t *' lvalue ParmVar 0x55f08f3f0448 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x55f08f3f0998 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3f0878 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x55f08f3f04b8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x55f08f3f09b0 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3f08a0 <col:76> 's32_t':'int' lvalue ParmVar 0x55f08f3f0528 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3f0bb0 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x55f08f3f0a28 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x55f08f3f0aa0 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x55f08f3f0b10 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x55f08f3f0e18 prev 0x55f08f3ce7f8 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x55f08f3f0c90 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x55f08f3f0d08 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x55f08f3f0d78 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x55f08f3f1190 <line:862:1, line:870:1>
|   |-DoStmt 0x55f08f3f0fb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3f0f78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3f0f28 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3f0f90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3f1178 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x55f08f3f10f0 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x55f08f3f10d8 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3f0fd0 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x55f08f3f0bb0 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x55f08f3f1130 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3f0ff8 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x55f08f3f0c90 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x55f08f3f1148 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3f1030 <col:31> 'int' lvalue ParmVar 0x55f08f3f0d08 'num_events' 'int'
|       `-ImplicitCastExpr 0x55f08f3f1160 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3f1058 <col:43> 's32_t':'int' lvalue ParmVar 0x55f08f3f0d78 'timeout' 's32_t':'int'
|-FunctionDecl 0x55f08f3f1260 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x55f08f3f11d8 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55f08f3f13b8 prev 0x55f08f3cea00 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55f08f3f1330 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55f08f3f1668 <line:875:1, line:884:1>
|   |-DoStmt 0x55f08f3f1540 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3f1508 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3f14b8 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3f1520 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3f1620 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x55f08f3f1608 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3f1560 <col:2> 'void (struct k_poll_signal *)' Function 0x55f08f3f1260 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x55f08f3f1650 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3f1588 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x55f08f3f1330 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x55f08f3f1738 prev 0x55f08f3cecb0 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x55f08f3f16b0 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x55f08f3f1890 prev 0x55f08f3ceb58 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x55f08f3f1808 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x55f08f3f1ae8 <line:889:1, line:898:1>
|   |-DoStmt 0x55f08f3f1a18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3f19e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3f1990 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3f19f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3f1aa0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x55f08f3f1a88 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3f1a38 <col:2> 'void (struct k_poll_signal *)' Function 0x55f08f3f1738 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x55f08f3f1ad0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3f1a60 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x55f08f3f1808 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x55f08f3f1cb8 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x55f08f3f1b30 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55f08f3f1ba8 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x55f08f3f1c20 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x55f08f3f1f20 prev 0x55f08f3cfbf8 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x55f08f3f1d98 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55f08f3f1e10 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x55f08f3f1e88 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x55f08f3f2278 <line:903:1, line:912:1>
|   |-DoStmt 0x55f08f3f20b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3f2080 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3f2030 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3f2098 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3f21f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x55f08f3f21d8 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3f20d8 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x55f08f3f1cb8 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x55f08f3f2230 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3f2100 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x55f08f3f1d98 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x55f08f3f2248 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3f2128 <col:37> 'unsigned int *' lvalue ParmVar 0x55f08f3f1e10 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x55f08f3f2260 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3f2150 <col:47> 'int *' lvalue ParmVar 0x55f08f3f1e88 'result' 'int *'
|-FunctionDecl 0x55f08f3f23d0 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x55f08f3f22c0 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x55f08f3f2338 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x55f08f3f25b8 prev 0x55f08f3cfe98 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x55f08f3f24a8 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x55f08f3f2520 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x55f08f3f28d0 <line:917:1, line:925:1>
|   |-DoStmt 0x55f08f3f2748 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3f2710 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3f26c0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3f2728 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3f28b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x55f08f3f2850 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x55f08f3f2838 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3f2768 <col:9> 'int (struct k_poll_signal *, int)' Function 0x55f08f3f23d0 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x55f08f3f2888 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x55f08f3f2790 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x55f08f3f24a8 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x55f08f3f28a0 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3f27b8 <col:44> 'int' lvalue ParmVar 0x55f08f3f2520 'result' 'int'
|-FunctionDecl 0x55f08f3f2a90 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x55f08f3f2908 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x55f08f3f2978 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x55f08f3f2c58 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x55f08f3f2b58 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x55f08f3f2bc8 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x55f08f3f2f58 <line:930:1, line:939:1>
|   |-DoStmt 0x55f08f3f2de8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3f2db0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3f2d60 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3f2dc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x55f08f3f2ef0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x55f08f3f2ed8 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55f08f3f2e08 <col:2> 'void (char *, size_t)' Function 0x55f08f3f2a90 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x55f08f3f2f28 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f08f3f2e30 <col:19> 'char *' lvalue ParmVar 0x55f08f3f2b58 'c' 'char *'
|     `-ImplicitCastExpr 0x55f08f3f2f40 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55f08f3f2e58 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x55f08f3f2bc8 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x55f08f3f4050 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x55f08f3f2fa0 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x55f08f3f41b0 prev 0x55f08f3d52b8 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x55f08f3f4120 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x55f08f3f4450 <line:944:1, line:952:1>
|   |-DoStmt 0x55f08f3f4338 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x55f08f3f4300 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x55f08f3f42b0 <col:2, col:39>
|   | `-IntegerLiteral 0x55f08f3f4318 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x55f08f3f4438 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x55f08f3f43f0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x55f08f3f43d8 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f08f3f4358 <col:9> 'int (struct k_thread *)' Function 0x55f08f3f4050 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x55f08f3f4420 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x55f08f3f4380 <col:32> 'struct k_thread *' lvalue ParmVar 0x55f08f3f4120 'thread' 'struct k_thread *'
|-FunctionDecl 0x55f08f3f4550 </vagrant/apps/plc_bottlewash/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x55f08f3f4720 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55f08f3f4620 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x55f08f3f4860 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x55f08f3f47d8 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x55f08f3f4a20 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55f08f3f4918 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55f08f3f4b60 <line:16:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55f08f3f4ad8 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55f08f3f4ca0 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55f08f3f4c18 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55f08f3f4de0 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55f08f3f4d58 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55f08f3f4f20 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55f08f3f4e98 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55f08f3f5060 prev 0x55f08f3f4a20 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55f08f3f4fd8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x55f08f3f5108 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x55f08f3f51c0 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x55f08f3f5218 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x55f08f3f5300 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x55f08f3f53a0 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x55f08f3f5350 'struct gpio_int_config' sugar
|   `-RecordType 0x55f08f3f5190 'gpio_int_config'
|     `-Record 0x55f08f3f5108 ''
|-FunctionDecl 0x55f08f3f5620 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x55f08f3f5420 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55f08f3f5508 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x55f08f3f5768 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x55f08f3f56e0 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x55f08f3f5828 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x55f08f1ea780 'short'
|-TypedefDecl 0x55f08f3f5898 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55f08f1ea800 'unsigned char'
|-EnumDecl 0x55f08f3f58f0 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x55f08f3f59d0 <line:26:2, col:6> col:2 R 'int'
| | `-IntegerLiteral 0x55f08f3f59b0 <col:6> 'int' 2
| |-EnumConstantDecl 0x55f08f3f5a38 <line:27:2, col:6> col:2 G 'int'
| | `-IntegerLiteral 0x55f08f3f5a18 <col:6> 'int' 3
| `-EnumConstantDecl 0x55f08f3f5aa0 <line:28:2, col:6> col:2 B 'int'
|   `-IntegerLiteral 0x55f08f3f5a80 <col:6> 'int' 4
|-TypedefDecl 0x55f08f3f5b40 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x55f08f3f5af0 'enum LED' sugar
|   `-EnumType 0x55f08f3f5990 'LED'
|     `-Enum 0x55f08f3f58f0 ''
|-FunctionDecl 0x55f08f3f5d70 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x55f08f3f5be8 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x55f08f3f5c58 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x55f08f3f5f30 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x55f08f3f5e30 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55f08f3f8c40 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x55f08f3f8d70 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x55f08f3f8ed0 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x55f08f3f8e48 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x55f08f46d430 <line:39:4, col:42>
|   `-ParagraphComment 0x55f08f46d400 <col:4, col:42>
|     `-TextComment 0x55f08f46d3d0 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x55f08f3f9010 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x55f08f3f8f88 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55f08f3f9270 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x55f08f3f90c8 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x55f08f3f9160 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x55f08f3f93f0 <line:47:1, col:26> col:6 read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55f08f3f9330 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x55f08f3f95d0 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x55f08f3f94d0 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x55f08f3f9710 <line:51:1, col:23> col:6 LED_off 'void (LED)'
| `-ParmVarDecl 0x55f08f3f9688 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x55f08f3f98d0 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x55f08f3f97c8 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x55f08f3f9b10 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x55f08f3f9988 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x55f08f3f99f8 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55f08f3f9c58 <line:57:1, col:40> col:6 read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x55f08f3f9bd0 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x55f08f3f9d18 prev 0x55f08f3f5828 </vagrant/apps/plc_bottlewash/./inc/ladder.h:7:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x55f08f1ea780 'short'
|-TypedefDecl 0x55f08f3f9d88 prev 0x55f08f3f5898 <line:8:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x55f08f1ea800 'unsigned char'
|-VarDecl 0x55f08f3f9ec8 <line:13:1, col:100> col:16 output_pins 'uint8_t [5]' static cinit
| |-InitListExpr 0x55f08f3fa088 <col:68, col:100> 'uint8_t [5]'
| | |-ImplicitCastExpr 0x55f08f3fa0c8 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:16:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55f08f3f9f80 <col:14> 'int' 8
| | |-ImplicitCastExpr 0x55f08f3fa0e8 <line:17:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55f08f3f9fa0 <col:14> 'int' 9
| | |-ImplicitCastExpr 0x55f08f3fa110 <line:18:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55f08f3f9fc0 <col:15> 'int' 10
| | |-ImplicitCastExpr 0x55f08f3fa148 <line:19:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x55f08f3f9fe0 <col:15> 'int' 11
| | `-ImplicitCastExpr 0x55f08f3fa160 <line:20:15> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x55f08f3fa000 <col:15> 'int' 12
| `-SectionAttr 0x55f08f3f9f28 </vagrant/apps/plc_bottlewash/./inc/ladder.h:13:45, col:62> section ".rodata"
|-FunctionDecl 0x55f08f3fa328 <line:33:1, col:19> col:6 PlcCycle 'void (void)'
| `-FullComment 0x55f08f46d500 <line:30:4, col:57>
|   `-ParagraphComment 0x55f08f46d4d0 <col:4, col:57>
|     `-TextComment 0x55f08f46d4a0 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x55f08f3fa478 <line:36:1, col:36> col:6 used plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x55f08f3fa3f0 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x55f08f3fa5b0 <line:39:1, col:19> col:6 used init_plc 'void (void)'
|-FunctionDecl 0x55f08f3fa7c0 <line:46:1, col:26> col:6 Read_U_b_XStart 'BOOL (void)'
| `-FullComment 0x55f08f46d5d0 <line:44:4, col:57>
|   `-ParagraphComment 0x55f08f46d5a0 <col:4, col:57>
|     `-TextComment 0x55f08f46d570 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x55f08f3fa8f0 <line:48:1, col:25> col:6 Read_U_b_XStop 'BOOL (void)'
|-FunctionDecl 0x55f08f3faa20 <line:50:1, col:30> col:6 Read_U_b_XBottle_IN 'BOOL (void)'
|-FunctionDecl 0x55f08f3fab50 <line:52:1, col:30> col:6 Read_U_b_XBottle_UP 'BOOL (void)'
|-FunctionDecl 0x55f08f3fcdb0 <line:54:1, col:34> col:6 Read_U_b_XPosition_DOWN 'BOOL (void)'
|-FunctionDecl 0x55f08f3fcee0 <line:56:1, col:32> col:6 Read_U_b_YBottle_HOLD 'BOOL (void)'
|-FunctionDecl 0x55f08f3fd050 <line:57:1, col:35> col:6 Write_U_b_YBottle_HOLD 'void (BOOL)'
| `-ParmVarDecl 0x55f08f3fcf90 <col:29, col:34> col:34 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55f08f3fd188 <line:59:1, col:34> col:6 Read_U_b_YMotor_FORWARD 'BOOL (void)'
|-FunctionDecl 0x55f08f3fd2c0 <line:60:1, col:37> col:6 Write_U_b_YMotor_FORWARD 'void (BOOL)'
| `-ParmVarDecl 0x55f08f3fd238 <col:31, col:36> col:36 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55f08f3fd3f8 <line:62:1, col:29> col:6 Read_U_b_YWater_ON 'BOOL (void)'
|-FunctionDecl 0x55f08f3fd530 <line:63:1, col:32> col:6 Write_U_b_YWater_ON 'void (BOOL)'
| `-ParmVarDecl 0x55f08f3fd4a8 <col:26, col:31> col:31 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55f08f3fd668 <line:65:1, col:34> col:6 Read_U_b_YMotor_REVERSE 'BOOL (void)'
|-FunctionDecl 0x55f08f3fd7a0 <line:66:1, col:37> col:6 Write_U_b_YMotor_REVERSE 'void (BOOL)'
| `-ParmVarDecl 0x55f08f3fd718 <col:31, col:36> col:36 v 'BOOL':'unsigned char'
|-FunctionDecl 0x55f08f3fd8d8 <line:68:1, col:35> col:6 Read_U_b_YBottle_RELEASE 'BOOL (void)'
|-FunctionDecl 0x55f08f3fda10 <line:69:1, col:38> col:6 Write_U_b_YBottle_RELEASE 'void (BOOL)'
| `-ParmVarDecl 0x55f08f3fd988 <col:32, col:37> col:37 v 'BOOL':'unsigned char'
|-VarDecl 0x55f08f3fdad8 <./src/main.c:9:1, col:16> col:16 used scan_timer 'struct k_timer':'struct k_timer'
`-FunctionDecl 0x55f08f3fdbc8 <line:11:1, line:16:1> line:11:6 main 'void (void)'
  `-CompoundStmt 0x55f08f3fe048 <col:17, line:16:1>
    |-CallExpr 0x55f08f3fdcd8 <line:12:2, col:11> 'void'
    | `-ImplicitCastExpr 0x55f08f3fdcc0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55f08f3fdc98 <col:2> 'void (void)' Function 0x55f08f3fa5b0 'init_plc' 'void (void)'
    |-CallExpr 0x55f08f3fde90 <line:13:5, col:49> 'void'
    | |-ImplicitCastExpr 0x55f08f3fde78 <col:5> 'void (*)(struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55f08f3fdd00 <col:5> 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' Function 0x55f08f397050 'k_timer_init' 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)'
    | |-UnaryOperator 0x55f08f3fdd50 <col:18, col:19> 'struct k_timer *' prefix '&'
    | | `-DeclRefExpr 0x55f08f3fdd28 <col:19> 'struct k_timer':'struct k_timer' lvalue Var 0x55f08f3fdad8 'scan_timer' 'struct k_timer':'struct k_timer'
    | |-ImplicitCastExpr 0x55f08f3fded0 <col:31> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55f08f3fdd70 <col:31> 'void (struct k_timer *)' Function 0x55f08f3fa478 'plc_callback' 'void (struct k_timer *)'
    | `-ImplicitCastExpr 0x55f08f3fdee8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'k_timer_stop_t':'void (*)(struct k_timer *)' <NullToPointer>
    |   `-ParenExpr 0x55f08f3fddf8 <col:14, col:24> 'void *'
    |     `-CStyleCastExpr 0x55f08f3fddd0 <col:15, col:23> 'void *' <NullToPointer>
    |       `-IntegerLiteral 0x55f08f3fdd98 <col:23> 'int' 0
    `-CallExpr 0x55f08f3fe008 <./src/main.c:15:2, col:73> 'void'
      |-ImplicitCastExpr 0x55f08f3fdff0 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x55f08f3fdf00 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x55f08f3e11d8 'k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
      |-UnaryOperator 0x55f08f3fdf50 <col:16, col:17> 'struct k_timer *' prefix '&'
      | `-DeclRefExpr 0x55f08f3fdf28 <col:17> 'struct k_timer':'struct k_timer' lvalue Var 0x55f08f3fdad8 'scan_timer' 'struct k_timer':'struct k_timer'
      |-ParenExpr 0x55f08f3fdf90 </vagrant/ext/zephyros/zephyr/include/kernel.h:1461:24, col:27> 'int'
      | `-IntegerLiteral 0x55f08f3fdf70 <./src/main.c:7:23> 'int' 10
      `-ParenExpr 0x55f08f3fdfd0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1461:24, col:27> 'int'
        `-IntegerLiteral 0x55f08f3fdfb0 <./src/main.c:7:23> 'int' 10
TranslationUnitDecl 0x56101ef8e8b8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x56101ef8ee30 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x56101ef8eb50 '__int128'
|-TypedefDecl 0x56101ef8eea0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x56101ef8eb70 'unsigned __int128'
|-TypedefDecl 0x56101ef8f178 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x56101ef8ef80 'struct __NSConstantString_tag'
|   `-Record 0x56101ef8eef8 '__NSConstantString_tag'
|-TypedefDecl 0x56101ef8f210 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x56101ef8f1d0 'char *'
|   `-BuiltinType 0x56101ef8e950 'char'
|-TypedefDecl 0x56101ef8f4d8 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x56101ef8f480 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x56101ef8f2f0 'struct __va_list_tag'
|     `-Record 0x56101ef8f268 '__va_list_tag'
|-TypedefDecl 0x56101efd7cf0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x56101ef8e9d0 'long'
|-TypedefDecl 0x56101efd7d60 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x56101ef8ea70 'unsigned long'
|-TypedefDecl 0x56101efd7dd0 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x56101ef8e9b0 'int'
|-RecordDecl 0x56101efd7e28 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x56101efd7f20 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x56101efd7f68 <col:43, col:77> aligned
| |   `-UnaryExprOrTypeTraitExpr 0x56101efd7ee8 <col:55, col:76> 'unsigned long' alignof 'long long'
| `-FieldDecl 0x56101efd8008 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x56101efd8050 <col:45, col:81> aligned
|     `-UnaryExprOrTypeTraitExpr 0x56101efd7fd0 <col:57, col:80> 'unsigned long' alignof 'long double'
|-TypedefDecl 0x56101efd80f0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x56101efd80a0 'struct max_align_t' sugar
|   `-RecordType 0x56101efd7eb0 'max_align_t'
|     `-Record 0x56101efd7e28 ''
|-TypedefDecl 0x56101efd8178 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x56101ef8e970 'signed char'
|-TypedefDecl 0x56101efd81e8 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x56101ef8e990 'short'
|-TypedefDecl 0x56101efd8258 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x56101ef8e9b0 'int'
|-TypedefDecl 0x56101efd82c8 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x56101ef8e9d0 'long'
|-TypedefDecl 0x56101efd8338 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x56101ef8e970 'signed char'
|-TypedefDecl 0x56101efd83a8 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x56101ef8e990 'short'
|-TypedefDecl 0x56101efd8418 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x56101ef8e9b0 'int'
|-TypedefDecl 0x56101efd8488 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x56101ef8e9d0 'long'
|-TypedefDecl 0x56101efd84f8 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x56101ef8e970 'signed char'
|-TypedefDecl 0x56101efd8568 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x56101ef8e990 'short'
|-TypedefDecl 0x56101efd85d8 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x56101ef8e9b0 'int'
|-TypedefDecl 0x56101efd8648 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x56101ef8e9d0 'long'
|-TypedefDecl 0x56101efd86b8 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x56101ef8ea10 'unsigned char'
|-TypedefDecl 0x56101efd8728 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x56101ef8ea30 'unsigned short'
|-TypedefDecl 0x56101efd8798 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x56101ef8ea50 'unsigned int'
|-TypedefDecl 0x56101efd8808 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x56101ef8ea70 'unsigned long'
|-TypedefDecl 0x56101efd8878 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x56101ef8ea10 'unsigned char'
|-TypedefDecl 0x56101efd88e8 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x56101ef8ea30 'unsigned short'
|-TypedefDecl 0x56101efd8958 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x56101ef8ea50 'unsigned int'
|-TypedefDecl 0x56101efd89c8 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x56101ef8ea70 'unsigned long'
|-TypedefDecl 0x56101efd8a38 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x56101ef8ea10 'unsigned char'
|-TypedefDecl 0x56101efd8aa8 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x56101ef8ea30 'unsigned short'
|-TypedefDecl 0x56101efd8b18 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x56101ef8ea50 'unsigned int'
|-TypedefDecl 0x56101efd8b88 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x56101ef8ea70 'unsigned long'
|-TypedefDecl 0x56101efd8bf8 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x56101ef8e9d0 'long'
|-TypedefDecl 0x56101efd8c68 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x56101ef8ea70 'unsigned long'
|-TypedefDecl 0x56101effc550 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x56101ef8e970 'signed char'
|-TypedefDecl 0x56101effc5c0 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x56101ef8e990 'short'
|-TypedefDecl 0x56101effc630 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x56101ef8e9b0 'int'
|-TypedefDecl 0x56101effc6a0 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x56101ef8e9f0 'long long'
|-TypedefDecl 0x56101effc710 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x56101ef8ea10 'unsigned char'
|-TypedefDecl 0x56101effc780 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x56101ef8ea30 'unsigned short'
|-TypedefDecl 0x56101effc7f0 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x56101ef8ea50 'unsigned int'
|-TypedefDecl 0x56101effc860 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x56101ef8ea90 'unsigned long long'
|-TypedefDecl 0x56101effc8d0 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x56101ef8ea70 'unsigned long'
|-TypedefDecl 0x56101effca90 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x56101ef8e9b0 'int'
|-TypedefDecl 0x56101effcb20 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x56101effcaf0 'atomic_t' sugar
|   |-Typedef 0x56101effca90 'atomic_t'
|   `-BuiltinType 0x56101ef8e9b0 'int'
|-FunctionDecl 0x56101effce88 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x56101effcc48 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x56101effcce0 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x56101effcd50 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x56101effd140 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x56101effcfb8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x56101effd028 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x56101effd328 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x56101effd228 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x56101effd298 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x56101f01e970 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x56101effd418 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x56101f01eae0 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x56101f01ea58 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x56101f01ed00 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x56101f01ebf8 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x56101f01eee8 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x56101f01ede8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x56101f01ee58 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x56101f01f060 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x56101f01efd8 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x56101f01f248 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x56101f01f148 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x56101f01f1b8 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x56101f01f438 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x56101f01f338 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x56101f01f3a8 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x56101f01f628 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x56101f01f528 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x56101f01f598 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x56101f01f818 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x56101f01f718 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x56101f01f788 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x56101f01fb70 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x56101f01f9e8 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x56101f01fa60 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x56101f0202e8 <line:352:1, line:356:1>
| | |-DeclStmt 0x56101f01ff70 <line:353:2, col:57>
| | | `-VarDecl 0x56101f01fc30 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x56101f01ff40 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x56101f01ff28 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x56101f01fc90 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x56101f01ed00 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x56101f01feb0 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x56101f01fe88 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x56101f01fe70 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x56101f01fce0 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x56101f01fcb8 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x56101f01f9e8 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x56101f01fe50 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x56101f01fe28 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x56101f01fe10 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x56101f01fdf8 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x56101f01fd28 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x56101f01fd00 <line:353:52> 'int' lvalue ParmVar 0x56101f01fa60 'bit' 'int'
| | |             `-ParenExpr 0x56101f01fdd8 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x56101f01fdb0 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x56101f01fd58 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x56101f01fd98 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x56101f01fd78 <col:45> 'int' 8
| | `-ReturnStmt 0x56101f0202a8 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x56101f020290 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x56101f020268 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x56101f020228 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x56101f020200 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x56101f01ff88 <col:10> 'int' 1
| |       |   `-ParenExpr 0x56101f0201e0 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x56101f0201b8 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x56101f0201a0 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x56101f01ffa8 <col:15> 'atomic_val_t':'int' lvalue Var 0x56101f01fc30 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x56101f020180 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x56101f020158 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x56101f020140 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x56101f020128 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x56101f01ffd0 <col:23> 'int' lvalue ParmVar 0x56101f01fa60 'bit' 'int'
| |       |           `-ParenExpr 0x56101f020108 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x56101f0200e0 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x56101f020088 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x56101f020060 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x56101f020008 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x56101f020048 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x56101f020028 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x56101f0200c8 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x56101f0200a8 <col:44> 'int' 1
| |       `-IntegerLiteral 0x56101f020248 <col:53> 'int' 0
| `-FullComment 0x56101f1ab3f0 <line:341:3, line:349:55>
|   |-ParagraphComment 0x56101f1a4ee0 <line:341:3>
|   | `-TextComment 0x56101f1a4eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1a4f00 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x56101f1a4f60 <col:10, col:32>
|   |   `-TextComment 0x56101f1a4f30 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x56101f1ab0f0 <line:343:3, line:344:66>
|   | |-TextComment 0x56101f1aafa0 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x56101f1aaff0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x56101f1ab010 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x56101f1ab060 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x56101f1ab080 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x56101f1ab0a0 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x56101f1ab140 <line:346:3>
|   | `-TextComment 0x56101f1ab110 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ab160 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ab210 <line:346:17, line:347:3>
|   |   |-TextComment 0x56101f1ab1c0 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x56101f1ab1e0 <line:347:3> Text=" "
|   |-ParamCommandComment 0x56101f1ab230 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ab2c0 <col:14, col:43>
|   |   `-TextComment 0x56101f1ab290 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x56101f1ab310 <line:349:3>
|   | `-TextComment 0x56101f1ab2e0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ab330 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x56101f1ab390 <col:11, col:55>
|       `-TextComment 0x56101f1ab360 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x56101f0204a0 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x56101f020318 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x56101f020390 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x56101f021a58 <line:370:1, line:377:1>
| | |-DeclStmt 0x56101f0208a0 <line:371:2, col:38>
| | | `-VarDecl 0x56101f020560 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x56101f020880 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x56101f020858 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x56101f0205c0 <col:27> 'int' 1
| | |       `-ParenExpr 0x56101f020838 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x56101f020810 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x56101f0207f8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x56101f0206a0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x56101f020688 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x56101f020668 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x56101f020600 <line:371:34> 'int' lvalue ParmVar 0x56101f020390 'bit' 'int'
| | |           `-ParenExpr 0x56101f0207d8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x56101f0207b0 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x56101f020758 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x56101f020730 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x56101f0206d8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x56101f020718 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x56101f0206f8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x56101f020798 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x56101f020778 <col:63> 'int' 1
| | |-DeclStmt 0x56101f020928 <line:372:2, col:18>
| | | `-VarDecl 0x56101f0208c8 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x56101f0218c8 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x56101f020940 <col:2> 'atomic_val_t':'int' lvalue Var 0x56101f0208c8 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x56101f021890 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x56101f021878 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x56101f021580 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x56101f01f628 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x56101f0217a0 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x56101f021778 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x56101f021760 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x56101f0215d0 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x56101f0215a8 <line:374:31> 'atomic_t *' lvalue ParmVar 0x56101f020318 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x56101f021740 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x56101f021718 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x56101f021700 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x56101f0216e8 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x56101f021618 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x56101f0215f0 <line:374:39> 'int' lvalue ParmVar 0x56101f020390 'bit' 'int'
| | |   |       `-ParenExpr 0x56101f0216c8 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x56101f0216a0 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x56101f021648 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x56101f021688 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x56101f021668 <col:45> 'int' 8
| | |   `-UnaryOperator 0x56101f021800 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~'
| | |     `-ImplicitCastExpr 0x56101f0217e8 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x56101f0217c0 <col:46> 'atomic_val_t':'int' lvalue Var 0x56101f020560 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x56101f021a18 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x56101f021a00 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x56101f0219d8 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x56101f021998 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x56101f021970 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x56101f021940 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x56101f0218f0 <col:10> 'atomic_val_t':'int' lvalue Var 0x56101f0208c8 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x56101f021958 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x56101f021918 <col:16> 'atomic_val_t':'int' lvalue Var 0x56101f020560 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x56101f0219b8 <col:25> 'int' 0
| `-FullComment 0x56101f1ab980 <line:359:3, line:367:55>
|   |-ParagraphComment 0x56101f1ab490 <line:359:3>
|   | `-TextComment 0x56101f1ab460 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ab4b0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f1ab510 <col:10, col:42>
|   |   `-TextComment 0x56101f1ab4e0 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x56101f1ab680 <line:361:3, line:362:66>
|   | |-TextComment 0x56101f1ab530 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x56101f1ab580 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x56101f1ab5a0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x56101f1ab5f0 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x56101f1ab610 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x56101f1ab630 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x56101f1ab6d0 <line:364:3>
|   | `-TextComment 0x56101f1ab6a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ab6f0 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ab7a0 <line:364:17, line:365:3>
|   |   |-TextComment 0x56101f1ab750 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x56101f1ab770 <line:365:3> Text=" "
|   |-ParamCommandComment 0x56101f1ab7c0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ab850 <col:14, col:43>
|   |   `-TextComment 0x56101f1ab820 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x56101f1ab8a0 <line:367:3>
|   | `-TextComment 0x56101f1ab870 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ab8c0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x56101f1ab920 <col:11, col:55>
|       `-TextComment 0x56101f1ab8f0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x56101f021ba0 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x56101f021a98 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x56101f021b10 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x56101f0224a8 <line:391:1, line:398:1>
| | |-DeclStmt 0x56101f021f80 <line:392:2, col:38>
| | | `-VarDecl 0x56101f021c60 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x56101f021f60 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x56101f021f38 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x56101f021cc0 <col:27> 'int' 1
| | |       `-ParenExpr 0x56101f021f18 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x56101f021ef0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x56101f021ed8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x56101f021d80 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x56101f021d68 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x56101f021d48 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x56101f021ce0 <line:392:34> 'int' lvalue ParmVar 0x56101f021b10 'bit' 'int'
| | |           `-ParenExpr 0x56101f021eb8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x56101f021e90 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x56101f021e38 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x56101f021e10 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x56101f021db8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x56101f021df8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x56101f021dd8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x56101f021e78 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x56101f021e58 <col:63> 'int' 1
| | |-DeclStmt 0x56101f022008 <line:393:2, col:18>
| | | `-VarDecl 0x56101f021fa8 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x56101f022318 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x56101f022020 <col:2> 'atomic_val_t':'int' lvalue Var 0x56101f021fa8 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x56101f0222c8 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x56101f0222b0 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x56101f022048 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x56101f01f248 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x56101f022268 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x56101f022240 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x56101f022228 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x56101f022098 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x56101f022070 <line:395:30> 'atomic_t *' lvalue ParmVar 0x56101f021a98 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x56101f022208 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x56101f0221e0 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x56101f0221c8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x56101f0221b0 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x56101f0220e0 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x56101f0220b8 <line:395:38> 'int' lvalue ParmVar 0x56101f021b10 'bit' 'int'
| | |   |       `-ParenExpr 0x56101f022190 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x56101f022168 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x56101f022110 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x56101f022150 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x56101f022130 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x56101f022300 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x56101f022288 <col:44> 'atomic_val_t':'int' lvalue Var 0x56101f021c60 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x56101f022468 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x56101f022450 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x56101f022428 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x56101f0223e8 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x56101f0223c0 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x56101f022390 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x56101f022340 <col:10> 'atomic_val_t':'int' lvalue Var 0x56101f021fa8 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x56101f0223a8 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x56101f022368 <col:16> 'atomic_val_t':'int' lvalue Var 0x56101f021c60 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x56101f022408 <col:25> 'int' 0
| `-FullComment 0x56101f1abf10 <line:380:3, line:388:55>
|   |-ParagraphComment 0x56101f1aba20 <line:380:3>
|   | `-TextComment 0x56101f1ab9f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1aba40 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x56101f1abaa0 <col:10, col:31>
|   |   `-TextComment 0x56101f1aba70 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x56101f1abc10 <line:382:3, line:383:66>
|   | |-TextComment 0x56101f1abac0 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x56101f1abb10 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x56101f1abb30 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x56101f1abb80 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x56101f1abba0 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x56101f1abbc0 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x56101f1abc60 <line:385:3>
|   | `-TextComment 0x56101f1abc30 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1abc80 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x56101f1abd30 <line:385:17, line:386:3>
|   |   |-TextComment 0x56101f1abce0 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x56101f1abd00 <line:386:3> Text=" "
|   |-ParamCommandComment 0x56101f1abd50 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x56101f1abde0 <col:14, col:43>
|   |   `-TextComment 0x56101f1abdb0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x56101f1abe30 <line:388:3>
|   | `-TextComment 0x56101f1abe00 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1abe50 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x56101f1abeb0 <col:11, col:55>
|       `-TextComment 0x56101f1abe80 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x56101f0226a0 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x56101f0224e8 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x56101f022590 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x56101f022de8 <line:412:1, line:416:1>
| | |-DeclStmt 0x56101f022a80 <line:413:2, col:38>
| | | `-VarDecl 0x56101f022760 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x56101f022a60 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x56101f022a38 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x56101f0227c0 <col:27> 'int' 1
| | |       `-ParenExpr 0x56101f022a18 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x56101f0229f0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x56101f0229d8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x56101f022880 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x56101f022868 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x56101f022848 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x56101f0227e0 <line:413:34> 'int' lvalue ParmVar 0x56101f022590 'bit' 'int'
| | |           `-ParenExpr 0x56101f0229b8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x56101f022990 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x56101f022938 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x56101f022910 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x56101f0228b8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x56101f0228f8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x56101f0228d8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x56101f022978 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x56101f022958 <col:63> 'int' 1
| | `-CStyleCastExpr 0x56101f022d98 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x56101f022d50 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x56101f022d38 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f022a98 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x56101f01f628 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x56101f022cb8 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x56101f022c90 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x56101f022c78 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x56101f022ae8 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x56101f022ac0 <line:415:31> 'atomic_t *' lvalue ParmVar 0x56101f0224e8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x56101f022c58 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x56101f022c30 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x56101f022c18 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x56101f022c00 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x56101f022b30 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x56101f022b08 <line:415:39> 'int' lvalue ParmVar 0x56101f022590 'bit' 'int'
| |     |       `-ParenExpr 0x56101f022be0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x56101f022bb8 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x56101f022b60 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x56101f022ba0 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x56101f022b80 <col:45> 'int' 8
| |     `-UnaryOperator 0x56101f022d18 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~'
| |       `-ImplicitCastExpr 0x56101f022d00 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f022cd8 <col:46> 'atomic_val_t':'int' lvalue Var 0x56101f022760 'mask' 'atomic_val_t':'int'
| `-FullComment 0x56101f1ac480 <line:401:3, line:409:14>
|   |-ParagraphComment 0x56101f1abfb0 <line:401:3>
|   | `-TextComment 0x56101f1abf80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1abfd0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x56101f1ac030 <col:10, col:33>
|   |   `-TextComment 0x56101f1ac000 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x56101f1ac180 <line:403:3, line:404:66>
|   | |-TextComment 0x56101f1ac050 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x56101f1ac0a0 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x56101f1ac0c0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x56101f1ac110 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x56101f1ac130 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x56101f1ac1d0 <line:406:3>
|   | `-TextComment 0x56101f1ac1a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ac1f0 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ac2a0 <line:406:17, line:407:3>
|   |   |-TextComment 0x56101f1ac250 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x56101f1ac270 <line:407:3> Text=" "
|   |-ParamCommandComment 0x56101f1ac2c0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ac350 <col:14, col:43>
|   |   `-TextComment 0x56101f1ac320 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x56101f1ac3a0 <line:409:3>
|   | `-TextComment 0x56101f1ac370 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ac3c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1ac420 <col:11, col:14>
|       `-TextComment 0x56101f1ac3f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f022f20 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x56101f022e18 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x56101f022e90 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x56101f023668 <line:430:1, line:434:1>
| | |-DeclStmt 0x56101f023300 <line:431:2, col:38>
| | | `-VarDecl 0x56101f022fe0 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x56101f0232e0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x56101f0232b8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x56101f023040 <col:27> 'int' 1
| | |       `-ParenExpr 0x56101f023298 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x56101f023270 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x56101f023258 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x56101f023100 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x56101f0230e8 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x56101f0230c8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x56101f023060 <line:431:34> 'int' lvalue ParmVar 0x56101f022e90 'bit' 'int'
| | |           `-ParenExpr 0x56101f023238 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x56101f023210 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x56101f0231b8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x56101f023190 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x56101f023138 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x56101f023178 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x56101f023158 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x56101f0231f8 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x56101f0231d8 <col:63> 'int' 1
| | `-CStyleCastExpr 0x56101f023618 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x56101f0235b8 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x56101f0235a0 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f023318 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x56101f01f248 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x56101f023538 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x56101f023510 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x56101f0234f8 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x56101f023368 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x56101f023340 <line:433:30> 'atomic_t *' lvalue ParmVar 0x56101f022e18 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x56101f0234d8 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x56101f0234b0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x56101f023498 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x56101f023480 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x56101f0233b0 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x56101f023388 <line:433:38> 'int' lvalue ParmVar 0x56101f022e90 'bit' 'int'
| |     |       `-ParenExpr 0x56101f023460 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x56101f023438 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x56101f0233e0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x56101f023420 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x56101f023400 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x56101f0235f0 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x56101f023558 <col:44> 'atomic_val_t':'int' lvalue Var 0x56101f022fe0 'mask' 'atomic_val_t':'int'
| `-FullComment 0x56101f1ac9f0 <line:419:3, line:427:14>
|   |-ParagraphComment 0x56101f1ac520 <line:419:3>
|   | `-TextComment 0x56101f1ac4f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ac540 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x56101f1ac5a0 <col:10, col:31>
|   |   `-TextComment 0x56101f1ac570 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x56101f1ac6f0 <line:421:3, line:422:66>
|   | |-TextComment 0x56101f1ac5c0 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x56101f1ac610 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x56101f1ac630 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x56101f1ac680 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x56101f1ac6a0 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x56101f1ac740 <line:424:3>
|   | `-TextComment 0x56101f1ac710 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ac760 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ac810 <line:424:17, line:425:3>
|   |   |-TextComment 0x56101f1ac7c0 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x56101f1ac7e0 <line:425:3> Text=" "
|   |-ParamCommandComment 0x56101f1ac830 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ac8c0 <col:14, col:43>
|   |   `-TextComment 0x56101f1ac890 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x56101f1ac910 <line:427:3>
|   | `-TextComment 0x56101f1ac8e0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ac930 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1ac990 <col:11, col:14>
|       `-TextComment 0x56101f1ac960 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f0238b0 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x56101f023698 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x56101f023710 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x56101f023780 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x56101f024448 <line:449:1, line:457:1>
| | |-DeclStmt 0x56101f023c98 <line:450:2, col:38>
| | | `-VarDecl 0x56101f023978 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x56101f023c78 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x56101f023c50 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x56101f0239d8 <col:27> 'int' 1
| | |       `-ParenExpr 0x56101f023c30 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x56101f023c08 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x56101f023bf0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x56101f023a98 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x56101f023a80 <col:40, col:44> 'int' <LValueToRValue>
| | |           |     `-ParenExpr 0x56101f023a60 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x56101f0239f8 <line:450:34> 'int' lvalue ParmVar 0x56101f023710 'bit' 'int'
| | |           `-ParenExpr 0x56101f023bd0 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x56101f023ba8 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x56101f023b50 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x56101f023b28 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x56101f023ad0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x56101f023b10 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x56101f023af0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x56101f023b90 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x56101f023b70 <col:63> 'int' 1
| | `-IfStmt 0x56101f024350 <line:452:2, line:456:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x56101f023cd8 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x56101f023cb0 <col:6> 'bool' lvalue ParmVar 0x56101f023780 'val' 'bool'
| |   |-CompoundStmt 0x56101f023ff8 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x56101f023fd0 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x56101f023f70 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x56101f023f58 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x56101f023cf0 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x56101f01f248 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x56101f023f10 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x56101f023ee8 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x56101f023ed0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x56101f023d40 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x56101f023d18 <line:453:31> 'atomic_t *' lvalue ParmVar 0x56101f023698 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x56101f023eb0 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x56101f023e88 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x56101f023e70 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x56101f023e58 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x56101f023d88 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x56101f023d60 <line:453:39> 'int' lvalue ParmVar 0x56101f023710 'bit' 'int'
| |   |     |       `-ParenExpr 0x56101f023e38 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x56101f023e10 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x56101f023db8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x56101f023df8 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x56101f023dd8 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x56101f023fa8 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x56101f023f30 <col:45> 'atomic_val_t':'int' lvalue Var 0x56101f023978 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x56101f024338 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x56101f024310 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x56101f0242c8 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x56101f0242b0 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x56101f024010 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x56101f01f628 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x56101f024230 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x56101f024208 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x56101f0241f0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x56101f024060 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x56101f024038 <line:455:32> 'atomic_t *' lvalue ParmVar 0x56101f023698 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x56101f0241d0 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x56101f0241a8 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x56101f024190 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x56101f024178 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x56101f0240a8 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x56101f024080 <line:455:40> 'int' lvalue ParmVar 0x56101f023710 'bit' 'int'
| |         |       `-ParenExpr 0x56101f024158 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x56101f024130 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x56101f0240d8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x56101f024118 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x56101f0240f8 <col:45> 'int' 8
| |         `-UnaryOperator 0x56101f024290 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~'
| |           `-ImplicitCastExpr 0x56101f024278 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x56101f024250 <col:47> 'atomic_val_t':'int' lvalue Var 0x56101f023978 'mask' 'atomic_val_t':'int'
| `-FullComment 0x56101f1ad0d0 <line:437:3, line:446:14>
|   |-ParagraphComment 0x56101f1aca90 <line:437:3>
|   | `-TextComment 0x56101f1aca60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1acab0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x56101f1acb10 <col:10, col:48>
|   |   `-TextComment 0x56101f1acae0 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x56101f1acce0 <line:439:3, line:440:66>
|   | |-TextComment 0x56101f1acb30 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x56101f1acb80 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x56101f1acba0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x56101f1acbf0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x56101f1acc10 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x56101f1acc60 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x56101f1acc80 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x56101f1acd30 <line:442:3>
|   | `-TextComment 0x56101f1acd00 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1acd50 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ace00 <line:442:17, line:443:3>
|   |   |-TextComment 0x56101f1acdb0 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x56101f1acdd0 <line:443:3> Text=" "
|   |-ParamCommandComment 0x56101f1ace20 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x56101f1aced0 <line:443:14, line:444:3>
|   |   |-TextComment 0x56101f1ace80 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x56101f1acea0 <line:444:3> Text=" "
|   |-ParamCommandComment 0x56101f1acef0 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x56101f1acf80 <col:14, col:38>
|   |   `-TextComment 0x56101f1acf50 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x56101f1acfe0 <line:446:3>
|   | `-TextComment 0x56101f1acfb0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ad000 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1ad060 <col:11, col:14>
|       `-TextComment 0x56101f1ad030 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f02d590 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x56101f024480 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x56101f02d8e8 <line:114:1, line:116:1>
|   `-ReturnStmt 0x56101f02d8d0 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x56101f02d8b8 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x56101f02d890 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x56101f02d6c0 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x56101f02d698 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x56101f02d680 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x56101f02d638 <col:10> 'unsigned int' lvalue ParmVar 0x56101f024480 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x56101f02d660 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x56101f02d870 <col:22, col:42> 'int'
|           `-BinaryOperator 0x56101f02d848 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x56101f02d808 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x56101f02d7e0 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x56101f02d7c8 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x56101f02d6e0 <col:24> 'unsigned int' lvalue ParmVar 0x56101f024480 'x' 'unsigned int'
|             |   `-ParenExpr 0x56101f02d7a8 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x56101f02d780 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x56101f02d750 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x56101f02d708 <col:29> 'unsigned int' lvalue ParmVar 0x56101f024480 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x56101f02d768 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x56101f02d730 <col:33> 'int' 1
|             `-IntegerLiteral 0x56101f02d828 <col:40> 'unsigned int' 0
|-FunctionDecl 0x56101f02dad0 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x56101f02d930 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x56101f02d9c0 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x56101f02e1e8 <line:119:1, line:134:1>
|   |-DeclStmt 0x56101f02dbf0 <line:120:2, col:16>
|   | `-VarDecl 0x56101f02db90 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x56101f02dd18 <line:122:2, line:124:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f02dc80 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x56101f02dc68 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x56101f02dc50 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x56101f02dc08 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x56101f02d9c0 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x56101f02dc30 <col:15> 'unsigned int' 0
|   | |-CompoundStmt 0x56101f02dd00 <col:19, line:124:2>
|   | | `-ReturnStmt 0x56101f02dce8 <line:123:3, col:10>
|   | |   `-ImplicitCastExpr 0x56101f02dcd0 <col:10> 's64_t':'long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x56101f02dca8 <col:10> 's64_t':'long long' lvalue ParmVar 0x56101f02d930 'value' 's64_t':'long long'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x56101f02de80 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x56101f02dd50 <col:2> 's64_t':'long long' lvalue Var 0x56101f02db90 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x56101f02de58 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x56101f02de00 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x56101f02ddd8 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x56101f02ddc0 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x56101f02dd78 <col:14> 's64_t':'long long' lvalue ParmVar 0x56101f02d930 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x56101f02dda0 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x56101f02de40 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x56101f02de20 <col:29> 'int' 1
|   |-BinaryOperator 0x56101f02df30 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x56101f02dea8 <col:2> 's64_t':'long long' lvalue Var 0x56101f02db90 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x56101f02df10 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x56101f02def8 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f02ded0 <col:14> 's64_t':'long long' lvalue Var 0x56101f02db90 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x56101f02e1a8 <line:133:2, col:53>
|     `-BinaryOperator 0x56101f02e180 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x56101f02e018 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x56101f02dff0 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x56101f02dfa8 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x56101f02df58 <col:10> 's64_t':'long long' lvalue ParmVar 0x56101f02d930 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x56101f02dfd8 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x56101f02dfc0 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x56101f02df80 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x56101f02d9c0 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x56101f02e160 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x56101f02e138 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x56101f02e120 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x56101f02e038 <col:29> 's64_t':'long long' lvalue Var 0x56101f02db90 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x56101f02e100 <col:41, col:52> 'int'
|             `-BinaryOperator 0x56101f02e0d8 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x56101f02e060 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x56101f02e0c0 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x56101f02e0a8 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x56101f02e080 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x56101f02d9c0 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x56101f02e418 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x56101f02e230 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x56101f02e2f8 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x56101f1ad4f0 <line:137:3, line:142:63>
|   |-ParagraphComment 0x56101f1ad170 <line:137:3>
|   | `-TextComment 0x56101f1ad140 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ad190 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x56101f1ad1f0 <col:10, col:68>
|   |   `-TextComment 0x56101f1ad1c0 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x56101f1ad240 <line:139:3>
|   | `-TextComment 0x56101f1ad210 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ad260 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ad310 <line:139:17, line:140:3>
|   |   |-TextComment 0x56101f1ad2c0 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x56101f1ad2e0 <line:140:3> Text=" "
|   |-ParamCommandComment 0x56101f1ad330 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ad3c0 <col:17, col:69>
|   |   `-TextComment 0x56101f1ad390 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x56101f1ad410 <line:142:3, col:4>
|   | `-TextComment 0x56101f1ad3e0 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x56101f1ad430 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x56101f1ad490 <col:12, col:63>
|       `-TextComment 0x56101f1ad460 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x56101f02e6b8 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x56101f02e508 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x56101f02e5a0 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x56101f1ad910 <line:147:3, line:152:63>
|   |-ParagraphComment 0x56101f1ad590 <line:147:3>
|   | `-TextComment 0x56101f1ad560 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ad5b0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x56101f1ad610 <col:10, col:68>
|   |   `-TextComment 0x56101f1ad5e0 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x56101f1ad660 <line:149:3>
|   | `-TextComment 0x56101f1ad630 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ad680 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ad730 <line:149:17, line:150:3>
|   |   |-TextComment 0x56101f1ad6e0 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x56101f1ad700 <line:150:3> Text=" "
|   |-ParamCommandComment 0x56101f1ad750 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ad7e0 <col:17, col:72>
|   |   `-TextComment 0x56101f1ad7b0 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x56101f1ad830 <line:152:3, col:4>
|   | `-TextComment 0x56101f1ad800 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x56101f1ad850 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x56101f1ad8b0 <col:12, col:63>
|       `-TextComment 0x56101f1ad880 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x56101f02eac0 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x56101f02e828 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x56101f02e898 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f02e910 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x56101f02e980 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x56101f1adee0 <line:157:3, line:164:77>
|   |-ParagraphComment 0x56101f1ad9b0 <line:157:3>
|   | `-TextComment 0x56101f1ad980 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ad9d0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x56101f1ada30 <col:10, col:65>
|   |   `-TextComment 0x56101f1ada00 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x56101f1ada80 <line:159:3>
|   | `-TextComment 0x56101f1ada50 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1adaa0 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x56101f1adb50 <line:159:19, line:160:3>
|   |   |-TextComment 0x56101f1adb00 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x56101f1adb20 <line:160:3> Text=" "
|   |-ParamCommandComment 0x56101f1adb70 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x56101f1adc20 <line:160:22, line:161:3>
|   |   |-TextComment 0x56101f1adbd0 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x56101f1adbf0 <line:161:3> Text=" "
|   |-ParamCommandComment 0x56101f1adc40 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x56101f1adcf0 <line:161:19, line:162:3>
|   |   |-TextComment 0x56101f1adca0 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x56101f1adcc0 <line:162:3> Text=" "
|   |-ParamCommandComment 0x56101f1add10 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x56101f1adda0 <col:22, col:74>
|   |   `-TextComment 0x56101f1add70 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x56101f1addf0 <line:164:3>
|   | `-TextComment 0x56101f1addc0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ade10 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x56101f1ade70 <col:11, col:77>
|       `-TextComment 0x56101f1ade40 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x56101f02ee50 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x56101f02ebc0 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x56101f02ec30 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f02eca0 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x56101f02ed10 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x56101f1ae4b0 <line:175:3, line:182:74>
|   |-ParagraphComment 0x56101f1adf80 <line:175:3>
|   | `-TextComment 0x56101f1adf50 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1adfa0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x56101f1ae000 <col:10, col:64>
|   |   `-TextComment 0x56101f1adfd0 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x56101f1ae050 <line:177:3>
|   | `-TextComment 0x56101f1ae020 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ae070 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ae120 <line:177:19, line:178:3>
|   |   |-TextComment 0x56101f1ae0d0 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x56101f1ae0f0 <line:178:3> Text=" "
|   |-ParamCommandComment 0x56101f1ae140 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ae1f0 <line:178:22, line:179:3>
|   |   |-TextComment 0x56101f1ae1a0 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x56101f1ae1c0 <line:179:3> Text=" "
|   |-ParamCommandComment 0x56101f1ae210 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x56101f1ae2c0 <line:179:19, line:180:3>
|   |   |-TextComment 0x56101f1ae270 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x56101f1ae290 <line:180:3> Text=" "
|   |-ParamCommandComment 0x56101f1ae2e0 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x56101f1ae370 <col:22, col:63>
|   |   `-TextComment 0x56101f1ae340 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x56101f1ae3c0 <line:182:3>
|   | `-TextComment 0x56101f1ae390 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ae3e0 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x56101f1ae440 <col:11, col:74>
|       `-TextComment 0x56101f1ae410 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x56101f02f160 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x56101f02ef50 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x56101f02efc0 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x56101f02f030 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x56101f1aea40 <line:187:3, line:197:47>
|   |-ParagraphComment 0x56101f1ae550 <line:187:3>
|   | `-TextComment 0x56101f1ae520 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ae570 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x56101f1ae5d0 <col:10, col:65>
|   |   `-TextComment 0x56101f1ae5a0 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x56101f1ae640 <line:189:3, line:190:60>
|   | |-TextComment 0x56101f1ae5f0 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x56101f1ae610 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x56101f1ae690 <line:192:3>
|   | `-TextComment 0x56101f1ae660 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ae6b0 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ae760 <line:192:19, line:193:3>
|   |   |-TextComment 0x56101f1ae710 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x56101f1ae730 <line:193:3> Text=" "
|   |-ParamCommandComment 0x56101f1ae780 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ae830 <line:193:22, line:194:3>
|   |   |-TextComment 0x56101f1ae7e0 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x56101f1ae800 <line:194:3> Text=" "
|   |-ParamCommandComment 0x56101f1ae850 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x56101f1ae8e0 <col:21, col:61>
|   |   `-TextComment 0x56101f1ae8b0 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x56101f1ae930 <line:196:3>
|   | `-TextComment 0x56101f1ae900 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ae950 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x56101f1ae9d0 <line:196:11, line:197:47>
|       |-TextComment 0x56101f1ae980 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x56101f1ae9a0 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x56101f02f518 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x56101f063d90 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x56101f063ef0 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x56101f063f60 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x56101f064000 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x56101f064058 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x56101f064000 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x56101f063ef0 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x56101f0640a8 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x56101f064000 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x56101f063f60 'next' 'struct _dnode *'
| |-RecordDecl 0x56101f0640e8 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x56101f0641b8 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x56101f064228 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x56101f0642c0 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x56101f064318 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x56101f0642c0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x56101f0641b8 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x56101f064368 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x56101f0642c0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x56101f064228 'prev' 'struct _dnode *'
|-TypedefDecl 0x56101f064418 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x56101f063e40 'struct _dnode' sugar
|   `-RecordType 0x56101f063d70 'struct _dnode'
|     `-Record 0x56101f02f518 '_dnode'
|-TypedefDecl 0x56101f064490 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x56101f063e40 'struct _dnode' sugar
|   `-RecordType 0x56101f063d70 'struct _dnode'
|     `-Record 0x56101f02f518 '_dnode'
|-FunctionDecl 0x56101f064770 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x56101f064668 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x56101f064b68 <line:193:1, line:196:1>
| | |-BinaryOperator 0x56101f0649a8 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f0648a8 <col:2, col:8> 'struct _dnode *' lvalue .head 0x56101f063ef0
| | | | `-MemberExpr 0x56101f064858 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |   `-ImplicitCastExpr 0x56101f064840 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f064818 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x56101f064668 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x56101f064980 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x56101f064968 <col:30> 'sys_dlist_t *' <LValueToRValue>
| | |     `-DeclRefExpr 0x56101f064900 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x56101f064668 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x56101f064b10 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x56101f064a60 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x56101f0641b8
| |   | `-MemberExpr 0x56101f064a10 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| |   |   `-ImplicitCastExpr 0x56101f0649f8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x56101f0649d0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x56101f064668 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x56101f064ae8 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x56101f064ad0 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x56101f064a98 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x56101f064668 'list' 'sys_dlist_t *'
| `-FullComment 0x56101f1aed80 <line:185:3, line:189:14>
|   |-ParagraphComment 0x56101f1aeae0 <line:185:3>
|   | `-TextComment 0x56101f1aeab0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1aeb00 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1aeb60 <col:10, col:44>
|   |   `-TextComment 0x56101f1aeb30 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x56101f1aebb0 <line:187:3>
|   | `-TextComment 0x56101f1aeb80 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1aebd0 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1aec60 <col:15, col:37>
|   |   `-TextComment 0x56101f1aec30 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x56101f1aecb0 <line:189:3>
|   | `-TextComment 0x56101f1aec80 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1aecd0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1aed30 <col:11, col:14>
|       `-TextComment 0x56101f1aed00 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f064c60 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f064b98 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f068678 <line:209:1, line:212:1>
| | |-BinaryOperator 0x56101f0684a0 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f0683d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x56101f063f60
| | | | `-MemberExpr 0x56101f068380 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |   `-ImplicitCastExpr 0x56101f064d30 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f064d08 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f064b98 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f068488 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x56101f068468 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x56101f068440 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x56101f068408 <col:23> 'int' 0
| | `-BinaryOperator 0x56101f068628 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x56101f068558 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x56101f064228
| |   | `-MemberExpr 0x56101f068508 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| |   |   `-ImplicitCastExpr 0x56101f0684f0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x56101f0684c8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f064b98 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x56101f068610 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x56101f0685f0 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x56101f0685c8 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x56101f068590 <col:23> 'int' 0
| `-FullComment 0x56101f1b2120 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x56101f1aee20 <line:201:3>
|   | `-TextComment 0x56101f1aedf0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1aee40 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x56101f1aeea0 <col:10, col:57>
|   |   `-TextComment 0x56101f1aee70 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x56101f1aeef0 <line:203:3>
|   | `-TextComment 0x56101f1aeec0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1aef10 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b2000 <col:15, col:23>
|   |   `-TextComment 0x56101f1aef70 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x56101f1b2050 <line:205:3>
|   | `-TextComment 0x56101f1b2020 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b2070 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1b20d0 <col:11, col:14>
|       `-TextComment 0x56101f1b20a0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f068810 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f068708 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x56101f068ab8 <line:223:1, line:225:1>
| | `-ReturnStmt 0x56101f068a70 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x56101f068a58 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x56101f068a30 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x56101f068a00 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x56101f068948 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x56101f063f60
| |       |   `-MemberExpr 0x56101f0688f8 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| |       |     `-ImplicitCastExpr 0x56101f0688e0 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x56101f0688b8 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x56101f068708 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x56101f068a18 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x56101f0689e0 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x56101f0689b8 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x56101f068980 <col:23> 'int' 0
| `-FullComment 0x56101f1b2460 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x56101f1b21c0 <line:215:3>
|   | `-TextComment 0x56101f1b2190 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b21e0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1b2240 <col:10, col:49>
|   |   `-TextComment 0x56101f1b2210 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x56101f1b2290 <line:217:3>
|   | `-TextComment 0x56101f1b2260 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b22b0 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b2340 <col:15, col:23>
|   |   `-TextComment 0x56101f1b2310 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x56101f1b2390 <line:219:3>
|   | `-TextComment 0x56101f1b2360 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b23b0 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x56101f1b2410 <col:11, col:65>
|       `-TextComment 0x56101f1b23e0 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x56101f068c60 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f068ae0 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f068b50 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f068eb8 <line:237:1, line:239:1>
| | `-ReturnStmt 0x56101f068e70 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x56101f068e58 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x56101f068e30 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x56101f068e00 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x56101f068da0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x56101f063ef0
| |       |   `-MemberExpr 0x56101f068d50 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| |       |     `-ImplicitCastExpr 0x56101f068d38 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x56101f068d10 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x56101f068ae0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x56101f068e18 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f068dd8 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x56101f068b50 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b2880 <line:228:3, line:233:52>
|   |-ParagraphComment 0x56101f1b2500 <line:228:3>
|   | `-TextComment 0x56101f1b24d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b2520 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1b2580 <col:10, col:44>
|   |   `-TextComment 0x56101f1b2550 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x56101f1b25d0 <line:230:3>
|   | `-TextComment 0x56101f1b25a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b25f0 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b26a0 <line:230:15, line:231:3>
|   |   |-TextComment 0x56101f1b2650 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x56101f1b2670 <line:231:3> Text=" "
|   |-ParamCommandComment 0x56101f1b26c0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b2750 <col:15, col:32>
|   |   `-TextComment 0x56101f1b2720 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x56101f1b27a0 <line:233:3>
|   | `-TextComment 0x56101f1b2770 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b27c0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x56101f1b2820 <col:11, col:52>
|       `-TextComment 0x56101f1b27f0 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x56101f068fe0 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f068ee0 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f068f50 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f069238 <line:251:1, line:253:1>
| | `-ReturnStmt 0x56101f0691f0 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x56101f0691d8 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x56101f0691b0 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x56101f069180 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x56101f069120 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x56101f0641b8
| |       |   `-MemberExpr 0x56101f0690d0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| |       |     `-ImplicitCastExpr 0x56101f0690b8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x56101f069090 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x56101f068ee0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x56101f069198 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f069158 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x56101f068f50 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b2ca0 <line:242:3, line:247:52>
|   |-ParagraphComment 0x56101f1b2920 <line:242:3>
|   | `-TextComment 0x56101f1b28f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b2940 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1b29a0 <col:10, col:44>
|   |   `-TextComment 0x56101f1b2970 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x56101f1b29f0 <line:244:3>
|   | `-TextComment 0x56101f1b29c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b2a10 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b2ac0 <line:244:15, line:245:3>
|   |   |-TextComment 0x56101f1b2a70 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x56101f1b2a90 <line:245:3> Text=" "
|   |-ParamCommandComment 0x56101f1b2ae0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b2b70 <col:15, col:32>
|   |   `-TextComment 0x56101f1b2b40 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x56101f1b2bc0 <line:247:3>
|   | `-TextComment 0x56101f1b2b90 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b2be0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x56101f1b2c40 <col:11, col:52>
|       `-TextComment 0x56101f1b2c10 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x56101f0697a0 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x56101f069260 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x56101f0699e8 <line:264:1, line:266:1>
| | `-ReturnStmt 0x56101f0699a8 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x56101f069990 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x56101f069968 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x56101f069938 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x56101f0698d8 <col:9, col:15> 'struct _dnode *' lvalue .head 0x56101f063ef0
| |       |   `-MemberExpr 0x56101f069888 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| |       |     `-ImplicitCastExpr 0x56101f069870 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x56101f069848 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x56101f069260 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x56101f069950 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f069910 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x56101f069260 'list' 'sys_dlist_t *'
| `-FullComment 0x56101f1b2fe0 <line:256:3, line:260:41>
|   |-ParagraphComment 0x56101f1b2d40 <line:256:3>
|   | `-TextComment 0x56101f1b2d10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b2d60 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x56101f1b2dc0 <col:10, col:36>
|   |   `-TextComment 0x56101f1b2d90 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x56101f1b2e10 <line:258:3>
|   | `-TextComment 0x56101f1b2de0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b2e30 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b2ec0 <col:15, col:51>
|   |   `-TextComment 0x56101f1b2e90 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x56101f1b2f10 <line:260:3>
|   | `-TextComment 0x56101f1b2ee0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b2f30 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x56101f1b2f90 <col:11, col:41>
|       `-TextComment 0x56101f1b2f60 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x56101f069a98 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x56101f069a10 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x56101f069d88 <line:279:1, line:281:1>
| | `-ReturnStmt 0x56101f069d40 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x56101f069d28 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x56101f069d00 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x56101f069cd0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x56101f069bd0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x56101f063ef0
| |       |   `-MemberExpr 0x56101f069b80 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| |       |     `-ImplicitCastExpr 0x56101f069b68 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x56101f069b40 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x56101f069a10 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x56101f069ce8 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x56101f069c98 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x56101f0641b8
| |           `-MemberExpr 0x56101f069c48 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| |             `-ImplicitCastExpr 0x56101f069c30 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x56101f069c08 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x56101f069a10 'list' 'sys_dlist_t *'
| `-FullComment 0x56101f1b3380 <line:269:3, line:275:50>
|   |-ParagraphComment 0x56101f1b3080 <line:269:3>
|   | `-TextComment 0x56101f1b3050 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b30a0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x56101f1b3100 <col:10, col:45>
|   |   `-TextComment 0x56101f1b30d0 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x56101f1b3150 <line:271:3, col:62>
|   | `-TextComment 0x56101f1b3120 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b31a0 <line:273:3>
|   | `-TextComment 0x56101f1b3170 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b31c0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b3250 <col:15, col:51>
|   |   `-TextComment 0x56101f1b3220 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x56101f1b32a0 <line:275:3>
|   | `-TextComment 0x56101f1b3270 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b32c0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x56101f1b3320 <col:11, col:50>
|       `-TextComment 0x56101f1b32f0 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x56101f069eb0 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x56101f069db0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x56101f06a268 <line:292:1, line:294:1>
| | `-ReturnStmt 0x56101f06a228 <line:293:2, col:49>
| |   `-ConditionalOperator 0x56101f06a1f8 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x56101f06a1b0 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x56101f06a020 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x56101f06a008 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x56101f069f58 <col:9> 'bool (sys_dlist_t *)' Function 0x56101f0697a0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x56101f06a050 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x56101f069f80 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x56101f069db0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x56101f06a1e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x56101f06a0c8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x56101f06a0a0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x56101f06a068 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x56101f06a1c8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x56101f06a178 <col:43, col:49> 'struct _dnode *' lvalue .head 0x56101f063ef0
| |         `-MemberExpr 0x56101f06a128 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| |           `-ImplicitCastExpr 0x56101f06a110 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x56101f06a0e8 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x56101f069db0 'list' 'sys_dlist_t *'
| `-FullComment 0x56101f1b36c0 <line:284:3, line:288:63>
|   |-ParagraphComment 0x56101f1b3420 <line:284:3>
|   | `-TextComment 0x56101f1b33f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b3440 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x56101f1b34a0 <col:10, col:54>
|   |   `-TextComment 0x56101f1b3470 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x56101f1b34f0 <line:286:3>
|   | `-TextComment 0x56101f1b34c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b3510 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b35a0 <col:15, col:51>
|   |   `-TextComment 0x56101f1b3570 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x56101f1b35f0 <line:288:3>
|   | `-TextComment 0x56101f1b35c0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b3610 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x56101f1b3670 <col:11, col:63>
|       `-TextComment 0x56101f1b3640 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x56101f06a318 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x56101f06a290 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x56101f06a4e8 <line:307:1, line:309:1>
| | `-ReturnStmt 0x56101f06a4a0 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x56101f06a488 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x56101f06a450 <col:9, col:15> 'struct _dnode *' lvalue .head 0x56101f063ef0
| |       `-MemberExpr 0x56101f06a400 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| |         `-ImplicitCastExpr 0x56101f06a3e8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x56101f06a3c0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x56101f06a290 'list' 'sys_dlist_t *'
| `-FullComment 0x56101f1b3a60 <line:297:3, line:303:40>
|   |-ParagraphComment 0x56101f1b3760 <line:297:3>
|   | `-TextComment 0x56101f1b3730 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b3780 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x56101f1b37e0 <col:10, col:54>
|   |   `-TextComment 0x56101f1b37b0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x56101f1b3830 <line:299:3, col:42>
|   | `-TextComment 0x56101f1b3800 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x56101f1b3880 <line:301:3>
|   | `-TextComment 0x56101f1b3850 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b38a0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b3930 <col:15, col:51>
|   |   `-TextComment 0x56101f1b3900 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x56101f1b3980 <line:303:3>
|   | `-TextComment 0x56101f1b3950 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b39a0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x56101f1b3a00 <col:11, col:40>
|       `-TextComment 0x56101f1b39d0 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x56101f06a690 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f06a510 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f06a580 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f06aab8 <line:324:1, line:326:1>
| | `-ReturnStmt 0x56101f06aa70 <line:325:2, col:45>
| |   `-ConditionalOperator 0x56101f06aa40 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x56101f06a8a8 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x56101f06a880 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x56101f06a850 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x56101f06a740 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x56101f06a580 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x56101f06a868 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x56101f06a818 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x56101f0641b8
| |     |       `-MemberExpr 0x56101f06a7c8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| |     |         `-ImplicitCastExpr 0x56101f06a7b0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x56101f06a768 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x56101f06a510 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x56101f06aa28 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x56101f06a928 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x56101f06a900 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x56101f06a8c8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x56101f06aa10 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x56101f06a9d8 <col:39, col:45> 'struct _dnode *' lvalue .next 0x56101f063f60
| |         `-MemberExpr 0x56101f06a988 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| |           `-ImplicitCastExpr 0x56101f06a970 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x56101f06a948 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x56101f06a580 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b3ed0 <line:312:3, line:319:78>
|   |-ParagraphComment 0x56101f1b3b00 <line:312:3>
|   | `-TextComment 0x56101f1b3ad0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b3b20 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x56101f1b3b80 <col:10, col:72>
|   |   `-TextComment 0x56101f1b3b50 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x56101f1b3bd0 <line:314:3, col:69>
|   | `-TextComment 0x56101f1b3ba0 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x56101f1b3c20 <line:316:3>
|   | `-TextComment 0x56101f1b3bf0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b3c40 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b3cf0 <line:316:15, line:317:3>
|   |   |-TextComment 0x56101f1b3ca0 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x56101f1b3cc0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x56101f1b3d10 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b3da0 <col:15, col:70>
|   |   `-TextComment 0x56101f1b3d70 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x56101f1b3df0 <line:319:3>
|   | `-TextComment 0x56101f1b3dc0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b3e10 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x56101f1b3e70 <col:11, col:78>
|       `-TextComment 0x56101f1b3e40 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x56101f06abe0 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f06aae0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f06ab50 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f06b018 <line:340:1, line:342:1>
| | `-ReturnStmt 0x56101f06afd0 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x56101f06afa0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x56101f06ad90 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x56101f06ad68 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x56101f06ad38 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x56101f06ac90 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x56101f06ab50 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x56101f06ad50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x56101f06ad18 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x56101f06acf0 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x56101f06acb8 <col:23> 'int' 0
| |     |-CallExpr 0x56101f06aea0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x56101f06ae88 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x56101f06adb0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x56101f06a690 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x56101f06aed8 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x56101f06add8 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x56101f06aae0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x56101f06aef0 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x56101f06ae00 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x56101f06ab50 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x56101f06af88 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x56101f06af68 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x56101f06af40 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x56101f06af08 <col:23> 'int' 0
| `-FullComment 0x56101f1b4330 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x56101f1b3f70 <line:329:3>
|   | `-TextComment 0x56101f1b3f40 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b3f90 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x56101f1b4010 <col:10, col:54>
|   |   `-TextComment 0x56101f1b3fc0 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x56101f1b4060 <line:331:3>
|   | `-TextComment 0x56101f1b4030 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b4080 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b4130 <line:331:15, line:332:3>
|   |   |-TextComment 0x56101f1b40e0 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x56101f1b4100 <line:332:3> Text=" "
|   |-ParamCommandComment 0x56101f1b4150 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b41e0 <col:15, col:70>
|   |   `-TextComment 0x56101f1b41b0 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x56101f1b4230 <line:334:3>
|   | `-TextComment 0x56101f1b4200 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b4250 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x56101f1b42d0 <line:334:11, line:335:68>
|       |-TextComment 0x56101f1b4280 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x56101f1b42a0 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x56101f06b140 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f06b040 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f06b0b0 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f06b548 <line:358:1, line:360:1>
| | `-ReturnStmt 0x56101f06b500 <line:359:2, col:45>
| |   `-ConditionalOperator 0x56101f06b4d0 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x56101f06b338 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x56101f06b310 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x56101f06b2e0 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x56101f06b1f0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x56101f06b0b0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x56101f06b2f8 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x56101f06b2a8 <col:18, col:24> 'struct _dnode *' lvalue .head 0x56101f063ef0
| |     |       `-MemberExpr 0x56101f06b258 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| |     |         `-ImplicitCastExpr 0x56101f06b240 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x56101f06b218 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x56101f06b040 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x56101f06b4b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x56101f06b3b8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x56101f06b390 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x56101f06b358 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x56101f06b4a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x56101f06b468 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x56101f064228
| |         `-MemberExpr 0x56101f06b418 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| |           `-ImplicitCastExpr 0x56101f06b400 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x56101f06b3d8 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x56101f06b0b0 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b47c0 <line:345:3, line:353:10>
|   |-ParagraphComment 0x56101f1b43d0 <line:345:3>
|   | `-TextComment 0x56101f1b43a0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b43f0 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x56101f1b4450 <col:10, col:76>
|   |   `-TextComment 0x56101f1b4420 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x56101f1b44a0 <line:347:3, col:69>
|   | `-TextComment 0x56101f1b4470 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x56101f1b44f0 <line:349:3>
|   | `-TextComment 0x56101f1b44c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b4510 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b45c0 <line:349:15, line:350:3>
|   |   |-TextComment 0x56101f1b4570 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x56101f1b4590 <line:350:3> Text=" "
|   |-ParamCommandComment 0x56101f1b45e0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b4670 <col:15, col:74>
|   |   `-TextComment 0x56101f1b4640 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x56101f1b46c0 <line:352:3>
|   | `-TextComment 0x56101f1b4690 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b46e0 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x56101f1b4760 <line:352:11, line:353:10>
|       |-TextComment 0x56101f1b4710 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x56101f1b4730 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x56101f06b670 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f06b570 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f06b5e0 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f06d248 <line:375:1, line:377:1>
| | `-ReturnStmt 0x56101f06d208 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x56101f06d1d8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x56101f06d028 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x56101f06d000 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x56101f06cfd0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x56101f06b720 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x56101f06b5e0 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x56101f06cfe8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x56101f06cfb0 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x56101f06b780 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x56101f06b748 <col:23> 'int' 0
| |     |-CallExpr 0x56101f06d0d8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x56101f06d0c0 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x56101f06d048 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x56101f06b140 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x56101f06d110 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x56101f06d070 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x56101f06b570 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x56101f06d128 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x56101f06d098 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x56101f06b5e0 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x56101f06d1c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x56101f06d1a0 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x56101f06d178 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x56101f06d140 <col:23> 'int' 0
| `-FullComment 0x56101f1b4c30 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x56101f1b4860 <line:363:3>
|   | `-TextComment 0x56101f1b4830 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b4880 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x56101f1b48e0 <col:10, col:58>
|   |   `-TextComment 0x56101f1b48b0 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x56101f1b4930 <line:365:3>
|   | `-TextComment 0x56101f1b4900 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b4950 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b4a00 <line:365:15, line:366:3>
|   |   |-TextComment 0x56101f1b49b0 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x56101f1b49d0 <line:366:3> Text=" "
|   |-ParamCommandComment 0x56101f1b4a20 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b4ab0 <col:15, col:74>
|   |   `-TextComment 0x56101f1b4a80 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x56101f1b4b00 <line:368:3>
|   | `-TextComment 0x56101f1b4ad0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b4b20 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x56101f1b4bd0 <line:368:11, line:370:13>
|       |-TextComment 0x56101f1b4b50 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x56101f1b4b70 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x56101f1b4b90 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x56101f06d2f8 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x56101f06d270 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x56101f06d658 <line:388:1, line:390:1>
| | `-ReturnStmt 0x56101f06d610 <line:389:2, col:49>
| |   `-ConditionalOperator 0x56101f06d5e0 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x56101f06d598 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x56101f06d408 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x56101f06d3f0 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x56101f06d3a0 <col:9> 'bool (sys_dlist_t *)' Function 0x56101f0697a0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x56101f06d438 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x56101f06d3c8 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x56101f06d270 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x56101f06d5c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x56101f06d4b0 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x56101f06d488 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x56101f06d450 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x56101f06d5b0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x56101f06d560 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x56101f0641b8
| |         `-MemberExpr 0x56101f06d510 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| |           `-ImplicitCastExpr 0x56101f06d4f8 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x56101f06d4d0 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x56101f06d270 'list' 'sys_dlist_t *'
| `-FullComment 0x56101f1b4f70 <line:380:3, line:384:63>
|   |-ParagraphComment 0x56101f1b4cd0 <line:380:3>
|   | `-TextComment 0x56101f1b4ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b4cf0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x56101f1b4d50 <col:10, col:54>
|   |   `-TextComment 0x56101f1b4d20 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x56101f1b4da0 <line:382:3>
|   | `-TextComment 0x56101f1b4d70 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b4dc0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b4e50 <col:15, col:51>
|   |   `-TextComment 0x56101f1b4e20 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x56101f1b4ea0 <line:384:3>
|   | `-TextComment 0x56101f1b4e70 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b4ec0 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x56101f1b4f20 <col:11, col:63>
|       `-TextComment 0x56101f1b4ef0 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x56101f06d800 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f06d680 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f06d6f0 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f06ded8 <line:404:1, line:410:1>
| | |-BinaryOperator 0x56101f06d9b8 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f06d940 <col:2, col:8> 'struct _dnode *' lvalue .next 0x56101f063f60
| | | | `-MemberExpr 0x56101f06d8f0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |   `-ImplicitCastExpr 0x56101f06d8d8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f06d8b0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f06d6f0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f06d9a0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56101f06d978 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x56101f06d680 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x56101f06db88 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f06da70 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x56101f064228
| | | | `-MemberExpr 0x56101f06da20 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | | |   `-ImplicitCastExpr 0x56101f06da08 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f06d9e0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f06d6f0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f06db70 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x56101f06db38 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x56101f0641b8
| | |     `-MemberExpr 0x56101f06dae8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | |       `-ImplicitCastExpr 0x56101f06dad0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x56101f06daa8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x56101f06d680 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x56101f06dd58 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f06dce0 <col:2, col:14> 'struct _dnode *' lvalue .next 0x56101f063f60
| | | | `-MemberExpr 0x56101f06dc90 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |   `-ImplicitCastExpr 0x56101f06dc78 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x56101f06dc40 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x56101f0641b8
| | | |       `-MemberExpr 0x56101f06dbf0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | | |         `-ImplicitCastExpr 0x56101f06dbd8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x56101f06dbb0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x56101f06d680 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x56101f06dd40 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56101f06dd18 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x56101f06d6f0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x56101f06de88 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x56101f06de10 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x56101f0641b8
| |   | `-MemberExpr 0x56101f06ddc0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| |   |   `-ImplicitCastExpr 0x56101f06dda8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x56101f06dd80 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x56101f06d680 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x56101f06de70 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f06de48 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x56101f06d6f0 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b53e0 <line:393:3, line:400:14>
|   |-ParagraphComment 0x56101f1b5010 <line:393:3>
|   | `-TextComment 0x56101f1b4fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b5030 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x56101f1b5090 <col:10, col:34>
|   |   `-TextComment 0x56101f1b5060 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x56101f1b50e0 <line:395:3, col:62>
|   | `-TextComment 0x56101f1b50b0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b5130 <line:397:3>
|   | `-TextComment 0x56101f1b5100 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b5150 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b5200 <line:397:15, line:398:3>
|   |   |-TextComment 0x56101f1b51b0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x56101f1b51d0 <line:398:3> Text=" "
|   |-ParamCommandComment 0x56101f1b5220 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b52b0 <col:15, col:36>
|   |   `-TextComment 0x56101f1b5280 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x56101f1b5300 <line:400:3>
|   | `-TextComment 0x56101f1b52d0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b5320 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1b5380 <col:11, col:14>
|       `-TextComment 0x56101f1b5350 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f06e050 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f06df18 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f06dfc0 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f06e728 <line:424:1, line:430:1>
| | |-BinaryOperator 0x56101f06e2a8 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f06e190 <col:2, col:8> 'struct _dnode *' lvalue .next 0x56101f063f60
| | | | `-MemberExpr 0x56101f06e140 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |   `-ImplicitCastExpr 0x56101f06e128 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f06e100 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f06dfc0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f06e290 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x56101f06e258 <col:15, col:21> 'struct _dnode *' lvalue .head 0x56101f063ef0
| | |     `-MemberExpr 0x56101f06e208 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | |       `-ImplicitCastExpr 0x56101f06e1f0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x56101f06e1c8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x56101f06df18 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x56101f06e3d8 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f06e360 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x56101f064228
| | | | `-MemberExpr 0x56101f06e310 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | | |   `-ImplicitCastExpr 0x56101f06e2f8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f06e2d0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f06dfc0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f06e3c0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56101f06e398 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x56101f06df18 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x56101f06e5a8 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f06e530 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x56101f064228
| | | | `-MemberExpr 0x56101f06e4e0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | | |   `-ImplicitCastExpr 0x56101f06e4c8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x56101f06e490 <col:2, col:8> 'struct _dnode *' lvalue .head 0x56101f063ef0
| | | |       `-MemberExpr 0x56101f06e440 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |         `-ImplicitCastExpr 0x56101f06e428 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x56101f06e400 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x56101f06df18 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x56101f06e590 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56101f06e568 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x56101f06dfc0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x56101f06e6d8 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x56101f06e660 <col:2, col:8> 'struct _dnode *' lvalue .head 0x56101f063ef0
| |   | `-MemberExpr 0x56101f06e610 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| |   |   `-ImplicitCastExpr 0x56101f06e5f8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x56101f06e5d0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x56101f06df18 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x56101f06e6c0 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f06e698 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x56101f06dfc0 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b5850 <line:413:3, line:420:14>
|   |-ParagraphComment 0x56101f1b5480 <line:413:3>
|   | `-TextComment 0x56101f1b5450 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b54a0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x56101f1b5500 <col:10, col:34>
|   |   `-TextComment 0x56101f1b54d0 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x56101f1b5550 <line:415:3, col:62>
|   | `-TextComment 0x56101f1b5520 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b55a0 <line:417:3>
|   | `-TextComment 0x56101f1b5570 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b55c0 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b5670 <line:417:15, line:418:3>
|   |   |-TextComment 0x56101f1b5620 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x56101f1b5640 <line:418:3> Text=" "
|   |-ParamCommandComment 0x56101f1b5690 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b5720 <col:15, col:36>
|   |   `-TextComment 0x56101f1b56f0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x56101f1b5770 <line:420:3>
|   | `-TextComment 0x56101f1b5740 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b5790 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1b57f0 <col:11, col:14>
|       `-TextComment 0x56101f1b57c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f06e8b0 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f06e768 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x56101f06e7d8 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f06ef88 <line:441:1, line:446:1>
| | |-BinaryOperator 0x56101f06eb08 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f06e9f0 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x56101f064228
| | | | `-MemberExpr 0x56101f06e9a0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | | |   `-ImplicitCastExpr 0x56101f06e988 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f06e960 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f06e7d8 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f06eaf0 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x56101f06eab8 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x56101f064228
| | |     `-MemberExpr 0x56101f06ea68 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | |       `-ImplicitCastExpr 0x56101f06ea50 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x56101f06ea28 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x56101f06e768 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x56101f06ec38 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f06ebc0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x56101f063f60
| | | | `-MemberExpr 0x56101f06eb70 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |   `-ImplicitCastExpr 0x56101f06eb58 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f06eb30 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f06e7d8 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f06ec20 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56101f06ebf8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x56101f06e768 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x56101f06ee08 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f06ed90 <col:2, col:19> 'struct _dnode *' lvalue .next 0x56101f063f60
| | | | `-MemberExpr 0x56101f06ed40 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |   `-ImplicitCastExpr 0x56101f06ed28 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x56101f06ecf0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x56101f064228
| | | |       `-MemberExpr 0x56101f06eca0 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | | |         `-ImplicitCastExpr 0x56101f06ec88 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x56101f06ec60 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f06e768 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f06edf0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56101f06edc8 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x56101f06e7d8 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x56101f06ef38 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x56101f06eec0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x56101f064228
| |   | `-MemberExpr 0x56101f06ee70 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| |   |   `-ImplicitCastExpr 0x56101f06ee58 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x56101f06ee30 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f06e768 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x56101f06ef20 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f06eef8 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x56101f06e7d8 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b5be0 <line:433:3, line:438:36>
|   |-ParagraphComment 0x56101f1b58f0 <line:433:3>
|   | `-TextComment 0x56101f1b58c0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b5910 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x56101f1b5970 <col:10, col:35>
|   |   `-TextComment 0x56101f1b5940 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x56101f1b59c0 <line:435:3, col:52>
|   | `-TextComment 0x56101f1b5990 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x56101f1b5a10 <line:437:3>
|   | `-TextComment 0x56101f1b59e0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b5a30 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b5ae0 <line:437:20, line:438:3>
|   |   |-TextComment 0x56101f1b5a90 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x56101f1b5ab0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x56101f1b5b00 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x56101f1b5b90 <col:15, col:36>
|       `-TextComment 0x56101f1b5b60 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x56101f06f4b0 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x56101f06efe0 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f06f050 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x56101f06f2f0 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x56101f06f368 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x56101f075178 <line:467:1, line:482:1>
| | `-IfStmt 0x56101f075110 <line:468:2, line:481:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-CallExpr 0x56101f06f5d8 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x56101f06f5c0 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x56101f06f570 <col:6> 'bool (sys_dlist_t *)' Function 0x56101f0697a0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x56101f06f608 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56101f06f598 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x56101f06efe0 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x56101f06f778 <col:32, line:470:2>
| |   | `-CallExpr 0x56101f06f710 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x56101f06f6f8 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x56101f06f620 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x56101f06d800 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x56101f06f748 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x56101f06f648 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x56101f06efe0 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x56101f06f760 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x56101f06f670 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x56101f06f050 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x56101f0750e8 <line:470:9, line:481:2>
| |     |-DeclStmt 0x56101f06f908 <line:471:3, col:47>
| |     | `-VarDecl 0x56101f06f7a0 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x56101f06f8c0 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x56101f06f8a8 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x56101f06f800 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x56101f069eb0 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x56101f06f8f0 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x56101f06f828 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x56101f06efe0 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x56101f06fd28 <line:473:3, line:475:3>
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x56101f06fba0 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x56101f06fa20 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x56101f06f9f8 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x56101f06f9c8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x56101f06f920 <col:11> 'sys_dnode_t *' lvalue Var 0x56101f06f7a0 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x56101f06f9e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x56101f06f9a8 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x56101f06f980 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x56101f06f948 <col:23> 'int' 0
| |     | | `-ParenExpr 0x56101f06fb80 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x56101f06fb58 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x56101f06fad0 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x56101f06fab8 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x56101f06fa40 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x56101f06f2f0 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x56101f06fb08 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x56101f06fa68 <col:33> 'sys_dnode_t *' lvalue Var 0x56101f06f7a0 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x56101f06fb20 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x56101f06fa90 <col:38> 'void *' lvalue ParmVar 0x56101f06f368 'data' 'void *'
| |     | |     `-IntegerLiteral 0x56101f06fb38 <col:47> 'int' 0
| |     | `-CompoundStmt 0x56101f06fd10 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x56101f06fce8 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x56101f06fbc8 <col:4> 'sys_dnode_t *' lvalue Var 0x56101f06f7a0 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x56101f06fc80 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x56101f06fc68 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x56101f06fbf0 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x56101f06abe0 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x56101f06fcb8 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x56101f06fc18 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x56101f06efe0 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x56101f06fcd0 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x56101f06fc40 <col:36> 'sys_dnode_t *' lvalue Var 0x56101f06f7a0 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x56101f0750b0 <line:476:3, line:480:3>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-BinaryOperator 0x56101f06fe20 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x56101f06fdf0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56101f06fd48 <col:7> 'sys_dnode_t *' lvalue Var 0x56101f06f7a0 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x56101f06fe08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x56101f06fdd0 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x56101f06fda8 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x56101f06fd70 <col:23> 'int' 0
| |       |-CompoundStmt 0x56101f06ff68 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x56101f06ff00 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x56101f06fee8 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x56101f06fe48 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x56101f06e8b0 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x56101f06ff38 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x56101f06fe70 <col:21> 'sys_dnode_t *' lvalue Var 0x56101f06f7a0 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x56101f06ff50 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x56101f06fe98 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x56101f06f050 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x56101f075098 <line:478:10, line:480:3>
| |         `-CallExpr 0x56101f075030 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x56101f075018 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x56101f06ff80 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x56101f06d800 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x56101f075068 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x56101f06ffa8 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x56101f06efe0 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x56101f075080 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x56101f074ff0 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x56101f06f050 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b62b0 <line:449:3, line:462:14>
|   |-ParagraphComment 0x56101f1b5c80 <line:449:3>
|   | `-TextComment 0x56101f1b5c50 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b5ca0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x56101f1b5d00 <col:10, col:33>
|   |   `-TextComment 0x56101f1b5cd0 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x56101f1b5dc0 <line:451:3, line:454:62>
|   | |-TextComment 0x56101f1b5d20 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x56101f1b5d40 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x56101f1b5d60 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x56101f1b5d80 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b5e10 <line:456:3>
|   | `-TextComment 0x56101f1b5de0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b5e30 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b5ee0 <line:456:15, line:457:3>
|   |   |-TextComment 0x56101f1b5e90 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x56101f1b5eb0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x56101f1b5f00 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b5fb0 <line:457:15, line:458:3>
|   |   |-TextComment 0x56101f1b5f60 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x56101f1b5f80 <line:458:3> Text=" "
|   |-ParamCommandComment 0x56101f1b5fd0 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x56101f1b60c0 <line:458:15, line:460:3>
|   |   |-TextComment 0x56101f1b6040 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x56101f1b6060 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x56101f1b6080 <line:460:3> Text=" "
|   |-ParamCommandComment 0x56101f1b60e0 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x56101f1b6170 <col:15, col:34>
|   |   `-TextComment 0x56101f1b6140 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x56101f1b61c0 <line:462:3>
|   | `-TextComment 0x56101f1b6190 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b61e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1b6240 <col:11, col:14>
|       `-TextComment 0x56101f1b6210 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f075228 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x56101f0751a0 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x56101f0758e8 <line:496:1, line:500:1>
| | |-BinaryOperator 0x56101f075518 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f075400 <col:2, col:14> 'struct _dnode *' lvalue .next 0x56101f063f60
| | | | `-MemberExpr 0x56101f0753b0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |   `-ImplicitCastExpr 0x56101f075398 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x56101f075360 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x56101f064228
| | | |       `-MemberExpr 0x56101f075310 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | | |         `-ImplicitCastExpr 0x56101f0752f8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x56101f0752d0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f0751a0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f075500 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x56101f0754c8 <col:21, col:27> 'struct _dnode *' lvalue .next 0x56101f063f60
| | |     `-MemberExpr 0x56101f075478 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | |       `-ImplicitCastExpr 0x56101f075460 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x56101f075438 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x56101f0751a0 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x56101f075788 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x56101f075670 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x56101f064228
| | | | `-MemberExpr 0x56101f075620 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | | |   `-ImplicitCastExpr 0x56101f075608 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x56101f0755d0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x56101f063f60
| | | |       `-MemberExpr 0x56101f075580 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | |         `-ImplicitCastExpr 0x56101f075568 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x56101f075540 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x56101f0751a0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x56101f075770 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x56101f075738 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x56101f064228
| | |     `-MemberExpr 0x56101f0756e8 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x56101f0642c0
| | |       `-ImplicitCastExpr 0x56101f0756d0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x56101f0756a8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x56101f0751a0 'node' 'sys_dnode_t *'
| | `-CallExpr 0x56101f075870 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x56101f075858 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x56101f0757b0 <col:2> 'void (sys_dnode_t *)' Function 0x56101f064c60 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x56101f0758a0 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f0757d8 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x56101f0751a0 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b6670 <line:485:3, line:492:14>
|   |-ParagraphComment 0x56101f1b6350 <line:485:3>
|   | `-TextComment 0x56101f1b6320 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b6370 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1b63d0 <col:10, col:44>
|   |   `-TextComment 0x56101f1b63a0 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x56101f1b6440 <line:487:3, line:488:62>
|   | |-TextComment 0x56101f1b63f0 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x56101f1b6410 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b6490 <line:490:3>
|   | `-TextComment 0x56101f1b6460 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b64b0 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b6540 <col:15, col:33>
|   |   `-TextComment 0x56101f1b6510 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x56101f1b6590 <line:492:3>
|   | `-TextComment 0x56101f1b6560 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b65b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1b6610 <col:11, col:14>
|       `-TextComment 0x56101f1b65e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f0759a8 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x56101f075920 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x56101f075ef8 <line:513:1, line:522:1>
| | |-DeclStmt 0x56101f075b58 <line:514:2, col:26>
| | | `-VarDecl 0x56101f075a60 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x56101f075b40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x56101f075b20 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x56101f075af8 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x56101f075ac0 <col:23> 'int' 0
| | |-IfStmt 0x56101f075e40 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x56101f075c20 <line:516:6, col:30> 'int' prefix '!'
| | | | `-CallExpr 0x56101f075bd8 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x56101f075bc0 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x56101f075b70 <col:7> 'bool (sys_dlist_t *)' Function 0x56101f0697a0 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x56101f075c08 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f075b98 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x56101f075920 'list' 'sys_dlist_t *'
| | | |-CompoundStmt 0x56101f075e20 <col:33, line:519:2>
| | | | |-BinaryOperator 0x56101f075d48 <line:517:3, col:16> 'sys_dnode_t *' '='
| | | | | |-DeclRefExpr 0x56101f075c40 <col:3> 'sys_dnode_t *' lvalue Var 0x56101f075a60 'node' 'sys_dnode_t *'
| | | | | `-ImplicitCastExpr 0x56101f075d30 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | | | |   `-MemberExpr 0x56101f075cf8 <col:10, col:16> 'struct _dnode *' lvalue .head 0x56101f063ef0
| | | | |     `-MemberExpr 0x56101f075ca8 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x56101f064000
| | | | |       `-ImplicitCastExpr 0x56101f075c90 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | | | |         `-DeclRefExpr 0x56101f075c68 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x56101f075920 'list' 'sys_dlist_t *'
| | | | `-CallExpr 0x56101f075dd8 <line:518:3, col:24> 'void'
| | | |   |-ImplicitCastExpr 0x56101f075dc0 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x56101f075d70 <col:3> 'void (sys_dnode_t *)' Function 0x56101f075228 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | | |   `-ImplicitCastExpr 0x56101f075e08 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f075d98 <col:20> 'sys_dnode_t *' lvalue Var 0x56101f075a60 'node' 'sys_dnode_t *'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x56101f075eb8 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x56101f075ea0 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f075e78 <col:9> 'sys_dnode_t *' lvalue Var 0x56101f075a60 'node' 'sys_dnode_t *'
| `-FullComment 0x56101f1b6a10 <line:503:3, line:509:60>
|   |-ParagraphComment 0x56101f1b6710 <line:503:3>
|   | `-TextComment 0x56101f1b66e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b6730 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x56101f1b6790 <col:10, col:38>
|   |   `-TextComment 0x56101f1b6760 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x56101f1b67e0 <line:505:3, col:62>
|   | `-TextComment 0x56101f1b67b0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b6830 <line:507:3>
|   | `-TextComment 0x56101f1b6800 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b6850 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b68e0 <col:15, col:51>
|   |   `-TextComment 0x56101f1b68b0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x56101f1b6930 <line:509:3>
|   | `-TextComment 0x56101f1b6900 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b6950 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x56101f1b69b0 <col:11, col:60>
|       `-TextComment 0x56101f1b6980 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x56101f075f20 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x56101f078d10 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x56101f078fe8 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x56101f078f80 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x56101f078f20 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x56101f078ee0 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x56101ef8e930 'bool'
| |     |-PointerType 0x56101f078c30 'struct rbnode *'
| |     | `-ElaboratedType 0x56101f078bd0 'struct rbnode' sugar
| |     |   `-RecordType 0x56101f075fb0 'struct rbnode'
| |     |     `-Record 0x56101f075f20 'rbnode'
| |     `-PointerType 0x56101f078c30 'struct rbnode *'
| |       `-ElaboratedType 0x56101f078bd0 'struct rbnode' sugar
| |         `-RecordType 0x56101f075fb0 'struct rbnode'
| |           `-Record 0x56101f075f20 'rbnode'
| `-FullComment 0x56101f1b6d70 <line:62:3, line:72:36>
|   |-ParagraphComment 0x56101f1b6ab0 <line:62:3>
|   | `-TextComment 0x56101f1b6a80 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1b6ad0 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x56101f1b6b40 <line:63:3>
|   | `-TextComment 0x56101f1b6b10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b6b60 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x56101f1b6bc0 <col:10, col:45>
|   |   `-TextComment 0x56101f1b6b90 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x56101f1b6c30 <line:65:3, line:66:68>
|   | |-TextComment 0x56101f1b6be0 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x56101f1b6c00 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x56101f1b6d20 <line:68:3, line:72:36>
|     |-TextComment 0x56101f1b6c50 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x56101f1b6c70 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x56101f1b6c90 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x56101f1b6cb0 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x56101f1b6cd0 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x56101f079040 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x56101f079118 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x56101f079190 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x56101f0791f0 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x56101f079488 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x56101f079420 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x56101f0793c0 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x56101f079380 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x56101ef8e910 'void'
|       |-PointerType 0x56101f078c30 'struct rbnode *'
|       | `-ElaboratedType 0x56101f078bd0 'struct rbnode' sugar
|       |   `-RecordType 0x56101f075fb0 'struct rbnode'
|       |     `-Record 0x56101f075f20 'rbnode'
|       `-PointerType 0x56101ef8edb0 'void *'
|         `-BuiltinType 0x56101ef8e910 'void'
|-FunctionDecl 0x56101f0796a8 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x56101f079508 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x56101f079580 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x56101f079888 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x56101f079780 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x56101f07a8e0 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x56101f079958 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x56101f0799f0 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x56101f079a68 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x56101f07abf8 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x56101f07aa50 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x56101f07aac8 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x56101f07aea0 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x56101f07ad00 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x56101f07ad88 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x56101f1b6ec0 <line:96:3, col:31>
|   |-ParagraphComment 0x56101f1b6e10 <col:3>
|   | `-TextComment 0x56101f1b6de0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b6e30 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x56101f1b6e90 <col:10, col:31>
|       `-TextComment 0x56101f1b6e60 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x56101f07b0b8 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x56101f07afa0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x56101f07b028 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x56101f1b7010 <line:101:3, col:31>
|   |-ParagraphComment 0x56101f1b6f60 <col:3>
|   | `-TextComment 0x56101f1b6f30 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b6f80 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x56101f1b6fe0 <col:10, col:31>
|       `-TextComment 0x56101f1b6fb0 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x56101f07b2d8 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x56101f07b1c0 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x56101f07b4f8 <line:109:1, line:111:1>
| | `-ReturnStmt 0x56101f07b4b0 <line:110:2, col:32>
| |   `-CallExpr 0x56101f07b460 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x56101f07b448 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f07b380 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x56101f07abf8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x56101f07b498 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f07b3a8 <col:25> 'struct rbtree *' lvalue ParmVar 0x56101f07b1c0 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x56101f07b3d0 <col:31> 'int' 0
| `-FullComment 0x56101f1b7160 <line:106:3, col:54>
|   |-ParagraphComment 0x56101f1b70b0 <col:3>
|   | `-TextComment 0x56101f1b7080 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b70d0 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x56101f1b7130 <col:10, col:54>
|       `-TextComment 0x56101f1b7100 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x56101f07b5d8 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x56101f07b538 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x56101f07b798 <line:117:1, line:119:1>
| | `-ReturnStmt 0x56101f07b758 <line:118:2, col:32>
| |   `-CallExpr 0x56101f07b708 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x56101f07b6f0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f07b680 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x56101f07abf8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x56101f07b740 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f07b6a8 <col:25> 'struct rbtree *' lvalue ParmVar 0x56101f07b538 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x56101f07b6d0 <col:31> 'int' 1
| `-FullComment 0x56101f1b72b0 <line:114:3, col:55>
|   |-ParagraphComment 0x56101f1b7200 <col:3>
|   | `-TextComment 0x56101f1b71d0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b7220 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x56101f1b7280 <col:10, col:55>
|       `-TextComment 0x56101f1b7250 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x56101f07bae0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x56101f07b7d8 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x56101f07b860 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x56101f1b7500 <line:122:3, line:128:10>
|   |-ParagraphComment 0x56101f1b7350 <line:122:3>
|   | `-TextComment 0x56101f1b7320 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b7370 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x56101f1b73d0 <col:10, col:60>
|   |   `-TextComment 0x56101f1b73a0 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x56101f1b74c0 <line:124:3, line:128:10>
|     |-TextComment 0x56101f1b73f0 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x56101f1b7410 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x56101f1b7430 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x56101f1b7450 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x56101f1b7470 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x56101f07be00 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x56101f07bbe0 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x56101f07bc50 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x56101f07bcc8 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x56101f07c0a8 <line:143:1, line:145:1>
| | `-CallExpr 0x56101f07c020 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x56101f07c008 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x56101f07beb8 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x56101f07a8e0 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x56101f07c060 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x56101f07bf20 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x56101f079118
| |   |   `-ImplicitCastExpr 0x56101f07bf08 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x56101f07bee0 <col:12> 'struct rbtree *' lvalue ParmVar 0x56101f07bbe0 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x56101f07c078 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x56101f07bf58 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x56101f07bc50 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x56101f07c090 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f07bf80 <col:34> 'void *' lvalue ParmVar 0x56101f07bcc8 'cookie' 'void *'
| `-FullComment 0x56101f1b7720 <line:134:3, line:139:18>
|   |-ParagraphComment 0x56101f1b75a0 <line:134:3>
|   | `-TextComment 0x56101f1b7570 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b75c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x56101f1b7620 <col:10, col:33>
|   |   `-TextComment 0x56101f1b75f0 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x56101f1b76e0 <line:136:3, line:139:18>
|     |-TextComment 0x56101f1b7640 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x56101f1b7660 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x56101f1b7680 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x56101f1b76a0 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x56101f07c0c0 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x56101f07c1f0 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x56101f07c250 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x56101f07c2b0 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x56101f07c558 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x56101f07c320 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x56101f07c430 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x56101f07c6c8 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x56101f07c928 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x56101f07c780 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x56101f07eca0 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x56101f07eb00 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x56101f07eb88 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x56101f07ee78 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x56101f07ed60 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x56101f07ede8 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x56101f07ef28 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x56101f07eff0 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x56101f07f050 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x56101f07f340 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x56101f07f1a0 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x56101f07f228 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x56101f07f530 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x56101f07f418 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x56101f07f4a0 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x56101f07f728 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x56101f07f608 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x56101f07f7d0 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x56101f07f9d8 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x56101f07fa38 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x56101f07fd00 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x56101f07fb60 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x56101f07fbe8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x56101f07fef0 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x56101f07fdd8 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x56101f07fe60 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x56101f0800e8 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x56101f07ffc8 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x56101f0801b8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x56101f080310 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x56101f080378 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x56101f080260 'struct _snode' sugar
|   `-RecordType 0x56101f080240 'struct _snode'
|     `-Record 0x56101f0801b8 '_snode'
|-RecordDecl 0x56101f0803d0 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x56101f0804d8 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x56101f080530 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x56101f0805d0 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x56101f080580 'struct _slist' sugar
|   `-RecordType 0x56101f080460 'struct _slist'
|     `-Record 0x56101f0803d0 '_slist'
|-FunctionDecl 0x56101f0808e0 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f0807d8 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x56101f0961f8 <line:191:1, line:194:1>
| | |-BinaryOperator 0x56101f080a98 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x56101f0809c8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x56101f0804d8
| | | | `-ImplicitCastExpr 0x56101f0809b0 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x56101f080988 <col:2> 'sys_slist_t *' lvalue ParmVar 0x56101f0807d8 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x56101f080a80 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x56101f080a60 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x56101f080a38 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x56101f080a00 <col:23> 'int' 0
| | `-BinaryOperator 0x56101f0961d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x56101f096100 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x56101f080530
| |   | `-ImplicitCastExpr 0x56101f080ae8 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56101f080ac0 <col:2> 'sys_slist_t *' lvalue ParmVar 0x56101f0807d8 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x56101f0961b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x56101f096198 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x56101f096170 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x56101f096138 <col:23> 'int' 0
| `-FullComment 0x56101f1b7980 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x56101f1b77c0 <line:186:3>
|   | `-TextComment 0x56101f1b7790 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b77e0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x56101f1b7840 <col:10, col:27>
|   |   `-TextComment 0x56101f1b7810 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x56101f1b7890 <line:188:3>
|   | `-TextComment 0x56101f1b7860 <col:3> Text=" "
|   `-ParamCommandComment 0x56101f1b78b0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x56101f1b7940 <col:15, col:50>
|       `-TextComment 0x56101f1b7910 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x56101f096330 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f096228 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f096480 <line:199:1, line:201:1>
|   `-ReturnStmt 0x56101f096468 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x56101f096450 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x56101f096418 <col:9, col:15> 'struct _snode *' lvalue ->next 0x56101f080310
|         `-ImplicitCastExpr 0x56101f096400 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56101f0963d8 <col:9> 'sys_snode_t *' lvalue ParmVar 0x56101f096228 'node' 'sys_snode_t *'
|-FunctionDecl 0x56101f096630 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f0964a8 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x56101f096518 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x56101f0967c0 <line:204:1, line:206:1>
|   `-BinaryOperator 0x56101f096798 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x56101f096720 <col:2, col:10> 'struct _snode *' lvalue ->next 0x56101f080310
|     | `-ImplicitCastExpr 0x56101f096708 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x56101f0966e0 <col:2> 'sys_snode_t *' lvalue ParmVar 0x56101f0964a8 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x56101f096780 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f096758 <col:17> 'sys_snode_t *' lvalue ParmVar 0x56101f096518 'child' 'sys_snode_t *'
|-FunctionDecl 0x56101f096970 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f0967e8 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f096858 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f096b00 <line:209:1, line:211:1>
|   `-BinaryOperator 0x56101f096ad8 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x56101f096a60 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x56101f0804d8
|     | `-ImplicitCastExpr 0x56101f096a48 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x56101f096a20 <col:2> 'sys_slist_t *' lvalue ParmVar 0x56101f0967e8 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x56101f096ac0 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f096a98 <col:15> 'sys_snode_t *' lvalue ParmVar 0x56101f096858 'node' 'sys_snode_t *'
|-FunctionDecl 0x56101f096c28 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f096b28 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f096b98 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f096de8 <line:214:1, line:216:1>
|   `-BinaryOperator 0x56101f096d90 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x56101f096d18 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x56101f080530
|     | `-ImplicitCastExpr 0x56101f096d00 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x56101f096cd8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x56101f096b28 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x56101f096d78 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f096d50 <col:15> 'sys_snode_t *' lvalue ParmVar 0x56101f096b98 'node' 'sys_snode_t *'
|-FunctionDecl 0x56101f096f10 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f096e10 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x56101f097088 <line:226:1, line:228:1>
| | `-ReturnStmt 0x56101f097048 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x56101f097030 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x56101f096ff8 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x56101f0804d8
| |       `-ImplicitCastExpr 0x56101f096fe0 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f096fb8 <col:9> 'sys_slist_t *' lvalue ParmVar 0x56101f096e10 'list' 'sys_slist_t *'
| `-FullComment 0x56101f1b7cc0 <line:219:3, line:223:68>
|   |-ParagraphComment 0x56101f1b7a20 <line:219:3>
|   | `-TextComment 0x56101f1b79f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b7a40 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1b7aa0 <col:10, col:43>
|   |   `-TextComment 0x56101f1b7a70 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x56101f1b7af0 <line:221:3>
|   | `-TextComment 0x56101f1b7ac0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b7b10 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b7ba0 <col:15, col:62>
|   |   `-TextComment 0x56101f1b7b70 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x56101f1b7bf0 <line:223:3>
|   | `-TextComment 0x56101f1b7bc0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b7c10 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x56101f1b7c70 <col:11, col:68>
|       `-TextComment 0x56101f1b7c40 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x56101f0971f8 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f097170 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x56101f097378 <line:238:1, line:240:1>
| | `-ReturnStmt 0x56101f097330 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x56101f097318 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x56101f0972e0 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x56101f080530
| |       `-ImplicitCastExpr 0x56101f0972c8 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f0972a0 <col:9> 'sys_slist_t *' lvalue ParmVar 0x56101f097170 'list' 'sys_slist_t *'
| `-FullComment 0x56101f1b8030 <line:231:3, line:235:67>
|   |-ParagraphComment 0x56101f1b7d60 <line:231:3>
|   | `-TextComment 0x56101f1b7d30 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b7d80 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f1b7de0 <col:10, col:42>
|   |   `-TextComment 0x56101f1b7db0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x56101f1b7e30 <line:233:3>
|   | `-TextComment 0x56101f1b7e00 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b7e50 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b7ee0 <col:15, col:61>
|   |   `-TextComment 0x56101f1b7eb0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x56101f1b7f30 <line:235:3>
|   | `-TextComment 0x56101f1b7f00 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b7f50 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x56101f1b7fb0 <col:11, col:67>
|       `-TextComment 0x56101f1b7f80 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x56101f0974a0 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f0973a0 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x56101f1b8370 <line:247:3, line:251:57>
|   |-ParagraphComment 0x56101f1b80d0 <line:247:3>
|   | `-TextComment 0x56101f1b80a0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b80f0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1b8150 <col:10, col:41>
|   |   `-TextComment 0x56101f1b8120 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x56101f1b81a0 <line:249:3>
|   | `-TextComment 0x56101f1b8170 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b81c0 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b8250 <col:15, col:44>
|   |   `-TextComment 0x56101f1b8220 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x56101f1b82a0 <line:251:3>
|   | `-TextComment 0x56101f1b8270 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b82c0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x56101f1b8320 <col:11, col:57>
|       `-TextComment 0x56101f1b82f0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x56101f0975e0 prev 0x56101f0974a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f097558 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x56101f0978d8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x56101f097890 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x56101f097878 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x56101f097858 <col:10, col:54> 'int'
|         `-BinaryOperator 0x56101f097830 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x56101f097750 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x56101f097738 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x56101f097688 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f096f10 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x56101f097780 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x56101f0976b0 <col:41> 'sys_slist_t *' lvalue ParmVar 0x56101f097558 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x56101f097818 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x56101f0977f8 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x56101f0977d0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x56101f097798 <col:23> 'int' 0
|-FunctionDecl 0x56101f097988 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f097900 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x56101f1b8710 <line:258:3, line:264:55>
|   |-ParagraphComment 0x56101f1b8410 <line:258:3>
|   | `-TextComment 0x56101f1b83e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b8430 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x56101f1b8490 <col:10, col:64>
|   |   `-TextComment 0x56101f1b8460 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x56101f1b84e0 <line:260:3, col:69>
|   | `-TextComment 0x56101f1b84b0 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x56101f1b8530 <line:262:3>
|   | `-TextComment 0x56101f1b8500 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b8550 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b85e0 <col:15, col:64>
|   |   `-TextComment 0x56101f1b85b0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x56101f1b8630 <line:264:3>
|   | `-TextComment 0x56101f1b8600 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b8650 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x56101f1b86b0 <col:11, col:55>
|       `-TextComment 0x56101f1b8680 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x56101f097ac8 prev 0x56101f097988 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f097a40 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f097cb8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x56101f097c78 <line:68:3, col:42>
|     `-CallExpr 0x56101f097c30 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x56101f097c18 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f097b70 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x56101f096330 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x56101f097c60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f097b98 <col:38> 'sys_snode_t *' lvalue ParmVar 0x56101f097a40 'node' 'sys_snode_t *'
|-FunctionDecl 0x56101f097d68 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f097ce0 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x56101f1b8a50 <line:271:3, line:275:55>
|   |-ParagraphComment 0x56101f1b87b0 <line:271:3>
|   | `-TextComment 0x56101f1b8780 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b87d0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x56101f1b8830 <col:10, col:46>
|   |   `-TextComment 0x56101f1b8800 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x56101f1b8880 <line:273:3>
|   | `-TextComment 0x56101f1b8850 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b88a0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b8930 <col:15, col:64>
|   |   `-TextComment 0x56101f1b8900 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x56101f1b8980 <line:275:3>
|   | `-TextComment 0x56101f1b8950 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1b89a0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x56101f1b8a00 <col:11, col:55>
|       `-TextComment 0x56101f1b89d0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x56101f097ea8 prev 0x56101f097d68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f097e20 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f099898 <line:74:2, line:78:2>
|   `-ReturnStmt 0x56101f099858 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x56101f099828 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x56101f098028 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x56101f097ff8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x56101f097f50 <col:10> 'sys_snode_t *' lvalue ParmVar 0x56101f097e20 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x56101f098010 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x56101f097fd8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x56101f097fb0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x56101f097f78 <col:23> 'int' 0
|       |-CallExpr 0x56101f0980b8 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x56101f0980a0 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x56101f098050 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x56101f097ac8 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x56101f0980e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x56101f098078 <col:43> 'sys_snode_t *' lvalue ParmVar 0x56101f097e20 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x56101f099810 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x56101f0997f0 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x56101f098138 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x56101f098100 <col:23> 'int' 0
|-FunctionDecl 0x56101f0999c0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f0998c0 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f099930 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x56101f1b8de0 <line:282:3, line:287:47>
|   |-ParagraphComment 0x56101f1b8af0 <line:282:3>
|   | `-TextComment 0x56101f1b8ac0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b8b10 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f1b8b70 <col:10, col:42>
|   |   `-TextComment 0x56101f1b8b40 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x56101f1b8bc0 <line:284:3, col:62>
|   | `-TextComment 0x56101f1b8b90 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b8c10 <line:286:3>
|   | `-TextComment 0x56101f1b8be0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b8c30 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b8ce0 <line:286:15, line:287:3>
|   |   |-TextComment 0x56101f1b8c90 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1b8cb0 <line:287:3> Text=" "
|   `-ParamCommandComment 0x56101f1b8d00 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x56101f1b8d90 <col:15, col:47>
|       `-TextComment 0x56101f1b8d60 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x56101f099b80 prev 0x56101f0999c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f099a80 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f099af0 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f09a298 <line:84:2, line:93:2>
|   |-CallExpr 0x56101f099da0 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x56101f099d88 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f099c30 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x56101f096630 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x56101f099dd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f099c58 <col:30> 'sys_snode_t *' lvalue ParmVar 0x56101f099af0 'node' 'sys_snode_t *'
|   | `-CallExpr 0x56101f099ce8 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x56101f099cd0 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56101f099c80 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f096f10 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x56101f099d18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f099ca8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x56101f099a80 'list' 'sys_slist_t *'
|   |-CallExpr 0x56101f099ee0 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x56101f099ec8 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f099df0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096970 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x56101f099f18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f099e18 <col:30> 'sys_slist_t *' lvalue ParmVar 0x56101f099a80 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x56101f099f30 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56101f099e40 <col:36> 'sys_snode_t *' lvalue ParmVar 0x56101f099af0 'node' 'sys_snode_t *'
|   `-IfStmt 0x56101f09a238 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x56101f09a090 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x56101f099fb0 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x56101f099f98 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x56101f099f48 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0971f8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x56101f099fe0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56101f099f70 <col:37> 'sys_slist_t *' lvalue ParmVar 0x56101f099a80 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x56101f09a078 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x56101f09a058 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x56101f09a030 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x56101f099ff8 <col:23> 'int' 0
|     |-CompoundStmt 0x56101f09a220 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x56101f09a1d0 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x56101f09a1b8 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56101f09a0b8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096c28 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x56101f09a208 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x56101f09a0e0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x56101f099a80 'list' 'sys_slist_t *'
|     |   `-CallExpr 0x56101f09a170 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|     |     |-ImplicitCastExpr 0x56101f09a158 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x56101f09a108 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f096f10 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|     |     `-ImplicitCastExpr 0x56101f09a1a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x56101f09a130 <col:36> 'sys_slist_t *' lvalue ParmVar 0x56101f099a80 'list' 'sys_slist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x56101f09a3d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f09a2d0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f09a340 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x56101f1b9170 <line:295:3, line:300:46>
|   |-ParagraphComment 0x56101f1b8e80 <line:295:3>
|   | `-TextComment 0x56101f1b8e50 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b8ea0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1b8f00 <col:10, col:41>
|   |   `-TextComment 0x56101f1b8ed0 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x56101f1b8f50 <line:297:3, col:62>
|   | `-TextComment 0x56101f1b8f20 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b8fa0 <line:299:3>
|   | `-TextComment 0x56101f1b8f70 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b8fc0 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b9070 <line:299:15, line:300:3>
|   |   |-TextComment 0x56101f1b9020 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1b9040 <line:300:3> Text=" "
|   `-ParamCommandComment 0x56101f1b9090 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x56101f1b9120 <col:15, col:46>
|       `-TextComment 0x56101f1b90f0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x56101f09a590 prev 0x56101f09a3d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f09a490 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f09a500 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f09bac8 <line:99:2, line:111:2>
|   |-CallExpr 0x56101f09a728 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x56101f09a710 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f09a640 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x56101f096630 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x56101f09a760 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f09a668 <col:30> 'sys_snode_t *' lvalue ParmVar 0x56101f09a500 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x56101f09a778 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x56101f09a6f0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x56101f09a6c8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x56101f09a690 <col:23> 'int' 0
|   `-IfStmt 0x56101f09ba60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x56101f09b5a8 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x56101f09b4c8 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x56101f09b4b0 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x56101f09a790 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0971f8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x56101f09b4f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56101f09a7b8 <col:37> 'sys_slist_t *' lvalue ParmVar 0x56101f09a490 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x56101f09b590 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x56101f09b570 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x56101f09b548 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x56101f09b510 <col:23> 'int' 0
|     |-CompoundStmt 0x56101f09b7c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x56101f09b660 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x56101f09b648 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x56101f09b5d0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096c28 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x56101f09b698 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56101f09b5f8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x56101f09a490 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x56101f09b6b0 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56101f09b620 <col:37> 'sys_snode_t *' lvalue ParmVar 0x56101f09a500 'node' 'sys_snode_t *'
|     | `-CallExpr 0x56101f09b758 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x56101f09b740 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56101f09b6c8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096970 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x56101f09b790 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x56101f09b6f0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x56101f09a490 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x56101f09b7a8 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x56101f09b718 <col:37> 'sys_snode_t *' lvalue ParmVar 0x56101f09a500 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x56101f09ba40 <line:105:10, line:110:3>
|       |-CallExpr 0x56101f09b8f8 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x56101f09b8e0 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x56101f09b7e0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x56101f096630 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x56101f09b870 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x56101f09b858 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56101f09b808 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0971f8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x56101f09b8a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x56101f09b830 <col:35> 'sys_slist_t *' lvalue ParmVar 0x56101f09a490 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x56101f09b930 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x56101f09b8b8 <col:5> 'sys_snode_t *' lvalue ParmVar 0x56101f09a500 'node' 'sys_snode_t *'
|       `-CallExpr 0x56101f09b9d8 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x56101f09b9c0 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56101f09b948 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096c28 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x56101f09ba10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x56101f09b970 <col:31> 'sys_slist_t *' lvalue ParmVar 0x56101f09a490 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x56101f09ba28 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56101f09b998 <col:37> 'sys_snode_t *' lvalue ParmVar 0x56101f09a500 'node' 'sys_snode_t *'
|-FunctionDecl 0x56101f09bd20 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x56101f09baf8 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f09bb70 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x56101f09bbe8 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x56101f1b96d0 <line:308:3, line:318:66>
|   |-ParagraphComment 0x56101f1b9210 <line:308:3>
|   | `-TextComment 0x56101f1b91e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b9230 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1b9290 <col:10, col:41>
|   |   `-TextComment 0x56101f1b9260 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x56101f1b9380 <line:310:3, line:312:62>
|   | |-TextComment 0x56101f1b92b0 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x56101f1b92d0 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x56101f1b9320 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x56101f1b9340 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b93d0 <line:314:3, col:48>
|   | `-TextComment 0x56101f1b93a0 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x56101f1b9420 <line:316:3>
|   | `-TextComment 0x56101f1b93f0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b9440 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b94f0 <line:316:15, line:317:3>
|   |   |-TextComment 0x56101f1b94a0 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1b94c0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x56101f1b9510 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b95c0 <line:317:15, line:318:3>
|   |   |-TextComment 0x56101f1b9570 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x56101f1b9590 <line:318:3> Text=" "
|   `-ParamCommandComment 0x56101f1b95e0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x56101f1b9670 <col:15, col:66>
|       `-TextComment 0x56101f1b9640 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x56101f09bf70 prev 0x56101f09bd20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x56101f09bde8 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f09be60 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x56101f09bed8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x56101f09c658 <col:31, line:127:42>
|   |-IfStmt 0x56101f09c4c0 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f09c170 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x56101f09c090 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x56101f09c078 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f09c028 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0971f8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x56101f09c0c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x56101f09c050 <col:36> 'sys_slist_t *' lvalue ParmVar 0x56101f09bde8 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x56101f09c158 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x56101f09c138 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x56101f09c110 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x56101f09c0d8 <col:23> 'int' 0
|   | |-CompoundStmt 0x56101f09c2c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x56101f09c278 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x56101f09c260 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56101f09c198 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096970 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x56101f09c2b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x56101f09c1c0 <col:30> 'sys_slist_t *' lvalue ParmVar 0x56101f09bde8 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x56101f09c238 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x56101f09c220 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x56101f09c1e8 <col:31> 'void *' lvalue ParmVar 0x56101f09be60 'head' 'void *'
|   | `-CompoundStmt 0x56101f09c480 <line:121:9, line:125:2>
|   |   `-CallExpr 0x56101f09c448 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x56101f09c430 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56101f09c2e0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x56101f096630 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x56101f09c370 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x56101f09c358 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x56101f09c308 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0971f8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x56101f09c3a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56101f09c330 <col:34> 'sys_slist_t *' lvalue ParmVar 0x56101f09bde8 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x56101f09c408 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x56101f09c3f0 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x56101f09c3b8 <col:29> 'void *' lvalue ParmVar 0x56101f09be60 'head' 'void *'
|   `-CallExpr 0x56101f09c5d8 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x56101f09c5c0 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f09c4f8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096c28 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x56101f09c610 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f09c520 <col:29> 'sys_slist_t *' lvalue ParmVar 0x56101f09bde8 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x56101f09c598 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x56101f09c580 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f09c548 <col:35> 'void *' lvalue ParmVar 0x56101f09bed8 'tail' 'void *'
|-FunctionDecl 0x56101f09c810 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f09c688 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f09c6f8 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x56101f1b9a80 <line:326:3, line:332:57>
|   |-ParagraphComment 0x56101f1b9770 <line:326:3>
|   | `-TextComment 0x56101f1b9740 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b9790 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x56101f1b97f0 <col:10, col:65>
|   |   `-TextComment 0x56101f1b97c0 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x56101f1b9860 <line:328:3, line:329:62>
|   | |-TextComment 0x56101f1b9810 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x56101f1b9830 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b98b0 <line:331:3>
|   | `-TextComment 0x56101f1b9880 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b98d0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b9980 <line:331:15, line:332:3>
|   |   |-TextComment 0x56101f1b9930 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1b9950 <line:332:3> Text=" "
|   `-ParamCommandComment 0x56101f1b99a0 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x56101f1b9a30 <col:25, col:57>
|       `-TextComment 0x56101f1b9a00 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x56101f09c9d0 prev 0x56101f09c810 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f09c8d0 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f09c940 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x56101f09d098 <line:135:2, line:141:2>
|   |-DeclStmt 0x56101f09cb78 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x56101f09ca90 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x56101f09cb00 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x56101f09cc68 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x56101f09cb90 <col:3> 'sys_snode_t *' lvalue Var 0x56101f09ca90 'head' 'sys_snode_t *'
|   | `-CallExpr 0x56101f09cc20 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x56101f09cc08 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56101f09cbb8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f096f10 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x56101f09cc50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f09cbe0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x56101f09c940 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x56101f09cd68 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x56101f09cc90 <col:3> 'sys_snode_t *' lvalue Var 0x56101f09cb00 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x56101f09cd20 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x56101f09cd08 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56101f09ccb8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0971f8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x56101f09cd50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f09cce0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x56101f09c940 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x56101f09cea0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x56101f09ce88 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f09cd90 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x56101f09bf70 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x56101f09cee0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f09cdb8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x56101f09c8d0 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x56101f09cf10 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x56101f09cef8 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56101f09cde0 <col:41> 'sys_snode_t *' lvalue Var 0x56101f09ca90 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x56101f09cf40 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x56101f09cf28 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f09ce08 <col:47> 'sys_snode_t *' lvalue Var 0x56101f09cb00 'tail' 'sys_snode_t *'
|   `-CallExpr 0x56101f09d020 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x56101f09d008 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f09cf58 <col:1> 'void (sys_slist_t *)' Function 0x56101f0808e0 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x56101f09d050 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f09cf80 <col:28> 'sys_slist_t *' lvalue ParmVar 0x56101f09c940 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x56101f09d2f0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f09d0e0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f09d150 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x56101f09d1c0 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x56101f1b9ef0 <line:340:3, line:346:46>
|   |-ParagraphComment 0x56101f1b9b20 <line:340:3>
|   | `-TextComment 0x56101f1b9af0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b9b40 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1b9ba0 <col:10, col:41>
|   |   `-TextComment 0x56101f1b9b70 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x56101f1b9bf0 <line:342:3, col:62>
|   | `-TextComment 0x56101f1b9bc0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1b9c40 <line:344:3>
|   | `-TextComment 0x56101f1b9c10 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1b9c60 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1b9d10 <line:344:15, line:345:3>
|   |   |-TextComment 0x56101f1b9cc0 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1b9ce0 <line:345:3> Text=" "
|   |-ParamCommandComment 0x56101f1b9d30 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x56101f1b9de0 <line:345:15, line:346:3>
|   |   |-TextComment 0x56101f1b9d90 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x56101f1b9db0 <line:346:3> Text=" "
|   `-ParamCommandComment 0x56101f1b9e00 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x56101f1b9e90 <col:15, col:46>
|       `-TextComment 0x56101f1b9e60 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x56101f0a0558 prev 0x56101f09d2f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f09d3b8 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f09d428 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x56101f0a04c0 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f0a0db8 <line:148:2, line:158:2>
|   `-IfStmt 0x56101f0a0d58 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x56101f0a06e8 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x56101f0a06b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x56101f0a0610 <col:7> 'sys_snode_t *' lvalue ParmVar 0x56101f09d428 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x56101f0a06d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x56101f0a0698 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x56101f0a0670 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x56101f0a0638 <col:23> 'int' 0
|     |-CompoundStmt 0x56101f0a0808 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x56101f0a07a0 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x56101f0a0788 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56101f0a0710 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f099b80 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x56101f0a07d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x56101f0a0738 <col:32> 'sys_slist_t *' lvalue ParmVar 0x56101f09d3b8 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x56101f0a07f0 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x56101f0a0760 <col:38> 'sys_snode_t *' lvalue ParmVar 0x56101f0a04c0 'node' 'sys_snode_t *'
|     `-IfStmt 0x56101f0a0d20 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x56101f0a0968 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x56101f0a0888 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x56101f0a0870 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56101f0a0820 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x56101f096330 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x56101f0a08b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x56101f0a0848 <col:42> 'sys_snode_t *' lvalue ParmVar 0x56101f09d428 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x56101f0a0950 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x56101f0a0930 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x56101f0a0908 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x56101f0a08d0 <col:23> 'int' 0
|       |-CompoundStmt 0x56101f0a0a88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x56101f0a0a20 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x56101f0a0a08 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56101f0a0990 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f09a590 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x56101f0a0a58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x56101f0a09b8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x56101f09d3b8 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x56101f0a0a70 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x56101f0a09e0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x56101f0a04c0 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x56101f0a0d00 <line:153:10, line:157:3>
|         |-CallExpr 0x56101f0a0bb8 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x56101f0a0ba0 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x56101f0a0aa0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x56101f096630 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x56101f0a0bf0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x56101f0a0ac8 <col:31> 'sys_snode_t *' lvalue ParmVar 0x56101f0a04c0 'node' 'sys_snode_t *'
|         | `-CallExpr 0x56101f0a0b58 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x56101f0a0b40 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x56101f0a0af0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x56101f096330 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x56101f0a0b88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x56101f0a0b18 <col:33> 'sys_snode_t *' lvalue ParmVar 0x56101f09d428 'prev' 'sys_snode_t *'
|         `-CallExpr 0x56101f0a0c98 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x56101f0a0c80 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x56101f0a0c08 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x56101f096630 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x56101f0a0cd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x56101f0a0c30 <col:31> 'sys_snode_t *' lvalue ParmVar 0x56101f09d428 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x56101f0a0ce8 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x56101f0a0c58 <col:37> 'sys_snode_t *' lvalue ParmVar 0x56101f0a04c0 'node' 'sys_snode_t *'
|-FunctionDecl 0x56101f0a0e68 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f0a0de0 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x56101f1ba2c0 <line:355:3, line:362:50>
|   |-ParagraphComment 0x56101f1b9f90 <line:355:3>
|   | `-TextComment 0x56101f1b9f60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1b9fb0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x56101f1ba010 <col:10, col:59>
|   |   `-TextComment 0x56101f1b9fe0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x56101f1ba090 <line:357:3, line:358:62>
|   | |-TextComment 0x56101f1ba040 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x56101f1ba060 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1ba0e0 <line:360:3>
|   | `-TextComment 0x56101f1ba0b0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ba100 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ba190 <col:15, col:46>
|   |   `-TextComment 0x56101f1ba160 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x56101f1ba1e0 <line:362:3>
|   | `-TextComment 0x56101f1ba1b0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ba200 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x56101f1ba260 <col:11, col:50>
|       `-TextComment 0x56101f1ba230 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x56101f0a0fa8 prev 0x56101f0a0e68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f0a0f20 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x56101f0a1658 <line:163:2, line:175:2>
|   |-DeclStmt 0x56101f0a1170 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x56101f0a1060 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x56101f0a1128 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x56101f0a1110 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56101f0a10c0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f096f10 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x56101f0a1158 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x56101f0a10e8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x56101f0a0f20 'list' 'sys_slist_t *'
|   |-CallExpr 0x56101f0a12a0 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x56101f0a1288 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f0a1188 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096970 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x56101f0a12d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f0a11b0 <col:30> 'sys_slist_t *' lvalue ParmVar 0x56101f0a0f20 'list' 'sys_slist_t *'
|   | `-CallExpr 0x56101f0a1240 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x56101f0a1228 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56101f0a11d8 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x56101f096330 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x56101f0a1270 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f0a1200 <col:33> 'sys_snode_t *' lvalue Var 0x56101f0a1060 'node' 'sys_snode_t *'
|   |-IfStmt 0x56101f0a1598 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f0a13e0 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x56101f0a1358 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x56101f0a1340 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f0a12f0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0971f8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x56101f0a1388 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x56101f0a1318 <col:37> 'sys_slist_t *' lvalue ParmVar 0x56101f0a0f20 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x56101f0a13c8 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56101f0a13a0 <col:46> 'sys_snode_t *' lvalue Var 0x56101f0a1060 'node' 'sys_snode_t *'
|   | |-CompoundStmt 0x56101f0a1580 <col:52, line:172:3>
|   | | `-CallExpr 0x56101f0a1530 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x56101f0a1518 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56101f0a1408 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096c28 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x56101f0a1568 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x56101f0a1430 <col:31> 'sys_slist_t *' lvalue ParmVar 0x56101f0a0f20 'list' 'sys_slist_t *'
|   | |   `-CallExpr 0x56101f0a14d0 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   | |     |-ImplicitCastExpr 0x56101f0a14a8 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x56101f0a1458 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f096f10 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |     `-ImplicitCastExpr 0x56101f0a1500 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x56101f0a1480 <col:35> 'sys_slist_t *' lvalue ParmVar 0x56101f0a0f20 'list' 'sys_slist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x56101f0a1610 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x56101f0a15f8 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f0a15d0 <col:10> 'sys_snode_t *' lvalue Var 0x56101f0a1060 'node' 'sys_snode_t *'
|-FunctionDecl 0x56101f0a1720 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f0a1698 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x56101f1ba660 <line:369:3, line:375:69>
|   |-ParagraphComment 0x56101f1ba360 <line:369:3>
|   | `-TextComment 0x56101f1ba330 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ba380 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x56101f1ba3e0 <col:10, col:59>
|   |   `-TextComment 0x56101f1ba3b0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x56101f1ba430 <line:371:3, col:62>
|   | `-TextComment 0x56101f1ba400 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1ba480 <line:373:3>
|   | `-TextComment 0x56101f1ba450 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ba4a0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ba530 <col:15, col:46>
|   |   `-TextComment 0x56101f1ba500 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x56101f1ba580 <line:375:3>
|   | `-TextComment 0x56101f1ba550 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ba5a0 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x56101f1ba600 <col:11, col:69>
|       `-TextComment 0x56101f1ba5d0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x56101f0a1860 prev 0x56101f0a1720 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x56101f0a17d8 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x56101f0a1be8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x56101f0a1ba8 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x56101f0a1b78 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x56101f0a1b48 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x56101f0a19d0 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x56101f0a19b8 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56101f0a1908 <col:1> 'bool (sys_slist_t *)' Function 0x56101f0975e0 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x56101f0a1a00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x56101f0a1930 <col:39> 'sys_slist_t *' lvalue ParmVar 0x56101f0a17d8 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x56101f0a1b60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x56101f0a1a78 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x56101f0a1a50 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x56101f0a1a18 <col:23> 'int' 0
|       `-CallExpr 0x56101f0a1b00 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x56101f0a1ae8 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56101f0a1a98 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0a0fa8 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x56101f0a1b30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56101f0a1ac0 <col:38> 'sys_slist_t *' lvalue ParmVar 0x56101f0a17d8 'list' 'sys_slist_t *'
|-FunctionDecl 0x56101f0a1d88 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f0a1c10 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f0a1c80 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x56101f0a1cf0 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x56101f1bab00 <line:382:3, line:389:46>
|   |-ParagraphComment 0x56101f1ba700 <line:382:3>
|   | `-TextComment 0x56101f1ba6d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ba720 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x56101f1ba780 <col:10, col:23>
|   |   `-TextComment 0x56101f1ba750 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x56101f1ba7d0 <line:384:3, col:62>
|   | `-TextComment 0x56101f1ba7a0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1ba820 <line:386:3>
|   | `-TextComment 0x56101f1ba7f0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ba840 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ba8f0 <line:386:15, line:387:3>
|   |   |-TextComment 0x56101f1ba8a0 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1ba8c0 <line:387:3> Text=" "
|   |-ParamCommandComment 0x56101f1ba910 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ba9f0 <line:387:20, line:389:3>
|   |   |-TextComment 0x56101f1ba970 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x56101f1ba990 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x56101f1ba9b0 <line:389:3> Text=" "
|   `-ParamCommandComment 0x56101f1baa10 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x56101f1baaa0 <col:15, col:46>
|       `-TextComment 0x56101f1baa70 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x56101f0a1fc8 prev 0x56101f0a1d88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f0a1e50 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f0a1ec0 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x56101f0a1f30 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f0a2b98 <line:190:2, line:212:2>
|   |-IfStmt 0x56101f0a29e8 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f0a2158 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x56101f0a2128 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x56101f0a2080 <col:7> 'sys_snode_t *' lvalue ParmVar 0x56101f0a1ec0 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x56101f0a2140 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x56101f0a2108 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x56101f0a20e0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x56101f0a20a8 <col:23> 'int' 0
|   | |-CompoundStmt 0x56101f0a25e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x56101f0a2298 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x56101f0a2280 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f0a2180 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096970 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x56101f0a22d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x56101f0a21a8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x56101f0a1e50 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x56101f0a2238 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x56101f0a2220 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x56101f0a21d0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x56101f096330 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x56101f0a2268 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x56101f0a21f8 <col:33> 'sys_snode_t *' lvalue ParmVar 0x56101f0a1f30 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x56101f0a25a8 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x56101f0a23d8 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x56101f0a2350 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x56101f0a2338 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x56101f0a22e8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0971f8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x56101f0a2380 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x56101f0a2310 <col:38> 'sys_slist_t *' lvalue ParmVar 0x56101f0a1e50 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x56101f0a23c0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x56101f0a2398 <col:47> 'sys_snode_t *' lvalue ParmVar 0x56101f0a1f30 'node' 'sys_snode_t *'
|   | |   |-CompoundStmt 0x56101f0a2590 <col:53, line:199:4>
|   | |   | `-CallExpr 0x56101f0a2540 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x56101f0a2528 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x56101f0a2400 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096c28 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |   |-ImplicitCastExpr 0x56101f0a2578 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x56101f0a2428 <col:32> 'sys_slist_t *' lvalue ParmVar 0x56101f0a1e50 'list' 'sys_slist_t *'
|   | |   |   `-CallExpr 0x56101f0a24e0 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |   |     |-ImplicitCastExpr 0x56101f0a24a0 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x56101f0a2450 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f096f10 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   |     `-ImplicitCastExpr 0x56101f0a2510 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x56101f0a2478 <col:36> 'sys_slist_t *' lvalue ParmVar 0x56101f0a1e50 'list' 'sys_slist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x56101f0a29c8 <line:200:10, line:209:3>
|   |   |-CallExpr 0x56101f0a2718 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x56101f0a2700 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x56101f0a2600 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x56101f096630 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x56101f0a2750 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x56101f0a2628 <col:31> 'sys_snode_t *' lvalue ParmVar 0x56101f0a1ec0 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x56101f0a26b8 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x56101f0a26a0 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x56101f0a2650 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x56101f096330 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x56101f0a26e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56101f0a2678 <col:33> 'sys_snode_t *' lvalue ParmVar 0x56101f0a1f30 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x56101f0a2990 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x56101f0a2858 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x56101f0a27d0 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x56101f0a27b8 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x56101f0a2768 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f0971f8 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x56101f0a2800 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56101f0a2790 <col:38> 'sys_slist_t *' lvalue ParmVar 0x56101f0a1e50 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x56101f0a2840 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56101f0a2818 <col:47> 'sys_snode_t *' lvalue ParmVar 0x56101f0a1f30 'node' 'sys_snode_t *'
|   |     |-CompoundStmt 0x56101f0a2978 <col:53, line:208:4>
|   |     | `-CallExpr 0x56101f0a2910 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x56101f0a28f8 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x56101f0a2880 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x56101f096c28 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |   |-ImplicitCastExpr 0x56101f0a2948 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x56101f0a28a8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x56101f0a1e50 'list' 'sys_slist_t *'
|   |     |   `-ImplicitCastExpr 0x56101f0a2960 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56101f0a28d0 <col:13> 'sys_snode_t *' lvalue ParmVar 0x56101f0a1ec0 'prev_node' 'sys_snode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x56101f0a2b08 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x56101f0a2af0 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f0a2a20 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x56101f096630 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x56101f0a2b40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f0a2a48 <col:30> 'sys_snode_t *' lvalue ParmVar 0x56101f0a1f30 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x56101f0a2b58 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x56101f0a2ad0 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x56101f0a2aa8 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x56101f0a2a70 <col:23> 'int' 0
|-FunctionDecl 0x56101f0a2d50 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f0a2bc8 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f0a2c38 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x56101f1baf70 <line:398:3, line:405:35>
|   |-ParagraphComment 0x56101f1baba0 <line:398:3>
|   | `-TextComment 0x56101f1bab70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1babc0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1bac20 <col:10, col:44>
|   |   `-TextComment 0x56101f1babf0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x56101f1bac70 <line:400:3, col:62>
|   | `-TextComment 0x56101f1bac40 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1bacc0 <line:402:3>
|   | `-TextComment 0x56101f1bac90 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bace0 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bad90 <line:402:15, line:403:3>
|   |   |-TextComment 0x56101f1bad40 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1bad60 <line:403:3> Text=" "
|   |-ParamCommandComment 0x56101f1badb0 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1bae40 <col:15, col:60>
|   |   `-TextComment 0x56101f1bae10 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x56101f1bae90 <line:405:3>
|   | `-TextComment 0x56101f1bae60 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1baeb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1baf10 <col:11, col:35>
|       `-TextComment 0x56101f1baee0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x56101f0a2f10 prev 0x56101f0a2d50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x56101f0a2e10 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x56101f0a2e80 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x56101f0a5a58 <line:218:2, line:233:2>
|   |-DeclStmt 0x56101f0a30c8 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x56101f0a2fd0 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x56101f0a30b0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x56101f0a3090 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x56101f0a3068 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x56101f0a3030 <col:23> 'int' 0
|   |-DeclStmt 0x56101f0a3150 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x56101f0a30f0 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x56101f0a59a0 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x56101f0a3240 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x56101f0a3168 <line:222:42> 'sys_snode_t *' lvalue Var 0x56101f0a30f0 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x56101f0a31f8 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x56101f0a31e0 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56101f0a3190 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x56101f096f10 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x56101f0a3228 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x56101f0a31b8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x56101f0a2e10 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f0a3340 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x56101f0a3310 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x56101f0a3268 <col:42> 'sys_snode_t *' lvalue Var 0x56101f0a30f0 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x56101f0a3328 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x56101f0a32f0 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x56101f0a32c8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x56101f0a3290 <col:23> 'int' 0
|   | |-BinaryOperator 0x56101f0a3440 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x56101f0a3368 <line:222:42> 'sys_snode_t *' lvalue Var 0x56101f0a30f0 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x56101f0a33f8 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x56101f0a33e0 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56101f0a3390 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x56101f097ea8 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x56101f0a3428 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x56101f0a33b8 <col:42> 'sys_snode_t *' lvalue Var 0x56101f0a30f0 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x56101f0a5980 <col:48, line:230:3>
|   |   |-IfStmt 0x56101f0a58b8 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x56101f0a5688 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x56101f0a34b8 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x56101f0a3468 <col:8> 'sys_snode_t *' lvalue Var 0x56101f0a30f0 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x56101f0a5670 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56101f0a3490 <col:16> 'sys_snode_t *' lvalue ParmVar 0x56101f0a2e80 'node' 'sys_snode_t *'
|   |   | |-CompoundStmt 0x56101f0a5898 <col:22, line:227:4>
|   |   | | |-CallExpr 0x56101f0a57c0 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x56101f0a57a8 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x56101f0a56b0 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x56101f0a1fc8 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   | | | |-ImplicitCastExpr 0x56101f0a5800 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x56101f0a56d8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x56101f0a2e10 'list' 'sys_slist_t *'
|   |   | | | |-ImplicitCastExpr 0x56101f0a5818 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x56101f0a5700 <col:38> 'sys_snode_t *' lvalue Var 0x56101f0a2fd0 'prev' 'sys_snode_t *'
|   |   | | | `-ImplicitCastExpr 0x56101f0a5830 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x56101f0a5728 <col:11> 'sys_snode_t *' lvalue ParmVar 0x56101f0a2e80 'node' 'sys_snode_t *'
|   |   | | `-ReturnStmt 0x56101f0a5880 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x56101f0a5868 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x56101f0a5848 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x56101f0a5958 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x56101f0a58f0 <col:4> 'sys_snode_t *' lvalue Var 0x56101f0a2fd0 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x56101f0a5940 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x56101f0a5918 <col:11> 'sys_snode_t *' lvalue Var 0x56101f0a30f0 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x56101f0a5a10 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x56101f0a59f8 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x56101f0a59d8 <col:16> 'int' 0
|-TypedefDecl 0x56101f0a5ac0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x56101f0a5a90 'u64_t' sugar
|   |-Typedef 0x56101effc860 'u64_t'
|   `-BuiltinType 0x56101ef8ea90 'unsigned long long'
|-RecordDecl 0x56101f0a5b18 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x56101f0a5bf0 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x56101f0a5c90 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x56101f0a5c40 'struct _sfnode' sugar
|   `-RecordType 0x56101f0a5ba0 'struct _sfnode'
|     `-Record 0x56101f0a5b18 '_sfnode'
|-RecordDecl 0x56101f0a5ce8 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x56101f0a5e18 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x56101f0a5e70 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x56101f0a5f10 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x56101f0a5ec0 'struct _sflist' sugar
|   `-RecordType 0x56101f0a5d70 'struct _sflist'
|     `-Record 0x56101f0a5ce8 '_sflist'
|-FunctionDecl 0x56101f0a6220 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f0a6118 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x56101f0a6538 <line:197:1, line:200:1>
| | |-BinaryOperator 0x56101f0a63d8 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x56101f0a6308 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x56101f0a5e18
| | | | `-ImplicitCastExpr 0x56101f0a62f0 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x56101f0a62c8 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x56101f0a6118 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x56101f0a63c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x56101f0a63a0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x56101f0a6378 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x56101f0a6340 <col:23> 'int' 0
| | `-BinaryOperator 0x56101f0a6510 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x56101f0a6440 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x56101f0a5e70
| |   | `-ImplicitCastExpr 0x56101f0a6428 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56101f0a6400 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x56101f0a6118 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x56101f0a64f8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x56101f0a64d8 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x56101f0a64b0 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x56101f0a6478 <col:23> 'int' 0
| `-FullComment 0x56101f1bb1d0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x56101f1bb010 <line:192:3>
|   | `-TextComment 0x56101f1bafe0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bb030 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x56101f1bb090 <col:10, col:27>
|   |   `-TextComment 0x56101f1bb060 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x56101f1bb0e0 <line:194:3>
|   | `-TextComment 0x56101f1bb0b0 <col:3> Text=" "
|   `-ParamCommandComment 0x56101f1bb100 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x56101f1bb190 <col:15, col:50>
|       `-TextComment 0x56101f1bb160 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x56101f0aacb0 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0a6568 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0aaf08 <line:206:1, line:208:1>
|   `-ReturnStmt 0x56101f0aaef0 <line:207:2, col:71>
|     `-CStyleCastExpr 0x56101f0aaec8 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x56101f0aaea8 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x56101f0aae40 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x56101f0aae10 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x56101f0aad98 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x56101f0a5bf0
|           |   `-ImplicitCastExpr 0x56101f0aad80 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x56101f0aad58 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0a6568 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x56101f0aae28 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x56101f0aadf0 <line:207:49, line:203:31> 'unsigned long' prefix '~'
|               `-IntegerLiteral 0x56101f0aadd0 <col:31> 'unsigned long' 3
|-FunctionDecl 0x56101f0ab030 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x56101f0aaf30 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x56101f0ab270 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0ab0e8 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x56101f0ab158 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0ab648 <line:214:1, line:218:1>
|   |-DeclStmt 0x56101f0ab498 <line:215:2, col:47>
|   | `-VarDecl 0x56101f0ab330 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x56101f0ab450 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x56101f0ab438 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56101f0ab390 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x56101f0ab030 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x56101f0ab480 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x56101f0ab3b8 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ab0e8 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x56101f0ab620 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x56101f0ab4f0 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x56101f0a5bf0
|     | `-ImplicitCastExpr 0x56101f0ab4d8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x56101f0ab4b0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ab0e8 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x56101f0ab5f8 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x56101f0ab5e0 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x56101f0ab5c8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x56101f0ab528 <col:27> 'u8_t':'unsigned char' lvalue Var 0x56101f0ab330 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x56101f0ab5a0 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x56101f0ab588 <col:50> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56101f0ab550 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ab158 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x56101f0ab800 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0ab678 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0ab6e8 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0ab990 <line:221:1, line:223:1>
|   `-BinaryOperator 0x56101f0ab968 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x56101f0ab8f0 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x56101f0a5e18
|     | `-ImplicitCastExpr 0x56101f0ab8d8 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x56101f0ab8b0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x56101f0ab678 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x56101f0ab950 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f0ab928 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ab6e8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x56101f0abab8 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0ab9b8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0aba28 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0abc78 <line:226:1, line:228:1>
|   `-BinaryOperator 0x56101f0abc20 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x56101f0abba8 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x56101f0a5e70
|     | `-ImplicitCastExpr 0x56101f0abb90 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x56101f0abb68 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x56101f0ab9b8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x56101f0abc08 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f0abbe0 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0aba28 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x56101f0acdd0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f0accd0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x56101f0acf48 <line:238:1, line:240:1>
| | `-ReturnStmt 0x56101f0acf08 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x56101f0acef0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x56101f0aceb8 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x56101f0a5e18
| |       `-ImplicitCastExpr 0x56101f0acea0 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f0ace78 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x56101f0accd0 'list' 'sys_sflist_t *'
| `-FullComment 0x56101f1bb510 <line:231:3, line:235:68>
|   |-ParagraphComment 0x56101f1bb270 <line:231:3>
|   | `-TextComment 0x56101f1bb240 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bb290 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1bb2f0 <col:10, col:43>
|   |   `-TextComment 0x56101f1bb2c0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x56101f1bb340 <line:233:3>
|   | `-TextComment 0x56101f1bb310 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bb360 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bb3f0 <col:15, col:62>
|   |   `-TextComment 0x56101f1bb3c0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x56101f1bb440 <line:235:3>
|   | `-TextComment 0x56101f1bb410 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1bb460 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x56101f1bb4c0 <col:11, col:68>
|       `-TextComment 0x56101f1bb490 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x56101f0acff8 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f0acf70 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x56101f0ad178 <line:250:1, line:252:1>
| | `-ReturnStmt 0x56101f0ad130 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x56101f0ad118 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x56101f0ad0e0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x56101f0a5e70
| |       `-ImplicitCastExpr 0x56101f0ad0c8 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f0ad0a0 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x56101f0acf70 'list' 'sys_sflist_t *'
| `-FullComment 0x56101f1bb850 <line:243:3, line:247:67>
|   |-ParagraphComment 0x56101f1bb5b0 <line:243:3>
|   | `-TextComment 0x56101f1bb580 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bb5d0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f1bb630 <col:10, col:42>
|   |   `-TextComment 0x56101f1bb600 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x56101f1bb680 <line:245:3>
|   | `-TextComment 0x56101f1bb650 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bb6a0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bb730 <col:15, col:61>
|   |   `-TextComment 0x56101f1bb700 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x56101f1bb780 <line:247:3>
|   | `-TextComment 0x56101f1bb750 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1bb7a0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x56101f1bb800 <col:11, col:67>
|       `-TextComment 0x56101f1bb7d0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x56101f0ad228 prev 0x56101f0ab030 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0ad1a0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x56101f0ad418 <line:265:1, line:267:1>
| | `-ReturnStmt 0x56101f0ad3d8 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x56101f0ad3c0 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x56101f0ad398 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x56101f0ad368 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x56101f0ad310 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x56101f0a5bf0
| |       |   `-ImplicitCastExpr 0x56101f0ad2f8 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x56101f0ad2d0 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ad1a0 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x56101f0ad380 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x56101f0ad348 <col:31> 'unsigned long' 3
| `-FullComment 0x56101f1bbb60 <line:259:3, line:262:60>
|   |-ParagraphComment 0x56101f1bb8f0 <line:259:3>
|   | `-TextComment 0x56101f1bb8c0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bb910 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x56101f1bb970 <col:10, col:51>
|   |   `-TextComment 0x56101f1bb940 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x56101f1bb9c0 <line:261:3>
|   | `-TextComment 0x56101f1bb990 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bb9e0 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bba90 <line:261:15, line:262:3>
|   |   |-TextComment 0x56101f1bba40 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x56101f1bba60 <line:262:3> Text=" "
|   `-BlockCommandComment 0x56101f1bbab0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x56101f1bbb10 <col:11, col:60>
|       `-TextComment 0x56101f1bbae0 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x56101f0ad5c0 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x56101f0ad440 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x56101f0ad4b0 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x56101f0ad7b8 <line:283:1, line:286:1>
| | |-CompoundStmt 0x56101f0ad670 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x56101f0ad680 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x56101f0ad760 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x56101f0ad6d0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x56101f0a5bf0
| |   | `-ImplicitCastExpr 0x56101f0ad6b8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56101f0ad690 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ad440 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x56101f0ad748 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x56101f0ad730 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x56101f0ad708 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x56101f0ad4b0 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x56101f1bbfc0 <line:270:3, line:280:62>
|   |-ParagraphComment 0x56101f1bbc00 <line:270:3>
|   | `-TextComment 0x56101f1bbbd0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bbc20 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x56101f1bbc80 <col:10, col:35>
|   |   `-TextComment 0x56101f1bbc50 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x56101f1bbd20 <line:272:3, line:274:64>
|   | |-TextComment 0x56101f1bbca0 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x56101f1bbcc0 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x56101f1bbce0 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x56101f1bbd90 <line:276:3, line:277:61>
|   | |-TextComment 0x56101f1bbd40 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x56101f1bbd60 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x56101f1bbde0 <line:279:3>
|   | `-TextComment 0x56101f1bbdb0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bbe00 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bbeb0 <line:279:15, line:280:3>
|   |   |-TextComment 0x56101f1bbe60 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x56101f1bbe80 <line:280:3> Text=" "
|   `-ParamCommandComment 0x56101f1bbed0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x56101f1bbf60 <col:16, col:62>
|       `-TextComment 0x56101f1bbf30 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x56101f0ad8f0 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x56101f0ad7f0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x56101f0ad860 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x56101f0adca8 <line:299:1, line:302:1>
| | |-CompoundStmt 0x56101f0ad9a0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x56101f0ad9b0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x56101f0adc50 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x56101f0ada00 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x56101f0a5bf0
| |   | `-ImplicitCastExpr 0x56101f0ad9e8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56101f0ad9c0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ad7f0 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x56101f0adc28 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x56101f0adba8 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x56101f0adb88 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x56101f0adb00 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x56101f0adae8 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x56101f0ada38 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0aacb0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x56101f0adb30 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x56101f0ada60 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ad7f0 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x56101f0adc10 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x56101f0adbf8 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f0adbd0 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x56101f0ad860 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x56101f1bd3d0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x56101f1bd090 <line:289:3>
|   | `-TextComment 0x56101f1bd060 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bd0b0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1bd110 <col:10, col:44>
|   |   `-TextComment 0x56101f1bd0e0 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x56101f1bd1b0 <line:291:3, line:293:64>
|   | |-TextComment 0x56101f1bd130 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x56101f1bd150 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x56101f1bd170 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x56101f1bd200 <line:295:3>
|   | `-TextComment 0x56101f1bd1d0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bd220 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bd2d0 <line:295:15, line:296:3>
|   |   |-TextComment 0x56101f1bd280 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x56101f1bd2a0 <line:296:3> Text=" "
|   `-ParamCommandComment 0x56101f1bd2f0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x56101f1bd380 <col:16, col:62>
|       `-TextComment 0x56101f1bd350 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x56101f0addf0 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f0adcf0 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x56101f1bd710 <line:309:3, line:313:57>
|   |-ParagraphComment 0x56101f1bd470 <line:309:3>
|   | `-TextComment 0x56101f1bd440 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bd490 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1bd4f0 <col:10, col:41>
|   |   `-TextComment 0x56101f1bd4c0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x56101f1bd540 <line:311:3>
|   | `-TextComment 0x56101f1bd510 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bd560 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bd5f0 <col:15, col:44>
|   |   `-TextComment 0x56101f1bd5c0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x56101f1bd640 <line:313:3>
|   | `-TextComment 0x56101f1bd610 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1bd660 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x56101f1bd6c0 <col:11, col:57>
|       `-TextComment 0x56101f1bd690 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x56101f0adf30 prev 0x56101f0addf0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f0adea8 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x56101f0ae228 <line:60:2, line:62:2>
|   `-ReturnStmt 0x56101f0ae1e0 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x56101f0ae1c8 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x56101f0ae1a8 <col:10, col:54> 'int'
|         `-BinaryOperator 0x56101f0ae180 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x56101f0ae0a0 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x56101f0ae088 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x56101f0adfd8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x56101f0ae0d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x56101f0ae000 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x56101f0adea8 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x56101f0ae168 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x56101f0ae148 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x56101f0ae120 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x56101f0ae0e8 <col:23> 'int' 0
|-FunctionDecl 0x56101f0ae2d8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0ae250 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x56101f1bdab0 <line:320:3, line:326:55>
|   |-ParagraphComment 0x56101f1bd7b0 <line:320:3>
|   | `-TextComment 0x56101f1bd780 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bd7d0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x56101f1bd830 <col:10, col:64>
|   |   `-TextComment 0x56101f1bd800 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x56101f1bd880 <line:322:3, col:70>
|   | `-TextComment 0x56101f1bd850 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x56101f1bd8d0 <line:324:3>
|   | `-TextComment 0x56101f1bd8a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bd8f0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bd980 <col:15, col:64>
|   |   `-TextComment 0x56101f1bd950 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x56101f1bd9d0 <line:326:3>
|   | `-TextComment 0x56101f1bd9a0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1bd9f0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x56101f1bda50 <col:11, col:55>
|       `-TextComment 0x56101f1bda20 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x56101f0ae418 prev 0x56101f0ae2d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0ae390 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0ae5b8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x56101f0ae570 <line:68:3, col:42>
|     `-CallExpr 0x56101f0ae528 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x56101f0ae510 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f0ae4c0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0aacb0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x56101f0ae558 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f0ae4e8 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ae390 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x56101f0ae668 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0ae5e0 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x56101f1bddf0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x56101f1bdb50 <line:333:3>
|   | `-TextComment 0x56101f1bdb20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bdb70 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x56101f1bdbd0 <col:10, col:46>
|   |   `-TextComment 0x56101f1bdba0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x56101f1bdc20 <line:335:3>
|   | `-TextComment 0x56101f1bdbf0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bdc40 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bdcd0 <col:15, col:64>
|   |   `-TextComment 0x56101f1bdca0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x56101f1bdd20 <line:337:3>
|   | `-TextComment 0x56101f1bdcf0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1bdd40 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x56101f1bdda0 <col:11, col:55>
|       `-TextComment 0x56101f1bdd70 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x56101f0ae7a8 prev 0x56101f0ae668 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0ae720 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0aeb08 <line:74:2, line:78:2>
|   `-ReturnStmt 0x56101f0aeac8 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x56101f0aea98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x56101f0ae928 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x56101f0ae8f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x56101f0ae850 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ae720 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x56101f0ae910 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x56101f0ae8d8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x56101f0ae8b0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x56101f0ae878 <col:23> 'int' 0
|       |-CallExpr 0x56101f0ae9b8 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x56101f0ae9a0 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x56101f0ae950 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0ae418 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x56101f0ae9e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x56101f0ae978 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0ae720 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x56101f0aea80 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x56101f0aea60 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x56101f0aea38 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x56101f0aea00 <col:23> 'int' 0
|-FunctionDecl 0x56101f0aec30 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0aeb30 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0aeba0 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x56101f1be180 <line:344:3, line:349:47>
|   |-ParagraphComment 0x56101f1bde90 <line:344:3>
|   | `-TextComment 0x56101f1bde60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bdeb0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f1bdf10 <col:10, col:42>
|   |   `-TextComment 0x56101f1bdee0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x56101f1bdf60 <line:346:3, col:63>
|   | `-TextComment 0x56101f1bdf30 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1bdfb0 <line:348:3>
|   | `-TextComment 0x56101f1bdf80 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bdfd0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1be080 <line:348:15, line:349:3>
|   |   |-TextComment 0x56101f1be030 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1be050 <line:349:3> Text=" "
|   `-ParamCommandComment 0x56101f1be0a0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x56101f1be130 <col:15, col:47>
|       `-TextComment 0x56101f1be100 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x56101f0aee00 prev 0x56101f0aec30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0aed00 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0aed70 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0af518 <line:84:2, line:93:2>
|   |-CallExpr 0x56101f0af020 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x56101f0af008 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f0aeeb0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x56101f0ab270 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x56101f0af058 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f0aeed8 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0aed70 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x56101f0aef68 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x56101f0aef50 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56101f0aef00 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x56101f0aef98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f0aef28 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x56101f0aed00 'list' 'sys_sflist_t *'
|   |-CallExpr 0x56101f0af160 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x56101f0af148 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f0af070 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0ab800 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x56101f0af198 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f0af098 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x56101f0aed00 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x56101f0af1b0 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56101f0af0c0 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0aed70 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x56101f0af4b8 <line:89:3, line:92:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x56101f0af310 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x56101f0af230 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x56101f0af218 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x56101f0af1c8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x56101f0af260 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56101f0af1f0 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x56101f0aed00 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x56101f0af2f8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x56101f0af2d8 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x56101f0af2b0 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x56101f0af278 <col:23> 'int' 0
|     |-CompoundStmt 0x56101f0af4a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|     | `-CallExpr 0x56101f0af450 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|     |   |-ImplicitCastExpr 0x56101f0af438 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56101f0af338 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0abab8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x56101f0af488 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x56101f0af360 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x56101f0aed00 'list' 'sys_sflist_t *'
|     |   `-CallExpr 0x56101f0af3f0 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|     |     |-ImplicitCastExpr 0x56101f0af3d8 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x56101f0af388 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|     |     `-ImplicitCastExpr 0x56101f0af420 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|     |       `-DeclRefExpr 0x56101f0af3b0 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x56101f0aed00 'list' 'sys_sflist_t *'
|     `-<<<NULL>>>
|-FunctionDecl 0x56101f0af650 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0af550 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0af5c0 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x56101f1be510 <line:357:3, line:362:46>
|   |-ParagraphComment 0x56101f1be220 <line:357:3>
|   | `-TextComment 0x56101f1be1f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1be240 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1be2a0 <col:10, col:41>
|   |   `-TextComment 0x56101f1be270 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x56101f1be2f0 <line:359:3, col:63>
|   | `-TextComment 0x56101f1be2c0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1be340 <line:361:3>
|   | `-TextComment 0x56101f1be310 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1be360 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1be410 <line:361:15, line:362:3>
|   |   |-TextComment 0x56101f1be3c0 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1be3e0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x56101f1be430 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x56101f1be4c0 <col:15, col:46>
|       `-TextComment 0x56101f1be490 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x56101f0af810 prev 0x56101f0af650 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0af710 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0af780 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0b0088 <line:99:2, line:111:2>
|   |-CallExpr 0x56101f0af9a8 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x56101f0af990 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f0af8c0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x56101f0ab270 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x56101f0af9e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f0af8e8 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0af780 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x56101f0af9f8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x56101f0af970 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x56101f0af948 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x56101f0af910 <col:23> 'int' 0
|   `-IfStmt 0x56101f0b0020 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x56101f0afb58 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x56101f0afa78 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x56101f0afa60 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x56101f0afa10 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x56101f0afaa8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56101f0afa38 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x56101f0af710 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x56101f0afb40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x56101f0afb20 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x56101f0afaf8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x56101f0afac0 <col:23> 'int' 0
|     |-CompoundStmt 0x56101f0afd80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x56101f0afc10 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x56101f0afbf8 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x56101f0afb80 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0abab8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x56101f0afc48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56101f0afba8 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x56101f0af710 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x56101f0afc60 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56101f0afbd0 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0af780 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x56101f0afd18 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x56101f0afd00 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56101f0afc78 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0ab800 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x56101f0afd50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x56101f0afca0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x56101f0af710 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x56101f0afd68 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x56101f0afcc8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0af780 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x56101f0b0000 <line:105:10, line:110:3>
|       |-CallExpr 0x56101f0afeb8 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x56101f0afea0 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x56101f0afda0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x56101f0ab270 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x56101f0afe30 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x56101f0afe18 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56101f0afdc8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x56101f0afe60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x56101f0afdf0 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x56101f0af710 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x56101f0afef0 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x56101f0afe78 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0af780 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x56101f0aff98 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x56101f0aff80 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56101f0aff08 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0abab8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x56101f0affd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x56101f0aff30 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x56101f0af710 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x56101f0affe8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56101f0aff58 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0af780 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x56101f0b02e0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x56101f0b00b8 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0b0130 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x56101f0b01a8 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x56101f1bea70 <line:370:3, line:380:66>
|   |-ParagraphComment 0x56101f1be5b0 <line:370:3>
|   | `-TextComment 0x56101f1be580 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1be5d0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1be630 <col:10, col:41>
|   |   `-TextComment 0x56101f1be600 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x56101f1be720 <line:372:3, line:374:63>
|   | |-TextComment 0x56101f1be650 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x56101f1be670 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x56101f1be6c0 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x56101f1be6e0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1be770 <line:376:3, col:48>
|   | `-TextComment 0x56101f1be740 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x56101f1be7c0 <line:378:3>
|   | `-TextComment 0x56101f1be790 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1be7e0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1be890 <line:378:15, line:379:3>
|   |   |-TextComment 0x56101f1be840 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1be860 <line:379:3> Text=" "
|   |-ParamCommandComment 0x56101f1be8b0 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x56101f1be960 <line:379:15, line:380:3>
|   |   |-TextComment 0x56101f1be910 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x56101f1be930 <line:380:3> Text=" "
|   `-ParamCommandComment 0x56101f1be980 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x56101f1bea10 <col:15, col:66>
|       `-TextComment 0x56101f1be9e0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x56101f0b0530 prev 0x56101f0b02e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x56101f0b03a8 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0b0420 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x56101f0b0498 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x56101f0b0be8 <col:31, line:127:42>
|   |-IfStmt 0x56101f0b0a58 <line:118:2, line:125:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f0b0730 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x56101f0b0650 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x56101f0b0638 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f0b05e8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x56101f0b0680 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x56101f0b0610 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b03a8 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x56101f0b0718 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x56101f0b06f8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x56101f0b06d0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x56101f0b0698 <col:23> 'int' 0
|   | |-CompoundStmt 0x56101f0b0888 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x56101f0b0838 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x56101f0b0820 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56101f0b0758 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0ab800 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x56101f0b0870 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x56101f0b0780 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b03a8 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x56101f0b07f8 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x56101f0b07e0 <col:31> 'void *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x56101f0b07a8 <col:31> 'void *' lvalue ParmVar 0x56101f0b0420 'head' 'void *'
|   | `-CompoundStmt 0x56101f0b0a40 <line:121:9, line:125:2>
|   |   `-CallExpr 0x56101f0b0a08 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x56101f0b09f0 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56101f0b08a0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x56101f0ab270 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x56101f0b0930 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x56101f0b0918 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x56101f0b08c8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x56101f0b0960 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56101f0b08f0 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b03a8 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x56101f0b09c8 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x56101f0b09b0 <col:29> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x56101f0b0978 <col:29> 'void *' lvalue ParmVar 0x56101f0b0420 'head' 'void *'
|   `-CallExpr 0x56101f0b0b70 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x56101f0b0b58 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f0b0a90 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0abab8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x56101f0b0ba8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f0b0ab8 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b03a8 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x56101f0b0b30 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x56101f0b0b18 <col:35> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f0b0ae0 <col:35> 'void *' lvalue ParmVar 0x56101f0b0498 'tail' 'void *'
|-FunctionDecl 0x56101f0b0dc0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f0b0c18 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0b0c88 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x56101f1bee20 <line:388:3, line:394:57>
|   |-ParagraphComment 0x56101f1beb10 <line:388:3>
|   | `-TextComment 0x56101f1beae0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1beb30 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x56101f1beb90 <col:10, col:66>
|   |   `-TextComment 0x56101f1beb60 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x56101f1bec00 <line:390:3, line:391:63>
|   | |-TextComment 0x56101f1bebb0 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x56101f1bebd0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1bec50 <line:393:3>
|   | `-TextComment 0x56101f1bec20 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bec70 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bed20 <line:393:15, line:394:3>
|   |   |-TextComment 0x56101f1becd0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1becf0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x56101f1bed40 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x56101f1bedd0 <col:25, col:57>
|       `-TextComment 0x56101f1beda0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x56101f0b0f80 prev 0x56101f0b0dc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f0b0e80 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0b0ef0 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x56101f0b1648 <line:135:2, line:141:2>
|   |-DeclStmt 0x56101f0b1128 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x56101f0b1040 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x56101f0b10b0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x56101f0b1218 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x56101f0b1140 <col:3> 'sys_sfnode_t *' lvalue Var 0x56101f0b1040 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x56101f0b11d0 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x56101f0b11b8 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56101f0b1168 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x56101f0b1200 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f0b1190 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b0ef0 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x56101f0b1318 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x56101f0b1240 <col:3> 'sys_sfnode_t *' lvalue Var 0x56101f0b10b0 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x56101f0b12d0 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x56101f0b12b8 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56101f0b1268 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x56101f0b1300 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f0b1290 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b0ef0 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x56101f0b1450 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x56101f0b1438 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f0b1340 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x56101f0b0530 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x56101f0b1490 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f0b1368 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b0e80 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x56101f0b14c0 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x56101f0b14a8 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56101f0b1390 <col:41> 'sys_sfnode_t *' lvalue Var 0x56101f0b1040 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x56101f0b14f0 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x56101f0b14d8 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f0b13b8 <col:47> 'sys_sfnode_t *' lvalue Var 0x56101f0b10b0 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x56101f0b15d0 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x56101f0b15b8 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f0b1508 <col:1> 'void (sys_sflist_t *)' Function 0x56101f0a6220 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x56101f0b1600 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f0b1530 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b0ef0 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x56101f0b18a0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0b1690 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0b1700 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x56101f0b1770 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x56101f1bf2a0 <line:402:3, line:408:46>
|   |-ParagraphComment 0x56101f1beec0 <line:402:3>
|   | `-TextComment 0x56101f1bee90 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1beee0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1bef40 <col:10, col:41>
|   |   `-TextComment 0x56101f1bef10 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x56101f1bef90 <line:404:3, col:63>
|   | `-TextComment 0x56101f1bef60 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1befe0 <line:406:3>
|   | `-TextComment 0x56101f1befb0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bf000 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bf0c0 <line:406:15, line:407:3>
|   |   |-TextComment 0x56101f1bf070 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1bf090 <line:407:3> Text=" "
|   |-ParamCommandComment 0x56101f1bf0e0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x56101f1bf190 <line:407:15, line:408:3>
|   |   |-TextComment 0x56101f1bf140 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x56101f1bf160 <line:408:3> Text=" "
|   `-ParamCommandComment 0x56101f1bf1b0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x56101f1bf240 <col:15, col:46>
|       `-TextComment 0x56101f1bf210 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x56101f0b1ae0 prev 0x56101f0b18a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0b1968 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0b19d8 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x56101f0b1a48 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f09db08 <line:148:2, line:158:2>
|   `-IfStmt 0x56101f09daa0 <line:149:3, line:157:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x56101f0b1c70 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x56101f0b1c40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x56101f0b1b98 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b19d8 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x56101f0b1c58 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x56101f0b1c20 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x56101f0b1bf8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x56101f0b1bc0 <col:23> 'int' 0
|     |-CompoundStmt 0x56101f09d550 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x56101f09d4e8 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x56101f09d4d0 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56101f0b1c98 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0aee00 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x56101f09d520 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x56101f0b1cc0 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b1968 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x56101f09d538 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x56101f0b1ce8 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b1a48 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x56101f09da68 <line:151:10, line:157:3>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x56101f09d6b0 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x56101f09d5d0 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x56101f09d5b8 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56101f09d568 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0aacb0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x56101f09d600 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x56101f09d590 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b19d8 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x56101f09d698 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x56101f09d678 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x56101f09d650 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x56101f09d618 <col:23> 'int' 0
|       |-CompoundStmt 0x56101f09d7d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x56101f09d768 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x56101f09d750 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56101f09d6d8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0af810 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x56101f09d7a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x56101f09d700 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b1968 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x56101f09d7b8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x56101f09d728 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b1a48 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x56101f09da48 <line:153:10, line:157:3>
|         |-CallExpr 0x56101f09d900 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x56101f09d8e8 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x56101f09d7e8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x56101f0ab270 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x56101f09d938 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x56101f09d810 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b1a48 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x56101f09d8a0 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x56101f09d888 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x56101f09d838 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0aacb0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x56101f09d8d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x56101f09d860 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b19d8 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x56101f09d9e0 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x56101f09d9c8 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x56101f09d950 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x56101f0ab270 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x56101f09da18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x56101f09d978 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b19d8 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x56101f09da30 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x56101f09d9a0 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b1a48 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x56101f09dbb8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f09db30 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x56101f1bf660 <line:417:3, line:424:50>
|   |-ParagraphComment 0x56101f1bf340 <line:417:3>
|   | `-TextComment 0x56101f1bf310 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bf360 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x56101f1bf3c0 <col:10, col:59>
|   |   `-TextComment 0x56101f1bf390 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x56101f1bf430 <line:419:3, line:420:63>
|   | |-TextComment 0x56101f1bf3e0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x56101f1bf400 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1bf480 <line:422:3>
|   | `-TextComment 0x56101f1bf450 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bf4a0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bf530 <col:15, col:46>
|   |   `-TextComment 0x56101f1bf500 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x56101f1bf580 <line:424:3>
|   | `-TextComment 0x56101f1bf550 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1bf5a0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x56101f1bf600 <col:11, col:50>
|       `-TextComment 0x56101f1bf5d0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x56101f09dcf8 prev 0x56101f09dbb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f09dc70 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x56101f09e398 <line:163:2, line:175:2>
|   |-DeclStmt 0x56101f09dec0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x56101f09ddb0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x56101f09de78 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x56101f09de60 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56101f09de10 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x56101f09dea8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x56101f09de38 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x56101f09dc70 'list' 'sys_sflist_t *'
|   |-CallExpr 0x56101f09dff0 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x56101f09dfd8 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f09ded8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0ab800 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x56101f09e028 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x56101f09df00 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x56101f09dc70 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x56101f09df90 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x56101f09df78 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56101f09df28 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0aacb0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x56101f09dfc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56101f09df50 <col:33> 'sys_sfnode_t *' lvalue Var 0x56101f09ddb0 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x56101f09e2d8 <line:169:3, line:172:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f09e130 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x56101f09e0a8 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x56101f09e090 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f09e040 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x56101f09e0d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x56101f09e068 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x56101f09dc70 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x56101f09e118 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56101f09e0f0 <col:46> 'sys_sfnode_t *' lvalue Var 0x56101f09ddb0 'node' 'sys_sfnode_t *'
|   | |-CompoundStmt 0x56101f09e2c0 <col:52, line:172:3>
|   | | `-CallExpr 0x56101f09e270 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   | |   |-ImplicitCastExpr 0x56101f09e258 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56101f09e158 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0abab8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x56101f09e2a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x56101f09e180 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x56101f09dc70 'list' 'sys_sflist_t *'
|   | |   `-CallExpr 0x56101f09e210 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   | |     |-ImplicitCastExpr 0x56101f09e1f8 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x56101f09e1a8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |     `-ImplicitCastExpr 0x56101f09e240 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x56101f09e1d0 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x56101f09dc70 'list' 'sys_sflist_t *'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x56101f09e350 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x56101f09e338 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f09e310 <col:10> 'sys_sfnode_t *' lvalue Var 0x56101f09ddb0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x56101f09e4e0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f09e3d8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x56101f1bfa00 <line:431:3, line:437:69>
|   |-ParagraphComment 0x56101f1bf700 <line:431:3>
|   | `-TextComment 0x56101f1bf6d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bf720 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x56101f1bf780 <col:10, col:59>
|   |   `-TextComment 0x56101f1bf750 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x56101f1bf7d0 <line:433:3, col:63>
|   | `-TextComment 0x56101f1bf7a0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1bf820 <line:435:3>
|   | `-TextComment 0x56101f1bf7f0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bf840 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bf8d0 <col:15, col:46>
|   |   `-TextComment 0x56101f1bf8a0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x56101f1bf920 <line:437:3>
|   | `-TextComment 0x56101f1bf8f0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1bf940 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x56101f1bf9a0 <col:11, col:69>
|       `-TextComment 0x56101f1bf970 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x56101f09e620 prev 0x56101f09e4e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x56101f09e598 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x56101f09e9a8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x56101f09e968 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x56101f09e938 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x56101f09e908 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x56101f09e790 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x56101f09e778 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56101f09e6c8 <col:1> 'bool (sys_sflist_t *)' Function 0x56101f0adf30 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x56101f09e7c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x56101f09e6f0 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x56101f09e598 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x56101f09e920 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x56101f09e838 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x56101f09e810 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x56101f09e7d8 <col:23> 'int' 0
|       `-CallExpr 0x56101f09e8c0 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x56101f09e8a8 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56101f09e858 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f09dcf8 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x56101f09e8f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56101f09e880 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x56101f09e598 'list' 'sys_sflist_t *'
|-FunctionDecl 0x56101f09eb48 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f09e9d0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f09ea40 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x56101f09eab0 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x56101f1bfea0 <line:444:3, line:451:46>
|   |-ParagraphComment 0x56101f1bfaa0 <line:444:3>
|   | `-TextComment 0x56101f1bfa70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bfac0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x56101f1bfb20 <col:10, col:23>
|   |   `-TextComment 0x56101f1bfaf0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x56101f1bfb70 <line:446:3, col:63>
|   | `-TextComment 0x56101f1bfb40 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1bfbc0 <line:448:3>
|   | `-TextComment 0x56101f1bfb90 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1bfbe0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1bfc90 <line:448:15, line:449:3>
|   |   |-TextComment 0x56101f1bfc40 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1bfc60 <line:449:3> Text=" "
|   |-ParamCommandComment 0x56101f1bfcb0 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1bfd90 <line:449:20, line:451:3>
|   |   |-TextComment 0x56101f1bfd10 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x56101f1bfd30 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x56101f1bfd50 <line:451:3> Text=" "
|   `-ParamCommandComment 0x56101f1bfdb0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x56101f1bfe40 <col:15, col:46>
|       `-TextComment 0x56101f1bfe10 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x56101f09ed88 prev 0x56101f09eb48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f09ec10 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f09ec80 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x56101f09ecf0 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0b9198 <line:190:2, line:212:2>
|   |-IfStmt 0x56101f0b8fe0 <line:191:3, line:209:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f09ef18 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x56101f09eee8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x56101f09ee40 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x56101f09ec80 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x56101f09ef00 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x56101f09eec8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x56101f09eea0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x56101f09ee68 <col:23> 'int' 0
|   | |-CompoundStmt 0x56101f09f378 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x56101f09f058 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x56101f09f040 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f09ef40 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0ab800 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x56101f09f090 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x56101f09ef68 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x56101f09ec10 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x56101f09eff8 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x56101f09efe0 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x56101f09ef90 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0aacb0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x56101f09f028 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x56101f09efb8 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x56101f09ecf0 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x56101f09f340 <line:196:4, line:199:4>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x56101f09f198 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x56101f09f110 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x56101f09f0f8 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x56101f09f0a8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x56101f09f140 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x56101f09f0d0 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x56101f09ec10 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x56101f09f180 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x56101f09f158 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x56101f09ecf0 'node' 'sys_sfnode_t *'
|   | |   |-CompoundStmt 0x56101f09f328 <col:53, line:199:4>
|   | |   | `-CallExpr 0x56101f09f2d8 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x56101f09f2c0 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x56101f09f1c0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0abab8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |   |-ImplicitCastExpr 0x56101f09f310 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x56101f09f1e8 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x56101f09ec10 'list' 'sys_sflist_t *'
|   | |   |   `-CallExpr 0x56101f09f278 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |   |     |-ImplicitCastExpr 0x56101f09f260 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x56101f09f210 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   |     `-ImplicitCastExpr 0x56101f09f2a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x56101f09f238 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x56101f09ec10 'list' 'sys_sflist_t *'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x56101f0b8fc0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x56101f09f4b0 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x56101f09f498 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x56101f09f398 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x56101f0ab270 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x56101f0b8d48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x56101f09f3c0 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x56101f09ec80 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x56101f09f450 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x56101f09f438 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x56101f09f3e8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0aacb0 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x56101f09f480 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56101f09f410 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x56101f09ecf0 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x56101f0b8f88 <line:205:4, line:208:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x56101f0b8e50 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x56101f0b8dc8 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x56101f0b8db0 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x56101f0b8d60 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x56101f0b8df8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56101f0b8d88 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x56101f09ec10 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x56101f0b8e38 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56101f0b8e10 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x56101f09ecf0 'node' 'sys_sfnode_t *'
|   |     |-CompoundStmt 0x56101f0b8f70 <col:53, line:208:4>
|   |     | `-CallExpr 0x56101f0b8f08 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |     |   |-ImplicitCastExpr 0x56101f0b8ef0 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x56101f0b8e78 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0abab8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |   |-ImplicitCastExpr 0x56101f0b8f40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x56101f0b8ea0 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x56101f09ec10 'list' 'sys_sflist_t *'
|   |     |   `-ImplicitCastExpr 0x56101f0b8f58 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56101f0b8ec8 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x56101f09ec80 'prev_node' 'sys_sfnode_t *'
|   |     `-<<<NULL>>>
|   `-CallExpr 0x56101f0b9100 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x56101f0b90e8 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f0b9018 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x56101f0ab270 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x56101f0b9138 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f0b9040 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x56101f09ecf0 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x56101f0b9150 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x56101f0b90c8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x56101f0b90a0 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x56101f0b9068 <col:23> 'int' 0
|-FunctionDecl 0x56101f0b9350 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0b91c8 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0b9238 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x56101f1c0310 <line:460:3, line:467:35>
|   |-ParagraphComment 0x56101f1bff40 <line:460:3>
|   | `-TextComment 0x56101f1bff10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1bff60 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1bffc0 <col:10, col:44>
|   |   `-TextComment 0x56101f1bff90 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x56101f1c0010 <line:462:3, col:63>
|   | `-TextComment 0x56101f1bffe0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x56101f1c0060 <line:464:3>
|   | `-TextComment 0x56101f1c0030 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1c0080 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x56101f1c0130 <line:464:15, line:465:3>
|   |   |-TextComment 0x56101f1c00e0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x56101f1c0100 <line:465:3> Text=" "
|   |-ParamCommandComment 0x56101f1c0150 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x56101f1c01e0 <col:15, col:60>
|   |   `-TextComment 0x56101f1c01b0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x56101f1c0230 <line:467:3>
|   | `-TextComment 0x56101f1c0200 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1c0250 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1c02b0 <col:11, col:35>
|       `-TextComment 0x56101f1c0280 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x56101f0b9510 prev 0x56101f0b9350 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x56101f0b9410 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x56101f0b9480 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x56101f0b9eb0 <line:218:2, line:233:2>
|   |-DeclStmt 0x56101f0b96c8 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x56101f0b95d0 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x56101f0b96b0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x56101f0b9690 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x56101f0b9668 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x56101f0b9630 <col:23> 'int' 0
|   |-DeclStmt 0x56101f0b9750 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x56101f0b96f0 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x56101f0b9e28 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x56101f0b9840 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x56101f0b9768 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x56101f0b96f0 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x56101f0b97f8 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x56101f0b97e0 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56101f0b9790 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x56101f0b9828 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x56101f0b97b8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b9410 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f0b9940 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x56101f0b9910 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x56101f0b9868 <col:42> 'sys_sfnode_t *' lvalue Var 0x56101f0b96f0 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x56101f0b9928 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x56101f0b98f0 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x56101f0b98c8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x56101f0b9890 <col:23> 'int' 0
|   | |-BinaryOperator 0x56101f0b9a40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x56101f0b9968 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x56101f0b96f0 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x56101f0b99f8 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x56101f0b99e0 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56101f0b9990 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0ae7a8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x56101f0b9a28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x56101f0b99b8 <col:42> 'sys_sfnode_t *' lvalue Var 0x56101f0b96f0 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x56101f0b9e08 <col:48, line:230:3>
|   |   |-IfStmt 0x56101f0b9d40 <line:223:4, line:227:4>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x56101f0b9ae8 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x56101f0b9ab8 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x56101f0b9a68 <col:8> 'sys_sfnode_t *' lvalue Var 0x56101f0b96f0 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x56101f0b9ad0 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56101f0b9a90 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b9480 'node' 'sys_sfnode_t *'
|   |   | |-CompoundStmt 0x56101f0b9cf8 <col:22, line:227:4>
|   |   | | |-CallExpr 0x56101f0b9c20 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   | | | |-ImplicitCastExpr 0x56101f0b9c08 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x56101f0b9b10 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x56101f09ed88 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   | | | |-ImplicitCastExpr 0x56101f0b9c60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x56101f0b9b38 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x56101f0b9410 'list' 'sys_sflist_t *'
|   |   | | | |-ImplicitCastExpr 0x56101f0b9c78 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x56101f0b9b60 <col:38> 'sys_sfnode_t *' lvalue Var 0x56101f0b95d0 'prev' 'sys_sfnode_t *'
|   |   | | | `-ImplicitCastExpr 0x56101f0b9c90 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x56101f0b9b88 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x56101f0b9480 'node' 'sys_sfnode_t *'
|   |   | | `-ReturnStmt 0x56101f0b9ce0 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   | |   `-ImplicitCastExpr 0x56101f0b9cc8 <col:16> 'bool' <IntegralToBoolean>
|   |   | |     `-IntegerLiteral 0x56101f0b9ca8 <col:16> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-BinaryOperator 0x56101f0b9de0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x56101f0b9d78 <col:4> 'sys_sfnode_t *' lvalue Var 0x56101f0b95d0 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x56101f0b9dc8 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x56101f0b9da0 <col:11> 'sys_sfnode_t *' lvalue Var 0x56101f0b96f0 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x56101f0b9e98 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x56101f0b9e80 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x56101f0b9e60 <col:16> 'int' 0
|-RecordDecl 0x56101f0b9ee0 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x56101f0b9f90 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x56101f0ba0a8 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x56101f0ba218 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x56101f0ba2b0 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x56101f0ba308 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x56101f0ba2b0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x56101f0ba0a8 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x56101f0ba358 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x56101f0ba2b0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x56101f0ba218 'bits' 'u32_t [2]'
| `-FieldDecl 0x56101f0ba3a8 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x56101f0ba440 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x56101f0ba508 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x56101f0ba560 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x56101f0ba5e0 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x56101f0ba638 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x56101f0ba6b0 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x56101f0ba7b0 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x56101f0ba808 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x56101f0baa00 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x56101f0ba900 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x56101f0be848 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x56101f0baad0 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x56101f0bab40 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f0babb0 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x56101f0bac20 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x56101f0bacc0 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x56101f0beb50 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x56101f0be938 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x56101f0be9a8 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x56101f0bea18 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x56101f0bec08 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x56101f0becd8 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x56101f0bed70 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x56101f0bed20 'struct _ready_q' sugar
|   `-RecordType 0x56101f0bec90 'struct _ready_q'
|     `-Record 0x56101f0bec08 '_ready_q'
|-RecordDecl 0x56101f0bedc8 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x56101f0bee80 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x56101f0beee0 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x56101f0bef50 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x56101f0befc0 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x56101f0bf018 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x56101f0bf0b0 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x56101f0bf060 'struct _cpu' sugar
|   `-RecordType 0x56101f0bee50 'struct _cpu'
|     `-Record 0x56101f0bedc8 '_cpu'
|-RecordDecl 0x56101f0bf108 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x56101f0bf1b0 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x56101f0bf2a8 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x56101f0bf2f0 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x56101f0bf3b0 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x56101f0bf410 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x56101f0bf480 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x56101f0bf520 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x56101f0bf578 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x56101f0bf520 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x56101f0bf3b0 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x56101f0bf5c8 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x56101f0bf520 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x56101f0bf410 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x56101f0bf618 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x56101f0bf520 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x56101f0bf480 'current' 'struct k_thread *'
| `-FieldDecl 0x56101f0bf6e0 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x56101f0c3af0 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x56101f0c3aa0 'struct z_kernel' sugar
|   `-RecordType 0x56101f0bf190 'struct z_kernel'
|     `-Record 0x56101f0bf108 'z_kernel'
|-VarDecl 0x56101f0c3b68 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x56101f0c3d20 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x56101f1c05c0 <line:40:3, line:45:25>
|   |-ParagraphComment 0x56101f1c03b0 <line:40:3>
|   | `-TextComment 0x56101f1c0380 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c03d0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x56101f1c0430 <col:10, col:56>
|   |   `-TextComment 0x56101f1c0400 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x56101f1c04a0 <line:42:3, line:43:27>
|   | |-TextComment 0x56101f1c0450 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x56101f1c0470 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x56101f1c04f0 <line:45:3>
|   | `-TextComment 0x56101f1c04c0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1c0510 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x56101f1c0570 <col:11, col:25>
|       `-TextComment 0x56101f1c0540 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x56101f0c3f08 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x56101f1c0910 <line:37:3, line:43:31>
|   |-ParagraphComment 0x56101f1c0660 <line:37:3>
|   | `-TextComment 0x56101f1c0630 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c0680 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x56101f1c0700 <line:37:10, line:38:20>
|   |   |-TextComment 0x56101f1c06b0 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x56101f1c06d0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x56101f1c0750 <line:40:3>
|   | `-TextComment 0x56101f1c0720 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c0770 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x56101f1c07f0 <line:40:9, line:41:23>
|   |   |-TextComment 0x56101f1c07a0 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x56101f1c07c0 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x56101f1c0840 <line:43:3>
|   | `-TextComment 0x56101f1c0810 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1c0860 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x56101f1c08c0 <col:11, col:31>
|       `-TextComment 0x56101f1c0890 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x56101f0c4170 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x56101f0c3ff0 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x56101f0c4060 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x56101f1c0dc0 <line:47:3, line:56:1>
|   |-ParagraphComment 0x56101f1c09b0 <line:47:3>
|   | `-TextComment 0x56101f1c0980 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c09d0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x56101f1c0a50 <line:47:10, line:48:33>
|   |   |-TextComment 0x56101f1c0a00 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x56101f1c0a20 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x56101f1c0aa0 <line:50:3>
|   | `-TextComment 0x56101f1c0a70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c0ac0 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x56101f1c0b40 <line:50:9, line:51:31>
|   |   |-TextComment 0x56101f1c0af0 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x56101f1c0b10 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x56101f1c0b90 <line:53:3>
|   | `-TextComment 0x56101f1c0b60 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1c0bb0 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x56101f1c0c60 <line:53:20, line:54:3>
|   |   |-TextComment 0x56101f1c0c10 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x56101f1c0c30 <line:54:3> Text=" "
|   |-ParamCommandComment 0x56101f1c0c80 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x56101f1c0d10 <col:14, col:45>
|   |   `-TextComment 0x56101f1c0ce0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x56101f1c0d60 <line:56:1>
|     `-TextComment 0x56101f1c0d30 <col:1> Text=" "
|-FunctionDecl 0x56101f0c43e8 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x56101f0c4260 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x56101f0c42d0 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x56101f1c1370 <line:60:3, line:71:1>
|   |-ParagraphComment 0x56101f1c0e60 <line:60:3>
|   | `-TextComment 0x56101f1c0e30 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c0e80 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x56101f1c0f00 <line:60:10, line:61:22>
|   |   |-TextComment 0x56101f1c0eb0 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x56101f1c0ed0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x56101f1c0f50 <line:63:3>
|   | `-TextComment 0x56101f1c0f20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c0f70 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x56101f1c0ff0 <line:63:9, line:64:42>
|   |   |-TextComment 0x56101f1c0fa0 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x56101f1c0fc0 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x56101f1c1040 <line:66:3>
|   | `-TextComment 0x56101f1c1010 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1c1080 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x56101f1c1130 <line:66:20, line:67:3>
|   |   |-TextComment 0x56101f1c10e0 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x56101f1c1100 <line:67:3> Text=" "
|   |-ParamCommandComment 0x56101f1c1150 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x56101f1c11e0 <col:14, col:45>
|   |   `-TextComment 0x56101f1c11b0 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x56101f1c1230 <line:69:3>
|   | `-TextComment 0x56101f1c1200 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c1250 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x56101f1c12b0 <col:11, col:53>
|   |   `-TextComment 0x56101f1c1280 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x56101f1c1300 <line:71:1>
|     `-TextComment 0x56101f1c12d0 <col:1> Text=" "
|-TypedefDecl 0x56101f0e0910 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x56101f0c4980 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x56101f0c4920 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x56101f0c48b0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x56101f0c4500 'uintptr_t' sugar
| |     | |-Typedef 0x56101efd8c68 'uintptr_t'
| |     | `-BuiltinType 0x56101ef8ea70 'unsigned long'
| |     |-TypedefType 0x56101f0c4500 'uintptr_t' sugar
| |     | |-Typedef 0x56101efd8c68 'uintptr_t'
| |     | `-BuiltinType 0x56101ef8ea70 'unsigned long'
| |     |-TypedefType 0x56101f0c4500 'uintptr_t' sugar
| |     | |-Typedef 0x56101efd8c68 'uintptr_t'
| |     | `-BuiltinType 0x56101ef8ea70 'unsigned long'
| |     |-TypedefType 0x56101f0c4500 'uintptr_t' sugar
| |     | |-Typedef 0x56101efd8c68 'uintptr_t'
| |     | `-BuiltinType 0x56101ef8ea70 'unsigned long'
| |     |-TypedefType 0x56101f0c4500 'uintptr_t' sugar
| |     | |-Typedef 0x56101efd8c68 'uintptr_t'
| |     | `-BuiltinType 0x56101ef8ea70 'unsigned long'
| |     |-TypedefType 0x56101f0c4500 'uintptr_t' sugar
| |     | |-Typedef 0x56101efd8c68 'uintptr_t'
| |     | `-BuiltinType 0x56101ef8ea70 'unsigned long'
| |     |-TypedefType 0x56101f0c4500 'uintptr_t' sugar
| |     | |-Typedef 0x56101efd8c68 'uintptr_t'
| |     | `-BuiltinType 0x56101ef8ea70 'unsigned long'
| |     `-PointerType 0x56101ef8edb0 'void *'
| |       `-BuiltinType 0x56101ef8e910 'void'
| `-FullComment 0x56101f1c2000 <line:50:3, line:84:1>
|   |-ParagraphComment 0x56101f1c1410 <line:50:3>
|   | `-TextComment 0x56101f1c13e0 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1c1430 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x56101f1c14a0 <line:51:3>
|   | `-TextComment 0x56101f1c1470 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c14c0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1c1520 <col:10, col:43>
|   |   `-TextComment 0x56101f1c14f0 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x56101f1c1590 <line:53:3, line:54:67>
|   | |-TextComment 0x56101f1c1540 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x56101f1c1560 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x56101f1c1770 <line:56:3, line:66:41>
|   | |-TextComment 0x56101f1c15b0 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x56101f1c15d0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x56101f1c15f0 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x56101f1c1610 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x56101f1c1630 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x56101f1c1650 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x56101f1c1670 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x56101f1c1690 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x56101f1c16b0 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x56101f1c16d0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x56101f1c16f0 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x56101f1c17e0 <line:68:3, line:69:70>
|   | |-TextComment 0x56101f1c1790 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x56101f1c17b0 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x56101f1c1830 <line:71:3, col:80>
|   | `-TextComment 0x56101f1c1800 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x56101f1c1880 <line:73:3>
|   | `-TextComment 0x56101f1c1850 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1c18a0 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x56101f1c1950 <line:73:15, line:74:3>
|   |   |-TextComment 0x56101f1c1900 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x56101f1c1920 <line:74:3> Text=" "
|   |-ParamCommandComment 0x56101f1c1970 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x56101f1c1a20 <line:74:15, line:75:3>
|   |   |-TextComment 0x56101f1c19d0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x56101f1c19f0 <line:75:3> Text=" "
|   |-ParamCommandComment 0x56101f1c1a40 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x56101f1c1af0 <line:75:15, line:76:3>
|   |   |-TextComment 0x56101f1c1aa0 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x56101f1c1ac0 <line:76:3> Text=" "
|   |-ParamCommandComment 0x56101f1c1b10 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x56101f1c1bc0 <line:76:15, line:77:3>
|   |   |-TextComment 0x56101f1c1b70 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x56101f1c1b90 <line:77:3> Text=" "
|   |-ParamCommandComment 0x56101f1c1be0 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x56101f1c1c90 <line:77:15, line:78:3>
|   |   |-TextComment 0x56101f1c1c40 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x56101f1c1c60 <line:78:3> Text=" "
|   |-ParamCommandComment 0x56101f1c1cb0 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x56101f1c1d60 <line:78:15, line:79:3>
|   |   |-TextComment 0x56101f1c1d10 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x56101f1c1d30 <line:79:3> Text=" "
|   |-ParamCommandComment 0x56101f1c1d80 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x56101f1c1e60 <line:79:14, line:81:3>
|   |   |-TextComment 0x56101f1c1de0 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x56101f1c1e00 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x56101f1c1e20 <line:81:3> Text=" "
|   |-BlockCommandComment 0x56101f1c1e80 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x56101f1c1f00 <line:81:11, line:82:22>
|   |   |-TextComment 0x56101f1c1eb0 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x56101f1c1ed0 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x56101f1c1f50 <line:84:1>
|     `-TextComment 0x56101f1c1f20 <col:1> Text=" "
|-FunctionDecl 0x56101f0e0a30 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x56101f0e0c58 <line:94:1, line:106:1>
| | |-DeclStmt 0x56101f0e0bc0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x56101f0e0b28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x56101f0e0ba8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x56101f0e0b88 <col:16> 'int' 0
| | `-ReturnStmt 0x56101f0e0c18 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x56101f0e0c00 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f0e0bd8 <col:9> 'bool' lvalue Var 0x56101f0e0b28 'ret' 'bool'
| `-AlwaysInlineAttr 0x56101f0e0ad0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x56101f0e0d08 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x56101f0e0df8 <line:114:1, line:120:1>
| | `-ReturnStmt 0x56101f0e0de0 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x56101f0e0dc8 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x56101f0e0da8 <col:16> 'int' 0
| `-FullComment 0x56101f1c21b0 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x56101f1c20a0 <line:109:3, col:53>
|   | `-TextComment 0x56101f1c2070 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x56101f1c20f0 <line:111:3>
|   | `-TextComment 0x56101f1c20c0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1c2110 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x56101f1c2170 <col:11, col:69>
|       `-TextComment 0x56101f1c2140 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-TypedefDecl 0x56101f0e0e40 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x56101f0e0e10 '__builtin_va_list' sugar
|   |-Typedef 0x56101ef8f4d8 '__builtin_va_list'
|   `-ConstantArrayType 0x56101ef8f480 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x56101ef8f2f0 'struct __va_list_tag'
|       `-Record 0x56101ef8f268 '__va_list_tag'
|-TypedefDecl 0x56101f0e0ed0 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x56101f0e0ea0 '__gnuc_va_list' sugar
|   |-Typedef 0x56101f0e0e40 '__gnuc_va_list'
|   `-TypedefType 0x56101f0e0e10 '__builtin_va_list' sugar
|     |-Typedef 0x56101ef8f4d8 '__builtin_va_list'
|     `-ConstantArrayType 0x56101ef8f480 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x56101ef8f2f0 'struct __va_list_tag'
|         `-Record 0x56101ef8f268 '__va_list_tag'
|-FunctionDecl 0x56101f0e1080 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 used printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x56101f0e0fc0 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x56101f0e1248 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x56101f0e1220 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x56101f0e1208 <col:29, col:31> 'const char *' <LValueToRValue>
| |     `-ParenExpr 0x56101f0e11e8 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x56101f0e1180 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x56101f0e0fc0 'fmt' 'const char *'
| `-FormatAttr 0x56101f0e1128 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x56101f0e14d0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x56101f0e12c8 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x56101f0e13c0 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x56101f0e1768 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x56101f0e1678 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x56101f0e1660 <col:29, col:31> 'const char *' <LValueToRValue>
| | |   `-ParenExpr 0x56101f0e1640 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x56101f0e15d8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x56101f0e12c8 'fmt' 'const char *'
| | `-CStyleCastExpr 0x56101f0e1740 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x56101f0e1728 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |     `-ParenExpr 0x56101f0e1708 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x56101f0e16a0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x56101f0e13c0 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x56101f0e1580 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x56101f0e9478 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x56101f0e17f0 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x56101f0e1860 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f0e9340 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x56101f0e9530 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x56101f0e9898 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x56101f0e95f0 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x56101f0e9660 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f0e96d8 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x56101f0e9748 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x56101f0e9958 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x56101f0e9ea0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x56101f0e9c00 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x56101f0e9c78 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x56101f0e9cf0 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x56101f0e9d60 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x56101f0e9f60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-RecordDecl 0x56101f0ea018 prev 0x56101f07c6c8 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x56101f0ea0a0 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x56101f0ea150 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x56101f0ea250 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x56101f0ea200 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x56101f0ea1e0 'struct _k_thread_stack_element'
|     `-Record 0x56101f12cb80 '_k_thread_stack_element'
|-TypedefDecl 0x56101f0ec3f0 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x56101f0ec380 'void (*)(void *, void *, void *)'
|   `-ParenType 0x56101f0ec320 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x56101f0ec2d0 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x56101ef8e910 'void'
|       |-PointerType 0x56101ef8edb0 'void *'
|       | `-BuiltinType 0x56101ef8e910 'void'
|       |-PointerType 0x56101ef8edb0 'void *'
|       | `-BuiltinType 0x56101ef8e910 'void'
|       `-PointerType 0x56101ef8edb0 'void *'
|         `-BuiltinType 0x56101ef8e910 'void'
|-FunctionDecl 0x56101f0ec538 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x56101f1c2360 <line:55:3, line:57:24>
|   |-ParagraphComment 0x56101f1c2250 <line:55:3, col:70>
|   | `-TextComment 0x56101f1c2220 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x56101f1c22a0 <line:57:3>
|   | `-TextComment 0x56101f1c2270 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1c22c0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x56101f1c2320 <col:8, col:24>
|       `-TextComment 0x56101f1c22f0 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x56101f0ec8b0 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x56101f1c26e0 <line:120:3, line:130:20>
|   |-ParagraphComment 0x56101f1c2400 <line:120:3>
|   | `-TextComment 0x56101f1c23d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c2420 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x56101f1c2480 <col:10, col:33>
|   |   `-TextComment 0x56101f1c2450 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x56101f1c2520 <line:122:3, line:124:47>
|   | |-TextComment 0x56101f1c24a0 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x56101f1c24c0 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x56101f1c24e0 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x56101f1c25c0 <line:126:3, line:128:35>
|   | |-TextComment 0x56101f1c2540 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x56101f1c2560 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x56101f1c2580 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x56101f1c2610 <line:130:3>
|   | `-TextComment 0x56101f1c25e0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1c2630 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x56101f1c2690 <col:8, col:20>
|       `-TextComment 0x56101f1c2660 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x56101f0eca50 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x56101f0ec990 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x56101f1c2bf0 <line:135:3, line:150:76>
|   |-ParagraphComment 0x56101f1c2780 <line:135:3>
|   | `-TextComment 0x56101f1c2750 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c27a0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x56101f1c2800 <col:10, col:66>
|   |   `-TextComment 0x56101f1c27d0 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x56101f1c2850 <line:137:3, col:62>
|   | `-TextComment 0x56101f1c2820 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x56101f1c2940 <line:139:3, line:143:44>
|   | |-TextComment 0x56101f1c2870 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x56101f1c2890 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x56101f1c28b0 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x56101f1c28d0 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x56101f1c28f0 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x56101f1c29b0 <line:145:3, line:146:65>
|   | |-TextComment 0x56101f1c2960 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x56101f1c2980 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x56101f1c2a00 <line:148:3>
|   | `-TextComment 0x56101f1c29d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c2a20 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x56101f1c2a80 <col:8, col:27>
|   |   `-TextComment 0x56101f1c2a50 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x56101f1c2ad0 <line:150:3>
|   | `-TextComment 0x56101f1c2aa0 <col:3> Text=" "
|   `-ParamCommandComment 0x56101f1c2af0 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x56101f1c2b80 <col:14, col:76>
|       `-TextComment 0x56101f1c2b50 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x56101f0ecd40 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x56101f0ecce0 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x56101f0ecc80 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x56101f0ecc40 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x56101ef8e910 'void'
| |     `-PointerType 0x56101ef8edb0 'void *'
| |       `-BuiltinType 0x56101ef8e910 'void'
| `-FullComment 0x56101f1c2dd0 <line:163:3, line:165:52>
|   |-ParagraphComment 0x56101f1c2c90 <line:163:3, col:25>
|   | `-TextComment 0x56101f1c2c60 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x56101f1c2ce0 <line:165:3>
|   | `-TextComment 0x56101f1c2cb0 <col:3> Text=" "
|   `-ParamCommandComment 0x56101f1c2d00 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x56101f1c2d90 <col:18, col:52>
|       `-TextComment 0x56101f1c2d60 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x56101f0ee200 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x56101f0ecde0 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x56101f0ecec8 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x56101f0ecf40 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x56101f0ecfd0 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x56101f0ed048 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x56101f1a9460 <line:170:3, line:187:51>
|   |-ParagraphComment 0x56101f1c2e70 <line:170:3>
|   | `-TextComment 0x56101f1c2e40 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1c2e90 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x56101f1c2ef0 <col:10, col:53>
|   |   `-TextComment 0x56101f1c2ec0 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x56101f1c2fe0 <line:172:3, line:176:68>
|   | |-TextComment 0x56101f1c2f10 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x56101f1c2f30 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x56101f1c2f50 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x56101f1c2f70 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x56101f1c2f90 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x56101f1a8fb0 <line:178:3, line:181:41>
|   | |-TextComment 0x56101f1c3000 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x56101f1c3020 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x56101f1c3040 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x56101f1c3060 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x56101f1a9000 <line:183:3>
|   | `-TextComment 0x56101f1a8fd0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1a9020 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x56101f1a90d0 <line:183:18, line:184:3>
|   |   |-TextComment 0x56101f1a9080 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x56101f1a90a0 <line:184:3> Text=" "
|   |-ParamCommandComment 0x56101f1a90f0 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x56101f1a91a0 <line:184:16, line:185:3>
|   |   |-TextComment 0x56101f1a9150 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x56101f1a9170 <line:185:3> Text=" "
|   |-ParamCommandComment 0x56101f1a91c0 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x56101f1a9270 <line:185:13, line:186:3>
|   |   |-TextComment 0x56101f1a9220 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x56101f1a9240 <line:186:3> Text=" "
|   |-ParamCommandComment 0x56101f1a9290 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x56101f1a9340 <line:186:13, line:187:3>
|   |   |-TextComment 0x56101f1a92f0 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x56101f1a9310 <line:187:3> Text=" "
|   `-ParamCommandComment 0x56101f1a9360 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x56101f1a93f0 <col:14, col:51>
|       `-TextComment 0x56101f1a93c0 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x56101f0ee3f0 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x56101f1a9610 <line:200:3, line:202:18>
|   |-ParagraphComment 0x56101f1a9500 <line:200:3, col:37>
|   | `-TextComment 0x56101f1a94d0 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x56101f1a9550 <line:202:3>
|   | `-TextComment 0x56101f1a9520 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1a9570 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x56101f1a95d0 <col:8, col:18>
|       `-TextComment 0x56101f1a95a0 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x56101f0ee558 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x56101f0ee4d0 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x56101f1a97c0 <line:207:3, line:209:20>
|   |-ParagraphComment 0x56101f1a96b0 <line:207:3, col:39>
|   | `-TextComment 0x56101f1a9680 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x56101f1a9700 <line:209:3>
|   | `-TextComment 0x56101f1a96d0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1a9720 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x56101f1a9780 <col:8, col:20>
|       `-TextComment 0x56101f1a9750 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x56101f0ee6c8 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x56101f0ee640 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x56101f1a9a60 <line:214:3, line:218:39>
|   |-ParagraphComment 0x56101f1a9860 <line:214:3, col:68>
|   | `-TextComment 0x56101f1a9830 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x56101f1a98b0 <line:216:3>
|   | `-TextComment 0x56101f1a9880 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1a98d0 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x56101f1a9980 <line:216:14, line:217:3>
|   |   |-TextComment 0x56101f1a9930 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x56101f1a9950 <line:217:3> Text=" "
|   `-BlockCommandComment 0x56101f1a99a0 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x56101f1a9a20 <line:217:11, line:218:39>
|       |-TextComment 0x56101f1a99d0 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x56101f1a99f0 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x56101f0ee838 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x56101f0ee7b0 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x56101f1a9c10 <line:223:3, line:225:21>
|   |-ParagraphComment 0x56101f1a9b00 <line:223:3, col:39>
|   | `-TextComment 0x56101f1a9ad0 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x56101f1a9b50 <line:225:3>
|   | `-TextComment 0x56101f1a9b20 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1a9b70 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x56101f1a9bd0 <col:8, col:21>
|       `-TextComment 0x56101f1a9ba0 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x56101f0ee9a8 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x56101f0ee920 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x56101f1a9dc0 <line:230:3, line:232:20>
|   |-ParagraphComment 0x56101f1a9cb0 <line:230:3, col:38>
|   | `-TextComment 0x56101f1a9c80 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x56101f1a9d00 <line:232:3>
|   | `-TextComment 0x56101f1a9cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1a9d20 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x56101f1a9d80 <col:8, col:20>
|       `-TextComment 0x56101f1a9d50 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x56101f0eeb58 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x56101f0eea90 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x56101f1a9f70 <line:237:3, line:239:24>
|   |-ParagraphComment 0x56101f1a9e60 <line:237:3, col:39>
|   | `-TextComment 0x56101f1a9e30 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x56101f1a9eb0 <line:239:3>
|   | `-TextComment 0x56101f1a9e80 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1a9ed0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x56101f1a9f30 <col:8, col:24>
|       `-TextComment 0x56101f1a9f00 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x56101f0ef0a8 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x56101f0eec40 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x56101f0eecb8 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x56101f0eee50 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x56101f0eeec8 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x56101f0eef38 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x56101f1aa590 <line:244:3, line:252:48>
|   |-ParagraphComment 0x56101f1aa010 <line:244:3, col:53>
|   | `-TextComment 0x56101f1a9fe0 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x56101f1aa060 <line:246:3>
|   | `-TextComment 0x56101f1aa030 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1aa080 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x56101f1aa130 <line:246:14, line:247:3>
|   |   |-TextComment 0x56101f1aa0e0 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x56101f1aa100 <line:247:3> Text=" "
|   |-ParamCommandComment 0x56101f1aa150 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x56101f1aa200 <line:247:19, line:248:3>
|   |   |-TextComment 0x56101f1aa1b0 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x56101f1aa1d0 <line:248:3> Text=" "
|   |-ParamCommandComment 0x56101f1aa220 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x56101f1aa2d0 <line:248:18, line:249:3>
|   |   |-TextComment 0x56101f1aa280 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x56101f1aa2a0 <line:249:3> Text=" "
|   |-ParamCommandComment 0x56101f1aa2f0 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x56101f1aa3a0 <line:249:20, line:250:3>
|   |   |-TextComment 0x56101f1aa350 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x56101f1aa370 <line:250:3> Text=" "
|   |-ParamCommandComment 0x56101f1aa3c0 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x56101f1aa450 <col:16, col:52>
|   |   `-TextComment 0x56101f1aa420 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x56101f1aa4a0 <line:252:3>
|   | `-TextComment 0x56101f1aa470 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1aa4c0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x56101f1aa520 <col:11, col:48>
|       `-TextComment 0x56101f1aa4f0 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x56101f0ef4e8 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x56101f0ef598 <line:28:1, line:34:1>
|-FunctionDecl 0x56101f0ef9f0 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x56101f0ef5b8 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x56101f0ef628 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x56101f0ef698 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x56101f0ef708 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x56101f0ef778 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x56101f0ef7e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x56101f0ef858 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x56101f0f3bc8 <line:58:1, line:105:1>
| | |-DeclStmt 0x56101f0efe50 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x56101f0efb20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x56101f0efe38 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x56101f0efe10 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x56101f0efca0 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x56101f0efc88 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x56101f0efc70 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x56101f0efb80 <col:19> 'bool' lvalue ParmVar 0x56101f0ef708 'const_hz' 'bool'
| | |       | `-ParenExpr 0x56101f0efc50 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x56101f0efc28 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x56101f0efbf8 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x56101f0efba8 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x56101f0efc10 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x56101f0efbd0 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x56101f0efdf0 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x56101f0efdc8 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x56101f0efd70 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x56101f0efd48 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x56101f0efd18 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x56101f0efcc8 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x56101f0efd30 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x56101f0efcf0 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x56101f0efdb0 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x56101f0efd90 <col:46> 'int' 0
| | |-DeclStmt 0x56101f0f01a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x56101f0efe78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x56101f0f0190 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x56101f0f0168 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x56101f0efff8 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x56101f0effe0 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x56101f0effc8 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x56101f0efed8 <col:19> 'bool' lvalue ParmVar 0x56101f0ef708 'const_hz' 'bool'
| | |       | `-ParenExpr 0x56101f0effa8 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x56101f0eff80 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x56101f0eff50 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x56101f0eff00 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x56101f0eff68 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x56101f0eff28 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x56101f0f0148 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x56101f0f0120 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x56101f0f00c8 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x56101f0f00a0 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x56101f0f0070 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x56101f0f0020 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x56101f0f0088 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x56101f0f0048 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x56101f0f0108 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x56101f0f00e8 <col:46> 'int' 0
| | |-IfStmt 0x56101f0f22a0 <line:64:2, line:66:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x56101f0f20d0 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x56101f0f20a0 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x56101f0f01c0 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x56101f0f20b8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x56101f0f01e8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| | | |-CompoundStmt 0x56101f0f2288 <col:24, line:66:2>
| | | | `-ReturnStmt 0x56101f0f2270 <line:65:3, col:34>
| | | |   `-ConditionalOperator 0x56101f0f2240 <col:10, col:34> 'unsigned long long'
| | | |     |-ImplicitCastExpr 0x56101f0f21f8 <col:10> 'int' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0x56101f0f21e0 <col:10> 'bool' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0x56101f0f20f8 <col:10> 'bool' lvalue ParmVar 0x56101f0ef778 'result32' 'bool'
| | | |     |-ImplicitCastExpr 0x56101f0f2228 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | | |     | `-ParenExpr 0x56101f0f2198 <col:21, col:30> 'u32_t':'unsigned int'
| | | |     |   `-CStyleCastExpr 0x56101f0f2170 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | | |     |     `-ImplicitCastExpr 0x56101f0f2158 <col:29> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |     |       `-DeclRefExpr 0x56101f0f2120 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0ef5b8 't' 'u64_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x56101f0f2210 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | | |       `-DeclRefExpr 0x56101f0f21b8 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0ef5b8 't' 'u64_t':'unsigned long long'
| | | `-<<<NULL>>>
| | |-DeclStmt 0x56101f0f2380 <line:68:2, col:15>
| | | `-VarDecl 0x56101f0f22e8 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x56101f0f2368 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x56101f0f2348 <col:14> 'int' 0
| | |-IfStmt 0x56101f0f2960 <line:70:2, line:78:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x56101f0f23d8 <line:70:6, col:7> 'int' prefix '!'
| | | | `-ImplicitCastExpr 0x56101f0f23c0 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x56101f0f2398 <col:7> 'bool' lvalue Var 0x56101f0efb20 'mul_ratio' 'bool'
| | | |-CompoundStmt 0x56101f0f2940 <col:18, line:78:2>
| | | | |-DeclStmt 0x56101f0f25f8 <line:71:3, col:59>
| | | | | `-VarDecl 0x56101f0f2408 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | | | |   `-ConditionalOperator 0x56101f0f25c8 <col:20, col:52> 'unsigned int'
| | | | |     |-ImplicitCastExpr 0x56101f0f2598 <col:20> 'int' <IntegralCast>
| | | | |     | `-ImplicitCastExpr 0x56101f0f2580 <col:20> 'bool' <LValueToRValue>
| | | | |     |   `-DeclRefExpr 0x56101f0f2468 <col:20> 'bool' lvalue Var 0x56101f0efe78 'div_ratio' 'bool'
| | | | |     |-ParenExpr 0x56101f0f2538 <col:32, col:48> 'unsigned int'
| | | | |     | `-BinaryOperator 0x56101f0f2510 <col:33, col:43> 'unsigned int' '/'
| | | | |     |   |-ImplicitCastExpr 0x56101f0f24e0 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |   | `-DeclRefExpr 0x56101f0f2490 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| | | | |     |   `-ImplicitCastExpr 0x56101f0f24f8 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |     |     `-DeclRefExpr 0x56101f0f24b8 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| | | | |     `-ImplicitCastExpr 0x56101f0f25b0 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x56101f0f2558 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| | | | `-IfStmt 0x56101f0f2908 <line:73:3, line:77:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-ImplicitCastExpr 0x56101f0f2638 <line:73:7> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x56101f0f2610 <col:7> 'bool' lvalue ParmVar 0x56101f0ef7e8 'round_up' 'bool'
| | | |   |-CompoundStmt 0x56101f0f2758 <col:17, line:75:3>
| | | |   | `-BinaryOperator 0x56101f0f2730 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | | |   |   |-DeclRefExpr 0x56101f0f2650 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x56101f0f22e8 'off' 'u64_t':'unsigned long long'
| | | |   |   `-ImplicitCastExpr 0x56101f0f2718 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |   |     `-BinaryOperator 0x56101f0f26f0 <col:10, col:21> 'unsigned int' '-'
| | | |   |       |-ImplicitCastExpr 0x56101f0f26c0 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   |       | `-DeclRefExpr 0x56101f0f2678 <col:10> 'u32_t':'unsigned int' lvalue Var 0x56101f0f2408 'rdivisor' 'u32_t':'unsigned int'
| | | |   |       `-ImplicitCastExpr 0x56101f0f26d8 <col:21> 'unsigned int' <IntegralCast>
| | | |   |         `-IntegerLiteral 0x56101f0f26a0 <col:21> 'int' 1
| | | |   `-IfStmt 0x56101f0f28d0 <line:75:10, line:77:3>
| | | |     |-<<<NULL>>>
| | | |     |-<<<NULL>>>
| | | |     |-ImplicitCastExpr 0x56101f0f2798 <line:75:14> 'bool' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x56101f0f2770 <col:14> 'bool' lvalue ParmVar 0x56101f0ef858 'round_off' 'bool'
| | | |     |-CompoundStmt 0x56101f0f28b8 <col:25, line:77:3>
| | | |     | `-BinaryOperator 0x56101f0f2890 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | | |     |   |-DeclRefExpr 0x56101f0f27b0 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x56101f0f22e8 'off' 'u64_t':'unsigned long long'
| | | |     |   `-ImplicitCastExpr 0x56101f0f2878 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | | |     |     `-BinaryOperator 0x56101f0f2850 <col:10, col:21> 'unsigned int' '/'
| | | |     |       |-ImplicitCastExpr 0x56101f0f2820 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | | |     |       | `-DeclRefExpr 0x56101f0f27d8 <col:10> 'u32_t':'unsigned int' lvalue Var 0x56101f0f2408 'rdivisor' 'u32_t':'unsigned int'
| | | |     |       `-ImplicitCastExpr 0x56101f0f2838 <col:21> 'unsigned int' <IntegralCast>
| | | |     |         `-IntegerLiteral 0x56101f0f2800 <col:21> 'int' 2
| | | |     `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-IfStmt 0x56101f0f3b68 <line:85:2, line:104:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-ImplicitCastExpr 0x56101f0f29c0 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x56101f0f2998 <col:6> 'bool' lvalue Var 0x56101f0efe78 'div_ratio' 'bool'
| |   |-CompoundStmt 0x56101f0f2e38 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x56101f0f2a40 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x56101f0f29d8 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0ef5b8 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x56101f0f2a28 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x56101f0f2a00 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x56101f0f22e8 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x56101f0f2e00 <line:87:3, line:91:3>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x56101f0f2aa0 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x56101f0f2a78 <col:7> 'bool' lvalue ParmVar 0x56101f0ef778 'result32' 'bool'
| |   |   |-CompoundStmt 0x56101f0f2c70 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x56101f0f2c58 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x56101f0f2c40 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x56101f0f2c18 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x56101f0f2b30 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x56101f0f2b08 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x56101f0f2af0 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |   |       |     `-DeclRefExpr 0x56101f0f2ab8 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0ef5b8 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x56101f0f2bf8 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x56101f0f2bd0 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x56101f0f2ba0 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x56101f0f2b50 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x56101f0f2bb8 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x56101f0f2b78 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x56101f0f2de8 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x56101f0f2dd0 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x56101f0f2da8 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x56101f0f2d78 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x56101f0f2c88 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0ef5b8 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x56101f0f2d90 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x56101f0f2d58 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x56101f0f2d30 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x56101f0f2d00 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x56101f0f2cb0 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x56101f0f2d18 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x56101f0f2cd8 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x56101f0f3b30 <line:92:9, line:104:2>
| |     |-<<<NULL>>>
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x56101f0f2e80 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0f2e58 <col:13> 'bool' lvalue Var 0x56101f0efb20 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x56101f0f35f8 <col:24, line:98:2>
| |     | `-IfStmt 0x56101f0f35c0 <line:93:3, line:97:3>
| |     |   |-<<<NULL>>>
| |     |   |-<<<NULL>>>
| |     |   |-ImplicitCastExpr 0x56101f0f2ec0 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x56101f0f2e98 <col:7> 'bool' lvalue ParmVar 0x56101f0ef778 'result32' 'bool'
| |     |   |-CompoundStmt 0x56101f0f3430 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x56101f0f3078 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x56101f0f3060 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x56101f0f3038 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x56101f0f2f50 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x56101f0f2f28 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x56101f0f2f10 <col:19> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |   |       |     `-DeclRefExpr 0x56101f0f2ed8 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0ef5b8 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x56101f0f3018 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x56101f0f2ff0 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x56101f0f2fc0 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x56101f0f2f70 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x56101f0f2fd8 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x56101f0f2f98 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x56101f0f35a8 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x56101f0f3590 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x56101f0f3568 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x56101f0f3538 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x56101f0f3448 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0ef5b8 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x56101f0f3550 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x56101f0f3518 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x56101f0f34f0 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x56101f0f34c0 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x56101f0f3470 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x56101f0f34d8 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x56101f0f3498 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x56101f0f3b18 <line:98:9, line:104:2>
| |       `-IfStmt 0x56101f0f3ae0 <line:99:3, line:103:3>
| |         |-<<<NULL>>>
| |         |-<<<NULL>>>
| |         |-ImplicitCastExpr 0x56101f0f3638 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x56101f0f3610 <col:7> 'bool' lvalue ParmVar 0x56101f0ef778 'result32' 'bool'
| |         |-CompoundStmt 0x56101f0f38d0 <col:17, line:101:3>
| |         | `-ReturnStmt 0x56101f0f38b8 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x56101f0f38a0 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x56101f0f3878 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x56101f0f3858 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x56101f0f37f0 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x56101f0f3778 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x56101f0f3750 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x56101f0f36e8 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x56101f0f36a0 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x56101f0f3650 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0ef5b8 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x56101f0f36d0 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x56101f0f36b8 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x56101f0f3678 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x56101f0f3738 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x56101f0f3710 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x56101f0f22e8 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x56101f0f37d8 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x56101f0f37c0 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x56101f0f3798 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x56101f0f3ac8 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x56101f0f3ab0 <line:102:4, col:31>
| |             `-BinaryOperator 0x56101f0f3a88 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x56101f0f3a10 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x56101f0f39e8 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x56101f0f3980 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x56101f0f3938 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x56101f0f38e8 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0ef5b8 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x56101f0f3968 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x56101f0f3950 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x56101f0f3910 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef698 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x56101f0f39d0 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x56101f0f39a8 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x56101f0f22e8 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x56101f0f3a70 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x56101f0f3a58 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x56101f0f3a30 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0ef628 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x56101f0efac8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x56101f0f3d20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0f3c18 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0f4178 <line:191:1, line:194:1>
| | `-ReturnStmt 0x56101f0f4138 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x56101f0f4120 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0f4000 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0f3fe8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0f3dc8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0f4078 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0f4060 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0f3df0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0f3c18 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0f4090 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0f3e18 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x56101f0f40a8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0f3ea0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0f3e88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0f3e38 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0f40c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0f3f08 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0f3ee8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0f3ec8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0f40d8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f3f28 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0f40f0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f3f48 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0f4108 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0f3f68 <col:16> 'int' 0
| `-FullComment 0x56101f1aa870 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x56101f1aa630 <line:182:4>
|   | `-TextComment 0x56101f1aa600 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1aa650 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1aa6b0 <col:11, col:50>
|   |   `-TextComment 0x56101f1aa680 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1aa750 <line:184:3, line:186:44>
|   | |-TextComment 0x56101f1aa6d0 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x56101f1aa6f0 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1aa710 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1aa7a0 <line:188:3>
|   | `-TextComment 0x56101f1aa770 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1aa7c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1aa820 <col:11, col:35>
|       `-TextComment 0x56101f1aa7f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f42a0 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0f41a0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0f5d88 <line:205:1, line:208:1>
| | `-ReturnStmt 0x56101f0f5d40 <line:207:2, col:66>
| |   `-CallExpr 0x56101f0f5c38 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f5c20 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0f4348 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0f5c98 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0f4370 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0f41a0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f5cb0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0f4398 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x56101f0f5cc8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0f43f8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0f43e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0f43b8 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0f5ce0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0f5ba0 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0f5b80 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0f5b60 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f5cf8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f5bc0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f5d10 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f5be0 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0f5d28 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0f5c00 <col:16> 'int' 0
| `-FullComment 0x56101f1aab50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x56101f1aa910 <line:196:4>
|   | `-TextComment 0x56101f1aa8e0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1aa930 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1aa990 <col:11, col:50>
|   |   `-TextComment 0x56101f1aa960 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1aaa30 <line:198:3, line:200:44>
|   | |-TextComment 0x56101f1aa9b0 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x56101f1aa9d0 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1aa9f0 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1aaa80 <line:202:3>
|   | `-TextComment 0x56101f1aaa50 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1aaaa0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1aab00 <col:11, col:35>
|       `-TextComment 0x56101f1aaad0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f5e38 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0f5db0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0f6208 <line:219:1, line:222:1>
| | `-ReturnStmt 0x56101f0f61c8 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0f61b0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0f6090 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0f6078 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0f5ee0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0f6108 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0f60f0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0f5f08 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0f5db0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0f6120 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0f5f30 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x56101f0f6138 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0f5f90 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0f5f78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0f5f50 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0f6150 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0f5ff8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0f5fd8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0f5fb8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0f6168 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f6018 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0f6180 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f6038 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0f6198 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0f6058 <col:16> 'int' 1
| `-FullComment 0x56101f1aae30 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x56101f1aabf0 <line:210:4>
|   | `-TextComment 0x56101f1aabc0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1aac10 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1aac70 <col:11, col:50>
|   |   `-TextComment 0x56101f1aac40 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1aad10 <line:212:3, line:214:37>
|   | |-TextComment 0x56101f1aac90 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x56101f1aacb0 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1aacd0 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1aad60 <line:216:3>
|   | `-TextComment 0x56101f1aad30 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1aad80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1aade0 <col:11, col:35>
|       `-TextComment 0x56101f1aadb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f62b8 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0f6230 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0f6658 <line:233:1, line:236:1>
| | `-ReturnStmt 0x56101f0f6618 <line:235:2, col:65>
| |   `-CallExpr 0x56101f0f6510 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f64f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0f6360 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0f6570 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0f6388 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0f6230 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f6588 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0f63b0 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x56101f0f65a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0f6410 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0f63f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0f63d0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0f65b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0f6478 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0f6458 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0f6438 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f65d0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f6498 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f65e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f64b8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0f6600 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0f64d8 <col:16> 'int' 1
| `-FullComment 0x56101f1ca260 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x56101f1aaed0 <line:224:4>
|   | `-TextComment 0x56101f1aaea0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1aaef0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1aaf50 <col:11, col:50>
|   |   `-TextComment 0x56101f1aaf20 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1ca140 <line:226:3, line:228:37>
|   | |-TextComment 0x56101f1aaf70 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x56101f1ca0e0 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1ca100 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1ca190 <line:230:3>
|   | `-TextComment 0x56101f1ca160 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ca1b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1ca210 <col:11, col:35>
|       `-TextComment 0x56101f1ca1e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f6708 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0f6680 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0f6ad8 <line:247:1, line:250:1>
| | `-ReturnStmt 0x56101f0f6a98 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0f6a80 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0f6960 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0f6948 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0f67b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0f69d8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0f69c0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0f67d8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0f6680 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0f69f0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0f6800 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x56101f0f6a08 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0f6860 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0f6848 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0f6820 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0f6a20 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0f68c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0f68a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0f6888 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0f6a38 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f68e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0f6a50 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f6908 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x56101f0f6a68 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0f6928 <col:16> 'int' 0
| `-FullComment 0x56101f1ca540 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x56101f1ca300 <line:238:4>
|   | `-TextComment 0x56101f1ca2d0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1ca320 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1ca380 <col:11, col:50>
|   |   `-TextComment 0x56101f1ca350 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1ca420 <line:240:3, line:242:45>
|   | |-TextComment 0x56101f1ca3a0 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x56101f1ca3c0 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1ca3e0 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1ca470 <line:244:3>
|   | `-TextComment 0x56101f1ca440 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ca490 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1ca4f0 <col:11, col:35>
|       `-TextComment 0x56101f1ca4c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f6b98 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0f6b00 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0f6f38 <line:261:1, line:264:1>
| | `-ReturnStmt 0x56101f0f6ef8 <line:263:2, col:65>
| |   `-CallExpr 0x56101f0f6df0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f6dd8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0f6c40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0f6e50 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0f6c68 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0f6b00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f6e68 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0f6c90 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x56101f0f6e80 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0f6cf0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0f6cd8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0f6cb0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0f6e98 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0f6d58 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0f6d38 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0f6d18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f6eb0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f6d78 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f6ec8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f6d98 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x56101f0f6ee0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0f6db8 <col:16> 'int' 0
| `-FullComment 0x56101f1ca820 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x56101f1ca5e0 <line:252:4>
|   | `-TextComment 0x56101f1ca5b0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1ca600 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1ca660 <col:11, col:50>
|   |   `-TextComment 0x56101f1ca630 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1ca700 <line:254:3, line:256:45>
|   | |-TextComment 0x56101f1ca680 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x56101f1ca6a0 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1ca6c0 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1ca750 <line:258:3>
|   | `-TextComment 0x56101f1ca720 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ca770 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1ca7d0 <col:11, col:35>
|       `-TextComment 0x56101f1ca7a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f6fe8 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0f6f60 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0f7238 <line:275:1, line:278:1>
| `-FullComment 0x56101f1cab00 <line:266:4, line:272:35>
|   |-ParagraphComment 0x56101f1ca8c0 <line:266:4>
|   | `-TextComment 0x56101f1ca890 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1ca8e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1ca940 <col:11, col:40>
|   |   `-TextComment 0x56101f1ca910 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x56101f1ca9e0 <line:268:3, line:270:44>
|   | |-TextComment 0x56101f1ca960 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x56101f1ca980 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1ca9a0 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1caa30 <line:272:3>
|   | `-TextComment 0x56101f1caa00 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1caa50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1caab0 <col:11, col:35>
|       `-TextComment 0x56101f1caa80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f72e0 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0f7258 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0f7528 <line:289:1, line:292:1>
| `-FullComment 0x56101f1cade0 <line:280:4, line:286:35>
|   |-ParagraphComment 0x56101f1caba0 <line:280:4>
|   | `-TextComment 0x56101f1cab70 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cabc0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1cac20 <col:11, col:40>
|   |   `-TextComment 0x56101f1cabf0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x56101f1cacc0 <line:282:3, line:284:44>
|   | |-TextComment 0x56101f1cac40 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x56101f1cac60 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cac80 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1cad10 <line:286:3>
|   | `-TextComment 0x56101f1cace0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cad30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cad90 <col:11, col:35>
|       `-TextComment 0x56101f1cad60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f75d0 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0f7548 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0f7818 <line:303:1, line:306:1>
| `-FullComment 0x56101f1cb0c0 <line:294:4, line:300:35>
|   |-ParagraphComment 0x56101f1cae80 <line:294:4>
|   | `-TextComment 0x56101f1cae50 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1caea0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1caf00 <col:11, col:40>
|   |   `-TextComment 0x56101f1caed0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x56101f1cafa0 <line:296:3, line:298:37>
|   | |-TextComment 0x56101f1caf20 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x56101f1caf40 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1caf60 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1caff0 <line:300:3>
|   | `-TextComment 0x56101f1cafc0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cb010 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cb070 <col:11, col:35>
|       `-TextComment 0x56101f1cb040 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f78c0 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0f7838 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0f7b08 <line:317:1, line:320:1>
| `-FullComment 0x56101f1cb3a0 <line:308:4, line:314:35>
|   |-ParagraphComment 0x56101f1cb160 <line:308:4>
|   | `-TextComment 0x56101f1cb130 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cb180 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1cb1e0 <col:11, col:40>
|   |   `-TextComment 0x56101f1cb1b0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x56101f1cb280 <line:310:3, line:312:37>
|   | |-TextComment 0x56101f1cb200 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x56101f1cb220 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cb240 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1cb2d0 <line:314:3>
|   | `-TextComment 0x56101f1cb2a0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cb2f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cb350 <col:11, col:35>
|       `-TextComment 0x56101f1cb320 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f8218 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0f8190 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0f8468 <line:331:1, line:334:1>
| `-FullComment 0x56101f1cb680 <line:322:4, line:328:35>
|   |-ParagraphComment 0x56101f1cb440 <line:322:4>
|   | `-TextComment 0x56101f1cb410 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cb460 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1cb4c0 <col:11, col:40>
|   |   `-TextComment 0x56101f1cb490 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x56101f1cb560 <line:324:3, line:326:45>
|   | |-TextComment 0x56101f1cb4e0 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x56101f1cb500 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1cb520 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1cb5b0 <line:328:3>
|   | `-TextComment 0x56101f1cb580 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cb5d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cb630 <col:11, col:35>
|       `-TextComment 0x56101f1cb600 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f8510 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0f8488 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0f8758 <line:345:1, line:348:1>
| `-FullComment 0x56101f1cb960 <line:336:4, line:342:35>
|   |-ParagraphComment 0x56101f1cb720 <line:336:4>
|   | `-TextComment 0x56101f1cb6f0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cb740 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1cb7a0 <col:11, col:40>
|   |   `-TextComment 0x56101f1cb770 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x56101f1cb840 <line:338:3, line:340:45>
|   | |-TextComment 0x56101f1cb7c0 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x56101f1cb7e0 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cb800 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1cb890 <line:342:3>
|   | `-TextComment 0x56101f1cb860 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cb8b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cb910 <col:11, col:35>
|       `-TextComment 0x56101f1cb8e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f8800 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0f8778 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0f8bd8 <line:359:1, line:362:1>
| | `-ReturnStmt 0x56101f0f8b90 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x56101f0f8b78 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0f8a58 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0f8a40 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0f88a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0f8ad0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0f8ab8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0f88d0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0f8778 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0f8ae8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0f88f8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x56101f0f8b00 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0f8958 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0f8940 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0f8918 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0f8b18 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0f89c0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0f89a0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0f8980 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0f8b30 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f89e0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0f8b48 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f8a00 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0f8b60 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0f8a20 <col:16> 'int' 0
| `-FullComment 0x56101f1cbc40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x56101f1cba00 <line:350:4>
|   | `-TextComment 0x56101f1cb9d0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cba20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1cba80 <col:11, col:50>
|   |   `-TextComment 0x56101f1cba50 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1cbb20 <line:352:3, line:354:44>
|   | |-TextComment 0x56101f1cbaa0 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x56101f1cbac0 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1cbae0 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1cbb70 <line:356:3>
|   | `-TextComment 0x56101f1cbb40 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cbb90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cbbf0 <col:11, col:35>
|       `-TextComment 0x56101f1cbbc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f8c88 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0f8c00 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0f9028 <line:373:1, line:376:1>
| | `-ReturnStmt 0x56101f0f8fe8 <line:375:2, col:66>
| |   `-CallExpr 0x56101f0f8ee0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f8ec8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0f8d30 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0f8f40 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0f8d58 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0f8c00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f8f58 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0f8d80 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x56101f0f8f70 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0f8de0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0f8dc8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0f8da0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0f8f88 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0f8e48 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0f8e28 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0f8e08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f8fa0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f8e68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f8fb8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f8e88 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0f8fd0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0f8ea8 <col:16> 'int' 0
| `-FullComment 0x56101f1cbf20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x56101f1cbce0 <line:364:4>
|   | `-TextComment 0x56101f1cbcb0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cbd00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1cbd60 <col:11, col:50>
|   |   `-TextComment 0x56101f1cbd30 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1cbe00 <line:366:3, line:368:44>
|   | |-TextComment 0x56101f1cbd80 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x56101f1cbda0 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cbdc0 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1cbe50 <line:370:3>
|   | `-TextComment 0x56101f1cbe20 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cbe70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cbed0 <col:11, col:35>
|       `-TextComment 0x56101f1cbea0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f90d8 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0f9050 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0f94c8 <line:387:1, line:390:1>
| | `-ReturnStmt 0x56101f0f9488 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0f9470 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0f9350 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0f9338 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0f91a0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0f93c8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0f93b0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0f91c8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0f9050 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0f93e0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0f91f0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x56101f0f93f8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0f9250 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0f9238 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0f9210 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0f9410 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0f92b8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0f9298 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0f9278 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0f9428 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f92d8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0f9440 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f92f8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0f9458 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0f9318 <col:16> 'int' 1
| `-FullComment 0x56101f1cc210 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x56101f1cbfc0 <line:378:4>
|   | `-TextComment 0x56101f1cbf90 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cbfe0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1cc040 <col:11, col:50>
|   |   `-TextComment 0x56101f1cc010 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1cc0f0 <line:380:3, line:382:37>
|   | |-TextComment 0x56101f1cc060 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x56101f1cc080 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1cc0a0 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1cc140 <line:384:3>
|   | `-TextComment 0x56101f1cc110 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cc160 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cc1c0 <col:11, col:35>
|       `-TextComment 0x56101f1cc190 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f9578 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0f94f0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0f9918 <line:401:1, line:404:1>
| | `-ReturnStmt 0x56101f0f98d8 <line:403:2, col:65>
| |   `-CallExpr 0x56101f0f97d0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f97b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0f9620 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0f9830 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0f9648 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0f94f0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0f9848 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0f9670 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x56101f0f9860 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0f96d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0f96b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0f9690 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0f9878 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0f9738 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0f9718 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0f96f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f9890 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f9758 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0f98a8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0f9778 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0f98c0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0f9798 <col:16> 'int' 1
| `-FullComment 0x56101f1cc4f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x56101f1cc2b0 <line:392:4>
|   | `-TextComment 0x56101f1cc280 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cc2d0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1cc330 <col:11, col:50>
|   |   `-TextComment 0x56101f1cc300 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1cc3d0 <line:394:3, line:396:37>
|   | |-TextComment 0x56101f1cc350 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x56101f1cc370 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cc390 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1cc420 <line:398:3>
|   | `-TextComment 0x56101f1cc3f0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cc440 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cc4a0 <col:11, col:35>
|       `-TextComment 0x56101f1cc470 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f99c8 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0f9940 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0f9d98 <line:415:1, line:418:1>
| | `-ReturnStmt 0x56101f0f9d58 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0f9d40 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0f9c20 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0f9c08 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0f9a70 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0f9c98 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0f9c80 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0f9a98 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0f9940 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0f9cb0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0f9ac0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x56101f0f9cc8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0f9b20 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0f9b08 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0f9ae0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0f9ce0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0f9b88 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0f9b68 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0f9b48 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0f9cf8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f9ba8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0f9d10 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0f9bc8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x56101f0f9d28 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0f9be8 <col:16> 'int' 0
| `-FullComment 0x56101f1cc7d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x56101f1cc590 <line:406:4>
|   | `-TextComment 0x56101f1cc560 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cc5b0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1cc610 <col:11, col:50>
|   |   `-TextComment 0x56101f1cc5e0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1cc6b0 <line:408:3, line:410:45>
|   | |-TextComment 0x56101f1cc630 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x56101f1cc650 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1cc670 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1cc700 <line:412:3>
|   | `-TextComment 0x56101f1cc6d0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cc720 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cc780 <col:11, col:35>
|       `-TextComment 0x56101f1cc750 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0f9e48 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0f9dc0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0fa208 <line:429:1, line:432:1>
| | `-ReturnStmt 0x56101f0fa1c8 <line:431:2, col:65>
| |   `-CallExpr 0x56101f0fa0a0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0fa088 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0f9ef0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0fa100 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0f9f18 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0f9dc0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0fa118 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0f9f40 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x56101f0fa130 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0f9fa0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0f9f88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0f9f60 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0fa148 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0fa008 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0f9fe8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0f9fc8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0fa160 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0fa028 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0fa178 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0fa048 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x56101f0fa1b0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0fa068 <col:16> 'int' 0
| `-FullComment 0x56101f1ccab0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x56101f1cc870 <line:420:4>
|   | `-TextComment 0x56101f1cc840 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cc890 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1cc8f0 <col:11, col:50>
|   |   `-TextComment 0x56101f1cc8c0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1cc990 <line:422:3, line:424:45>
|   | |-TextComment 0x56101f1cc910 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x56101f1cc930 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cc950 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1cc9e0 <line:426:3>
|   | `-TextComment 0x56101f1cc9b0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cca00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cca60 <col:11, col:35>
|       `-TextComment 0x56101f1cca30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fa2b8 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0fa230 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0fa508 <line:443:1, line:446:1>
| `-FullComment 0x56101f1ccd90 <line:434:4, line:440:35>
|   |-ParagraphComment 0x56101f1ccb50 <line:434:4>
|   | `-TextComment 0x56101f1ccb20 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1ccb70 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1ccbd0 <col:11, col:40>
|   |   `-TextComment 0x56101f1ccba0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x56101f1ccc70 <line:436:3, line:438:44>
|   | |-TextComment 0x56101f1ccbf0 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x56101f1ccc10 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1ccc30 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1cccc0 <line:440:3>
|   | `-TextComment 0x56101f1ccc90 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ccce0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1ccd40 <col:11, col:35>
|       `-TextComment 0x56101f1ccd10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fa5b0 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0fa528 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0fa7f8 <line:457:1, line:460:1>
| `-FullComment 0x56101f1cd070 <line:448:4, line:454:35>
|   |-ParagraphComment 0x56101f1cce30 <line:448:4>
|   | `-TextComment 0x56101f1cce00 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cce50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1cceb0 <col:11, col:40>
|   |   `-TextComment 0x56101f1cce80 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x56101f1ccf50 <line:450:3, line:452:44>
|   | |-TextComment 0x56101f1cced0 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x56101f1ccef0 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1ccf10 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1ccfa0 <line:454:3>
|   | `-TextComment 0x56101f1ccf70 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ccfc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cd020 <col:11, col:35>
|       `-TextComment 0x56101f1ccff0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fa8a0 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0fa818 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0faae8 <line:471:1, line:474:1>
| `-FullComment 0x56101f1cd350 <line:462:4, line:468:35>
|   |-ParagraphComment 0x56101f1cd110 <line:462:4>
|   | `-TextComment 0x56101f1cd0e0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cd130 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1cd190 <col:11, col:40>
|   |   `-TextComment 0x56101f1cd160 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x56101f1cd230 <line:464:3, line:466:37>
|   | |-TextComment 0x56101f1cd1b0 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x56101f1cd1d0 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1cd1f0 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1cd280 <line:468:3>
|   | `-TextComment 0x56101f1cd250 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cd2a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cd300 <col:11, col:35>
|       `-TextComment 0x56101f1cd2d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fab90 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0fab08 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0fadd8 <line:485:1, line:488:1>
| `-FullComment 0x56101f1cd630 <line:476:4, line:482:35>
|   |-ParagraphComment 0x56101f1cd3f0 <line:476:4>
|   | `-TextComment 0x56101f1cd3c0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cd410 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1cd470 <col:11, col:40>
|   |   `-TextComment 0x56101f1cd440 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x56101f1cd510 <line:478:3, line:480:37>
|   | |-TextComment 0x56101f1cd490 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x56101f1cd4b0 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cd4d0 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1cd560 <line:482:3>
|   | `-TextComment 0x56101f1cd530 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cd580 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cd5e0 <col:11, col:35>
|       `-TextComment 0x56101f1cd5b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fae80 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0fadf8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0fb0c8 <line:499:1, line:502:1>
| `-FullComment 0x56101f1cd910 <line:490:4, line:496:35>
|   |-ParagraphComment 0x56101f1cd6d0 <line:490:4>
|   | `-TextComment 0x56101f1cd6a0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cd6f0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1cd750 <col:11, col:40>
|   |   `-TextComment 0x56101f1cd720 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x56101f1cd7f0 <line:492:3, line:494:45>
|   | |-TextComment 0x56101f1cd770 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x56101f1cd790 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1cd7b0 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1cd840 <line:496:3>
|   | `-TextComment 0x56101f1cd810 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cd860 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cd8c0 <col:11, col:35>
|       `-TextComment 0x56101f1cd890 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fc1d0 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0fb0e8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0fc418 <line:513:1, line:516:1>
| `-FullComment 0x56101f1cdbf0 <line:504:4, line:510:35>
|   |-ParagraphComment 0x56101f1cd9b0 <line:504:4>
|   | `-TextComment 0x56101f1cd980 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cd9d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1cda30 <col:11, col:40>
|   |   `-TextComment 0x56101f1cda00 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x56101f1cdad0 <line:506:3, line:508:45>
|   | |-TextComment 0x56101f1cda50 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x56101f1cda70 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cda90 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1cdb20 <line:510:3>
|   | `-TextComment 0x56101f1cdaf0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cdb40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cdba0 <col:11, col:35>
|       `-TextComment 0x56101f1cdb70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fc4c0 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0fc438 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0fc898 <line:527:1, line:530:1>
| | `-ReturnStmt 0x56101f0fc850 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x56101f0fc838 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0fc718 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0fc700 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0fc568 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0fc790 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0fc778 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0fc590 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0fc438 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0fc7a8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0fc5b8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x56101f0fc7c0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0fc618 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0fc600 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0fc5d8 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0fc7d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0fc680 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0fc660 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0fc640 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0fc7f0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0fc6a0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0fc808 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0fc6c0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0fc820 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0fc6e0 <col:16> 'int' 0
| `-FullComment 0x56101f1cded0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x56101f1cdc90 <line:518:4>
|   | `-TextComment 0x56101f1cdc60 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cdcb0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1cdd10 <col:11, col:49>
|   |   `-TextComment 0x56101f1cdce0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1cddb0 <line:520:3, line:522:44>
|   | |-TextComment 0x56101f1cdd30 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x56101f1cdd50 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1cdd70 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1cde00 <line:524:3>
|   | `-TextComment 0x56101f1cddd0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cde20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cde80 <col:11, col:35>
|       `-TextComment 0x56101f1cde50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fc948 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0fc8c0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0fcce8 <line:541:1, line:544:1>
| | `-ReturnStmt 0x56101f0fcca8 <line:543:2, col:66>
| |   `-CallExpr 0x56101f0fcba0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0fcb88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0fc9f0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0fcc00 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0fca18 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0fc8c0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0fcc18 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0fca40 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x56101f0fcc30 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0fcaa0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0fca88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0fca60 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0fcc48 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0fcb08 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0fcae8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0fcac8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0fcc60 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0fcb28 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0fcc78 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0fcb48 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0fcc90 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0fcb68 <col:16> 'int' 0
| `-FullComment 0x56101f1ce1d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x56101f1cdf70 <line:532:4>
|   | `-TextComment 0x56101f1cdf40 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cdf90 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1cdff0 <col:11, col:49>
|   |   `-TextComment 0x56101f1cdfc0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1ce090 <line:534:3, line:536:44>
|   | |-TextComment 0x56101f1ce010 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x56101f1ce030 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1ce050 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1ce100 <line:538:3>
|   | `-TextComment 0x56101f1ce0b0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ce120 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1ce180 <col:11, col:35>
|       `-TextComment 0x56101f1ce150 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fcd98 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0fcd10 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0fd168 <line:555:1, line:558:1>
| | `-ReturnStmt 0x56101f0fd128 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0fd110 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0fcff0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0fcfd8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0fce40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0fd068 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0fd050 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0fce68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0fcd10 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0fd080 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0fce90 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x56101f0fd098 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0fcef0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0fced8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0fceb0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0fd0b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0fcf58 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0fcf38 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0fcf18 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0fd0c8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0fcf78 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0fd0e0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0fcf98 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0fd0f8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0fcfb8 <col:16> 'int' 1
| `-FullComment 0x56101f1ce4b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x56101f1ce270 <line:546:4>
|   | `-TextComment 0x56101f1ce240 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1ce290 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1ce2f0 <col:11, col:49>
|   |   `-TextComment 0x56101f1ce2c0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1ce390 <line:548:3, line:550:37>
|   | |-TextComment 0x56101f1ce310 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x56101f1ce330 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1ce350 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1ce3e0 <line:552:3>
|   | `-TextComment 0x56101f1ce3b0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ce400 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1ce460 <col:11, col:35>
|       `-TextComment 0x56101f1ce430 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fd268 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0fd1e0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0fd608 <line:569:1, line:572:1>
| | `-ReturnStmt 0x56101f0fd5c8 <line:571:2, col:65>
| |   `-CallExpr 0x56101f0fd4c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0fd4a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0fd310 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0fd520 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0fd338 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0fd1e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0fd538 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0fd360 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x56101f0fd550 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0fd3c0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0fd3a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0fd380 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0fd568 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0fd428 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0fd408 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0fd3e8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0fd580 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0fd448 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0fd598 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0fd468 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0fd5b0 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0fd488 <col:16> 'int' 1
| `-FullComment 0x56101f1ce790 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x56101f1ce550 <line:560:4>
|   | `-TextComment 0x56101f1ce520 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1ce570 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1ce5d0 <col:11, col:49>
|   |   `-TextComment 0x56101f1ce5a0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1ce670 <line:562:3, line:564:37>
|   | |-TextComment 0x56101f1ce5f0 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x56101f1ce610 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1ce630 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1ce6c0 <line:566:3>
|   | `-TextComment 0x56101f1ce690 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ce6e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1ce740 <col:11, col:35>
|       `-TextComment 0x56101f1ce710 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fd6b8 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0fd630 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0fda88 <line:583:1, line:586:1>
| | `-ReturnStmt 0x56101f0fda48 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0fda30 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0fd910 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0fd8f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0fd760 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0fd988 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0fd970 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0fd788 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0fd630 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0fd9a0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0fd7b0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x56101f0fd9b8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0fd810 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0fd7f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0fd7d0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0fd9d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0fd878 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0fd858 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0fd838 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0fd9e8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0fd898 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0fda00 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0fd8b8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x56101f0fda18 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0fd8d8 <col:16> 'int' 0
| `-FullComment 0x56101f1cea70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x56101f1ce830 <line:574:4>
|   | `-TextComment 0x56101f1ce800 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1ce850 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1ce8b0 <col:11, col:49>
|   |   `-TextComment 0x56101f1ce880 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1ce950 <line:576:3, line:578:45>
|   | |-TextComment 0x56101f1ce8d0 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x56101f1ce8f0 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1ce910 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1ce9a0 <line:580:3>
|   | `-TextComment 0x56101f1ce970 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ce9c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cea20 <col:11, col:35>
|       `-TextComment 0x56101f1ce9f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fdb38 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0fdab0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0fded8 <line:597:1, line:600:1>
| | `-ReturnStmt 0x56101f0fde98 <line:599:2, col:65>
| |   `-CallExpr 0x56101f0fdd90 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0fdd78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0fdbe0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0fddf0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0fdc08 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0fdab0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0fde08 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0fdc30 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x56101f0fde20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0fdc90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0fdc78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0fdc50 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0fde38 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0fdcf8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0fdcd8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0fdcb8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0fde50 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0fdd18 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0fde68 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0fdd38 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x56101f0fde80 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0fdd58 <col:16> 'int' 0
| `-FullComment 0x56101f1ced50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x56101f1ceb10 <line:588:4>
|   | `-TextComment 0x56101f1ceae0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1ceb30 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1ceb90 <col:11, col:49>
|   |   `-TextComment 0x56101f1ceb60 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x56101f1cec30 <line:590:3, line:592:45>
|   | |-TextComment 0x56101f1cebb0 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x56101f1cebd0 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cebf0 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1cec80 <line:594:3>
|   | `-TextComment 0x56101f1cec50 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ceca0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1ced00 <col:11, col:35>
|       `-TextComment 0x56101f1cecd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0fdf88 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0fdf00 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b2d40 <line:611:1, line:614:1>
| `-FullComment 0x56101f1cf030 <line:602:4, line:608:35>
|   |-ParagraphComment 0x56101f1cedf0 <line:602:4>
|   | `-TextComment 0x56101f1cedc0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cee10 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1cee70 <col:11, col:39>
|   |   `-TextComment 0x56101f1cee40 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x56101f1cef10 <line:604:3, line:606:44>
|   | |-TextComment 0x56101f1cee90 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x56101f1ceeb0 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1ceed0 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1cef60 <line:608:3>
|   | `-TextComment 0x56101f1cef30 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cef80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cefe0 <col:11, col:35>
|       `-TextComment 0x56101f1cefb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b2de8 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b2d60 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b3038 <line:625:1, line:628:1>
| `-FullComment 0x56101f1cf310 <line:616:4, line:622:35>
|   |-ParagraphComment 0x56101f1cf0d0 <line:616:4>
|   | `-TextComment 0x56101f1cf0a0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cf0f0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1cf150 <col:11, col:39>
|   |   `-TextComment 0x56101f1cf120 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x56101f1cf1f0 <line:618:3, line:620:44>
|   | |-TextComment 0x56101f1cf170 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x56101f1cf190 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cf1b0 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1cf240 <line:622:3>
|   | `-TextComment 0x56101f1cf210 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cf260 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cf2c0 <col:11, col:35>
|       `-TextComment 0x56101f1cf290 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b30e0 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b3058 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b3328 <line:639:1, line:642:1>
| `-FullComment 0x56101f1cf5f0 <line:630:4, line:636:35>
|   |-ParagraphComment 0x56101f1cf3b0 <line:630:4>
|   | `-TextComment 0x56101f1cf380 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cf3d0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1cf430 <col:11, col:39>
|   |   `-TextComment 0x56101f1cf400 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x56101f1cf4d0 <line:632:3, line:634:37>
|   | |-TextComment 0x56101f1cf450 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x56101f1cf470 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1cf490 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1cf520 <line:636:3>
|   | `-TextComment 0x56101f1cf4f0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cf540 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cf5a0 <col:11, col:35>
|       `-TextComment 0x56101f1cf570 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b33d0 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b3348 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b3618 <line:653:1, line:656:1>
| `-FullComment 0x56101f1cf8d0 <line:644:4, line:650:35>
|   |-ParagraphComment 0x56101f1cf690 <line:644:4>
|   | `-TextComment 0x56101f1cf660 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cf6b0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1cf710 <col:11, col:39>
|   |   `-TextComment 0x56101f1cf6e0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x56101f1cf7b0 <line:646:3, line:648:37>
|   | |-TextComment 0x56101f1cf730 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x56101f1cf750 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cf770 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1cf800 <line:650:3>
|   | `-TextComment 0x56101f1cf7d0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cf820 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cf880 <col:11, col:35>
|       `-TextComment 0x56101f1cf850 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b36c0 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b3638 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b3888 <line:667:1, line:670:1>
| `-FullComment 0x56101f1cfbb0 <line:658:4, line:664:35>
|   |-ParagraphComment 0x56101f1cf970 <line:658:4>
|   | `-TextComment 0x56101f1cf940 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cf990 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1cf9f0 <col:11, col:39>
|   |   `-TextComment 0x56101f1cf9c0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x56101f1cfa90 <line:660:3, line:662:45>
|   | |-TextComment 0x56101f1cfa10 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x56101f1cfa30 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1cfa50 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1cfae0 <line:664:3>
|   | `-TextComment 0x56101f1cfab0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cfb00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cfb60 <col:11, col:35>
|       `-TextComment 0x56101f1cfb30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b3930 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b38a8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b3af8 <line:681:1, line:684:1>
| `-FullComment 0x56101f1cfe90 <line:672:4, line:678:35>
|   |-ParagraphComment 0x56101f1cfc50 <line:672:4>
|   | `-TextComment 0x56101f1cfc20 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cfc70 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1cfcd0 <col:11, col:39>
|   |   `-TextComment 0x56101f1cfca0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x56101f1cfd70 <line:674:3, line:676:45>
|   | |-TextComment 0x56101f1cfcf0 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x56101f1cfd10 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1cfd30 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1cfdc0 <line:678:3>
|   | `-TextComment 0x56101f1cfd90 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1cfde0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1cfe40 <col:11, col:35>
|       `-TextComment 0x56101f1cfe10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b3ba0 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b3b18 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b3f88 <line:695:1, line:698:1>
| | `-ReturnStmt 0x56101f0b3f40 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x56101f0b3f28 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0b3e08 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0b3df0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0b3c48 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0b3e80 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0b3e68 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0b3c70 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0b3b18 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0b3e98 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0b3cd8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0b3cc0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0b3c98 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0b3eb0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0b3d00 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x56101f0b3ec8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0b3d70 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0b3d50 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0b3d20 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0b3ee0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b3d90 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0b3ef8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b3db0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0b3f10 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0b3dd0 <col:16> 'int' 0
| `-FullComment 0x56101f1d0190 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x56101f1cff30 <line:686:4>
|   | `-TextComment 0x56101f1cff00 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1cff50 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1cffb0 <col:11, col:50>
|   |   `-TextComment 0x56101f1cff80 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x56101f1d0050 <line:688:3, line:690:44>
|   | |-TextComment 0x56101f1cffd0 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x56101f1cfff0 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d0010 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d00a0 <line:692:3>
|   | `-TextComment 0x56101f1d0070 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d00c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d0140 <col:11, col:35>
|       `-TextComment 0x56101f1d0110 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b4038 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b3fb0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b43d8 <line:709:1, line:712:1>
| | `-ReturnStmt 0x56101f0b4398 <line:711:2, col:66>
| |   `-CallExpr 0x56101f0b4290 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b4278 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0b40e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0b42f0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0b4108 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0b3fb0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b4308 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0b4170 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0b4158 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0b4130 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0b4320 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0b4198 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x56101f0b4338 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0b41f8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0b41d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0b41b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b4350 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b4218 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b4368 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b4238 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0b4380 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0b4258 <col:16> 'int' 0
| `-FullComment 0x56101f1d0470 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x56101f1d0230 <line:700:4>
|   | `-TextComment 0x56101f1d0200 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d0250 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d02b0 <col:11, col:50>
|   |   `-TextComment 0x56101f1d0280 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x56101f1d0350 <line:702:3, line:704:44>
|   | |-TextComment 0x56101f1d02d0 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x56101f1d02f0 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d0310 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d03a0 <line:706:3>
|   | `-TextComment 0x56101f1d0370 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d03c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d0420 <col:11, col:35>
|       `-TextComment 0x56101f1d03f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b4488 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b4400 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b4858 <line:723:1, line:726:1>
| | `-ReturnStmt 0x56101f0b4818 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0b4800 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0b46e0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0b46c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0b4530 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0b4758 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0b4740 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0b4558 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0b4400 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0b4770 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0b45c0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0b45a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0b4580 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0b4788 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0b45e8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x56101f0b47a0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0b4648 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0b4628 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0b4608 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0b47b8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b4668 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0b47d0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b4688 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0b47e8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0b46a8 <col:16> 'int' 1
| `-FullComment 0x56101f1d0750 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x56101f1d0510 <line:714:4>
|   | `-TextComment 0x56101f1d04e0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d0530 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d0590 <col:11, col:50>
|   |   `-TextComment 0x56101f1d0560 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x56101f1d0630 <line:716:3, line:718:37>
|   | |-TextComment 0x56101f1d05b0 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x56101f1d05d0 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d05f0 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d0680 <line:720:3>
|   | `-TextComment 0x56101f1d0650 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d06a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d0700 <col:11, col:35>
|       `-TextComment 0x56101f1d06d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b4908 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b4880 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b4ca8 <line:737:1, line:740:1>
| | `-ReturnStmt 0x56101f0b4c68 <line:739:2, col:65>
| |   `-CallExpr 0x56101f0b4b60 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b4b48 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0b49b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0b4bc0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0b49d8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0b4880 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b4bd8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0b4a40 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0b4a28 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0b4a00 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0b4bf0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0b4a68 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x56101f0b4c08 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0b4ac8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0b4aa8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0b4a88 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b4c20 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b4ae8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b4c38 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b4b08 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0b4c50 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0b4b28 <col:16> 'int' 1
| `-FullComment 0x56101f1d0a30 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x56101f1d07f0 <line:728:4>
|   | `-TextComment 0x56101f1d07c0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d0810 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d0870 <col:11, col:50>
|   |   `-TextComment 0x56101f1d0840 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x56101f1d0910 <line:730:3, line:732:37>
|   | |-TextComment 0x56101f1d0890 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x56101f1d08b0 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d08d0 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d0960 <line:734:3>
|   | `-TextComment 0x56101f1d0930 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d0980 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d09e0 <col:11, col:35>
|       `-TextComment 0x56101f1d09b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b4d88 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b4cd0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b5158 <line:751:1, line:754:1>
| | `-ReturnStmt 0x56101f0b5118 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0b5100 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0b4fe0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0b4fc8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0b4e30 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0b5058 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0b5040 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0b4e58 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0b4cd0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0b5070 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0b4ec0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0b4ea8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0b4e80 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0b5088 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0b4ee8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x56101f0b50a0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0b4f48 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0b4f28 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0b4f08 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0b50b8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b4f68 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0b50d0 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b4f88 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x56101f0b50e8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0b4fa8 <col:16> 'int' 0
| `-FullComment 0x56101f1d0d10 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x56101f1d0ad0 <line:742:4>
|   | `-TextComment 0x56101f1d0aa0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d0af0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d0b50 <col:11, col:50>
|   |   `-TextComment 0x56101f1d0b20 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x56101f1d0bf0 <line:744:3, line:746:45>
|   | |-TextComment 0x56101f1d0b70 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x56101f1d0b90 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d0bb0 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d0c40 <line:748:3>
|   | `-TextComment 0x56101f1d0c10 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d0c60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d0cc0 <col:11, col:35>
|       `-TextComment 0x56101f1d0c90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b5208 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b5180 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b55a8 <line:765:1, line:768:1>
| | `-ReturnStmt 0x56101f0b5568 <line:767:2, col:65>
| |   `-CallExpr 0x56101f0b5460 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b5448 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0b52b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0b54c0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0b52d8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0b5180 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b54d8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0b5340 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0b5328 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0b5300 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0b54f0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0b5368 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x56101f0b5508 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0b53c8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0b53a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0b5388 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b5520 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b53e8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b5538 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b5408 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x56101f0b5550 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0b5428 <col:16> 'int' 0
| `-FullComment 0x56101f1d0ff0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x56101f1d0db0 <line:756:4>
|   | `-TextComment 0x56101f1d0d80 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d0dd0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d0e30 <col:11, col:50>
|   |   `-TextComment 0x56101f1d0e00 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x56101f1d0ed0 <line:758:3, line:760:45>
|   | |-TextComment 0x56101f1d0e50 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x56101f1d0e70 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d0e90 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d0f20 <line:762:3>
|   | `-TextComment 0x56101f1d0ef0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d0f40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d0fa0 <col:11, col:35>
|       `-TextComment 0x56101f1d0f70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b5658 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b55d0 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b5a28 <line:779:1, line:782:1>
| | `-ReturnStmt 0x56101f0b59e8 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x56101f0b59d0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0b58b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0b5898 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0b5700 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0b5928 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0b5910 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0b5728 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0b55d0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0b5940 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0b5790 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0b5778 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0b5750 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0b5958 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0b57b8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x56101f0b5970 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0b5818 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0b57f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0b57d8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0b5988 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b5838 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0b59a0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b5858 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0b59b8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0b5878 <col:16> 'int' 0
| `-FullComment 0x56101f1d12d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x56101f1d1090 <line:770:4>
|   | `-TextComment 0x56101f1d1060 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d10b0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d1110 <col:11, col:50>
|   |   `-TextComment 0x56101f1d10e0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x56101f1d11b0 <line:772:3, line:774:44>
|   | |-TextComment 0x56101f1d1130 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x56101f1d1150 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d1170 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d1200 <line:776:3>
|   | `-TextComment 0x56101f1d11d0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d1220 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d1280 <col:11, col:35>
|       `-TextComment 0x56101f1d1250 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b5ad8 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b5a50 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b5e98 <line:793:1, line:796:1>
| | `-ReturnStmt 0x56101f0b5e58 <line:795:2, col:66>
| |   `-CallExpr 0x56101f0b5d30 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b5d18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0b5b80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0b5db0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0b5ba8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0b5a50 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b5dc8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0b5c10 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0b5bf8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0b5bd0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0b5de0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0b5c38 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x56101f0b5df8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0b5c98 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0b5c78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0b5c58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b5e10 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b5cb8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b5e28 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b5cd8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0b5e40 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0b5cf8 <col:16> 'int' 0
| `-FullComment 0x56101f1d15b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x56101f1d1370 <line:784:4>
|   | `-TextComment 0x56101f1d1340 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d1390 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d13f0 <col:11, col:50>
|   |   `-TextComment 0x56101f1d13c0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x56101f1d1490 <line:786:3, line:788:44>
|   | |-TextComment 0x56101f1d1410 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x56101f1d1430 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d1450 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d14e0 <line:790:3>
|   | `-TextComment 0x56101f1d14b0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d1500 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d1560 <col:11, col:35>
|       `-TextComment 0x56101f1d1530 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b5f48 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b5ec0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b6318 <line:807:1, line:810:1>
| | `-ReturnStmt 0x56101f0b62d8 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0b62c0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0b61a0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0b6188 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0b5ff0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0b6218 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0b6200 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0b6018 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0b5ec0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0b6230 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0b6080 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0b6068 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0b6040 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0b6248 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0b60a8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x56101f0b6260 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0b6108 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0b60e8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0b60c8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0b6278 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b6128 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0b6290 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b6148 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0b62a8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0b6168 <col:16> 'int' 1
| `-FullComment 0x56101f1d1890 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x56101f1d1650 <line:798:4>
|   | `-TextComment 0x56101f1d1620 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d1670 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d16d0 <col:11, col:50>
|   |   `-TextComment 0x56101f1d16a0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x56101f1d1770 <line:800:3, line:802:37>
|   | |-TextComment 0x56101f1d16f0 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x56101f1d1710 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d1730 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d17c0 <line:804:3>
|   | `-TextComment 0x56101f1d1790 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d17e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d1840 <col:11, col:35>
|       `-TextComment 0x56101f1d1810 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b63c8 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b6340 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b6768 <line:821:1, line:824:1>
| | `-ReturnStmt 0x56101f0b6728 <line:823:2, col:65>
| |   `-CallExpr 0x56101f0b6620 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b6608 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0b6470 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0b6680 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0b6498 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0b6340 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b6698 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0b6500 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0b64e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0b64c0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0b66b0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0b6528 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x56101f0b66c8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0b6588 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0b6568 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0b6548 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b66e0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b65a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b66f8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b65c8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0b6710 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0b65e8 <col:16> 'int' 1
| `-FullComment 0x56101f1d1b70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x56101f1d1930 <line:812:4>
|   | `-TextComment 0x56101f1d1900 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d1950 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d19b0 <col:11, col:50>
|   |   `-TextComment 0x56101f1d1980 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x56101f1d1a50 <line:814:3, line:816:37>
|   | |-TextComment 0x56101f1d19d0 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x56101f1d19f0 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d1a10 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d1aa0 <line:818:3>
|   | `-TextComment 0x56101f1d1a70 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d1ac0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d1b20 <col:11, col:35>
|       `-TextComment 0x56101f1d1af0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b6818 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b6790 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b6be8 <line:835:1, line:838:1>
| | `-ReturnStmt 0x56101f0b6ba8 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0b6b90 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0b6a70 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0b6a58 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0b68c0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0b6ae8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0b6ad0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0b68e8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0b6790 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0b6b00 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0b6950 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0b6938 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0b6910 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0b6b18 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0b6978 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x56101f0b6b30 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0b69d8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0b69b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0b6998 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0b6b48 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b69f8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0b6b60 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b6a18 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x56101f0b6b78 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0b6a38 <col:16> 'int' 0
| `-FullComment 0x56101f1d1e50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x56101f1d1c10 <line:826:4>
|   | `-TextComment 0x56101f1d1be0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d1c30 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d1c90 <col:11, col:50>
|   |   `-TextComment 0x56101f1d1c60 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x56101f1d1d30 <line:828:3, line:830:45>
|   | |-TextComment 0x56101f1d1cb0 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x56101f1d1cd0 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d1cf0 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d1d80 <line:832:3>
|   | `-TextComment 0x56101f1d1d50 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d1da0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d1e00 <col:11, col:35>
|       `-TextComment 0x56101f1d1dd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b6c98 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b6c10 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b7058 <line:849:1, line:852:1>
| | `-ReturnStmt 0x56101f0b7010 <line:851:2, col:65>
| |   `-CallExpr 0x56101f0b6f08 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b6ef0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0b6d40 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0b6f68 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0b6d80 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0b6c10 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b6f80 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0b6de8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0b6dd0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0b6da8 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0b6f98 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0b6e10 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x56101f0b6fb0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0b6e70 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0b6e50 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0b6e30 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b6fc8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b6e90 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b6fe0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b6eb0 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x56101f0b6ff8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0b6ed0 <col:16> 'int' 0
| `-FullComment 0x56101f1d2150 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x56101f1d1ef0 <line:840:4>
|   | `-TextComment 0x56101f1d1ec0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d1f10 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1d1f70 <col:11, col:50>
|   |   `-TextComment 0x56101f1d1f40 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x56101f1d2010 <line:842:3, line:844:45>
|   | |-TextComment 0x56101f1d1f90 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x56101f1d1fb0 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d1fd0 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d2060 <line:846:3>
|   | `-TextComment 0x56101f1d2030 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d2080 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d20e0 <col:11, col:35>
|       `-TextComment 0x56101f1d20b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b7108 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b7080 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f0b74d8 <line:863:1, line:866:1>
| | `-ReturnStmt 0x56101f0b7498 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x56101f0b7480 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0b7360 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0b7348 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0b71b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0b73d8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0b73c0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0b71d8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0b7080 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0b73f0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0b7240 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0b7228 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0b7200 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0b7408 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0b7268 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x56101f0b7420 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0b72c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0b72a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0b7288 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0b7438 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b72e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0b7450 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b7308 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0b7468 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0b7328 <col:16> 'int' 0
| `-FullComment 0x56101f1d2430 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x56101f1d21f0 <line:854:4>
|   | `-TextComment 0x56101f1d21c0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d2210 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1d2270 <col:11, col:49>
|   |   `-TextComment 0x56101f1d2240 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x56101f1d2310 <line:856:3, line:858:44>
|   | |-TextComment 0x56101f1d2290 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x56101f1d22b0 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d22d0 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d2360 <line:860:3>
|   | `-TextComment 0x56101f1d2330 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d2380 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d23e0 <col:11, col:35>
|       `-TextComment 0x56101f1d23b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b7588 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f0b7500 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f0b7928 <line:877:1, line:880:1>
| | `-ReturnStmt 0x56101f0b78e8 <line:879:2, col:66>
| |   `-CallExpr 0x56101f0b77e0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b77c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f0b7630 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f0b7840 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f0b7658 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f0b7500 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f0b7858 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f0b76c0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f0b76a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f0b7680 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f0b7870 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f0b76e8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x56101f0b7888 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f0b7748 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f0b7728 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f0b7708 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b78a0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b7768 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f0b78b8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f0b7788 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f0b78d0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f0b77a8 <col:16> 'int' 0
| `-FullComment 0x56101f1d2710 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x56101f1d24d0 <line:868:4>
|   | `-TextComment 0x56101f1d24a0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d24f0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1d2550 <col:11, col:49>
|   |   `-TextComment 0x56101f1d2520 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x56101f1d25f0 <line:870:3, line:872:44>
|   | |-TextComment 0x56101f1d2570 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x56101f1d2590 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d25b0 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d2640 <line:874:3>
|   | `-TextComment 0x56101f1d2610 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d2660 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d26c0 <col:11, col:35>
|       `-TextComment 0x56101f1d2690 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f0b79d8 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f0b7950 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10a208 <line:891:1, line:894:1>
| | `-ReturnStmt 0x56101f0b7d68 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x56101f0b7d50 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f0b7c30 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f0b7c18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f0b7a80 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f0b7ca8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f0b7c90 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f0b7aa8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f0b7950 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f0b7cc0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f0b7b10 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f0b7af8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f0b7ad0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f0b7cd8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f0b7b38 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x56101f0b7cf0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f0b7b98 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f0b7b78 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f0b7b58 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f0b7d08 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b7bb8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f0b7d20 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f0b7bd8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x56101f0b7d38 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f0b7bf8 <col:16> 'int' 1
| `-FullComment 0x56101f1d29f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x56101f1d27b0 <line:882:4>
|   | `-TextComment 0x56101f1d2780 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d27d0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1d2830 <col:11, col:49>
|   |   `-TextComment 0x56101f1d2800 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x56101f1d28d0 <line:884:3, line:886:37>
|   | |-TextComment 0x56101f1d2850 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x56101f1d2870 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d2890 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d2920 <line:888:3>
|   | `-TextComment 0x56101f1d28f0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d2940 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d29a0 <col:11, col:35>
|       `-TextComment 0x56101f1d2970 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10a2b8 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10a230 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10a658 <line:905:1, line:908:1>
| | `-ReturnStmt 0x56101f10a618 <line:907:2, col:65>
| |   `-CallExpr 0x56101f10a510 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f10a4f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f10a360 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f10a570 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f10a388 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f10a230 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f10a588 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f10a3f0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f10a3d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f10a3b0 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f10a5a0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f10a418 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x56101f10a5b8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f10a478 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f10a458 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f10a438 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f10a5d0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f10a498 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f10a5e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f10a4b8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x56101f10a600 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f10a4d8 <col:16> 'int' 1
| `-FullComment 0x56101f1d2cd0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x56101f1d2a90 <line:896:4>
|   | `-TextComment 0x56101f1d2a60 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d2ab0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1d2b10 <col:11, col:49>
|   |   `-TextComment 0x56101f1d2ae0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x56101f1d2bb0 <line:898:3, line:900:37>
|   | |-TextComment 0x56101f1d2b30 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x56101f1d2b50 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d2b70 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d2c00 <line:902:3>
|   | `-TextComment 0x56101f1d2bd0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d2c20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d2c80 <col:11, col:35>
|       `-TextComment 0x56101f1d2c50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10a708 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10a680 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10aad8 <line:919:1, line:922:1>
| | `-ReturnStmt 0x56101f10aa98 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x56101f10aa80 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f10a960 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f10a948 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f10a7b0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x56101f10a9d8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x56101f10a9c0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56101f10a7d8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f10a680 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x56101f10a9f0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x56101f10a840 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x56101f10a828 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x56101f10a800 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x56101f10aa08 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x56101f10a868 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x56101f10aa20 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x56101f10a8c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x56101f10a8a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |       |     `-IntegerLiteral 0x56101f10a888 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x56101f10aa38 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f10a8e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x56101f10aa50 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x56101f10a908 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x56101f10aa68 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x56101f10a928 <col:16> 'int' 0
| `-FullComment 0x56101f1d2fb0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x56101f1d2d70 <line:910:4>
|   | `-TextComment 0x56101f1d2d40 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d2d90 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1d2df0 <col:11, col:49>
|   |   `-TextComment 0x56101f1d2dc0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x56101f1d2e90 <line:912:3, line:914:45>
|   | |-TextComment 0x56101f1d2e10 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x56101f1d2e30 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d2e50 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d2ee0 <line:916:3>
|   | `-TextComment 0x56101f1d2eb0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d2f00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d2f60 <col:11, col:35>
|       `-TextComment 0x56101f1d2f30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10ab88 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10ab00 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10af28 <line:933:1, line:936:1>
| | `-ReturnStmt 0x56101f10aee8 <line:935:2, col:65>
| |   `-CallExpr 0x56101f10ade0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f10adc8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f10ac30 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x56101f0ef9f0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x56101f10ae40 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f10ac58 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x56101f10ab00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x56101f10ae58 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x56101f10acc0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x56101f10aca8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x56101f10ac80 <col:18> 'int (void)' Function 0x56101f0ef4e8 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x56101f10ae70 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x56101f10ace8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x56101f10ae88 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x56101f10ad48 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x56101f10ad28 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     |     `-IntegerLiteral 0x56101f10ad08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f10aea0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f10ad68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x56101f10aeb8 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x56101f10ad88 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x56101f10aed0 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x56101f10ada8 <col:16> 'int' 0
| `-FullComment 0x56101f1d3290 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x56101f1d3050 <line:924:4>
|   | `-TextComment 0x56101f1d3020 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d3070 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1d30d0 <col:11, col:49>
|   |   `-TextComment 0x56101f1d30a0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x56101f1d3170 <line:926:3, line:928:45>
|   | |-TextComment 0x56101f1d30f0 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x56101f1d3110 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d3130 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d31c0 <line:930:3>
|   | `-TextComment 0x56101f1d3190 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d31e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d3240 <col:11, col:35>
|       `-TextComment 0x56101f1d3210 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10afd8 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10af50 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10b238 <line:947:1, line:950:1>
| `-FullComment 0x56101f1d3570 <line:938:4, line:944:35>
|   |-ParagraphComment 0x56101f1d3330 <line:938:4>
|   | `-TextComment 0x56101f1d3300 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d3350 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d33b0 <col:11, col:43>
|   |   `-TextComment 0x56101f1d3380 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x56101f1d3450 <line:940:3, line:942:44>
|   | |-TextComment 0x56101f1d33d0 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x56101f1d33f0 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d3410 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d34a0 <line:944:3>
|   | `-TextComment 0x56101f1d3470 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d34c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d3520 <col:11, col:35>
|       `-TextComment 0x56101f1d34f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10b2e0 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10b258 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10b528 <line:961:1, line:964:1>
| `-FullComment 0x56101f1d3850 <line:952:4, line:958:35>
|   |-ParagraphComment 0x56101f1d3610 <line:952:4>
|   | `-TextComment 0x56101f1d35e0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d3630 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d3690 <col:11, col:43>
|   |   `-TextComment 0x56101f1d3660 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x56101f1d3730 <line:954:3, line:956:44>
|   | |-TextComment 0x56101f1d36b0 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x56101f1d36d0 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d36f0 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d3780 <line:958:3>
|   | `-TextComment 0x56101f1d3750 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d37a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d3800 <col:11, col:35>
|       `-TextComment 0x56101f1d37d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10b5d0 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10b548 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10b818 <line:975:1, line:978:1>
| `-FullComment 0x56101f1d3b30 <line:966:4, line:972:35>
|   |-ParagraphComment 0x56101f1d38f0 <line:966:4>
|   | `-TextComment 0x56101f1d38c0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d3910 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d3970 <col:11, col:43>
|   |   `-TextComment 0x56101f1d3940 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x56101f1d3a10 <line:968:3, line:970:37>
|   | |-TextComment 0x56101f1d3990 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x56101f1d39b0 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d39d0 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d3a60 <line:972:3>
|   | `-TextComment 0x56101f1d3a30 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d3a80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d3ae0 <col:11, col:35>
|       `-TextComment 0x56101f1d3ab0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10b8c0 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10b838 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10bb08 <line:989:1, line:992:1>
| `-FullComment 0x56101f1d3e10 <line:980:4, line:986:35>
|   |-ParagraphComment 0x56101f1d3bd0 <line:980:4>
|   | `-TextComment 0x56101f1d3ba0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d3bf0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d3c50 <col:11, col:43>
|   |   `-TextComment 0x56101f1d3c20 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x56101f1d3cf0 <line:982:3, line:984:37>
|   | |-TextComment 0x56101f1d3c70 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x56101f1d3c90 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d3cb0 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d3d40 <line:986:3>
|   | `-TextComment 0x56101f1d3d10 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d3d60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d3dc0 <col:11, col:35>
|       `-TextComment 0x56101f1d3d90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10bbb0 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10bb28 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10bdf8 <line:1003:1, line:1006:1>
| `-FullComment 0x56101f1d40f0 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x56101f1d3eb0 <line:994:4>
|   | `-TextComment 0x56101f1d3e80 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d3ed0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d3f30 <col:11, col:43>
|   |   `-TextComment 0x56101f1d3f00 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x56101f1d3fd0 <line:996:3, line:998:45>
|   | |-TextComment 0x56101f1d3f50 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x56101f1d3f70 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d3f90 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d4020 <line:1000:3>
|   | `-TextComment 0x56101f1d3ff0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d4040 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d40a0 <col:11, col:35>
|       `-TextComment 0x56101f1d4070 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10bea0 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10be18 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10c0e8 <line:1017:1, line:1020:1>
| `-FullComment 0x56101f1d43e0 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x56101f1d41a0 <line:1008:4>
|   | `-TextComment 0x56101f1d4170 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d41c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d4220 <col:11, col:43>
|   |   `-TextComment 0x56101f1d41f0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x56101f1d42c0 <line:1010:3, line:1012:45>
|   | |-TextComment 0x56101f1d4240 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x56101f1d4260 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d4280 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d4310 <line:1014:3>
|   | `-TextComment 0x56101f1d42e0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d4330 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d4390 <col:11, col:35>
|       `-TextComment 0x56101f1d4360 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10c200 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10c108 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10c3c8 <line:1031:1, line:1034:1>
| `-FullComment 0x56101f1d46c0 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x56101f1d4480 <line:1022:4>
|   | `-TextComment 0x56101f1d4450 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d44a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d4500 <col:11, col:40>
|   |   `-TextComment 0x56101f1d44d0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x56101f1d45a0 <line:1024:3, line:1026:44>
|   | |-TextComment 0x56101f1d4520 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x56101f1d4540 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d4560 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d45f0 <line:1028:3>
|   | `-TextComment 0x56101f1d45c0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d4610 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d4670 <col:11, col:35>
|       `-TextComment 0x56101f1d4640 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10c470 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10c3e8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10c638 <line:1045:1, line:1048:1>
| `-FullComment 0x56101f1d49a0 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x56101f1d4760 <line:1036:4>
|   | `-TextComment 0x56101f1d4730 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d4780 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d47e0 <col:11, col:40>
|   |   `-TextComment 0x56101f1d47b0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x56101f1d4880 <line:1038:3, line:1040:44>
|   | |-TextComment 0x56101f1d4800 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x56101f1d4820 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d4840 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d48d0 <line:1042:3>
|   | `-TextComment 0x56101f1d48a0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d48f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d4950 <col:11, col:35>
|       `-TextComment 0x56101f1d4920 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10c6e0 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10c658 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10c8a8 <line:1059:1, line:1062:1>
| `-FullComment 0x56101f1d4c80 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x56101f1d4a40 <line:1050:4>
|   | `-TextComment 0x56101f1d4a10 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d4a60 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d4ac0 <col:11, col:40>
|   |   `-TextComment 0x56101f1d4a90 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x56101f1d4b60 <line:1052:3, line:1054:37>
|   | |-TextComment 0x56101f1d4ae0 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x56101f1d4b00 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d4b20 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d4bb0 <line:1056:3>
|   | `-TextComment 0x56101f1d4b80 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d4bd0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d4c30 <col:11, col:35>
|       `-TextComment 0x56101f1d4c00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10c950 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10c8c8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10cb18 <line:1073:1, line:1076:1>
| `-FullComment 0x56101f1d4f60 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x56101f1d4d20 <line:1064:4>
|   | `-TextComment 0x56101f1d4cf0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d4d40 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d4da0 <col:11, col:40>
|   |   `-TextComment 0x56101f1d4d70 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x56101f1d4e40 <line:1066:3, line:1068:37>
|   | |-TextComment 0x56101f1d4dc0 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x56101f1d4de0 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d4e00 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d4e90 <line:1070:3>
|   | `-TextComment 0x56101f1d4e60 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d4eb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d4f10 <col:11, col:35>
|       `-TextComment 0x56101f1d4ee0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10cbc0 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10cb38 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10cd88 <line:1087:1, line:1090:1>
| `-FullComment 0x56101f1d5240 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x56101f1d5000 <line:1078:4>
|   | `-TextComment 0x56101f1d4fd0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d5020 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d5080 <col:11, col:40>
|   |   `-TextComment 0x56101f1d5050 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x56101f1d5120 <line:1080:3, line:1082:45>
|   | |-TextComment 0x56101f1d50a0 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x56101f1d50c0 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d50e0 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d5170 <line:1084:3>
|   | `-TextComment 0x56101f1d5140 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d5190 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d51f0 <col:11, col:35>
|       `-TextComment 0x56101f1d51c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10ce30 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10cda8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10cff8 <line:1101:1, line:1104:1>
| `-FullComment 0x56101f1d5520 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x56101f1d52e0 <line:1092:4>
|   | `-TextComment 0x56101f1d52b0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d5300 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d5360 <col:11, col:40>
|   |   `-TextComment 0x56101f1d5330 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x56101f1d5400 <line:1094:3, line:1096:45>
|   | |-TextComment 0x56101f1d5380 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x56101f1d53a0 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d53c0 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d5450 <line:1098:3>
|   | `-TextComment 0x56101f1d5420 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d5470 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d54d0 <col:11, col:35>
|       `-TextComment 0x56101f1d54a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10d0a0 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10d018 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10e288 <line:1115:1, line:1118:1>
| `-FullComment 0x56101f1d5800 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x56101f1d55c0 <line:1106:4>
|   | `-TextComment 0x56101f1d5590 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d55e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d5640 <col:11, col:40>
|   |   `-TextComment 0x56101f1d5610 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x56101f1d56e0 <line:1108:3, line:1110:44>
|   | |-TextComment 0x56101f1d5660 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x56101f1d5680 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d56a0 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d5730 <line:1112:3>
|   | `-TextComment 0x56101f1d5700 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d5750 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d57b0 <col:11, col:35>
|       `-TextComment 0x56101f1d5780 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10e330 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10e2a8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10e4f8 <line:1129:1, line:1132:1>
| `-FullComment 0x56101f1d5ae0 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x56101f1d58a0 <line:1120:4>
|   | `-TextComment 0x56101f1d5870 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d58c0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d5920 <col:11, col:40>
|   |   `-TextComment 0x56101f1d58f0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x56101f1d59c0 <line:1122:3, line:1124:44>
|   | |-TextComment 0x56101f1d5940 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x56101f1d5960 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d5980 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d5a10 <line:1126:3>
|   | `-TextComment 0x56101f1d59e0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d5a30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d5a90 <col:11, col:35>
|       `-TextComment 0x56101f1d5a60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10e5a0 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10e518 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10e768 <line:1143:1, line:1146:1>
| `-FullComment 0x56101f1d5dc0 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x56101f1d5b80 <line:1134:4>
|   | `-TextComment 0x56101f1d5b50 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d5ba0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d5c00 <col:11, col:40>
|   |   `-TextComment 0x56101f1d5bd0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x56101f1d5ca0 <line:1136:3, line:1138:37>
|   | |-TextComment 0x56101f1d5c20 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x56101f1d5c40 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d5c60 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d5cf0 <line:1140:3>
|   | `-TextComment 0x56101f1d5cc0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d5d10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d5d70 <col:11, col:35>
|       `-TextComment 0x56101f1d5d40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10e810 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10e788 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10e9d8 <line:1157:1, line:1160:1>
| `-FullComment 0x56101f1d60a0 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x56101f1d5e60 <line:1148:4>
|   | `-TextComment 0x56101f1d5e30 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d5e80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d5ee0 <col:11, col:40>
|   |   `-TextComment 0x56101f1d5eb0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x56101f1d5f80 <line:1150:3, line:1152:37>
|   | |-TextComment 0x56101f1d5f00 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x56101f1d5f20 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d5f40 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d5fd0 <line:1154:3>
|   | `-TextComment 0x56101f1d5fa0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d5ff0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d6050 <col:11, col:35>
|       `-TextComment 0x56101f1d6020 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10ea80 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10e9f8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10ec48 <line:1171:1, line:1174:1>
| `-FullComment 0x56101f1d6390 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x56101f1d6150 <line:1162:4>
|   | `-TextComment 0x56101f1d6110 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d6170 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d61d0 <col:11, col:40>
|   |   `-TextComment 0x56101f1d61a0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x56101f1d6270 <line:1164:3, line:1166:45>
|   | |-TextComment 0x56101f1d61f0 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x56101f1d6210 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d6230 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d62c0 <line:1168:3>
|   | `-TextComment 0x56101f1d6290 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d62e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d6340 <col:11, col:35>
|       `-TextComment 0x56101f1d6310 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10ecf0 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10ec68 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10eeb8 <line:1185:1, line:1188:1>
| `-FullComment 0x56101f1d6670 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x56101f1d6430 <line:1176:4>
|   | `-TextComment 0x56101f1d6400 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d6450 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1d64b0 <col:11, col:40>
|   |   `-TextComment 0x56101f1d6480 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x56101f1d6550 <line:1178:3, line:1180:45>
|   | |-TextComment 0x56101f1d64d0 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x56101f1d64f0 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d6510 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d65a0 <line:1182:3>
|   | `-TextComment 0x56101f1d6570 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d65c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d6620 <col:11, col:35>
|       `-TextComment 0x56101f1d65f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10ef60 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10eed8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10f128 <line:1199:1, line:1202:1>
| `-FullComment 0x56101f1d6950 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x56101f1d6710 <line:1190:4>
|   | `-TextComment 0x56101f1d66e0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d6730 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1d6790 <col:11, col:39>
|   |   `-TextComment 0x56101f1d6760 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x56101f1d6830 <line:1192:3, line:1194:44>
|   | |-TextComment 0x56101f1d67b0 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x56101f1d67d0 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d67f0 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d6880 <line:1196:3>
|   | `-TextComment 0x56101f1d6850 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d68a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d6900 <col:11, col:35>
|       `-TextComment 0x56101f1d68d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10f230 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10f148 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10f3f8 <line:1213:1, line:1216:1>
| `-FullComment 0x56101f1d6c30 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x56101f1d69f0 <line:1204:4>
|   | `-TextComment 0x56101f1d69c0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d6a10 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1d6a70 <col:11, col:39>
|   |   `-TextComment 0x56101f1d6a40 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x56101f1d6b10 <line:1206:3, line:1208:44>
|   | |-TextComment 0x56101f1d6a90 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x56101f1d6ab0 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d6ad0 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d6b60 <line:1210:3>
|   | `-TextComment 0x56101f1d6b30 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d6b80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d6be0 <col:11, col:35>
|       `-TextComment 0x56101f1d6bb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10f4a0 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10f418 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10f668 <line:1227:1, line:1230:1>
| `-FullComment 0x56101f1d6f10 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x56101f1d6cd0 <line:1218:4>
|   | `-TextComment 0x56101f1d6ca0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d6cf0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1d6d50 <col:11, col:39>
|   |   `-TextComment 0x56101f1d6d20 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x56101f1d6df0 <line:1220:3, line:1222:37>
|   | |-TextComment 0x56101f1d6d70 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x56101f1d6d90 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d6db0 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d6e40 <line:1224:3>
|   | `-TextComment 0x56101f1d6e10 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d6e60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d6ec0 <col:11, col:35>
|       `-TextComment 0x56101f1d6e90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10f710 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10f688 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10f8d8 <line:1241:1, line:1244:1>
| `-FullComment 0x56101f1d71f0 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x56101f1d6fb0 <line:1232:4>
|   | `-TextComment 0x56101f1d6f80 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d6fd0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1d7030 <col:11, col:39>
|   |   `-TextComment 0x56101f1d7000 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x56101f1d70d0 <line:1234:3, line:1236:37>
|   | |-TextComment 0x56101f1d7050 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x56101f1d7070 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d7090 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d7120 <line:1238:3>
|   | `-TextComment 0x56101f1d70f0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d7140 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d71a0 <col:11, col:35>
|       `-TextComment 0x56101f1d7170 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10f980 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10f8f8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f10fb48 <line:1255:1, line:1258:1>
| `-FullComment 0x56101f1d74d0 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x56101f1d7290 <line:1246:4>
|   | `-TextComment 0x56101f1d7260 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d72b0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1d7310 <col:11, col:39>
|   |   `-TextComment 0x56101f1d72e0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x56101f1d73b0 <line:1248:3, line:1250:45>
|   | |-TextComment 0x56101f1d7330 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x56101f1d7350 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d7370 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d7400 <line:1252:3>
|   | `-TextComment 0x56101f1d73d0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d7420 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d7480 <col:11, col:35>
|       `-TextComment 0x56101f1d7450 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10fbf0 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f10fb68 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f10fdb8 <line:1269:1, line:1272:1>
| `-FullComment 0x56101f1d77b0 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x56101f1d7570 <line:1260:4>
|   | `-TextComment 0x56101f1d7540 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d7590 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1d75f0 <col:11, col:39>
|   |   `-TextComment 0x56101f1d75c0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x56101f1d7690 <line:1262:3, line:1264:45>
|   | |-TextComment 0x56101f1d7610 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x56101f1d7630 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d7650 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d76e0 <line:1266:3>
|   | `-TextComment 0x56101f1d76b0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d7700 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d7760 <col:11, col:35>
|       `-TextComment 0x56101f1d7730 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f10fe60 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f10fdd8 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f1100a8 <line:1283:1, line:1286:1>
| `-FullComment 0x56101f1d7a90 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x56101f1d7850 <line:1274:4>
|   | `-TextComment 0x56101f1d7820 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d7870 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d78d0 <col:11, col:43>
|   |   `-TextComment 0x56101f1d78a0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x56101f1d7970 <line:1276:3, line:1278:44>
|   | |-TextComment 0x56101f1d78f0 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x56101f1d7910 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d7930 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d79c0 <line:1280:3>
|   | `-TextComment 0x56101f1d7990 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d79e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d7a40 <col:11, col:35>
|       `-TextComment 0x56101f1d7a10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f110150 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f1100c8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f1103b8 <line:1297:1, line:1300:1>
| `-FullComment 0x56101f1d7d70 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x56101f1d7b30 <line:1288:4>
|   | `-TextComment 0x56101f1d7b00 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d7b50 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d7bb0 <col:11, col:43>
|   |   `-TextComment 0x56101f1d7b80 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x56101f1d7c50 <line:1290:3, line:1292:44>
|   | |-TextComment 0x56101f1d7bd0 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x56101f1d7bf0 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d7c10 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x56101f1d7ca0 <line:1294:3>
|   | `-TextComment 0x56101f1d7c70 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d7cc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d7d20 <col:11, col:35>
|       `-TextComment 0x56101f1d7cf0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f110460 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f1103d8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f1106a8 <line:1311:1, line:1314:1>
| `-FullComment 0x56101f1d8050 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x56101f1d7e10 <line:1302:4>
|   | `-TextComment 0x56101f1d7de0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d7e30 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d7e90 <col:11, col:43>
|   |   `-TextComment 0x56101f1d7e60 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x56101f1d7f30 <line:1304:3, line:1306:37>
|   | |-TextComment 0x56101f1d7eb0 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x56101f1d7ed0 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d7ef0 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d7f80 <line:1308:3>
|   | `-TextComment 0x56101f1d7f50 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d7fa0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d8000 <col:11, col:35>
|       `-TextComment 0x56101f1d7fd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f110750 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f1106c8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f110998 <line:1325:1, line:1328:1>
| `-FullComment 0x56101f1d8340 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x56101f1d80f0 <line:1316:4>
|   | `-TextComment 0x56101f1d80c0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d8110 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d8180 <col:11, col:43>
|   |   `-TextComment 0x56101f1d8150 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x56101f1d8220 <line:1318:3, line:1320:37>
|   | |-TextComment 0x56101f1d81a0 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x56101f1d81c0 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d81e0 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x56101f1d8270 <line:1322:3>
|   | `-TextComment 0x56101f1d8240 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d8290 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d82f0 <col:11, col:35>
|       `-TextComment 0x56101f1d82c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f110a40 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x56101f1109b8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f110c88 <line:1339:1, line:1342:1>
| `-FullComment 0x56101f1d8620 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x56101f1d83e0 <line:1330:4>
|   | `-TextComment 0x56101f1d83b0 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d8400 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d8460 <col:11, col:43>
|   |   `-TextComment 0x56101f1d8430 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x56101f1d8500 <line:1332:3, line:1334:45>
|   | |-TextComment 0x56101f1d8480 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x56101f1d84a0 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x56101f1d84c0 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d8550 <line:1336:3>
|   | `-TextComment 0x56101f1d8520 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d8570 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d85d0 <col:11, col:35>
|       `-TextComment 0x56101f1d85a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f110d30 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x56101f110ca8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x56101f110fd8 <line:1353:1, line:1356:1>
| `-FullComment 0x56101f1d8900 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x56101f1d86c0 <line:1344:4>
|   | `-TextComment 0x56101f1d8690 <col:4> Text=" "
|   |-BlockCommandComment 0x56101f1d86e0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1d8740 <col:11, col:43>
|   |   `-TextComment 0x56101f1d8710 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x56101f1d87e0 <line:1346:3, line:1348:45>
|   | |-TextComment 0x56101f1d8760 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x56101f1d8780 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x56101f1d87a0 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x56101f1d8830 <line:1350:3>
|   | `-TextComment 0x56101f1d8800 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1d8850 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x56101f1d88b0 <col:11, col:35>
|       `-TextComment 0x56101f1d8880 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x56101f111078 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x56101f1d8b90 <line:112:3, line:116:1>
|   |-ParagraphComment 0x56101f1d89a0 <line:112:3>
|   | `-TextComment 0x56101f1d8970 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1d89c0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x56101f1d8a20 <col:10, col:64>
|   |   `-TextComment 0x56101f1d89f0 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x56101f1d8a70 <line:114:3>
|   | `-TextComment 0x56101f1d8a40 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1d8a90 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x56101f1d8af0 <col:11, col:40>
|   |   `-TextComment 0x56101f1d8ac0 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x56101f1d8b40 <line:116:1>
|     `-TextComment 0x56101f1d8b10 <col:1> Text=" "
|-FunctionDecl 0x56101f113270 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x56101f1d8e20 <line:121:3, line:125:1>
|   |-ParagraphComment 0x56101f1d8c30 <line:121:3>
|   | `-TextComment 0x56101f1d8c00 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1d8c50 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x56101f1d8cb0 <col:10, col:46>
|   |   `-TextComment 0x56101f1d8c80 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x56101f1d8d00 <line:123:3>
|   | `-TextComment 0x56101f1d8cd0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1d8d20 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x56101f1d8d80 <col:11, col:40>
|   |   `-TextComment 0x56101f1d8d50 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x56101f1d8dd0 <line:125:1>
|     `-TextComment 0x56101f1d8da0 <col:1> Text=" "
|-RecordDecl 0x56101f113310 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x56101f113610 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x56101f1135b0 'void (*)(struct _timeout *)'
|   `-ParenType 0x56101f113550 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x56101f113510 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x56101ef8e910 'void'
|       `-PointerType 0x56101f113420 'struct _timeout *'
|         `-ElaboratedType 0x56101f1133c0 'struct _timeout' sugar
|           `-RecordType 0x56101f1133a0 'struct _timeout'
|             `-Record 0x56101f113668 '_timeout'
|-RecordDecl 0x56101f113668 prev 0x56101f113310 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x56101f113700 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x56101f113780 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x56101f113800 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x56101f113848 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x56101f113908 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x56101f1139a0 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x56101f113950 'struct k_spinlock_key' sugar
|   `-RecordType 0x56101f1138d0 'struct k_spinlock_key'
|     `-Record 0x56101f113848 'k_spinlock_key'
|-RecordDecl 0x56101f1139f8 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x56101f113c70 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x56101f113b70 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x56101f114088 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x56101f113e00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x56101f113de8 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x56101f113dc8 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x56101f113d60 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x56101f113b70 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x56101f113e98 <line:65:2, col:20>
| | | `-VarDecl 0x56101f113e38 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key'
| | |-BinaryOperator 0x56101f113fc0 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x56101f113ed8 <col:2, col:4> 'int' lvalue .key 0x56101f113908
| | | | `-DeclRefExpr 0x56101f113eb0 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x56101f113e38 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x56101f113fa8 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x56101f113f80 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x56101f113f68 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x56101f113f10 <col:10> 'unsigned int (void)' Function 0x56101f0ee3f0 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x56101f114070 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x56101f114058 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f114030 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x56101f113e38 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x56101f113d18 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x56101f115fd0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x56101f1140e0 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x56101f114150 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x56101f1162c0 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x56101f116168 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x56101f116150 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| | |   `-ParenExpr 0x56101f116130 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x56101f1160c8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x56101f1140e0 'l' 'struct k_spinlock *'
| | `-CallExpr 0x56101f116260 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x56101f116248 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x56101f116190 <col:2> 'void (unsigned int)' Function 0x56101f0ee558 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x56101f1162a8 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x56101f116290 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x56101f1161e0 <col:18, col:22> 'int' lvalue .key 0x56101f113908
| |         `-DeclRefExpr 0x56101f1161b8 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x56101f114150 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x56101f116080 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x56101f116410 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x56101f116308 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x56101f116628 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x56101f1165a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x56101f116588 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue>
| |     `-ParenExpr 0x56101f116568 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x56101f116500 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x56101f116308 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x56101f1164b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x56101f116640 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x56101f1d9080 <line:18:3, line:20:5>
| | |-ParagraphComment 0x56101f1d8ec0 <line:18:3>
| | | `-TextComment 0x56101f1d8e90 <col:3> Text=" "
| | |-VerbatimLineComment 0x56101f1d8ee0 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x56101f1d8f50 <line:19:3>
| | | `-TextComment 0x56101f1d8f20 <col:3> Text=" "
| | |-VerbatimLineComment 0x56101f1d8f70 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x56101f1d9030 <line:20:3, col:5>
| |   |-TextComment 0x56101f1d8fb0 <col:3> Text=" "
| |   |-TextComment 0x56101f1d8fd0 <col:4> Text="@"
| |   `-TextComment 0x56101f1d8ff0 <col:5> Text="{"
| |-EnumConstantDecl 0x56101f116728 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x56101f1d9150 <line:24:5, col:55>
| |   `-ParagraphComment 0x56101f1d9120 <col:5, col:55>
| |     `-TextComment 0x56101f1d90f0 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x56101f116798 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x56101f1d9220 <line:27:5, col:34>
| |   `-ParagraphComment 0x56101f1d91f0 <col:5, col:34>
| |     `-TextComment 0x56101f1d91c0 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x56101f116808 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x56101f1d92f0 <line:30:5, col:50>
| |   `-ParagraphComment 0x56101f1d92c0 <col:5, col:50>
| |     `-TextComment 0x56101f1d9290 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x56101f116878 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x56101f1d93c0 <line:33:5, col:38>
| |   `-ParagraphComment 0x56101f1d9390 <col:5, col:38>
| |     `-TextComment 0x56101f1d9360 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x56101f1168e8 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x56101f1d9490 <line:36:5, col:34>
|     `-ParagraphComment 0x56101f1d9460 <col:5, col:34>
|       `-TextComment 0x56101f1d9430 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x56101f116a30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x56101f116970 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x56101f1d9770 <line:45:3, line:50:44>
|   |-ParagraphComment 0x56101f1d9530 <line:45:3>
|   | `-TextComment 0x56101f1d9500 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1d9550 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f1d95b0 <col:10, col:42>
|   |   `-TextComment 0x56101f1d9580 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x56101f1d9620 <line:47:3, line:48:76>
|   | |-TextComment 0x56101f1d95d0 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x56101f1d95f0 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x56101f1d9670 <line:50:3>
|   | `-TextComment 0x56101f1d9640 <col:3> Text=" "
|   `-ParamCommandComment 0x56101f1d9690 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x56101f1d9720 <col:17, col:44>
|       `-TextComment 0x56101f1d96f0 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x56101f116c70 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x56101f116b20 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x56101f116b98 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x56101f1d9e50 <line:55:3, line:81:71>
|   |-ParagraphComment 0x56101f1d9810 <line:55:3>
|   | `-TextComment 0x56101f1d97e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1d9830 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x56101f1d9890 <col:10, col:36>
|   |   `-TextComment 0x56101f1d9860 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x56101f1d9900 <line:57:3, line:58:67>
|   | |-TextComment 0x56101f1d98b0 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x56101f1d98d0 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x56101f1d99a0 <line:60:3, line:62:71>
|   | |-TextComment 0x56101f1d9920 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x56101f1d9940 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x56101f1d9960 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x56101f1d9a10 <line:64:3, line:65:11>
|   | |-TextComment 0x56101f1d99c0 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x56101f1d99e0 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x56101f1d9a60 <line:67:3, col:42>
|   | `-TextComment 0x56101f1d9a30 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x56101f1d9bf0 <line:69:3, line:77:23>
|   | |-TextComment 0x56101f1d9a80 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x56101f1d9aa0 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x56101f1d9ac0 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x56101f1d9ae0 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x56101f1d9b00 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x56101f1d9b20 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x56101f1d9b40 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x56101f1d9b60 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x56101f1d9b80 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x56101f1d9c40 <line:79:3>
|   | `-TextComment 0x56101f1d9c10 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1d9c60 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x56101f1d9d10 <line:79:17, line:80:3>
|   |   |-TextComment 0x56101f1d9cc0 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x56101f1d9ce0 <line:80:3> Text=" "
|   `-ParamCommandComment 0x56101f1d9d30 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x56101f1d9de0 <line:80:14, line:81:71>
|       |-TextComment 0x56101f1d9d90 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x56101f1d9db0 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x56101f116e68 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x56101f116d60 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x56101f116dd8 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x56101f1da260 <line:86:3, line:97:71>
|   |-ParagraphComment 0x56101f1d9ef0 <line:86:3, col:50>
|   | `-TextComment 0x56101f1d9ec0 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x56101f1d9f90 <line:88:3, line:90:31>
|   | |-TextComment 0x56101f1d9f10 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x56101f1d9f30 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x56101f1d9f50 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x56101f1da000 <line:92:3, line:93:24>
|   | |-TextComment 0x56101f1d9fb0 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x56101f1d9fd0 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x56101f1da050 <line:95:3>
|   | `-TextComment 0x56101f1da020 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1da070 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x56101f1da120 <line:95:17, line:96:3>
|   |   |-TextComment 0x56101f1da0d0 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x56101f1da0f0 <line:96:3> Text=" "
|   `-ParamCommandComment 0x56101f1da160 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x56101f1da210 <line:96:14, line:97:71>
|       |-TextComment 0x56101f1da1c0 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x56101f1da1e0 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x56101f11a7a0 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x56101f11a480 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x56101f11a4f8 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x56101f11a608 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x56101f11a680 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x56101f11a6f0 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x56101f11ace8 <line:70:1, line:73:1>
| | `-ReturnStmt 0x56101f11aa98 <line:71:2, line:72:11>
| |   `-CallExpr 0x56101f11a9d0 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x56101f11a9b8 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f11a868 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x56101f0ef0a8 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x56101f11aa20 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f11a890 <col:34> 'unsigned int' lvalue ParmVar 0x56101f11a480 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x56101f11aa38 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f11a8b8 <col:39> 'unsigned int' lvalue ParmVar 0x56101f11a4f8 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x56101f11aa50 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f11a8e0 <col:49> 'void (*)(void *)' lvalue ParmVar 0x56101f11a608 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x56101f11aa68 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f11a908 <col:58> 'void *' lvalue ParmVar 0x56101f11a680 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x56101f11aa80 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x56101f11a930 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f11a6f0 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x56101f1da8d0 <line:54:3, line:64:48>
|   |-ParagraphComment 0x56101f1da300 <line:54:3, col:33>
|   | `-TextComment 0x56101f1da2d0 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x56101f1da350 <line:56:3, col:80>
|   | `-TextComment 0x56101f1da320 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x56101f1da3a0 <line:58:3>
|   | `-TextComment 0x56101f1da370 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1da3c0 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x56101f1da470 <line:58:14, line:59:3>
|   |   |-TextComment 0x56101f1da420 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x56101f1da440 <line:59:3> Text=" "
|   |-ParamCommandComment 0x56101f1da490 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x56101f1da540 <line:59:19, line:60:3>
|   |   |-TextComment 0x56101f1da4f0 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x56101f1da510 <line:60:3> Text=" "
|   |-ParamCommandComment 0x56101f1da560 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x56101f1da610 <line:60:18, line:61:3>
|   |   |-TextComment 0x56101f1da5c0 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x56101f1da5e0 <line:61:3> Text=" "
|   |-ParamCommandComment 0x56101f1da630 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x56101f1da6e0 <line:61:20, line:62:3>
|   |   |-TextComment 0x56101f1da690 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x56101f1da6b0 <line:62:3> Text=" "
|   |-ParamCommandComment 0x56101f1da700 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x56101f1da790 <col:16, col:53>
|   |   `-TextComment 0x56101f1da760 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x56101f1da7e0 <line:64:3>
|   | `-TextComment 0x56101f1da7b0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1da800 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x56101f1da860 <col:11, col:48>
|       `-TextComment 0x56101f1da830 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x56101f11adc8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x56101f1daaf0 <line:21:3, line:26:59>
|   |-ParagraphComment 0x56101f1da970 <line:21:3, col:57>
|   | `-TextComment 0x56101f1da940 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x56101f1da9e0 <line:23:3, line:24:52>
|   | |-TextComment 0x56101f1da990 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x56101f1da9b0 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x56101f1daa30 <line:26:3>
|   | `-TextComment 0x56101f1daa00 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1daa50 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x56101f1daab0 <col:11, col:59>
|       `-TextComment 0x56101f1daa80 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x56101f11aec0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x56101f11af88 prev 0x56101f11adc8 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x56101f11b278 <line:26:1, line:34:1>
|   |-DoStmt 0x56101f11b180 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f11b148 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f11b0f8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f11b160 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f11b238 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x56101f11b210 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x56101f11b1f8 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56101f11b1a0 <col:9> 'int *()' Function 0x56101f11aec0 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x56101f11b298 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x56101f11b350 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x56101f126d80 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x56101f11b3a0 'struct _wait_q_t' sugar
|   `-RecordType 0x56101f11b320 '_wait_q_t'
|     `-Record 0x56101f11b298 ''
|-RecordDecl 0x56101f126df0 prev 0x56101f0ea018 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x56101f126e78 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x56101f126f20 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x56101f126fd0 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x56101f127080 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x56101f127130 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x56101f1271e0 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x56101f127290 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x56101f127340 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x56101f1273f0 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x56101f1274a0 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x56101f127550 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x56101f127600 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x56101f1276b0 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x56101f127760 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x56101f127810 prev 0x56101f0ea0a0 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x56101f127898 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x56101f127940 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x56101f127a18 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x56101f1dacf0 <line:140:3, line:144:33>
| | |-ParagraphComment 0x56101f1dab90 <line:140:3>
| | | `-TextComment 0x56101f1dab60 <col:3> Text=" "
| | |-BlockCommandComment 0x56101f1dabb0 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x56101f1dac10 <col:10, col:29>
| | |   `-TextComment 0x56101f1dabe0 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x56101f1dacb0 <line:142:3, line:144:33>
| |   |-TextComment 0x56101f1dac30 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x56101f1dac50 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x56101f1dac70 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x56101f127ad0 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x56101f127b48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x56101f127b90 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x56101f127bd8 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x56101f127c20 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x56101f127c68 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x56101f127cb0 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x56101f127cf8 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x56101f129050 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x56101f129098 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x56101f1290e0 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x56101f129128 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x56101f129170 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x56101f1291b8 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x56101f129200 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x56101f129248 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x56101f129290 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x56101f1292d8 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x56101f129320 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x56101f129368 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x56101f1293b0 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x56101f1293f8 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x56101f129440 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x56101f129488 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x56101f1294d0 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x56101f129518 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x56101f129560 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x56101f1295a8 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x56101f1295f0 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x56101f129638 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x56101f129680 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x56101f1296c8 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x56101f129710 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x56101f129758 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x56101f1297a0 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x56101f1297e8 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x56101f129858 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x56101f1dae10 <line:156:5, col:13>
|     `-ParagraphComment 0x56101f1dade0 <col:5, col:13>
|       |-TextComment 0x56101f1dad60 <col:5> Text=" "
|       `-InlineCommandComment 0x56101f1dadb0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x56101f129998 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x56101f129910 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x56101f129b38 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x56101f129ae0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x56101f129ac8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x56101f129aa8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x56101f129a40 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x56101f129910 'obj' 'void *'
| `-FullComment 0x56101f1daf30 <line:227:3, col:12>
|   `-ParagraphComment 0x56101f1daf00 <col:3, col:12>
|     |-TextComment 0x56101f1dae80 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f1daed0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f129d00 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x56101f129b68 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x56101f129bf0 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x56101f129f68 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x56101f129e50 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x56101f129e38 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x56101f129e18 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x56101f129db0 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x56101f129b68 'object' 'void *'
| | `-CStyleCastExpr 0x56101f129f18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x56101f129f00 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x56101f129ee0 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x56101f129e78 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x56101f129bf0 'thread' 'struct k_thread *'
| `-FullComment 0x56101f1db020 <line:235:3, col:12>
|   `-ParagraphComment 0x56101f1daff0 <col:3, col:12>
|     |-TextComment 0x56101f1dafa0 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f1dafc0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f12b600 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x56101f129fa0 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x56101f12b570 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x56101f12b868 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x56101f12b750 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x56101f12b738 <col:29, col:31> 'void *' <LValueToRValue>
| | |   `-ParenExpr 0x56101f12b718 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x56101f12b6b0 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x56101f129fa0 'object' 'void *'
| | `-CStyleCastExpr 0x56101f12b818 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x56101f12b800 <col:29, col:31> 'struct k_thread *' <LValueToRValue>
| |     `-ParenExpr 0x56101f12b7e0 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x56101f12b778 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x56101f12b570 'thread' 'struct k_thread *'
| `-FullComment 0x56101f1db110 <line:245:3, col:12>
|   `-ParagraphComment 0x56101f1db0e0 <col:3, col:12>
|     |-TextComment 0x56101f1db090 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f1db0b0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f12b928 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x56101f12b8a0 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x56101f12ba98 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x56101f12ba70 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x56101f12ba58 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x56101f12ba38 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x56101f12b9d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x56101f12b8a0 'object' 'void *'
| `-FullComment 0x56101f1db200 <line:255:3, col:12>
|   `-ParagraphComment 0x56101f1db1d0 <col:3, col:12>
|     |-TextComment 0x56101f1db180 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f1db1a0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f12bb50 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x56101f12bac8 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x56101f12bce8 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x56101f12bc98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x56101f12bc80 <col:29, col:31> 'void *' <LValueToRValue>
|       `-ParenExpr 0x56101f12bc60 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x56101f12bbf8 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x56101f12bac8 'object' 'void *'
|-FunctionDecl 0x56101f12be30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x56101f12bd18 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x56101f12bda0 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x56101f1db560 <line:270:3, line:277:53>
|   |-ParagraphComment 0x56101f1db2a0 <line:270:3, col:43>
|   | `-TextComment 0x56101f1db270 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x56101f1db340 <line:272:3, line:274:67>
|   | |-TextComment 0x56101f1db2c0 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x56101f1db2e0 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x56101f1db300 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x56101f1db390 <line:276:3>
|   | `-TextComment 0x56101f1db360 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1db3b0 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x56101f1db460 <line:276:17, line:277:3>
|   |   |-TextComment 0x56101f1db410 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x56101f1db430 <line:277:3> Text=" "
|   `-ParamCommandComment 0x56101f1db480 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x56101f1db510 <col:17, col:53>
|       `-TextComment 0x56101f1db4e0 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x56101f12c038 prev 0x56101f12b600 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x56101f12bf20 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x56101f12bfa8 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x56101f1db8c0 <line:282:3, line:289:54>
|   |-ParagraphComment 0x56101f1db600 <line:282:3, col:46>
|   | `-TextComment 0x56101f1db5d0 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x56101f1db6a0 <line:284:3, line:286:67>
|   | |-TextComment 0x56101f1db620 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x56101f1db640 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x56101f1db660 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x56101f1db6f0 <line:288:3>
|   | `-TextComment 0x56101f1db6c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1db710 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x56101f1db7c0 <line:288:17, line:289:3>
|   |   |-TextComment 0x56101f1db770 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x56101f1db790 <line:289:3> Text=" "
|   `-ParamCommandComment 0x56101f1db7e0 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x56101f1db870 <col:17, col:54>
|       `-TextComment 0x56101f1db840 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x56101f12c1b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x56101f12c130 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x56101f1dbbf0 <line:294:3, line:301:1>
|   |-ParagraphComment 0x56101f1db960 <line:294:3>
|   | `-TextComment 0x56101f1db930 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1db980 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x56101f1db9e0 <col:10, col:27>
|   |   `-TextComment 0x56101f1db9b0 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x56101f1dba50 <line:296:3, line:297:72>
|   | |-TextComment 0x56101f1dba00 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x56101f1dba20 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x56101f1dbaa0 <line:299:3>
|   | `-TextComment 0x56101f1dba70 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1dbac0 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x56101f1dbb50 <col:17, col:42>
|   |   `-TextComment 0x56101f1dbb20 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x56101f1dbba0 <line:301:1>
|     `-TextComment 0x56101f1dbb70 <col:1> Text=" "
|-FunctionDecl 0x56101f12c328 prev 0x56101f12bb50 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x56101f12c2a0 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x56101f1dbfb0 <line:305:3, line:319:41>
|   |-ParagraphComment 0x56101f1dbc90 <line:305:3, col:59>
|   | `-TextComment 0x56101f1dbc60 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x56101f1dbd50 <line:307:3, line:310:59>
|   | |-TextComment 0x56101f1dbcb0 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x56101f1dbcd0 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x56101f1dbcf0 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x56101f1dbd10 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x56101f1dbdf0 <line:312:3, line:314:43>
|   | |-TextComment 0x56101f1dbd70 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x56101f1dbd90 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x56101f1dbdb0 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x56101f1dbe60 <line:316:3, line:317:25>
|   | |-TextComment 0x56101f1dbe10 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x56101f1dbe30 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x56101f1dbeb0 <line:319:3>
|   | `-TextComment 0x56101f1dbe80 <col:3> Text=" "
|   `-ParamCommandComment 0x56101f1dbed0 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x56101f1dbf60 <col:17, col:41>
|       `-TextComment 0x56101f1dbf30 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x56101f12c580 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x56101f12c450 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x56101f1dc380 <line:324:3, line:335:12>
|   |-ParagraphComment 0x56101f1dc050 <line:324:3, col:48>
|   | `-TextComment 0x56101f1dc020 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x56101f1dc110 <line:326:3, line:329:78>
|   | |-TextComment 0x56101f1dc070 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x56101f1dc090 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x56101f1dc0b0 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x56101f1dc0d0 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x56101f1dc170 <line:331:3, col:59>
|   | `-TextComment 0x56101f1dc130 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x56101f1dc1c0 <line:333:3>
|   | `-TextComment 0x56101f1dc190 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1dc1e0 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x56101f1dc290 <line:333:16, line:334:3>
|   |   |-TextComment 0x56101f1dc240 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x56101f1dc260 <line:334:3> Text=" "
|   `-BlockCommandComment 0x56101f1dc2b0 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x56101f1dc330 <line:334:11, line:335:12>
|       |-TextComment 0x56101f1dc2e0 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x56101f1dc300 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x56101f12c6d8 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x56101f12c648 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x56101f12c908 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x56101f12c820 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x56101f12c808 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|   |   `-ParenExpr 0x56101f12c7e8 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x56101f12c780 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x56101f12c648 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x56101f12c8c8 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x56101f12c8a8 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x56101f12c880 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x56101f12c848 <col:23> 'int' 0
|-FunctionDecl 0x56101f12c9c8 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x56101f12c940 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x56101f12cb68 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x56101f12cb10 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x56101f12caf8 <col:29, col:31> 'void *' <LValueToRValue>
| |     `-ParenExpr 0x56101f12cad8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x56101f12ca70 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x56101f12c940 'obj' 'void *'
| `-FullComment 0x56101f1dc5e0 <line:359:3, line:362:1>
|   |-ParagraphComment 0x56101f1dc420 <line:359:3>
|   | `-TextComment 0x56101f1dc3f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1dc440 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x56101f1dc4a0 <col:10, col:24>
|   |   `-TextComment 0x56101f1dc470 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x56101f1dc4f0 <line:361:3>
|   | `-TextComment 0x56101f1dc4c0 <col:3> Text=" "
|   `-ParamCommandComment 0x56101f1dc510 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x56101f1dc5a0 <col:1>
|       `-TextComment 0x56101f1dc570 <col:1> Text=" "
|-RecordDecl 0x56101f12cb80 prev 0x56101f0ea150 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x56101f12cc08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x56101f12cc60 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x56101f12cd08 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x56101f12cdb0 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x56101f12ce70 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x56101f12ced8 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x56101f12cf70 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x56101f12cfc8 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x56101f12cf70 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x56101f12ce70 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x56101f12d018 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x56101f12cf70 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x56101f12ced8 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x56101f12d0e8 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x56101f12d140 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x56101f12d198 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x56101f12d1e0 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x56101f12d290 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x56101f12d350 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x56101f12d3a8 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x56101f12d440 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x56101f12d498 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x56101f12d440 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x56101f12d350 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x56101f12d4e8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x56101f12d440 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x56101f12d3a8 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x56101f12d538 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x56101f0e63b0 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x56101f0e6410 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x56101f0e63b0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x56101f12d440 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x56101f12d350 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x56101f0e6468 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x56101f0e63b0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x56101f12d440 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x56101f12d3a8 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x56101f0e64b8 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x56101f0e63b0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x56101f12d538 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x56101f0e6508 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x56101f0e6568 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x56101f0e66a0 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x56101f0e6650 'struct _thread_base' sugar
|   `-RecordType 0x56101f12cd90 'struct _thread_base'
|     `-Record 0x56101f12cd08 '_thread_base'
|-RecordDecl 0x56101f0e6728 prev 0x56101f126df0 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x56101f1dc750 <line:542:3, line:543:19>
| | |-ParagraphComment 0x56101f1dc680 <line:542:3>
| | | `-TextComment 0x56101f1dc650 <col:3> Text=" "
| | |-VerbatimLineComment 0x56101f1dc6a0 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x56101f1dc710 <line:543:3, col:19>
| |   `-TextComment 0x56101f1dc6e0 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x56101f0e67d0 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x56101f0e6848 parent 0x56101ef8e8b8 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x56101f0e6950 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x56101f1dc820 <line:549:5, col:59>
| |   `-ParagraphComment 0x56101f1dc7f0 <col:5, col:59>
| |     `-TextComment 0x56101f1dc7c0 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x56101f0e69e0 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x56101f1dc8f0 <line:552:5, col:29>
| |   `-ParagraphComment 0x56101f1dc8c0 <col:5, col:29>
| |     `-TextComment 0x56101f1dc890 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x56101f0e6b88 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x56101f1dca80 <line:556:4, line:558:4>
| |   |-ParagraphComment 0x56101f1dc9b0 <line:556:4, line:557:4>
| |   | |-TextComment 0x56101f1dc960 <line:556:4, col:18> Text=" abort function"
| |   | `-TextComment 0x56101f1dc980 <line:557:4> Text=" "
| |   |-VerbatimLineComment 0x56101f1dc9d0 <col:5, col:22> Text=" K-THREAD-002"
| |   `-ParagraphComment 0x56101f1dca40 <line:558:4>
| |     `-TextComment 0x56101f1dca10 <col:4> Text=" "
| |-FieldDecl 0x56101f0e6cb0 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x56101f1dcb50 <line:613:5, col:19>
| |   `-ParagraphComment 0x56101f1dcb20 <col:5, col:19>
| |     `-TextComment 0x56101f1dcaf0 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x56101f0e6d28 parent 0x56101ef8e8b8 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x56101f0e6e30 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x56101f1dcc20 <line:616:5, col:47>
|     `-ParagraphComment 0x56101f1dcbf0 <col:5, col:47>
|       `-TextComment 0x56101f1dcbc0 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x56101f0e6f60 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x56101f07c7e0 'struct k_thread' sugar
|   `-RecordType 0x56101f07c750 'struct k_thread'
|     `-Record 0x56101f0e6728 'k_thread'
|-TypedefDecl 0x56101f0e6fe0 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x56101f07c840 'struct k_thread *'
|   `-ElaboratedType 0x56101f07c7e0 'struct k_thread' sugar
|     `-RecordType 0x56101f07c750 'struct k_thread'
|       `-Record 0x56101f0e6728 'k_thread'
|-EnumDecl 0x56101f0e7038 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x56101f0e7110 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-IntegerLiteral 0x56101f0e70f0 <col:10> 'int' 0
| |-EnumConstantDecl 0x56101f0e7158 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x56101f0e71a0 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x56101f130378 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x56101f130310 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x56101f1302b0 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x56101f130270 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x56101ef8e910 'void'
| |     |-PointerType 0x56101f0e7250 'const struct k_thread *'
| |     | `-QualType 0x56101f07c7e1 'const struct k_thread' const
| |     |   `-ElaboratedType 0x56101f07c7e0 'struct k_thread' sugar
| |     |     `-RecordType 0x56101f07c750 'struct k_thread'
| |     |       `-Record 0x56101f0e6728 'k_thread'
| |     `-PointerType 0x56101ef8edb0 'void *'
| |       `-BuiltinType 0x56101ef8e910 'void'
| `-FullComment 0x56101f1dcde0 <line:630:3, line:631:5>
|   |-ParagraphComment 0x56101f1dccc0 <line:630:3>
|   | `-TextComment 0x56101f1dcc90 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1dcce0 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x56101f1dcda0 <line:631:3, col:5>
|     |-TextComment 0x56101f1dcd20 <col:3> Text=" "
|     |-TextComment 0x56101f1dcd40 <col:4> Text="@"
|     `-TextComment 0x56101f1dcd60 <col:5> Text="{"
|-FunctionDecl 0x56101f1305c0 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x56101f130430 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x56101f1304a8 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x56101f1dd4f0 <line:638:3, line:652:14>
|   |-ParagraphComment 0x56101f1dce80 <line:638:3>
|   | `-TextComment 0x56101f1dce50 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1dcea0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x56101f1dcf00 <col:10, col:53>
|   |   `-TextComment 0x56101f1dced0 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x56101f1dcf70 <line:640:3, line:641:46>
|   | |-TextComment 0x56101f1dcf20 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x56101f1dcf40 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x56101f1dcfc0 <line:643:3>
|   | `-TextComment 0x56101f1dcf90 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1dcfe0 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x56101f1dd090 <line:643:18, line:644:3>
|   |   |-TextComment 0x56101f1dd040 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x56101f1dd060 <line:644:3> Text=" "
|   |-ParamCommandComment 0x56101f1dd0b0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1dd140 <col:20, col:41>
|   |   `-TextComment 0x56101f1dd110 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x56101f1dd190 <line:646:3>
|   | `-TextComment 0x56101f1dd160 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1dd1b0 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x56101f1dd260 <line:646:9, line:648:3>
|   |   |-TextComment 0x56101f1dd1e0 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x56101f1dd200 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x56101f1dd220 <line:648:3> Text=" "
|   |-BlockCommandComment 0x56101f1dd280 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x56101f1dd2e0 <col:9, col:23>
|   |   `-TextComment 0x56101f1dd2b0 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x56101f1dd300 <col:24, col:71> Text=" k_spin_lock to protect the _kernel.threads"
|   |-ParagraphComment 0x56101f1dd390 <line:649:3, line:650:46>
|   | |-TextComment 0x56101f1dd340 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   | `-TextComment 0x56101f1dd360 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x56101f1dd3e0 <line:652:3>
|   | `-TextComment 0x56101f1dd3b0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1dd400 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1dd460 <col:11, col:14>
|       `-TextComment 0x56101f1dd430 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f1307b0 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x56101f1306a8 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x56101f130720 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x56101f1ddff0 <line:657:3, line:681:72>
|   |-ParagraphComment 0x56101f1dd590 <line:657:3>
|   | `-TextComment 0x56101f1dd560 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1dd5b0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x56101f1dd610 <col:10, col:69>
|   |   `-TextComment 0x56101f1dd5e0 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x56101f1dd660 <line:659:3, col:44>
|   | `-TextComment 0x56101f1dd630 <col:3, col:44> Text=" This routine works exactly the same like "
|   |-VerbatimLineComment 0x56101f1dd680 <col:45, col:66> Text=" k_thread_foreach"
|   |-ParagraphComment 0x56101f1dd6f0 <line:660:3, col:51>
|   | `-TextComment 0x56101f1dd6c0 <col:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x56101f1dd740 <line:662:3>
|   | `-TextComment 0x56101f1dd710 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1dd760 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x56101f1dd810 <line:662:18, line:663:3>
|   |   |-TextComment 0x56101f1dd7c0 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x56101f1dd7e0 <line:663:3> Text=" "
|   |-ParamCommandComment 0x56101f1dd830 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1dd8c0 <col:20, col:41>
|   |   `-TextComment 0x56101f1dd890 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x56101f1dd910 <line:665:3>
|   | `-TextComment 0x56101f1dd8e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1dd930 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x56101f1dd9e0 <line:665:9, line:667:3>
|   |   |-TextComment 0x56101f1dd960 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x56101f1dd980 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x56101f1dd9a0 <line:667:3> Text=" "
|   |-BlockCommandComment 0x56101f1dda00 <col:4, col:23> Name="note"
|   | `-ParagraphComment 0x56101f1dda60 <col:9, col:23>
|   |   `-TextComment 0x56101f1dda30 <col:9, col:23> Text=" This API uses "
|   |-VerbatimLineComment 0x56101f1dda80 <col:24, col:80> Text=" k_spin_lock only when accessing the _kernel.threads"
|   |-ParagraphComment 0x56101f1ddc60 <line:668:3, line:674:3>
|   | |-TextComment 0x56101f1ddac0 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   | |-TextComment 0x56101f1ddae0 <line:669:3, col:38> Text=" If a new task is created when this "
|   | |-InlineCommandComment 0x56101f1ddb30 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   | |-TextComment 0x56101f1ddb50 <col:49, col:73> Text=" function is in progress,"
|   | |-TextComment 0x56101f1ddb70 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   | |-TextComment 0x56101f1ddb90 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   | |-TextComment 0x56101f1ddbb0 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   | |-TextComment 0x56101f1ddbd0 <line:673:3, col:15> Text=" enumeration."
|   | `-TextComment 0x56101f1ddbf0 <line:674:3> Text=" "
|   `-BlockCommandComment 0x56101f1ddc80 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x56101f1ddf60 <line:674:9, line:681:72>
|       |-TextComment 0x56101f1ddcb0 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x56101f1ddd00 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x56101f1ddd20 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x56101f1ddd80 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x56101f1ddda0 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x56101f1dddc0 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x56101f1ddde0 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x56101f1dde30 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x56101f1dde50 <col:67, col:71> Text=" task"
|       |-TextComment 0x56101f1dde70 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x56101f1dde90 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x56101f1ddeb0 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x56101f1dded0 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x56101f130fd0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x56101f1309c8 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x56101f130a38 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x56101f130aa8 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f130b40 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x56101f130bb8 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x56101f130c30 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x56101f130ca8 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x56101f130d20 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x56101f130d90 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x56101f130e00 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x56101f1dee70 <line:746:3, line:778:1>
|   |-ParagraphComment 0x56101f1de090 <line:746:3>
|   | `-TextComment 0x56101f1de060 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1de0b0 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x56101f1de110 <col:10, col:26>
|   |   `-TextComment 0x56101f1de0e0 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x56101f1de180 <line:748:3, col:70>
|   | `-TextComment 0x56101f1de130 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x56101f1de240 <line:750:3, line:753:11>
|   | |-TextComment 0x56101f1de1a0 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x56101f1de1c0 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x56101f1de1e0 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x56101f1de200 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x56101f1de2e0 <line:755:3, line:757:44>
|   | |-TextComment 0x56101f1de260 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x56101f1de280 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x56101f1de2a0 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x56101f1de3a0 <line:759:3, line:762:13>
|   | |-TextComment 0x56101f1de300 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x56101f1de320 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x56101f1de340 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x56101f1de360 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x56101f1de3f0 <line:764:3>
|   | `-TextComment 0x56101f1de3c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1de410 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f1de4c0 <line:764:21, line:765:3>
|   |   |-TextComment 0x56101f1de470 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x56101f1de490 <line:765:3> Text=" "
|   |-ParamCommandComment 0x56101f1de4e0 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x56101f1de590 <line:765:16, line:766:3>
|   |   |-TextComment 0x56101f1de540 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x56101f1de560 <line:766:3> Text=" "
|   |-ParamCommandComment 0x56101f1de5b0 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x56101f1de660 <line:766:21, line:767:3>
|   |   |-TextComment 0x56101f1de610 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x56101f1de630 <line:767:3> Text=" "
|   |-ParamCommandComment 0x56101f1de680 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x56101f1de730 <line:767:16, line:768:3>
|   |   |-TextComment 0x56101f1de6e0 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x56101f1de700 <line:768:3> Text=" "
|   |-ParamCommandComment 0x56101f1de750 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x56101f1de800 <line:768:13, line:769:3>
|   |   |-TextComment 0x56101f1de7b0 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x56101f1de7d0 <line:769:3> Text=" "
|   |-ParamCommandComment 0x56101f1de820 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x56101f1de8d0 <line:769:13, line:770:3>
|   |   |-TextComment 0x56101f1de880 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x56101f1de8a0 <line:770:3> Text=" "
|   |-ParamCommandComment 0x56101f1de8f0 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x56101f1de9a0 <line:770:13, line:771:3>
|   |   |-TextComment 0x56101f1de950 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x56101f1de970 <line:771:3> Text=" "
|   |-ParamCommandComment 0x56101f1de9c0 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x56101f1dea70 <line:771:15, line:772:3>
|   |   |-TextComment 0x56101f1dea20 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x56101f1dea40 <line:772:3> Text=" "
|   |-ParamCommandComment 0x56101f1dea90 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x56101f1deb40 <line:772:18, line:773:3>
|   |   |-TextComment 0x56101f1deaf0 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x56101f1deb10 <line:773:3> Text=" "
|   |-ParamCommandComment 0x56101f1deb60 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x56101f1debf0 <col:16, col:80>
|   |   `-TextComment 0x56101f1debc0 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x56101f1dec40 <line:775:3>
|   | `-TextComment 0x56101f1dec10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1dec60 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x56101f1decc0 <col:11, col:28>
|   |   `-TextComment 0x56101f1dec90 <col:11, col:28> Text=" ID of new thread."
|   |-ParagraphComment 0x56101f1ded10 <line:777:3>
|   | `-TextComment 0x56101f1dece0 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1ded30 <col:4, col:21> Text=" K-THREAD-001"
|   `-ParagraphComment 0x56101f1deda0 <line:778:1>
|     `-TextComment 0x56101f1ded70 <col:1> Text=" "
|-FunctionDecl 0x56101f1344a0 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56101f1310f8 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x56101f1341d0 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x56101f134248 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x56101f1342c0 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x56101f1df420 <line:787:3, line:794:1>
|   |-ParagraphComment 0x56101f1def10 <line:787:3>
|   | `-TextComment 0x56101f1deee0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1def30 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x56101f1def90 <col:10, col:61>
|   |   `-TextComment 0x56101f1def60 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x56101f1defe0 <line:789:3>
|   | `-TextComment 0x56101f1defb0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1df000 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x56101f1df0b0 <line:789:16, line:790:3>
|   |   |-TextComment 0x56101f1df060 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x56101f1df080 <line:790:3> Text=" "
|   |-ParamCommandComment 0x56101f1df0d0 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x56101f1df180 <line:790:13, line:791:3>
|   |   |-TextComment 0x56101f1df130 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x56101f1df150 <line:791:3> Text=" "
|   |-ParamCommandComment 0x56101f1df1a0 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x56101f1df250 <line:791:13, line:792:3>
|   |   |-TextComment 0x56101f1df200 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x56101f1df220 <line:792:3> Text=" "
|   |-ParamCommandComment 0x56101f1df270 <col:4, line:793:3> [in] implicitly Param="p3" ParamIndex=3
|   | `-ParagraphComment 0x56101f1df320 <line:792:13, line:793:3>
|   |   |-TextComment 0x56101f1df2d0 <line:792:13, col:38> Text=" 3rd entry point parameter"
|   |   `-TextComment 0x56101f1df2f0 <line:793:3> Text=" "
|   |-VerbatimLineComment 0x56101f1df340 <col:4, col:21> Text=" K-THREAD-003"
|   `-ParagraphComment 0x56101f1df3b0 <line:794:1>
|     `-TextComment 0x56101f1df380 <col:1> Text=" "
|-FunctionDecl 0x56101f134780 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x56101f1345e0 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x56101f134668 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x56101f134938 <line:833:1, line:835:1>
| | `-BinaryOperator 0x56101f1348e8 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x56101f134870 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x56101f0e6cb0
| |   | `-ImplicitCastExpr 0x56101f134858 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56101f134830 <col:2> 'struct k_thread *' lvalue ParmVar 0x56101f1345e0 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x56101f1348d0 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f1348a8 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x56101f134668 'pool' 'struct k_mem_pool *'
| `-FullComment 0x56101f1df970 <line:817:3, line:830:1>
|   |-ParagraphComment 0x56101f1df4c0 <line:817:3>
|   | `-TextComment 0x56101f1df490 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1df4e0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x56101f1df540 <col:10, col:51>
|   |   `-TextComment 0x56101f1df510 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x56101f1df5e0 <line:819:3, line:821:51>
|   | |-TextComment 0x56101f1df560 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x56101f1df580 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x56101f1df5a0 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x56101f1df650 <line:823:3, line:824:17>
|   | |-TextComment 0x56101f1df600 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x56101f1df620 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x56101f1df6a0 <line:826:3>
|   | `-TextComment 0x56101f1df670 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1df6c0 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f1df7a0 <line:826:17, line:828:3>
|   |   |-TextComment 0x56101f1df720 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x56101f1df740 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x56101f1df760 <line:828:3> Text=" "
|   |-ParamCommandComment 0x56101f1df7c0 <col:4, line:829:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x56101f1df870 <line:828:15, line:829:3>
|   |   |-TextComment 0x56101f1df820 <line:828:15, col:48> Text=" Memory pool to use for resources."
|   |   `-TextComment 0x56101f1df840 <line:829:3> Text=" "
|   |-VerbatimLineComment 0x56101f1df890 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x56101f1df900 <line:830:1>
|     `-TextComment 0x56101f1df8d0 <col:1> Text=" "
|-FunctionDecl 0x56101f134a60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x56101f134960 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x56101f1dfe50 <line:855:3, line:863:1>
|   |-ParagraphComment 0x56101f1dfa10 <line:855:3>
|   | `-TextComment 0x56101f1df9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1dfa30 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f1dfa90 <col:10, col:42>
|   |   `-TextComment 0x56101f1dfa60 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x56101f1dfb60 <line:857:3, col:78>
|   | |-TextComment 0x56101f1dfab0 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x56101f1dfb00 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x56101f1dfb20 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x56101f1dfbb0 <line:859:3>
|   | `-TextComment 0x56101f1dfb80 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1dfbd0 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x56101f1dfc60 <col:13, col:45>
|   |   `-TextComment 0x56101f1dfc30 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x56101f1dfcb0 <line:861:3>
|   | `-TextComment 0x56101f1dfc80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1dfcd0 <col:4, line:862:44> Name="return"
|   | `-ParagraphComment 0x56101f1dfd50 <line:861:11, line:862:44>
|   |   |-TextComment 0x56101f1dfd00 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|   |   `-TextComment 0x56101f1dfd20 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x56101f1dfd70 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x56101f1dfde0 <line:863:1>
|     `-TextComment 0x56101f1dfdb0 <col:1> Text=" "
|-FunctionDecl 0x56101f134bd0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x56101f134b48 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x56101f1e0360 <line:867:3, line:879:1>
|   |-ParagraphComment 0x56101f1dfef0 <line:867:3>
|   | `-TextComment 0x56101f1dfec0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1dff10 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x56101f1dff70 <col:10, col:70>
|   |   `-TextComment 0x56101f1dff40 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x56101f1e0060 <line:869:3, line:873:71>
|   | |-TextComment 0x56101f1dff90 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x56101f1dffb0 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x56101f1dffd0 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x56101f1dfff0 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x56101f1e0010 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x56101f1e00b0 <line:875:3>
|   | `-TextComment 0x56101f1e0080 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e00d0 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e0160 <col:13, col:45>
|   |   `-TextComment 0x56101f1e0130 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x56101f1e01c0 <line:877:3>
|   | `-TextComment 0x56101f1e0190 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e01e0 <col:4, line:878:44> Name="return"
|   | `-ParagraphComment 0x56101f1e0260 <line:877:11, line:878:44>
|   |   |-TextComment 0x56101f1e0210 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|   |   `-TextComment 0x56101f1e0230 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|   |-VerbatimLineComment 0x56101f1e0280 <col:45, col:64> Text=" k_wakeup call."
|   `-ParagraphComment 0x56101f1e02f0 <line:879:1>
|     `-TextComment 0x56101f1e02c0 <col:1> Text=" "
|-FunctionDecl 0x56101f134d80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x56101f134cb8 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x56101f1e0690 <line:883:3, line:888:14>
|   |-ParagraphComment 0x56101f1e0400 <line:883:3>
|   | `-TextComment 0x56101f1e03d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e0420 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x56101f1e0480 <col:10, col:48>
|   |   `-TextComment 0x56101f1e0450 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x56101f1e0570 <line:885:3, line:886:32>
|   | |-TextComment 0x56101f1e04a0 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x56101f1e04c0 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x56101f1e0510 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x56101f1e0530 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x56101f1e05c0 <line:888:3>
|   | `-TextComment 0x56101f1e0590 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e05e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1e0640 <col:11, col:14>
|       `-TextComment 0x56101f1e0610 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f134ee8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x56101f1e0a30 <line:893:3, line:901:1>
|   |-ParagraphComment 0x56101f1e0730 <line:893:3>
|   | `-TextComment 0x56101f1e0700 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e0750 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x56101f1e07b0 <col:10, col:35>
|   |   `-TextComment 0x56101f1e0780 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x56101f1e0850 <line:895:3, line:897:67>
|   | |-TextComment 0x56101f1e07d0 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x56101f1e07f0 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x56101f1e0810 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x56101f1e08a0 <line:899:3>
|   | `-TextComment 0x56101f1e0870 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e08c0 <col:4, line:900:3> Name="return"
|   | `-ParagraphComment 0x56101f1e0940 <line:899:11, line:900:3>
|   |   |-TextComment 0x56101f1e08f0 <line:899:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1e0910 <line:900:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e0960 <col:4, col:21> Text=" K-THREAD-015"
|   `-ParagraphComment 0x56101f1e09d0 <line:901:1>
|     `-TextComment 0x56101f1e09a0 <col:1> Text=" "
|-FunctionDecl 0x56101f1350d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f134fc8 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f1e0fe0 <line:905:3, line:915:1>
|   |-ParagraphComment 0x56101f1e0ad0 <line:905:3>
|   | `-TextComment 0x56101f1e0aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e0af0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x56101f1e0b50 <col:10, col:36>
|   |   `-TextComment 0x56101f1e0b20 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x56101f1e0c20 <line:907:3, col:61>
|   | |-TextComment 0x56101f1e0b70 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x56101f1e0bc0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x56101f1e0be0 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x56101f1e0cf0 <line:909:3, col:69>
|   | |-TextComment 0x56101f1e0c40 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x56101f1e0c90 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x56101f1e0cb0 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x56101f1e0d40 <line:911:3>
|   | `-TextComment 0x56101f1e0d10 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e0d60 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e0df0 <col:17, col:38>
|   |   `-TextComment 0x56101f1e0dc0 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x56101f1e0e40 <line:913:3>
|   | `-TextComment 0x56101f1e0e10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e0e60 <col:4, line:914:3> Name="return"
|   | `-ParagraphComment 0x56101f1e0ee0 <line:913:11, line:914:3>
|   |   |-TextComment 0x56101f1e0e90 <line:913:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1e0eb0 <line:914:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e0f00 <col:4, col:21> Text=" K-THREAD-014"
|   `-ParagraphComment 0x56101f1e0f70 <line:915:1>
|     `-TextComment 0x56101f1e0f40 <col:1> Text=" "
|-FunctionDecl 0x56101f1352c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x56101f1e1310 <line:919:3, line:924:1>
|   |-ParagraphComment 0x56101f1e1080 <line:919:3>
|   | `-TextComment 0x56101f1e1050 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e10a0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x56101f1e1100 <col:10, col:46>
|   |   `-TextComment 0x56101f1e10d0 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x56101f1e1150 <line:921:3>
|   | `-TextComment 0x56101f1e1120 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e1170 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x56101f1e11d0 <col:11, col:32>
|   |   `-TextComment 0x56101f1e11a0 <col:11, col:32> Text=" ID of current thread."
|   |-ParagraphComment 0x56101f1e1220 <line:923:3>
|   | `-TextComment 0x56101f1e11f0 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e1240 <col:4, col:21> Text=" K-THREAD-013"
|   `-ParagraphComment 0x56101f1e12b0 <line:924:1>
|     `-TextComment 0x56101f1e1280 <col:1> Text=" "
|-FunctionDecl 0x56101f135420 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f135398 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f1e18b0 <line:928:3, line:941:1>
|   |-ParagraphComment 0x56101f1e13b0 <line:928:3>
|   | `-TextComment 0x56101f1e1380 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e13d0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x56101f1e1430 <col:10, col:25>
|   |   `-TextComment 0x56101f1e1400 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x56101f1e15c0 <line:930:3, line:935:38>
|   | |-TextComment 0x56101f1e1450 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x56101f1e14a0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x56101f1e14c0 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x56101f1e14e0 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x56101f1e1500 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x56101f1e1520 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x56101f1e1540 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x56101f1e1560 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x56101f1e1610 <line:937:3>
|   | `-TextComment 0x56101f1e15e0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e1630 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e16c0 <col:17, col:39>
|   |   `-TextComment 0x56101f1e1690 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x56101f1e1710 <line:939:3>
|   | `-TextComment 0x56101f1e16e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e1730 <col:4, line:940:3> Name="return"
|   | `-ParagraphComment 0x56101f1e17b0 <line:939:11, line:940:3>
|   |   |-TextComment 0x56101f1e1760 <line:939:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1e1780 <line:940:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e17d0 <col:4, col:21> Text=" K-THREAD-012"
|   `-ParagraphComment 0x56101f1e1840 <line:941:1>
|     `-TextComment 0x56101f1e1810 <col:1> Text=" "
|-FunctionDecl 0x56101f135590 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f135508 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f1e1c80 <line:946:3, line:954:1>
|   |-ParagraphComment 0x56101f1e1950 <line:946:3>
|   | `-TextComment 0x56101f1e1920 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e1970 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x56101f1e19d0 <col:10, col:34>
|   |   `-TextComment 0x56101f1e19a0 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x56101f1e1a70 <line:948:3, line:950:9>
|   | |-TextComment 0x56101f1e19f0 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x56101f1e1a10 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x56101f1e1a30 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x56101f1e1ac0 <line:952:3>
|   | `-TextComment 0x56101f1e1a90 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e1ae0 <col:4, line:953:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e1b90 <line:952:17, line:953:3>
|   |   |-TextComment 0x56101f1e1b40 <line:952:17, col:32> Text=" thread to start"
|   |   `-TextComment 0x56101f1e1b60 <line:953:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e1bb0 <col:4, col:21> Text=" K-THREAD-011"
|   `-ParagraphComment 0x56101f1e1c20 <line:954:1>
|     `-TextComment 0x56101f1e1bf0 <col:1> Text=" "
|-RecordDecl 0x56101f135668 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x56101f135738 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x56101f135790 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x56101f1357f0 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x56101f135848 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x56101f1358a8 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x56101f135908 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x56101f135968 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x56101f1359c8 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x56101f135a20 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x56101f135a78 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x56101f135b60 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x56101f135bc0 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x56101f135db8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f135ca8 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f1e2ba0 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x56101f1e1d20 <line:1044:3>
|   | `-TextComment 0x56101f1e1cf0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e1d40 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x56101f1e1da0 <col:10, col:34>
|   |   `-TextComment 0x56101f1e1d70 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x56101f1e1e40 <line:1046:3, col:39>
|   | |-TextComment 0x56101f1e1dc0 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x56101f1e1e10 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x56101f1e1e90 <line:1048:3>
|   | `-TextComment 0x56101f1e1e60 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e1eb0 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e1f40 <col:17, col:55>
|   |   `-TextComment 0x56101f1e1f10 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x56101f1e1f90 <line:1050:3>
|   | `-TextComment 0x56101f1e1f60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e1fb0 <col:4, line:1051:3> Name="return"
|   | `-ParagraphComment 0x56101f1e2090 <line:1050:11, line:1051:3>
|   |   |-TextComment 0x56101f1e1fe0 <line:1050:11, col:23> Text=" Priority of "
|   |   |-InlineCommandComment 0x56101f1e2030 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|   |   `-TextComment 0x56101f1e2050 <line:1051:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e20b0 <col:4, col:21> Text=" K-THREAD-009"
|   `-ParagraphComment 0x56101f1e2120 <line:1052:1>
|     `-TextComment 0x56101f1e20f0 <col:1> Text=" "
|-FunctionDecl 0x56101f136020 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x56101f135e98 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x56101f135f10 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x56101f1e3560 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x56101f1e2c40 <line:1056:3>
|   | `-TextComment 0x56101f1e2c10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e2c60 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x56101f1e2cc0 <col:10, col:34>
|   |   `-TextComment 0x56101f1e2c90 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x56101f1e2d60 <line:1058:3, col:54>
|   | |-TextComment 0x56101f1e2ce0 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x56101f1e2d30 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x56101f1e2e50 <line:1060:3, line:1061:10>
|   | |-TextComment 0x56101f1e2d80 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x56101f1e2dd0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x56101f1e2df0 <col:74, col:76> Text=" is"
|   | `-TextComment 0x56101f1e2e10 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x56101f1e2f40 <line:1063:3, line:1064:75>
|   | |-TextComment 0x56101f1e2e70 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x56101f1e2e90 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x56101f1e2ee0 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x56101f1e2f00 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x56101f1e2fe0 <line:1066:3, line:1068:41>
|   | |-TextComment 0x56101f1e2f60 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x56101f1e2f80 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x56101f1e2fa0 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x56101f1e3080 <line:1070:3, line:1072:20>
|   | |-TextComment 0x56101f1e3000 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x56101f1e3020 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x56101f1e3040 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x56101f1e30d0 <line:1074:3>
|   | `-TextComment 0x56101f1e30a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e30f0 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e31a0 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x56101f1e3150 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x56101f1e3170 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x56101f1e31c0 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x56101f1e3250 <col:15, col:28>
|   |   `-TextComment 0x56101f1e3220 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x56101f1e32a0 <line:1077:3>
|   | `-TextComment 0x56101f1e3270 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e32c0 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x56101f1e3340 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x56101f1e32f0 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x56101f1e3310 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x56101f1e3390 <line:1080:3>
|   | `-TextComment 0x56101f1e3360 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e33b0 <col:4, line:1081:3> Name="return"
|   | `-ParagraphComment 0x56101f1e3430 <line:1080:11, line:1081:3>
|   |   |-TextComment 0x56101f1e33e0 <line:1080:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1e3400 <line:1081:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e3450 <col:4, col:21> Text=" K-THREAD-008"
|   `-ParagraphComment 0x56101f1e34c0 <line:1082:1>
|     `-TextComment 0x56101f1e3490 <col:1> Text=" "
|-FunctionDecl 0x56101f1368a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f136108 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f1e3c50 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x56101f1e3600 <line:1196:3>
|   | `-TextComment 0x56101f1e35d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e3620 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x56101f1e3680 <col:10, col:27>
|   |   `-TextComment 0x56101f1e3650 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x56101f1e3890 <line:1198:3, line:1204:48>
|   | |-TextComment 0x56101f1e36a0 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x56101f1e36f0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x56101f1e3710 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x56101f1e3760 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x56101f1e3780 <col:66, col:69> Text=" are"
|   | |-TextComment 0x56101f1e37a0 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x56101f1e37c0 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x56101f1e37e0 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x56101f1e3800 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x56101f1e3820 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x56101f1e3960 <line:1206:3, col:64>
|   | |-TextComment 0x56101f1e38b0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x56101f1e3900 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x56101f1e3920 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x56101f1e39b0 <line:1208:3>
|   | `-TextComment 0x56101f1e3980 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e39d0 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e3a60 <col:17, col:41>
|   |   `-TextComment 0x56101f1e3a30 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x56101f1e3ab0 <line:1210:3>
|   | `-TextComment 0x56101f1e3a80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e3ad0 <col:4, line:1211:3> Name="return"
|   | `-ParagraphComment 0x56101f1e3b50 <line:1210:11, line:1211:3>
|   |   |-TextComment 0x56101f1e3b00 <line:1210:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1e3b20 <line:1211:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e3b70 <col:4, col:21> Text=" K-THREAD-005"
|   `-ParagraphComment 0x56101f1e3be0 <line:1212:1>
|     `-TextComment 0x56101f1e3bb0 <col:1> Text=" "
|-FunctionDecl 0x56101f136a10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f136988 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f1e4220 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x56101f1e3cf0 <line:1216:3>
|   | `-TextComment 0x56101f1e3cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e3d10 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x56101f1e3d70 <col:10, col:36>
|   |   `-TextComment 0x56101f1e3d40 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x56101f1e3e60 <line:1218:3, line:1219:50>
|   | |-TextComment 0x56101f1e3d90 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x56101f1e3de0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x56101f1e3e00 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x56101f1e3e20 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x56101f1e3f30 <line:1221:3, col:70>
|   | |-TextComment 0x56101f1e3e80 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x56101f1e3ed0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x56101f1e3ef0 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x56101f1e3f80 <line:1223:3>
|   | `-TextComment 0x56101f1e3f50 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e3fa0 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e4030 <col:17, col:40>
|   |   `-TextComment 0x56101f1e4000 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x56101f1e4080 <line:1225:3>
|   | `-TextComment 0x56101f1e4050 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e40a0 <col:4, line:1226:3> Name="return"
|   | `-ParagraphComment 0x56101f1e4120 <line:1225:11, line:1226:3>
|   |   |-TextComment 0x56101f1e40d0 <line:1225:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1e40f0 <line:1226:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e4140 <col:4, col:21> Text=" K-THREAD-006"
|   `-ParagraphComment 0x56101f1e41b0 <line:1227:1>
|     `-TextComment 0x56101f1e4180 <col:1> Text=" "
|-FunctionDecl 0x56101f136c80 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x56101f136af8 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x56101f136b70 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x56101f1e4b70 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x56101f1e42c0 <line:1231:3>
|   | `-TextComment 0x56101f1e4290 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e42e0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1e4340 <col:10, col:44>
|   |   `-TextComment 0x56101f1e4310 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x56101f1e43b0 <line:1233:3, line:1234:23>
|   | |-TextComment 0x56101f1e4360 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x56101f1e4380 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x56101f1e45a0 <line:1236:3, line:1240:74>
|   | |-TextComment 0x56101f1e43d0 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x56101f1e4420 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x56101f1e4440 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x56101f1e4460 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x56101f1e4480 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x56101f1e44a0 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x56101f1e44f0 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x56101f1e4510 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x56101f1e4530 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x56101f1e4660 <line:1242:3, line:1245:32>
|   | |-TextComment 0x56101f1e45c0 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x56101f1e45e0 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x56101f1e4600 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x56101f1e4620 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x56101f1e4700 <line:1247:3, line:1249:46>
|   | |-TextComment 0x56101f1e4680 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x56101f1e46a0 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x56101f1e46c0 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x56101f1e4850 <line:1251:3, col:65>
|   | |-TextComment 0x56101f1e4720 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x56101f1e4770 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x56101f1e4790 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x56101f1e47e0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x56101f1e4800 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x56101f1e48a0 <line:1253:3>
|   | `-TextComment 0x56101f1e4870 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e48c0 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e4970 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x56101f1e4920 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x56101f1e4940 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x56101f1e4990 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x56101f1e4a20 <col:15, col:71>
|   |   `-TextComment 0x56101f1e49f0 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x56101f1e4a70 <line:1256:3>
|   | `-TextComment 0x56101f1e4a40 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e4a90 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1e4af0 <col:11, col:14>
|       `-TextComment 0x56101f1e4ac0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f136e48 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x56101f1e4fb0 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x56101f1e4c20 <line:1268:3>
|   | `-TextComment 0x56101f1e4bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e4c40 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x56101f1e4ca0 <col:10, col:58>
|   |   `-TextComment 0x56101f1e4c70 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x56101f1e4d10 <line:1270:3, line:1271:36>
|   | |-TextComment 0x56101f1e4cc0 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x56101f1e4ce0 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x56101f1e4d60 <line:1273:3>
|   | `-TextComment 0x56101f1e4d30 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e4d80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1e4de0 <col:9, col:31>
|   |   `-TextComment 0x56101f1e4db0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1e4e30 <line:1275:3>
|   | `-TextComment 0x56101f1e4e00 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e4e50 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x56101f1e4ed0 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x56101f1e4e80 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x56101f1e4ea0 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x56101f1e4ef0 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x56101f1e4f50 <col:11, col:37>
|       `-TextComment 0x56101f1e4f20 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x56101f136fb0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x56101f1e54c0 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x56101f1e5050 <line:1281:3>
|   | `-TextComment 0x56101f1e5020 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e5070 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x56101f1e50d0 <col:10, col:63>
|   |   `-TextComment 0x56101f1e50a0 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x56101f1e5170 <line:1283:3, line:1285:52>
|   | |-TextComment 0x56101f1e50f0 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x56101f1e5110 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x56101f1e5130 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x56101f1e5210 <line:1287:3, line:1289:45>
|   | |-TextComment 0x56101f1e5190 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x56101f1e51b0 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x56101f1e51d0 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x56101f1e5260 <line:1291:3>
|   | `-TextComment 0x56101f1e5230 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e5280 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1e52e0 <col:9, col:31>
|   |   `-TextComment 0x56101f1e52b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1e5330 <line:1293:3>
|   | `-TextComment 0x56101f1e5300 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e5350 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x56101f1e53d0 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x56101f1e5380 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x56101f1e53a0 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x56101f1e53f0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x56101f1e5450 <col:11, col:55>
|       `-TextComment 0x56101f1e5420 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x56101f137108 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x56101f137358 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x56101f137228 <line:1311:2, col:31>
| | | `-VarDecl 0x56101f1371b8 parent 0x56101ef8e8b8 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x56101f1372b8 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x56101f1372a0 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x56101f137280 <col:9, col:10> 'int' prefix '!'
| |       `-ImplicitCastExpr 0x56101f137268 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f137240 <col:10> 'bool' lvalue Var 0x56101f1371b8 'z_sys_post_kernel' 'bool'
| `-FullComment 0x56101f1e58f0 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x56101f1e5560 <line:1299:3>
|   | `-TextComment 0x56101f1e5530 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e5580 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x56101f1e55e0 <col:10, col:64>
|   |   `-TextComment 0x56101f1e55b0 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x56101f1e5650 <line:1301:3, line:1302:62>
|   | |-TextComment 0x56101f1e5600 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x56101f1e5620 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x56101f1e56a0 <line:1304:3>
|   | `-TextComment 0x56101f1e5670 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e56c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1e5720 <col:9, col:31>
|   |   `-TextComment 0x56101f1e56f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1e5770 <line:1306:3>
|   | `-TextComment 0x56101f1e5740 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e5790 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x56101f1e5810 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x56101f1e57c0 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x56101f1e57e0 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x56101f1e5830 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x56101f1e5890 <col:11, col:67>
|       `-TextComment 0x56101f1e5860 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x56101f137408 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x56101f1e5dc0 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x56101f1e5990 <line:1326:3>
|   | `-TextComment 0x56101f1e5960 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e59b0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x56101f1e5a10 <col:10, col:29>
|   |   `-TextComment 0x56101f1e59e0 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x56101f1e5b00 <line:1328:3, line:1332:78>
|   | |-TextComment 0x56101f1e5a30 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x56101f1e5a50 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x56101f1e5a70 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x56101f1e5a90 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x56101f1e5ab0 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x56101f1e5b50 <line:1334:3, col:42>
|   | `-TextComment 0x56101f1e5b20 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x56101f1e5ba0 <line:1336:3>
|   | `-TextComment 0x56101f1e5b70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e5bc0 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x56101f1e5c90 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x56101f1e5bf0 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x56101f1e5c10 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x56101f1e5c30 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x56101f1e5c50 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x56101f1e5ce0 <line:1341:3>
|   | `-TextComment 0x56101f1e5cb0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e5d00 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1e5d60 <col:11, col:14>
|       `-TextComment 0x56101f1e5d30 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f137568 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x56101f1e60a0 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x56101f1e5e60 <line:1346:3>
|   | `-TextComment 0x56101f1e5e30 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e5e80 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x56101f1e5ee0 <col:10, col:31>
|   |   `-TextComment 0x56101f1e5eb0 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x56101f1e5f80 <line:1348:3, line:1350:41>
|   | |-TextComment 0x56101f1e5f00 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x56101f1e5f20 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x56101f1e5f40 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x56101f1e5fd0 <line:1352:3>
|   | `-TextComment 0x56101f1e5fa0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e5ff0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1e6050 <col:11, col:14>
|       `-TextComment 0x56101f1e6020 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f1376d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x56101f137650 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x56101f1e6630 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x56101f1e6140 <line:1357:3>
|   | `-TextComment 0x56101f1e6110 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e6160 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1e61c0 <col:10, col:43>
|   |   `-TextComment 0x56101f1e6190 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x56101f1e6260 <line:1359:3, col:71>
|   | |-TextComment 0x56101f1e61e0 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x56101f1e6200 <col:64> Text="@"
|   | `-TextComment 0x56101f1e6220 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x56101f1e6300 <line:1361:3, line:1363:44>
|   | |-TextComment 0x56101f1e6280 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x56101f1e62a0 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x56101f1e62c0 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x56101f1e6350 <line:1365:3>
|   | `-TextComment 0x56101f1e6320 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e6370 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e6400 <col:16, col:38>
|   |   `-TextComment 0x56101f1e63d0 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x56101f1e6450 <line:1367:3>
|   | `-TextComment 0x56101f1e6420 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e6470 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x56101f1e64d0 <col:11, col:14>
|   |   `-TextComment 0x56101f1e64a0 <col:11, col:14> Text=" N/A"
|   |-ParagraphComment 0x56101f1e6520 <line:1369:3>
|   | `-TextComment 0x56101f1e64f0 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e6540 <col:4, col:21> Text=" K-THREAD-016"
|   `-ParagraphComment 0x56101f1e65b0 <line:1370:1>
|     `-TextComment 0x56101f1e6580 <col:1> Text=" "
|-FunctionDecl 0x56101f1378b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x56101f1e6980 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x56101f1e66d0 <line:1374:3>
|   | `-TextComment 0x56101f1e66a0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e66f0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1e6750 <col:10, col:43>
|   |   `-TextComment 0x56101f1e6720 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x56101f1e67a0 <line:1376:3, col:63>
|   | `-TextComment 0x56101f1e6770 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x56101f1e67f0 <line:1378:3>
|   | `-TextComment 0x56101f1e67c0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e6810 <col:4, line:1379:3> Name="return"
|   | `-ParagraphComment 0x56101f1e6890 <line:1378:11, line:1379:3>
|   |   |-TextComment 0x56101f1e6840 <line:1378:11, col:37> Text=" Current custom data value."
|   |   `-TextComment 0x56101f1e6860 <line:1379:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e68b0 <col:4, col:21> Text=" K-THREAD-007"
|   `-ParagraphComment 0x56101f1e6920 <line:1380:1>
|     `-TextComment 0x56101f1e68f0 <col:1> Text=" "
|-FunctionDecl 0x56101f137b18 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x56101f137988 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x56101f137a00 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x56101f1e6f50 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x56101f1e6a20 <line:1384:3>
|   | `-TextComment 0x56101f1e69f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e6a40 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x56101f1e6aa0 <col:10, col:33>
|   |   `-TextComment 0x56101f1e6a70 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x56101f1e6b10 <line:1386:3, line:1387:25>
|   | |-TextComment 0x56101f1e6ac0 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x56101f1e6ae0 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x56101f1e6b60 <line:1389:3>
|   | `-TextComment 0x56101f1e6b30 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e6b80 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e6c40 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x56101f1e6bf0 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x56101f1e6c10 <line:1390:3> Text=" "
|   `-ParamCommandComment 0x56101f1e6c60 <col:4, line:1394:39> [in] implicitly Param="value" ParamIndex=1
|     `-ParagraphComment 0x56101f1e6f00 <line:1390:16, line:1394:39>
|       |-TextComment 0x56101f1e6cc0 <line:1390:16, col:27> Text=" Name string"
|       |-TextComment 0x56101f1e6ce0 <line:1391:3> Text=" "
|       |-InlineCommandComment 0x56101f1e6d30 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x56101f1e6d50 <col:11, col:23> Text=" 0 on success"
|       |-TextComment 0x56101f1e6d70 <line:1392:3> Text=" "
|       |-InlineCommandComment 0x56101f1e6d90 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x56101f1e6db0 <col:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|       |-TextComment 0x56101f1e6dd0 <line:1393:3> Text=" "
|       |-InlineCommandComment 0x56101f1e6df0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x56101f1e6e10 <col:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|       |-TextComment 0x56101f1e6e30 <line:1394:3> Text=" "
|       |-InlineCommandComment 0x56101f1e6e50 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x56101f1e6e70 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x56101f137d18 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x56101f137c08 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f1e7280 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x56101f1e6ff0 <line:1399:3>
|   | `-TextComment 0x56101f1e6fc0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e7010 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x56101f1e7070 <col:10, col:25>
|   |   `-TextComment 0x56101f1e7040 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x56101f1e70c0 <line:1401:3, col:27>
|   | `-TextComment 0x56101f1e7090 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x56101f1e7110 <line:1403:3>
|   | `-TextComment 0x56101f1e70e0 <col:3> Text=" "
|   `-ParamCommandComment 0x56101f1e7130 <col:4, line:1404:60> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x56101f1e7230 <line:1403:20, line:1404:60>
|       |-TextComment 0x56101f1e7190 <line:1403:20, col:29> Text=" Thread ID"
|       |-TextComment 0x56101f1e71b0 <line:1404:3> Text=" "
|       |-InlineCommandComment 0x56101f1e71d0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x56101f1e71f0 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x56101f138018 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x56101f137df8 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x56101f137e70 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x56101f137ee0 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x56101f1e7870 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x56101f1e7320 <line:1409:3>
|   | `-TextComment 0x56101f1e72f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e7340 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x56101f1e73a0 <col:10, col:53>
|   |   `-TextComment 0x56101f1e7370 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x56101f1e73f0 <line:1411:3>
|   | `-TextComment 0x56101f1e73c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e7410 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e74c0 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x56101f1e7470 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x56101f1e7490 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x56101f1e74e0 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x56101f1e7590 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x56101f1e7540 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x56101f1e7560 <line:1413:3> Text=" "
|   `-ParamCommandComment 0x56101f1e75b0 <col:4, line:1417:20> [in] implicitly Param="size" ParamIndex=2
|     `-ParagraphComment 0x56101f1e7820 <line:1413:15, line:1417:20>
|       |-TextComment 0x56101f1e7610 <line:1413:15, col:38> Text=" Destination buffer size"
|       |-TextComment 0x56101f1e7630 <line:1414:3> Text=" "
|       |-InlineCommandComment 0x56101f1e7650 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x56101f1e7670 <col:11, col:47> Text=" -ENOSPC Destination buffer too small"
|       |-TextComment 0x56101f1e7690 <line:1415:3> Text=" "
|       |-InlineCommandComment 0x56101f1e76b0 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x56101f1e76d0 <col:11, col:38> Text=" -EFAULT Memory access error"
|       |-TextComment 0x56101f1e76f0 <line:1416:3> Text=" "
|       |-InlineCommandComment 0x56101f1e7710 <col:4, col:10> Name="retval" RenderNormal
|       |-TextComment 0x56101f1e7730 <col:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|       |-TextComment 0x56101f1e7750 <line:1417:3> Text=" "
|       |-InlineCommandComment 0x56101f1e7770 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x56101f1e7790 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x56101f138198 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x56101f138108 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f1e7ba0 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x56101f1e7910 <line:1423:3>
|   | `-TextComment 0x56101f1e78e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e7930 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x56101f1e7990 <col:10, col:33>
|   |   `-TextComment 0x56101f1e7960 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x56101f1e79e0 <line:1425:3, col:45>
|   | `-TextComment 0x56101f1e79b0 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x56101f1e7a30 <line:1427:3>
|   | `-TextComment 0x56101f1e7a00 <col:3> Text=" "
|   `-ParamCommandComment 0x56101f1e7a50 <col:4, line:1428:61> [in] implicitly Param="thread_id" ParamIndex=0
|     `-ParagraphComment 0x56101f1e7b50 <line:1427:20, line:1428:61>
|       |-TextComment 0x56101f1e7ab0 <line:1427:20, col:29> Text=" Thread ID"
|       |-TextComment 0x56101f1e7ad0 <line:1428:3> Text=" "
|       |-InlineCommandComment 0x56101f1e7af0 <col:4, col:10> Name="retval" RenderNormal
|       `-TextComment 0x56101f1e7b10 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x56101f138418 prev 0x56101f127600 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x56101f1e7cf0 <line:1514:3, col:24>
| | `-ParagraphComment 0x56101f1e7cc0 <col:3, col:24>
| |   |-TextComment 0x56101f1e7c10 <col:3> Text=" "
| |   |-InlineCommandComment 0x56101f1e7c60 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x56101f1e7c80 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x56101f1384c0 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x56101f138518 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x56101f1387b0 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x56101f13a918 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x56101f13a970 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x56101f13a9c8 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x56101f13aa28 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x56101f13ac18 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x56101f138750 'void (*)(struct k_timer *)'
| | `-ParenType 0x56101f1386f0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x56101f1386b0 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x56101ef8e910 'void'
| |     `-PointerType 0x56101f1385c0 'struct k_timer *'
| |       `-ElaboratedType 0x56101f138560 'struct k_timer' sugar
| |         `-RecordType 0x56101f127690 'struct k_timer'
| |           `-Record 0x56101f138418 'k_timer'
| `-FullComment 0x56101f1e8180 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x56101f1e7d90 <line:1576:3>
|   | `-TextComment 0x56101f1e7d60 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e7db0 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x56101f1e7e20 <line:1577:3>
|   | `-TextComment 0x56101f1e7df0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e7e40 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x56101f1e7ea0 <col:10, col:37>
|   |   `-TextComment 0x56101f1e7e70 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x56101f1e7f40 <line:1579:3, line:1581:54>
|   | |-TextComment 0x56101f1e7ec0 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x56101f1e7ee0 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x56101f1e7f00 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x56101f1e7f90 <line:1583:3>
|   | `-TextComment 0x56101f1e7f60 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e7fb0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e8040 <col:16, col:37>
|   |   `-TextComment 0x56101f1e8010 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x56101f1e8090 <line:1585:3>
|   | `-TextComment 0x56101f1e8060 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e80b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1e8110 <col:11, col:14>
|       `-TextComment 0x56101f1e80e0 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x56101f13ad58 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x56101f138750 'void (*)(struct k_timer *)'
| | `-ParenType 0x56101f1386f0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x56101f1386b0 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x56101ef8e910 'void'
| |     `-PointerType 0x56101f1385c0 'struct k_timer *'
| |       `-ElaboratedType 0x56101f138560 'struct k_timer' sugar
| |         `-RecordType 0x56101f127690 'struct k_timer'
| |           `-Record 0x56101f138418 'k_timer'
| `-FullComment 0x56101f1e8630 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x56101f1e8220 <line:1590:3>
|   | `-TextComment 0x56101f1e81f0 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1e8240 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x56101f1e82b0 <line:1591:3>
|   | `-TextComment 0x56101f1e8280 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e82d0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x56101f1e8330 <col:10, col:35>
|   |   `-TextComment 0x56101f1e8300 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x56101f1e83f0 <line:1593:3, line:1596:24>
|   | |-TextComment 0x56101f1e8350 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x56101f1e8370 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x56101f1e8390 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x56101f1e83b0 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x56101f1e8440 <line:1598:3>
|   | `-TextComment 0x56101f1e8410 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e8460 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e84f0 <col:16, col:37>
|   |   `-TextComment 0x56101f1e84c0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x56101f1e8540 <line:1600:3>
|   | `-TextComment 0x56101f1e8510 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e8560 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1e85c0 <col:11, col:14>
|       `-TextComment 0x56101f1e8590 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f13b080 <line:1630:1, line:1632:27> line:1630:13 k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x56101f13ae30 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x56101f13aec0 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x56101f13af50 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x56101f1e8b80 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x56101f1e86d0 <line:1620:3>
|   | `-TextComment 0x56101f1e86a0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e86f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x56101f1e8750 <col:10, col:29>
|   |   `-TextComment 0x56101f1e8720 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x56101f1e87a0 <line:1622:3, col:60>
|   | `-TextComment 0x56101f1e8770 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x56101f1e87f0 <line:1624:3>
|   | `-TextComment 0x56101f1e87c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e8810 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e88c0 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x56101f1e8870 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x56101f1e8890 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x56101f1e88e0 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x56101f1e8990 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x56101f1e8940 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x56101f1e8960 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x56101f1e89b0 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x56101f1e8a40 <col:18, col:77>
|   |   `-TextComment 0x56101f1e8a10 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x56101f1e8a90 <line:1628:3>
|   | `-TextComment 0x56101f1e8a60 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e8ab0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1e8b10 <col:11, col:14>
|       `-TextComment 0x56101f1e8ae0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f13b188 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x56101f13b490 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x56101f13b280 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x56101f13b2f0 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x56101f13b360 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x56101f1e91b0 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x56101f1e8c40 <line:1637:3>
|   | `-TextComment 0x56101f1e8c10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e8c60 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x56101f1e8cc0 <col:10, col:24>
|   |   `-TextComment 0x56101f1e8c90 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x56101f1e8d30 <line:1639:3, line:1640:71>
|   | |-TextComment 0x56101f1e8ce0 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x56101f1e8d00 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x56101f1e8dd0 <line:1642:3, line:1644:44>
|   | |-TextComment 0x56101f1e8d50 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x56101f1e8d70 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x56101f1e8d90 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x56101f1e8e20 <line:1646:3>
|   | `-TextComment 0x56101f1e8df0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e8e40 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e8ef0 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x56101f1e8ea0 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x56101f1e8ec0 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x56101f1e8f10 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x56101f1e8fc0 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x56101f1e8f70 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x56101f1e8f90 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x56101f1e8fe0 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x56101f1e9070 <col:17, col:51>
|   |   `-TextComment 0x56101f1e9040 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x56101f1e90c0 <line:1650:3>
|   | `-TextComment 0x56101f1e9090 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e90e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1e9140 <col:11, col:14>
|       `-TextComment 0x56101f1e9110 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f13b628 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f13b5a0 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x56101f1e9760 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x56101f1e9250 <line:1656:3>
|   | `-TextComment 0x56101f1e9220 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e9270 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x56101f1e92d0 <col:10, col:23>
|   |   `-TextComment 0x56101f1e92a0 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x56101f1e9340 <line:1658:3, line:1659:43>
|   | |-TextComment 0x56101f1e92f0 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x56101f1e9310 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x56101f1e93b0 <line:1661:3, line:1662:23>
|   | |-TextComment 0x56101f1e9360 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x56101f1e9380 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x56101f1e9400 <line:1664:3>
|   | `-TextComment 0x56101f1e93d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e9420 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x56101f1e9520 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x56101f1e9450 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x56101f1e9470 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x56101f1e94c0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x56101f1e94e0 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x56101f1e9570 <line:1667:3>
|   | `-TextComment 0x56101f1e9540 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e9590 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e9620 <col:16, col:37>
|   |   `-TextComment 0x56101f1e95f0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x56101f1e9670 <line:1669:3>
|   | `-TextComment 0x56101f1e9640 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e9690 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1e96f0 <col:11, col:14>
|       `-TextComment 0x56101f1e96c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f13b820 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f13b720 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x56101f1e9b70 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x56101f1e9800 <line:1674:3>
|   | `-TextComment 0x56101f1e97d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e9820 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x56101f1e9880 <col:10, col:28>
|   |   `-TextComment 0x56101f1e9850 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x56101f1e98f0 <line:1676:3, line:1677:49>
|   | |-TextComment 0x56101f1e98a0 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x56101f1e98c0 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x56101f1e9940 <line:1679:3, col:58>
|   | `-TextComment 0x56101f1e9910 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x56101f1e9990 <line:1681:3>
|   | `-TextComment 0x56101f1e9960 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e99b0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e9a40 <col:16, col:37>
|   |   `-TextComment 0x56101f1e9a10 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x56101f1e9a90 <line:1683:3>
|   | `-TextComment 0x56101f1e9a60 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e9ab0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x56101f1e9b10 <col:11, col:24>
|       `-TextComment 0x56101f1e9ae0 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x56101f13c218 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f13c190 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x56101f1ea050 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x56101f1e9c10 <line:1688:3>
|   | `-TextComment 0x56101f1e9be0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1e9c30 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f1e9c90 <col:10, col:49>
|   |   `-TextComment 0x56101f1e9c60 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x56101f1e9d50 <line:1690:3, line:1693:73>
|   | |-TextComment 0x56101f1e9cb0 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x56101f1e9cd0 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x56101f1e9cf0 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x56101f1e9d10 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x56101f1e9da0 <line:1695:3, col:58>
|   | `-TextComment 0x56101f1e9d70 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x56101f1e9e10 <line:1697:3, line:1698:20>
|   | |-TextComment 0x56101f1e9dc0 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x56101f1e9de0 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x56101f1e9e60 <line:1700:3>
|   | `-TextComment 0x56101f1e9e30 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1e9e80 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1e9f10 <col:16, col:37>
|   |   `-TextComment 0x56101f1e9ee0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x56101f1e9f60 <line:1702:3>
|   | `-TextComment 0x56101f1e9f30 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1e9f80 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x56101f1e9fe0 <col:11, col:24>
|       `-TextComment 0x56101f1e9fb0 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x56101f13c3f0 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x56101f13c2e8 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x56101f13c578 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f13c4f0 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x56101f1ea410 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x56101f1ea0f0 <line:1709:3>
|   | `-TextComment 0x56101f1ea0c0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ea110 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x56101f1ea170 <col:10, col:57>
|   |   `-TextComment 0x56101f1ea140 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x56101f1ea1e0 <line:1711:3, line:1712:68>
|   | |-TextComment 0x56101f1ea190 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x56101f1ea1b0 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x56101f1ea230 <line:1714:3>
|   | `-TextComment 0x56101f1ea200 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ea250 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ea2e0 <col:16, col:37>
|   |   `-TextComment 0x56101f1ea2b0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x56101f1ea330 <line:1716:3>
|   | `-TextComment 0x56101f1ea300 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ea350 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x56101f1ea3b0 <col:11, col:44>
|       `-TextComment 0x56101f1ea380 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x56101f13c6d0 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f13c648 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x56101f13cc58 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x56101f13c950 <line:1722:2, col:58>
|   | `-VarDecl 0x56101f13c788 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x56101f13c920 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x56101f13c908 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56101f13c7e8 <col:22> 's32_t (struct _timeout *)' Function 0x56101f13c3f0 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x56101f13c888 <col:42, col:50> 'struct _timeout *' prefix '&'
|   |       `-MemberExpr 0x56101f13c850 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x56101f1384c0
|   |         `-ImplicitCastExpr 0x56101f13c838 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x56101f13c810 <col:43> 'struct k_timer *' lvalue ParmVar 0x56101f13c648 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x56101f13cc10 <line:1723:2, col:61>
|     `-ConditionalOperator 0x56101f13cb88 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x56101f13c9f0 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x56101f13c9c8 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x56101f13c9b0 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x56101f13c968 <col:10> 'const s32_t':'const int' lvalue Var 0x56101f13c788 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x56101f13c990 <col:18> 'int' 0
|       |-CStyleCastExpr 0x56101f13cb40 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x56101f13cad0 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x56101f13cab8 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56101f13ca10 <col:30> 'u64_t (u64_t)' Function 0x56101f10c470 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x56101f13cb18 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x56101f13cb00 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x56101f13ca38 <col:52> 'const s32_t':'const int' lvalue Var 0x56101f13c788 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x56101f13cb68 <col:61> 'unsigned int' 0
|-FunctionDecl 0x56101f13ce30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x56101f13cca0 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x56101f13cd18 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x56101f1eaa20 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x56101f1ea4b0 <line:1727:3>
|   | `-TextComment 0x56101f1ea480 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ea4d0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x56101f1ea530 <col:10, col:52>
|   |   `-TextComment 0x56101f1ea500 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x56101f1ea6a0 <line:1729:3, line:1730:9>
|   | |-TextComment 0x56101f1ea550 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x56101f1ea5a0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x56101f1ea5c0 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x56101f1ea610 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x56101f1ea630 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x56101f1ea650 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x56101f1ea710 <line:1732:3, line:1733:73>
|   | |-TextComment 0x56101f1ea6c0 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x56101f1ea6e0 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x56101f1ea760 <line:1735:3>
|   | `-TextComment 0x56101f1ea730 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ea780 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ea830 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x56101f1ea7e0 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x56101f1ea800 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x56101f1ea850 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ea8e0 <col:20, col:58>
|   |   `-TextComment 0x56101f1ea8b0 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x56101f1ea930 <line:1738:3>
|   | `-TextComment 0x56101f1ea900 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ea950 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1ea9b0 <col:11, col:14>
|       `-TextComment 0x56101f1ea980 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f13d038 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x56101f13cf30 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x56101f13cfa8 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x56101f13d628 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x56101f13d5d8 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x56101f13d560 <col:2, col:9> 'void *' lvalue ->user_data 0x56101f13aa28
| |   | `-ImplicitCastExpr 0x56101f13d110 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56101f13d0e8 <col:2> 'struct k_timer *' lvalue ParmVar 0x56101f13cf30 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x56101f13d5c0 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f13d598 <col:21> 'void *' lvalue ParmVar 0x56101f13cfa8 'user_data' 'void *'
| `-FullComment 0x56101f1eab10 <line:1743:3, col:12>
|   `-ParagraphComment 0x56101f1eaae0 <col:3, col:12>
|     |-TextComment 0x56101f1eaa90 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f1eaab0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f13d778 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f13d668 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x56101f1eae60 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x56101f1eabb0 <line:1752:3>
|   | `-TextComment 0x56101f1eab80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1eabe0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x56101f1eac40 <col:10, col:55>
|   |   `-TextComment 0x56101f1eac10 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x56101f1eac90 <line:1754:3>
|   | `-TextComment 0x56101f1eac60 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1eacb0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ead40 <col:16, col:37>
|   |   `-TextComment 0x56101f1ead10 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x56101f1ead90 <line:1756:3>
|   | `-TextComment 0x56101f1ead60 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1eadb0 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x56101f1eae10 <col:11, col:25>
|       `-TextComment 0x56101f1eade0 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x56101f13d8d8 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f13d848 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x56101f13dab8 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x56101f13da10 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x56101f13d9f8 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56101f13d9c0 <col:9, col:16> 'void *' lvalue ->user_data 0x56101f13aa28
|         `-ImplicitCastExpr 0x56101f13d9a8 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x56101f13d980 <col:9> 'struct k_timer *' lvalue ParmVar 0x56101f13d848 'timer' 'struct k_timer *'
|-FunctionDecl 0x56101f13db60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x56101f1eb340 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x56101f1eaf00 <line:1773:3>
|   | `-TextComment 0x56101f1eaed0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1eaf20 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x56101f1eaf80 <col:10, col:28>
|   |   `-TextComment 0x56101f1eaf50 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x56101f1eaff0 <line:1775:3, line:1776:19>
|   | |-TextComment 0x56101f1eafa0 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x56101f1eafc0 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x56101f1eb040 <line:1778:3>
|   | `-TextComment 0x56101f1eb010 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1eb060 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x56101f1eb210 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x56101f1eb090 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x56101f1eb0e0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x56101f1eb100 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x56101f1eb120 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x56101f1eb140 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x56101f1eb160 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x56101f1eb1b0 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x56101f1eb260 <line:1785:3>
|   | `-TextComment 0x56101f1eb230 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1eb280 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x56101f1eb2e0 <col:11, col:42>
|       `-TextComment 0x56101f1eb2b0 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x56101f13dcc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x56101f13de68 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x56101f13ddc0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x56101f13ddd0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x56101f13de20 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x56101f13de00 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!'
| |     `-IntegerLiteral 0x56101f13dde0 <col:16> 'int' 0
| |-DeprecatedAttr 0x56101f13dd60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x56101f1eb5e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x56101f1eb3e0 <line:1790:3>
|   | `-TextComment 0x56101f1eb3b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1eb400 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x56101f1eb460 <col:10, col:51>
|   |   `-TextComment 0x56101f1eb430 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x56101f1eb500 <line:1792:3, line:1794:11>
|   | |-TextComment 0x56101f1eb480 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x56101f1eb4a0 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x56101f1eb4c0 <line:1794:3, col:11> Text=" kconfig."
|   `-ParagraphComment 0x56101f1eb5a0 <line:1796:3, col:56>
|     |-TextComment 0x56101f1eb520 <col:3> Text=" "
|     |-InlineCommandComment 0x56101f1eb540 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x56101f1eb560 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x56101f13df20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x56101f13e068 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x56101f13e020 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x56101f13e030 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x56101f13dfc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x56101f1eb7e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x56101f1eb680 <line:1809:3>
|   | `-TextComment 0x56101f1eb650 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1eb6a0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x56101f1eb700 <col:10, col:52>
|   |   `-TextComment 0x56101f1eb6d0 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x56101f1eb7a0 <line:1811:3, line:1813:11>
|     |-TextComment 0x56101f1eb720 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x56101f1eb740 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x56101f1eb760 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x56101f13e118 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x56101f13e2f8 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x56101f13e2b0 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x56101f13e288 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f13e250 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x56101f13e238 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x56101f13e1b8 <col:16> 's64_t (void)' Function 0x56101f13db60 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x56101f1ebd50 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x56101f1eb880 <line:1824:3>
|   | `-TextComment 0x56101f1eb850 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1eb8a0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x56101f1eb900 <col:10, col:45>
|   |   `-TextComment 0x56101f1eb8d0 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x56101f1eb970 <line:1826:3, line:1827:16>
|   | |-TextComment 0x56101f1eb920 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x56101f1eb940 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x56101f1eba60 <line:1829:3, line:1833:38>
|   | |-TextComment 0x56101f1eb990 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x56101f1eb9b0 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x56101f1eb9d0 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x56101f1eb9f0 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x56101f1eba10 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x56101f1ebab0 <line:1835:3>
|   | `-TextComment 0x56101f1eba80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ebad0 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x56101f1ebc20 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x56101f1ebb00 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x56101f1ebb20 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x56101f1ebb40 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x56101f1ebb60 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x56101f1ebb80 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x56101f1ebba0 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x56101f1ebbc0 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x56101f1ebc70 <line:1842:3>
|   | `-TextComment 0x56101f1ebc40 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ebc90 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x56101f1ebcf0 <col:11, col:66>
|       `-TextComment 0x56101f1ebcc0 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x56101f13e480 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x56101f13e378 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x56101f13ead8 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x56101f13e788 <line:1862:2, col:21>
| | | |-VarDecl 0x56101f13e6a0 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x56101f13e710 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x56101f13e830 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x56101f13e7a0 <col:2> 's64_t':'long long' lvalue Var 0x56101f13e6a0 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x56101f13e808 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x56101f13e7f0 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x56101f13e7c8 <col:11> 's64_t (void)' Function 0x56101f13db60 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x56101f13e960 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x56101f13e858 <col:2> 's64_t':'long long' lvalue Var 0x56101f13e710 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x56101f13e938 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x56101f13e908 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x56101f13e880 <col:10> 's64_t':'long long' lvalue Var 0x56101f13e6a0 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x56101f13e920 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x56101f13e8e8 <col:19, col:20> 's64_t':'long long' lvalue prefix '*'
| | |       `-ImplicitCastExpr 0x56101f13e8d0 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x56101f13e8a8 <col:20> 's64_t *' lvalue ParmVar 0x56101f13e378 'reftime' 's64_t *'
| | |-BinaryOperator 0x56101f13ea28 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x56101f13e9c8 <col:2, col:3> 's64_t':'long long' lvalue prefix '*'
| | | | `-ImplicitCastExpr 0x56101f13e9b0 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x56101f13e988 <col:3> 's64_t *' lvalue ParmVar 0x56101f13e378 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x56101f13ea10 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56101f13e9e8 <col:13> 's64_t':'long long' lvalue Var 0x56101f13e6a0 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x56101f13ea90 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x56101f13ea78 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f13ea50 <col:9> 's64_t':'long long' lvalue Var 0x56101f13e710 'delta' 's64_t':'long long'
| `-FullComment 0x56101f1ec130 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x56101f1ebdf0 <line:1850:3>
|   | `-TextComment 0x56101f1ebdc0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ebe10 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x56101f1ebe70 <col:10, col:27>
|   |   `-TextComment 0x56101f1ebe40 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x56101f1ebee0 <line:1852:3, line:1853:50>
|   | |-TextComment 0x56101f1ebe90 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x56101f1ebeb0 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x56101f1ebf30 <line:1855:3>
|   | `-TextComment 0x56101f1ebf00 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ebf50 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ec000 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x56101f1ebfb0 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x56101f1ebfd0 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x56101f1ec050 <line:1858:3>
|   | `-TextComment 0x56101f1ec020 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ec070 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x56101f1ec0d0 <col:11, col:24>
|       `-TextComment 0x56101f1ec0a0 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x56101f13ec20 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x56101f13eb20 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x56101f13ee58 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x56101f13ee10 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x56101f13ede8 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x56101f13ed90 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x56101f13ed78 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f13ecc8 <col:16> 's64_t (s64_t *)' Function 0x56101f13e480 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x56101f13edc0 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f13ecf0 <col:31> 's64_t *' lvalue ParmVar 0x56101f13eb20 'reftime' 's64_t *'
| `-FullComment 0x56101f1ec5d0 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x56101f1ec1d0 <line:1872:3>
|   | `-TextComment 0x56101f1ec1a0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ec1f0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1ec250 <col:10, col:44>
|   |   `-TextComment 0x56101f1ec220 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x56101f1ec2c0 <line:1874:3, line:1875:50>
|   | |-TextComment 0x56101f1ec270 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x56101f1ec290 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x56101f1ec380 <line:1877:3, line:1880:41>
|   | |-TextComment 0x56101f1ec2e0 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x56101f1ec300 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x56101f1ec320 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x56101f1ec340 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x56101f1ec3d0 <line:1882:3>
|   | `-TextComment 0x56101f1ec3a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ec3f0 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ec4a0 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x56101f1ec450 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x56101f1ec470 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x56101f1ec4f0 <line:1885:3>
|   | `-TextComment 0x56101f1ec4c0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ec510 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x56101f1ec570 <col:11, col:24>
|       `-TextComment 0x56101f1ec540 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x56101f13ef00 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x56101f13f0a8 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x56101f13f038 <line:1902:2, col:29>
| |   `-CallExpr 0x56101f13f010 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x56101f13eff8 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x56101f13efa0 <col:9> 'u32_t (void)' Function 0x56101f0ec538 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x56101f1ec880 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x56101f1ec670 <line:1893:3>
|   | `-TextComment 0x56101f1ec640 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ec690 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x56101f1ec6f0 <col:10, col:34>
|   |   `-TextComment 0x56101f1ec6c0 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x56101f1ec760 <line:1895:3, line:1896:9>
|   | |-TextComment 0x56101f1ec710 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x56101f1ec730 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x56101f1ec7b0 <line:1898:3>
|   | `-TextComment 0x56101f1ec780 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ec7d0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x56101f1ec830 <col:11, col:57>
|       `-TextComment 0x56101f1ec800 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x56101f13f0c0 prev 0x56101f1271e0 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x56101f1ec9a0 <line:1910:3, col:24>
| | `-ParagraphComment 0x56101f1ec970 <col:3, col:24>
| |   |-TextComment 0x56101f1ec8f0 <col:3> Text=" "
| |   |-InlineCommandComment 0x56101f1ec910 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x56101f1ec930 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x56101f13f158 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x56101f13f1c0 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x56101f13f208 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x56101f13f2c0 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x56101f13f3a0 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x56101f13f3f8 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x56101f13f3a0 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x56101f13f2c0 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x56101f13fd60 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x56101f13f498 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x56101f13f508 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x56101f140050 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f13ff50 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x56101f1ecd50 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x56101f1eca40 <line:1952:3>
|   | `-TextComment 0x56101f1eca10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1eca60 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x56101f1ecac0 <col:10, col:29>
|   |   `-TextComment 0x56101f1eca90 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x56101f1ecb10 <line:1954:3, col:67>
|   | `-TextComment 0x56101f1ecae0 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x56101f1ecb60 <line:1956:3>
|   | `-TextComment 0x56101f1ecb30 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ecb80 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ecc20 <col:16, col:37>
|   |   `-TextComment 0x56101f1ecbf0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x56101f1ecc70 <line:1958:3>
|   | `-TextComment 0x56101f1ecc40 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ecc90 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1eccf0 <col:11, col:14>
|       `-TextComment 0x56101f1eccc0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f1401d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f140150 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x56101f1ed2f0 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x56101f1ecdf0 <line:1963:3>
|   | `-TextComment 0x56101f1ecdc0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ece10 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x56101f1ece70 <col:10, col:36>
|   |   `-TextComment 0x56101f1ece40 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x56101f1ecfe0 <line:1965:3, line:1969:35>
|   | |-TextComment 0x56101f1ece90 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x56101f1ecee0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x56101f1ecf00 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x56101f1ecf20 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x56101f1ecf40 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x56101f1ecf60 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x56101f1ecf80 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x56101f1ed030 <line:1971:3>
|   | `-TextComment 0x56101f1ed000 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ed050 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1ed0b0 <col:9, col:31>
|   |   `-TextComment 0x56101f1ed080 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1ed100 <line:1973:3>
|   | `-TextComment 0x56101f1ed0d0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ed120 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ed1b0 <col:16, col:37>
|   |   `-TextComment 0x56101f1ed180 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x56101f1ed200 <line:1975:3>
|   | `-TextComment 0x56101f1ed1d0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ed220 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1ed280 <col:11, col:14>
|       `-TextComment 0x56101f1ed250 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f140460 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x56101f1402d0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f140348 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x56101f1ed910 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x56101f1ed390 <line:1980:3>
|   | `-TextComment 0x56101f1ed360 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ed3b0 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f1ed410 <col:10, col:50>
|   |   `-TextComment 0x56101f1ed3e0 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x56101f1ed530 <line:1982:3, line:1984:24>
|   | |-TextComment 0x56101f1ed430 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x56101f1ed480 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x56101f1ed4a0 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x56101f1ed4c0 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x56101f1ed4e0 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x56101f1ed580 <line:1986:3>
|   | `-TextComment 0x56101f1ed550 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ed5a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1ed600 <col:9, col:31>
|   |   `-TextComment 0x56101f1ed5d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1ed650 <line:1988:3>
|   | `-TextComment 0x56101f1ed620 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ed670 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ed720 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x56101f1ed6d0 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1ed6f0 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x56101f1ed740 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ed7d0 <col:15, col:40>
|   |   `-TextComment 0x56101f1ed7a0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x56101f1ed820 <line:1991:3>
|   | `-TextComment 0x56101f1ed7f0 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ed840 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1ed8a0 <col:11, col:14>
|       `-TextComment 0x56101f1ed870 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f1406f0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x56101f140560 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f1405d8 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x56101f1edf90 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x56101f1ed9b0 <line:1996:3>
|   | `-TextComment 0x56101f1ed980 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ed9d0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1eda30 <col:10, col:39>
|   |   `-TextComment 0x56101f1eda00 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x56101f1edb70 <line:1998:3, line:2001:50>
|   | |-TextComment 0x56101f1eda50 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x56101f1edaa0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x56101f1edac0 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x56101f1edae0 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x56101f1edb00 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x56101f1edb20 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x56101f1edbc0 <line:2003:3>
|   | `-TextComment 0x56101f1edb90 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1edbe0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1edc40 <col:9, col:31>
|   |   `-TextComment 0x56101f1edc10 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1edc90 <line:2005:3>
|   | `-TextComment 0x56101f1edc60 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1edcb0 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1edd60 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x56101f1edd10 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1edd30 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x56101f1edd80 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ede10 <col:15, col:40>
|   |   `-TextComment 0x56101f1edde0 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x56101f1edf20 <line:2008:3, line:2009:78>
|     |-TextComment 0x56101f1ede30 <line:2008:3> Text=" "
|     |-InlineCommandComment 0x56101f1ede50 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f1ede70 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x56101f1ede90 <line:2009:3> Text=" "
|     |-InlineCommandComment 0x56101f1edeb0 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x56101f1eded0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x56101f1408f8 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x56101f1407f0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f140868 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x56101f1ee5b0 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x56101f1ee030 <line:2014:3>
|   | `-TextComment 0x56101f1ee000 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ee050 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1ee0b0 <col:10, col:40>
|   |   `-TextComment 0x56101f1ee080 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x56101f1ee1d0 <line:2016:3, line:2018:24>
|   | |-TextComment 0x56101f1ee0d0 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x56101f1ee120 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x56101f1ee140 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x56101f1ee160 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x56101f1ee180 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x56101f1ee220 <line:2020:3>
|   | `-TextComment 0x56101f1ee1f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ee240 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1ee2a0 <col:9, col:31>
|   |   `-TextComment 0x56101f1ee270 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1ee2f0 <line:2022:3>
|   | `-TextComment 0x56101f1ee2c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ee310 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ee3c0 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x56101f1ee370 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1ee390 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x56101f1ee3e0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ee470 <col:15, col:40>
|   |   `-TextComment 0x56101f1ee440 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x56101f1ee4c0 <line:2025:3>
|   | `-TextComment 0x56101f1ee490 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ee4e0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1ee540 <col:11, col:14>
|       `-TextComment 0x56101f1ee510 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f140b08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x56101f140a00 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f140a78 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x56101f1eec50 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x56101f1ee650 <line:2030:3>
|   | `-TextComment 0x56101f1ee620 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ee670 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1ee6d0 <col:10, col:40>
|   |   `-TextComment 0x56101f1ee6a0 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x56101f1ee810 <line:2032:3, line:2035:50>
|   | |-TextComment 0x56101f1ee6f0 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x56101f1ee740 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x56101f1ee760 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x56101f1ee780 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x56101f1ee7a0 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x56101f1ee7c0 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x56101f1ee860 <line:2037:3>
|   | `-TextComment 0x56101f1ee830 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ee880 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1ee8e0 <col:9, col:31>
|   |   `-TextComment 0x56101f1ee8b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1ee930 <line:2039:3>
|   | `-TextComment 0x56101f1ee900 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ee950 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1eea00 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x56101f1ee9b0 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1ee9d0 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x56101f1eea20 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1eeab0 <col:15, col:40>
|   |   `-TextComment 0x56101f1eea80 <col:15, col:40> Text=" Address of the data item."
|   `-ParagraphComment 0x56101f1eebc0 <line:2042:3, line:2043:78>
|     |-TextComment 0x56101f1eead0 <line:2042:3> Text=" "
|     |-InlineCommandComment 0x56101f1eeaf0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f1eeb10 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x56101f1eeb30 <line:2043:3> Text=" "
|     |-InlineCommandComment 0x56101f1eeb50 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x56101f1eeb70 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x56101f140e40 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x56101f140c10 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f140c88 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x56101f140d00 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x56101f1ef350 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x56101f1eecf0 <line:2048:3>
|   | `-TextComment 0x56101f1eecc0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1eed10 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1eed70 <col:10, col:40>
|   |   `-TextComment 0x56101f1eed40 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x56101f1eee90 <line:2050:3, line:2052:45>
|   | |-TextComment 0x56101f1eed90 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x56101f1eede0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x56101f1eee00 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x56101f1eee20 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x56101f1eee40 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x56101f1eeee0 <line:2054:3>
|   | `-TextComment 0x56101f1eeeb0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1eef00 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1eef60 <col:9, col:31>
|   |   `-TextComment 0x56101f1eef30 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1eefb0 <line:2056:3>
|   | `-TextComment 0x56101f1eef80 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1eefd0 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ef080 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x56101f1ef030 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1ef050 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x56101f1ef0a0 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ef150 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x56101f1ef100 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x56101f1ef120 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x56101f1ef170 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x56101f1ef200 <col:15, col:40>
|   |   `-TextComment 0x56101f1ef1d0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x56101f1ef250 <line:2060:3>
|   | `-TextComment 0x56101f1ef220 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1ef270 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1ef2d0 <col:11, col:14>
|       `-TextComment 0x56101f1ef2a0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f141178 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x56101f140f50 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f140fc8 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x56101f141040 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x56101f1efb00 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x56101f1ef3f0 <line:2065:3>
|   | `-TextComment 0x56101f1ef3c0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ef410 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x56101f1ef470 <col:10, col:58>
|   |   `-TextComment 0x56101f1ef440 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x56101f1ef5b0 <line:2067:3, line:2070:19>
|   | |-TextComment 0x56101f1ef490 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x56101f1ef4e0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x56101f1ef500 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x56101f1ef520 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x56101f1ef540 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x56101f1ef560 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x56101f1ef600 <line:2072:3>
|   | `-TextComment 0x56101f1ef5d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ef620 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1ef680 <col:9, col:31>
|   |   `-TextComment 0x56101f1ef650 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1ef6d0 <line:2074:3>
|   | `-TextComment 0x56101f1ef6a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ef6f0 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ef7a0 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x56101f1ef750 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1ef770 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x56101f1ef7c0 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x56101f1ef870 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x56101f1ef820 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x56101f1ef840 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x56101f1ef890 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x56101f1ef920 <col:15, col:58>
|   |   `-TextComment 0x56101f1ef8f0 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x56101f1efa30 <line:2078:3, line:2079:43>
|   | |-TextComment 0x56101f1ef940 <line:2078:3> Text=" "
|   | |-InlineCommandComment 0x56101f1ef960 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1ef980 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x56101f1ef9a0 <line:2079:3> Text=" "
|   | |-InlineCommandComment 0x56101f1ef9c0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x56101f1ef9e0 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x56101f1efa80 <line:2081:1>
|     `-TextComment 0x56101f1efa50 <col:1> Text=" "
|-FunctionDecl 0x56101f141408 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x56101f141280 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f1412f0 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x56101f1f0160 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x56101f1efba0 <line:2085:3>
|   | `-TextComment 0x56101f1efb70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1efbc0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x56101f1efc20 <col:10, col:55>
|   |   `-TextComment 0x56101f1efbf0 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x56101f1efd40 <line:2087:3, line:2089:67>
|   | |-TextComment 0x56101f1efc40 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x56101f1efc90 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x56101f1efcb0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x56101f1efcd0 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x56101f1efcf0 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x56101f1efd90 <line:2091:3>
|   | `-TextComment 0x56101f1efd60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1efdb0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1efe10 <col:9, col:31>
|   |   `-TextComment 0x56101f1efde0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1efe60 <line:2093:3>
|   | `-TextComment 0x56101f1efe30 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1efe80 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1eff30 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x56101f1efee0 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1eff00 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x56101f1eff50 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x56101f1effe0 <col:15, col:45>
|   |   `-TextComment 0x56101f1effb0 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   `-ParagraphComment 0x56101f1f00f0 <line:2096:3, line:2097:34>
|     |-TextComment 0x56101f1f0000 <line:2096:3> Text=" "
|     |-InlineCommandComment 0x56101f1f0020 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f1f0040 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x56101f1f0060 <line:2097:3> Text=" "
|     |-InlineCommandComment 0x56101f1f0080 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x56101f1f00a0 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x56101f141698 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x56101f141510 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f141580 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x56101f1f0840 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x56101f1f0200 <line:2102:3>
|   | `-TextComment 0x56101f1f01d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f0220 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x56101f1f0280 <col:10, col:38>
|   |   `-TextComment 0x56101f1f0250 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x56101f1f0370 <line:2104:3, line:2105:46>
|   | |-TextComment 0x56101f1f02a0 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x56101f1f02f0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x56101f1f0310 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x56101f1f0330 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x56101f1f03c0 <line:2107:3>
|   | `-TextComment 0x56101f1f0390 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f03e0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x56101f1f04c0 <col:9, col:72>
|   |   |-TextComment 0x56101f1f0410 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x56101f1f0460 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x56101f1f0480 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x56101f1f0510 <line:2109:3>
|   | `-TextComment 0x56101f1f04e0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f0530 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f05e0 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x56101f1f0590 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1f05b0 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x56101f1f0600 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f06e0 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x56101f1f0660 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x56101f1f0680 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x56101f1f06a0 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x56101f1f0730 <line:2114:3>
|   | `-TextComment 0x56101f1f0700 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1f0750 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x56101f1f07d0 <line:2114:11, line:2115:48>
|       |-TextComment 0x56101f1f0780 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x56101f1f07a0 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x56101f141930 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x56101f1417a0 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f141818 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x56101f141c08 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x56101f141bc8 <line:2135:2, col:72>
| |   `-CallExpr 0x56101f141b90 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x56101f141b78 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f1419e0 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x56101f0b9510 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x56101f141a80 <col:36, col:44> 'sys_sflist_t *' prefix '&'
| |     | `-MemberExpr 0x56101f141a48 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x56101f13f158
| |     |   `-ImplicitCastExpr 0x56101f141a30 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x56101f141a08 <col:37> 'struct k_queue *' lvalue ParmVar 0x56101f1417a0 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x56101f141af0 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x56101f141ad8 <col:68> 'void *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f141aa0 <col:68> 'void *' lvalue ParmVar 0x56101f141818 'data' 'void *'
| `-FullComment 0x56101f1f0e70 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x56101f1f08e0 <line:2120:3>
|   | `-TextComment 0x56101f1f08b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f0900 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1f0960 <col:10, col:41>
|   |   `-TextComment 0x56101f1f0930 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x56101f1f0a80 <line:2122:3, line:2124:76>
|   | |-TextComment 0x56101f1f0980 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x56101f1f09d0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x56101f1f09f0 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x56101f1f0a10 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x56101f1f0a30 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x56101f1f0ad0 <line:2126:3>
|   | `-TextComment 0x56101f1f0aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f0af0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x56101f1f0b50 <col:9, col:30>
|   |   `-TextComment 0x56101f1f0b20 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x56101f1f0ba0 <line:2128:3>
|   | `-TextComment 0x56101f1f0b70 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f0bc0 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f0c80 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x56101f1f0c30 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1f0c50 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x56101f1f0ca0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f0d30 <col:15, col:40>
|   |   `-TextComment 0x56101f1f0d00 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x56101f1f0d80 <line:2131:3>
|   | `-TextComment 0x56101f1f0d50 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1f0da0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x56101f1f0e00 <col:11, col:40>
|       `-TextComment 0x56101f1f0dd0 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x56101f141d80 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x56101f141c48 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f141cc0 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x56101f1425b8 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x56101f141ea0 <line:2154:2, col:20>
| | | `-VarDecl 0x56101f141e40 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x56101f1423a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x56101f141fe8 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x56101f141eb8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x56101f141e40 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x56101f141fb8 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x56101f141fa0 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x56101f141ee0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x56101f141f80 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&'
| | | |     `-MemberExpr 0x56101f141f48 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x56101f13f158
| | | |       `-ImplicitCastExpr 0x56101f141f30 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x56101f141f08 <col:28> 'struct k_queue *' lvalue ParmVar 0x56101f141c48 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x56101f1420e8 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x56101f1420b8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x56101f142010 <col:43> 'sys_sfnode_t *' lvalue Var 0x56101f141e40 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x56101f1420d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x56101f142098 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x56101f142070 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x56101f142038 <col:23> 'int' 0
| | | |-BinaryOperator 0x56101f1421e8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x56101f142110 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x56101f141e40 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x56101f1421a0 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x56101f142188 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x56101f142138 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x56101f0ae7a8 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x56101f1421d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56101f142160 <col:43> 'sys_sfnode_t *' lvalue Var 0x56101f141e40 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x56101f142390 <col:49, line:2160:2>
| | |   `-IfStmt 0x56101f142358 <line:2157:3, line:2159:3>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x56101f1422c8 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x56101f1422b0 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x56101f142210 <col:7> 'sys_sfnode_t *' lvalue Var 0x56101f141e40 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x56101f142288 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x56101f142270 <col:32> 'void *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x56101f142238 <col:32> 'void *' lvalue ParmVar 0x56101f141cc0 'data' 'void *'
| | |     |-CompoundStmt 0x56101f142340 <col:38, line:2159:3>
| | |     | `-ReturnStmt 0x56101f142328 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |     |   `-ImplicitCastExpr 0x56101f142310 <col:16> 'bool' <IntegralToBoolean>
| | |     |     `-IntegerLiteral 0x56101f1422f0 <col:16> 'int' 0
| | |     `-<<<NULL>>>
| | |-CallExpr 0x56101f1424d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x56101f1424b8 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x56101f1423e0 <col:2> 'void (struct k_queue *, void *)' Function 0x56101f140460 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x56101f142508 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x56101f142408 <col:17> 'struct k_queue *' lvalue ParmVar 0x56101f141c48 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x56101f142520 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56101f142430 <col:24> 'void *' lvalue ParmVar 0x56101f141cc0 'data' 'void *'
| | `-ReturnStmt 0x56101f142570 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x56101f142558 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x56101f142538 <col:16> 'int' 1
| `-FullComment 0x56101f1f1490 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x56101f1f0f10 <line:2139:3>
|   | `-TextComment 0x56101f1f0ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f0f30 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x56101f1f0f90 <col:10, col:72>
|   |   `-TextComment 0x56101f1f0f60 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x56101f1f10b0 <line:2141:3, line:2143:78>
|   | |-TextComment 0x56101f1f0fb0 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x56101f1f1000 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x56101f1f1020 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x56101f1f1040 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x56101f1f1060 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x56101f1f1100 <line:2145:3>
|   | `-TextComment 0x56101f1f10d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f1120 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x56101f1f1180 <col:9, col:30>
|   |   `-TextComment 0x56101f1f1150 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x56101f1f11d0 <line:2147:3>
|   | `-TextComment 0x56101f1f11a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f11f0 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f12a0 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x56101f1f1250 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x56101f1f1270 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x56101f1f12c0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f1350 <col:15, col:40>
|   |   `-TextComment 0x56101f1f1320 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x56101f1f13a0 <line:2150:3>
|   | `-TextComment 0x56101f1f1370 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1f13c0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x56101f1f1420 <col:11, col:52>
|       `-TextComment 0x56101f1f13f0 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x56101f142718 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f142610 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x56101f1f19d0 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x56101f1f1530 <line:2167:3>
|   | `-TextComment 0x56101f1f1500 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f1550 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x56101f1f15b0 <col:10, col:56>
|   |   `-TextComment 0x56101f1f1580 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x56101f1f1620 <line:2169:3, line:2170:59>
|   | |-TextComment 0x56101f1f15d0 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x56101f1f15f0 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x56101f1f1670 <line:2172:3>
|   | `-TextComment 0x56101f1f1640 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f1690 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1f16f0 <col:9, col:31>
|   |   `-TextComment 0x56101f1f16c0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1f1740 <line:2174:3>
|   | `-TextComment 0x56101f1f1710 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f1760 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f17f0 <col:16, col:37>
|   |   `-TextComment 0x56101f1f17c0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x56101f1f1840 <line:2176:3>
|   | `-TextComment 0x56101f1f1810 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f1860 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x56101f1f18e0 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x56101f1f1890 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x56101f1f18b0 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x56101f1f1900 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x56101f1f1960 <col:11, col:34>
|       `-TextComment 0x56101f1f1930 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x56101f142878 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f1427e8 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x56101f142aa8 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x56101f142a68 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x56101f142a40 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x56101f1429f8 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x56101f1429e0 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56101f142920 <col:14> 'bool (sys_sflist_t *)' Function 0x56101f0adf30 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x56101f1429c0 <col:34, col:42> 'sys_sflist_t *' prefix '&'
|           `-MemberExpr 0x56101f142988 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x56101f13f158
|             `-ImplicitCastExpr 0x56101f142970 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x56101f142948 <col:35> 'struct k_queue *' lvalue ParmVar 0x56101f1427e8 'queue' 'struct k_queue *'
|-FunctionDecl 0x56101f142bf8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f142ae8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x56101f1f1d70 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x56101f1f1a70 <line:2187:3>
|   | `-TextComment 0x56101f1f1a40 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f1a90 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1f1af0 <col:10, col:44>
|   |   `-TextComment 0x56101f1f1ac0 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x56101f1f1b40 <line:2189:3, col:61>
|   | `-TextComment 0x56101f1f1b10 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x56101f1f1b90 <line:2191:3>
|   | `-TextComment 0x56101f1f1b60 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f1bb0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f1c40 <col:16, col:37>
|   |   `-TextComment 0x56101f1f1c10 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x56101f1f1c90 <line:2193:3>
|   | `-TextComment 0x56101f1f1c60 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1f1cb0 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x56101f1f1d10 <col:11, col:51>
|       `-TextComment 0x56101f1f1ce0 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x56101f1436d0 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f142cc8 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x56101f1439d8 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x56101f143990 <line:2199:2, col:70>
|     `-CallExpr 0x56101f143940 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x56101f143928 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f143778 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x56101f13fd60 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x56101f143878 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x56101f143860 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x56101f1437a0 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acdd0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x56101f143840 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x56101f143808 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x56101f13f158
|       |     `-ImplicitCastExpr 0x56101f1437f0 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x56101f1437c8 <col:49> 'struct k_queue *' lvalue ParmVar 0x56101f142cc8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x56101f143978 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x56101f1438a8 <col:16> 'int' 0
|-FunctionDecl 0x56101f143aa8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f143a18 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x56101f1f2110 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x56101f1f1e10 <line:2203:3>
|   | `-TextComment 0x56101f1f1de0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f1e30 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1f1e90 <col:10, col:44>
|   |   `-TextComment 0x56101f1f1e60 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x56101f1f1ee0 <line:2205:3, col:61>
|   | `-TextComment 0x56101f1f1eb0 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x56101f1f1f30 <line:2207:3>
|   | `-TextComment 0x56101f1f1f00 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f1f50 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f1fe0 <col:16, col:37>
|   |   `-TextComment 0x56101f1f1fb0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x56101f1f2030 <line:2209:3>
|   | `-TextComment 0x56101f1f2000 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1f2050 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x56101f1f20b0 <col:11, col:51>
|       `-TextComment 0x56101f1f2080 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x56101f143c08 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f143b78 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x56101f143ed8 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x56101f143e68 <line:2215:2, col:70>
|     `-CallExpr 0x56101f143e18 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x56101f143e00 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f143cb0 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x56101f13fd60 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x56101f143db0 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x56101f143d98 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x56101f143cd8 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x56101f0acff8 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x56101f143d78 <col:48, col:56> 'sys_sflist_t *' prefix '&'
|       |   `-MemberExpr 0x56101f143d40 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x56101f13f158
|       |     `-ImplicitCastExpr 0x56101f143d28 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x56101f143d00 <col:49> 'struct k_queue *' lvalue ParmVar 0x56101f143b78 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x56101f143e50 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x56101f143de0 <col:16> 'int' 0
|-RecordDecl 0x56101f143ef0 prev 0x56101f127290 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x56101f143f98 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x56101f144388 prev 0x56101f127340 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x56101f1f2230 <line:2523:4, col:7>
| | `-ParagraphComment 0x56101f1f2200 <col:4, col:7>
| |   |-TextComment 0x56101f1f2180 <col:4> Text=" "
| |   |-TextComment 0x56101f1f21a0 <col:5> Text="@"
| |   `-TextComment 0x56101f1f21c0 <col:6, col:7> Text="} "
| `-FieldDecl 0x56101f144430 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x56101f144668 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x56101f0c4500 'uintptr_t' sugar
|   |-Typedef 0x56101efd8c68 'uintptr_t'
|   `-BuiltinType 0x56101ef8ea70 'unsigned long'
|-RecordDecl 0x56101f041fd0 prev 0x56101f1273f0 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x56101f042068 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x56101f0420d0 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x56101f0421a8 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x56101f042200 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x56101f042258 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x56101f0422b0 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x56101f042650 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x56101f042440 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x56101f0424b0 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x56101f042520 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x56101f1f2840 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x56101f1f22d0 <line:2675:3>
|   | `-TextComment 0x56101f1f22a0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f22f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x56101f1f2350 <col:10, col:29>
|   |   `-TextComment 0x56101f1f2320 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x56101f1f23a0 <line:2677:3, col:67>
|   | `-TextComment 0x56101f1f2370 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x56101f1f23f0 <line:2679:3>
|   | `-TextComment 0x56101f1f23c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f2410 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f24c0 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x56101f1f2470 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x56101f1f2490 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x56101f1f24e0 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f2590 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x56101f1f2540 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x56101f1f2560 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x56101f1f25b0 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x56101f1f2640 <col:22, col:67>
|   |   `-TextComment 0x56101f1f2610 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x56101f1f2690 <line:2683:3>
|   | `-TextComment 0x56101f1f2660 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f26b0 <col:4, line:2684:3> Name="return"
|   | `-ParagraphComment 0x56101f1f2730 <line:2683:11, line:2684:3>
|   |   |-TextComment 0x56101f1f26e0 <line:2683:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1f2700 <line:2684:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f2750 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x56101f1f27c0 <line:2685:1>
|     `-TextComment 0x56101f1f2790 <col:1> Text=" "
|-FunctionDecl 0x56101f0428e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x56101f042760 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x56101f0427d0 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x56101f1f2df0 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x56101f1f28e0 <line:2691:3>
|   | `-TextComment 0x56101f1f28b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f2900 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x56101f1f2960 <col:10, col:29>
|   |   `-TextComment 0x56101f1f2930 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x56101f1f2a20 <line:2693:3, line:2696:72>
|   | |-TextComment 0x56101f1f2980 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x56101f1f29a0 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x56101f1f29c0 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x56101f1f29e0 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x56101f1f2a70 <line:2698:3>
|   | `-TextComment 0x56101f1f2a40 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f2a90 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f2b40 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x56101f1f2af0 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x56101f1f2b10 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x56101f1f2b60 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f2bf0 <col:22, col:67>
|   |   `-TextComment 0x56101f1f2bc0 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x56101f1f2c50 <line:2701:3>
|   | `-TextComment 0x56101f1f2c20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f2c70 <col:4, line:2702:3> Name="return"
|   | `-ParagraphComment 0x56101f1f2cf0 <line:2701:11, line:2702:3>
|   |   |-TextComment 0x56101f1f2ca0 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x56101f1f2cc0 <line:2702:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f2d10 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x56101f1f2d80 <line:2703:1>
|     `-TextComment 0x56101f1f2d50 <col:1> Text=" "
|-FunctionDecl 0x56101f042ae8 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x56101f0429e0 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x56101f1f32b0 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x56101f1f2e90 <line:2709:3>
|   | `-TextComment 0x56101f1f2e60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f2eb0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1f2f10 <col:10, col:44>
|   |   `-TextComment 0x56101f1f2ee0 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x56101f1f2fb0 <line:2711:3, line:2713:46>
|   | |-TextComment 0x56101f1f2f30 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x56101f1f2f50 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x56101f1f2f70 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x56101f1f3000 <line:2715:3>
|   | `-TextComment 0x56101f1f2fd0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f3020 <col:4, line:2718:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f31c0 <line:2715:16, line:2718:3>
|   |   |-TextComment 0x56101f1f3080 <line:2715:16, col:37> Text=" Address of the stack."
|   |   |-TextComment 0x56101f1f30a0 <line:2716:3> Text=" "
|   |   |-InlineCommandComment 0x56101f1f30c0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x56101f1f30e0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x56101f1f3100 <line:2717:3> Text=" "
|   |   |-InlineCommandComment 0x56101f1f3120 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x56101f1f3140 <col:11, col:46> Text=" -EAGAIN when object is still in use"
|   |   `-TextComment 0x56101f1f3160 <line:2718:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f31e0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x56101f1f3250 <line:2719:1>
|     `-TextComment 0x56101f1f3220 <col:1> Text=" "
|-FunctionDecl 0x56101f042d68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x56101f042be0 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x56101f042c50 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x56101f1f39e0 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x56101f1f3350 <line:2723:3>
|   | `-TextComment 0x56101f1f3320 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f3370 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1f33d0 <col:10, col:39>
|   |   `-TextComment 0x56101f1f33a0 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x56101f1f34f0 <line:2725:3, col:55>
|   | |-TextComment 0x56101f1f33f0 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x56101f1f3440 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x56101f1f3460 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x56101f1f34b0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x56101f1f3540 <line:2727:3>
|   | `-TextComment 0x56101f1f3510 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f3560 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1f35c0 <col:9, col:31>
|   |   `-TextComment 0x56101f1f3590 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1f3610 <line:2729:3>
|   | `-TextComment 0x56101f1f35e0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f3630 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f36e0 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x56101f1f3690 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x56101f1f36b0 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x56101f1f3700 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f3790 <col:15, col:44>
|   |   `-TextComment 0x56101f1f3760 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x56101f1f38d0 <line:2732:3, line:2734:3>
|   | |-TextComment 0x56101f1f37b0 <line:2732:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f37d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f37f0 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x56101f1f3810 <line:2733:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f3830 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f3850 <col:11, col:35> Text=" -ENOMEM if stack is full"
|   | `-TextComment 0x56101f1f3870 <line:2734:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f38f0 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x56101f1f3960 <line:2735:1>
|     `-TextComment 0x56101f1f3930 <col:1> Text=" "
|-FunctionDecl 0x56101f043408 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x56101f042e70 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x56101f042ee0 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x56101f042f50 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x56101f1f4350 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x56101f1f3a80 <line:2739:3>
|   | `-TextComment 0x56101f1f3a50 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f3aa0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x56101f1f3b00 <col:10, col:38>
|   |   `-TextComment 0x56101f1f3ad0 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x56101f1f3c50 <line:2741:3, line:2742:47>
|   | |-TextComment 0x56101f1f3b20 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x56101f1f3b70 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x56101f1f3b90 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x56101f1f3bb0 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x56101f1f3c00 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x56101f1f3ca0 <line:2744:3>
|   | `-TextComment 0x56101f1f3c70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f3cc0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x56101f1f3da0 <col:9, col:72>
|   |   |-TextComment 0x56101f1f3cf0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x56101f1f3d40 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x56101f1f3d60 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x56101f1f3df0 <line:2746:3>
|   | `-TextComment 0x56101f1f3dc0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f3e10 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f3ec0 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x56101f1f3e70 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x56101f1f3e90 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x56101f1f3ee0 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f3f90 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x56101f1f3f40 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x56101f1f3f60 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x56101f1f3fb0 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x56101f1f4090 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x56101f1f4010 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x56101f1f4030 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x56101f1f4050 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x56101f1f4240 <line:2752:3, line:2755:3>
|   | |-TextComment 0x56101f1f40b0 <line:2752:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f40d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f40f0 <col:11, col:39> Text=" 0 Element popped from stack."
|   | |-TextComment 0x56101f1f4110 <line:2753:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f4130 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f4150 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x56101f1f4170 <line:2754:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f4190 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f41b0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x56101f1f41d0 <line:2755:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f4260 <col:4, col:20> Text=" K-STACK-001"
|   `-ParagraphComment 0x56101f1f42d0 <line:2756:1>
|     `-TextComment 0x56101f1f42a0 <col:1> Text=" "
|-RecordDecl 0x56101f043518 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x56101f1f4470 <line:2778:4, col:7>
|   `-ParagraphComment 0x56101f1f4440 <col:4, col:7>
|     |-TextComment 0x56101f1f43c0 <col:4> Text=" "
|     |-TextComment 0x56101f1f43e0 <col:5> Text="@"
|     `-TextComment 0x56101f1f4400 <col:6, col:7> Text="} "
|-RecordDecl 0x56101f0435c0 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x56101f043940 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x56101f0438d0 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x56101f043870 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x56101f043830 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x56101ef8e9b0 'int'
|       |-PointerType 0x56101f0436d0 'struct k_poll_event *'
|       | `-ElaboratedType 0x56101f043670 'struct k_poll_event' sugar
|       |   `-RecordType 0x56101f127740 'struct k_poll_event'
|       |     `-Record 0x56101f171008 'k_poll_event'
|       `-TypedefType 0x56101f0205e0 'u32_t' sugar
|         |-Typedef 0x56101effc7f0 'u32_t'
|         `-BuiltinType 0x56101ef8ea50 'unsigned int'
|-RecordDecl 0x56101f043998 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x56101f043a50 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x56101f043ac0 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x56101f043b40 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x56101f043e40 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x56101f043de0 'void (*)(struct k_work *)'
| | `-ParenType 0x56101f043d80 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x56101f043d40 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x56101ef8e910 'void'
| |     `-PointerType 0x56101f043c50 'struct k_work *'
| |       `-ElaboratedType 0x56101f043bf0 'struct k_work' sugar
| |         `-RecordType 0x56101f0435a0 'struct k_work'
| |           `-Record 0x56101f044148 'k_work'
| `-FullComment 0x56101f1f4990 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x56101f1f4510 <line:2797:3>
|   | `-TextComment 0x56101f1f44e0 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f4530 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x56101f1f45a0 <line:2798:3>
|   | `-TextComment 0x56101f1f4570 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f45c0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f1f4620 <col:10, col:42>
|   |   `-TextComment 0x56101f1f45f0 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x56101f1f4690 <line:2800:3, line:2801:52>
|   | |-TextComment 0x56101f1f4640 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x56101f1f4660 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x56101f1f46e0 <line:2803:3>
|   | `-TextComment 0x56101f1f46b0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f4700 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f4790 <col:15, col:40>
|   |   `-TextComment 0x56101f1f4760 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x56101f1f47e0 <line:2805:3>
|   | `-TextComment 0x56101f1f47b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f4800 <col:4, line:2806:3> Name="return"
|   | `-ParagraphComment 0x56101f1f4880 <line:2805:11, line:2806:3>
|   |   |-TextComment 0x56101f1f4830 <line:2805:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1f4850 <line:2806:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f48a0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x56101f1f4910 <line:2807:1>
|     `-TextComment 0x56101f1f48e0 <col:1> Text=" "
|-RecordDecl 0x56101f043ec8 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x56101f1f4ab0 <line:2811:3, col:24>
| | `-ParagraphComment 0x56101f1f4a80 <col:3, col:24>
| |   |-TextComment 0x56101f1f4a00 <col:3> Text=" "
| |   |-InlineCommandComment 0x56101f1f4a20 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x56101f1f4a40 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x56101f043f90 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x56101f043ff8 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x56101f044040 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x56101f044100 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x56101f044148 prev 0x56101f043518 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x56101f0441e8 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x56101f044260 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x56101f0446e8 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x56101f044730 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x56101f044800 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x56101f044868 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x56101f044960 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x56101f044a00 prev 0x56101f0435c0 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x56101f044aa8 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x56101f044b40 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x56101f044bb0 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x56101f044c10 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x56101f044c68 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x56101f044cd0 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x56101f044d30 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x56101f044d98 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x56101f045030 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x56101f044eb0 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x56101f044f20 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x56101f0454d8 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x56101f045480 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x56101f045120 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*'
| |   | `-ImplicitCastExpr 0x56101f045108 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56101f0450e0 <col:3> 'struct k_work *' lvalue ParmVar 0x56101f044eb0 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x56101f045468 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x56101f045440 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x56101f045388 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x56101f0451c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x56101f045198 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x56101f045160 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x56101f0453e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x56101f045220 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x56101f044f20 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x56101f0453f8 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x56101f045288 <col:13> 'int' 0
| `-FullComment 0x56101f1f4ff0 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x56101f1f4b50 <line:2876:3>
|   | `-TextComment 0x56101f1f4b20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f4b70 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x56101f1f4bd0 <col:10, col:33>
|   |   `-TextComment 0x56101f1f4ba0 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x56101f1f4c30 <line:2878:3, col:74>
|   | `-TextComment 0x56101f1f4bf0 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x56101f1f4c80 <line:2880:3>
|   | `-TextComment 0x56101f1f4c50 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f4ca0 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f4d50 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x56101f1f4d00 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x56101f1f4d20 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x56101f1f4d70 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f4e00 <col:18, col:70>
|   |   `-TextComment 0x56101f1f4dd0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x56101f1f4e50 <line:2883:3>
|   | `-TextComment 0x56101f1f4e20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f4e70 <col:4, line:2884:3> Name="return"
|   | `-ParagraphComment 0x56101f1f4ef0 <line:2883:11, line:2884:3>
|   |   |-TextComment 0x56101f1f4ea0 <line:2883:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1f4ec0 <line:2884:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f4f10 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x56101f1f4f80 <line:2885:1>
|     `-TextComment 0x56101f1f4f50 <col:1> Text=" "
|-FunctionDecl 0x56101f045e30 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x56101f045518 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x56101f0455a0 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x56101f046278 <line:2915:1, line:2919:1>
| | `-IfStmt 0x56101f046210 <line:2916:2, line:2918:2>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x56101f046070 <line:2916:6, col:64> 'int' prefix '!'
| |   | `-CallExpr 0x56101f046020 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x56101f046008 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x56101f045ee0 <col:7> 'bool (atomic_t *, int)' Function 0x56101f021ba0 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x56101f046058 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x56101f045f48 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x56101f0446e8
| |   |   |   `-ImplicitCastExpr 0x56101f045f30 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x56101f045f08 <col:31> 'struct k_work *' lvalue ParmVar 0x56101f0455a0 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x56101f045f80 <col:44> 'int' EnumConstant 0x56101f044100 'K_WORK_STATE_PENDING' 'int'
| |   |-CompoundStmt 0x56101f0461f8 <col:67, line:2918:2>
| |   | `-CallExpr 0x56101f046190 <line:2917:3, col:38> 'void'
| |   |   |-ImplicitCastExpr 0x56101f046178 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x56101f046090 <col:3> 'void (struct k_queue *, void *)' Function 0x56101f140460 'k_queue_append' 'void (struct k_queue *, void *)'
| |   |   |-UnaryOperator 0x56101f046130 <col:18, col:27> 'struct k_queue *' prefix '&'
| |   |   | `-MemberExpr 0x56101f0460f8 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x56101f043f90
| |   |   |   `-ImplicitCastExpr 0x56101f0460e0 <col:19> 'struct k_work_q *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x56101f0460b8 <col:19> 'struct k_work_q *' lvalue ParmVar 0x56101f045518 'work_q' 'struct k_work_q *'
| |   |   `-ImplicitCastExpr 0x56101f0461e0 <col:34> 'void *' <BitCast>
| |   |     `-ImplicitCastExpr 0x56101f0461c8 <col:34> 'struct k_work *' <LValueToRValue>
| |   |       `-DeclRefExpr 0x56101f046150 <col:34> 'struct k_work *' lvalue ParmVar 0x56101f0455a0 'work' 'struct k_work *'
| |   `-<<<NULL>>>
| `-FullComment 0x56101f1f58c0 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x56101f1f5090 <line:2892:3>
|   | `-TextComment 0x56101f1f5060 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f50b0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x56101f1f5110 <col:10, col:29>
|   |   `-TextComment 0x56101f1f50e0 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x56101f1f5320 <line:2894:3, line:2899:15>
|   | |-TextComment 0x56101f1f5130 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x56101f1f5180 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x56101f1f51a0 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x56101f1f51c0 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f5210 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x56101f1f5230 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x56101f1f5250 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x56101f1f5270 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x56101f1f5290 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x56101f1f52b0 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x56101f1f5370 <line:2901:3>
|   | `-TextComment 0x56101f1f5340 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f5390 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x56101f1f5410 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x56101f1f53c0 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x56101f1f53e0 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x56101f1f5460 <line:2905:3>
|   | `-TextComment 0x56101f1f5430 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f5480 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1f54e0 <col:9, col:31>
|   |   `-TextComment 0x56101f1f54b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1f5530 <line:2907:3>
|   | `-TextComment 0x56101f1f5500 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f5550 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f5600 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x56101f1f55b0 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x56101f1f55d0 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x56101f1f5620 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f56b0 <col:15, col:36>
|   |   `-TextComment 0x56101f1f5680 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x56101f1f5700 <line:2910:3>
|   | `-TextComment 0x56101f1f56d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f5720 <col:4, line:2911:3> Name="return"
|   | `-ParagraphComment 0x56101f1f57a0 <line:2910:11, line:2911:3>
|   |   |-TextComment 0x56101f1f5750 <line:2910:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1f5770 <line:2911:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f57c0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x56101f1f5830 <line:2912:1>
|     `-TextComment 0x56101f1f5800 <col:1> Text=" "
|-FunctionDecl 0x56101f046458 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x56101f0462b8 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x56101f046340 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x56101f046c78 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x56101f0465c0 <line:2945:2, col:18>
| | | `-VarDecl 0x56101f046520 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x56101f0465a0 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x56101f046580 <col:15> 'int' 16
| | |-IfStmt 0x56101f046bc0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x56101f046708 <line:2947:6, col:64> 'int' prefix '!'
| | | | `-CallExpr 0x56101f0466b8 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x56101f0466a0 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x56101f0465d8 <col:7> 'bool (atomic_t *, int)' Function 0x56101f021ba0 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x56101f0466f0 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x56101f046640 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x56101f0446e8
| | | |   |   `-ImplicitCastExpr 0x56101f046628 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x56101f046600 <col:31> 'struct k_work *' lvalue ParmVar 0x56101f046340 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x56101f046678 <col:44> 'int' EnumConstant 0x56101f044100 'K_WORK_STATE_PENDING' 'int'
| | | |-CompoundStmt 0x56101f046ba0 <col:67, line:2956:2>
| | | | |-BinaryOperator 0x56101f046918 <line:2948:3, col:50> 'int' '='
| | | | | |-DeclRefExpr 0x56101f046728 <col:3> 'int' lvalue Var 0x56101f046520 'ret' 'int'
| | | | | `-CallExpr 0x56101f0468b0 <col:9, col:50> 's32_t':'int'
| | | | |   |-ImplicitCastExpr 0x56101f046898 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x56101f046750 <col:9> 's32_t (struct k_queue *, void *)' Function 0x56101f1406f0 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | | | |   |-UnaryOperator 0x56101f0467f0 <col:30, col:39> 'struct k_queue *' prefix '&'
| | | | |   | `-MemberExpr 0x56101f0467b8 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x56101f043f90
| | | | |   |   `-ImplicitCastExpr 0x56101f0467a0 <col:31> 'struct k_work_q *' <LValueToRValue>
| | | | |   |     `-DeclRefExpr 0x56101f046778 <col:31> 'struct k_work_q *' lvalue ParmVar 0x56101f0462b8 'work_q' 'struct k_work_q *'
| | | | |   `-ImplicitCastExpr 0x56101f046900 <col:46> 'void *' <BitCast>
| | | | |     `-ImplicitCastExpr 0x56101f0468e8 <col:46> 'struct k_work *' <LValueToRValue>
| | | | |       `-DeclRefExpr 0x56101f046810 <col:46> 'struct k_work *' lvalue ParmVar 0x56101f046340 'work' 'struct k_work *'
| | | | `-IfStmt 0x56101f046b68 <line:2953:3, line:2955:3>
| | | |   |-<<<NULL>>>
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x56101f0469a0 <line:2953:7, col:14> 'int' '!='
| | | |   | |-ImplicitCastExpr 0x56101f046988 <col:7> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x56101f046940 <col:7> 'int' lvalue Var 0x56101f046520 'ret' 'int'
| | | |   | `-IntegerLiteral 0x56101f046968 <col:14> 'int' 0
| | | |   |-CompoundStmt 0x56101f046b50 <col:17, line:2955:3>
| | | |   | `-CallExpr 0x56101f046b00 <line:2954:4, col:54> 'void'
| | | |   |   |-ImplicitCastExpr 0x56101f046ae8 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   |   | `-DeclRefExpr 0x56101f0469c8 <col:4> 'void (atomic_t *, int)' Function 0x56101f0226a0 'atomic_clear_bit' 'void (atomic_t *, int)'
| | | |   |   |-ImplicitCastExpr 0x56101f046b38 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | | |   |   | `-MemberExpr 0x56101f046a30 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x56101f0446e8
| | | |   |   |   `-ImplicitCastExpr 0x56101f046a18 <col:21> 'struct k_work *' <LValueToRValue>
| | | |   |   |     `-DeclRefExpr 0x56101f0469f0 <col:21> 'struct k_work *' lvalue ParmVar 0x56101f046340 'work' 'struct k_work *'
| | | |   |   `-DeclRefExpr 0x56101f046a68 <col:34> 'int' EnumConstant 0x56101f044100 'K_WORK_STATE_PENDING' 'int'
| | | |   `-<<<NULL>>>
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x56101f046c38 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x56101f046c20 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f046bf8 <col:9> 'int' lvalue Var 0x56101f046520 'ret' 'int'
| `-FullComment 0x56101f1f6080 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x56101f1f5960 <line:2922:3>
|   | `-TextComment 0x56101f1f5930 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f5980 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x56101f1f59e0 <col:10, col:53>
|   |   `-TextComment 0x56101f1f59b0 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x56101f1f5ad0 <line:2924:3, line:2928:71>
|   | |-TextComment 0x56101f1f5a00 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x56101f1f5a20 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x56101f1f5a40 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x56101f1f5a60 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x56101f1f5a80 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x56101f1f5b20 <line:2930:3, col:61>
|   | `-TextComment 0x56101f1f5af0 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x56101f1f5b70 <line:2932:3>
|   | `-TextComment 0x56101f1f5b40 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f5b90 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1f5bf0 <col:9, col:31>
|   |   `-TextComment 0x56101f1f5bc0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1f5c40 <line:2934:3>
|   | `-TextComment 0x56101f1f5c10 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f5c60 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f5d10 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x56101f1f5cc0 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x56101f1f5ce0 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x56101f1f5d30 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f5dc0 <col:15, col:36>
|   |   `-TextComment 0x56101f1f5d90 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x56101f1f5f70 <line:2937:3, line:2940:3>
|   | |-TextComment 0x56101f1f5de0 <line:2937:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f5e00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f5e20 <col:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   | |-TextComment 0x56101f1f5e40 <line:2938:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f5e60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f5e80 <col:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   | |-TextComment 0x56101f1f5ea0 <line:2939:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f5ec0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f5ee0 <col:11, col:20> Text=" 0 Success"
|   | `-TextComment 0x56101f1f5f00 <line:2940:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f5f90 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x56101f1f6000 <line:2941:1>
|     `-TextComment 0x56101f1f5fd0 <col:1> Text=" "
|-FunctionDecl 0x56101f046e10 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x56101f046cc8 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x56101f047098 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x56101f047058 <line:2976:2, col:58>
| |   `-CallExpr 0x56101f046ff0 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x56101f046fd8 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f046eb8 <col:9> 'bool (const atomic_t *, int)' Function 0x56101f01fb70 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x56101f047040 <col:25, col:31> 'const atomic_t *' <BitCast>
| |     | `-ImplicitCastExpr 0x56101f047028 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x56101f046f20 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x56101f0446e8
| |     |     `-ImplicitCastExpr 0x56101f046f08 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x56101f046ee0 <col:25> 'struct k_work *' lvalue ParmVar 0x56101f046cc8 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x56101f046f58 <col:38> 'int' EnumConstant 0x56101f044100 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x56101f1f6660 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x56101f1f6120 <line:2962:3>
|   | `-TextComment 0x56101f1f60f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f6140 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f1f61a0 <col:10, col:42>
|   |   `-TextComment 0x56101f1f6170 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x56101f1f6290 <line:2964:3, line:2965:9>
|   | |-TextComment 0x56101f1f61c0 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x56101f1f6210 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x56101f1f6230 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x56101f1f6250 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x56101f1f62e0 <line:2967:3>
|   | `-TextComment 0x56101f1f62b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f6300 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1f6360 <col:9, col:31>
|   |   `-TextComment 0x56101f1f6330 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1f63b0 <line:2969:3>
|   | `-TextComment 0x56101f1f6380 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f63d0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f6460 <col:15, col:36>
|   |   `-TextComment 0x56101f1f6430 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x56101f1f64b0 <line:2971:3>
|   | `-TextComment 0x56101f1f6480 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f64d0 <col:4, line:2972:3> Name="return"
|   | `-ParagraphComment 0x56101f1f6550 <line:2971:11, line:2972:3>
|   |   |-TextComment 0x56101f1f6500 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|   |   `-TextComment 0x56101f1f6520 <line:2972:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f6570 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x56101f1f65e0 <line:2973:1>
|     `-TextComment 0x56101f1f65b0 <col:1> Text=" "
|-FunctionDecl 0x56101f047370 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x56101f0470d8 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x56101f047148 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x56101f0471b8 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f047230 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x56101f1f6e70 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x56101f1f6700 <line:2980:3>
|   | `-TextComment 0x56101f1f66d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f6720 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x56101f1f6780 <col:10, col:28>
|   |   `-TextComment 0x56101f1f6750 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x56101f1f6870 <line:2982:3, line:2983:41>
|   | |-TextComment 0x56101f1f67a0 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x56101f1f67f0 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x56101f1f6810 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x56101f1f6830 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x56101f1f68c0 <line:2985:3>
|   | `-TextComment 0x56101f1f6890 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f68e0 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f6990 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x56101f1f6940 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x56101f1f6960 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x56101f1f69b0 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f6a90 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x56101f1f6a10 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x56101f1f6a30 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x56101f1f6a50 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x56101f1f6ab0 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x56101f1f6bb0 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x56101f1f6b10 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x56101f1f6b30 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x56101f1f6b50 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x56101f1f6b70 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x56101f1f6bd0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x56101f1f6c70 <col:15, col:51>
|   |   `-TextComment 0x56101f1f6c40 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x56101f1f6cc0 <line:2993:3>
|   | `-TextComment 0x56101f1f6c90 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f6ce0 <col:4, line:2994:3> Name="return"
|   | `-ParagraphComment 0x56101f1f6d60 <line:2993:11, line:2994:3>
|   |   |-TextComment 0x56101f1f6d10 <line:2993:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1f6d30 <line:2994:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f6d80 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x56101f1f6df0 <line:2995:1>
|     `-TextComment 0x56101f1f6dc0 <col:1> Text=" "
|-FunctionDecl 0x56101f047678 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x56101f047480 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x56101f0474f0 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x56101f047560 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f0475d8 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x56101f1f7670 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x56101f1f6f10 <line:3001:3>
|   | `-TextComment 0x56101f1f6ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f6f30 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x56101f1f6f90 <col:10, col:40>
|   |   `-TextComment 0x56101f1f6f60 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x56101f1f7080 <line:3003:3, line:3007:21>
|   | |-TextComment 0x56101f1f6fb0 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x56101f1f6fd0 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x56101f1f6ff0 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x56101f1f7010 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x56101f1f7030 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x56101f1f70d0 <line:3009:3>
|   | `-TextComment 0x56101f1f70a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f70f0 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f71a0 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x56101f1f7150 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x56101f1f7170 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x56101f1f71c0 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f72a0 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x56101f1f7220 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x56101f1f7240 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x56101f1f7260 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x56101f1f72c0 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x56101f1f73c0 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x56101f1f7320 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x56101f1f7340 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x56101f1f7360 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x56101f1f7380 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x56101f1f73e0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x56101f1f7470 <col:15, col:51>
|   |   `-TextComment 0x56101f1f7440 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x56101f1f74c0 <line:3017:3>
|   | `-TextComment 0x56101f1f7490 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f74e0 <col:4, line:3018:3> Name="return"
|   | `-ParagraphComment 0x56101f1f7560 <line:3017:11, line:3018:3>
|   |   |-TextComment 0x56101f1f7510 <line:3017:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1f7530 <line:3018:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f7580 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x56101f1f75f0 <line:3019:1>
|     `-TextComment 0x56101f1f75c0 <col:1> Text=" "
|-FunctionDecl 0x56101f0479a0 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x56101f047820 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x56101f047890 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x56101f1f7bc0 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x56101f1f7710 <line:3025:3>
|   | `-TextComment 0x56101f1f76e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f7730 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x56101f1f7790 <col:10, col:41>
|   |   `-TextComment 0x56101f1f7760 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x56101f1f7800 <line:3027:3, line:3028:17>
|   | |-TextComment 0x56101f1f77b0 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x56101f1f77d0 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x56101f1f7850 <line:3030:3>
|   | `-TextComment 0x56101f1f7820 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f7870 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f7920 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x56101f1f78d0 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x56101f1f78f0 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x56101f1f7940 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f79d0 <col:18, col:70>
|   |   `-TextComment 0x56101f1f79a0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x56101f1f7a20 <line:3033:3>
|   | `-TextComment 0x56101f1f79f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f7a40 <col:4, line:3034:3> Name="return"
|   | `-ParagraphComment 0x56101f1f7ac0 <line:3033:11, line:3034:3>
|   |   |-TextComment 0x56101f1f7a70 <line:3033:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1f7a90 <line:3034:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f7ae0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x56101f1f7b50 <line:3035:1>
|     `-TextComment 0x56101f1f7b20 <col:1> Text=" "
|-FunctionDecl 0x56101f047cd8 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x56101f047aa0 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x56101f047b28 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x56101f047b98 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x56101f1f87c0 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x56101f1f7c60 <line:3040:3>
|   | `-TextComment 0x56101f1f7c30 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f7c80 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x56101f1f7ce0 <col:10, col:37>
|   |   `-TextComment 0x56101f1f7cb0 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x56101f1f7f50 <line:3042:3, line:3046:37>
|   | |-TextComment 0x56101f1f7d00 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x56101f1f7d50 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x56101f1f7d70 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x56101f1f7d90 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f7de0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x56101f1f7e00 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x56101f1f7e50 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x56101f1f7e70 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x56101f1f7e90 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x56101f1f7eb0 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x56101f1f7ed0 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x56101f1f8060 <line:3048:3, line:3053:28>
|   | |-TextComment 0x56101f1f7f70 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x56101f1f7f90 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x56101f1f7fb0 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x56101f1f7fd0 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x56101f1f7ff0 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x56101f1f8010 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x56101f1f80b0 <line:3055:3>
|   | `-TextComment 0x56101f1f8080 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f80d0 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x56101f1f8150 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x56101f1f8100 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x56101f1f8120 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x56101f1f81a0 <line:3059:3>
|   | `-TextComment 0x56101f1f8170 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f81c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1f8220 <col:9, col:31>
|   |   `-TextComment 0x56101f1f81f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1f8270 <line:3061:3>
|   | `-TextComment 0x56101f1f8240 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f8290 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f8340 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x56101f1f82f0 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x56101f1f8310 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x56101f1f8360 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f8410 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x56101f1f83c0 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x56101f1f83e0 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x56101f1f8430 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x56101f1f84e0 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x56101f1f8490 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x56101f1f84b0 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x56101f1f8690 <line:3066:3, line:3069:3>
|   | |-TextComment 0x56101f1f8500 <line:3066:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f8520 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f8540 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x56101f1f8560 <line:3067:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f8580 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f85a0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x56101f1f85c0 <line:3068:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f85e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f8600 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x56101f1f8620 <line:3069:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f86b0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x56101f1f8720 <line:3070:1>
|     `-TextComment 0x56101f1f86f0 <col:1> Text=" "
|-FunctionDecl 0x56101f158ee8 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x56101f158de0 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x56101f1f8f30 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x56101f1f8860 <line:3076:3>
|   | `-TextComment 0x56101f1f8830 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f8880 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x56101f1f88e0 <col:10, col:37>
|   |   `-TextComment 0x56101f1f88b0 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x56101f1f89d0 <line:3078:3, line:3080:12>
|   | |-TextComment 0x56101f1f8900 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x56101f1f8950 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x56101f1f8970 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x56101f1f8990 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x56101f1f8a20 <line:3082:3>
|   | `-TextComment 0x56101f1f89f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f8a40 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1f8aa0 <col:9, col:31>
|   |   `-TextComment 0x56101f1f8a70 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1f8af0 <line:3084:3>
|   | `-TextComment 0x56101f1f8ac0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f8b10 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x56101f1f8bc0 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x56101f1f8b40 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x56101f1f8b60 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x56101f1f8b80 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x56101f1f8c10 <line:3088:3>
|   | `-TextComment 0x56101f1f8be0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f8c50 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f8ce0 <col:15, col:44>
|   |   `-TextComment 0x56101f1f8cb0 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x56101f1f8e20 <line:3090:3, line:3092:3>
|   | |-TextComment 0x56101f1f8d00 <line:3090:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f8d20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f8d40 <col:11, col:42> Text=" 0 Work item countdown canceled."
|   | |-TextComment 0x56101f1f8d60 <line:3091:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f8d80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f8da0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | `-TextComment 0x56101f1f8dc0 <line:3092:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f8e40 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x56101f1f8eb0 <line:3093:1>
|     `-TextComment 0x56101f1f8e80 <col:1> Text=" "
|-FunctionDecl 0x56101f159068 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x56101f158fe0 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x56101f159298 <line:3119:1, line:3121:1>
| | `-CallExpr 0x56101f159220 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x56101f159208 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x56101f159110 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x56101f045e30 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x56101f159160 <col:25, col:26> 'struct k_work_q *' prefix '&'
| |   | `-DeclRefExpr 0x56101f159138 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x56101f044d98 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x56101f159258 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f159180 <col:40> 'struct k_work *' lvalue ParmVar 0x56101f158fe0 'work' 'struct k_work *'
| `-FullComment 0x56101f1f96e0 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x56101f1f8fd0 <line:3097:3>
|   | `-TextComment 0x56101f1f8fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f8ff0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x56101f1f9050 <col:10, col:53>
|   |   `-TextComment 0x56101f1f9020 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x56101f1f91e0 <line:3099:3, line:3104:15>
|   | |-TextComment 0x56101f1f9070 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x56101f1f90c0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x56101f1f90e0 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x56101f1f9100 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x56101f1f9120 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x56101f1f9140 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x56101f1f9160 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x56101f1f9180 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x56101f1f9230 <line:3106:3>
|   | `-TextComment 0x56101f1f9200 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f9250 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x56101f1f9300 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x56101f1f9280 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x56101f1f92a0 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x56101f1f92c0 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x56101f1f9350 <line:3111:3>
|   | `-TextComment 0x56101f1f9320 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f9370 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1f93d0 <col:9, col:31>
|   |   `-TextComment 0x56101f1f93a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1f9420 <line:3113:3>
|   | `-TextComment 0x56101f1f93f0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f9440 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f94d0 <col:15, col:36>
|   |   `-TextComment 0x56101f1f94a0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x56101f1f9520 <line:3115:3>
|   | `-TextComment 0x56101f1f94f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f9540 <col:4, line:3116:3> Name="return"
|   | `-ParagraphComment 0x56101f1f95c0 <line:3115:11, line:3116:3>
|   |   |-TextComment 0x56101f1f9570 <line:3115:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1f9590 <line:3116:3> Text=" "
|   |-VerbatimLineComment 0x56101f1f95e0 <col:4, col:19> Text=" K-WORK-001"
|   `-ParagraphComment 0x56101f1f9650 <line:3117:1>
|     `-TextComment 0x56101f1f9620 <col:1> Text=" "
|-FunctionDecl 0x56101f159468 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x56101f1592d8 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x56101f159348 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x56101f159708 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x56101f1596c0 <line:3159:2, col:66>
| |   `-CallExpr 0x56101f159650 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x56101f159638 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f159518 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x56101f047cd8 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x56101f159568 <col:40, col:41> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x56101f159540 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x56101f044d98 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x56101f159690 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f159588 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x56101f1592d8 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x56101f1596a8 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x56101f1595b0 <col:61> 's32_t':'int' lvalue ParmVar 0x56101f159348 'delay' 's32_t':'int'
| `-FullComment 0x56101f1fa1e0 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x56101f1f9780 <line:3124:3>
|   | `-TextComment 0x56101f1f9750 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f97a0 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x56101f1f9800 <col:10, col:61>
|   |   `-TextComment 0x56101f1f97d0 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x56101f1f99f0 <line:3126:3, line:3130:37>
|   | |-TextComment 0x56101f1f9820 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x56101f1f9870 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x56101f1f9890 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x56101f1f98b0 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x56101f1f9900 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x56101f1f9920 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x56101f1f9940 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x56101f1f9960 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x56101f1f9980 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x56101f1f9b30 <line:3132:3, line:3138:72>
|   | |-TextComment 0x56101f1f9a10 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x56101f1f9a30 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x56101f1f9a50 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x56101f1f9a70 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x56101f1f9a90 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x56101f1f9ab0 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x56101f1f9ad0 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x56101f1f9b80 <line:3140:3>
|   | `-TextComment 0x56101f1f9b50 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f9ba0 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x56101f1f9c50 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x56101f1f9bd0 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x56101f1f9bf0 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x56101f1f9c10 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x56101f1f9ca0 <line:3145:3>
|   | `-TextComment 0x56101f1f9c70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1f9cc0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1f9d20 <col:9, col:31>
|   |   `-TextComment 0x56101f1f9cf0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1f9d70 <line:3147:3>
|   | `-TextComment 0x56101f1f9d40 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1f9d90 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1f9e40 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x56101f1f9df0 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x56101f1f9e10 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x56101f1f9e60 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x56101f1f9f10 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x56101f1f9ec0 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x56101f1f9ee0 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x56101f1fa0c0 <line:3151:3, line:3154:3>
|   | |-TextComment 0x56101f1f9f30 <line:3151:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f9f50 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f9f70 <col:11, col:41> Text=" 0 Work item countdown started."
|   | |-TextComment 0x56101f1f9f90 <line:3152:3> Text=" "
|   | |-InlineCommandComment 0x56101f1f9fb0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1f9fd0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   | |-TextComment 0x56101f1f9ff0 <line:3153:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fa010 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1fa030 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|   | `-TextComment 0x56101f1fa050 <line:3154:3> Text=" "
|   |-VerbatimLineComment 0x56101f1fa0e0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x56101f1fa150 <line:3155:1>
|     `-TextComment 0x56101f1fa120 <col:1> Text=" "
|-FunctionDecl 0x56101f159810 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x56101f159748 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x56101f159aa8 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x56101f159a60 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x56101f159a48 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x56101f159a00 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x56101f1599e8 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x56101f1598b8 <col:9> 'u64_t (u64_t)' Function 0x56101f10c470 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x56101f159a30 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x56101f1599b8 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x56101f1599a0 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x56101f1598e0 <col:31> 's32_t (struct _timeout *)' Function 0x56101f13c3f0 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x56101f159980 <col:51, col:58> 'struct _timeout *' prefix '&'
| |             `-MemberExpr 0x56101f159948 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x56101f044868
| |               `-ImplicitCastExpr 0x56101f159930 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x56101f159908 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x56101f159748 'work' 'struct k_delayed_work *'
| `-FullComment 0x56101f1fa690 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x56101f1fa280 <line:3163:3>
|   | `-TextComment 0x56101f1fa250 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fa2a0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x56101f1fa300 <col:10, col:66>
|   |   `-TextComment 0x56101f1fa2d0 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x56101f1fa3a0 <line:3165:3, line:3167:30>
|   | |-TextComment 0x56101f1fa320 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x56101f1fa340 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x56101f1fa360 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x56101f1fa3f0 <line:3169:3>
|   | `-TextComment 0x56101f1fa3c0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1fa410 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fa4a0 <col:15, col:37>
|   |   `-TextComment 0x56101f1fa470 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x56101f1fa4f0 <line:3171:3>
|   | `-TextComment 0x56101f1fa4c0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fa510 <col:4, line:3172:3> Name="return"
|   | `-ParagraphComment 0x56101f1fa590 <line:3171:11, line:3172:3>
|   |   |-TextComment 0x56101f1fa540 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|   |   `-TextComment 0x56101f1fa560 <line:3172:3> Text=" "
|   |-VerbatimLineComment 0x56101f1fa5b0 <col:4, col:20> Text=" K-DWORK-001"
|   `-ParagraphComment 0x56101f1fa620 <line:3173:1>
|     `-TextComment 0x56101f1fa5f0 <col:1> Text=" "
|-FunctionDecl 0x56101f159cf0 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x56101f159b70 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x56101f159be0 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x56101f1fab20 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x56101f1fa730 <line:3180:3>
|   | `-TextComment 0x56101f1fa700 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fa750 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f1fa7b0 <col:10, col:43>
|   |   `-TextComment 0x56101f1fa780 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x56101f1fa820 <line:3182:3, line:3183:17>
|   | |-TextComment 0x56101f1fa7d0 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x56101f1fa7f0 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x56101f1fa870 <line:3185:3>
|   | `-TextComment 0x56101f1fa840 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1fa890 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fa940 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x56101f1fa8f0 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x56101f1fa910 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x56101f1fa960 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x56101f1fa9f0 <col:18, col:70>
|   |   `-TextComment 0x56101f1fa9c0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x56101f1faa40 <line:3188:3>
|   | `-TextComment 0x56101f1faa10 <col:3> Text=" "
|   `-BlockCommandComment 0x56101f1faa60 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x56101f1faac0 <col:11, col:14>
|       `-TextComment 0x56101f1faa90 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x56101f15a178 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x56101f159e18 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x56101f159ea0 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x56101f159f28 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x56101f159fa0 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x56101f15a010 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x56101f1fb840 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x56101f1fabc0 <line:3194:3>
|   | `-TextComment 0x56101f1fab90 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fabe0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1fac60 <col:10, col:39>
|   |   `-TextComment 0x56101f1fac10 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x56101f1faed0 <line:3196:3, line:3200:50>
|   | |-TextComment 0x56101f1fac80 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x56101f1facd0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x56101f1facf0 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x56101f1fad10 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fad60 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x56101f1fad80 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x56101f1fadd0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x56101f1fadf0 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x56101f1fae10 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x56101f1fae30 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x56101f1fae50 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x56101f1fafc0 <line:3202:3, line:3206:70>
|   | |-TextComment 0x56101f1faef0 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x56101f1faf10 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x56101f1faf30 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x56101f1faf50 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x56101f1faf70 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x56101f1fb010 <line:3208:3>
|   | `-TextComment 0x56101f1fafe0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fb030 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1fb090 <col:9, col:31>
|   |   `-TextComment 0x56101f1fb060 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1fb0e0 <line:3210:3>
|   | `-TextComment 0x56101f1fb0b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fb100 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x56101f1fb1b0 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x56101f1fb130 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x56101f1fb150 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x56101f1fb170 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x56101f1fb200 <line:3215:3>
|   | `-TextComment 0x56101f1fb1d0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1fb220 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fb2d0 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x56101f1fb280 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x56101f1fb2a0 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x56101f1fb2f0 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x56101f1fb3a0 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x56101f1fb350 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x56101f1fb370 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x56101f1fb3c0 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x56101f1fb470 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x56101f1fb420 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x56101f1fb440 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x56101f1fb490 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x56101f1fb540 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x56101f1fb4f0 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x56101f1fb510 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x56101f1fb560 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x56101f1fb610 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x56101f1fb5c0 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x56101f1fb5e0 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x56101f1fb7a0 <line:3223:3, line:3225:69>
|     |-TextComment 0x56101f1fb630 <line:3223:3> Text=" "
|     |-InlineCommandComment 0x56101f1fb650 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f1fb670 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x56101f1fb690 <line:3224:3> Text=" "
|     |-InlineCommandComment 0x56101f1fb6b0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f1fb6d0 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x56101f1fb6f0 <line:3225:3> Text=" "
|     |-InlineCommandComment 0x56101f1fb710 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x56101f1fb730 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x56101f15a548 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x56101f15a290 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x56101f15a318 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x56101f15a390 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x56101f15a400 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x56101f15a888 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x56101f15a840 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x56101f15a790 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x56101f15a778 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f15a608 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x56101f15a178 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x56101f15a658 <col:37, col:38> 'struct k_work_q *' prefix '&'
| |     | `-DeclRefExpr 0x56101f15a630 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x56101f044d98 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x56101f15a7e0 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f15a678 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x56101f15a290 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x56101f15a7f8 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f15a6a0 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x56101f15a318 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x56101f15a810 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x56101f15a6c8 <col:15> 'int' lvalue ParmVar 0x56101f15a390 'num_events' 'int'
| |     `-ImplicitCastExpr 0x56101f15a828 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x56101f15a6f0 <col:27> 's32_t':'int' lvalue ParmVar 0x56101f15a400 'timeout' 's32_t':'int'
| `-FullComment 0x56101f1fc3b0 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x56101f1fb8e0 <line:3234:3>
|   | `-TextComment 0x56101f1fb8b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fb900 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x56101f1fb960 <col:10, col:63>
|   |   `-TextComment 0x56101f1fb930 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x56101f1fbb50 <line:3236:3, line:3240:50>
|   | |-TextComment 0x56101f1fb980 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x56101f1fb9d0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x56101f1fb9f0 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x56101f1fba10 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x56101f1fba60 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x56101f1fba80 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x56101f1fbaa0 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x56101f1fbac0 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x56101f1fbae0 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x56101f1fbc40 <line:3242:3, line:3246:70>
|   | |-TextComment 0x56101f1fbb70 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x56101f1fbb90 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x56101f1fbbb0 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x56101f1fbbd0 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x56101f1fbbf0 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x56101f1fbc90 <line:3248:3>
|   | `-TextComment 0x56101f1fbc60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fbcb0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1fbd10 <col:9, col:31>
|   |   `-TextComment 0x56101f1fbce0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1fbd60 <line:3250:3>
|   | `-TextComment 0x56101f1fbd30 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fbd80 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x56101f1fbe00 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x56101f1fbdb0 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x56101f1fbdd0 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x56101f1fbe50 <line:3254:3>
|   | `-TextComment 0x56101f1fbe20 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1fbe70 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fbf20 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x56101f1fbed0 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x56101f1fbef0 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x56101f1fbf40 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x56101f1fbff0 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x56101f1fbfa0 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x56101f1fbfc0 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x56101f1fc010 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x56101f1fc0c0 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x56101f1fc070 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x56101f1fc090 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x56101f1fc0e0 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x56101f1fc190 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x56101f1fc140 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x56101f1fc160 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   `-ParagraphComment 0x56101f1fc320 <line:3260:3, line:3262:69>
|     |-TextComment 0x56101f1fc1b0 <line:3260:3> Text=" "
|     |-InlineCommandComment 0x56101f1fc1d0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f1fc1f0 <col:11, col:51> Text=" 0 Work item started watching for events."
|     |-TextComment 0x56101f1fc210 <line:3261:3> Text=" "
|     |-InlineCommandComment 0x56101f1fc230 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f1fc250 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|     |-TextComment 0x56101f1fc270 <line:3262:3> Text=" "
|     |-InlineCommandComment 0x56101f1fc290 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x56101f1fc2b0 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x56101f15a9d8 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x56101f15a8c8 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x56101f1fc900 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x56101f1fc450 <line:3274:3>
|   | `-TextComment 0x56101f1fc420 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fc470 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f1fc4d0 <col:10, col:39>
|   |   `-TextComment 0x56101f1fc4a0 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x56101f1fc5c0 <line:3276:3, line:3278:14>
|   | |-TextComment 0x56101f1fc4f0 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x56101f1fc540 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x56101f1fc560 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x56101f1fc580 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x56101f1fc610 <line:3280:3>
|   | `-TextComment 0x56101f1fc5e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fc630 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1fc690 <col:9, col:31>
|   |   `-TextComment 0x56101f1fc660 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1fc6e0 <line:3282:3>
|   | `-TextComment 0x56101f1fc6b0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1fc700 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fc790 <col:15, col:44>
|   |   `-TextComment 0x56101f1fc760 <col:15, col:44> Text=" Address of delayed work item."
|   `-ParagraphComment 0x56101f1fc8a0 <line:3284:3, line:3285:74>
|     |-TextComment 0x56101f1fc7b0 <line:3284:3> Text=" "
|     |-InlineCommandComment 0x56101f1fc7d0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f1fc7f0 <col:11, col:32> Text=" 0 Work item canceled."
|     |-TextComment 0x56101f1fc810 <line:3285:3> Text=" "
|     |-InlineCommandComment 0x56101f1fc830 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x56101f1fc850 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x56101f15aad8 prev 0x56101f126e78 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x56101f1fca90 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x56101f1fc9c0 <line:3297:3, line:3298:3>
| | | |-TextComment 0x56101f1fc970 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x56101f1fc990 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x56101f1fc9e0 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x56101f1fca50 <line:3299:1>
| |   `-TextComment 0x56101f1fca20 <col:1> Text=" "
| |-FieldDecl 0x56101f15ab98 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x56101f1fcb60 <line:3301:5, col:22>
| |   `-ParagraphComment 0x56101f1fcb30 <col:5, col:22>
| |     `-TextComment 0x56101f1fcb00 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x56101f15ac30 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x56101f1fcc30 <line:3303:5, col:17>
| |   `-ParagraphComment 0x56101f1fcc00 <col:5, col:17>
| |     `-TextComment 0x56101f1fcbd0 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x56101f15acb8 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x56101f1fcd10 <line:3306:5, col:24>
| |   `-ParagraphComment 0x56101f1fcce0 <col:5, col:24>
| |     `-TextComment 0x56101f1fccb0 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x56101f15ad40 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x56101f1fcde0 <line:3309:5, col:30>
|     `-ParagraphComment 0x56101f1fcdb0 <col:5, col:30>
|       `-TextComment 0x56101f1fcd80 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x56101f15b018 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x56101f15af10 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x56101f1fd290 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x56101f1fce80 <line:3349:3>
|   | `-TextComment 0x56101f1fce50 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fcea0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x56101f1fcf00 <col:10, col:29>
|   |   `-TextComment 0x56101f1fced0 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x56101f1fcf50 <line:3351:3, col:67>
|   | `-TextComment 0x56101f1fcf20 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x56101f1fcfa0 <line:3353:3, col:70>
|   | `-TextComment 0x56101f1fcf70 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x56101f1fcff0 <line:3355:3>
|   | `-TextComment 0x56101f1fcfc0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1fd010 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fd0a0 <col:16, col:37>
|   |   `-TextComment 0x56101f1fd070 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x56101f1fd140 <line:3357:3, col:33>
|   | |-TextComment 0x56101f1fd0c0 <col:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fd0e0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x56101f1fd100 <col:11, col:33> Text=" 0 Mutex object created"
|   |-ParagraphComment 0x56101f1fd190 <line:3359:3>
|   | `-TextComment 0x56101f1fd160 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1fd1b0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x56101f1fd220 <line:3360:1>
|     `-TextComment 0x56101f1fd1f0 <col:1> Text=" "
|-FunctionDecl 0x56101f15b298 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x56101f15b110 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x56101f15b180 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x56101f1fda10 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x56101f1fd330 <line:3365:3>
|   | `-TextComment 0x56101f1fd300 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fd350 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x56101f1fd3b0 <col:10, col:23>
|   |   `-TextComment 0x56101f1fd380 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x56101f1fd4d0 <line:3367:3, line:3369:20>
|   | |-TextComment 0x56101f1fd3d0 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x56101f1fd420 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x56101f1fd440 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x56101f1fd460 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x56101f1fd480 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x56101f1fd540 <line:3371:3, line:3372:62>
|   | |-TextComment 0x56101f1fd4f0 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x56101f1fd510 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x56101f1fd590 <line:3374:3>
|   | `-TextComment 0x56101f1fd560 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1fd5b0 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fd660 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x56101f1fd610 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x56101f1fd630 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x56101f1fd680 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x56101f1fd760 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x56101f1fd6e0 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x56101f1fd700 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x56101f1fd720 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x56101f1fd910 <line:3379:3, line:3382:3>
|   | |-TextComment 0x56101f1fd780 <line:3379:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fd7a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1fd7c0 <col:11, col:26> Text=" 0 Mutex locked."
|   | |-TextComment 0x56101f1fd7e0 <line:3380:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fd800 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1fd820 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x56101f1fd840 <line:3381:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fd860 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1fd880 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x56101f1fd8a0 <line:3382:3> Text=" "
|   |-VerbatimLineComment 0x56101f1fd930 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x56101f1fd9a0 <line:3383:1>
|     `-TextComment 0x56101f1fd970 <col:1> Text=" "
|-FunctionDecl 0x56101f15b430 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x56101f15b3a0 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x56101f1fe0a0 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x56101f1fdab0 <line:3387:3>
|   | `-TextComment 0x56101f1fda80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fdad0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x56101f1fdb30 <col:10, col:25>
|   |   `-TextComment 0x56101f1fdb00 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x56101f1fdc20 <line:3389:3, line:3390:18>
|   | |-TextComment 0x56101f1fdb50 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x56101f1fdba0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x56101f1fdbc0 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x56101f1fdbe0 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x56101f1fdcc0 <line:3392:3, line:3394:10>
|   | |-TextComment 0x56101f1fdc40 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x56101f1fdc60 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x56101f1fdc80 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x56101f1fdd10 <line:3396:3>
|   | `-TextComment 0x56101f1fdce0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1fdd30 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fddc0 <col:16, col:37>
|   |   `-TextComment 0x56101f1fdd90 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x56101f1fdf50 <line:3398:3, line:3400:42>
|   | |-TextComment 0x56101f1fdde0 <line:3398:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fde00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1fde20 <col:11, col:28> Text=" 0 Mutex unlocked."
|   | |-TextComment 0x56101f1fde40 <line:3399:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fde60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1fde80 <col:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   | |-TextComment 0x56101f1fdea0 <line:3400:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fdec0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x56101f1fdee0 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   |-ParagraphComment 0x56101f1fdfa0 <line:3402:3>
|   | `-TextComment 0x56101f1fdf70 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1fdfc0 <col:4, col:20> Text=" K-MUTEX-002"
|   `-ParagraphComment 0x56101f1fe030 <line:3403:1>
|     `-TextComment 0x56101f1fe000 <col:1> Text=" "
|-RecordDecl 0x56101f15b538 prev 0x56101f126f20 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x56101f1fe1c0 <line:3411:3, col:24>
| | `-ParagraphComment 0x56101f1fe190 <col:3, col:24>
| |   |-TextComment 0x56101f1fe110 <col:3> Text=" "
| |   |-InlineCommandComment 0x56101f1fe130 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x56101f1fe150 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x56101f15b5d0 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x56101f15b628 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x56101f15b680 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x56101f15ba38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x56101f15b810 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x56101f15b888 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x56101f15b900 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x56101f1fe840 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x56101f1fe260 <line:3446:3>
|   | `-TextComment 0x56101f1fe230 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fe280 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x56101f1fe2e0 <col:10, col:33>
|   |   `-TextComment 0x56101f1fe2b0 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x56101f1fe330 <line:3448:3, col:71>
|   | `-TextComment 0x56101f1fe300 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x56101f1fe380 <line:3450:3>
|   | `-TextComment 0x56101f1fe350 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1fe3a0 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fe450 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x56101f1fe400 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x56101f1fe420 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x56101f1fe470 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x56101f1fe520 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x56101f1fe4d0 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x56101f1fe4f0 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x56101f1fe540 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x56101f1fe5d0 <col:16, col:50>
|   |   `-TextComment 0x56101f1fe5a0 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x56101f1fe6e0 <line:3454:3, line:3455:33>
|   | |-TextComment 0x56101f1fe5f0 <line:3454:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fe610 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1fe630 <col:11, col:43> Text=" 0 Semaphore created successfully"
|   | |-TextComment 0x56101f1fe650 <line:3455:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fe670 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x56101f1fe690 <col:11, col:33> Text=" -EINVAL Invalid values"
|   |-ParagraphComment 0x56101f1fe730 <line:3457:3>
|   | `-TextComment 0x56101f1fe700 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f1fe750 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x56101f1fe7c0 <line:3458:1>
|     `-TextComment 0x56101f1fe790 <col:1> Text=" "
|-FunctionDecl 0x56101f15bcc8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x56101f15bb40 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x56101f15bbb0 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x56101f1ff040 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x56101f1fe8e0 <line:3463:3>
|   | `-TextComment 0x56101f1fe8b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fe900 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x56101f1fe960 <col:10, col:27>
|   |   `-TextComment 0x56101f1fe930 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x56101f1fea00 <line:3465:3, col:24>
|   | |-TextComment 0x56101f1fe980 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x56101f1fe9d0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x56101f1fea50 <line:3467:3>
|   | `-TextComment 0x56101f1fea20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fea70 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x56101f1feb50 <col:9, col:72>
|   |   |-TextComment 0x56101f1feaa0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x56101f1feaf0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x56101f1feb10 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x56101f1feba0 <line:3469:3>
|   | `-TextComment 0x56101f1feb70 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1febc0 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x56101f1fec80 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x56101f1fec20 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x56101f1fec40 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x56101f1feca0 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x56101f1fed80 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x56101f1fed00 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x56101f1fed20 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x56101f1fed40 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x56101f1fef30 <line:3474:3, line:3477:3>
|   | |-TextComment 0x56101f1feda0 <line:3474:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fedc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1fede0 <col:11, col:29> Text=" 0 Semaphore taken."
|   | |-TextComment 0x56101f1fee00 <line:3475:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fee20 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1fee40 <col:11, col:43> Text=" -EBUSY Returned without waiting."
|   | |-TextComment 0x56101f1fee60 <line:3476:3> Text=" "
|   | |-InlineCommandComment 0x56101f1fee80 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f1feea0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x56101f1feec0 <line:3477:3> Text=" "
|   |-VerbatimLineComment 0x56101f1fef50 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x56101f1fefc0 <line:3478:1>
|     `-TextComment 0x56101f1fef90 <col:1> Text=" "
|-FunctionDecl 0x56101f15cf20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x56101f15ce20 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x56101f1ff620 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x56101f1ff0e0 <line:3482:3>
|   | `-TextComment 0x56101f1ff0b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ff100 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x56101f1ff160 <col:10, col:27>
|   |   `-TextComment 0x56101f1ff130 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x56101f1ff250 <line:3484:3, line:3485:19>
|   | |-TextComment 0x56101f1ff180 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x56101f1ff1d0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x56101f1ff1f0 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x56101f1ff210 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x56101f1ff2a0 <line:3487:3>
|   | `-TextComment 0x56101f1ff270 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ff2c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f1ff320 <col:9, col:31>
|   |   `-TextComment 0x56101f1ff2f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f1ff370 <line:3489:3>
|   | `-TextComment 0x56101f1ff340 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ff390 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ff420 <col:14, col:39>
|   |   `-TextComment 0x56101f1ff3f0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x56101f1ff470 <line:3491:3>
|   | `-TextComment 0x56101f1ff440 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ff490 <col:4, line:3492:3> Name="return"
|   | `-ParagraphComment 0x56101f1ff510 <line:3491:11, line:3492:3>
|   |   |-TextComment 0x56101f1ff4c0 <line:3491:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1ff4e0 <line:3492:3> Text=" "
|   |-VerbatimLineComment 0x56101f1ff530 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x56101f1ff5a0 <line:3493:1>
|     `-TextComment 0x56101f1ff570 <col:1> Text=" "
|-FunctionDecl 0x56101f15d0a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x56101f15d020 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x56101f1ffb00 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x56101f1ff6c0 <line:3497:3>
|   | `-TextComment 0x56101f1ff690 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ff6e0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f1ff740 <col:10, col:44>
|   |   `-TextComment 0x56101f1ff710 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x56101f1ff810 <line:3499:3, col:49>
|   | |-TextComment 0x56101f1ff760 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x56101f1ff7b0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x56101f1ff7d0 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x56101f1ff860 <line:3501:3>
|   | `-TextComment 0x56101f1ff830 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ff880 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ff910 <col:14, col:39>
|   |   `-TextComment 0x56101f1ff8e0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x56101f1ff960 <line:3503:3>
|   | `-TextComment 0x56101f1ff930 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ff980 <col:4, line:3504:3> Name="return"
|   | `-ParagraphComment 0x56101f1ffa00 <line:3503:11, line:3504:3>
|   |   |-TextComment 0x56101f1ff9b0 <line:3503:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f1ff9d0 <line:3504:3> Text=" "
|   |-VerbatimLineComment 0x56101f1ffa20 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x56101f1ffa90 <line:3505:1>
|     `-TextComment 0x56101f1ffa60 <col:1> Text=" "
|-FunctionDecl 0x56101f15d228 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x56101f15d1a0 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x56101f15d3b8 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x56101f15d368 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x56101f15d310 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x56101f15b628
| |   | `-ImplicitCastExpr 0x56101f15d2f8 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56101f15d2d0 <col:2> 'struct k_sem *' lvalue ParmVar 0x56101f15d1a0 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x56101f15d348 <col:15> 'unsigned int' 0
| `-FullComment 0x56101f1ffbf0 <line:3509:3, col:12>
|   `-ParagraphComment 0x56101f1ffbc0 <col:3, col:12>
|     |-TextComment 0x56101f1ffb70 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f1ffb90 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f15d508 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x56101f15d3f8 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x56101f2000a0 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x56101f1ffc90 <line:3517:3>
|   | `-TextComment 0x56101f1ffc60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1ffcb0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x56101f1ffd10 <col:10, col:34>
|   |   `-TextComment 0x56101f1ffce0 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x56101f1ffdb0 <line:3519:3, col:47>
|   | |-TextComment 0x56101f1ffd30 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x56101f1ffd80 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x56101f1ffe00 <line:3521:3>
|   | `-TextComment 0x56101f1ffdd0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f1ffe20 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x56101f1ffeb0 <col:14, col:39>
|   |   `-TextComment 0x56101f1ffe80 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x56101f1fff00 <line:3523:3>
|   | `-TextComment 0x56101f1ffed0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f1fff20 <col:4, line:3524:3> Name="return"
|   | `-ParagraphComment 0x56101f1fffa0 <line:3523:11, line:3524:3>
|   |   |-TextComment 0x56101f1fff50 <line:3523:11, col:35> Text=" Current semaphore count."
|   |   `-TextComment 0x56101f1fff70 <line:3524:3> Text=" "
|   |-VerbatimLineComment 0x56101f1fffc0 <col:4, col:18> Text=" K-SEM-001"
|   `-ParagraphComment 0x56101f200030 <line:3525:1>
|     `-TextComment 0x56101f200000 <col:1> Text=" "
|-FunctionDecl 0x56101f15d690 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x56101f15d600 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x56101f15d898 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x56101f15d7c8 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x56101f15d7b0 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x56101f15d778 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x56101f15b628
| |       `-ImplicitCastExpr 0x56101f15d760 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f15d738 <col:9> 'struct k_sem *' lvalue ParmVar 0x56101f15d600 'sem' 'struct k_sem *'
| `-FullComment 0x56101f200190 <line:3529:3, col:12>
|   `-ParagraphComment 0x56101f200160 <col:3, col:12>
|     |-TextComment 0x56101f200110 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f200130 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x56101f15d8b0 prev 0x56101f126fd0 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x56101f2002e0 <line:3563:3, col:33>
| | |-ParagraphComment 0x56101f200230 <col:3>
| | | `-TextComment 0x56101f200200 <col:3> Text=" "
| | `-BlockCommandComment 0x56101f200250 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x56101f2002b0 <col:10, col:33>
| |     `-TextComment 0x56101f200280 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x56101f15d978 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x56101f2003b0 <line:3566:5, col:30>
| |   `-ParagraphComment 0x56101f200380 <col:5, col:30>
| |     `-TextComment 0x56101f200350 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x56101f15da08 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x56101f200480 <line:3568:5, col:10>
| |   `-ParagraphComment 0x56101f200450 <col:5, col:10>
| |     `-TextComment 0x56101f200420 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x56101f15da88 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x56101f200550 <line:3570:5, col:18>
| |   `-ParagraphComment 0x56101f200520 <col:5, col:18>
| |     `-TextComment 0x56101f2004f0 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x56101f15db08 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x56101f200620 <line:3572:5, col:32>
| |   `-ParagraphComment 0x56101f2005f0 <col:5, col:32>
| |     `-TextComment 0x56101f2005c0 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x56101f15db90 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x56101f2006f0 <line:3574:5, col:29>
| |   `-ParagraphComment 0x56101f2006c0 <col:5, col:29>
| |     `-TextComment 0x56101f200690 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x56101f15dc20 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x56101f2007c0 <line:3576:5, col:27>
| |   `-ParagraphComment 0x56101f200790 <col:5, col:27>
| |     `-TextComment 0x56101f200760 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x56101f15dcb0 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x56101f200890 <line:3578:5, col:18>
| |   `-ParagraphComment 0x56101f200860 <col:5, col:18>
| |     `-TextComment 0x56101f200830 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x56101f15dd40 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x56101f200960 <line:3580:5, col:19>
| |   `-ParagraphComment 0x56101f200930 <col:5, col:19>
| |     `-TextComment 0x56101f200900 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x56101f15ddc8 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x56101f200a30 <line:3582:5, col:29>
| |   `-ParagraphComment 0x56101f200a00 <col:5, col:29>
| |     `-TextComment 0x56101f2009d0 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x56101f10d248 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x56101f200b00 <line:3588:5, col:19>
|     `-ParagraphComment 0x56101f200ad0 <col:5, col:19>
|       `-TextComment 0x56101f200aa0 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x56101f10d318 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x56101f200c50 <line:3617:3, col:34>
| | |-ParagraphComment 0x56101f200ba0 <col:3>
| | | `-TextComment 0x56101f200b70 <col:3> Text=" "
| | `-BlockCommandComment 0x56101f200bc0 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x56101f200c20 <col:10, col:34>
| |     `-TextComment 0x56101f200bf0 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x56101f10d3f8 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x56101f200d30 <line:3620:5, col:18>
| |   `-ParagraphComment 0x56101f200d00 <col:5, col:18>
| |     `-TextComment 0x56101f200cd0 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x56101f10d478 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x56101f200e00 <line:3622:5, col:32>
| |   `-ParagraphComment 0x56101f200dd0 <col:5, col:32>
| |     `-TextComment 0x56101f200da0 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x56101f10d4f8 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x56101f200ed0 <line:3624:5, col:19>
|     `-ParagraphComment 0x56101f200ea0 <col:5, col:19>
|       `-TextComment 0x56101f200e70 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x56101f10d8f0 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x56101f10d650 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x56101f10d6c8 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x56101f10d738 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f10d7a8 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x56101f201800 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x56101f200f70 <line:3658:3>
|   | `-TextComment 0x56101f200f40 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f200f90 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x56101f200ff0 <col:10, col:37>
|   |   `-TextComment 0x56101f200fc0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x56101f201040 <line:3660:3, col:75>
|   | `-TextComment 0x56101f201010 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x56101f201280 <line:3662:3, line:3666:32>
|   | |-TextComment 0x56101f201060 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x56101f2010b0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x56101f2010d0 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x56101f2010f0 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x56101f201140 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x56101f201160 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x56101f201180 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x56101f2011a0 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x56101f2011f0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x56101f201210 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x56101f2012d0 <line:3668:3>
|   | `-TextComment 0x56101f2012a0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f2012f0 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x56101f2013a0 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x56101f201350 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x56101f201370 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x56101f2013c0 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x56101f201470 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x56101f201420 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x56101f201440 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x56101f201490 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x56101f201540 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x56101f2014f0 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x56101f201510 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x56101f201560 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x56101f2015f0 <col:19, col:65>
|   |   `-TextComment 0x56101f2015c0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x56101f201640 <line:3673:3>
|   | `-TextComment 0x56101f201610 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f201660 <col:4, line:3674:3> Name="return"
|   | `-ParagraphComment 0x56101f2016e0 <line:3673:11, line:3674:3>
|   |   |-TextComment 0x56101f201690 <line:3673:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f2016b0 <line:3674:3> Text=" "
|   |-VerbatimLineComment 0x56101f201700 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x56101f201770 <line:3675:1>
|     `-TextComment 0x56101f201740 <col:1> Text=" "
|-FunctionDecl 0x56101f10dc18 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x56101f10da00 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f10da70 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f10dae0 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x56101f201f50 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x56101f2018a0 <line:3680:3>
|   | `-TextComment 0x56101f201870 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2018c0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x56101f201920 <col:10, col:37>
|   |   `-TextComment 0x56101f2018f0 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x56101f2019c0 <line:3682:3, line:3684:8>
|   | |-TextComment 0x56101f201940 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x56101f201960 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x56101f201980 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x56101f201a60 <line:3686:3, line:3688:25>
|   | |-TextComment 0x56101f2019e0 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x56101f201a00 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x56101f201a20 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x56101f201ab0 <line:3690:3>
|   | `-TextComment 0x56101f201a80 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f201ad0 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x56101f201b80 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x56101f201b30 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x56101f201b50 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x56101f201ba0 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x56101f201c50 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x56101f201c00 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x56101f201c20 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x56101f201c70 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x56101f201d00 <col:19, col:65>
|   |   `-TextComment 0x56101f201cd0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x56101f201d50 <line:3694:3>
|   | `-TextComment 0x56101f201d20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f201d70 <col:4, line:3697:3> Name="return"
|   | `-ParagraphComment 0x56101f201e40 <line:3694:11, line:3697:3>
|   |   |-TextComment 0x56101f201da0 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|   |   |-TextComment 0x56101f201dc0 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|   |   |-TextComment 0x56101f201de0 <line:3696:3, col:23> Text="	an integer overflow."
|   |   `-TextComment 0x56101f201e00 <line:3697:3> Text=" "
|   |-VerbatimLineComment 0x56101f201e60 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x56101f201ed0 <line:3698:1>
|     `-TextComment 0x56101f201ea0 <col:1> Text=" "
|-FunctionDecl 0x56101f10de28 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x56101f10dd20 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x56101f202320 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x56101f201ff0 <line:3703:3>
|   | `-TextComment 0x56101f201fc0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f202010 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x56101f202070 <col:10, col:46>
|   |   `-TextComment 0x56101f202040 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x56101f2020c0 <line:3705:3, col:49>
|   | `-TextComment 0x56101f202090 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x56101f202110 <line:3707:3>
|   | `-TextComment 0x56101f2020e0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f202130 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x56101f2021c0 <col:15, col:39>
|   |   `-TextComment 0x56101f202190 <col:15, col:39> Text=" message queue to cleanup"
|   `-ParagraphComment 0x56101f2022d0 <line:3709:3, line:3710:33>
|     |-TextComment 0x56101f2021e0 <line:3709:3> Text=" "
|     |-InlineCommandComment 0x56101f202200 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f202220 <col:11, col:23> Text=" 0 on success"
|     |-TextComment 0x56101f202240 <line:3710:3> Text=" "
|     |-InlineCommandComment 0x56101f202260 <col:4, col:10> Name="retval" RenderNormal
|     `-TextComment 0x56101f202280 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x56101f10e148 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x56101f10df20 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f10df98 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x56101f10e008 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x56101f202b60 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x56101f2023c0 <line:3715:3>
|   | `-TextComment 0x56101f202390 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2023e0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f202440 <col:10, col:44>
|   |   `-TextComment 0x56101f202410 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x56101f2024e0 <line:3717:3, col:51>
|   | |-TextComment 0x56101f202460 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x56101f2024b0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x56101f202530 <line:3719:3>
|   | `-TextComment 0x56101f202500 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f202550 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f2025b0 <col:9, col:31>
|   |   `-TextComment 0x56101f202580 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f202600 <line:3721:3>
|   | `-TextComment 0x56101f2025d0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f202620 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x56101f2026d0 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x56101f202680 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x56101f2026a0 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x56101f2026f0 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f2027a0 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x56101f202750 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x56101f202770 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x56101f2027c0 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x56101f2028a0 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x56101f202820 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x56101f202840 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x56101f202860 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x56101f202a50 <line:3727:3, line:3730:3>
|   | |-TextComment 0x56101f2028c0 <line:3727:3> Text=" "
|   | |-InlineCommandComment 0x56101f2028e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f202900 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x56101f202920 <line:3728:3> Text=" "
|   | |-InlineCommandComment 0x56101f202940 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f202960 <col:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   | |-TextComment 0x56101f202980 <line:3729:3> Text=" "
|   | |-InlineCommandComment 0x56101f2029a0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f2029c0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x56101f2029e0 <line:3730:3> Text=" "
|   |-VerbatimLineComment 0x56101f202a70 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x56101f202ae0 <line:3731:1>
|     `-TextComment 0x56101f202ab0 <col:1> Text=" "
|-FunctionDecl 0x56101f161898 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x56101f161710 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f161788 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x56101f1617f8 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x56101f203490 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x56101f202c00 <line:3735:3>
|   | `-TextComment 0x56101f202bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f202c20 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f202ca0 <col:10, col:49>
|   |   `-TextComment 0x56101f202c50 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x56101f202d90 <line:3737:3, line:3738:21>
|   | |-TextComment 0x56101f202cc0 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x56101f202d10 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x56101f202d30 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x56101f202d50 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x56101f202de0 <line:3740:3>
|   | `-TextComment 0x56101f202db0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f202e00 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x56101f202ee0 <col:9, col:72>
|   |   |-TextComment 0x56101f202e30 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x56101f202e80 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x56101f202ea0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x56101f202f30 <line:3742:3>
|   | `-TextComment 0x56101f202f00 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f202f50 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x56101f203000 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x56101f202fb0 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x56101f202fd0 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x56101f203020 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f2030d0 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x56101f203080 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x56101f2030a0 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x56101f2030f0 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x56101f2031d0 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x56101f203150 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x56101f203170 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x56101f203190 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x56101f203380 <line:3748:3, line:3751:3>
|   | |-TextComment 0x56101f2031f0 <line:3748:3> Text=" "
|   | |-InlineCommandComment 0x56101f203210 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f203230 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x56101f203250 <line:3749:3> Text=" "
|   | |-InlineCommandComment 0x56101f203270 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f203290 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x56101f2032b0 <line:3750:3> Text=" "
|   | |-InlineCommandComment 0x56101f2032d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f2032f0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x56101f203310 <line:3751:3> Text=" "
|   |-VerbatimLineComment 0x56101f2033a0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x56101f203410 <line:3752:1>
|     `-TextComment 0x56101f2033e0 <col:1> Text=" "
|-FunctionDecl 0x56101f161b38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x56101f1619a0 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f161a18 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x56101f203b90 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x56101f203530 <line:3756:3>
|   | `-TextComment 0x56101f203500 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f203550 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x56101f2035b0 <col:10, col:51>
|   |   `-TextComment 0x56101f203580 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x56101f2036a0 <line:3758:3, line:3759:57>
|   | |-TextComment 0x56101f2035d0 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x56101f203620 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x56101f203640 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x56101f203660 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x56101f2036f0 <line:3761:3>
|   | `-TextComment 0x56101f2036c0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f203710 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x56101f203770 <col:9, col:31>
|   |   `-TextComment 0x56101f203740 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x56101f2037c0 <line:3763:3>
|   | `-TextComment 0x56101f203790 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f2037e0 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x56101f203890 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x56101f203840 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x56101f203860 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x56101f2038b0 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f203940 <col:15, col:71>
|   |   `-TextComment 0x56101f203910 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x56101f203a80 <line:3766:3, line:3768:3>
|   | |-TextComment 0x56101f203960 <line:3766:3> Text=" "
|   | |-InlineCommandComment 0x56101f203980 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f2039a0 <col:11, col:26> Text=" 0 Message read."
|   | |-TextComment 0x56101f2039c0 <line:3767:3> Text=" "
|   | |-InlineCommandComment 0x56101f2039e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f203a00 <col:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|   | `-TextComment 0x56101f203a20 <line:3768:3> Text=" "
|   |-VerbatimLineComment 0x56101f203aa0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x56101f203b10 <line:3769:1>
|     `-TextComment 0x56101f203ae0 <col:1> Text=" "
|-FunctionDecl 0x56101f161d40 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x56101f161c40 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x56101f204040 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x56101f203c30 <line:3773:3>
|   | `-TextComment 0x56101f203c00 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f203c50 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x56101f203cb0 <col:10, col:32>
|   |   `-TextComment 0x56101f203c80 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x56101f203d50 <line:3775:3, line:3777:61>
|   | |-TextComment 0x56101f203cd0 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x56101f203cf0 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x56101f203d10 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x56101f203da0 <line:3779:3>
|   | `-TextComment 0x56101f203d70 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f203dc0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x56101f203e50 <col:15, col:44>
|   |   `-TextComment 0x56101f203e20 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x56101f203ea0 <line:3781:3>
|   | `-TextComment 0x56101f203e70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f203ec0 <col:4, line:3782:3> Name="return"
|   | `-ParagraphComment 0x56101f203f40 <line:3781:11, line:3782:3>
|   |   |-TextComment 0x56101f203ef0 <line:3781:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f203f10 <line:3782:3> Text=" "
|   |-VerbatimLineComment 0x56101f203f60 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x56101f203fd0 <line:3783:1>
|     `-TextComment 0x56101f203fa0 <col:1> Text=" "
|-FunctionDecl 0x56101f161f40 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x56101f161e40 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x56101f2044c0 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x56101f2040e0 <line:3787:3>
|   | `-TextComment 0x56101f2040b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f204100 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x56101f204160 <col:10, col:58>
|   |   `-TextComment 0x56101f204130 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x56101f2041d0 <line:3789:3, line:3790:15>
|   | |-TextComment 0x56101f204180 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x56101f2041a0 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x56101f204220 <line:3792:3>
|   | `-TextComment 0x56101f2041f0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f204240 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x56101f2042d0 <col:15, col:44>
|   |   `-TextComment 0x56101f2042a0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x56101f204320 <line:3794:3>
|   | `-TextComment 0x56101f2042f0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f204340 <col:4, line:3795:3> Name="return"
|   | `-ParagraphComment 0x56101f2043c0 <line:3794:11, line:3795:3>
|   |   |-TextComment 0x56101f204370 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|   |   `-TextComment 0x56101f204390 <line:3795:3> Text=" "
|   |-VerbatimLineComment 0x56101f2043e0 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x56101f204450 <line:3796:1>
|     `-TextComment 0x56101f204420 <col:1> Text=" "
|-FunctionDecl 0x56101f162260 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x56101f162040 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f162150 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x56101f2049f0 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x56101f204560 <line:3800:3>
|   | `-TextComment 0x56101f204530 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f204580 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x56101f2045e0 <col:10, col:50>
|   |   `-TextComment 0x56101f2045b0 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x56101f204630 <line:3802:3, col:77>
|   | `-TextComment 0x56101f204600 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x56101f204680 <line:3804:3>
|   | `-TextComment 0x56101f204650 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f2046a0 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x56101f204750 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x56101f204700 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x56101f204720 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x56101f204770 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x56101f204800 <col:16, col:61>
|   |   `-TextComment 0x56101f2047d0 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x56101f204850 <line:3807:3>
|   | `-TextComment 0x56101f204820 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f204870 <col:4, line:3808:3> Name="return"
|   | `-ParagraphComment 0x56101f2048f0 <line:3807:11, line:3808:3>
|   |   |-TextComment 0x56101f2048a0 <line:3807:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f2048c0 <line:3808:3> Text=" "
|   |-VerbatimLineComment 0x56101f204910 <col:4, col:19> Text=" K-MSGQ-003"
|   `-ParagraphComment 0x56101f204980 <line:3809:1>
|     `-TextComment 0x56101f204950 <col:1> Text=" "
|-FunctionDecl 0x56101f1623c0 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x56101f162338 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x56101f1625f8 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x56101f1625b0 <line:3816:2, col:32>
|     `-BinaryOperator 0x56101f162588 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x56101f162558 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x56101f1624a8 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x56101f15db08
|       |   `-ImplicitCastExpr 0x56101f162490 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x56101f162468 <col:9> 'struct k_msgq *' lvalue ParmVar 0x56101f162338 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x56101f162570 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x56101f162520 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x56101f15ddc8
|           `-ImplicitCastExpr 0x56101f162508 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x56101f1624e0 <col:26> 'struct k_msgq *' lvalue ParmVar 0x56101f162338 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x56101f162b40 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x56101f162638 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x56101f204e60 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x56101f204a90 <line:3820:3>
|   | `-TextComment 0x56101f204a60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f204ab0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x56101f204b10 <col:10, col:56>
|   |   `-TextComment 0x56101f204ae0 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x56101f204b60 <line:3822:3, col:80>
|   | `-TextComment 0x56101f204b30 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x56101f204bb0 <line:3824:3>
|   | `-TextComment 0x56101f204b80 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f204bd0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x56101f204c60 <col:15, col:44>
|   |   `-TextComment 0x56101f204c30 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x56101f204cc0 <line:3826:3>
|   | `-TextComment 0x56101f204c80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f204ce0 <col:4, line:3827:3> Name="return"
|   | `-ParagraphComment 0x56101f204d60 <line:3826:11, line:3827:3>
|   |   |-TextComment 0x56101f204d10 <line:3826:11, col:30> Text=" Number of messages."
|   |   `-TextComment 0x56101f204d30 <line:3827:3> Text=" "
|   |-VerbatimLineComment 0x56101f204d80 <col:4, col:19> Text=" K-MSGQ-002"
|   `-ParagraphComment 0x56101f204df0 <line:3828:1>
|     `-TextComment 0x56101f204dc0 <col:1> Text=" "
|-FunctionDecl 0x56101f162c98 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x56101f162c10 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x56101f162e48 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x56101f162dd0 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x56101f162db8 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56101f162d80 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x56101f15ddc8
|         `-ImplicitCastExpr 0x56101f162d68 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x56101f162d40 <col:9> 'struct k_msgq *' lvalue ParmVar 0x56101f162c10 'msgq' 'struct k_msgq *'
|-RecordDecl 0x56101f162e60 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x56101f2050c0 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x56101f204f00 <line:3839:3>
| | | `-TextComment 0x56101f204ed0 <col:3> Text=" "
| | |-VerbatimLineComment 0x56101f204f20 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x56101f204f90 <line:3840:3>
| | | `-TextComment 0x56101f204f60 <col:3> Text=" "
| | |-VerbatimLineComment 0x56101f204fb0 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x56101f205070 <line:3841:3, col:5>
| |   |-TextComment 0x56101f204ff0 <col:3> Text=" "
| |   |-TextComment 0x56101f205010 <col:4> Text="@"
| |   `-TextComment 0x56101f205030 <col:5> Text="{"
| |-FieldDecl 0x56101f162f40 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x56101f162f10 <col:15> 'int' 8
| |-FieldDecl 0x56101f162fb8 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-IntegerLiteral 0x56101f162f88 <col:16> 'int' 4
| `-FieldDecl 0x56101f163030 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-IntegerLiteral 0x56101f163000 <col:16> 'int' 20
|-RecordDecl 0x56101f163078 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x56101f163138 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x56101f1631d0 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x56101f1632a8 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x56101f205270 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x56101f205160 <line:3869:3>
| | | `-TextComment 0x56101f205130 <col:3> Text=" "
| | |-BlockCommandComment 0x56101f205180 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x56101f2051e0 <col:10, col:35>
| | |   `-TextComment 0x56101f2051b0 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x56101f205230 <line:3871:1>
| |   `-TextComment 0x56101f205200 <col:1> Text=" "
| |-FieldDecl 0x56101f163388 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x56101f205340 <line:3873:5, col:55>
| |   `-ParagraphComment 0x56101f205310 <col:5, col:55>
| |     `-TextComment 0x56101f2052e0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x56101f163408 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x56101f205410 <line:3875:5, col:32>
| |   `-ParagraphComment 0x56101f2053e0 <col:5, col:32>
| |     `-TextComment 0x56101f2053b0 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x56101f163488 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x56101f2054e0 <line:3877:5, col:43>
| |   `-ParagraphComment 0x56101f2054b0 <col:5, col:43>
| |     `-TextComment 0x56101f205480 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x56101f163510 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x56101f2055b0 <line:3879:5, col:34>
| |   `-ParagraphComment 0x56101f205580 <col:5, col:34>
| |     `-TextComment 0x56101f205550 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x56101f1635a0 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x56101f205680 <line:3881:5, col:55>
| |   `-ParagraphComment 0x56101f205650 <col:5, col:55>
| |     `-TextComment 0x56101f205620 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x56101f163670 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x56101f205750 <line:3883:5, col:35>
| |   `-ParagraphComment 0x56101f205720 <col:5, col:35>
| |     `-TextComment 0x56101f2056f0 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x56101f1636f8 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x56101f205820 <line:3885:5, col:22>
| |   `-ParagraphComment 0x56101f2057f0 <col:5, col:22>
| |     `-TextComment 0x56101f2057c0 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x56101f163778 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x56101f2058f0 <line:3887:5, col:22>
| |   `-ParagraphComment 0x56101f2058c0 <col:5, col:22>
| |     `-TextComment 0x56101f205890 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x56101f1637f8 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x56101f2059c0 <line:3889:5, col:65>
|     `-ParagraphComment 0x56101f205990 <col:5, col:65>
|       `-TextComment 0x56101f205960 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x56101f163868 prev 0x56101f127080 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x56101f205b70 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x56101f205a60 <line:3897:3>
| | | `-TextComment 0x56101f205a30 <col:3> Text=" "
| | |-BlockCommandComment 0x56101f205a80 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x56101f205ae0 <col:10, col:27>
| | |   `-TextComment 0x56101f205ab0 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x56101f205b30 <line:3899:1>
| |   `-TextComment 0x56101f205b00 <col:1> Text=" "
| |-FieldDecl 0x56101f163928 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x56101f205c40 <line:3901:5, col:29>
| |   `-ParagraphComment 0x56101f205c10 <col:5, col:29>
| |     `-TextComment 0x56101f205be0 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x56101f1639a8 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x56101f205d10 <line:3903:5, col:27>
| |   `-ParagraphComment 0x56101f205ce0 <col:5, col:27>
| |     `-TextComment 0x56101f205cb0 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x56101f163a10 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x56101f165200 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x56101f165100 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x56101f206170 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x56101f205db0 <line:3942:3>
|   | `-TextComment 0x56101f205d80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f205dd0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x56101f205e30 <col:10, col:31>
|   |   `-TextComment 0x56101f205e00 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x56101f205e80 <line:3944:3, col:69>
|   | `-TextComment 0x56101f205e50 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x56101f205ed0 <line:3946:3>
|   | `-TextComment 0x56101f205ea0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f205ef0 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x56101f205f80 <col:15, col:38>
|   |   `-TextComment 0x56101f205f50 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x56101f205fd0 <line:3948:3>
|   | `-TextComment 0x56101f205fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f205ff0 <col:4, line:3949:3> Name="return"
|   | `-ParagraphComment 0x56101f206070 <line:3948:11, line:3949:3>
|   |   |-TextComment 0x56101f206020 <line:3948:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f206040 <line:3949:3> Text=" "
|   |-VerbatimLineComment 0x56101f206090 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x56101f206100 <line:3950:1>
|     `-TextComment 0x56101f2060d0 <col:1> Text=" "
|-FunctionDecl 0x56101f1655b8 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x56101f165300 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x56101f165410 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x56101f165480 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x56101f2069a0 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x56101f206210 <line:3954:3>
|   | `-TextComment 0x56101f2061e0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f206230 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x56101f206290 <col:10, col:57>
|   |   `-TextComment 0x56101f206260 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x56101f2063b0 <line:3956:3, line:3958:55>
|   | |-TextComment 0x56101f2062b0 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x56101f206300 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x56101f206320 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x56101f206340 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x56101f206360 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x56101f206400 <line:3960:3>
|   | `-TextComment 0x56101f2063d0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f206420 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x56101f2064d0 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x56101f206480 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x56101f2064a0 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x56101f2064f0 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x56101f2065a0 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x56101f206550 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x56101f206570 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x56101f2065c0 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x56101f2066f0 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x56101f206620 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x56101f206640 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x56101f206660 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x56101f206680 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x56101f2066a0 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x56101f2068a0 <line:3968:3, line:3971:3>
|   | |-TextComment 0x56101f206710 <line:3968:3> Text=" "
|   | |-InlineCommandComment 0x56101f206730 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f206750 <col:11, col:26> Text=" 0 Message sent."
|   | |-TextComment 0x56101f206770 <line:3969:3> Text=" "
|   | |-InlineCommandComment 0x56101f206790 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f2067b0 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x56101f2067d0 <line:3970:3> Text=" "
|   | |-InlineCommandComment 0x56101f2067f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f206810 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x56101f206830 <line:3971:3> Text=" "
|   |-VerbatimLineComment 0x56101f2068c0 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x56101f206930 <line:3972:1>
|     `-TextComment 0x56101f206900 <col:1> Text=" "
|-FunctionDecl 0x56101f165900 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x56101f1656c0 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x56101f165748 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x56101f1657d0 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x56101f207140 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x56101f206a40 <line:3977:3>
|   | `-TextComment 0x56101f206a10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f206a60 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x56101f206ac0 <col:10, col:59>
|   |   `-TextComment 0x56101f206a90 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x56101f206c80 <line:3979:3, line:3983:29>
|   | |-TextComment 0x56101f206ae0 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x56101f206b30 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x56101f206b50 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x56101f206b70 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x56101f206b90 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x56101f206be0 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x56101f206c00 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x56101f206c20 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x56101f206cf0 <line:3985:3>
|   | `-TextComment 0x56101f206cc0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f206d10 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x56101f206dc0 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x56101f206d70 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x56101f206d90 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x56101f206de0 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x56101f206e90 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x56101f206e40 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x56101f206e60 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x56101f206eb0 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x56101f206f40 <col:14, col:64>
|   |   `-TextComment 0x56101f206f10 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x56101f206f90 <line:3989:3>
|   | `-TextComment 0x56101f206f60 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f206fb0 <col:4, line:3990:3> Name="return"
|   | `-ParagraphComment 0x56101f207030 <line:3989:11, line:3990:3>
|   |   |-TextComment 0x56101f206fe0 <line:3989:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f207000 <line:3990:3> Text=" "
|   |-VerbatimLineComment 0x56101f207050 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x56101f2070c0 <line:3991:1>
|     `-TextComment 0x56101f207090 <col:1> Text=" "
|-FunctionDecl 0x56101f165cc8 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x56101f165a10 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x56101f165a98 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x56101f165b10 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x56101f165b80 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x56101f207a00 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x56101f2071e0 <line:3996:3>
|   | `-TextComment 0x56101f2071b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f207200 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x56101f207260 <col:10, col:36>
|   |   `-TextComment 0x56101f207230 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x56101f207350 <line:3998:3, line:3999:40>
|   | |-TextComment 0x56101f207280 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x56101f2072d0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x56101f2072f0 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x56101f207310 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x56101f2073a0 <line:4001:3>
|   | `-TextComment 0x56101f207370 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f2073c0 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x56101f207470 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x56101f207420 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x56101f207440 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x56101f207490 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x56101f207540 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x56101f2074f0 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x56101f207510 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x56101f207560 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x56101f207640 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x56101f2075c0 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x56101f2075e0 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x56101f207600 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x56101f207660 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x56101f207740 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x56101f2076c0 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x56101f2076e0 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x56101f207700 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x56101f2078f0 <line:4009:3, line:4012:3>
|   | |-TextComment 0x56101f207760 <line:4009:3> Text=" "
|   | |-InlineCommandComment 0x56101f207780 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f2077a0 <col:11, col:30> Text=" 0 Message received."
|   | |-TextComment 0x56101f2077c0 <line:4010:3> Text=" "
|   | |-InlineCommandComment 0x56101f2077e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f207800 <col:11, col:44> Text=" -ENOMSG Returned without waiting."
|   | |-TextComment 0x56101f207820 <line:4011:3> Text=" "
|   | |-InlineCommandComment 0x56101f207840 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f207860 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x56101f207880 <line:4012:3> Text=" "
|   |-VerbatimLineComment 0x56101f207910 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x56101f207980 <line:4013:1>
|     `-TextComment 0x56101f207950 <col:1> Text=" "
|-FunctionDecl 0x56101f165f70 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x56101f165de0 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x56101f165e58 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x56101f207ff0 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x56101f207aa0 <line:4018:3>
|   | `-TextComment 0x56101f207a70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f207ac0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x56101f207b20 <col:10, col:54>
|   |   `-TextComment 0x56101f207af0 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x56101f207b90 <line:4020:3, line:4021:57>
|   | |-TextComment 0x56101f207b40 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x56101f207b60 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x56101f207c00 <line:4023:3, line:4024:31>
|   | |-TextComment 0x56101f207bb0 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x56101f207bd0 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x56101f207c50 <line:4026:3>
|   | `-TextComment 0x56101f207c20 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f207c70 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x56101f207d20 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x56101f207cd0 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x56101f207cf0 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x56101f207d40 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x56101f207df0 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x56101f207da0 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x56101f207dc0 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x56101f207e40 <line:4030:3>
|   | `-TextComment 0x56101f207e10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f207e60 <col:4, line:4031:3> Name="return"
|   | `-ParagraphComment 0x56101f207ee0 <line:4030:11, line:4031:3>
|   |   |-TextComment 0x56101f207e90 <line:4030:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f207eb0 <line:4031:3> Text=" "
|   |-VerbatimLineComment 0x56101f207f00 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x56101f207f70 <line:4032:1>
|     `-TextComment 0x56101f207f40 <col:1> Text=" "
|-FunctionDecl 0x56101f1663a8 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x56101f166088 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x56101f166110 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x56101f1661f0 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x56101f166260 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x56101f208a20 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x56101f208090 <line:4036:3>
|   | `-TextComment 0x56101f208060 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2080b0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x56101f208110 <col:10, col:65>
|   |   `-TextComment 0x56101f2080e0 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x56101f208200 <line:4038:3, line:4042:42>
|   | |-TextComment 0x56101f208130 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x56101f208150 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x56101f208170 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x56101f208190 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x56101f2081b0 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x56101f2082a0 <line:4044:3, line:4046:33>
|   | |-TextComment 0x56101f208220 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x56101f208240 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x56101f208260 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x56101f208390 <line:4048:3, line:4052:55>
|   | |-TextComment 0x56101f2082c0 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x56101f2082e0 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x56101f208300 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x56101f208320 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x56101f208340 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x56101f2083e0 <line:4054:3>
|   | `-TextComment 0x56101f2083b0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f208400 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x56101f2084b0 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x56101f208460 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x56101f208480 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x56101f2084d0 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x56101f208580 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x56101f208530 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x56101f208550 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x56101f2085a0 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x56101f208650 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x56101f208600 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x56101f208620 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x56101f208670 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x56101f208750 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x56101f2086d0 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x56101f2086f0 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x56101f208710 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x56101f208900 <line:4061:3, line:4064:3>
|   | |-TextComment 0x56101f208770 <line:4061:3> Text=" "
|   | |-InlineCommandComment 0x56101f208790 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f2087b0 <col:11, col:28> Text=" 0 Data retrieved."
|   | |-TextComment 0x56101f2087d0 <line:4062:3> Text=" "
|   | |-InlineCommandComment 0x56101f2087f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f208810 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x56101f208830 <line:4063:3> Text=" "
|   | |-InlineCommandComment 0x56101f208850 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f208870 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x56101f208890 <line:4064:3> Text=" "
|   |-VerbatimLineComment 0x56101f208920 <col:4, col:19> Text=" K-MBOX-002"
|   `-ParagraphComment 0x56101f208990 <line:4065:1>
|     `-TextComment 0x56101f208960 <col:1> Text=" "
|-RecordDecl 0x56101f1664f8 prev 0x56101f127130 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x56101f208af0 <line:4078:4, col:19>
| | `-ParagraphComment 0x56101f208ac0 <col:4, col:19>
| |   `-TextComment 0x56101f208a90 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x56101f166598 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x56101f208bc0 <col:38, col:63>
| |   `-ParagraphComment 0x56101f208b90 <col:38, col:63>
| |     `-TextComment 0x56101f208b60 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x56101f166618 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x56101f208c90 <col:38, col:50>
| |   `-ParagraphComment 0x56101f208c60 <col:38, col:50>
| |     `-TextComment 0x56101f208c30 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x56101f166698 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x56101f208d70 <col:38, col:61>
| |   `-ParagraphComment 0x56101f208d40 <col:38, col:61>
| |     `-TextComment 0x56101f208d10 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x56101f166718 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x56101f208e40 <col:38, col:67>
| |   `-ParagraphComment 0x56101f208e10 <col:38, col:67>
| |     `-TextComment 0x56101f208de0 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x56101f166798 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x56101f208f10 <col:38, col:63>
| |   `-ParagraphComment 0x56101f208ee0 <col:38, col:63>
| |     `-TextComment 0x56101f208eb0 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x56101f166828 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x56101f208fe0 <col:31, col:52>
| |   `-ParagraphComment 0x56101f208fb0 <col:31, col:52>
| |     `-TextComment 0x56101f208f80 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x56101f166898 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x56101f166950 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x56101f2090b0 <col:31, col:49>
| | |   `-ParagraphComment 0x56101f209080 <col:31, col:49>
| | |     `-TextComment 0x56101f209050 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x56101f1669d8 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x56101f209180 <col:31, col:49>
| |     `-ParagraphComment 0x56101f209150 <col:31, col:49>
| |       `-TextComment 0x56101f209120 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x56101f166aa0 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x56101f166af8 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x56101f209250 <col:26, col:32>
|     `-ParagraphComment 0x56101f209220 <col:26, col:32>
|       `-TextComment 0x56101f2091f0 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x56101f166f30 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x56101f166d10 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f166d88 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x56101f166df8 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x56101f2098b0 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x56101f2092f0 <line:4145:3>
|   | `-TextComment 0x56101f2092c0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f209310 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x56101f209370 <col:10, col:28>
|   |   `-TextComment 0x56101f209340 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x56101f2093c0 <line:4147:3, col:66>
|   | `-TextComment 0x56101f209390 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x56101f209410 <line:4149:3>
|   | `-TextComment 0x56101f2093e0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f209430 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x56101f2094e0 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x56101f209490 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x56101f2094b0 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x56101f209500 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x56101f2095e0 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x56101f209560 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x56101f209580 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x56101f2095a0 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x56101f209600 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x56101f2096b0 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x56101f209660 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x56101f209680 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x56101f209700 <line:4155:3>
|   | `-TextComment 0x56101f2096d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f209720 <col:4, line:4156:3> Name="return"
|   | `-ParagraphComment 0x56101f2097a0 <line:4155:11, line:4156:3>
|   |   |-TextComment 0x56101f209750 <line:4155:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f209770 <line:4156:3> Text=" "
|   |-VerbatimLineComment 0x56101f2097c0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x56101f209830 <line:4157:1>
|     `-TextComment 0x56101f209800 <col:1> Text=" "
|-FunctionDecl 0x56101f168b88 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x56101f168a80 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x56101f209d70 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x56101f209950 <line:4161:3>
|   | `-TextComment 0x56101f209920 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f209970 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x56101f2099d0 <col:10, col:43>
|   |   `-TextComment 0x56101f2099a0 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x56101f209a70 <line:4163:3, line:4165:46>
|   | |-TextComment 0x56101f2099f0 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x56101f209a10 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x56101f209a30 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x56101f209ac0 <line:4167:3>
|   | `-TextComment 0x56101f209a90 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f209ae0 <col:4, line:4170:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x56101f209c80 <line:4167:15, line:4170:3>
|   |   |-TextComment 0x56101f209b40 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   |-TextComment 0x56101f209b60 <line:4168:3> Text=" "
|   |   |-InlineCommandComment 0x56101f209b80 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x56101f209ba0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x56101f209bc0 <line:4169:3> Text=" "
|   |   |-InlineCommandComment 0x56101f209be0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x56101f209c00 <col:11, col:37> Text=" -EAGAIN nothing to cleanup"
|   |   `-TextComment 0x56101f209c20 <line:4170:3> Text=" "
|   |-VerbatimLineComment 0x56101f209ca0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x56101f209d10 <line:4171:1>
|     `-TextComment 0x56101f209ce0 <col:1> Text=" "
|-FunctionDecl 0x56101f168e08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x56101f168c80 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f168cf0 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x56101f20a390 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x56101f209e10 <line:4175:3>
|   | `-TextComment 0x56101f209de0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f209e30 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x56101f209e90 <col:10, col:56>
|   |   `-TextComment 0x56101f209e60 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x56101f209f30 <line:4177:3, line:4179:74>
|   | |-TextComment 0x56101f209eb0 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x56101f209ed0 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x56101f209ef0 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x56101f209f80 <line:4181:3, col:69>
|   | `-TextComment 0x56101f209f50 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x56101f209fd0 <line:4183:3>
|   | `-TextComment 0x56101f209fa0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f209ff0 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x56101f20a0a0 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x56101f20a050 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x56101f20a070 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x56101f20a0c0 <col:4, line:4188:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x56101f20a290 <line:4184:15, line:4188:3>
|   |   |-TextComment 0x56101f20a120 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x56101f20a140 <line:4185:3, col:30> Text="             buffer is used."
|   |   |-TextComment 0x56101f20a160 <line:4186:3> Text=" "
|   |   |-InlineCommandComment 0x56101f20a180 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x56101f20a1a0 <col:11, col:23> Text=" 0 on success"
|   |   |-TextComment 0x56101f20a1c0 <line:4187:3> Text=" "
|   |   |-InlineCommandComment 0x56101f20a1e0 <col:4, col:10> Name="retval" RenderNormal
|   |   |-TextComment 0x56101f20a200 <col:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|   |   `-TextComment 0x56101f20a220 <line:4188:3> Text=" "
|   |-VerbatimLineComment 0x56101f20a2b0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x56101f20a320 <line:4189:1>
|     `-TextComment 0x56101f20a2f0 <col:1> Text=" "
|-FunctionDecl 0x56101f1692f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x56101f168f10 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f168f88 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x56101f168ff8 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f169098 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x56101f169108 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f169178 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x56101f20af20 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x56101f20a430 <line:4193:3>
|   | `-TextComment 0x56101f20a400 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20a450 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x56101f20a4b0 <col:10, col:31>
|   |   `-TextComment 0x56101f20a480 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x56101f20a5d0 <line:4195:3, col:66>
|   | |-TextComment 0x56101f20a4d0 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x56101f20a520 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x56101f20a540 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x56101f20a590 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x56101f20a620 <line:4197:3>
|   | `-TextComment 0x56101f20a5f0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20a640 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x56101f20a6f0 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x56101f20a6a0 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x56101f20a6c0 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x56101f20a710 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f20a7c0 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x56101f20a770 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x56101f20a790 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x56101f20a7e0 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x56101f20a890 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x56101f20a840 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x56101f20a860 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x56101f20a8b0 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x56101f20a960 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x56101f20a910 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x56101f20a930 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x56101f20a980 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x56101f20aa30 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x56101f20a9e0 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x56101f20aa00 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x56101f20aa50 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x56101f20ab30 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x56101f20aab0 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x56101f20aad0 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x56101f20aaf0 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x56101f20ae00 <line:4206:3, line:4210:3>
|   | |-TextComment 0x56101f20ab50 <line:4206:3> Text=" "
|   | |-InlineCommandComment 0x56101f20ab70 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20ab90 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x56101f20abe0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x56101f20ac00 <col:34, col:61> Text=" bytes of data were written."
|   | |-TextComment 0x56101f20ac20 <line:4207:3> Text=" "
|   | |-InlineCommandComment 0x56101f20ac40 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20ac60 <col:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   | |-TextComment 0x56101f20ac80 <line:4208:3> Text=" "
|   | |-InlineCommandComment 0x56101f20aca0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20ace0 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x56101f20ad30 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x56101f20ad50 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|   | `-TextComment 0x56101f20ad70 <line:4210:3> Text=" "
|   |-VerbatimLineComment 0x56101f20ae20 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x56101f20ae90 <line:4211:1>
|     `-TextComment 0x56101f20ae60 <col:1> Text=" "
|-FunctionDecl 0x56101f169710 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x56101f169420 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f169498 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x56101f169508 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f169578 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x56101f1695e8 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f169658 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x56101f20bb10 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x56101f20afc0 <line:4217:3>
|   | `-TextComment 0x56101f20af90 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20afe0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x56101f20b040 <col:10, col:32>
|   |   `-TextComment 0x56101f20b010 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x56101f20b160 <line:4219:3, col:66>
|   | |-TextComment 0x56101f20b060 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x56101f20b0b0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x56101f20b0d0 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x56101f20b120 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x56101f20b1b0 <line:4221:3>
|   | `-TextComment 0x56101f20b180 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20b1d0 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x56101f20b280 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x56101f20b230 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x56101f20b250 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x56101f20b2a0 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x56101f20b350 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x56101f20b300 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x56101f20b320 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x56101f20b370 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x56101f20b420 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x56101f20b3d0 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x56101f20b3f0 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x56101f20b440 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x56101f20b4f0 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x56101f20b4a0 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x56101f20b4c0 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x56101f20b510 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x56101f20b5c0 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x56101f20b570 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x56101f20b590 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x56101f20b5e0 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x56101f20b6c0 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x56101f20b640 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x56101f20b660 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x56101f20b680 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x56101f20b9f0 <line:4230:3, line:4235:3>
|   | |-TextComment 0x56101f20b6e0 <line:4230:3> Text=" "
|   | |-InlineCommandComment 0x56101f20b700 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20b720 <col:11, col:22> Text=" 0 At least "
|   | |-InlineCommandComment 0x56101f20b770 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x56101f20b790 <col:34, col:58> Text=" bytes of data were read."
|   | |-TextComment 0x56101f20b7b0 <line:4231:3> Text=" "
|   | |-InlineCommandComment 0x56101f20b7d0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20b7f0 <col:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   | |-TextComment 0x56101f20b810 <line:4232:3> Text=" "
|   | |-InlineCommandComment 0x56101f20b830 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20b850 <col:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   | |-TextComment 0x56101f20b870 <line:4233:3> Text=" "
|   | |-InlineCommandComment 0x56101f20b890 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20b8b0 <col:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|   | |-InlineCommandComment 0x56101f20b900 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   | |-TextComment 0x56101f20b920 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|   | `-TextComment 0x56101f20b940 <line:4235:3> Text=" "
|   |-VerbatimLineComment 0x56101f20ba10 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x56101f20ba80 <line:4236:1>
|     `-TextComment 0x56101f20ba50 <col:1> Text=" "
|-FunctionDecl 0x56101f169b20 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x56101f169830 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f1698b8 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x56101f169928 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f1699b0 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x56101f20c390 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x56101f20bbb0 <line:4242:3>
|   | `-TextComment 0x56101f20bb80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20bbd0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x56101f20bc30 <col:10, col:39>
|   |   `-TextComment 0x56101f20bc00 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x56101f20be20 <line:4244:3, line:4246:79>
|   | |-TextComment 0x56101f20bc50 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x56101f20bca0 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x56101f20bcc0 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x56101f20bce0 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x56101f20bd30 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x56101f20bd50 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x56101f20bda0 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x56101f20bdc0 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x56101f20be70 <line:4248:3>
|   | `-TextComment 0x56101f20be40 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20be90 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x56101f20bf40 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x56101f20bef0 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x56101f20bf10 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x56101f20bf60 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x56101f20c010 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x56101f20bfc0 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x56101f20bfe0 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x56101f20c030 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x56101f20c0e0 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x56101f20c090 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x56101f20c0b0 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x56101f20c100 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x56101f20c190 <col:14, col:61>
|   |   `-TextComment 0x56101f20c160 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x56101f20c1e0 <line:4253:3>
|   | `-TextComment 0x56101f20c1b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20c200 <col:4, line:4254:3> Name="return"
|   | `-ParagraphComment 0x56101f20c280 <line:4253:11, line:4254:3>
|   |   |-TextComment 0x56101f20c230 <line:4253:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f20c250 <line:4254:3> Text=" "
|   |-VerbatimLineComment 0x56101f20c2a0 <col:4, col:19> Text=" K-PIPE-002"
|   `-ParagraphComment 0x56101f20c310 <line:4255:1>
|     `-TextComment 0x56101f20c2e0 <col:1> Text=" "
|-RecordDecl 0x56101f169c38 prev 0x56101f1274a0 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x56101f20c4b0 <line:4262:3, col:24>
| | `-ParagraphComment 0x56101f20c480 <col:3, col:24>
| |   |-TextComment 0x56101f20c400 <col:3> Text=" "
| |   |-InlineCommandComment 0x56101f20c420 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x56101f20c440 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x56101f169cd0 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x56101f169d28 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x56101f169d80 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x56101f169de0 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x56101f169e40 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x56101f169e98 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x56101f16a2f8 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x56101f16a050 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x56101f16a0c8 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x56101f16a138 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f16a1a8 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x56101f20ceb0 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x56101f20c550 <line:4330:3>
|   | `-TextComment 0x56101f20c520 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20c570 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x56101f20c5d0 <col:10, col:35>
|   |   `-TextComment 0x56101f20c5a0 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x56101f20c620 <line:4332:3, col:53>
|   | `-TextComment 0x56101f20c5f0 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x56101f20c8b0 <line:4334:3, line:4339:51>
|   | |-TextComment 0x56101f20c640 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x56101f20c690 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x56101f20c6b0 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x56101f20c6d0 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x56101f20c720 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x56101f20c740 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x56101f20c760 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x56101f20c780 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x56101f20c7a0 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x56101f20c7c0 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x56101f20c810 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x56101f20c830 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x56101f20c900 <line:4341:3>
|   | `-TextComment 0x56101f20c8d0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20c920 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x56101f20c9d0 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x56101f20c980 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x56101f20c9a0 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x56101f20c9f0 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x56101f20caa0 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x56101f20ca50 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x56101f20ca70 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x56101f20cac0 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x56101f20cb70 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x56101f20cb20 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x56101f20cb40 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x56101f20cb90 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x56101f20cc20 <col:21, col:45>
|   |   `-TextComment 0x56101f20cbf0 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x56101f20cd40 <line:4346:3, line:4347:40>
|   | |-TextComment 0x56101f20cc40 <line:4346:3> Text=" "
|   | |-InlineCommandComment 0x56101f20cc60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20cc80 <col:11, col:23> Text=" 0 on success"
|   | |-TextComment 0x56101f20cca0 <line:4347:3> Text=" "
|   | |-InlineCommandComment 0x56101f20ccc0 <col:4, col:10> Name="retval" RenderNormal
|   | `-TextComment 0x56101f20ccf0 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   |-ParagraphComment 0x56101f20cd90 <line:4349:3>
|   | `-TextComment 0x56101f20cd60 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f20cdb0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x56101f20ce20 <line:4350:1>
|     `-TextComment 0x56101f20cdf0 <col:1> Text=" "
|-FunctionDecl 0x56101f16a638 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x56101f16a410 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x56101f16a488 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x56101f16a4f8 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x56101f20d6c0 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x56101f20cf50 <line:4355:3>
|   | `-TextComment 0x56101f20cf20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20cf70 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x56101f20cfd0 <col:10, col:45>
|   |   `-TextComment 0x56101f20cfa0 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x56101f20d020 <line:4357:3, col:60>
|   | `-TextComment 0x56101f20cff0 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x56101f20d070 <line:4359:3>
|   | `-TextComment 0x56101f20d040 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20d090 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x56101f20d140 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x56101f20d0f0 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x56101f20d110 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x56101f20d160 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x56101f20d210 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x56101f20d1c0 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x56101f20d1e0 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x56101f20d230 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x56101f20d310 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x56101f20d290 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x56101f20d2b0 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x56101f20d2d0 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x56101f20d5c0 <line:4365:3, line:4370:3>
|   | |-TextComment 0x56101f20d330 <line:4365:3> Text=" "
|   | |-InlineCommandComment 0x56101f20d350 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20d370 <col:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   | |-InlineCommandComment 0x56101f20d3c0 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   | |-TextComment 0x56101f20d3e0 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x56101f20d400 <line:4367:3> Text=" "
|   | |-InlineCommandComment 0x56101f20d420 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20d440 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x56101f20d460 <line:4368:3> Text=" "
|   | |-InlineCommandComment 0x56101f20d480 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20d4a0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x56101f20d4c0 <line:4369:3> Text=" "
|   | |-InlineCommandComment 0x56101f20d4e0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20d500 <col:11, col:40> Text=" -EINVAL Invalid data supplied"
|   | `-TextComment 0x56101f20d520 <line:4370:3> Text=" "
|   |-VerbatimLineComment 0x56101f20d5e0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x56101f20d650 <line:4371:1>
|     `-TextComment 0x56101f20d620 <col:1> Text=" "
|-FunctionDecl 0x56101f16a8d0 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x56101f16a740 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x56101f16a7b8 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x56101f20dc10 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x56101f20d760 <line:4376:3>
|   | `-TextComment 0x56101f20d730 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20d780 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x56101f20d7e0 <col:10, col:51>
|   |   `-TextComment 0x56101f20d7b0 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x56101f20d850 <line:4378:3, line:4379:26>
|   | |-TextComment 0x56101f20d800 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x56101f20d820 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x56101f20d8a0 <line:4381:3>
|   | `-TextComment 0x56101f20d870 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20d8c0 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x56101f20d970 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x56101f20d920 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x56101f20d940 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x56101f20d990 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x56101f20da20 <col:14, col:75>
|   |   `-TextComment 0x56101f20d9f0 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x56101f20da70 <line:4384:3>
|   | `-TextComment 0x56101f20da40 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20da90 <col:4, line:4385:3> Name="return"
|   | `-ParagraphComment 0x56101f20db10 <line:4384:11, line:4385:3>
|   |   |-TextComment 0x56101f20dac0 <line:4384:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f20dae0 <line:4385:3> Text=" "
|   |-VerbatimLineComment 0x56101f20db30 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x56101f20dba0 <line:4386:1>
|     `-TextComment 0x56101f20db70 <col:1> Text=" "
|-FunctionDecl 0x56101f16b860 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x56101f16a9d0 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x56101f16b9d8 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x56101f16b998 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x56101f16b980 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x56101f16b948 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x56101f169e98
| |       `-ImplicitCastExpr 0x56101f16b930 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x56101f16b908 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x56101f16a9d0 'slab' 'struct k_mem_slab *'
| `-FullComment 0x56101f20e0f0 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x56101f20dcb0 <line:4390:3>
|   | `-TextComment 0x56101f20dc80 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20dcd0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x56101f20dd30 <col:10, col:57>
|   |   `-TextComment 0x56101f20dd00 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x56101f20de00 <line:4392:3, line:4393:18>
|   | |-TextComment 0x56101f20dd50 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x56101f20dd70 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x56101f20ddc0 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x56101f20de50 <line:4395:3>
|   | `-TextComment 0x56101f20de20 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20de70 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x56101f20df00 <col:15, col:42>
|   |   `-TextComment 0x56101f20ded0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x56101f20df50 <line:4397:3>
|   | `-TextComment 0x56101f20df20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20df70 <col:4, line:4398:3> Name="return"
|   | `-ParagraphComment 0x56101f20dff0 <line:4397:11, line:4398:3>
|   |   |-TextComment 0x56101f20dfa0 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|   |   `-TextComment 0x56101f20dfc0 <line:4398:3> Text=" "
|   |-VerbatimLineComment 0x56101f20e010 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x56101f20e080 <line:4399:1>
|     `-TextComment 0x56101f20e050 <col:1> Text=" "
|-FunctionDecl 0x56101f16baa0 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x56101f16ba18 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x56101f16bd08 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x56101f16bc90 <line:4418:2, col:34>
| |   `-BinaryOperator 0x56101f16bc68 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x56101f16bc38 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x56101f16bb88 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x56101f169d28
| |     |   `-ImplicitCastExpr 0x56101f16bb70 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x56101f16bb48 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x56101f16ba18 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x56101f16bc50 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x56101f16bc00 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x56101f169e98
| |         `-ImplicitCastExpr 0x56101f16bbe8 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x56101f16bbc0 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x56101f16ba18 'slab' 'struct k_mem_slab *'
| `-FullComment 0x56101f20e5d0 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x56101f20e190 <line:4406:3>
|   | `-TextComment 0x56101f20e160 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20e1b0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x56101f20e210 <col:10, col:59>
|   |   `-TextComment 0x56101f20e1e0 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x56101f20e2e0 <line:4408:3, line:4409:20>
|   | |-TextComment 0x56101f20e230 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x56101f20e250 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x56101f20e2a0 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x56101f20e330 <line:4411:3>
|   | `-TextComment 0x56101f20e300 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20e350 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x56101f20e3e0 <col:15, col:42>
|   |   `-TextComment 0x56101f20e3b0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x56101f20e430 <line:4413:3>
|   | `-TextComment 0x56101f20e400 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20e450 <col:4, line:4414:3> Name="return"
|   | `-ParagraphComment 0x56101f20e4d0 <line:4413:11, line:4414:3>
|   |   |-TextComment 0x56101f20e480 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|   |   `-TextComment 0x56101f20e4a0 <line:4414:3> Text=" "
|   |-VerbatimLineComment 0x56101f20e4f0 <col:4, col:20> Text=" K-MSLAB-002"
|   `-ParagraphComment 0x56101f20e560 <line:4415:1>
|     `-TextComment 0x56101f20e530 <col:1> Text=" "
|-RecordDecl 0x56101f16bd20 prev 0x56101f127550 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x56101f20e6f0 <line:4424:3, col:24>
| | `-ParagraphComment 0x56101f20e6c0 <col:3, col:24>
| |   |-TextComment 0x56101f20e640 <col:3> Text=" "
| |   |-InlineCommandComment 0x56101f20e660 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x56101f20e680 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x56101f16bdc8 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x56101f16be20 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x56101f16c278 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x56101f16bfc0 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x56101f16c048 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x56101f16c0b8 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f16c128 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x56101f20efa0 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x56101f20e790 <line:4478:3>
|   | `-TextComment 0x56101f20e760 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20e7b0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x56101f20e810 <col:10, col:45>
|   |   `-TextComment 0x56101f20e7e0 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x56101f20e860 <line:4480:3, col:60>
|   | `-TextComment 0x56101f20e830 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x56101f20e8b0 <line:4482:3>
|   | `-TextComment 0x56101f20e880 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20e8d0 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x56101f20e980 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x56101f20e930 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x56101f20e950 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x56101f20e9a0 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x56101f20ea50 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x56101f20ea00 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x56101f20ea20 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x56101f20ea70 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x56101f20eb20 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x56101f20ead0 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x56101f20eaf0 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x56101f20eb40 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x56101f20ec20 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x56101f20eba0 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x56101f20ebc0 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x56101f20ebe0 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x56101f20ee90 <line:4489:3, line:4493:3>
|   | |-TextComment 0x56101f20ec40 <line:4489:3> Text=" "
|   | |-InlineCommandComment 0x56101f20ec60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20ec80 <col:11, col:35> Text=" 0 Memory allocated. The "
|   | |-InlineCommandComment 0x56101f20ecd0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x56101f20ed00 <col:43, col:72> Text=" field of the block descriptor"
|   | |-TextComment 0x56101f20ed20 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   | |-TextComment 0x56101f20ed40 <line:4491:3> Text=" "
|   | |-InlineCommandComment 0x56101f20ed60 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20ed80 <col:11, col:44> Text=" -ENOMEM Returned without waiting."
|   | |-TextComment 0x56101f20eda0 <line:4492:3> Text=" "
|   | |-InlineCommandComment 0x56101f20edc0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f20ede0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | `-TextComment 0x56101f20ee00 <line:4493:3> Text=" "
|   |-VerbatimLineComment 0x56101f20eeb0 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x56101f20ef20 <line:4494:1>
|     `-TextComment 0x56101f20eef0 <col:1> Text=" "
|-FunctionDecl 0x56101f16c518 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x56101f16c390 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x56101f16c400 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x56101f20f4a0 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x56101f20f040 <line:4499:3>
|   | `-TextComment 0x56101f20f010 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20f060 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x56101f20f0c0 <col:10, col:68>
|   |   `-TextComment 0x56101f20f090 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x56101f20f110 <line:4501:3, col:47>
|   | `-TextComment 0x56101f20f0e0 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x56101f20f160 <line:4503:3>
|   | `-TextComment 0x56101f20f130 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20f180 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x56101f20f230 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x56101f20f1e0 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x56101f20f200 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x56101f20f250 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x56101f20f300 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x56101f20f2b0 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x56101f20f2d0 <line:4505:3> Text=" "
|   |-BlockCommandComment 0x56101f20f320 <col:4, line:4506:3> Name="return"
|   | `-ParagraphComment 0x56101f20f3a0 <line:4505:11, line:4506:3>
|   |   |-TextComment 0x56101f20f350 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|   |   `-TextComment 0x56101f20f370 <line:4506:3> Text=" "
|   |-VerbatimLineComment 0x56101f20f3c0 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x56101f20f430 <line:4507:1>
|     `-TextComment 0x56101f20f400 <col:1> Text=" "
|-FunctionDecl 0x56101f16c720 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x56101f16c620 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x56101f20f920 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x56101f20f540 <line:4511:3>
|   | `-TextComment 0x56101f20f510 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20f560 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x56101f20f5c0 <col:10, col:51>
|   |   `-TextComment 0x56101f20f590 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x56101f20f630 <line:4513:3, line:4514:15>
|   | |-TextComment 0x56101f20f5e0 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x56101f20f600 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x56101f20f680 <line:4516:3>
|   | `-TextComment 0x56101f20f650 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20f6a0 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x56101f20f730 <col:16, col:69>
|   |   `-TextComment 0x56101f20f700 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x56101f20f780 <line:4518:3>
|   | `-TextComment 0x56101f20f750 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20f7a0 <col:4, line:4519:3> Name="return"
|   | `-ParagraphComment 0x56101f20f820 <line:4518:11, line:4519:3>
|   |   |-TextComment 0x56101f20f7d0 <line:4518:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f20f7f0 <line:4519:3> Text=" "
|   |-VerbatimLineComment 0x56101f20f840 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x56101f20f8b0 <line:4520:1>
|     `-TextComment 0x56101f20f880 <col:1> Text=" "
|-FunctionDecl 0x56101f16eb80 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x56101f16ea80 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x56101f20fda0 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x56101f20f9c0 <line:4524:3>
|   | `-TextComment 0x56101f20f990 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20f9e0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x56101f20fa40 <col:10, col:51>
|   |   `-TextComment 0x56101f20fa10 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x56101f20fab0 <line:4526:3, line:4527:14>
|   | |-TextComment 0x56101f20fa60 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x56101f20fa80 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x56101f20fb00 <line:4529:3>
|   | `-TextComment 0x56101f20fad0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20fb20 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x56101f20fbb0 <col:13, col:37>
|   |   `-TextComment 0x56101f20fb80 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x56101f20fc00 <line:4531:3>
|   | `-TextComment 0x56101f20fbd0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20fc20 <col:4, line:4532:3> Name="return"
|   | `-ParagraphComment 0x56101f20fca0 <line:4531:11, line:4532:3>
|   |   |-TextComment 0x56101f20fc50 <line:4531:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f20fc70 <line:4532:3> Text=" "
|   |-VerbatimLineComment 0x56101f20fcc0 <col:4, col:20> Text=" K-MPOOL-002"
|   `-ParagraphComment 0x56101f20fd30 <line:4533:1>
|     `-TextComment 0x56101f20fd00 <col:1> Text=" "
|-FunctionDecl 0x56101f16edd8 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x56101f16ecc8 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x56101f210220 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x56101f20fe40 <line:4547:3>
|   | `-TextComment 0x56101f20fe10 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f20fe60 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x56101f20fec0 <col:10, col:36>
|   |   `-TextComment 0x56101f20fe90 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x56101f20ff30 <line:4549:3, line:4550:39>
|   | |-TextComment 0x56101f20fee0 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x56101f20ff00 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x56101f20ff80 <line:4552:3>
|   | `-TextComment 0x56101f20ff50 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f20ffa0 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x56101f210030 <col:15, col:53>
|   |   `-TextComment 0x56101f210000 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x56101f210080 <line:4554:3>
|   | `-TextComment 0x56101f210050 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2100a0 <col:4, line:4555:3> Name="return"
|   | `-ParagraphComment 0x56101f210120 <line:4554:11, line:4555:3>
|   |   |-TextComment 0x56101f2100d0 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x56101f2100f0 <line:4555:3> Text=" "
|   |-VerbatimLineComment 0x56101f210140 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x56101f2101b0 <line:4556:1>
|     `-TextComment 0x56101f210180 <col:1> Text=" "
|-FunctionDecl 0x56101f16ef48 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x56101f16eec0 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x56101f2107a0 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x56101f2102c0 <line:4560:3>
|   | `-TextComment 0x56101f210290 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2102e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f210340 <col:10, col:42>
|   |   `-TextComment 0x56101f210310 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x56101f2103e0 <line:4562:3, line:4564:23>
|   | |-TextComment 0x56101f210360 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x56101f210380 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x56101f2103a0 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x56101f2104b0 <line:4566:3, col:48>
|   | |-TextComment 0x56101f210400 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x56101f210450 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x56101f210470 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x56101f210500 <line:4568:3>
|   | `-TextComment 0x56101f2104d0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f210520 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x56101f2105b0 <col:14, col:53>
|   |   `-TextComment 0x56101f210580 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x56101f210600 <line:4570:3>
|   | `-TextComment 0x56101f2105d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f210620 <col:4, line:4571:3> Name="return"
|   | `-ParagraphComment 0x56101f2106a0 <line:4570:11, line:4571:3>
|   |   |-TextComment 0x56101f210650 <line:4570:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f210670 <line:4571:3> Text=" "
|   |-VerbatimLineComment 0x56101f2106c0 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x56101f210730 <line:4572:1>
|     `-TextComment 0x56101f210700 <col:1> Text=" "
|-FunctionDecl 0x56101f16f1b8 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x56101f16f028 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f16f098 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x56101f210d10 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x56101f210840 <line:4576:3>
|   | `-TextComment 0x56101f210810 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f210860 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x56101f2108c0 <col:10, col:48>
|   |   `-TextComment 0x56101f210890 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x56101f210930 <line:4578:3, line:4579:50>
|   | |-TextComment 0x56101f2108e0 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x56101f210900 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x56101f210980 <line:4581:3>
|   | `-TextComment 0x56101f210950 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f2109a0 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x56101f210a50 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x56101f210a00 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x56101f210a20 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x56101f210a70 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x56101f210b00 <col:15, col:53>
|   |   `-TextComment 0x56101f210ad0 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x56101f210b50 <line:4584:3>
|   | `-TextComment 0x56101f210b20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f210b70 <col:4, line:4585:3> Name="return"
|   | `-ParagraphComment 0x56101f210bf0 <line:4584:11, line:4585:3>
|   |   |-TextComment 0x56101f210ba0 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|   |   `-TextComment 0x56101f210bc0 <line:4585:3> Text=" "
|   |-VerbatimLineComment 0x56101f210c10 <col:4, col:19> Text=" K-HEAP-001"
|   `-ParagraphComment 0x56101f210c80 <line:4586:1>
|     `-TextComment 0x56101f210c50 <col:1> Text=" "
|-EnumDecl 0x56101f16f298 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x56101f16f350 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x56101f16f398 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x56101f16f3e0 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x56101f16f428 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x56101f16f470 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x56101f16f4b8 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x56101f16f570 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x56101f16f5b8 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x56101f16f600 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x56101f16f648 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x56101f16f690 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x56101f16f6d8 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x56101f16f748 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x56101f16f820 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-IntegerLiteral 0x56101f16f800 <col:28> 'int' 0
| `-EnumConstantDecl 0x56101f16f868 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x56101f16f8b0 prev 0x56101f127760 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x56101f16f978 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x56101f210de0 <line:4684:5, col:28>
| |   `-ParagraphComment 0x56101f210db0 <col:5, col:28>
| |     `-TextComment 0x56101f210d80 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x56101f170f00 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x56101f210ed0 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x56101f210ea0 <line:4688:4, line:4689:24>
| |     |-TextComment 0x56101f210e50 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x56101f210e70 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x56101f170f90 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x56101f210fa0 <line:4693:5, col:67>
|     `-ParagraphComment 0x56101f210f70 <col:5, col:67>
|       `-TextComment 0x56101f210f40 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x56101f171008 prev 0x56101f1276b0 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x56101f211150 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x56101f211040 <line:4704:3>
| | | `-TextComment 0x56101f211010 <col:3> Text=" "
| | |-BlockCommandComment 0x56101f211060 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x56101f2110c0 <col:10, col:20>
| | |   `-TextComment 0x56101f211090 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x56101f211110 <line:4706:1>
| |   `-TextComment 0x56101f2110e0 <col:1> Text=" "
| |-FieldDecl 0x56101f1710c8 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x56101f211220 <line:4708:5, col:28>
| |   `-ParagraphComment 0x56101f2111f0 <col:5, col:28>
| |     `-TextComment 0x56101f2111c0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x56101f1711c0 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x56101f2112f0 <line:4711:5, col:28>
| |   `-ParagraphComment 0x56101f2112c0 <col:5, col:28>
| |     `-TextComment 0x56101f211290 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x56101f171268 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x56101f171238 <col:12> 'int' 8
| | `-FullComment 0x56101f2113c0 <line:4714:5, col:63>
| |   `-ParagraphComment 0x56101f211390 <col:5, col:63>
| |     `-TextComment 0x56101f211360 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x56101f171310 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x56101f1712d8 <col:13> 'int' EnumConstant 0x56101f16f470 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x56101f211490 <line:4717:5, col:67>
| |   `-ParagraphComment 0x56101f211460 <col:5, col:67>
| |     `-TextComment 0x56101f211430 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x56101f1713c0 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-DeclRefExpr 0x56101f171388 <col:14> 'int' EnumConstant 0x56101f16f6d8 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x56101f211560 <line:4720:5, col:69>
| |   `-ParagraphComment 0x56101f211530 <col:5, col:69>
| |     `-TextComment 0x56101f211500 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x56101f171468 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-IntegerLiteral 0x56101f171438 <col:13> 'int' 1
| | `-FullComment 0x56101f211630 <line:4723:5, col:47>
| |   `-ParagraphComment 0x56101f211600 <col:5, col:47>
| |     `-TextComment 0x56101f2115d0 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x56101f1716c0 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ParenExpr 0x56101f171690 <line:4641:2, line:4646:9> 'int'
| | | `-BinaryOperator 0x56101f171668 <line:4641:3, line:4646:8> 'int' '-'
| | |   |-IntegerLiteral 0x56101f1714d8 <line:4641:3> 'int' 32
| | |   `-ParenExpr 0x56101f171648 <col:8, line:4646:8> 'int'
| | |     `-BinaryOperator 0x56101f171620 <line:4641:9, line:4645:11> 'int' '+'
| | |       |-BinaryOperator 0x56101f1715d8 <line:4641:9, line:4644:11> 'int' '+'
| | |       | |-BinaryOperator 0x56101f171588 <line:4641:9, line:4643:11> 'int' '+'
| | |       | | |-BinaryOperator 0x56101f171538 <line:4641:9, line:4642:11> 'int' '+'
| | |       | | | |-IntegerLiteral 0x56101f1714f8 <line:4641:9> 'int' 0
| | |       | | | `-IntegerLiteral 0x56101f171518 <line:4642:11> 'int' 8
| | |       | | `-DeclRefExpr 0x56101f171560 <line:4643:11> 'int' EnumConstant 0x56101f16f470 '_POLL_NUM_TYPES' 'int'
| | |       | `-DeclRefExpr 0x56101f1715b0 <line:4644:11> 'int' EnumConstant 0x56101f16f6d8 '_POLL_NUM_STATES' 'int'
| | |       `-IntegerLiteral 0x56101f171600 <line:4645:11> 'int' 1
| | `-FullComment 0x56101f211700 <line:4726:5, col:32>
| |   `-ParagraphComment 0x56101f2116d0 <col:5, col:32>
| |     `-TextComment 0x56101f2116a0 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x56101f171738 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x56101f2117d0 <line:4729:5, col:19>
| | | `-ParagraphComment 0x56101f2117a0 <col:5, col:19>
| | |   `-TextComment 0x56101f211770 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x56101f1717f8 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x56101f1718f0 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x56101f171960 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x56101f171a60 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x56101f171ad0 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x56101f171b70 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x56101f171bc8 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x56101f171b70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x56101f1717f8 'obj' 'void *'
| |-IndirectFieldDecl 0x56101f171c18 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x56101f171b70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x56101f1718f0 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x56101f171c68 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x56101f171b70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x56101f171960 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x56101f171cb8 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x56101f171b70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x56101f171a60 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x56101f171d08 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x56101f171b70 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x56101f171ad0 'queue' 'struct k_queue *'
|-FunctionDecl 0x56101f172a40 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x56101f171da0 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x56101f171e10 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x56101f171e88 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x56101f172900 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x56101f211f50 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x56101f211870 <line:4761:3>
|   | `-TextComment 0x56101f211840 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f211890 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x56101f2118f0 <col:10, col:53>
|   |   `-TextComment 0x56101f2118c0 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x56101f211960 <line:4763:3, line:4764:53>
|   | |-TextComment 0x56101f211910 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x56101f211930 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x56101f2119b0 <line:4766:3>
|   | `-TextComment 0x56101f211980 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f2119d0 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x56101f211a80 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x56101f211a30 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x56101f211a50 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x56101f211aa0 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x56101f211bd0 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x56101f211b00 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x56101f211b20 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x56101f211b40 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x56101f211b60 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x56101f211b80 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x56101f211bf0 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x56101f211ca0 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x56101f211c50 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x56101f211c70 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x56101f211cc0 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x56101f211d50 <col:14, col:43>
|   |   `-TextComment 0x56101f211d20 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x56101f211da0 <line:4774:3>
|   | `-TextComment 0x56101f211d70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f211dc0 <col:4, line:4775:3> Name="return"
|   | `-ParagraphComment 0x56101f211e40 <line:4774:11, line:4775:3>
|   |   |-TextComment 0x56101f211df0 <line:4774:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f211e10 <line:4775:3> Text=" "
|   |-VerbatimLineComment 0x56101f211e60 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x56101f211ed0 <line:4776:1>
|     `-TextComment 0x56101f211ea0 <col:1> Text=" "
|-FunctionDecl 0x56101f172d78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x56101f172b50 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x56101f172bc8 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x56101f172c38 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x56101f212b70 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x56101f211ff0 <line:4782:3>
|   | `-TextComment 0x56101f211fc0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f212010 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x56101f212070 <col:10, col:63>
|   |   `-TextComment 0x56101f212040 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x56101f212110 <line:4784:3, line:4786:61>
|   | |-TextComment 0x56101f212090 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x56101f2120b0 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x56101f2120d0 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x56101f2122a0 <line:4788:3, line:4796:68>
|   | |-TextComment 0x56101f212130 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x56101f212150 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x56101f212170 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x56101f212190 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x56101f2121b0 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x56101f2121d0 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x56101f2121f0 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x56101f212210 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x56101f212230 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x56101f212340 <line:4798:3, line:4800:44>
|   | |-TextComment 0x56101f2122c0 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x56101f2122e0 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x56101f212300 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x56101f2123b0 <line:4802:3, line:4803:41>
|   | |-TextComment 0x56101f212360 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x56101f212380 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x56101f212420 <line:4805:3, line:4806:30>
|   | |-TextComment 0x56101f2123d0 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x56101f2123f0 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x56101f212470 <line:4808:3>
|   | `-TextComment 0x56101f212440 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f212490 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x56101f212540 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x56101f2124f0 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x56101f212510 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x56101f212560 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x56101f212610 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x56101f2125c0 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x56101f2125e0 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x56101f212630 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x56101f212710 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x56101f212690 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x56101f2126b0 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x56101f2126d0 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x56101f212a50 <line:4814:3, line:4823:3>
|   | |-TextComment 0x56101f212730 <line:4814:3> Text=" "
|   | |-InlineCommandComment 0x56101f212750 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f212770 <col:11, col:42> Text=" 0 One or more events are ready."
|   | |-TextComment 0x56101f212790 <line:4815:3> Text=" "
|   | |-InlineCommandComment 0x56101f2127b0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f2127d0 <col:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   | |-TextComment 0x56101f2127f0 <line:4816:3> Text=" "
|   | |-InlineCommandComment 0x56101f212810 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f212830 <col:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   | |-TextComment 0x56101f212850 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   | |-TextComment 0x56101f212870 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   | |-TextComment 0x56101f212890 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   | |-TextComment 0x56101f2128b0 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   | |-TextComment 0x56101f2128d0 <line:4821:3> Text=" "
|   | |-InlineCommandComment 0x56101f2128f0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f212910 <col:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   | |-TextComment 0x56101f212930 <line:4822:3> Text=" "
|   | |-InlineCommandComment 0x56101f212950 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f212970 <col:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|   | `-TextComment 0x56101f212990 <line:4823:3> Text=" "
|   |-VerbatimLineComment 0x56101f212a70 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x56101f212ae0 <line:4824:1>
|     `-TextComment 0x56101f212ab0 <col:1> Text=" "
|-FunctionDecl 0x56101f172f80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x56101f172e80 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x56101f212ff0 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x56101f212c10 <line:4830:3>
|   | `-TextComment 0x56101f212be0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f212c30 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x56101f212c90 <col:10, col:42>
|   |   `-TextComment 0x56101f212c60 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x56101f212ce0 <line:4832:3, col:71>
|   | `-TextComment 0x56101f212cb0 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x56101f212d50 <line:4834:3>
|   | `-TextComment 0x56101f212d20 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f212d70 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x56101f212e00 <col:17, col:31>
|   |   `-TextComment 0x56101f212dd0 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x56101f212e50 <line:4836:3>
|   | `-TextComment 0x56101f212e20 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f212e70 <col:4, line:4837:3> Name="return"
|   | `-ParagraphComment 0x56101f212ef0 <line:4836:11, line:4837:3>
|   |   |-TextComment 0x56101f212ea0 <line:4836:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f212ec0 <line:4837:3> Text=" "
|   |-VerbatimLineComment 0x56101f212f10 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x56101f212f80 <line:4838:1>
|     `-TextComment 0x56101f212f50 <col:1> Text=" "
|-FunctionDecl 0x56101f1730d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x56101f173050 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x56101f173230 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x56101f1731a8 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x56101f1733c8 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x56101f173370 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x56101f173318 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x56101f170f00
|     | `-ImplicitCastExpr 0x56101f173300 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x56101f1732d8 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x56101f1731a8 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x56101f173350 <col:21> 'unsigned int' 0
|-FunctionDecl 0x56101f173630 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x56101f173408 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x56101f173480 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x56101f1734f8 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x56101f213540 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x56101f213090 <line:4856:3>
|   | `-TextComment 0x56101f213060 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2130b0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x56101f213110 <col:10, col:68>
|   |   `-TextComment 0x56101f2130e0 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x56101f213160 <line:4858:3>
|   | `-TextComment 0x56101f213130 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f213180 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x56101f213230 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x56101f2131e0 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x56101f213200 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x56101f213250 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x56101f213330 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x56101f2132b0 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x56101f2132d0 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x56101f2132f0 <line:4861:3> Text=" "
|   |-ParamCommandComment 0x56101f213350 <col:4, line:4864:3> [in] implicitly Param="result" ParamIndex=2
|   | `-ParagraphComment 0x56101f213450 <line:4861:17, line:4864:3>
|   |   |-TextComment 0x56101f2133b0 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|   |   |-TextComment 0x56101f2133d0 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|   |   |-TextComment 0x56101f2133f0 <line:4863:3, col:27> Text="		   value if it was not."
|   |   `-TextComment 0x56101f213410 <line:4864:3> Text=" "
|   |-VerbatimLineComment 0x56101f213470 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x56101f2134e0 <line:4865:1>
|     `-TextComment 0x56101f2134b0 <col:1> Text=" "
|-FunctionDecl 0x56101f173d80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x56101f173740 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x56101f1737b8 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x56101f213db0 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x56101f2135e0 <line:4870:3>
|   | `-TextComment 0x56101f2135b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f213600 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x56101f213660 <col:10, col:38>
|   |   `-TextComment 0x56101f213630 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x56101f213780 <line:4872:3, line:4874:57>
|   | |-TextComment 0x56101f213680 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x56101f2136a0 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x56101f2136c0 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x56101f213710 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x56101f213730 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x56101f213870 <line:4876:3, line:4880:27>
|   | |-TextComment 0x56101f2137a0 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x56101f2137c0 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x56101f2137e0 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x56101f213800 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x56101f213820 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x56101f2138c0 <line:4882:3>
|   | `-TextComment 0x56101f213890 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2138e0 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x56101f213990 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x56101f213910 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x56101f213930 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x56101f213950 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x56101f2139e0 <line:4886:3>
|   | `-TextComment 0x56101f2139b0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f213a00 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x56101f213ab0 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x56101f213a60 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x56101f213a80 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x56101f213ad0 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x56101f213b60 <col:17, col:70>
|   |   `-TextComment 0x56101f213b30 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x56101f213ca0 <line:4889:3, line:4891:3>
|   | |-TextComment 0x56101f213b80 <line:4889:3> Text=" "
|   | |-InlineCommandComment 0x56101f213ba0 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f213bc0 <col:11, col:51> Text=" 0 The signal was delivered successfully."
|   | |-TextComment 0x56101f213be0 <line:4890:3> Text=" "
|   | |-InlineCommandComment 0x56101f213c00 <col:4, col:10> Name="retval" RenderNormal
|   | |-TextComment 0x56101f213c20 <col:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|   | `-TextComment 0x56101f213c40 <line:4891:3> Text=" "
|   |-VerbatimLineComment 0x56101f213cc0 <col:4, col:19> Text=" K-POLL-001"
|   `-ParagraphComment 0x56101f213d30 <line:4892:1>
|     `-TextComment 0x56101f213d00 <col:1> Text=" "
|-FunctionDecl 0x56101f173ff0 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x56101f173e68 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x56101f173ed8 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x56101f213ea0 <line:4897:3, col:12>
|   `-ParagraphComment 0x56101f213e70 <col:3, col:12>
|     |-TextComment 0x56101f213e20 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f213e40 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f174188 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x56101f1742b8 <line:4922:1, line:4924:1>
| | `-CallExpr 0x56101f174268 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x56101f174250 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x56101f174228 <col:2> 'void (void)' Function 0x56101f0ec8b0 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x56101f2144a0 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x56101f213f40 <line:4904:3>
|   | `-TextComment 0x56101f213f10 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f213f60 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x56101f213fd0 <line:4905:3>
|   | `-TextComment 0x56101f213fa0 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f213ff0 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x56101f2140b0 <line:4906:3, col:5>
|   | |-TextComment 0x56101f214030 <col:3> Text=" "
|   | |-TextComment 0x56101f214050 <col:4> Text="@"
|   | `-TextComment 0x56101f214070 <col:5> Text="{"
|   |-ParagraphComment 0x56101f214100 <line:4909:3>
|   | `-TextComment 0x56101f2140d0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f214120 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x56101f214180 <col:10, col:28>
|   |   `-TextComment 0x56101f214150 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x56101f2141d0 <line:4911:3, col:63>
|   | `-TextComment 0x56101f2141a0 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x56101f214290 <line:4913:3, line:4916:59>
|   | |-TextComment 0x56101f2141f0 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x56101f214210 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x56101f214230 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x56101f214250 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x56101f2142e0 <line:4918:3>
|   | `-TextComment 0x56101f2142b0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f214300 <col:4, line:4919:3> Name="return"
|   | `-ParagraphComment 0x56101f214380 <line:4918:11, line:4919:3>
|   |   |-TextComment 0x56101f214330 <line:4918:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f214350 <line:4919:3> Text=" "
|   |-VerbatimLineComment 0x56101f2143a0 <col:4, col:23> Text=" K-CPU-IDLE-001"
|   `-ParagraphComment 0x56101f214410 <line:4920:1>
|     `-TextComment 0x56101f2143e0 <col:1> Text=" "
|-FunctionDecl 0x56101f174370 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x56101f1742e8 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x56101f174528 <line:4938:1, line:4940:1>
| | `-CallExpr 0x56101f174480 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x56101f174468 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x56101f174418 <col:2> 'void (unsigned int)' Function 0x56101f0eca50 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x56101f1744b0 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x56101f174440 <col:23> 'unsigned int' lvalue ParmVar 0x56101f1742e8 'key' 'unsigned int'
| `-FullComment 0x56101f214920 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x56101f214540 <line:4927:3>
|   | `-TextComment 0x56101f214510 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f214560 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f2145c0 <col:10, col:49>
|   |   `-TextComment 0x56101f214590 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x56101f214630 <line:4929:3, line:4930:54>
|   | |-TextComment 0x56101f2145e0 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x56101f214600 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x56101f214680 <line:4932:3>
|   | `-TextComment 0x56101f214650 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f2146a0 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x56101f214730 <col:14, col:61>
|   |   `-TextComment 0x56101f214700 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x56101f214780 <line:4934:3>
|   | `-TextComment 0x56101f214750 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2147a0 <col:4, line:4935:3> Name="return"
|   | `-ParagraphComment 0x56101f214820 <line:4934:11, line:4935:3>
|   |   |-TextComment 0x56101f2147d0 <line:4934:11, col:14> Text=" N/A"
|   |   `-TextComment 0x56101f2147f0 <line:4935:3> Text=" "
|   |-VerbatimLineComment 0x56101f214840 <col:4, col:23> Text=" K-CPU-IDLE-002"
|   `-ParagraphComment 0x56101f2148b0 <line:4936:1>
|     `-TextComment 0x56101f214880 <col:1> Text=" "
|-FunctionDecl 0x56101f174650 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x56101f174550 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x56101f214a10 <line:4947:3, col:12>
|   `-ParagraphComment 0x56101f2149e0 <col:3, col:12>
|     |-TextComment 0x56101f214990 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f2149b0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f174ab0 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x56101f174810 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x56101f174888 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x56101f1748f8 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x56101f174970 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x56101f214b00 <line:5006:3, col:12>
|   `-ParagraphComment 0x56101f214ad0 <col:3, col:12>
|     |-TextComment 0x56101f214a80 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f214aa0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f174c58 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x56101f214bf0 <line:5025:3, col:12>
|   `-ParagraphComment 0x56101f214bc0 <col:3, col:12>
|     |-TextComment 0x56101f214b70 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f214b90 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f177188 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x56101f177100 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x56101f214ce0 <line:5029:3, col:12>
|   `-ParagraphComment 0x56101f214cb0 <col:3, col:12>
|     |-TextComment 0x56101f214c60 <col:3> Text=" "
|     `-InlineCommandComment 0x56101f214c80 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x56101f1774c8 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x56101f1773b8 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x56101f177668 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x56101f1775f0 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x56101f1775c8 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x56101f1775b0 <col:17> 'k_thread_stack_t *' <LValueToRValue>
| |       `-DeclRefExpr 0x56101f177570 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x56101f1773b8 'sym' 'k_thread_stack_t *'
| `-FullComment 0x56101f215140 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x56101f214da0 <line:5168:3>
|   | `-TextComment 0x56101f214d70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f214dc0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x56101f214e20 <col:10, col:52>
|   |   `-TextComment 0x56101f214df0 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x56101f214e90 <line:5170:3, line:5171:76>
|   | |-TextComment 0x56101f214e40 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x56101f214e60 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x56101f214ee0 <line:5173:3>
|   | `-TextComment 0x56101f214eb0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f214f00 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x56101f214fb0 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x56101f214f60 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x56101f214f80 <line:5174:3> Text=" "
|   |-BlockCommandComment 0x56101f214fd0 <col:4, line:5175:3> Name="return"
|   | `-ParagraphComment 0x56101f215050 <line:5174:11, line:5175:3>
|   |   |-TextComment 0x56101f215000 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|   |   `-TextComment 0x56101f215020 <line:5175:3> Text=" "
|   |-VerbatimLineComment 0x56101f215070 <col:4, col:21> Text=" K-TSTACK-001"
|   `-ParagraphComment 0x56101f2150e0 <line:5176:1>
|     `-TextComment 0x56101f2150b0 <col:1> Text=" "
|-RecordDecl 0x56101f177680 prev 0x56101f127898 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x56101f177748 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x56101f215210 <line:5208:5, col:39>
| |   `-ParagraphComment 0x56101f2151e0 <col:5, col:39>
| |     `-TextComment 0x56101f2151b0 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x56101f1777c8 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x56101f2152e0 <line:5210:5, col:30>
|     `-ParagraphComment 0x56101f2152b0 <col:5, col:30>
|       `-TextComment 0x56101f215280 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x56101f177838 prev 0x56101f127810 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x56101f215490 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x56101f215380 <line:5219:3>
| | | `-TextComment 0x56101f215350 <col:3> Text=" "
| | |-BlockCommandComment 0x56101f2153a0 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x56101f215400 <col:10, col:23>
| | |   `-TextComment 0x56101f2153d0 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x56101f215450 <line:5221:1>
| |   `-TextComment 0x56101f215420 <col:1> Text=" "
| |-FieldDecl 0x56101f1778f8 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x56101f215560 <line:5227:5, col:14>
| |   `-ParagraphComment 0x56101f215530 <col:5, col:14>
| |     `-TextComment 0x56101f215500 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x56101f177978 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x56101f215630 <line:5229:5, col:40>
|     `-ParagraphComment 0x56101f215600 <col:5, col:40>
|       `-TextComment 0x56101f2155d0 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x56101f177e50 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x56101f177aa0 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x56101f177b10 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x56101f177d20 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x56101f215c00 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x56101f2156d0 <line:5235:3>
|   | `-TextComment 0x56101f2156a0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2156f0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x56101f215750 <col:10, col:37>
|   |   `-TextComment 0x56101f215720 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x56101f2157a0 <line:5237:3, col:68>
|   | `-TextComment 0x56101f215770 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x56101f215810 <line:5239:3, line:5240:25>
|   | |-TextComment 0x56101f2157c0 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x56101f2157e0 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x56101f215860 <line:5242:3>
|   | `-TextComment 0x56101f215830 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f215880 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x56101f215930 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x56101f2158e0 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x56101f215900 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x56101f215950 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x56101f215a00 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x56101f2159b0 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x56101f2159d0 <line:5244:3> Text=" "
|   |-ParamCommandComment 0x56101f215a20 <col:4, line:5246:3> [in] implicitly Param="parts" ParamIndex=2
|   | `-ParagraphComment 0x56101f215b00 <line:5244:16, line:5246:3>
|   |   |-TextComment 0x56101f215a80 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|   |   |-TextComment 0x56101f215aa0 <line:5245:3, col:37> Text="              if num_parts is zero."
|   |   `-TextComment 0x56101f215ac0 <line:5246:3> Text=" "
|   |-VerbatimLineComment 0x56101f215b20 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x56101f215b90 <line:5247:1>
|     `-TextComment 0x56101f215b60 <col:1> Text=" "
|-FunctionDecl 0x56101f178060 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x56101f177f60 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x56101f215f80 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x56101f215ca0 <line:5251:3>
|   | `-TextComment 0x56101f215c70 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f215cc0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x56101f215d20 <col:10, col:34>
|   |   `-TextComment 0x56101f215cf0 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x56101f215d70 <line:5253:3, col:27>
|   | `-TextComment 0x56101f215d40 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x56101f215dc0 <line:5255:3>
|   | `-TextComment 0x56101f215d90 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f215de0 <col:4, line:5256:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x56101f215e90 <line:5255:17, line:5256:3>
|   |   |-TextComment 0x56101f215e40 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|   |   `-TextComment 0x56101f215e60 <line:5256:3> Text=" "
|   |-VerbatimLineComment 0x56101f215eb0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x56101f215f20 <line:5257:1>
|     `-TextComment 0x56101f215ef0 <col:1> Text=" "
|-FunctionDecl 0x56101f178990 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x56101f1787f0 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x56101f178878 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x56101f216620 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x56101f216020 <line:5261:3>
|   | `-TextComment 0x56101f215ff0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f216040 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x56101f2160a0 <col:10, col:54>
|   |   `-TextComment 0x56101f216070 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x56101f216110 <line:5263:3, line:5264:29>
|   | |-TextComment 0x56101f2160c0 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x56101f2160e0 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x56101f2162c0 <line:5266:3, line:5275:28>
|   | |-TextComment 0x56101f216130 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x56101f216150 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x56101f216170 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x56101f216190 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x56101f2161b0 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x56101f2161d0 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x56101f2161f0 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x56101f216210 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x56101f216230 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x56101f216250 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x56101f216330 <line:5277:3, line:5278:12>
|   | |-TextComment 0x56101f2162e0 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x56101f216300 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x56101f216380 <line:5280:3>
|   | `-TextComment 0x56101f216350 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f2163a0 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x56101f216450 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x56101f216400 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x56101f216420 <line:5281:3> Text=" "
|   |-ParamCommandComment 0x56101f216470 <col:4, line:5282:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x56101f216520 <line:5281:15, line:5282:3>
|   |   |-TextComment 0x56101f2164d0 <line:5281:15, col:47> Text=" The memory partition to be added"
|   |   `-TextComment 0x56101f2164f0 <line:5282:3> Text=" "
|   |-VerbatimLineComment 0x56101f216540 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x56101f2165b0 <line:5283:1>
|     `-TextComment 0x56101f216580 <col:1> Text=" "
|-FunctionDecl 0x56101f178ba8 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x56101f178a90 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x56101f178b18 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x56101f216a70 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x56101f2166c0 <line:5288:3>
|   | `-TextComment 0x56101f216690 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2166e0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x56101f216740 <col:10, col:57>
|   |   `-TextComment 0x56101f216710 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x56101f216790 <line:5290:3, col:50>
|   | `-TextComment 0x56101f216760 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x56101f2167e0 <line:5292:3>
|   | `-TextComment 0x56101f2167b0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f216800 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x56101f2168b0 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x56101f216860 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x56101f216880 <line:5293:3> Text=" "
|   |-ParamCommandComment 0x56101f2168d0 <col:4, line:5294:3> [in] implicitly Param="part" ParamIndex=1
|   | `-ParagraphComment 0x56101f216980 <line:5293:15, line:5294:3>
|   |   |-TextComment 0x56101f216930 <line:5293:15, col:49> Text=" The memory partition to be removed"
|   |   `-TextComment 0x56101f216950 <line:5294:3> Text=" "
|   |-VerbatimLineComment 0x56101f2169a0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x56101f216a10 <line:5295:1>
|     `-TextComment 0x56101f2169e0 <col:1> Text=" "
|-FunctionDecl 0x56101f178e30 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x56101f178cb0 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x56101f178d20 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f216f20 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x56101f216b10 <line:5300:3>
|   | `-TextComment 0x56101f216ae0 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f216b30 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x56101f216b90 <col:10, col:44>
|   |   `-TextComment 0x56101f216b60 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x56101f216be0 <line:5302:3, col:37>
|   | `-TextComment 0x56101f216bb0 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x56101f216c30 <line:5304:3>
|   | `-TextComment 0x56101f216c00 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f216c50 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x56101f216d00 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x56101f216cb0 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x56101f216cd0 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x56101f216d40 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x56101f216dd0 <col:17, col:71>
|   |   `-TextComment 0x56101f216da0 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   |-ParagraphComment 0x56101f216e20 <line:5307:3>
|   | `-TextComment 0x56101f216df0 <col:3> Text=" "
|   |-VerbatimLineComment 0x56101f216e40 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x56101f216eb0 <line:5308:1>
|     `-TextComment 0x56101f216e80 <col:1> Text=" "
|-FunctionDecl 0x56101f178fa0 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x56101f178f18 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x56101f2172a0 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x56101f216fc0 <line:5313:3>
|   | `-TextComment 0x56101f216f90 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f216fe0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x56101f217040 <col:10, col:49>
|   |   `-TextComment 0x56101f217010 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x56101f217090 <line:5315:3, col:42>
|   | `-TextComment 0x56101f217060 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x56101f2170e0 <line:5317:3>
|   | `-TextComment 0x56101f2170b0 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f217100 <col:4, line:5318:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f2171b0 <line:5317:17, line:5318:3>
|   |   |-TextComment 0x56101f217160 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|   |   `-TextComment 0x56101f217180 <line:5318:3> Text=" "
|   |-VerbatimLineComment 0x56101f2171d0 <col:4, col:17> Text=" K-MD-001"
|   `-ParagraphComment 0x56101f217240 <line:5319:1>
|     `-TextComment 0x56101f217210 <col:1> Text=" "
|-FunctionDecl 0x56101f179198 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x56101f1790d0 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x56101f2178c0 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x56101f217340 <line:5337:3>
|   | `-TextComment 0x56101f217310 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f217360 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x56101f2173c0 <col:10, col:69>
|   |   `-TextComment 0x56101f217390 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x56101f217430 <line:5339:3, line:5340:56>
|   | |-TextComment 0x56101f2173e0 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x56101f217400 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x56101f217480 <line:5342:3>
|   | `-TextComment 0x56101f217450 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f2174a0 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x56101f217520 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x56101f2174d0 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x56101f2174f0 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x56101f217570 <line:5346:3>
|   | `-TextComment 0x56101f217540 <col:3> Text=" "
|   |-BlockCommandComment 0x56101f217590 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x56101f217610 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x56101f2175c0 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x56101f2175e0 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x56101f217660 <line:5350:3>
|   | `-TextComment 0x56101f217630 <col:3> Text=" "
|   |-ParamCommandComment 0x56101f217680 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x56101f217710 <col:17, col:30>
|   |   `-TextComment 0x56101f2176e0 <col:17, col:30> Text=" ID of thread."
|   `-ParagraphComment 0x56101f217850 <line:5352:3, line:5354:74>
|     |-TextComment 0x56101f217730 <line:5352:3> Text=" "
|     |-InlineCommandComment 0x56101f217750 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f217770 <col:11, col:30> Text=" 0       On success."
|     |-TextComment 0x56101f217790 <line:5353:3> Text=" "
|     |-InlineCommandComment 0x56101f2177b0 <col:4, col:10> Name="retval" RenderNormal
|     |-TextComment 0x56101f2177d0 <col:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|     `-TextComment 0x56101f2177f0 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x56101f17d8f0 prev 0x56101f129d00 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x56101f1795e0 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x56101f179668 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x56101f17dad0 prev 0x56101f12be30 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x56101f17d9b8 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x56101f17da40 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x56101f17ddd8 <line:26:1, line:35:1>
|   |-DoStmt 0x56101f17dc60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f17dc28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f17dbd8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f17dc40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f17dd70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x56101f17dd58 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f17dc80 <col:2> 'void (void *, struct k_thread *)' Function 0x56101f17d8f0 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x56101f17dda8 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f17dca8 <col:31> 'void *' lvalue ParmVar 0x56101f17d9b8 'object' 'void *'
|     `-ImplicitCastExpr 0x56101f17ddc0 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f17dcd0 <col:39> 'struct k_thread *' lvalue ParmVar 0x56101f17da40 'thread' 'struct k_thread *'
|-FunctionDecl 0x56101f17de98 prev 0x56101f12b928 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x56101f17de10 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x56101f17dfe0 prev 0x56101f12c1b8 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x56101f17df58 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x56101f17e238 <line:40:1, line:49:1>
|   |-DoStmt 0x56101f17e168 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f17e130 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f17e0e0 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f17e148 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f17e1f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x56101f17e1d8 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f17e188 <col:2> 'void (void *)' Function 0x56101f17de98 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x56101f17e220 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f17e1b0 <col:26> 'void *' lvalue ParmVar 0x56101f17df58 'object' 'void *'
|-FunctionDecl 0x56101f17e308 prev 0x56101f12c6d8 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x56101f17e278 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x56101f17e460 prev 0x56101f12c580 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x56101f17e3d0 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x56101f17e730 <line:54:1, line:62:1>
|   |-DoStmt 0x56101f17e5e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f17e5b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f17e560 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f17e5c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f17e718 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x56101f17e6d0 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x56101f17e6b8 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f17e608 <col:9> 'void *(enum k_objects)' Function 0x56101f17e308 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x56101f17e700 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x56101f17e630 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x56101f17e3d0 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x56101f17ec90 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x56101f17e778 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x56101f17e7e8 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x56101f17e858 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f17e900 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x56101f17e978 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x56101f17e9f0 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x56101f17ea68 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x56101f17eae0 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x56101f17eb50 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x56101f17ebc0 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x56101f17f288 prev 0x56101f130fd0 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x56101f17eda8 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x56101f17ee18 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x56101f17ee88 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f17eef8 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x56101f17ef70 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x56101f17efe8 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x56101f17f060 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x56101f17f0d8 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x56101f17f148 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x56101f17f1b8 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x56101f17f820 <line:67:1, line:82:1>
|   |-DoStmt 0x56101f17f458 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f17f420 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f17f3d0 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f17f438 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f17f808 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x56101f17f6a0 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x56101f17f688 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f17f478 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x56101f17ec90 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x56101f17f718 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f17f4a0 <col:32> 'struct k_thread *' lvalue ParmVar 0x56101f17eda8 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x56101f17f730 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f17f4c8 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x56101f17ee18 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x56101f17f748 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f17f4f0 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x56101f17ee88 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x56101f17f760 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f17f518 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x56101f17eef8 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x56101f17f778 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f17f540 <col:70> 'void *' lvalue ParmVar 0x56101f17ef70 'p1' 'void *'
|       |-ImplicitCastExpr 0x56101f17f790 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f17f568 <col:74> 'void *' lvalue ParmVar 0x56101f17efe8 'p2' 'void *'
|       |-ImplicitCastExpr 0x56101f17f7a8 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f17f590 <col:78> 'void *' lvalue ParmVar 0x56101f17f060 'p3' 'void *'
|       |-ImplicitCastExpr 0x56101f17f7c0 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f17f5b8 <col:82> 'int' lvalue ParmVar 0x56101f17f0d8 'prio' 'int'
|       |-ImplicitCastExpr 0x56101f17f7d8 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f17f5e0 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f17f148 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56101f17f7f0 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f17f608 <col:97> 's32_t':'int' lvalue ParmVar 0x56101f17f1b8 'delay' 's32_t':'int'
|-FunctionDecl 0x56101f17f910 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x56101f17f850 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x56101f17fa50 prev 0x56101f134a60 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x56101f17f9c8 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x56101f17fd20 <line:87:1, line:95:1>
|   |-DoStmt 0x56101f17fbd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f17fba0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f17fb50 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f17fbb8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f17fd08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x56101f17fcc0 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x56101f17fca8 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f17fbf8 <col:9> 's32_t (s32_t)' Function 0x56101f17f910 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x56101f17fcf0 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f17fc20 <col:24> 's32_t':'int' lvalue ParmVar 0x56101f17f9c8 'ms' 's32_t':'int'
|-FunctionDecl 0x56101f17fdd8 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x56101f17fd50 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x56101f17ff18 prev 0x56101f134bd0 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x56101f17fe90 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x56101f180188 <line:100:1, line:108:1>
|   |-DoStmt 0x56101f1800a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f180068 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f180018 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f180080 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f180170 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x56101f180128 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x56101f180110 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1800c0 <col:9> 's32_t (s32_t)' Function 0x56101f17fdd8 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x56101f180158 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f1800e8 <col:25> 's32_t':'int' lvalue ParmVar 0x56101f17fe90 'us' 's32_t':'int'
|-FunctionDecl 0x56101f180240 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x56101f1801b8 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x56101f180380 prev 0x56101f134d80 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x56101f1802f8 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x56101f180608 <line:113:1, line:122:1>
|   |-DoStmt 0x56101f180508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1804d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f180480 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1804e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f1805c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x56101f1805a8 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f180528 <col:2> 'void (u32_t)' Function 0x56101f180240 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x56101f1805f0 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56101f180550 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f1802f8 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x56101f180648 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x56101f180708 prev 0x56101f134ee8 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x56101f180948 <line:127:1, line:136:1>
|   |-DoStmt 0x56101f180888 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f180850 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f180800 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f180868 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f180920 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x56101f1808f8 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x56101f1808a8 <col:2> 'void ()' Function 0x56101f180648 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x56101f180a00 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x56101f180978 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f180b40 prev 0x56101f1350d0 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f180ab8 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x56101f180df8 <line:141:1, line:150:1>
|   |-DoStmt 0x56101f180cc8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f180c90 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f180c40 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f180ca8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f180db0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x56101f180d98 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f180ce8 <col:2> 'void (k_tid_t)' Function 0x56101f180a00 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x56101f180de0 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f180d10 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f180ab8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f180e98 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x56101f180f58 prev 0x56101f1352c0 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x56101f1811d0 <line:155:1, line:163:1>
|   |-DoStmt 0x56101f1810d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1810a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f181050 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1810b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f1811b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x56101f181190 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x56101f181178 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56101f1810f8 <col:9> 'k_tid_t ()' Function 0x56101f180e98 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x56101f181288 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x56101f181200 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f1813c8 prev 0x56101f135420 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f181340 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x56101f181620 <line:168:1, line:177:1>
|   |-DoStmt 0x56101f181550 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f181518 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1814c8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f181530 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f1815d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x56101f1815c0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f181570 <col:2> 'void (k_tid_t)' Function 0x56101f181288 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x56101f181608 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f181598 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f181340 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f1816d8 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x56101f181650 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f181818 prev 0x56101f135590 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f181790 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x56101f181a88 <line:182:1, line:191:1>
|   |-DoStmt 0x56101f1819b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f181980 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f181930 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f181998 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f181a40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x56101f181a28 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f1819d8 <col:2> 'void (k_tid_t)' Function 0x56101f1816d8 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x56101f181a70 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f181a00 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f181790 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f181b48 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x56101f181ab8 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f181c90 prev 0x56101f135db8 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f181c00 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x56101f181f60 <line:196:1, line:204:1>
|   |-DoStmt 0x56101f181e18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f181de0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f181d90 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f181df8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f181f48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x56101f181f00 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x56101f181ee8 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f181e38 <col:9> 'int (k_tid_t)' Function 0x56101f181b48 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x56101f181f30 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f181e60 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f181c00 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f182098 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x56101f181f90 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x56101f182008 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x56101f182260 prev 0x56101f136020 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x56101f182158 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x56101f1821d0 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x56101f182568 <line:209:1, line:218:1>
|   |-DoStmt 0x56101f1823f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1823b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f182368 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1823d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f182500 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x56101f1824e8 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f182410 <col:2> 'void (k_tid_t, int)' Function 0x56101f182098 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x56101f182538 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f182438 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f182158 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x56101f182550 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56101f182460 <col:39> 'int' lvalue ParmVar 0x56101f1821d0 'prio' 'int'
|-FunctionDecl 0x56101f1826a0 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x56101f182598 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x56101f182610 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x56101f182868 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x56101f182760 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x56101f1827d8 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x56101f182b38 <line:223:1, line:232:1>
|   |-DoStmt 0x56101f182a20 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1829e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f182998 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f182a00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f182ad0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x56101f182ab8 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f182a40 <col:2> 'void (k_tid_t, int)' Function 0x56101f1826a0 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x56101f182b08 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f182a68 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f182760 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x56101f182b20 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56101f182a90 <col:39> 'int' lvalue ParmVar 0x56101f1827d8 'deadline' 'int'
|-FunctionDecl 0x56101f182bf0 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x56101f182b68 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f182d30 prev 0x56101f1368a0 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f182ca8 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x56101f182f88 <line:237:1, line:246:1>
|   |-DoStmt 0x56101f182eb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f182e80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f182e30 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f182e98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f182f40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x56101f182f28 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f182ed8 <col:2> 'void (k_tid_t)' Function 0x56101f182bf0 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x56101f182f70 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f182f00 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f182ca8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f183040 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x56101f182fb8 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f183180 prev 0x56101f136a10 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x56101f1830f8 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x56101f1833d8 <line:251:1, line:260:1>
|   |-DoStmt 0x56101f183308 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1832d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f183280 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1832e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f183390 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x56101f183378 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f183328 <col:2> 'void (k_tid_t)' Function 0x56101f183040 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x56101f1833c0 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f183350 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f1830f8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x56101f183450 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x56101f183518 prev 0x56101f136fb0 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x56101f183760 <line:265:1, line:273:1>
|   |-DoStmt 0x56101f183698 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f183660 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f183610 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f183678 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f183748 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x56101f183720 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x56101f183708 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56101f1836b8 <col:9> 'int ()' Function 0x56101f183450 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x56101f183820 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x56101f183798 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x56101f183978 prev 0x56101f1376d8 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x56101f1838e0 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x56101f183bd0 <line:278:1, line:287:1>
|   |-DoStmt 0x56101f183b00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f183ac8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f183a78 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f183ae0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f183b88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x56101f183b70 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f183b20 <col:2> 'void (void *)' Function 0x56101f183820 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x56101f183bb8 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f183b48 <col:34> 'void *' lvalue ParmVar 0x56101f1838e0 'value' 'void *'
|-FunctionDecl 0x56101f183c40 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x56101f183d08 prev 0x56101f1378b0 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x56101f183f50 <line:292:1, line:300:1>
|   |-DoStmt 0x56101f183e88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f183e50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f183e00 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f183e68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f183f38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x56101f183f10 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x56101f183ef8 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56101f183ea8 <col:9> 'void *()' Function 0x56101f183c40 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x56101f184090 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x56101f183f80 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x56101f183ff8 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x56101f184260 prev 0x56101f137b18 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x56101f184150 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x56101f1841c8 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x56101f184580 <line:305:1, line:313:1>
|   |-DoStmt 0x56101f1843f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1843b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f184368 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1843d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f184568 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x56101f184500 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x56101f1844e8 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f184410 <col:9> 'int (k_tid_t, const char *)' Function 0x56101f184090 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x56101f184538 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f184438 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f184150 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x56101f184550 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f184460 <col:45> 'const char *' lvalue ParmVar 0x56101f1841c8 'value' 'const char *'
|-FunctionDecl 0x56101f184738 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x56101f1845b0 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x56101f184628 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x56101f184698 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x56101f1849a0 prev 0x56101f138018 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x56101f184800 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x56101f184878 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x56101f1848e8 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x56101f184d10 <line:318:1, line:326:1>
|   |-DoStmt 0x56101f184b38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f184b00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f184ab0 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f184b18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f184cf8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x56101f184c70 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x56101f184c58 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f184b58 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x56101f184738 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x56101f184cb0 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f184b80 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x56101f184800 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x56101f184cc8 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f184ba8 <col:46> 'char *' lvalue ParmVar 0x56101f184878 'buf' 'char *'
|       `-ImplicitCastExpr 0x56101f184ce0 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x56101f184bd0 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x56101f1848e8 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x56101f184ed0 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x56101f184d58 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x56101f184dc8 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x56101f184e38 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x56101f185128 prev 0x56101f13b490 <line:330:1, line:340:1> line:330:20 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x56101f184fb0 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x56101f185020 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x56101f185090 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x56101f185478 <line:331:1, line:340:1>
|   |-DoStmt 0x56101f1852c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f185288 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f185238 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1852a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f1853f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x56101f1853d8 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f1852e0 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x56101f184ed0 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x56101f185430 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f185308 <col:23> 'struct k_timer *' lvalue ParmVar 0x56101f184fb0 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x56101f185448 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f185330 <col:30> 's32_t':'int' lvalue ParmVar 0x56101f185020 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x56101f185460 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56101f185358 <col:40> 's32_t':'int' lvalue ParmVar 0x56101f185090 'period' 's32_t':'int'
|-FunctionDecl 0x56101f185548 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x56101f1854c0 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x56101f1856a0 prev 0x56101f13b628 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f185618 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x56101f185928 <line:345:1, line:354:1>
|   |-DoStmt 0x56101f185828 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1857f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1857a0 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f185808 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f1858e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x56101f1858c8 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f185848 <col:2> 'void (struct k_timer *)' Function 0x56101f185548 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x56101f185910 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f185870 <col:22> 'struct k_timer *' lvalue ParmVar 0x56101f185618 'timer' 'struct k_timer *'
|-FunctionDecl 0x56101f186230 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x56101f1861a8 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x56101f186388 prev 0x56101f13b820 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f186300 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x56101f186650 <line:359:1, line:367:1>
|   |-DoStmt 0x56101f186510 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1864d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f186488 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1864f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f186638 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x56101f1865f0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56101f1865d8 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f186530 <col:9> 'u32_t (struct k_timer *)' Function 0x56101f186230 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x56101f186620 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f186558 <col:35> 'struct k_timer *' lvalue ParmVar 0x56101f186300 'timer' 'struct k_timer *'
|-FunctionDecl 0x56101f186720 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x56101f186698 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x56101f186878 prev 0x56101f13c218 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f1867f0 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x56101f186ae8 <line:372:1, line:380:1>
|   |-DoStmt 0x56101f186a00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1869c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f186978 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1869e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f186ad0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x56101f186a88 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56101f186a70 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f186a20 <col:9> 'u32_t (struct k_timer *)' Function 0x56101f186720 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x56101f186ab8 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f186a48 <col:36> 'struct k_timer *' lvalue ParmVar 0x56101f1867f0 'timer' 'struct k_timer *'
|-FunctionDecl 0x56101f186bb8 prev 0x56101f13c6d0 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x56101f186b30 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x56101f186d10 prev 0x56101f13c578 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f186c88 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x56101f186f80 <line:385:1, line:393:1>
|   |-DoStmt 0x56101f186e98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f186e60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f186e10 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f186e78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f186f68 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x56101f186f20 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56101f186f08 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f186eb8 <col:9> 'u32_t (struct k_timer *)' Function 0x56101f186bb8 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x56101f186f50 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f186ee0 <col:38> 'struct k_timer *' lvalue ParmVar 0x56101f186c88 'timer' 'struct k_timer *'
|-FunctionDecl 0x56101f1870d0 prev 0x56101f13d038 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x56101f186fc8 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x56101f187040 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x56101f1872c0 prev 0x56101f13ce30 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x56101f1871b8 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x56101f187230 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x56101f1875c8 <line:398:1, line:407:1>
|   |-DoStmt 0x56101f187450 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f187418 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1873c8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f187430 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f187560 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x56101f187548 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f187470 <col:2> 'void (struct k_timer *, void *)' Function 0x56101f1870d0 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x56101f187598 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f187498 <col:31> 'struct k_timer *' lvalue ParmVar 0x56101f1871b8 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x56101f1875b0 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f1874c0 <col:38> 'void *' lvalue ParmVar 0x56101f187230 'user_data' 'void *'
|-FunctionDecl 0x56101f1876a0 prev 0x56101f13d8d8 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x56101f187610 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x56101f187800 prev 0x56101f13d778 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x56101f187770 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x56101f187ad0 <line:412:1, line:420:1>
|   |-DoStmt 0x56101f187988 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f187950 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f187900 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f187968 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f187ab8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x56101f187a70 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x56101f187a58 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1879a8 <col:9> 'void *(struct k_timer *)' Function 0x56101f1876a0 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x56101f187aa0 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f1879d0 <col:38> 'struct k_timer *' lvalue ParmVar 0x56101f187770 'timer' 'struct k_timer *'
|-FunctionDecl 0x56101f187b68 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x56101f187c28 prev 0x56101f13db60 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x56101f187ea0 <line:425:1, line:435:1>
|   |-DoStmt 0x56101f187da8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f187d70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f187d20 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f187d88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f187e88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x56101f187e60 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x56101f187e48 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56101f187dc8 <col:9> 's64_t ()' Function 0x56101f187b68 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x56101f187f70 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x56101f187ee8 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x56101f1880c8 prev 0x56101f140050 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f188040 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x56101f1883a8 <line:440:1, line:449:1>
|   |-DoStmt 0x56101f188280 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f188248 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1881f8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f188260 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f188360 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x56101f188348 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f1882a0 <col:2> 'void (struct k_queue *)' Function 0x56101f187f70 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x56101f188390 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f1882c8 <col:22> 'struct k_queue *' lvalue ParmVar 0x56101f188040 'queue' 'struct k_queue *'
|-FunctionDecl 0x56101f188478 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x56101f1883f0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x56101f1885d0 prev 0x56101f1401d8 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f188548 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x56101f188828 <line:454:1, line:463:1>
|   |-DoStmt 0x56101f188758 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f188720 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1886d0 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f188738 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f1887e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x56101f1887c8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f188778 <col:2> 'void (struct k_queue *)' Function 0x56101f188478 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x56101f188810 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f1887a0 <col:29> 'struct k_queue *' lvalue ParmVar 0x56101f188548 'queue' 'struct k_queue *'
|-FunctionDecl 0x56101f188978 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x56101f188870 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x56101f1888e8 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x56101f188b58 prev 0x56101f1406f0 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x56101f188a50 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f188ac8 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x56101f188e18 <line:468:1, line:476:1>
|   |-DoStmt 0x56101f188ce8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f188cb0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f188c60 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f188cc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f188e00 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x56101f188d98 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x56101f188d80 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f188d08 <col:9> 's32_t (struct k_queue *, void *)' Function 0x56101f188978 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x56101f188dd0 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f188d30 <col:37> 'struct k_queue *' lvalue ParmVar 0x56101f188a50 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x56101f188de8 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f188d58 <col:44> 'void *' lvalue ParmVar 0x56101f188ac8 'data' 'void *'
|-FunctionDecl 0x56101f188f68 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x56101f188e60 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x56101f188ed8 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x56101f1891b0 prev 0x56101f140b08 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x56101f189040 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f1890b8 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x56101f189470 <line:481:1, line:489:1>
|   |-DoStmt 0x56101f189340 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f189308 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1892b8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f189320 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f189458 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x56101f1893f0 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x56101f1893d8 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f189360 <col:9> 's32_t (struct k_queue *, void *)' Function 0x56101f188f68 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x56101f189428 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f189388 <col:38> 'struct k_queue *' lvalue ParmVar 0x56101f189040 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x56101f189440 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f1893b0 <col:45> 'void *' lvalue ParmVar 0x56101f1890b8 'data' 'void *'
|-FunctionDecl 0x56101f1895c0 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x56101f1894b8 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x56101f189528 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x56101f1897a0 prev 0x56101f141698 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x56101f189698 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x56101f189708 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f189ac0 <line:494:1, line:502:1>
|   |-DoStmt 0x56101f189930 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1898f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1898a8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f189910 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f189aa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x56101f189a40 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x56101f189a28 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f189950 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x56101f1895c0 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x56101f189a78 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f189978 <col:28> 'struct k_queue *' lvalue ParmVar 0x56101f189698 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x56101f189a90 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f1899a0 <col:35> 's32_t':'int' lvalue ParmVar 0x56101f189708 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f189b98 prev 0x56101f142878 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x56101f189b08 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x56101f189cf8 prev 0x56101f142718 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f189c68 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x56101f189fc0 <line:507:1, line:515:1>
|   |-DoStmt 0x56101f189e80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f189e48 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f189df8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f189e60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f189fa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x56101f189f60 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x56101f189f48 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f189ea0 <col:9> 'int (struct k_queue *)' Function 0x56101f189b98 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x56101f189f90 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f189ec8 <col:33> 'struct k_queue *' lvalue ParmVar 0x56101f189c68 'queue' 'struct k_queue *'
|-FunctionDecl 0x56101f18a098 prev 0x56101f1436d0 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x56101f18a008 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x56101f18a250 prev 0x56101f142bf8 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f18a1c0 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x56101f18a520 <line:520:1, line:528:1>
|   |-DoStmt 0x56101f18a3d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18a3a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18a350 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18a3b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18a508 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x56101f18a4c0 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x56101f18a4a8 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18a3f8 <col:9> 'void *(struct k_queue *)' Function 0x56101f18a098 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x56101f18a4f0 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18a420 <col:34> 'struct k_queue *' lvalue ParmVar 0x56101f18a1c0 'queue' 'struct k_queue *'
|-FunctionDecl 0x56101f18a5f8 prev 0x56101f143c08 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x56101f18a568 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x56101f18a758 prev 0x56101f143aa8 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x56101f18a6c8 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x56101f18a9c8 <line:533:1, line:541:1>
|   |-DoStmt 0x56101f18a8e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18a8a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18a858 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18a8c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18a9b0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x56101f18a968 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x56101f18a950 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18a900 <col:9> 'void *(struct k_queue *)' Function 0x56101f18a5f8 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x56101f18a998 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18a928 <col:34> 'struct k_queue *' lvalue ParmVar 0x56101f18a6c8 'queue' 'struct k_queue *'
|-FunctionDecl 0x56101f18acc8 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x56101f18aaa0 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x56101f18ab18 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x56101f18ab88 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x56101f18af30 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x56101f18ada8 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x56101f18ae20 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x56101f18ae90 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f18b2b0 <line:546:1, line:554:1>
|   |-DoStmt 0x56101f18b0c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18b090 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18b040 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18b0a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18b298 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x56101f18b210 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x56101f18b1f8 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18b0e8 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x56101f18acc8 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x56101f18b250 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18b110 <col:29> 'struct k_futex *' lvalue ParmVar 0x56101f18ada8 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x56101f18b268 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18b138 <col:36> 'int' lvalue ParmVar 0x56101f18ae20 'expected' 'int'
|       `-ImplicitCastExpr 0x56101f18b280 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18b160 <col:46> 's32_t':'int' lvalue ParmVar 0x56101f18ae90 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f18b488 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x56101f18b2f8 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x56101f18b368 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x56101f18b668 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x56101f18b560 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x56101f18b5d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x56101f18b980 <line:559:1, line:567:1>
|   |-DoStmt 0x56101f18b7f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18b7c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18b770 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18b7d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18b968 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x56101f18b900 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x56101f18b8e8 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18b818 <col:9> 'int (struct k_futex *, bool)' Function 0x56101f18b488 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x56101f18b938 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18b840 <col:29> 'struct k_futex *' lvalue ParmVar 0x56101f18b560 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x56101f18b950 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18b868 <col:36> 'bool' lvalue ParmVar 0x56101f18b5d0 'wake_all' 'bool'
|-FunctionDecl 0x56101f18bac8 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x56101f18b9c8 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x56101f18ba38 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x56101f18bca0 prev 0x56101f0428e0 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x56101f18bba0 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x56101f18bc10 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x56101f18bfc0 <line:572:1, line:580:1>
|   |-DoStmt 0x56101f18be30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18bdf8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18bda8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18be10 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18bfa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x56101f18bf40 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x56101f18bf28 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18be50 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x56101f18bac8 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x56101f18bf78 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18be78 <col:35> 'struct k_stack *' lvalue ParmVar 0x56101f18bba0 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x56101f18bf90 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18bea0 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f18bc10 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x56101f18c110 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x56101f18c008 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x56101f18c078 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x56101f18c310 prev 0x56101f042d68 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x56101f18c208 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x56101f18c278 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x56101f18c630 <line:585:1, line:593:1>
|   |-DoStmt 0x56101f18c4a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18c468 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18c418 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18c480 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18c618 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x56101f18c5b0 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x56101f18c598 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18c4c0 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x56101f18c110 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x56101f18c5e8 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18c4e8 <col:29> 'struct k_stack *' lvalue ParmVar 0x56101f18c208 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x56101f18c600 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18c510 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x56101f18c278 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x56101f18c7f8 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x56101f18c678 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x56101f18c6e8 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x56101f18c758 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x56101f18ca58 prev 0x56101f043408 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x56101f18c8d8 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x56101f18c948 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x56101f18c9b8 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f18cdc0 <line:598:1, line:606:1>
|   |-DoStmt 0x56101f18cbf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18cbb8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18cb68 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18cbd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18cda8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x56101f18cd20 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x56101f18cd08 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18cc10 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x56101f18c7f8 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x56101f18cd60 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18cc38 <col:28> 'struct k_stack *' lvalue ParmVar 0x56101f18c8d8 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x56101f18cd78 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18cc60 <col:35> 'stack_data_t *' lvalue ParmVar 0x56101f18c948 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x56101f18cd90 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18cc88 <col:41> 's32_t':'int' lvalue ParmVar 0x56101f18c9b8 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f18ce98 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x56101f18ce08 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x56101f18cff8 prev 0x56101f15b018 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x56101f18cf68 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x56101f18d2f0 <line:611:1, line:619:1>
|   |-DoStmt 0x56101f18d180 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18d148 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18d0f8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18d160 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18d2d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x56101f18d290 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x56101f18d278 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18d1a0 <col:9> 'int (struct k_mutex *)' Function 0x56101f18ce98 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x56101f18d2c0 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18d1f0 <col:29> 'struct k_mutex *' lvalue ParmVar 0x56101f18cf68 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x56101f18d440 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x56101f18d338 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x56101f18d3a8 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x56101f18d620 prev 0x56101f15b298 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x56101f18d518 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x56101f18d588 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f18d940 <line:624:1, line:632:1>
|   |-DoStmt 0x56101f18d7b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18d778 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18d728 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18d790 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18d928 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x56101f18d8c0 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x56101f18d8a8 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18d7d0 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x56101f18d440 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x56101f18d8f8 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18d7f8 <col:29> 'struct k_mutex *' lvalue ParmVar 0x56101f18d518 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x56101f18d910 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18d820 <col:36> 's32_t':'int' lvalue ParmVar 0x56101f18d588 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f18da18 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x56101f18d988 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x56101f18db78 prev 0x56101f15b430 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x56101f18dae8 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x56101f18dde8 <line:637:1, line:645:1>
|   |-DoStmt 0x56101f18dd00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18dcc8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18dc78 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18dce0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18ddd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x56101f18dd88 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x56101f18dd70 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18dd20 <col:9> 'int (struct k_mutex *)' Function 0x56101f18da18 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x56101f18ddb8 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18dd48 <col:31> 'struct k_mutex *' lvalue ParmVar 0x56101f18dae8 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x56101f18dfc0 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x56101f18de30 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x56101f18dea8 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x56101f18df20 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x56101f18e230 prev 0x56101f15ba38 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x56101f18e0a0 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x56101f18e118 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x56101f18e190 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x56101f18e5a0 <line:650:1, line:658:1>
|   |-DoStmt 0x56101f18e3c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18e390 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18e340 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18e3a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18e588 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x56101f18e500 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x56101f18e4e8 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18e3e8 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x56101f18dfc0 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x56101f18e540 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18e410 <col:27> 'struct k_sem *' lvalue ParmVar 0x56101f18e0a0 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x56101f18e558 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18e438 <col:32> 'unsigned int' lvalue ParmVar 0x56101f18e118 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x56101f18e570 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18e460 <col:47> 'unsigned int' lvalue ParmVar 0x56101f18e190 'limit' 'unsigned int'
|-FunctionDecl 0x56101f18e6f0 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x56101f18e5e8 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x56101f18e658 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x56101f18e8d0 prev 0x56101f15bcc8 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x56101f18e7c8 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x56101f18e838 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f18ebf0 <line:663:1, line:671:1>
|   |-DoStmt 0x56101f18ea60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18ea28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18e9d8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18ea40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18ebd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x56101f18eb70 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x56101f18eb58 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18ea80 <col:9> 'int (struct k_sem *, s32_t)' Function 0x56101f18e6f0 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x56101f18eba8 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f18eaa8 <col:27> 'struct k_sem *' lvalue ParmVar 0x56101f18e7c8 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x56101f18ebc0 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18ead0 <col:32> 's32_t':'int' lvalue ParmVar 0x56101f18e838 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f18ecc0 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x56101f18ec38 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x56101f18ee18 prev 0x56101f15cf20 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x56101f18ed90 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x56101f18f0c8 <line:676:1, line:685:1>
|   |-DoStmt 0x56101f18efa0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18ef68 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18ef18 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18ef80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f18f080 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x56101f18f068 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f18efc0 <col:2> 'void (struct k_sem *)' Function 0x56101f18ecc0 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x56101f18f0b0 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f18efe8 <col:20> 'struct k_sem *' lvalue ParmVar 0x56101f18ed90 'sem' 'struct k_sem *'
|-FunctionDecl 0x56101f18f200 prev 0x56101f15d228 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x56101f18f110 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x56101f18f358 prev 0x56101f15d0a8 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x56101f18f2d0 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x56101f18f5b0 <line:690:1, line:699:1>
|   |-DoStmt 0x56101f18f4e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18f4a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18f458 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18f4c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f18f568 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x56101f18f550 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f18f500 <col:2> 'void (struct k_sem *)' Function 0x56101f18f200 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x56101f18f598 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f18f528 <col:21> 'struct k_sem *' lvalue ParmVar 0x56101f18f2d0 'sem' 'struct k_sem *'
|-FunctionDecl 0x56101f18f688 prev 0x56101f15d690 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x56101f18f5f8 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x56101f18f7e8 prev 0x56101f15d508 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x56101f18f758 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x56101f18fab0 <line:704:1, line:712:1>
|   |-DoStmt 0x56101f18f970 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f18f938 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18f8e8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f18f950 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f18fa98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x56101f18fa50 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x56101f18fa38 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f18f990 <col:9> 'unsigned int (struct k_sem *)' Function 0x56101f18f688 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x56101f18fa80 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f18f9b8 <col:32> 'struct k_sem *' lvalue ParmVar 0x56101f18f758 'sem' 'struct k_sem *'
|-FunctionDecl 0x56101f18fc78 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x56101f18faf8 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f18fb68 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x56101f18fbd8 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x56101f18fed8 prev 0x56101f10dc18 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x56101f18fd58 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f18fdc8 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f18fe38 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x56101f190240 <line:717:1, line:725:1>
|   |-DoStmt 0x56101f190070 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f190038 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f18ffe8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f190050 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f190228 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x56101f1901a0 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x56101f190188 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f190090 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x56101f18fc78 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x56101f1901e0 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f1900b8 <col:34> 'struct k_msgq *' lvalue ParmVar 0x56101f18fd58 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x56101f1901f8 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f1900e0 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x56101f18fdc8 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x56101f190210 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f190108 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x56101f18fe38 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x56101f190410 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x56101f190288 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f190300 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x56101f190370 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x56101f190678 prev 0x56101f10e148 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x56101f1904f0 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f190568 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x56101f1905d8 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f1909e0 <line:730:1, line:738:1>
|   |-DoStmt 0x56101f190810 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1907d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f190788 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1907f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f1909c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x56101f190940 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x56101f190928 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f190830 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x56101f190410 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x56101f190980 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f190858 <col:27> 'struct k_msgq *' lvalue ParmVar 0x56101f1904f0 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x56101f190998 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f190880 <col:33> 'void *' lvalue ParmVar 0x56101f190568 'data' 'void *'
|       `-ImplicitCastExpr 0x56101f1909b0 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f1908a8 <col:39> 's32_t':'int' lvalue ParmVar 0x56101f1905d8 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f190bb0 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x56101f190a28 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f190aa0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x56101f190b10 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x56101f190e18 prev 0x56101f161898 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x56101f190c90 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f190d08 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x56101f190d78 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f191128 <line:743:1, line:751:1>
|   |-DoStmt 0x56101f190fb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f190f78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f190f28 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f190f90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f191110 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x56101f191088 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x56101f191070 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f190fd0 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x56101f190bb0 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x56101f1910c8 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f190ff8 <col:27> 'struct k_msgq *' lvalue ParmVar 0x56101f190c90 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x56101f1910e0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f191020 <col:33> 'void *' lvalue ParmVar 0x56101f190d08 'data' 'void *'
|       `-ImplicitCastExpr 0x56101f1910f8 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f191048 <col:39> 's32_t':'int' lvalue ParmVar 0x56101f190d78 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f1912a8 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x56101f191170 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x56101f191210 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x56101f191490 prev 0x56101f161b38 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x56101f191380 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f1913f8 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x56101f1917b0 <line:756:1, line:764:1>
|   |-DoStmt 0x56101f191620 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1915e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f191598 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f191600 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f191798 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x56101f191730 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x56101f191718 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f191640 <col:9> 'int (struct k_msgq *, void *)' Function 0x56101f1912a8 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x56101f191768 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f191668 <col:28> 'struct k_msgq *' lvalue ParmVar 0x56101f191380 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x56101f191780 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f191690 <col:34> 'void *' lvalue ParmVar 0x56101f1913f8 'data' 'void *'
|-FunctionDecl 0x56101f191880 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x56101f1917f8 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x56101f1919d8 prev 0x56101f161d40 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x56101f191950 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x56101f191c88 <line:769:1, line:778:1>
|   |-DoStmt 0x56101f191b60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f191b28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f191ad8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f191b40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f191c40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x56101f191c28 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f191b80 <col:2> 'void (struct k_msgq *)' Function 0x56101f191880 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x56101f191c70 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f191ba8 <col:22> 'struct k_msgq *' lvalue ParmVar 0x56101f191950 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x56101f191d58 prev 0x56101f1623c0 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x56101f191cd0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x56101f191eb0 prev 0x56101f161f40 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x56101f191e28 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x56101f192180 <line:783:1, line:791:1>
|   |-DoStmt 0x56101f192038 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f192000 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f191fb0 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f192018 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f192168 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x56101f192120 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56101f192108 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f192058 <col:9> 'u32_t (struct k_msgq *)' Function 0x56101f191d58 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x56101f192150 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f192080 <col:36> 'struct k_msgq *' lvalue ParmVar 0x56101f191e28 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x56101f1922e0 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x56101f1921c8 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x56101f192250 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x56101f1924d0 prev 0x56101f162260 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x56101f1923b8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x56101f192440 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x56101f1927d8 <line:796:1, line:805:1>
|   |-DoStmt 0x56101f192660 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f192628 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1925d8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f192640 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f192770 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x56101f192758 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f192680 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x56101f1922e0 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x56101f1927a8 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f1926a8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x56101f1923b8 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x56101f1927c0 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f1926d0 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x56101f192440 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x56101f1928a8 prev 0x56101f162c98 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x56101f192820 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x56101f192a00 prev 0x56101f162b40 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x56101f192978 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x56101f192c70 <line:810:1, line:818:1>
|   |-DoStmt 0x56101f192b88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f192b50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f192b00 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f192b68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f192c58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x56101f192c10 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56101f192bf8 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f192ba8 <col:9> 'u32_t (struct k_msgq *)' Function 0x56101f1928a8 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x56101f192c40 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f192bd0 <col:36> 'struct k_msgq *' lvalue ParmVar 0x56101f192978 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x56101f192dc0 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x56101f192cb8 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x56101f192d28 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x56101f192fa0 prev 0x56101f168e08 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x56101f192e98 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f192f08 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x56101f1932e0 <line:823:1, line:831:1>
|   |-DoStmt 0x56101f193130 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1930f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1930a8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f193110 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f1932c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x56101f193260 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x56101f193248 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f193150 <col:9> 'int (struct k_pipe *, size_t)' Function 0x56101f192dc0 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x56101f193298 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f193178 <col:34> 'struct k_pipe *' lvalue ParmVar 0x56101f192e98 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x56101f1932b0 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x56101f1931a0 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x56101f192f08 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x56101f193618 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x56101f193328 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f1933a0 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x56101f193410 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f193480 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x56101f1934f0 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x56101f193560 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x56101f193a00 prev 0x56101f1692f8 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x56101f193710 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f193788 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x56101f1937f8 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f193868 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x56101f1938d8 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f193948 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f193e60 <line:836:1, line:844:1>
|   |-DoStmt 0x56101f193bb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f193b78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f193b28 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f193b90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f193e48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x56101f193d60 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x56101f193d48 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f193bd0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x56101f193618 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x56101f193db8 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f193bf8 <col:27> 'struct k_pipe *' lvalue ParmVar 0x56101f193710 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x56101f193dd0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f193c20 <col:33> 'void *' lvalue ParmVar 0x56101f193788 'data' 'void *'
|       |-ImplicitCastExpr 0x56101f193de8 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f193c48 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x56101f1937f8 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x56101f193e00 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f193c70 <col:55> 'size_t *' lvalue ParmVar 0x56101f193868 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x56101f193e18 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f193c98 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x56101f1938d8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x56101f193e30 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f193cc0 <col:80> 's32_t':'int' lvalue ParmVar 0x56101f193948 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f194198 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x56101f193ea8 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f193f20 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x56101f193f90 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f194000 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x56101f194070 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x56101f1940e0 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x56101f194580 prev 0x56101f169710 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x56101f194290 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x56101f194308 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x56101f194378 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f1943e8 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x56101f194458 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x56101f1944c8 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f194980 <line:849:1, line:857:1>
|   |-DoStmt 0x56101f194730 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1946f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f1946a8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f194710 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f194968 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x56101f194880 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x56101f194868 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f194750 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x56101f194198 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x56101f1948d8 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f194778 <col:27> 'struct k_pipe *' lvalue ParmVar 0x56101f194290 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x56101f1948f0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f1947a0 <col:33> 'void *' lvalue ParmVar 0x56101f194308 'data' 'void *'
|       |-ImplicitCastExpr 0x56101f194908 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f1947c8 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x56101f194378 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x56101f194920 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f1947f0 <col:54> 'size_t *' lvalue ParmVar 0x56101f1943e8 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x56101f194938 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f194818 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x56101f194458 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x56101f194950 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f194840 <col:76> 's32_t':'int' lvalue ParmVar 0x56101f1944c8 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f194b50 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x56101f1949c8 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x56101f194a40 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x56101f194ab0 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x56101f194db8 prev 0x56101f172d78 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x56101f194c30 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x56101f194ca8 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x56101f194d18 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x56101f195120 <line:862:1, line:870:1>
|   |-DoStmt 0x56101f194f50 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f194f18 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f194ec8 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f194f30 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f195108 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x56101f195080 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x56101f195068 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f194f70 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x56101f194b50 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x56101f1950c0 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f194f98 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x56101f194c30 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x56101f1950d8 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f194fc0 <col:31> 'int' lvalue ParmVar 0x56101f194ca8 'num_events' 'int'
|       `-ImplicitCastExpr 0x56101f1950f0 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f194fe8 <col:43> 's32_t':'int' lvalue ParmVar 0x56101f194d18 'timeout' 's32_t':'int'
|-FunctionDecl 0x56101f195230 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x56101f195168 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x56101f195388 prev 0x56101f172f80 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x56101f195300 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x56101f195638 <line:875:1, line:884:1>
|   |-DoStmt 0x56101f195510 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1954d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f195488 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1954f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f1955f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x56101f1955d8 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f195530 <col:2> 'void (struct k_poll_signal *)' Function 0x56101f195230 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x56101f195620 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f195558 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x56101f195300 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x56101f195708 prev 0x56101f173230 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x56101f195680 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x56101f195860 prev 0x56101f1730d8 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x56101f1957d8 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x56101f195ab8 <line:889:1, line:898:1>
|   |-DoStmt 0x56101f1959e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1959b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f195960 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1959c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f195a70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x56101f195a58 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f195a08 <col:2> 'void (struct k_poll_signal *)' Function 0x56101f195708 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x56101f195aa0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f195a30 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x56101f1957d8 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x56101f195c88 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x56101f195b00 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x56101f195b78 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x56101f195bf0 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x56101f195ef0 prev 0x56101f173630 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x56101f195d68 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x56101f195de0 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x56101f195e58 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x56101f196248 <line:903:1, line:912:1>
|   |-DoStmt 0x56101f196088 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f196050 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f196000 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f196068 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f1961c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x56101f1961a8 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f1960a8 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x56101f195c88 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x56101f196200 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f1960d0 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x56101f195d68 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x56101f196218 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f1960f8 <col:37> 'unsigned int *' lvalue ParmVar 0x56101f195de0 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x56101f196230 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x56101f196120 <col:47> 'int *' lvalue ParmVar 0x56101f195e58 'result' 'int *'
|-FunctionDecl 0x56101f1963a0 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x56101f196290 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x56101f196308 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x56101f196588 prev 0x56101f173d80 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x56101f196478 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x56101f1964f0 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x56101f1968a0 <line:917:1, line:925:1>
|   |-DoStmt 0x56101f196718 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1966e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f196690 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1966f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f196888 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x56101f196820 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x56101f196808 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f196738 <col:9> 'int (struct k_poll_signal *, int)' Function 0x56101f1963a0 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x56101f196858 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x56101f196760 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x56101f196478 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x56101f196870 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x56101f196788 <col:44> 'int' lvalue ParmVar 0x56101f1964f0 'result' 'int'
|-FunctionDecl 0x56101f196a60 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x56101f1968d8 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x56101f196948 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x56101f196c28 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x56101f196b28 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x56101f196b98 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x56101f196f28 <line:930:1, line:939:1>
|   |-DoStmt 0x56101f196db8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f196d80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f196d30 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f196d98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x56101f196ec0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x56101f196ea8 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f196dd8 <col:2> 'void (char *, size_t)' Function 0x56101f196a60 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x56101f196ef8 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56101f196e00 <col:19> 'char *' lvalue ParmVar 0x56101f196b28 'c' 'char *'
|     `-ImplicitCastExpr 0x56101f196f10 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56101f196e28 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x56101f196b98 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x56101f197000 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x56101f196f70 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x56101f197160 prev 0x56101f179198 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x56101f1970d0 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x56101f198420 <line:944:1, line:952:1>
|   |-DoStmt 0x56101f198308 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x56101f1982d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x56101f198280 <col:2, col:39>
|   | `-IntegerLiteral 0x56101f1982e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x56101f198408 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x56101f1983c0 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x56101f1983a8 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f198328 <col:9> 'int (struct k_thread *)' Function 0x56101f197000 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x56101f1983f0 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x56101f198350 <col:32> 'struct k_thread *' lvalue ParmVar 0x56101f1970d0 'thread' 'struct k_thread *'
|-FunctionDecl 0x56101f198520 </vagrant/apps/plc_bottlewash/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x56101f1986f0 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x56101f1985f0 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x56101f198830 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x56101f1987a8 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x56101f1989f0 <line:14:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x56101f1988e8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x56101f198b30 <line:16:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x56101f198aa8 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x56101f198c70 <line:17:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x56101f198be8 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x56101f198db0 <line:18:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x56101f198d28 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x56101f198ef0 <line:19:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x56101f198e68 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x56101f199030 prev 0x56101f1989f0 <line:20:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x56101f198fa8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x56101f1990d8 <line:34:9, line:38:1> line:34:9 struct definition
| |-FieldDecl 0x56101f199190 <line:35:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x56101f1991e8 <line:36:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x56101f1992d0 <line:37:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x56101f199370 <line:34:1, line:38:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x56101f199320 'struct gpio_int_config' sugar
|   `-RecordType 0x56101f199160 'gpio_int_config'
|     `-Record 0x56101f1990d8 ''
|-FunctionDecl 0x56101f1995f0 <line:40:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x56101f1993f0 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x56101f1994d8 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x56101f199738 <line:41:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x56101f1996b0 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x56101f1997f8 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x56101ef8e990 'short'
|-TypedefDecl 0x56101f199868 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x56101ef8ea10 'unsigned char'
|-EnumDecl 0x56101f1998c0 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x56101f1999a0 <line:26:2, col:6> col:2 referenced R 'int'
| | `-IntegerLiteral 0x56101f199980 <col:6> 'int' 2
| |-EnumConstantDecl 0x56101f199a08 <line:27:2, col:6> col:2 referenced G 'int'
| | `-IntegerLiteral 0x56101f1999e8 <col:6> 'int' 3
| `-EnumConstantDecl 0x56101f199a70 <line:28:2, col:6> col:2 referenced B 'int'
|   `-IntegerLiteral 0x56101f199a50 <col:6> 'int' 4
|-TypedefDecl 0x56101f199b10 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x56101f199ac0 'enum LED' sugar
|   `-EnumType 0x56101f199960 'LED'
|     `-Enum 0x56101f1998c0 ''
|-FunctionDecl 0x56101f199d40 <line:31:1, col:56> col:6 used enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x56101f199bb8 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x56101f199c28 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x56101f199f00 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x56101f199e00 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x56101f19a038 <line:35:1, col:24> col:6 used read_in_table 'void (void)'
|-FunctionDecl 0x56101f19a168 <line:37:1, col:26> col:6 used write_out_table 'void (void)'
|-FunctionDecl 0x56101f19cee8 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x56101f19ce60 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x56101f217990 <line:39:4, col:42>
|   `-ParagraphComment 0x56101f217960 <col:4, col:42>
|     `-TextComment 0x56101f217930 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x56101f19d028 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x56101f19cfa0 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x56101f19d280 <line:45:1, col:37> col:6 used write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x56101f19d0e0 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x56101f19d170 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f19d400 <line:47:1, col:26> col:6 used read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x56101f19d340 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x56101f19d5e0 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x56101f19d4e0 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x56101f19d720 <line:51:1, col:23> col:6 used LED_off 'void (LED)'
| `-ParmVarDecl 0x56101f19d698 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x56101f19d8e0 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x56101f19d7d8 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x56101f19db20 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x56101f19d998 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x56101f19da08 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f19dc68 <line:57:1, col:40> col:6 used read_button_active_low 'BOOL (uint8_t)'
| `-ParmVarDecl 0x56101f19dbe0 <col:29, col:37> col:37 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x56101f19dd28 prev 0x56101f1997f8 </vagrant/apps/plc_bottlewash/./inc/ladder.h:7:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x56101ef8e990 'short'
|-TypedefDecl 0x56101f19dd98 prev 0x56101f199868 <line:8:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x56101ef8ea10 'unsigned char'
|-VarDecl 0x56101f19ded8 <line:13:1, col:100> col:16 used output_pins 'uint8_t [5]' static cinit
| |-InitListExpr 0x56101f19e098 <col:68, col:100> 'uint8_t [5]'
| | |-ImplicitCastExpr 0x56101f19e0d8 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:16:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x56101f19df90 <col:14> 'int' 8
| | |-ImplicitCastExpr 0x56101f19e0f8 <line:17:14> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x56101f19dfb0 <col:14> 'int' 9
| | |-ImplicitCastExpr 0x56101f19e120 <line:18:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x56101f19dfd0 <col:15> 'int' 10
| | |-ImplicitCastExpr 0x56101f19e158 <line:19:15> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x56101f19dff0 <col:15> 'int' 11
| | `-ImplicitCastExpr 0x56101f19e170 <line:20:15> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x56101f19e010 <col:15> 'int' 12
| `-SectionAttr 0x56101f19df38 </vagrant/apps/plc_bottlewash/./inc/ladder.h:13:45, col:62> section ".rodata"
|-FunctionDecl 0x56101f19e338 <line:33:1, col:19> col:6 used PlcCycle 'void (void)'
| `-FullComment 0x56101f217a60 <line:30:4, col:57>
|   `-ParagraphComment 0x56101f217a30 <col:4, col:57>
|     `-TextComment 0x56101f217a00 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x56101f19e488 <line:36:1, col:36> col:6 plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x56101f19e400 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x56101f19e5c0 <line:39:1, col:19> col:6 init_plc 'void (void)'
|-FunctionDecl 0x56101f19e7d0 <line:46:1, col:26> col:6 Read_U_b_XStart 'BOOL (void)'
| `-FullComment 0x56101f217b30 <line:44:4, col:57>
|   `-ParagraphComment 0x56101f217b00 <col:4, col:57>
|     `-TextComment 0x56101f217ad0 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x56101f19e900 <line:48:1, col:25> col:6 Read_U_b_XStop 'BOOL (void)'
|-FunctionDecl 0x56101f19ea30 <line:50:1, col:30> col:6 Read_U_b_XBottle_IN 'BOOL (void)'
|-FunctionDecl 0x56101f19eb60 <line:52:1, col:30> col:6 Read_U_b_XBottle_UP 'BOOL (void)'
|-FunctionDecl 0x56101f19ec90 <line:54:1, col:34> col:6 Read_U_b_XPosition_DOWN 'BOOL (void)'
|-FunctionDecl 0x56101f19edc0 <line:56:1, col:32> col:6 Read_U_b_YBottle_HOLD 'BOOL (void)'
|-FunctionDecl 0x56101f1a1040 <line:57:1, col:35> col:6 Write_U_b_YBottle_HOLD 'void (BOOL)'
| `-ParmVarDecl 0x56101f1a0f80 <col:29, col:34> col:34 v 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f1a1178 <line:59:1, col:34> col:6 Read_U_b_YMotor_FORWARD 'BOOL (void)'
|-FunctionDecl 0x56101f1a12b0 <line:60:1, col:37> col:6 Write_U_b_YMotor_FORWARD 'void (BOOL)'
| `-ParmVarDecl 0x56101f1a1228 <col:31, col:36> col:36 v 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f1a13e8 <line:62:1, col:29> col:6 Read_U_b_YWater_ON 'BOOL (void)'
|-FunctionDecl 0x56101f1a1520 <line:63:1, col:32> col:6 Write_U_b_YWater_ON 'void (BOOL)'
| `-ParmVarDecl 0x56101f1a1498 <col:26, col:31> col:31 v 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f1a1658 <line:65:1, col:34> col:6 Read_U_b_YMotor_REVERSE 'BOOL (void)'
|-FunctionDecl 0x56101f1a1790 <line:66:1, col:37> col:6 Write_U_b_YMotor_REVERSE 'void (BOOL)'
| `-ParmVarDecl 0x56101f1a1708 <col:31, col:36> col:36 v 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f1a18c8 <line:68:1, col:35> col:6 Read_U_b_YBottle_RELEASE 'BOOL (void)'
|-FunctionDecl 0x56101f1a1a00 <line:69:1, col:38> col:6 Write_U_b_YBottle_RELEASE 'void (BOOL)'
| `-ParmVarDecl 0x56101f1a1978 <col:32, col:37> col:37 v 'BOOL':'unsigned char'
|-VarDecl 0x56101f1a1af8 <./src/ladder.c:7:1, col:73> col:16 used LED_pins 'uint8_t [3]' static cinit
| |-InitListExpr 0x56101f1a1c68 <col:65, col:73> 'uint8_t [3]'
| | |-ImplicitCastExpr 0x56101f1a1ca8 <col:66> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x56101f1a1bb0 <col:66> 'int' 2
| | |-ImplicitCastExpr 0x56101f1a1cc8 <col:69> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x56101f1a1bd0 <col:69> 'int' 3
| | `-ImplicitCastExpr 0x56101f1a1cf0 <col:72> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x56101f1a1bf0 <col:72> 'int' 4
| `-SectionAttr 0x56101f1a1b58 <col:42, col:59> section ".rodata"
|-VarDecl 0x56101f1a1db8 <line:11:1, col:28> col:17 time_old 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x56101f1a1e38 <col:28> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x56101f1a1e18 <col:28> 'int' 0
|-VarDecl 0x56101f1a1e60 <line:12:1, col:28> col:17 time_cnt 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x56101f1a1ee0 <col:28> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x56101f1a1ec0 <col:28> 'int' 0
|-FunctionDecl 0x56101f1a1fa8 prev 0x56101f19e488 <line:14:1, line:22:1> line:14:6 plc_callback 'void (struct k_timer *)'
| |-ParmVarDecl 0x56101f1a1f20 <col:19, col:35> col:35 t 'struct k_timer *'
| `-CompoundStmt 0x56101f1a2188 <col:38, line:22:1>
|   |-CallExpr 0x56101f1a2090 <line:19:2, col:16> 'void'
|   | `-ImplicitCastExpr 0x56101f1a2078 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56101f1a2050 <col:2> 'void (void)' Function 0x56101f19a038 'read_in_table' 'void (void)'
|   |-CallExpr 0x56101f1a20f8 <line:20:2, col:11> 'void'
|   | `-ImplicitCastExpr 0x56101f1a20e0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56101f1a20b8 <col:2> 'void (void)' Function 0x56101f19e338 'PlcCycle' 'void (void)'
|   `-CallExpr 0x56101f1a2160 <line:21:2, col:18> 'void'
|     `-ImplicitCastExpr 0x56101f1a2148 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x56101f1a2120 <col:2> 'void (void)' Function 0x56101f19a168 'write_out_table' 'void (void)'
|-FunctionDecl 0x56101f1a2240 prev 0x56101f19e5c0 <line:24:1, line:40:1> line:24:6 init_plc 'void (void)'
| `-CompoundStmt 0x56101f1a2db8 <col:21, line:40:1>
|   |-ForStmt 0x56101f1a26a0 <line:25:2, line:27:2>
|   | |-DeclStmt 0x56101f1a2378 <line:25:6, col:15>
|   | | `-VarDecl 0x56101f1a22f8 <col:6, col:14> col:10 used i 'int' cinit
|   | |   `-IntegerLiteral 0x56101f1a2358 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x56101f1a23f0 <col:17, /vagrant/apps/plc_bottlewash/./inc/ladder.h:12:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x56101f1a23d8 <./src/ladder.c:25:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x56101f1a2390 <col:17> 'int' lvalue Var 0x56101f1a22f8 'i' 'int'
|   | | `-IntegerLiteral 0x56101f1a23b8 </vagrant/apps/plc_bottlewash/./inc/ladder.h:12:18> 'int' 5
|   | |-UnaryOperator 0x56101f1a2440 <./src/ladder.c:25:31, col:32> 'int' postfix '++'
|   | | `-DeclRefExpr 0x56101f1a2418 <col:31> 'int' lvalue Var 0x56101f1a22f8 'i' 'int'
|   | `-CompoundStmt 0x56101f1a2688 <col:36, line:27:2>
|   |   `-CallExpr 0x56101f1a25f0 <line:26:3, col:41> 'void'
|   |     |-ImplicitCastExpr 0x56101f1a25d8 <col:3> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56101f1a2460 <col:3> 'void (const char *, ...)' Function 0x56101f0e1080 'printk' 'void (const char *, ...)'
|   |     |-ImplicitCastExpr 0x56101f1a2640 <col:10> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x56101f1a2628 <col:10> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x56101f1a24c8 <col:10> 'char [13]' lvalue "Using PIN%d\n"
|   |     `-ImplicitCastExpr 0x56101f1a2670 <col:27, col:40> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56101f1a2658 <col:27, col:40> 'uint8_t':'unsigned char' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x56101f1a2580 <col:27, col:40> 'uint8_t':'unsigned char' lvalue
|   |           |-ImplicitCastExpr 0x56101f1a2550 <col:27> 'uint8_t *' <ArrayToPointerDecay>
|   |           | `-DeclRefExpr 0x56101f1a2500 <col:27> 'uint8_t [5]' lvalue Var 0x56101f19ded8 'output_pins' 'uint8_t [5]'
|   |           `-ImplicitCastExpr 0x56101f1a2568 <col:39> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56101f1a2528 <col:39> 'int' lvalue Var 0x56101f1a22f8 'i' 'int'
|   |-CallExpr 0x56101f1a27c0 <line:28:2, col:42> 'void'
|   | |-ImplicitCastExpr 0x56101f1a27a8 <col:2> 'void (*)(uint8_t *, uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56101f1a26d8 <col:2> 'void (uint8_t *, uint8_t)' Function 0x56101f199d40 'enable_pin_outputs' 'void (uint8_t *, uint8_t)'
|   | |-ImplicitCastExpr 0x56101f1a27f8 <col:21> 'uint8_t *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x56101f1a2700 <col:21> 'uint8_t [5]' lvalue Var 0x56101f19ded8 'output_pins' 'uint8_t [5]'
|   | `-ImplicitCastExpr 0x56101f1a2810 </vagrant/apps/plc_bottlewash/./inc/ladder.h:12:18> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x56101f1a2728 <col:18> 'int' 5
|   |-IfStmt 0x56101f1a2bd8 <./src/ladder.c:31:2, line:36:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-IntegerLiteral 0x56101f1a2828 </vagrant/apps/plc_bottlewash/./inc/ladder.h:10:17> 'int' 0
|   | |-CompoundStmt 0x56101f1a2ba8 <./src/ladder.c:31:15, line:36:2>
|   | | |-CallExpr 0x56101f1a28d0 <line:32:3, col:44> 'void'
|   | | | |-ImplicitCastExpr 0x56101f1a28b8 <col:3> 'void (*)(uint8_t *, uint8_t)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f1a2848 <col:3> 'void (uint8_t *, uint8_t)' Function 0x56101f199d40 'enable_pin_outputs' 'void (uint8_t *, uint8_t)'
|   | | | |-ImplicitCastExpr 0x56101f1a2908 <col:22> 'uint8_t *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f1a2870 <col:22> 'uint8_t [3]' lvalue Var 0x56101f1a1af8 'LED_pins' 'uint8_t [3]'
|   | | | `-ImplicitCastExpr 0x56101f1a2920 <line:6:22> 'uint8_t':'unsigned char' <IntegralCast>
|   | | |   `-IntegerLiteral 0x56101f1a2898 <col:22> 'int' 3
|   | | |-CallExpr 0x56101f1a2a00 <line:33:3, col:12> 'void'
|   | | | |-ImplicitCastExpr 0x56101f1a29e8 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f1a2938 <col:3> 'void (LED)' Function 0x56101f19d720 'LED_off' 'void (LED)'
|   | | | `-ImplicitCastExpr 0x56101f1a2a30 <col:11> 'LED':'LED' <IntegralCast>
|   | | |   `-DeclRefExpr 0x56101f1a2960 <col:11> 'int' EnumConstant 0x56101f1999a0 'R' 'int'
|   | | |-CallExpr 0x56101f1a2ab0 <line:34:3, col:12> 'void'
|   | | | |-ImplicitCastExpr 0x56101f1a2a98 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x56101f1a2a48 <col:3> 'void (LED)' Function 0x56101f19d720 'LED_off' 'void (LED)'
|   | | | `-ImplicitCastExpr 0x56101f1a2ae0 <col:11> 'LED':'LED' <IntegralCast>
|   | | |   `-DeclRefExpr 0x56101f1a2a70 <col:11> 'int' EnumConstant 0x56101f199a08 'G' 'int'
|   | | `-CallExpr 0x56101f1a2b60 <line:35:3, col:12> 'void'
|   | |   |-ImplicitCastExpr 0x56101f1a2b48 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56101f1a2af8 <col:3> 'void (LED)' Function 0x56101f19d720 'LED_off' 'void (LED)'
|   | |   `-ImplicitCastExpr 0x56101f1a2b90 <col:11> 'LED':'LED' <IntegralCast>
|   | |     `-DeclRefExpr 0x56101f1a2b20 <col:11> 'int' EnumConstant 0x56101f199a70 'B' 'int'
|   | `-<<<NULL>>>
|   |-CallExpr 0x56101f1a2c50 <line:38:2, col:18> 'void'
|   | `-ImplicitCastExpr 0x56101f1a2c38 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56101f1a2c10 <col:2> 'void (void)' Function 0x56101f19a168 'write_out_table' 'void (void)'
|   `-CallExpr 0x56101f1a2d28 <line:39:2, col:28> 'void'
|     |-ImplicitCastExpr 0x56101f1a2d10 <col:2> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f1a2c78 <col:2> 'void (const char *, ...)' Function 0x56101f0e1080 'printk' 'void (const char *, ...)'
|     `-ImplicitCastExpr 0x56101f1a2d70 <col:9> 'const char *' <BitCast>
|       `-ImplicitCastExpr 0x56101f1a2d58 <col:9> 'char *' <ArrayToPointerDecay>
|         `-StringLiteral 0x56101f1a2cd8 <col:9> 'char [17]' lvalue "plc initialized\n"
|-FunctionDecl 0x56101f1a2e80 prev 0x56101f19e7d0 <line:48:1, line:50:1> line:48:6 Read_U_b_XStart 'BOOL (void)'
| |-CompoundStmt 0x56101f1a3050 <col:28, line:50:1>
| | `-ReturnStmt 0x56101f1a3038 <line:49:2, col:41>
| |   `-CallExpr 0x56101f1a2ff0 <col:9, col:41> 'BOOL':'unsigned char'
| |     |-ImplicitCastExpr 0x56101f1a2fd8 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56101f1a2f20 <col:9> 'BOOL (uint8_t)' Function 0x56101f19dc68 'read_button_active_low' 'BOOL (uint8_t)'
| |     `-ImplicitCastExpr 0x56101f1a3020 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:15:14> 'uint8_t':'unsigned char' <IntegralCast>
| |       `-IntegerLiteral 0x56101f1a2f48 <col:14> 'int' 7
| `-FullComment 0x56101f217c00 <./src/ladder.c:42:4, col:71>
|   `-ParagraphComment 0x56101f217bd0 <col:4, col:71>
|     `-TextComment 0x56101f217ba0 <col:4, col:71> Text="************** Define Auto-Generated Functions Below ***************"
|-FunctionDecl 0x56101f1a30f8 prev 0x56101f19e900 <line:52:1, line:54:1> line:52:6 Read_U_b_XStop 'BOOL (void)'
| `-CompoundStmt 0x56101f1a3258 <col:27, line:54:1>
|   `-ReturnStmt 0x56101f1a3240 <line:53:2, col:40>
|     `-CallExpr 0x56101f1a31f8 <col:9, col:40> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x56101f1a31e0 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1a3198 <col:9> 'BOOL (uint8_t)' Function 0x56101f19dc68 'read_button_active_low' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x56101f1a3228 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:14:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x56101f1a31c0 <col:14> 'int' 6
|-FunctionDecl 0x56101f1a3300 prev 0x56101f19ea30 <./src/ladder.c:56:1, line:58:1> line:56:6 Read_U_b_XBottle_IN 'BOOL (void)'
| `-CompoundStmt 0x56101f1a3460 <col:32, line:58:1>
|   `-ReturnStmt 0x56101f1a3448 <line:57:2, col:45>
|     `-CallExpr 0x56101f1a3400 <col:9, col:45> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x56101f1a33e8 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1a33a0 <col:9> 'BOOL (uint8_t)' Function 0x56101f19dc68 'read_button_active_low' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x56101f1a3430 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:10:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x56101f1a33c8 <col:14> 'int' 2
|-FunctionDecl 0x56101f1a3508 prev 0x56101f19eb60 <./src/ladder.c:60:1, line:62:1> line:60:6 Read_U_b_XBottle_UP 'BOOL (void)'
| `-CompoundStmt 0x56101f1a3668 <col:32, line:62:1>
|   `-ReturnStmt 0x56101f1a3650 <line:61:2, col:45>
|     `-CallExpr 0x56101f1a3608 <col:9, col:45> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x56101f1a35f0 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1a35a8 <col:9> 'BOOL (uint8_t)' Function 0x56101f19dc68 'read_button_active_low' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x56101f1a3638 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:11:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x56101f1a35d0 <col:14> 'int' 3
|-FunctionDecl 0x56101f1a3710 prev 0x56101f19ec90 <./src/ladder.c:64:1, line:66:1> line:64:6 Read_U_b_XPosition_DOWN 'BOOL (void)'
| `-CompoundStmt 0x56101f1a3870 <col:36, line:66:1>
|   `-ReturnStmt 0x56101f1a3858 <line:65:2, col:49>
|     `-CallExpr 0x56101f1a3810 <col:9, col:49> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x56101f1a37f8 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1a37b0 <col:9> 'BOOL (uint8_t)' Function 0x56101f19dc68 'read_button_active_low' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x56101f1a3840 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:12:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x56101f1a37d8 <col:14> 'int' 4
|-FunctionDecl 0x56101f1a3918 prev 0x56101f19edc0 <./src/ladder.c:69:1, line:71:1> line:69:6 Read_U_b_YBottle_HOLD 'BOOL (void)'
| `-CompoundStmt 0x56101f1a3a78 <col:34, line:71:1>
|   `-ReturnStmt 0x56101f1a3a60 <line:70:2, col:33>
|     `-CallExpr 0x56101f1a3a18 <col:9, col:33> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x56101f1a3a00 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1a39b8 <col:9> 'BOOL (uint8_t)' Function 0x56101f19d400 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x56101f1a3a48 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:16:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x56101f1a39e0 <col:14> 'int' 8
|-FunctionDecl 0x56101f1a3b28 prev 0x56101f1a1040 <./src/ladder.c:73:1, line:75:1> line:73:6 Write_U_b_YBottle_HOLD 'void (BOOL)'
| |-ParmVarDecl 0x56101f1a3aa0 <col:29, col:34> col:34 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x56101f1a3d18 <col:37, line:75:1>
|   `-CallExpr 0x56101f1a3cb0 <line:74:2, col:30> 'void'
|     |-ImplicitCastExpr 0x56101f1a3c98 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f1a3bd0 <col:2> 'void (uint8_t, BOOL)' Function 0x56101f19d280 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x56101f1a3ce8 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:16:14> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x56101f1a3bf8 <col:14> 'int' 8
|     `-ImplicitCastExpr 0x56101f1a3d00 <./src/ladder.c:74:29> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56101f1a3c18 <col:29> 'BOOL':'unsigned char' lvalue ParmVar 0x56101f1a3aa0 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f1a3dc0 prev 0x56101f1a1178 <line:77:1, line:79:1> line:77:6 Read_U_b_YMotor_FORWARD 'BOOL (void)'
| `-CompoundStmt 0x56101f1a3f20 <col:36, line:79:1>
|   `-ReturnStmt 0x56101f1a3f08 <line:78:2, col:35>
|     `-CallExpr 0x56101f1a3ec0 <col:9, col:35> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x56101f1a3ea8 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1a3e60 <col:9> 'BOOL (uint8_t)' Function 0x56101f19d400 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x56101f1a3ef0 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:17:14> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x56101f1a3e88 <col:14> 'int' 9
|-FunctionDecl 0x56101f1a3fd0 prev 0x56101f1a12b0 <./src/ladder.c:81:1, line:83:1> line:81:6 Write_U_b_YMotor_FORWARD 'void (BOOL)'
| |-ParmVarDecl 0x56101f1a3f48 <col:31, col:36> col:36 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x56101f1a4168 <col:39, line:83:1>
|   `-CallExpr 0x56101f1a4100 <line:82:2, col:32> 'void'
|     |-ImplicitCastExpr 0x56101f1a40e8 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f1a4078 <col:2> 'void (uint8_t, BOOL)' Function 0x56101f19d280 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x56101f1a4138 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:17:14> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x56101f1a40a0 <col:14> 'int' 9
|     `-ImplicitCastExpr 0x56101f1a4150 <./src/ladder.c:82:31> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56101f1a40c0 <col:31> 'BOOL':'unsigned char' lvalue ParmVar 0x56101f1a3f48 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f1a4210 prev 0x56101f1a13e8 <line:85:1, line:87:1> line:85:6 Read_U_b_YWater_ON 'BOOL (void)'
| `-CompoundStmt 0x56101f1a4370 <col:31, line:87:1>
|   `-ReturnStmt 0x56101f1a4358 <line:86:2, col:30>
|     `-CallExpr 0x56101f1a4310 <col:9, col:30> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x56101f1a42f8 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1a42b0 <col:9> 'BOOL (uint8_t)' Function 0x56101f19d400 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x56101f1a4340 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:18:15> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x56101f1a42d8 <col:15> 'int' 10
|-FunctionDecl 0x56101f1a4420 prev 0x56101f1a1520 <./src/ladder.c:89:1, line:91:1> line:89:6 Write_U_b_YWater_ON 'void (BOOL)'
| |-ParmVarDecl 0x56101f1a4398 <col:26, col:31> col:31 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x56101f1a45b8 <col:34, line:91:1>
|   `-CallExpr 0x56101f1a4550 <line:90:2, col:27> 'void'
|     |-ImplicitCastExpr 0x56101f1a4538 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f1a44c8 <col:2> 'void (uint8_t, BOOL)' Function 0x56101f19d280 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x56101f1a4588 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:18:15> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x56101f1a44f0 <col:15> 'int' 10
|     `-ImplicitCastExpr 0x56101f1a45a0 <./src/ladder.c:90:26> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56101f1a4510 <col:26> 'BOOL':'unsigned char' lvalue ParmVar 0x56101f1a4398 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f1a4660 prev 0x56101f1a1658 <line:93:1, line:95:1> line:93:6 Read_U_b_YMotor_REVERSE 'BOOL (void)'
| `-CompoundStmt 0x56101f1a47c0 <col:36, line:95:1>
|   `-ReturnStmt 0x56101f1a47a8 <line:94:2, col:35>
|     `-CallExpr 0x56101f1a4760 <col:9, col:35> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x56101f1a4748 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1a4700 <col:9> 'BOOL (uint8_t)' Function 0x56101f19d400 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x56101f1a4790 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:19:15> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x56101f1a4728 <col:15> 'int' 11
|-FunctionDecl 0x56101f1a4870 prev 0x56101f1a1790 <./src/ladder.c:97:1, line:99:1> line:97:6 Write_U_b_YMotor_REVERSE 'void (BOOL)'
| |-ParmVarDecl 0x56101f1a47e8 <col:31, col:36> col:36 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x56101f1a4a08 <col:39, line:99:1>
|   `-CallExpr 0x56101f1a49a0 <line:98:2, col:32> 'void'
|     |-ImplicitCastExpr 0x56101f1a4988 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56101f1a4918 <col:2> 'void (uint8_t, BOOL)' Function 0x56101f19d280 'write_pin' 'void (uint8_t, BOOL)'
|     |-ImplicitCastExpr 0x56101f1a49d8 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:19:15> 'uint8_t':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x56101f1a4940 <col:15> 'int' 11
|     `-ImplicitCastExpr 0x56101f1a49f0 <./src/ladder.c:98:31> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56101f1a4960 <col:31> 'BOOL':'unsigned char' lvalue ParmVar 0x56101f1a47e8 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x56101f1a4ab0 prev 0x56101f1a18c8 <line:101:1, line:103:1> line:101:6 Read_U_b_YBottle_RELEASE 'BOOL (void)'
| `-CompoundStmt 0x56101f1a4c10 <col:37, line:103:1>
|   `-ReturnStmt 0x56101f1a4bf8 <line:102:2, col:36>
|     `-CallExpr 0x56101f1a4bb0 <col:9, col:36> 'BOOL':'unsigned char'
|       |-ImplicitCastExpr 0x56101f1a4b98 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56101f1a4b50 <col:9> 'BOOL (uint8_t)' Function 0x56101f19d400 'read_pin' 'BOOL (uint8_t)'
|       `-ImplicitCastExpr 0x56101f1a4be0 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:20:15> 'uint8_t':'unsigned char' <IntegralCast>
|         `-IntegerLiteral 0x56101f1a4b78 <col:15> 'int' 12
`-FunctionDecl 0x56101f1a4cc0 prev 0x56101f1a1a00 <./src/ladder.c:105:1, line:107:1> line:105:6 Write_U_b_YBottle_RELEASE 'void (BOOL)'
  |-ParmVarDecl 0x56101f1a4c38 <col:32, col:37> col:37 used v 'BOOL':'unsigned char'
  `-CompoundStmt 0x56101f1a4e58 <col:40, line:107:1>
    `-CallExpr 0x56101f1a4df0 <line:106:2, col:33> 'void'
      |-ImplicitCastExpr 0x56101f1a4dd8 <col:2> 'void (*)(uint8_t, BOOL)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x56101f1a4d68 <col:2> 'void (uint8_t, BOOL)' Function 0x56101f19d280 'write_pin' 'void (uint8_t, BOOL)'
      |-ImplicitCastExpr 0x56101f1a4e28 </vagrant/apps/plc_bottlewash/./inc/plc_platform.h:20:15> 'uint8_t':'unsigned char' <IntegralCast>
      | `-IntegerLiteral 0x56101f1a4d90 <col:15> 'int' 12
      `-ImplicitCastExpr 0x56101f1a4e40 <./src/ladder.c:106:32> 'BOOL':'unsigned char' <LValueToRValue>
        `-DeclRefExpr 0x56101f1a4db0 <col:32> 'BOOL':'unsigned char' lvalue ParmVar 0x56101f1a4c38 'v' 'BOOL':'unsigned char'
