TranslationUnitDecl 0x5584a78ba4f8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5584a78bad98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5584a78baa90 '__int128'
|-TypedefDecl 0x5584a78bae08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5584a78baab0 'unsigned __int128'
|-TypedefDecl 0x5584a78bb110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5584a78baee0 'struct __NSConstantString_tag'
|   `-Record 0x5584a78bae60 '__NSConstantString_tag'
|-TypedefDecl 0x5584a78bb1b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5584a78bb170 'char *'
|   `-BuiltinType 0x5584a78ba590 'char'
|-TypedefDecl 0x5584a78fb5c0 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5584a78bb450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5584a78bb290 'struct __va_list_tag'
|     `-Record 0x5584a78bb210 '__va_list_tag'
|-TypedefDecl 0x5584a78fb690 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x5584a78ba610 'long'
|-TypedefDecl 0x5584a78fb700 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x5584a78ba6b0 'unsigned long'
|-TypedefDecl 0x5584a78fb770 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x5584a78ba5f0 'int'
|-RecordDecl 0x5584a78fb7c8 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x5584a78fb8c8 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x5584a78fb930 <col:43, col:77> aligned
| |   `-ConstantExpr 0x5584a78fb918 <col:55, col:76> 'unsigned long'
| |     `-UnaryExprOrTypeTraitExpr 0x5584a78fb890 <col:55, col:76> 'unsigned long' __alignof 'long long'
| `-FieldDecl 0x5584a78fb9e0 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x5584a78fba48 <col:45, col:81> aligned
|     `-ConstantExpr 0x5584a78fba30 <col:57, col:80> 'unsigned long'
|       `-UnaryExprOrTypeTraitExpr 0x5584a78fb9a8 <col:57, col:80> 'unsigned long' __alignof 'long double'
|-TypedefDecl 0x5584a78fbb10 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x5584a78fbab0 'struct max_align_t' sugar
|   `-RecordType 0x5584a78fb850 'max_align_t'
|     `-Record 0x5584a78fb7c8 ''
|-TypedefDecl 0x5584a78fbb98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x5584a78ba5b0 'signed char'
|-TypedefDecl 0x5584a78fbc08 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x5584a78ba5d0 'short'
|-TypedefDecl 0x5584a78fbc78 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x5584a78ba5f0 'int'
|-TypedefDecl 0x5584a78fbce8 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x5584a78ba610 'long'
|-TypedefDecl 0x5584a78fbd58 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x5584a78ba5b0 'signed char'
|-TypedefDecl 0x5584a78fbdc8 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x5584a78ba5d0 'short'
|-TypedefDecl 0x5584a78fbe38 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x5584a78ba5f0 'int'
|-TypedefDecl 0x5584a78fbea8 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x5584a78ba610 'long'
|-TypedefDecl 0x5584a78fbf18 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x5584a78ba5b0 'signed char'
|-TypedefDecl 0x5584a78fbf88 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x5584a78ba5d0 'short'
|-TypedefDecl 0x5584a78fbff8 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x5584a78ba5f0 'int'
|-TypedefDecl 0x5584a78fc068 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x5584a78ba610 'long'
|-TypedefDecl 0x5584a78fc0d8 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x5584a78ba650 'unsigned char'
|-TypedefDecl 0x5584a78fc148 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x5584a78ba670 'unsigned short'
|-TypedefDecl 0x5584a78fc1b8 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x5584a78ba690 'unsigned int'
|-TypedefDecl 0x5584a78fc228 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x5584a78ba6b0 'unsigned long'
|-TypedefDecl 0x5584a78fc298 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x5584a78ba650 'unsigned char'
|-TypedefDecl 0x5584a78fc308 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x5584a78ba670 'unsigned short'
|-TypedefDecl 0x5584a78fc378 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x5584a78ba690 'unsigned int'
|-TypedefDecl 0x5584a78fc3e8 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x5584a78ba6b0 'unsigned long'
|-TypedefDecl 0x5584a78fc458 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x5584a78ba650 'unsigned char'
|-TypedefDecl 0x5584a78fc4c8 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x5584a78ba670 'unsigned short'
|-TypedefDecl 0x5584a78fc538 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x5584a78ba690 'unsigned int'
|-TypedefDecl 0x5584a7930e80 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x5584a78ba6b0 'unsigned long'
|-TypedefDecl 0x5584a7930ef0 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x5584a78ba610 'long'
|-TypedefDecl 0x5584a7930f60 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x5584a78ba6b0 'unsigned long'
|-TypedefDecl 0x5584a7930fd0 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x5584a78ba5b0 'signed char'
|-TypedefDecl 0x5584a7931040 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x5584a78ba5d0 'short'
|-TypedefDecl 0x5584a79310b0 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x5584a78ba5f0 'int'
|-TypedefDecl 0x5584a7931120 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x5584a78ba630 'long long'
|-TypedefDecl 0x5584a7931190 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x5584a78ba650 'unsigned char'
|-TypedefDecl 0x5584a7931200 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x5584a78ba670 'unsigned short'
|-TypedefDecl 0x5584a7931270 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x5584a78ba690 'unsigned int'
|-TypedefDecl 0x5584a79312e0 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x5584a78ba6d0 'unsigned long long'
|-TypedefDecl 0x5584a7931350 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x5584a78ba6b0 'unsigned long'
|-TypedefDecl 0x5584a7931510 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x5584a78ba5f0 'int'
|-TypedefDecl 0x5584a79315a8 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x5584a7931570 'atomic_t' sugar
|   |-Typedef 0x5584a7931510 'atomic_t'
|   `-BuiltinType 0x5584a78ba5f0 'int'
|-FunctionDecl 0x5584a7931938 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x5584a79316d0 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x5584a7931778 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x5584a79317f0 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x5584a7931c10 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5584a7931a78 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5584a7931af0 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5584a794aea0 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5584a7931cf8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5584a7931d70 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5584a794b090 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5584a794af88 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x5584a794b208 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5584a794b178 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x5584a794b430 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x5584a794b320 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x5584a794b628 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5584a794b518 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5584a794b590 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5584a794b7a8 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5584a794b718 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x5584a794b998 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5584a794b888 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x5584a794b900 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x5584a794bb98 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5584a794ba88 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5584a794bb00 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5584a794bd98 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5584a794bc88 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5584a794bd00 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5584a794bfc0 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5584a794beb0 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x5584a794bf28 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x5584a794c300 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x5584a794c168 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x5584a794c1e8 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x5584a794ca18 <line:352:1, line:356:1>
| | |-DeclStmt 0x5584a794c6e0 <line:353:2, col:57>
| | | `-VarDecl 0x5584a794c3c0 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x5584a794c6b8 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x5584a794c6a0 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x5584a794c428 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x5584a794b430 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x5584a794c618 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x5584a794c5f8 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x5584a794c5e0 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x5584a794c468 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x5584a794c448 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x5584a794c168 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x5584a794c5c0 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x5584a794c5a0 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x5584a794c588 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x5584a794c570 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x5584a794c4a8 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x5584a794c488 <line:353:52> 'int' lvalue ParmVar 0x5584a794c1e8 'bit' 'int'
| | |             `-ParenExpr 0x5584a794c550 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x5584a794c530 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x5584a794c4d8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x5584a794c518 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x5584a794c4f8 <col:45> 'int' 8
| | `-ReturnStmt 0x5584a794c9d8 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x5584a794c9c0 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5584a794c9a0 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x5584a794c960 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x5584a794c940 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x5584a794c6f8 <col:10> 'int' 1
| |       |   `-ParenExpr 0x5584a794c920 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x5584a794c900 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x5584a794c8e8 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x5584a794c718 <col:15> 'atomic_val_t':'int' lvalue Var 0x5584a794c3c0 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x5584a794c8c8 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x5584a794c8a8 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x5584a794c890 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x5584a794c878 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x5584a794c738 <col:23> 'int' lvalue ParmVar 0x5584a794c1e8 'bit' 'int'
| |       |           `-ParenExpr 0x5584a794c858 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x5584a794c838 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x5584a794c7e0 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x5584a794c7c0 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x5584a794c768 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x5584a794c7a8 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x5584a794c788 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x5584a794c820 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x5584a794c800 <col:44> 'int' 1
| |       `-IntegerLiteral 0x5584a794c980 <col:53> 'int' 0
| `-FullComment 0x5584a7a3a630 <line:341:3, line:349:55>
|   |-ParagraphComment 0x5584a7af0680 <line:341:3>
|   | `-TextComment 0x5584a7af0650 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af06a0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5584a7af0700 <col:10, col:32>
|   |   `-TextComment 0x5584a7af06d0 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x5584a7a3a330 <line:343:3, line:344:66>
|   | |-TextComment 0x5584a7af0720 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x5584a7a3a230 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5584a7a3a250 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x5584a7a3a2a0 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5584a7a3a2c0 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x5584a7a3a2e0 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5584a7a3a380 <line:346:3>
|   | `-TextComment 0x5584a7a3a350 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3a3a0 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3a450 <line:346:17, line:347:3>
|   |   |-TextComment 0x5584a7a3a400 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5584a7a3a420 <line:347:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3a470 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3a500 <col:14, col:43>
|   |   `-TextComment 0x5584a7a3a4d0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5584a7a3a550 <line:349:3>
|   | `-TextComment 0x5584a7a3a520 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3a570 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5584a7a3a5d0 <col:11, col:55>
|       `-TextComment 0x5584a7a3a5a0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5584a794cbe0 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5584a794ca48 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x5584a794cac8 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x5584a7958f98 <line:370:1, line:377:1>
| | |-DeclStmt 0x5584a7958a60 <line:371:2, col:38>
| | | `-VarDecl 0x5584a794cca0 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5584a7958a40 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5584a7958a20 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5584a794cd08 <col:27> 'int' 1
| | |       `-ParenExpr 0x5584a7958a00 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5584a79589e0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5584a79589c8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5584a794cde0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5584a794cdc8 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5584a794cda8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5584a794cd58 <line:371:34> 'int' lvalue ParmVar 0x5584a794cac8 'bit' 'int'
| | |           `-ParenExpr 0x5584a79589a8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5584a7958988 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5584a794ce90 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5584a794ce70 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5584a794ce18 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5584a794ce58 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5584a794ce38 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5584a7958970 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5584a7958950 <col:63> 'int' 1
| | |-DeclStmt 0x5584a7958af0 <line:372:2, col:18>
| | | `-VarDecl 0x5584a7958a88 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x5584a7958e38 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x5584a7958b08 <col:2> 'atomic_val_t':'int' lvalue Var 0x5584a7958a88 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x5584a7958e08 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x5584a7958df0 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x5584a7958b28 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5584a794bd98 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x5584a7958d18 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x5584a7958cf8 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x5584a7958ce0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x5584a7958b68 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x5584a7958b48 <line:374:31> 'atomic_t *' lvalue ParmVar 0x5584a794ca48 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x5584a7958cc0 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x5584a7958ca0 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x5584a7958c88 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x5584a7958c70 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x5584a7958ba8 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x5584a7958b88 <line:374:39> 'int' lvalue ParmVar 0x5584a794cac8 'bit' 'int'
| | |   |       `-ParenExpr 0x5584a7958c50 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x5584a7958c30 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x5584a7958bd8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x5584a7958c18 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x5584a7958bf8 <col:45> 'int' 8
| | |   `-UnaryOperator 0x5584a7958d70 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~' cannot overflow
| | |     `-ImplicitCastExpr 0x5584a7958d58 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x5584a7958d38 <col:46> 'atomic_val_t':'int' lvalue Var 0x5584a794cca0 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x5584a7958f60 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x5584a7958f48 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5584a7958f28 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x5584a7958ee8 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x5584a7958ec8 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5584a7958e98 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5584a7958e58 <col:10> 'atomic_val_t':'int' lvalue Var 0x5584a7958a88 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x5584a7958eb0 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5584a7958e78 <col:16> 'atomic_val_t':'int' lvalue Var 0x5584a794cca0 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x5584a7958f08 <col:25> 'int' 0
| `-FullComment 0x5584a7a3abc0 <line:359:3, line:367:55>
|   |-ParagraphComment 0x5584a7a3a6d0 <line:359:3>
|   | `-TextComment 0x5584a7a3a6a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3a6f0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7a3a750 <col:10, col:42>
|   |   `-TextComment 0x5584a7a3a720 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x5584a7a3a8c0 <line:361:3, line:362:66>
|   | |-TextComment 0x5584a7a3a770 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x5584a7a3a7c0 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5584a7a3a7e0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x5584a7a3a830 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5584a7a3a850 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x5584a7a3a870 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5584a7a3a910 <line:364:3>
|   | `-TextComment 0x5584a7a3a8e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3a930 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3a9e0 <line:364:17, line:365:3>
|   |   |-TextComment 0x5584a7a3a990 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5584a7a3a9b0 <line:365:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3aa00 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3aa90 <col:14, col:43>
|   |   `-TextComment 0x5584a7a3aa60 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5584a7a3aae0 <line:367:3>
|   | `-TextComment 0x5584a7a3aab0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3ab00 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5584a7a3ab60 <col:11, col:55>
|       `-TextComment 0x5584a7a3ab30 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5584a79590f0 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5584a7958fd8 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x5584a7959058 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x5584a7959988 <line:391:1, line:398:1>
| | |-DeclStmt 0x5584a79594a0 <line:392:2, col:38>
| | | `-VarDecl 0x5584a79591b0 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5584a7959480 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5584a7959460 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5584a7959218 <col:27> 'int' 1
| | |       `-ParenExpr 0x5584a7959440 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5584a7959420 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5584a7959408 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5584a79592c0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5584a79592a8 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5584a7959288 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5584a7959238 <line:392:34> 'int' lvalue ParmVar 0x5584a7959058 'bit' 'int'
| | |           `-ParenExpr 0x5584a79593e8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5584a79593c8 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5584a7959370 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5584a7959350 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5584a79592f8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5584a7959338 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5584a7959318 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5584a79593b0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5584a7959390 <col:63> 'int' 1
| | |-DeclStmt 0x5584a7959530 <line:393:2, col:18>
| | | `-VarDecl 0x5584a79594c8 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x5584a79597f8 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x5584a7959548 <col:2> 'atomic_val_t':'int' lvalue Var 0x5584a79594c8 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x5584a79597b0 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x5584a7959798 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x5584a7959568 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5584a794b998 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x5584a7959758 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x5584a7959738 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x5584a7959720 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x5584a79595a8 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x5584a7959588 <line:395:30> 'atomic_t *' lvalue ParmVar 0x5584a7958fd8 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x5584a7959700 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x5584a79596e0 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x5584a79596c8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x5584a79596b0 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x5584a79595e8 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x5584a79595c8 <line:395:38> 'int' lvalue ParmVar 0x5584a7959058 'bit' 'int'
| | |   |       `-ParenExpr 0x5584a7959690 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x5584a7959670 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x5584a7959618 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x5584a7959658 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x5584a7959638 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x5584a79597e0 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x5584a7959778 <col:44> 'atomic_val_t':'int' lvalue Var 0x5584a79591b0 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x5584a7959920 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x5584a7959908 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5584a79598e8 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x5584a79598a8 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x5584a7959888 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5584a7959858 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5584a7959818 <col:10> 'atomic_val_t':'int' lvalue Var 0x5584a79594c8 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x5584a7959870 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5584a7959838 <col:16> 'atomic_val_t':'int' lvalue Var 0x5584a79591b0 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x5584a79598c8 <col:25> 'int' 0
| `-FullComment 0x5584a7a3b150 <line:380:3, line:388:55>
|   |-ParagraphComment 0x5584a7a3ac60 <line:380:3>
|   | `-TextComment 0x5584a7a3ac30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3ac80 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5584a7a3ace0 <col:10, col:31>
|   |   `-TextComment 0x5584a7a3acb0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x5584a7a3ae50 <line:382:3, line:383:66>
|   | |-TextComment 0x5584a7a3ad00 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5584a7a3ad50 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5584a7a3ad70 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x5584a7a3adc0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5584a7a3ade0 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x5584a7a3ae00 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5584a7a3aea0 <line:385:3>
|   | `-TextComment 0x5584a7a3ae70 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3aec0 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3af70 <line:385:17, line:386:3>
|   |   |-TextComment 0x5584a7a3af20 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5584a7a3af40 <line:386:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3af90 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3b020 <col:14, col:43>
|   |   `-TextComment 0x5584a7a3aff0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5584a7a3b070 <line:388:3>
|   | `-TextComment 0x5584a7a3b040 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3b090 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5584a7a3b0f0 <col:11, col:55>
|       `-TextComment 0x5584a7a3b0c0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5584a7959b60 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5584a79599c8 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x5584a7959a48 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x5584a795a238 <line:412:1, line:416:1>
| | |-DeclStmt 0x5584a7959f10 <line:413:2, col:38>
| | | `-VarDecl 0x5584a7959c20 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5584a7959ef0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5584a7959ed0 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5584a7959c88 <col:27> 'int' 1
| | |       `-ParenExpr 0x5584a7959eb0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5584a7959e90 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5584a7959e78 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5584a7959d30 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5584a7959d18 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5584a7959cf8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5584a7959ca8 <line:413:34> 'int' lvalue ParmVar 0x5584a7959a48 'bit' 'int'
| | |           `-ParenExpr 0x5584a7959e58 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5584a7959e38 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5584a7959de0 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5584a7959dc0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5584a7959d68 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5584a7959da8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5584a7959d88 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5584a7959e20 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5584a7959e00 <col:63> 'int' 1
| | `-CStyleCastExpr 0x5584a795a1e0 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x5584a795a1a0 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x5584a795a188 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7959f28 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5584a794bd98 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x5584a795a118 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x5584a795a0f8 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x5584a795a0e0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5584a7959f68 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x5584a7959f48 <line:415:31> 'atomic_t *' lvalue ParmVar 0x5584a79599c8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x5584a795a0c0 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x5584a795a0a0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x5584a795a088 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x5584a795a070 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x5584a7959fa8 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x5584a7959f88 <line:415:39> 'int' lvalue ParmVar 0x5584a7959a48 'bit' 'int'
| |     |       `-ParenExpr 0x5584a795a050 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x5584a795a030 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x5584a7959fd8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x5584a795a018 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x5584a7959ff8 <col:45> 'int' 8
| |     `-UnaryOperator 0x5584a795a170 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~' cannot overflow
| |       `-ImplicitCastExpr 0x5584a795a158 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a795a138 <col:46> 'atomic_val_t':'int' lvalue Var 0x5584a7959c20 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5584a7a3b6c0 <line:401:3, line:409:14>
|   |-ParagraphComment 0x5584a7a3b1f0 <line:401:3>
|   | `-TextComment 0x5584a7a3b1c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3b210 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5584a7a3b270 <col:10, col:33>
|   |   `-TextComment 0x5584a7a3b240 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x5584a7a3b3c0 <line:403:3, line:404:66>
|   | |-TextComment 0x5584a7a3b290 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x5584a7a3b2e0 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5584a7a3b300 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x5584a7a3b350 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x5584a7a3b370 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5584a7a3b410 <line:406:3>
|   | `-TextComment 0x5584a7a3b3e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3b430 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3b4e0 <line:406:17, line:407:3>
|   |   |-TextComment 0x5584a7a3b490 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5584a7a3b4b0 <line:407:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3b500 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3b590 <col:14, col:43>
|   |   `-TextComment 0x5584a7a3b560 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5584a7a3b5e0 <line:409:3>
|   | `-TextComment 0x5584a7a3b5b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3b600 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7a3b660 <col:11, col:14>
|       `-TextComment 0x5584a7a3b630 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a795a380 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5584a795a268 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x5584a795a2e8 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x5584a795aa58 <line:430:1, line:434:1>
| | |-DeclStmt 0x5584a795a730 <line:431:2, col:38>
| | | `-VarDecl 0x5584a795a440 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5584a795a710 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5584a795a6f0 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5584a795a4a8 <col:27> 'int' 1
| | |       `-ParenExpr 0x5584a795a6d0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5584a795a6b0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5584a795a698 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5584a795a550 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5584a795a538 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5584a795a518 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5584a795a4c8 <line:431:34> 'int' lvalue ParmVar 0x5584a795a2e8 'bit' 'int'
| | |           `-ParenExpr 0x5584a795a678 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5584a795a658 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5584a795a600 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5584a795a5e0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5584a795a588 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5584a795a5c8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5584a795a5a8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5584a795a640 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5584a795a620 <col:63> 'int' 1
| | `-CStyleCastExpr 0x5584a795aa00 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x5584a795a9a8 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x5584a795a990 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a795a748 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5584a794b998 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x5584a795a938 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x5584a795a918 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x5584a795a900 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5584a795a788 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x5584a795a768 <line:433:30> 'atomic_t *' lvalue ParmVar 0x5584a795a268 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x5584a795a8e0 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x5584a795a8c0 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x5584a795a8a8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x5584a795a890 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x5584a795a7c8 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x5584a795a7a8 <line:433:38> 'int' lvalue ParmVar 0x5584a795a2e8 'bit' 'int'
| |     |       `-ParenExpr 0x5584a795a870 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x5584a795a850 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x5584a795a7f8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x5584a795a838 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x5584a795a818 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x5584a795a9d8 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5584a795a970 <col:44> 'atomic_val_t':'int' lvalue Var 0x5584a795a440 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5584a7a3bc30 <line:419:3, line:427:14>
|   |-ParagraphComment 0x5584a7a3b760 <line:419:3>
|   | `-TextComment 0x5584a7a3b730 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3b780 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5584a7a3b7e0 <col:10, col:31>
|   |   `-TextComment 0x5584a7a3b7b0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x5584a7a3b930 <line:421:3, line:422:66>
|   | |-TextComment 0x5584a7a3b800 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5584a7a3b850 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5584a7a3b870 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x5584a7a3b8c0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x5584a7a3b8e0 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5584a7a3b980 <line:424:3>
|   | `-TextComment 0x5584a7a3b950 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3b9a0 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3ba50 <line:424:17, line:425:3>
|   |   |-TextComment 0x5584a7a3ba00 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5584a7a3ba20 <line:425:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3ba70 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3bb00 <col:14, col:43>
|   |   `-TextComment 0x5584a7a3bad0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5584a7a3bb50 <line:427:3>
|   | `-TextComment 0x5584a7a3bb20 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3bb70 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7a3bbd0 <col:11, col:14>
|       `-TextComment 0x5584a7a3bba0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a795acc0 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x5584a795aa88 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x5584a795ab08 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x5584a795ab80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x5584a795b788 <line:449:1, line:457:1>
| | |-DeclStmt 0x5584a795b078 <line:450:2, col:38>
| | | `-VarDecl 0x5584a795ad88 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5584a795b058 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5584a795b038 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5584a795adf0 <col:27> 'int' 1
| | |       `-ParenExpr 0x5584a795b018 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5584a795aff8 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5584a795afe0 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5584a795ae98 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5584a795ae80 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5584a795ae60 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5584a795ae10 <line:450:34> 'int' lvalue ParmVar 0x5584a795ab08 'bit' 'int'
| | |           `-ParenExpr 0x5584a795afc0 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5584a795afa0 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5584a795af48 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5584a795af28 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5584a795aed0 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5584a795af10 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5584a795aef0 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5584a795af88 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5584a795af68 <col:63> 'int' 1
| | `-IfStmt 0x5584a795b6a0 <line:452:2, line:456:2> has_else
| |   |-ImplicitCastExpr 0x5584a795b0b0 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x5584a795b090 <col:6> 'bool' lvalue ParmVar 0x5584a795ab80 'val' 'bool'
| |   |-CompoundStmt 0x5584a795b390 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x5584a795b368 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x5584a795b310 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x5584a795b2f8 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5584a795b0c8 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5584a794b998 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x5584a795b2b8 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x5584a795b298 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x5584a795b280 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x5584a795b108 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x5584a795b0e8 <line:453:31> 'atomic_t *' lvalue ParmVar 0x5584a795aa88 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x5584a795b260 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x5584a795b240 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x5584a795b228 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x5584a795b210 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x5584a795b148 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x5584a795b128 <line:453:39> 'int' lvalue ParmVar 0x5584a795ab08 'bit' 'int'
| |   |     |       `-ParenExpr 0x5584a795b1f0 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x5584a795b1d0 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x5584a795b178 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x5584a795b1b8 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x5584a795b198 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x5584a795b340 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x5584a795b2d8 <col:45> 'atomic_val_t':'int' lvalue Var 0x5584a795ad88 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x5584a795b688 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x5584a795b660 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x5584a795b620 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x5584a795b608 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x5584a795b3a8 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5584a794bd98 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x5584a795b598 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x5584a795b578 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x5584a795b560 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x5584a795b3e8 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x5584a795b3c8 <line:455:32> 'atomic_t *' lvalue ParmVar 0x5584a795aa88 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x5584a795b540 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x5584a795b520 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x5584a795b508 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x5584a795b4f0 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x5584a795b428 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x5584a795b408 <line:455:40> 'int' lvalue ParmVar 0x5584a795ab08 'bit' 'int'
| |         |       `-ParenExpr 0x5584a795b4d0 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x5584a795b4b0 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x5584a795b458 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x5584a795b498 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x5584a795b478 <col:45> 'int' 8
| |         `-UnaryOperator 0x5584a795b5f0 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~' cannot overflow
| |           `-ImplicitCastExpr 0x5584a795b5d8 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x5584a795b5b8 <col:47> 'atomic_val_t':'int' lvalue Var 0x5584a795ad88 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5584a7a3c310 <line:437:3, line:446:14>
|   |-ParagraphComment 0x5584a7a3bcd0 <line:437:3>
|   | `-TextComment 0x5584a7a3bca0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3bcf0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5584a7a3bd50 <col:10, col:48>
|   |   `-TextComment 0x5584a7a3bd20 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x5584a7a3bf20 <line:439:3, line:440:66>
|   | |-TextComment 0x5584a7a3bd70 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5584a7a3bdc0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5584a7a3bde0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x5584a7a3be30 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5584a7a3be50 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x5584a7a3bea0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x5584a7a3bec0 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5584a7a3bf70 <line:442:3>
|   | `-TextComment 0x5584a7a3bf40 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3bf90 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3c040 <line:442:17, line:443:3>
|   |   |-TextComment 0x5584a7a3bff0 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5584a7a3c010 <line:443:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3c060 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3c110 <line:443:14, line:444:3>
|   |   |-TextComment 0x5584a7a3c0c0 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x5584a7a3c0e0 <line:444:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3c130 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x5584a7a3c1c0 <col:14, col:38>
|   |   `-TextComment 0x5584a7a3c190 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x5584a7a3c210 <line:446:3>
|   | `-TextComment 0x5584a7a3c1e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3c240 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7a3c2a0 <col:11, col:14>
|       `-TextComment 0x5584a7a3c270 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a795b890 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x5584a795b7c0 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x5584a7963ca8 <line:114:1, line:116:1>
|   `-ReturnStmt 0x5584a7963c98 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x5584a7963c80 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5584a7963c60 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x5584a7963ab8 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x5584a7963a98 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x5584a7963a80 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x5584a795b938 <col:10> 'unsigned int' lvalue ParmVar 0x5584a795b7c0 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x5584a7963a60 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x5584a7963c40 <col:22, col:42> 'int'
|           `-BinaryOperator 0x5584a7963c20 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x5584a7963be0 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x5584a7963bc0 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x5584a7963ba8 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x5584a7963ad8 <col:24> 'unsigned int' lvalue ParmVar 0x5584a795b7c0 'x' 'unsigned int'
|             |   `-ParenExpr 0x5584a7963b88 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x5584a7963b68 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x5584a7963b38 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x5584a7963af8 <col:29> 'unsigned int' lvalue ParmVar 0x5584a795b7c0 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x5584a7963b50 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x5584a7963b18 <col:33> 'int' 1
|             `-IntegerLiteral 0x5584a7963c00 <col:40> 'unsigned int' 0
|-FunctionDecl 0x5584a7963eb0 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x5584a7963cf8 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x5584a7963d98 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x5584a7964508 <line:119:1, line:134:1>
|   |-DeclStmt 0x5584a7963fd8 <line:120:2, col:16>
|   | `-VarDecl 0x5584a7963f70 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x5584a79640e0 <line:122:2, line:124:2>
|   | |-BinaryOperator 0x5584a7964060 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x5584a7964048 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5584a7964030 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5584a7963ff0 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x5584a7963d98 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x5584a7964010 <col:15> 'unsigned int' 0
|   | `-CompoundStmt 0x5584a79640c8 <col:19, line:124:2>
|   |   `-ReturnStmt 0x5584a79640b8 <line:123:3, col:10>
|   |     `-ImplicitCastExpr 0x5584a79640a0 <col:10> 's64_t':'long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x5584a7964080 <col:10> 's64_t':'long long' lvalue ParmVar 0x5584a7963cf8 'value' 's64_t':'long long'
|   |-BinaryOperator 0x5584a7964208 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x5584a79640f8 <col:2> 's64_t':'long long' lvalue Var 0x5584a7963f70 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x5584a79641e8 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x5584a7964190 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x5584a7964170 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x5584a7964158 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x5584a7964118 <col:14> 's64_t':'long long' lvalue ParmVar 0x5584a7963cf8 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x5584a7964138 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x5584a79641d0 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x5584a79641b0 <col:29> 'int' 1
|   |-BinaryOperator 0x5584a7964298 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x5584a7964228 <col:2> 's64_t':'long long' lvalue Var 0x5584a7963f70 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x5584a7964280 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x5584a7964268 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a7964248 <col:14> 's64_t':'long long' lvalue Var 0x5584a7963f70 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x5584a79644c8 <line:133:2, col:53>
|     `-BinaryOperator 0x5584a79644a8 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x5584a7964360 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x5584a7964340 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x5584a79642f8 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5584a79642b8 <col:10> 's64_t':'long long' lvalue ParmVar 0x5584a7963cf8 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x5584a7964328 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x5584a7964310 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x5584a79642d8 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x5584a7963d98 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x5584a7964488 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x5584a7964468 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x5584a7964450 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x5584a7964380 <col:29> 's64_t':'long long' lvalue Var 0x5584a7963f70 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x5584a7964430 <col:41, col:52> 'int'
|             `-BinaryOperator 0x5584a7964410 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x5584a79643a0 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x5584a79643f8 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x5584a79643e0 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x5584a79643c0 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x5584a7963d98 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x5584a7964758 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x5584a7964550 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x5584a7964630 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x5584a7a3c730 <line:137:3, line:142:63>
|   |-ParagraphComment 0x5584a7a3c3b0 <line:137:3>
|   | `-TextComment 0x5584a7a3c380 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3c3d0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5584a7a3c430 <col:10, col:68>
|   |   `-TextComment 0x5584a7a3c400 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x5584a7a3c480 <line:139:3>
|   | `-TextComment 0x5584a7a3c450 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3c4a0 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3c550 <line:139:17, line:140:3>
|   |   |-TextComment 0x5584a7a3c500 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x5584a7a3c520 <line:140:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3c570 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3c600 <col:17, col:69>
|   |   `-TextComment 0x5584a7a3c5d0 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x5584a7a3c650 <line:142:3, col:4>
|   | `-TextComment 0x5584a7a3c620 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x5584a7a3c670 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x5584a7a3c6d0 <col:12, col:63>
|       `-TextComment 0x5584a7a3c6a0 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x5584a7964ab0 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x5584a7964848 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5584a79648c8 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x5584a7a3cb50 <line:147:3, line:152:63>
|   |-ParagraphComment 0x5584a7a3c7d0 <line:147:3>
|   | `-TextComment 0x5584a7a3c7a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3c7f0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5584a7a3c850 <col:10, col:68>
|   |   `-TextComment 0x5584a7a3c820 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x5584a7a3c8a0 <line:149:3>
|   | `-TextComment 0x5584a7a3c870 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3c8c0 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3c970 <line:149:17, line:150:3>
|   |   |-TextComment 0x5584a7a3c920 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x5584a7a3c940 <line:150:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3c990 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3ca20 <col:17, col:72>
|   |   `-TextComment 0x5584a7a3c9f0 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x5584a7a3ca70 <line:152:3, col:4>
|   | `-TextComment 0x5584a7a3ca40 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x5584a7a3ca90 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x5584a7a3caf0 <col:12, col:63>
|       `-TextComment 0x5584a7a3cac0 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x5584a7964ef0 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x5584a7964c30 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x5584a7964ca8 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7964d28 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x5584a7964da0 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x5584a7a3d120 <line:157:3, line:164:77>
|   |-ParagraphComment 0x5584a7a3cbf0 <line:157:3>
|   | `-TextComment 0x5584a7a3cbc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3cc10 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5584a7a3cc70 <col:10, col:65>
|   |   `-TextComment 0x5584a7a3cc40 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x5584a7a3ccc0 <line:159:3>
|   | `-TextComment 0x5584a7a3cc90 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3cce0 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3cd90 <line:159:19, line:160:3>
|   |   |-TextComment 0x5584a7a3cd40 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x5584a7a3cd60 <line:160:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3cdb0 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3ce60 <line:160:22, line:161:3>
|   |   |-TextComment 0x5584a7a3ce10 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x5584a7a3ce30 <line:161:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3ce80 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x5584a7a3cf30 <line:161:19, line:162:3>
|   |   |-TextComment 0x5584a7a3cee0 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x5584a7a3cf00 <line:162:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3cf50 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x5584a7a3cfe0 <col:22, col:74>
|   |   `-TextComment 0x5584a7a3cfb0 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x5584a7a3d030 <line:164:3>
|   | `-TextComment 0x5584a7a3d000 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3d050 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x5584a7a3d0b0 <col:11, col:77>
|       `-TextComment 0x5584a7a3d080 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x5584a79652a0 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x5584a7964ff0 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x5584a7965068 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a79650e0 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x5584a7965158 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x5584a7a3d6f0 <line:175:3, line:182:74>
|   |-ParagraphComment 0x5584a7a3d1c0 <line:175:3>
|   | `-TextComment 0x5584a7a3d190 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3d1e0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5584a7a3d240 <col:10, col:64>
|   |   `-TextComment 0x5584a7a3d210 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x5584a7a3d290 <line:177:3>
|   | `-TextComment 0x5584a7a3d260 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3d2b0 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3d360 <line:177:19, line:178:3>
|   |   |-TextComment 0x5584a7a3d310 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x5584a7a3d330 <line:178:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3d380 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3d430 <line:178:22, line:179:3>
|   |   |-TextComment 0x5584a7a3d3e0 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x5584a7a3d400 <line:179:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3d450 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x5584a7a3d500 <line:179:19, line:180:3>
|   |   |-TextComment 0x5584a7a3d4b0 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x5584a7a3d4d0 <line:180:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3d520 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x5584a7a3d5b0 <col:22, col:63>
|   |   `-TextComment 0x5584a7a3d580 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x5584a7a3d600 <line:182:3>
|   | `-TextComment 0x5584a7a3d5d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3d620 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x5584a7a3d680 <col:11, col:74>
|       `-TextComment 0x5584a7a3d650 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x5584a79655d0 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x5584a79653a0 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x5584a7965418 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5584a7965490 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x5584a7a3dc80 <line:187:3, line:197:47>
|   |-ParagraphComment 0x5584a7a3d790 <line:187:3>
|   | `-TextComment 0x5584a7a3d760 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3d7b0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5584a7a3d810 <col:10, col:65>
|   |   `-TextComment 0x5584a7a3d7e0 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x5584a7a3d880 <line:189:3, line:190:60>
|   | |-TextComment 0x5584a7a3d830 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x5584a7a3d850 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x5584a7a3d8d0 <line:192:3>
|   | `-TextComment 0x5584a7a3d8a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3d8f0 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3d9a0 <line:192:19, line:193:3>
|   |   |-TextComment 0x5584a7a3d950 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x5584a7a3d970 <line:193:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3d9c0 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a3da70 <line:193:22, line:194:3>
|   |   |-TextComment 0x5584a7a3da20 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x5584a7a3da40 <line:194:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3da90 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x5584a7a3db20 <col:21, col:61>
|   |   `-TextComment 0x5584a7a3daf0 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x5584a7a3db70 <line:196:3>
|   | `-TextComment 0x5584a7a3db40 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3db90 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x5584a7a3dc10 <line:196:11, line:197:47>
|       |-TextComment 0x5584a7a3dbc0 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x5584a7a3dbe0 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x5584a7965988 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x5584a799be00 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x5584a799bf78 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x5584a799bff0 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x5584a799c0a0 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x5584a799c100 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x5584a799c0a0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x5584a799bf78 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x5584a799c158 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x5584a799c0a0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x5584a799bff0 'next' 'struct _dnode *'
| |-RecordDecl 0x5584a799c1a0 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x5584a799c270 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x5584a799c2e8 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x5584a799c3a0 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x5584a799c400 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x5584a799c3a0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x5584a799c270 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x5584a799c458 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x5584a799c3a0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x5584a799c2e8 'prev' 'struct _dnode *'
|-TypedefDecl 0x5584a799c518 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x5584a799beb0 'struct _dnode' sugar
|   `-RecordType 0x5584a7965a10 'struct _dnode'
|     `-Record 0x5584a7965988 '_dnode'
|-TypedefDecl 0x5584a799c590 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x5584a799beb0 'struct _dnode' sugar
|   `-RecordType 0x5584a7965a10 'struct _dnode'
|     `-Record 0x5584a7965988 '_dnode'
|-FunctionDecl 0x5584a799c890 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5584a799c780 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5584a799cc48 <line:193:1, line:196:1>
| | |-BinaryOperator 0x5584a799cac0 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a799c9b8 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5584a799bf78
| | | | `-MemberExpr 0x5584a799c970 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |   `-ImplicitCastExpr 0x5584a799c958 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a799c938 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5584a799c780 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x5584a799ca98 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x5584a799ca80 <col:30> 'sys_dlist_t *' <LValueToRValue> part_of_explicit_cast
| | |     `-DeclRefExpr 0x5584a799ca18 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x5584a799c780 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x5584a799cc00 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x5584a799cb60 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x5584a799c270
| |   | `-MemberExpr 0x5584a799cb18 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| |   |   `-ImplicitCastExpr 0x5584a799cb00 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5584a799cae0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5584a799c780 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x5584a799cbd8 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x5584a799cbc0 <col:30> 'sys_dlist_t *' <LValueToRValue> part_of_explicit_cast
| |       `-DeclRefExpr 0x5584a799cb90 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x5584a799c780 'list' 'sys_dlist_t *'
| `-FullComment 0x5584a7a3dfc0 <line:185:3, line:189:14>
|   |-ParagraphComment 0x5584a7a3dd20 <line:185:3>
|   | `-TextComment 0x5584a7a3dcf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3dd40 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7a3dda0 <col:10, col:44>
|   |   `-TextComment 0x5584a7a3dd70 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x5584a7a3ddf0 <line:187:3>
|   | `-TextComment 0x5584a7a3ddc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3de10 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3dea0 <col:15, col:37>
|   |   `-TextComment 0x5584a7a3de70 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x5584a7a3def0 <line:189:3>
|   | `-TextComment 0x5584a7a3dec0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a3df10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7a3df70 <col:11, col:14>
|       `-TextComment 0x5584a7a3df40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a799cd40 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a799cc78 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a799fff8 <line:209:1, line:212:1>
| | |-BinaryOperator 0x5584a799fe48 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a799fd80 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x5584a799bff0
| | | | `-MemberExpr 0x5584a799fd38 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |   `-ImplicitCastExpr 0x5584a799fd20 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a799fd00 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a799cc78 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a799fe30 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x5584a799fe10 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x5584a799fde8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5584a799fdb0 <col:23> 'int' 0
| | `-BinaryOperator 0x5584a799ffb0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x5584a799fee8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| |   | `-MemberExpr 0x5584a799fea0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| |   |   `-ImplicitCastExpr 0x5584a799fe88 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5584a799fe68 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a799cc78 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x5584a799ff98 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x5584a799ff78 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x5584a799ff50 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x5584a799ff18 <col:23> 'int' 0
| `-FullComment 0x5584a7a41360 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x5584a7a3e060 <line:201:3>
|   | `-TextComment 0x5584a7a3e030 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a3e080 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5584a7a3e0e0 <col:10, col:57>
|   |   `-TextComment 0x5584a7a3e0b0 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x5584a7a3e130 <line:203:3>
|   | `-TextComment 0x5584a7a3e100 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a3e150 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a3e1e0 <col:15, col:23>
|   |   `-TextComment 0x5584a7a3e1b0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x5584a7a41290 <line:205:3>
|   | `-TextComment 0x5584a7a3e200 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a412b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7a41310 <col:11, col:14>
|       `-TextComment 0x5584a7a412e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a79a01a0 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a79a0090 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x5584a79a0418 <line:223:1, line:225:1>
| | `-ReturnStmt 0x5584a79a03e0 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x5584a79a03c8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5584a79a03a8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x5584a79a0378 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5584a79a02c8 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x5584a799bff0
| |       |   `-MemberExpr 0x5584a79a0280 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| |       |     `-ImplicitCastExpr 0x5584a79a0268 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5584a79a0248 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x5584a79a0090 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x5584a79a0390 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x5584a79a0358 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x5584a79a0330 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x5584a79a02f8 <col:23> 'int' 0
| `-FullComment 0x5584a7a416a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x5584a7a41400 <line:215:3>
|   | `-TextComment 0x5584a7a413d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a41420 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7a41480 <col:10, col:49>
|   |   `-TextComment 0x5584a7a41450 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x5584a7a414d0 <line:217:3>
|   | `-TextComment 0x5584a7a414a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a414f0 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a41580 <col:15, col:23>
|   |   `-TextComment 0x5584a7a41550 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x5584a7a415d0 <line:219:3>
|   | `-TextComment 0x5584a7a415a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a415f0 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x5584a7a41650 <col:11, col:65>
|       `-TextComment 0x5584a7a41620 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x5584a79a05d0 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a79a0440 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a79a04b8 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a79a07f8 <line:237:1, line:239:1>
| | `-ReturnStmt 0x5584a79a07b8 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x5584a79a07a0 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5584a79a0780 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5584a79a0750 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5584a79a0700 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5584a799bf78
| |       |   `-MemberExpr 0x5584a79a06b8 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| |       |     `-ImplicitCastExpr 0x5584a79a06a0 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5584a79a0680 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a0440 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5584a79a0768 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a79a0730 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a04b8 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a41ac0 <line:228:3, line:233:52>
|   |-ParagraphComment 0x5584a7a41740 <line:228:3>
|   | `-TextComment 0x5584a7a41710 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a41760 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7a417c0 <col:10, col:44>
|   |   `-TextComment 0x5584a7a41790 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x5584a7a41810 <line:230:3>
|   | `-TextComment 0x5584a7a417e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a41830 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a418e0 <line:230:15, line:231:3>
|   |   |-TextComment 0x5584a7a41890 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5584a7a418b0 <line:231:3> Text=" "
|   |-ParamCommandComment 0x5584a7a41900 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a41990 <col:15, col:32>
|   |   `-TextComment 0x5584a7a41960 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x5584a7a419e0 <line:233:3>
|   | `-TextComment 0x5584a7a419b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a41a00 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x5584a7a41a60 <col:11, col:52>
|       `-TextComment 0x5584a7a41a30 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x5584a79a0930 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a79a0820 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a79a0898 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a79a0b58 <line:251:1, line:253:1>
| | `-ReturnStmt 0x5584a79a0b18 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x5584a79a0b00 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5584a79a0ae0 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5584a79a0ab0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5584a79a0a60 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x5584a799c270
| |       |   `-MemberExpr 0x5584a79a0a18 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| |       |     `-ImplicitCastExpr 0x5584a79a0a00 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5584a79a09e0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a0820 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5584a79a0ac8 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a79a0a90 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a0898 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a41ee0 <line:242:3, line:247:52>
|   |-ParagraphComment 0x5584a7a41b60 <line:242:3>
|   | `-TextComment 0x5584a7a41b30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a41b80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7a41be0 <col:10, col:44>
|   |   `-TextComment 0x5584a7a41bb0 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x5584a7a41c30 <line:244:3>
|   | `-TextComment 0x5584a7a41c00 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a41c50 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a41d00 <line:244:15, line:245:3>
|   |   |-TextComment 0x5584a7a41cb0 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5584a7a41cd0 <line:245:3> Text=" "
|   |-ParamCommandComment 0x5584a7a41d20 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a41db0 <col:15, col:32>
|   |   `-TextComment 0x5584a7a41d80 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x5584a7a41e00 <line:247:3>
|   | `-TextComment 0x5584a7a41dd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a41e20 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x5584a7a41e80 <col:11, col:52>
|       `-TextComment 0x5584a7a41e50 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x5584a79a0e10 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5584a79a0b80 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5584a79a1028 <line:264:1, line:266:1>
| | `-ReturnStmt 0x5584a79a0ff0 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x5584a79a0fd8 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5584a79a0fb8 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5584a79a0f88 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5584a79a0f38 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5584a799bf78
| |       |   `-MemberExpr 0x5584a79a0ef0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| |       |     `-ImplicitCastExpr 0x5584a79a0ed8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5584a79a0eb8 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a0b80 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5584a79a0fa0 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a79a0f68 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a0b80 'list' 'sys_dlist_t *'
| `-FullComment 0x5584a7a42220 <line:256:3, line:260:41>
|   |-ParagraphComment 0x5584a7a41f80 <line:256:3>
|   | `-TextComment 0x5584a7a41f50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a41fa0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5584a7a42000 <col:10, col:36>
|   |   `-TextComment 0x5584a7a41fd0 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x5584a7a42050 <line:258:3>
|   | `-TextComment 0x5584a7a42020 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a42070 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a42100 <col:15, col:51>
|   |   `-TextComment 0x5584a7a420d0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5584a7a42150 <line:260:3>
|   | `-TextComment 0x5584a7a42120 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a42170 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x5584a7a421d0 <col:11, col:41>
|       `-TextComment 0x5584a7a421a0 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x5584a79a10e0 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5584a79a1050 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5584a79a1388 <line:279:1, line:281:1>
| | `-ReturnStmt 0x5584a79a1350 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x5584a79a1338 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5584a79a1318 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x5584a79a12e8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5584a79a1208 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5584a799bf78
| |       |   `-MemberExpr 0x5584a79a11c0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| |       |     `-ImplicitCastExpr 0x5584a79a11a8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5584a79a1188 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a1050 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5584a79a1300 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x5584a79a12b8 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x5584a799c270
| |           `-MemberExpr 0x5584a79a1270 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| |             `-ImplicitCastExpr 0x5584a79a1258 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x5584a79a1238 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a1050 'list' 'sys_dlist_t *'
| `-FullComment 0x5584a7a425c0 <line:269:3, line:275:50>
|   |-ParagraphComment 0x5584a7a422c0 <line:269:3>
|   | `-TextComment 0x5584a7a42290 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a422e0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5584a7a42340 <col:10, col:45>
|   |   `-TextComment 0x5584a7a42310 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x5584a7a42390 <line:271:3, col:62>
|   | `-TextComment 0x5584a7a42360 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a423e0 <line:273:3>
|   | `-TextComment 0x5584a7a423b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a42400 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a42490 <col:15, col:51>
|   |   `-TextComment 0x5584a7a42460 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5584a7a424e0 <line:275:3>
|   | `-TextComment 0x5584a7a424b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a42500 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x5584a7a42560 <col:11, col:50>
|       `-TextComment 0x5584a7a42530 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x5584a79a14c0 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5584a79a13b0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5584a79a1848 <line:292:1, line:294:1>
| | `-ReturnStmt 0x5584a79a1810 <line:293:2, col:49>
| |   `-ConditionalOperator 0x5584a79a17e0 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x5584a79a1798 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x5584a79a1628 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x5584a79a1610 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x5584a79a1568 <col:9> 'bool (sys_dlist_t *)' Function 0x5584a79a0e10 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x5584a79a1650 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5584a79a1588 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a13b0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5584a79a17c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5584a79a16c8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5584a79a16a0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5584a79a1668 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5584a79a17b0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5584a79a1768 <col:43, col:49> 'struct _dnode *' lvalue .head 0x5584a799bf78
| |         `-MemberExpr 0x5584a79a1720 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| |           `-ImplicitCastExpr 0x5584a79a1708 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5584a79a16e8 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a13b0 'list' 'sys_dlist_t *'
| `-FullComment 0x5584a7a42900 <line:284:3, line:288:63>
|   |-ParagraphComment 0x5584a7a42660 <line:284:3>
|   | `-TextComment 0x5584a7a42630 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a42680 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5584a7a426e0 <col:10, col:54>
|   |   `-TextComment 0x5584a7a426b0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x5584a7a42730 <line:286:3>
|   | `-TextComment 0x5584a7a42700 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a42750 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a427e0 <col:15, col:51>
|   |   `-TextComment 0x5584a7a427b0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5584a7a42830 <line:288:3>
|   | `-TextComment 0x5584a7a42800 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a42850 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x5584a7a428b0 <col:11, col:63>
|       `-TextComment 0x5584a7a42880 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x5584a79a1900 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5584a79a1870 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5584a79a1aa8 <line:307:1, line:309:1>
| | `-ReturnStmt 0x5584a79a1a70 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x5584a79a1a58 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x5584a79a1a28 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5584a799bf78
| |       `-MemberExpr 0x5584a79a19e0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| |         `-ImplicitCastExpr 0x5584a79a19c8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x5584a79a19a8 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a1870 'list' 'sys_dlist_t *'
| `-FullComment 0x5584a7a42ca0 <line:297:3, line:303:40>
|   |-ParagraphComment 0x5584a7a429a0 <line:297:3>
|   | `-TextComment 0x5584a7a42970 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a429c0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5584a7a42a20 <col:10, col:54>
|   |   `-TextComment 0x5584a7a429f0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x5584a7a42a70 <line:299:3, col:42>
|   | `-TextComment 0x5584a7a42a40 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x5584a7a42ac0 <line:301:3>
|   | `-TextComment 0x5584a7a42a90 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a42ae0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a42b70 <col:15, col:51>
|   |   `-TextComment 0x5584a7a42b40 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5584a7a42bc0 <line:303:3>
|   | `-TextComment 0x5584a7a42b90 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a42be0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x5584a7a42c40 <col:11, col:40>
|       `-TextComment 0x5584a7a42c10 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x5584a79a1c60 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a79a1ad0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a79a1b48 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a7949d48 <line:324:1, line:326:1>
| | `-ReturnStmt 0x5584a7949d10 <line:325:2, col:45>
| |   `-ConditionalOperator 0x5584a7949ce0 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x5584a7949b60 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x5584a7949b40 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x5584a79a1de0 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5584a79a1d10 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a1b48 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5584a79a1df8 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x5584a79a1db0 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x5584a799c270
| |     |       `-MemberExpr 0x5584a79a1d68 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| |     |         `-ImplicitCastExpr 0x5584a79a1d50 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x5584a79a1d30 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a1ad0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5584a7949cc8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5584a7949be0 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5584a7949bb8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5584a7949b80 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5584a7949cb0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5584a7949c80 <col:39, col:45> 'struct _dnode *' lvalue .next 0x5584a799bff0
| |         `-MemberExpr 0x5584a7949c38 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| |           `-ImplicitCastExpr 0x5584a7949c20 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5584a7949c00 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a1b48 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a43110 <line:312:3, line:319:78>
|   |-ParagraphComment 0x5584a7a42d40 <line:312:3>
|   | `-TextComment 0x5584a7a42d10 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a42d60 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x5584a7a42dc0 <col:10, col:72>
|   |   `-TextComment 0x5584a7a42d90 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x5584a7a42e10 <line:314:3, col:69>
|   | `-TextComment 0x5584a7a42de0 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5584a7a42e60 <line:316:3>
|   | `-TextComment 0x5584a7a42e30 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a42e80 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a42f30 <line:316:15, line:317:3>
|   |   |-TextComment 0x5584a7a42ee0 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5584a7a42f00 <line:317:3> Text=" "
|   |-ParamCommandComment 0x5584a7a42f50 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a42fe0 <col:15, col:70>
|   |   `-TextComment 0x5584a7a42fb0 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x5584a7a43030 <line:319:3>
|   | `-TextComment 0x5584a7a43000 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a43050 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x5584a7a430b0 <col:11, col:78>
|       `-TextComment 0x5584a7a43080 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x5584a7949e80 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a7949d70 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a7949de8 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a794a278 <line:340:1, line:342:1>
| | `-ReturnStmt 0x5584a794a240 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x5584a794a210 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x5584a794a020 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x5584a794a000 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x5584a7949fd0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5584a7949f30 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5584a7949de8 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5584a7949fe8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x5584a7949fb0 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x5584a7949f88 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x5584a7949f50 <col:23> 'int' 0
| |     |-CallExpr 0x5584a794a118 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x5584a794a100 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x5584a794a040 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x5584a79a1c60 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x5584a794a148 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x5584a794a060 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x5584a7949d70 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x5584a794a160 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x5584a794a080 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x5584a7949de8 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x5584a794a1f8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x5584a794a1d8 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x5584a794a1b0 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x5584a794a178 <col:23> 'int' 0
| `-FullComment 0x5584a7a43570 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x5584a7a431b0 <line:329:3>
|   | `-TextComment 0x5584a7a43180 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a431d0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5584a7a43230 <col:10, col:54>
|   |   `-TextComment 0x5584a7a43200 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x5584a7a432a0 <line:331:3>
|   | `-TextComment 0x5584a7a43250 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a432c0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a43370 <line:331:15, line:332:3>
|   |   |-TextComment 0x5584a7a43320 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5584a7a43340 <line:332:3> Text=" "
|   |-ParamCommandComment 0x5584a7a43390 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a43420 <col:15, col:70>
|   |   `-TextComment 0x5584a7a433f0 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x5584a7a43470 <line:334:3>
|   | `-TextComment 0x5584a7a43440 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a43490 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x5584a7a43510 <line:334:11, line:335:68>
|       |-TextComment 0x5584a7a434c0 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x5584a7a434e0 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x5584a794a3b0 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a794a2a0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a794a318 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a794a768 <line:358:1, line:360:1>
| | `-ReturnStmt 0x5584a794a730 <line:359:2, col:45>
| |   `-ConditionalOperator 0x5584a794a700 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x5584a794a580 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x5584a794a560 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x5584a794a530 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5584a794a460 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5584a794a318 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5584a794a548 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x5584a794a500 <col:18, col:24> 'struct _dnode *' lvalue .head 0x5584a799bf78
| |     |       `-MemberExpr 0x5584a794a4b8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| |     |         `-ImplicitCastExpr 0x5584a794a4a0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x5584a794a480 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x5584a794a2a0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5584a794a6e8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5584a794a600 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5584a794a5d8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5584a794a5a0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5584a794a6d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5584a794a6a0 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| |         `-MemberExpr 0x5584a794a658 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| |           `-ImplicitCastExpr 0x5584a794a640 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5584a794a620 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x5584a794a318 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a43a00 <line:345:3, line:353:10>
|   |-ParagraphComment 0x5584a7a43610 <line:345:3>
|   | `-TextComment 0x5584a7a435e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a43630 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x5584a7a43690 <col:10, col:76>
|   |   `-TextComment 0x5584a7a43660 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x5584a7a436e0 <line:347:3, col:69>
|   | `-TextComment 0x5584a7a436b0 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x5584a7a43730 <line:349:3>
|   | `-TextComment 0x5584a7a43700 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a43750 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a43800 <line:349:15, line:350:3>
|   |   |-TextComment 0x5584a7a437b0 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5584a7a437d0 <line:350:3> Text=" "
|   |-ParamCommandComment 0x5584a7a43820 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a438b0 <col:15, col:74>
|   |   `-TextComment 0x5584a7a43880 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x5584a7a43900 <line:352:3>
|   | `-TextComment 0x5584a7a438d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a43920 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x5584a7a439a0 <line:352:11, line:353:10>
|       |-TextComment 0x5584a7a43950 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x5584a7a43970 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x5584a794a8a0 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a794a790 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a794a808 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a79a4788 <line:375:1, line:377:1>
| | `-ReturnStmt 0x5584a79a4748 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x5584a79a4718 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x5584a794aa40 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x5584a794aa20 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x5584a794a9f0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5584a794a950 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5584a794a808 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5584a794aa08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x5584a794a9d0 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x5584a794a9a8 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x5584a794a970 <col:23> 'int' 0
| |     |-CallExpr 0x5584a794aad8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x5584a794aac0 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x5584a794aa60 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x5584a794a3b0 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x5584a794ab08 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x5584a794aa80 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x5584a794a790 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x5584a794ab20 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x5584a794aaa0 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x5584a794a808 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x5584a79a4700 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x5584a79a46e0 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x5584a79a46b8 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x5584a79a4680 <col:23> 'int' 0
| `-FullComment 0x5584a7a43e70 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x5584a7a43aa0 <line:363:3>
|   | `-TextComment 0x5584a7a43a70 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a43ac0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5584a7a43b20 <col:10, col:58>
|   |   `-TextComment 0x5584a7a43af0 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x5584a7a43b70 <line:365:3>
|   | `-TextComment 0x5584a7a43b40 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a43b90 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a43c40 <line:365:15, line:366:3>
|   |   |-TextComment 0x5584a7a43bf0 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5584a7a43c10 <line:366:3> Text=" "
|   |-ParamCommandComment 0x5584a7a43c60 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a43cf0 <col:15, col:74>
|   |   `-TextComment 0x5584a7a43cc0 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x5584a7a43d40 <line:368:3>
|   | `-TextComment 0x5584a7a43d10 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a43d60 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x5584a7a43e10 <line:368:11, line:370:13>
|       |-TextComment 0x5584a7a43d90 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x5584a7a43db0 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x5584a7a43dd0 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x5584a79a4840 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5584a79a47b0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5584a79a4b68 <line:388:1, line:390:1>
| | `-ReturnStmt 0x5584a79a4b28 <line:389:2, col:49>
| |   `-ConditionalOperator 0x5584a79a4af8 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x5584a79a4ab0 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x5584a79a4940 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x5584a79a4928 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x5584a79a48e8 <col:9> 'bool (sys_dlist_t *)' Function 0x5584a79a0e10 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x5584a79a4968 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5584a79a4908 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a47b0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5584a79a4ae0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5584a79a49e0 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5584a79a49b8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5584a79a4980 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5584a79a4ac8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5584a79a4a80 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x5584a799c270
| |         `-MemberExpr 0x5584a79a4a38 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| |           `-ImplicitCastExpr 0x5584a79a4a20 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5584a79a4a00 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a47b0 'list' 'sys_dlist_t *'
| `-FullComment 0x5584a7a441b0 <line:380:3, line:384:63>
|   |-ParagraphComment 0x5584a7a43f10 <line:380:3>
|   | `-TextComment 0x5584a7a43ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a43f30 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5584a7a43f90 <col:10, col:54>
|   |   `-TextComment 0x5584a7a43f60 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x5584a7a43fe0 <line:382:3>
|   | `-TextComment 0x5584a7a43fb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a44000 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a44090 <col:15, col:51>
|   |   `-TextComment 0x5584a7a44060 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5584a7a440e0 <line:384:3>
|   | `-TextComment 0x5584a7a440b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a44100 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x5584a7a44160 <col:11, col:63>
|       `-TextComment 0x5584a7a44130 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x5584a79a4d20 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a79a4b90 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a79a4c08 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a79a5338 <line:404:1, line:410:1>
| | |-BinaryOperator 0x5584a79a4eb8 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79a4e50 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5584a799bff0
| | | | `-MemberExpr 0x5584a79a4e08 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |   `-ImplicitCastExpr 0x5584a79a4df0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a79a4dd0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a4c08 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a79a4ea0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5584a79a4e80 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a4b90 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5584a79a5050 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79a4f58 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| | | | `-MemberExpr 0x5584a79a4f10 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | | |   `-ImplicitCastExpr 0x5584a79a4ef8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a79a4ed8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a4c08 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a79a5038 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5584a79a5008 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x5584a799c270
| | |     `-MemberExpr 0x5584a79a4fc0 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | |       `-ImplicitCastExpr 0x5584a79a4fa8 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5584a79a4f88 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a4b90 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5584a79a51e8 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79a5180 <col:2, col:14> 'struct _dnode *' lvalue .next 0x5584a799bff0
| | | | `-MemberExpr 0x5584a79a5138 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |   `-ImplicitCastExpr 0x5584a79a5120 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5584a79a50f0 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x5584a799c270
| | | |       `-MemberExpr 0x5584a79a50a8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | | |         `-ImplicitCastExpr 0x5584a79a5090 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5584a79a5070 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a4b90 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x5584a79a51d0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5584a79a51b0 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a4c08 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x5584a79a52f0 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x5584a79a5288 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x5584a799c270
| |   | `-MemberExpr 0x5584a79a5240 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| |   |   `-ImplicitCastExpr 0x5584a79a5228 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5584a79a5208 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a4b90 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x5584a79a52d8 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a79a52b8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a4c08 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a44620 <line:393:3, line:400:14>
|   |-ParagraphComment 0x5584a7a44250 <line:393:3>
|   | `-TextComment 0x5584a7a44220 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a44270 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5584a7a442d0 <col:10, col:34>
|   |   `-TextComment 0x5584a7a442a0 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x5584a7a44320 <line:395:3, col:62>
|   | `-TextComment 0x5584a7a442f0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a44370 <line:397:3>
|   | `-TextComment 0x5584a7a44340 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a44390 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a44440 <line:397:15, line:398:3>
|   |   |-TextComment 0x5584a7a443f0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5584a7a44410 <line:398:3> Text=" "
|   |-ParamCommandComment 0x5584a7a44460 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a444f0 <col:15, col:36>
|   |   `-TextComment 0x5584a7a444c0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x5584a7a44540 <line:400:3>
|   | `-TextComment 0x5584a7a44510 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a44560 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7a445c0 <col:11, col:14>
|       `-TextComment 0x5584a7a44590 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a79a5488 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a79a5378 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a79a53f0 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a79a5ac8 <line:424:1, line:430:1>
| | |-BinaryOperator 0x5584a79a56d8 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79a55b8 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5584a799bff0
| | | | `-MemberExpr 0x5584a79a5570 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |   `-ImplicitCastExpr 0x5584a79a5558 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a79a5538 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a53f0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a79a56c0 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5584a79a5690 <col:15, col:21> 'struct _dnode *' lvalue .head 0x5584a799bf78
| | |     `-MemberExpr 0x5584a79a5620 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | |       `-ImplicitCastExpr 0x5584a79a5608 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5584a79a55e8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a5378 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5584a79a57e0 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79a5778 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| | | | `-MemberExpr 0x5584a79a5730 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | | |   `-ImplicitCastExpr 0x5584a79a5718 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a79a56f8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a53f0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a79a57c8 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5584a79a57a8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a5378 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5584a79a5978 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79a5910 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| | | | `-MemberExpr 0x5584a79a58c8 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | | |   `-ImplicitCastExpr 0x5584a79a58b0 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5584a79a5880 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5584a799bf78
| | | |       `-MemberExpr 0x5584a79a5838 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |         `-ImplicitCastExpr 0x5584a79a5820 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5584a79a5800 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a5378 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x5584a79a5960 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5584a79a5940 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a53f0 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x5584a79a5a80 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x5584a79a5a18 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5584a799bf78
| |   | `-MemberExpr 0x5584a79a59d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| |   |   `-ImplicitCastExpr 0x5584a79a59b8 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5584a79a5998 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a5378 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x5584a79a5a68 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a79a5a48 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a53f0 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a44a90 <line:413:3, line:420:14>
|   |-ParagraphComment 0x5584a7a446c0 <line:413:3>
|   | `-TextComment 0x5584a7a44690 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a446e0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5584a7a44740 <col:10, col:34>
|   |   `-TextComment 0x5584a7a44710 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x5584a7a44790 <line:415:3, col:62>
|   | `-TextComment 0x5584a7a44760 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a447e0 <line:417:3>
|   | `-TextComment 0x5584a7a447b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a44800 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a448b0 <line:417:15, line:418:3>
|   |   |-TextComment 0x5584a7a44860 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5584a7a44880 <line:418:3> Text=" "
|   |-ParamCommandComment 0x5584a7a448d0 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a44960 <col:15, col:36>
|   |   `-TextComment 0x5584a7a44930 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x5584a7a449b0 <line:420:3>
|   | `-TextComment 0x5584a7a44980 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a449d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7a44a30 <col:11, col:14>
|       `-TextComment 0x5584a7a44a00 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a79a5c60 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a79a5b08 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x5584a79a5b80 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a79a6278 <line:441:1, line:446:1>
| | |-BinaryOperator 0x5584a79a5e88 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79a5d90 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| | | | `-MemberExpr 0x5584a79a5d48 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | | |   `-ImplicitCastExpr 0x5584a79a5d30 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a79a5d10 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a5b80 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a79a5e70 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5584a79a5e40 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| | |     `-MemberExpr 0x5584a79a5df8 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | |       `-ImplicitCastExpr 0x5584a79a5de0 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5584a79a5dc0 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a5b08 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x5584a79a5f90 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79a5f28 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5584a799bff0
| | | | `-MemberExpr 0x5584a79a5ee0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |   `-ImplicitCastExpr 0x5584a79a5ec8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a79a5ea8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a5b80 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a79a5f78 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5584a79a5f58 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a5b08 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x5584a79a6128 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79a60c0 <col:2, col:19> 'struct _dnode *' lvalue .next 0x5584a799bff0
| | | | `-MemberExpr 0x5584a79a6078 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |   `-ImplicitCastExpr 0x5584a79a6060 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5584a79a6030 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| | | |       `-MemberExpr 0x5584a79a5fe8 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | | |         `-ImplicitCastExpr 0x5584a79a5fd0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5584a79a5fb0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a5b08 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a79a6110 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5584a79a60f0 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a5b80 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x5584a79a6230 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x5584a79a61c8 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| |   | `-MemberExpr 0x5584a79a6180 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| |   |   `-ImplicitCastExpr 0x5584a79a6168 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5584a79a6148 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a5b08 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x5584a79a6218 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a79a61f8 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a5b80 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a44e20 <line:433:3, line:438:36>
|   |-ParagraphComment 0x5584a7a44b30 <line:433:3>
|   | `-TextComment 0x5584a7a44b00 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a44b50 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5584a7a44bb0 <col:10, col:35>
|   |   `-TextComment 0x5584a7a44b80 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x5584a7a44c00 <line:435:3, col:52>
|   | `-TextComment 0x5584a7a44bd0 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x5584a7a44c50 <line:437:3>
|   | `-TextComment 0x5584a7a44c20 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a44c70 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a44d20 <line:437:20, line:438:3>
|   |   |-TextComment 0x5584a7a44cd0 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x5584a7a44cf0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x5584a7a44d40 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5584a7a44dd0 <col:15, col:36>
|       `-TextComment 0x5584a7a44da0 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x5584a79aa800 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x5584a79a62b8 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a79a6330 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x5584a79a65e8 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x5584a79aa6b0 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x5584a79ab398 <line:467:1, line:482:1>
| | `-IfStmt 0x5584a79ab340 <line:468:2, line:481:2> has_else
| |   |-CallExpr 0x5584a79aa918 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x5584a79aa900 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x5584a79aa8c0 <col:6> 'bool (sys_dlist_t *)' Function 0x5584a79a0e10 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x5584a79aa940 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5584a79aa8e0 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a62b8 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x5584a79aaa98 <col:32, line:470:2>
| |   | `-CallExpr 0x5584a79aaa38 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x5584a79aaa20 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5584a79aa958 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x5584a79a4d20 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x5584a79aaa68 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x5584a79aa978 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a62b8 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x5584a79aaa80 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5584a79aa998 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a6330 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x5584a79ab318 <line:470:9, line:481:2>
| |     |-DeclStmt 0x5584a79aac28 <line:471:3, col:47>
| |     | `-VarDecl 0x5584a79aaac0 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x5584a79aabe8 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x5584a79aabd0 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x5584a79aab28 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x5584a79a14c0 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x5584a79aac10 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5584a79aab48 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a62b8 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x5584a79aafd8 <line:473:3, line:475:3>
| |     | |-BinaryOperator 0x5584a79aae88 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x5584a79aad30 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x5584a79aad10 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x5584a79aace0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x5584a79aac40 <col:11> 'sys_dnode_t *' lvalue Var 0x5584a79aaac0 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x5584a79aacf8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x5584a79aacc0 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x5584a79aac98 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x5584a79aac60 <col:23> 'int' 0
| |     | | `-ParenExpr 0x5584a79aae68 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x5584a79aae48 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x5584a79aadc8 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x5584a79aadb0 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x5584a79aad50 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x5584a79a65e8 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x5584a79aadf8 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x5584a79aad70 <col:33> 'sys_dnode_t *' lvalue Var 0x5584a79aaac0 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x5584a79aae10 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x5584a79aad90 <col:38> 'void *' lvalue ParmVar 0x5584a79aa6b0 'data' 'void *'
| |     | |     `-IntegerLiteral 0x5584a79aae28 <col:47> 'int' 0
| |     | `-CompoundStmt 0x5584a79aafc0 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x5584a79aafa0 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x5584a79aaea8 <col:4> 'sys_dnode_t *' lvalue Var 0x5584a79aaac0 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x5584a79aaf40 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x5584a79aaf28 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x5584a79aaec8 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x5584a7949e80 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x5584a79aaf70 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x5584a79aaee8 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a62b8 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x5584a79aaf88 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x5584a79aaf08 <col:36> 'sys_dnode_t *' lvalue Var 0x5584a79aaac0 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x5584a79ab2f0 <line:476:3, line:480:3> has_else
| |       |-BinaryOperator 0x5584a79ab0c0 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x5584a79ab090 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5584a79aaff0 <col:7> 'sys_dnode_t *' lvalue Var 0x5584a79aaac0 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x5584a79ab0a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x5584a79ab070 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x5584a79ab048 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x5584a79ab010 <col:23> 'int' 0
| |       |-CompoundStmt 0x5584a79ab1e8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x5584a79ab188 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x5584a79ab170 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x5584a79ab0e0 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x5584a79a5c60 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x5584a79ab1b8 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5584a79ab100 <col:21> 'sys_dnode_t *' lvalue Var 0x5584a79aaac0 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x5584a79ab1d0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5584a79ab120 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a6330 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x5584a79ab2d8 <line:478:10, line:480:3>
| |         `-CallExpr 0x5584a79ab278 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x5584a79ab260 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x5584a79ab200 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x5584a79a4d20 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x5584a79ab2a8 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x5584a79ab220 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x5584a79a62b8 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x5584a79ab2c0 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5584a79ab240 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x5584a79a6330 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a45500 <line:449:3, line:462:14>
|   |-ParagraphComment 0x5584a7a44ec0 <line:449:3>
|   | `-TextComment 0x5584a7a44e90 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a44ee0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5584a7a44f40 <col:10, col:33>
|   |   `-TextComment 0x5584a7a44f10 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x5584a7a45000 <line:451:3, line:454:62>
|   | |-TextComment 0x5584a7a44f60 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x5584a7a44f80 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x5584a7a44fa0 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x5584a7a44fc0 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a45050 <line:456:3>
|   | `-TextComment 0x5584a7a45020 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a45070 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a45120 <line:456:15, line:457:3>
|   |   |-TextComment 0x5584a7a450d0 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5584a7a450f0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x5584a7a45140 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a451f0 <line:457:15, line:458:3>
|   |   |-TextComment 0x5584a7a451a0 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x5584a7a451c0 <line:458:3> Text=" "
|   |-ParamCommandComment 0x5584a7a45210 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x5584a7a45310 <line:458:15, line:460:3>
|   |   |-TextComment 0x5584a7a45270 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x5584a7a452b0 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x5584a7a452d0 <line:460:3> Text=" "
|   |-ParamCommandComment 0x5584a7a45330 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x5584a7a453c0 <col:15, col:34>
|   |   `-TextComment 0x5584a7a45390 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x5584a7a45410 <line:462:3>
|   | `-TextComment 0x5584a7a453e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a45430 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7a45490 <col:11, col:14>
|       `-TextComment 0x5584a7a45460 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a79ab450 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5584a79ab3c0 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5584a79ace38 <line:496:1, line:500:1>
| | |-BinaryOperator 0x5584a79acac0 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79ab608 <col:2, col:14> 'struct _dnode *' lvalue .next 0x5584a799bff0
| | | | `-MemberExpr 0x5584a79ab5c0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |   `-ImplicitCastExpr 0x5584a79ab5a8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5584a79ab578 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| | | |       `-MemberExpr 0x5584a79ab530 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | | |         `-ImplicitCastExpr 0x5584a79ab518 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5584a79ab4f8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79ab3c0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a79acaa8 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5584a79aca78 <col:21, col:27> 'struct _dnode *' lvalue .next 0x5584a799bff0
| | |     `-MemberExpr 0x5584a79aca30 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | |       `-ImplicitCastExpr 0x5584a79ab658 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5584a79ab638 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5584a79ab3c0 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x5584a79acce8 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x5584a79acbf0 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| | | | `-MemberExpr 0x5584a79acba8 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | | |   `-ImplicitCastExpr 0x5584a79acb90 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5584a79acb60 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5584a799bff0
| | | |       `-MemberExpr 0x5584a79acb18 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | | |         `-ImplicitCastExpr 0x5584a79acb00 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5584a79acae0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5584a79ab3c0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5584a79accd0 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5584a79acca0 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x5584a799c2e8
| | |     `-MemberExpr 0x5584a79acc58 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5584a799c3a0
| | |       `-ImplicitCastExpr 0x5584a79acc40 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5584a79acc20 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5584a79ab3c0 'node' 'sys_dnode_t *'
| | `-CallExpr 0x5584a79acdc8 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x5584a79acdb0 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5584a79acd08 <col:2> 'void (sys_dnode_t *)' Function 0x5584a799cd40 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x5584a79acdf0 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a79acd28 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x5584a79ab3c0 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a458c0 <line:485:3, line:492:14>
|   |-ParagraphComment 0x5584a7a455a0 <line:485:3>
|   | `-TextComment 0x5584a7a45570 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a455c0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7a45620 <col:10, col:44>
|   |   `-TextComment 0x5584a7a455f0 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x5584a7a45690 <line:487:3, line:488:62>
|   | |-TextComment 0x5584a7a45640 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x5584a7a45660 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a456e0 <line:490:3>
|   | `-TextComment 0x5584a7a456b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a45700 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a45790 <col:15, col:33>
|   |   `-TextComment 0x5584a7a45760 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x5584a7a457e0 <line:492:3>
|   | `-TextComment 0x5584a7a457b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a45800 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7a45860 <col:11, col:14>
|       `-TextComment 0x5584a7a45830 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a79acf00 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5584a79ace70 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5584a79ad3c8 <line:513:1, line:522:1>
| | |-DeclStmt 0x5584a79ad0b8 <line:514:2, col:26>
| | | `-VarDecl 0x5584a79acfb8 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x5584a79ad0a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x5584a79ad080 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x5584a79ad058 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x5584a79ad020 <col:23> 'int' 0
| | |-IfStmt 0x5584a79ad340 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-UnaryOperator 0x5584a79ad168 <line:516:6, col:30> 'int' prefix '!' cannot overflow
| | | | `-CallExpr 0x5584a79ad128 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x5584a79ad110 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5584a79ad0d0 <col:7> 'bool (sys_dlist_t *)' Function 0x5584a79a0e10 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x5584a79ad150 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a79ad0f0 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x5584a79ace70 'list' 'sys_dlist_t *'
| | | `-CompoundStmt 0x5584a79ad320 <col:33, line:519:2>
| | |   |-BinaryOperator 0x5584a79ad268 <line:517:3, col:16> 'sys_dnode_t *' '='
| | |   | |-DeclRefExpr 0x5584a79ad180 <col:3> 'sys_dnode_t *' lvalue Var 0x5584a79acfb8 'node' 'sys_dnode_t *'
| | |   | `-ImplicitCastExpr 0x5584a79ad250 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | |   |   `-MemberExpr 0x5584a79ad220 <col:10, col:16> 'struct _dnode *' lvalue .head 0x5584a799bf78
| | |   |     `-MemberExpr 0x5584a79ad1d8 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5584a799c0a0
| | |   |       `-ImplicitCastExpr 0x5584a79ad1c0 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | |   |         `-DeclRefExpr 0x5584a79ad1a0 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x5584a79ace70 'list' 'sys_dlist_t *'
| | |   `-CallExpr 0x5584a79ad2e0 <line:518:3, col:24> 'void'
| | |     |-ImplicitCastExpr 0x5584a79ad2c8 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x5584a79ad288 <col:3> 'void (sys_dnode_t *)' Function 0x5584a79ab450 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | |     `-ImplicitCastExpr 0x5584a79ad308 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | |       `-DeclRefExpr 0x5584a79ad2a8 <col:20> 'sys_dnode_t *' lvalue Var 0x5584a79acfb8 'node' 'sys_dnode_t *'
| | `-ReturnStmt 0x5584a79ad390 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x5584a79ad378 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a79ad358 <col:9> 'sys_dnode_t *' lvalue Var 0x5584a79acfb8 'node' 'sys_dnode_t *'
| `-FullComment 0x5584a7a45c60 <line:503:3, line:509:60>
|   |-ParagraphComment 0x5584a7a45960 <line:503:3>
|   | `-TextComment 0x5584a7a45930 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a45980 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5584a7a459e0 <col:10, col:38>
|   |   `-TextComment 0x5584a7a459b0 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x5584a7a45a30 <line:505:3, col:62>
|   | `-TextComment 0x5584a7a45a00 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a45a80 <line:507:3>
|   | `-TextComment 0x5584a7a45a50 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a45aa0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a45b30 <col:15, col:51>
|   |   `-TextComment 0x5584a7a45b00 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5584a7a45b80 <line:509:3>
|   | `-TextComment 0x5584a7a45b50 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a45ba0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x5584a7a45c00 <col:11, col:60>
|       `-TextComment 0x5584a7a45bd0 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x5584a79ad3f0 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x5584a79ad638 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x5584a79ad930 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x5584a79ad8c0 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x5584a79ad860 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x5584a79ad820 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x5584a78ba570 'bool'
| |     |-PointerType 0x5584a79ad530 'struct rbnode *'
| |     | `-ElaboratedType 0x5584a79ad4c0 'struct rbnode' sugar
| |     |   `-RecordType 0x5584a79ad470 'struct rbnode'
| |     |     `-Record 0x5584a79ad3f0 'rbnode'
| |     `-PointerType 0x5584a79ad530 'struct rbnode *'
| |       `-ElaboratedType 0x5584a79ad4c0 'struct rbnode' sugar
| |         `-RecordType 0x5584a79ad470 'struct rbnode'
| |           `-Record 0x5584a79ad3f0 'rbnode'
| `-FullComment 0x5584a7a45fc0 <line:62:3, line:72:36>
|   |-ParagraphComment 0x5584a7a45d00 <line:62:3>
|   | `-TextComment 0x5584a7a45cd0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5584a7a45d20 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x5584a7a45d90 <line:63:3>
|   | `-TextComment 0x5584a7a45d60 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a45db0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5584a7a45e10 <col:10, col:45>
|   |   `-TextComment 0x5584a7a45de0 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x5584a7a45e80 <line:65:3, line:66:68>
|   | |-TextComment 0x5584a7a45e30 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x5584a7a45e50 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x5584a7a45f70 <line:68:3, line:72:36>
|     |-TextComment 0x5584a7a45ea0 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x5584a7a45ec0 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x5584a7a45ee0 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x5584a7a45f00 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x5584a7a45f20 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x5584a79ad988 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x5584a79b0bc0 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x5584a79b0c48 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x5584a79b0cb0 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x5584a79b0f60 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x5584a79b0ef0 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x5584a79b0e90 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x5584a79b0e50 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x5584a78ba550 'void'
|       |-PointerType 0x5584a79ad530 'struct rbnode *'
|       | `-ElaboratedType 0x5584a79ad4c0 'struct rbnode' sugar
|       |   `-RecordType 0x5584a79ad470 'struct rbnode'
|       |     `-Record 0x5584a79ad3f0 'rbnode'
|       `-PointerType 0x5584a78bad10 'void *'
|         `-BuiltinType 0x5584a78ba550 'void'
|-FunctionDecl 0x5584a79b1198 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x5584a79b0fe0 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x5584a79b1060 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x5584a79b1388 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x5584a79b1270 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x5584a79b16b0 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x5584a79b1458 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x5584a79b14f8 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x5584a79b1578 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x5584a79b19e8 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x5584a79b1838 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x5584a79b18b8 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x5584a79b24d0 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x5584a79b1af0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x5584a79b23b8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x5584a7a46110 <line:96:3, col:31>
|   |-ParagraphComment 0x5584a7a46060 <col:3>
|   | `-TextComment 0x5584a7a46030 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a46080 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x5584a7a460e0 <col:10, col:31>
|       `-TextComment 0x5584a7a460b0 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x5584a79b26f8 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x5584a79b25d0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x5584a79b2660 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x5584a7a46260 <line:101:3, col:31>
|   |-ParagraphComment 0x5584a7a461b0 <col:3>
|   | `-TextComment 0x5584a7a46180 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a461d0 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x5584a7a46230 <col:10, col:31>
|       `-TextComment 0x5584a7a46200 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x5584a79b2928 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x5584a79b2800 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x5584a79b2b28 <line:109:1, line:111:1>
| | `-ReturnStmt 0x5584a79b2af0 <line:110:2, col:32>
| |   `-CallExpr 0x5584a79b2aa8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x5584a79b2a90 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79b29d0 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x5584a79b19e8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x5584a79b2ad8 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79b29f0 <col:25> 'struct rbtree *' lvalue ParmVar 0x5584a79b2800 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x5584a79b2a10 <col:31> 'int' 0
| `-FullComment 0x5584a7a463b0 <line:106:3, col:54>
|   |-ParagraphComment 0x5584a7a46300 <col:3>
|   | `-TextComment 0x5584a7a462d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a46320 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x5584a7a46380 <col:10, col:54>
|       `-TextComment 0x5584a7a46350 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x5584a79b2c10 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x5584a79b2b68 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x5584a79b2db8 <line:117:1, line:119:1>
| | `-ReturnStmt 0x5584a79b2d78 <line:118:2, col:32>
| |   `-CallExpr 0x5584a79b2d30 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x5584a79b2d18 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79b2cb8 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x5584a79b19e8 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x5584a79b2d60 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79b2cd8 <col:25> 'struct rbtree *' lvalue ParmVar 0x5584a79b2b68 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x5584a79b2cf8 <col:31> 'int' 1
| `-FullComment 0x5584a7a46500 <line:114:3, col:55>
|   |-ParagraphComment 0x5584a7a46450 <col:3>
|   | `-TextComment 0x5584a7a46420 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a46470 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x5584a7a464d0 <col:10, col:55>
|       `-TextComment 0x5584a7a464a0 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x5584a79b2fa0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x5584a79b2df8 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x5584a79b2e88 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x5584a7a46750 <line:122:3, line:128:10>
|   |-ParagraphComment 0x5584a7a465a0 <line:122:3>
|   | `-TextComment 0x5584a7a46570 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a465c0 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x5584a7a46620 <col:10, col:60>
|   |   `-TextComment 0x5584a7a465f0 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x5584a7a46710 <line:124:3, line:128:10>
|     |-TextComment 0x5584a7a46640 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x5584a7a46660 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x5584a7a46680 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x5584a7a466a0 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x5584a7a466c0 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x5584a79b32d0 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x5584a79b30a0 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x5584a79b3118 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x5584a79b3198 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x5584a79b37e8 <line:143:1, line:145:1>
| | `-CallExpr 0x5584a79b3768 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x5584a79b3750 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5584a79b3620 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x5584a79b16b0 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x5584a79b37a0 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x5584a79b3678 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x5584a79b0bc0
| |   |   `-ImplicitCastExpr 0x5584a79b3660 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5584a79b3640 <col:12> 'struct rbtree *' lvalue ParmVar 0x5584a79b30a0 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x5584a79b37b8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x5584a79b36a8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x5584a79b3118 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x5584a79b37d0 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a79b36c8 <col:34> 'void *' lvalue ParmVar 0x5584a79b3198 'cookie' 'void *'
| `-FullComment 0x5584a7a46970 <line:134:3, line:139:18>
|   |-ParagraphComment 0x5584a7a467f0 <line:134:3>
|   | `-TextComment 0x5584a7a467c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a46810 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5584a7a46870 <col:10, col:33>
|   |   `-TextComment 0x5584a7a46840 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x5584a7a46930 <line:136:3, line:139:18>
|     |-TextComment 0x5584a7a46890 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x5584a7a468b0 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x5584a7a468d0 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x5584a7a468f0 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x5584a79b3800 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x5584a79b3938 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x5584a79b39a0 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x5584a79b3a08 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x5584a79b3ce8 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x5584a79b3a80 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x5584a79b3bb8 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x5584a79b3e58 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x5584a79b40d8 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x5584a79b3f18 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x5584a79b4340 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x5584a79b4190 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x5584a79b4220 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x5584a79b4528 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x5584a79b4400 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x5584a79b4490 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x5584a79b57e0 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x5584a79b58a8 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x5584a79b5910 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x5584a79b5c30 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x5584a79b5a88 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x5584a79b5b18 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x5584a79b5e30 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x5584a79b5d08 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x5584a79b5d98 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x5584a79b6028 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x5584a79b5f08 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x5584a79b60d0 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x5584a79b6300 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x5584a79b6368 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x5584a79b6630 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x5584a79b6488 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x5584a79b6518 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x5584a79b6888 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x5584a79b6708 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x5584a79b67f0 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x5584a79b6a88 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x5584a79b6960 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x5584a79b6b58 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x5584a79b6cd8 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x5584a79b6d48 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x5584a79b6c10 'struct _snode' sugar
|   `-RecordType 0x5584a79b6be0 'struct _snode'
|     `-Record 0x5584a79b6b58 '_snode'
|-RecordDecl 0x5584a79b6da0 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x5584a79b6ec0 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x5584a79b6f20 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x5584a79b6fc8 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x5584a79b6f70 'struct _slist' sugar
|   `-RecordType 0x5584a79b6e20 'struct _slist'
|     `-Record 0x5584a79b6da0 '_slist'
|-FunctionDecl 0x5584a79b72f0 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79b71e0 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x5584a79b75d8 <line:191:1, line:194:1>
| | |-BinaryOperator 0x5584a79b7498 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x5584a79b73d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x5584a79b6ec0
| | | | `-ImplicitCastExpr 0x5584a79b73b8 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5584a79b7398 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5584a79b71e0 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x5584a79b7480 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x5584a79b7460 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x5584a79b7438 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5584a79b7400 <col:23> 'int' 0
| | `-BinaryOperator 0x5584a79b75b8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x5584a79b74f0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x5584a79b6f20
| |   | `-ImplicitCastExpr 0x5584a79b74d8 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5584a79b74b8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5584a79b71e0 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x5584a79b75a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x5584a79b7580 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x5584a79b7558 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x5584a79b7520 <col:23> 'int' 0
| `-FullComment 0x5584a7a46bd0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x5584a7a46a10 <line:186:3>
|   | `-TextComment 0x5584a7a469e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a46a30 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5584a7a46a90 <col:10, col:27>
|   |   `-TextComment 0x5584a7a46a60 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x5584a7a46ae0 <line:188:3>
|   | `-TextComment 0x5584a7a46ab0 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7a46b00 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x5584a7a46b90 <col:15, col:50>
|       `-TextComment 0x5584a7a46b60 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x5584a79b7710 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79b7608 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79cc508 <line:199:1, line:201:1>
|   `-ReturnStmt 0x5584a79cc4f8 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x5584a79cc4e0 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x5584a79cc4b0 <col:9, col:15> 'struct _snode *' lvalue ->next 0x5584a79b6cd8
|         `-ImplicitCastExpr 0x5584a79b77d8 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5584a79b77b8 <col:9> 'sys_snode_t *' lvalue ParmVar 0x5584a79b7608 'node' 'sys_snode_t *'
|-FunctionDecl 0x5584a79cc6c0 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79cc530 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x5584a79cc5a8 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x5584a79cc830 <line:204:1, line:206:1>
|   `-BinaryOperator 0x5584a79cc810 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x5584a79cc7a8 <col:2, col:10> 'struct _snode *' lvalue ->next 0x5584a79b6cd8
|     | `-ImplicitCastExpr 0x5584a79cc790 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5584a79cc770 <col:2> 'sys_snode_t *' lvalue ParmVar 0x5584a79cc530 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x5584a79cc7f8 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a79cc7d8 <col:17> 'sys_snode_t *' lvalue ParmVar 0x5584a79cc5a8 'child' 'sys_snode_t *'
|-FunctionDecl 0x5584a79cc9f0 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79cc858 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79cc8d0 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79ccb60 <line:209:1, line:211:1>
|   `-BinaryOperator 0x5584a79ccb40 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x5584a79ccad8 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x5584a79b6ec0
|     | `-ImplicitCastExpr 0x5584a79ccac0 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5584a79ccaa0 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5584a79cc858 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x5584a79ccb28 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a79ccb08 <col:15> 'sys_snode_t *' lvalue ParmVar 0x5584a79cc8d0 'node' 'sys_snode_t *'
|-FunctionDecl 0x5584a79ccc98 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79ccb88 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79ccc00 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79cce38 <line:214:1, line:216:1>
|   `-BinaryOperator 0x5584a79ccde8 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x5584a79ccd80 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x5584a79b6f20
|     | `-ImplicitCastExpr 0x5584a79ccd68 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5584a79ccd48 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5584a79ccb88 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x5584a79ccdd0 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a79ccdb0 <col:15> 'sys_snode_t *' lvalue ParmVar 0x5584a79ccc00 'node' 'sys_snode_t *'
|-FunctionDecl 0x5584a79ccf70 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79cce60 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x5584a79cd0d8 <line:226:1, line:228:1>
| | `-ReturnStmt 0x5584a79cd098 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x5584a79cd080 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5584a79cd050 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x5584a79b6ec0
| |       `-ImplicitCastExpr 0x5584a79cd038 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a79cd018 <col:9> 'sys_slist_t *' lvalue ParmVar 0x5584a79cce60 'list' 'sys_slist_t *'
| `-FullComment 0x5584a7a46f10 <line:219:3, line:223:68>
|   |-ParagraphComment 0x5584a7a46c70 <line:219:3>
|   | `-TextComment 0x5584a7a46c40 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a46c90 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7a46cf0 <col:10, col:43>
|   |   `-TextComment 0x5584a7a46cc0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x5584a7a46d40 <line:221:3>
|   | `-TextComment 0x5584a7a46d10 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a46d60 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a46df0 <col:15, col:62>
|   |   `-TextComment 0x5584a7a46dc0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x5584a7a46e40 <line:223:3>
|   | `-TextComment 0x5584a7a46e10 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a46e60 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x5584a7a46ec0 <col:11, col:68>
|       `-TextComment 0x5584a7a46e90 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x5584a79cd190 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79cd100 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x5584a79cd2f8 <line:238:1, line:240:1>
| | `-ReturnStmt 0x5584a79cd2b8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x5584a79cd2a0 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5584a79cd270 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x5584a79b6f20
| |       `-ImplicitCastExpr 0x5584a79cd258 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a79cd238 <col:9> 'sys_slist_t *' lvalue ParmVar 0x5584a79cd100 'list' 'sys_slist_t *'
| `-FullComment 0x5584a7a47250 <line:231:3, line:235:67>
|   |-ParagraphComment 0x5584a7a46fb0 <line:231:3>
|   | `-TextComment 0x5584a7a46f80 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a46fd0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7a47030 <col:10, col:42>
|   |   `-TextComment 0x5584a7a47000 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x5584a7a47080 <line:233:3>
|   | `-TextComment 0x5584a7a47050 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a470a0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a47130 <col:15, col:61>
|   |   `-TextComment 0x5584a7a47100 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x5584a7a47180 <line:235:3>
|   | `-TextComment 0x5584a7a47150 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a471a0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5584a7a47200 <col:11, col:67>
|       `-TextComment 0x5584a7a471d0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x5584a79cd4c0 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79cd320 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x5584a7a485e0 <line:247:3, line:251:57>
|   |-ParagraphComment 0x5584a7a48340 <line:247:3>
|   | `-TextComment 0x5584a7a48310 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a48360 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7a483c0 <col:10, col:41>
|   |   `-TextComment 0x5584a7a48390 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x5584a7a48410 <line:249:3>
|   | `-TextComment 0x5584a7a483e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a48430 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a484c0 <col:15, col:44>
|   |   `-TextComment 0x5584a7a48490 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x5584a7a48510 <line:251:3>
|   | `-TextComment 0x5584a7a484e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a48530 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5584a7a48590 <col:11, col:57>
|       `-TextComment 0x5584a7a48560 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x5584a79cd608 prev 0x5584a79cd4c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79cd578 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x5584a79cd8d8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x5584a79cd898 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x5584a79cd880 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5584a79cd860 <col:10, col:54> 'int'
|         `-BinaryOperator 0x5584a79cd840 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x5584a79cd768 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x5584a79cd750 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x5584a79cd6b0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79ccf70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x5584a79cd790 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x5584a79cd6d0 <col:41> 'sys_slist_t *' lvalue ParmVar 0x5584a79cd578 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x5584a79cd828 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x5584a79cd808 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x5584a79cd7e0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x5584a79cd7a8 <col:23> 'int' 0
|-FunctionDecl 0x5584a79cd990 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79cd900 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x5584a7a48980 <line:258:3, line:264:55>
|   |-ParagraphComment 0x5584a7a48680 <line:258:3>
|   | `-TextComment 0x5584a7a48650 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a486a0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5584a7a48700 <col:10, col:64>
|   |   `-TextComment 0x5584a7a486d0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x5584a7a48750 <line:260:3, col:69>
|   | `-TextComment 0x5584a7a48720 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5584a7a487a0 <line:262:3>
|   | `-TextComment 0x5584a7a48770 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a487c0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a48850 <col:15, col:64>
|   |   `-TextComment 0x5584a7a48820 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5584a7a488a0 <line:264:3>
|   | `-TextComment 0x5584a7a48870 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a488c0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5584a7a48920 <col:11, col:55>
|       `-TextComment 0x5584a7a488f0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5584a79cdad8 prev 0x5584a79cd990 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79cda48 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79cdcb8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x5584a79cdc78 <line:68:3, col:42>
|     `-CallExpr 0x5584a79cdc38 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x5584a79cdc20 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a79cdb80 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5584a79b7710 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x5584a79cdc60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a79cdba0 <col:38> 'sys_snode_t *' lvalue ParmVar 0x5584a79cda48 'node' 'sys_snode_t *'
|-FunctionDecl 0x5584a79cdd70 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79cdce0 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x5584a7a48cc0 <line:271:3, line:275:55>
|   |-ParagraphComment 0x5584a7a48a20 <line:271:3>
|   | `-TextComment 0x5584a7a489f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a48a40 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5584a7a48aa0 <col:10, col:46>
|   |   `-TextComment 0x5584a7a48a70 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x5584a7a48af0 <line:273:3>
|   | `-TextComment 0x5584a7a48ac0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a48b10 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a48ba0 <col:15, col:64>
|   |   `-TextComment 0x5584a7a48b70 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5584a7a48bf0 <line:275:3>
|   | `-TextComment 0x5584a7a48bc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a48c10 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5584a7a48c70 <col:11, col:55>
|       `-TextComment 0x5584a7a48c40 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5584a79cdeb8 prev 0x5584a79cdd70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79cde28 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79ce1e8 <line:74:2, line:78:2>
|   `-ReturnStmt 0x5584a79ce1b0 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x5584a79ce180 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x5584a79ce030 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x5584a79ce000 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x5584a79cdf60 <col:10> 'sys_snode_t *' lvalue ParmVar 0x5584a79cde28 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x5584a79ce018 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x5584a79cdfe0 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5584a79cdfb8 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5584a79cdf80 <col:23> 'int' 0
|       |-CallExpr 0x5584a79ce0a8 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x5584a79ce090 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5584a79ce050 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5584a79cdad8 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x5584a79ce0d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5584a79ce070 <col:43> 'sys_snode_t *' lvalue ParmVar 0x5584a79cde28 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x5584a79ce168 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x5584a79ce148 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x5584a79ce120 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x5584a79ce0e8 <col:23> 'int' 0
|-FunctionDecl 0x5584a79ce320 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79ce210 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79ce288 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x5584a7a49050 <line:282:3, line:287:47>
|   |-ParagraphComment 0x5584a7a48d60 <line:282:3>
|   | `-TextComment 0x5584a7a48d30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a48d80 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7a48de0 <col:10, col:42>
|   |   `-TextComment 0x5584a7a48db0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x5584a7a48e30 <line:284:3, col:62>
|   | `-TextComment 0x5584a7a48e00 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a48e80 <line:286:3>
|   | `-TextComment 0x5584a7a48e50 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a48ea0 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a48f50 <line:286:15, line:287:3>
|   |   |-TextComment 0x5584a7a48f00 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7a48f20 <line:287:3> Text=" "
|   `-ParamCommandComment 0x5584a7a48f70 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5584a7a49000 <col:15, col:47>
|       `-TextComment 0x5584a7a48fd0 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x5584a79d0210 prev 0x5584a79ce320 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79ce3e0 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79ce458 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79d0878 <line:84:2, line:93:2>
|   |-CallExpr 0x5584a79d0418 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x5584a79d0400 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79d02c0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5584a79cc6c0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5584a79d0448 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79d02e0 <col:30> 'sys_snode_t *' lvalue ParmVar 0x5584a79ce458 'node' 'sys_snode_t *'
|   | `-CallExpr 0x5584a79d0358 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5584a79d0340 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5584a79d0300 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79ccf70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x5584a79d0380 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79d0320 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5584a79ce3e0 'list' 'sys_slist_t *'
|   |-CallExpr 0x5584a79d0538 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x5584a79d0520 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79d0460 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79cc9f0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5584a79d0568 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79d0480 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5584a79ce3e0 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x5584a79d0580 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5584a79d04a0 <col:36> 'sys_snode_t *' lvalue ParmVar 0x5584a79ce458 'node' 'sys_snode_t *'
|   `-IfStmt 0x5584a79d0838 <line:89:3, line:92:3>
|     |-BinaryOperator 0x5584a79d06c8 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5584a79d05f0 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x5584a79d05d8 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5584a79d0598 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79cd190 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x5584a79d0618 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5584a79d05b8 <col:37> 'sys_slist_t *' lvalue ParmVar 0x5584a79ce3e0 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x5584a79d06b0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x5584a79d0690 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5584a79d0668 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5584a79d0630 <col:23> 'int' 0
|     `-CompoundStmt 0x5584a79d0820 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|       `-CallExpr 0x5584a79d07d8 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|         |-ImplicitCastExpr 0x5584a79d07c0 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5584a79d06e8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79ccc98 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x5584a79d0808 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5584a79d0708 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5584a79ce3e0 'list' 'sys_slist_t *'
|         `-CallExpr 0x5584a79d0780 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|           |-ImplicitCastExpr 0x5584a79d0768 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5584a79d0728 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79ccf70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           `-ImplicitCastExpr 0x5584a79d07a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5584a79d0748 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5584a79ce3e0 'list' 'sys_slist_t *'
|-FunctionDecl 0x5584a79d09c0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79d08b0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d0928 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5584a7a493e0 <line:295:3, line:300:46>
|   |-ParagraphComment 0x5584a7a490f0 <line:295:3>
|   | `-TextComment 0x5584a7a490c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a49110 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7a49170 <col:10, col:41>
|   |   `-TextComment 0x5584a7a49140 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x5584a7a491c0 <line:297:3, col:62>
|   | `-TextComment 0x5584a7a49190 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a49210 <line:299:3>
|   | `-TextComment 0x5584a7a491e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a49230 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a492e0 <line:299:15, line:300:3>
|   |   |-TextComment 0x5584a7a49290 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7a492b0 <line:300:3> Text=" "
|   `-ParamCommandComment 0x5584a7a49300 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5584a7a49390 <col:15, col:46>
|       `-TextComment 0x5584a7a49360 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x5584a79d0b90 prev 0x5584a79d09c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79d0a80 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d0af8 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79d1338 <line:99:2, line:111:2>
|   |-CallExpr 0x5584a79d0d18 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x5584a79d0d00 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79d0c40 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5584a79cc6c0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5584a79d0d48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79d0c60 <col:30> 'sys_snode_t *' lvalue ParmVar 0x5584a79d0af8 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x5584a79d0d60 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x5584a79d0ce0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x5584a79d0cb8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x5584a79d0c80 <col:23> 'int' 0
|   `-IfStmt 0x5584a79d12e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3> has_else
|     |-BinaryOperator 0x5584a79d0ea8 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5584a79d0dd0 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x5584a79d0db8 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5584a79d0d78 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79cd190 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x5584a79d0df8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5584a79d0d98 <col:37> 'sys_slist_t *' lvalue ParmVar 0x5584a79d0a80 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x5584a79d0e90 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x5584a79d0e70 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5584a79d0e48 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5584a79d0e10 <col:23> 'int' 0
|     |-CompoundStmt 0x5584a79d1078 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x5584a79d0f40 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x5584a79d0f28 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5584a79d0ec8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79ccc98 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x5584a79d0f70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5584a79d0ee8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5584a79d0a80 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x5584a79d0f88 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5584a79d0f08 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5584a79d0af8 'node' 'sys_snode_t *'
|     | `-CallExpr 0x5584a79d1018 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x5584a79d1000 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5584a79d0fa0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79cc9f0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x5584a79d1048 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5584a79d0fc0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5584a79d0a80 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x5584a79d1060 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5584a79d0fe0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5584a79d0af8 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x5584a79d12c8 <line:105:10, line:110:3>
|       |-CallExpr 0x5584a79d1188 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x5584a79d1170 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5584a79d1098 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5584a79cc6c0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x5584a79d1110 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x5584a79d10f8 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5584a79d10b8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79cd190 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x5584a79d1138 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5584a79d10d8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5584a79d0a80 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x5584a79d11b8 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5584a79d1150 <col:5> 'sys_snode_t *' lvalue ParmVar 0x5584a79d0af8 'node' 'sys_snode_t *'
|       `-CallExpr 0x5584a79d1268 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x5584a79d1250 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5584a79d11f0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79ccc98 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x5584a79d1298 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5584a79d1210 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5584a79d0a80 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x5584a79d12b0 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5584a79d1230 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5584a79d0af8 'node' 'sys_snode_t *'
|-FunctionDecl 0x5584a79d15a0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5584a79d1368 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d13e8 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x5584a79d1468 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x5584a7a49940 <line:308:3, line:318:66>
|   |-ParagraphComment 0x5584a7a49480 <line:308:3>
|   | `-TextComment 0x5584a7a49450 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a494a0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7a49500 <col:10, col:41>
|   |   `-TextComment 0x5584a7a494d0 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x5584a7a495f0 <line:310:3, line:312:62>
|   | |-TextComment 0x5584a7a49520 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x5584a7a49540 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x5584a7a49590 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x5584a7a495b0 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a49640 <line:314:3, col:48>
|   | `-TextComment 0x5584a7a49610 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x5584a7a49690 <line:316:3>
|   | `-TextComment 0x5584a7a49660 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a496b0 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a49760 <line:316:15, line:317:3>
|   |   |-TextComment 0x5584a7a49710 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7a49730 <line:317:3> Text=" "
|   |-ParamCommandComment 0x5584a7a49780 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a49830 <line:317:15, line:318:3>
|   |   |-TextComment 0x5584a7a497e0 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x5584a7a49800 <line:318:3> Text=" "
|   `-ParamCommandComment 0x5584a7a49850 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x5584a7a498e0 <col:15, col:66>
|       `-TextComment 0x5584a7a498b0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x5584a79d1808 prev 0x5584a79d15a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5584a79d1668 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d16e8 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x5584a79d1768 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x5584a79d1e28 <col:31, line:127:42>
|   |-IfStmt 0x5584a79d1cc0 <line:118:2, line:125:2> has_else
|   | |-BinaryOperator 0x5584a79d19f0 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x5584a79d1918 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x5584a79d1900 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5584a79d18c0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79cd190 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x5584a79d1940 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5584a79d18e0 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5584a79d1668 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x5584a79d19d8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x5584a79d19b8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5584a79d1990 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5584a79d1958 <col:23> 'int' 0
|   | |-CompoundStmt 0x5584a79d1b20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x5584a79d1ad8 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x5584a79d1ac0 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5584a79d1a10 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79cc9f0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x5584a79d1b08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5584a79d1a30 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5584a79d1668 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x5584a79d1a98 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x5584a79d1a80 <col:31> 'void *' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x5584a79d1a50 <col:31> 'void *' lvalue ParmVar 0x5584a79d16e8 'head' 'void *'
|   | `-CompoundStmt 0x5584a79d1ca8 <line:121:9, line:125:2>
|   |   `-CallExpr 0x5584a79d1c78 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x5584a79d1c60 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5584a79d1b38 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5584a79cc6c0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x5584a79d1bb0 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x5584a79d1b98 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5584a79d1b58 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79cd190 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x5584a79d1bd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5584a79d1b78 <col:34> 'sys_slist_t *' lvalue ParmVar 0x5584a79d1668 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x5584a79d1c38 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x5584a79d1c20 <col:29> 'void *' <LValueToRValue> part_of_explicit_cast
|   |         `-DeclRefExpr 0x5584a79d1bf0 <col:29> 'void *' lvalue ParmVar 0x5584a79d16e8 'head' 'void *'
|   `-CallExpr 0x5584a79d1db0 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x5584a79d1d98 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a79d1ce8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79ccc98 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x5584a79d1de0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a79d1d08 <col:29> 'sys_slist_t *' lvalue ParmVar 0x5584a79d1668 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x5584a79d1d70 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x5584a79d1d58 <col:35> 'void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5584a79d1d28 <col:35> 'void *' lvalue ParmVar 0x5584a79d1768 'tail' 'void *'
|-FunctionDecl 0x5584a79d1ff0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79d1e58 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d1ed0 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x5584a7a49cf0 <line:326:3, line:332:57>
|   |-ParagraphComment 0x5584a7a499e0 <line:326:3>
|   | `-TextComment 0x5584a7a499b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a49a00 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5584a7a49a60 <col:10, col:65>
|   |   `-TextComment 0x5584a7a49a30 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x5584a7a49ad0 <line:328:3, line:329:62>
|   | |-TextComment 0x5584a7a49a80 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x5584a7a49aa0 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a49b20 <line:331:3>
|   | `-TextComment 0x5584a7a49af0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a49b40 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a49bf0 <line:331:15, line:332:3>
|   |   |-TextComment 0x5584a7a49ba0 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7a49bc0 <line:332:3> Text=" "
|   `-ParamCommandComment 0x5584a7a49c10 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x5584a7a49ca0 <col:25, col:57>
|       `-TextComment 0x5584a7a49c70 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x5584a79a1ea0 prev 0x5584a79d1ff0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79d20b0 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d2128 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x5584a79a24f8 <line:135:2, line:141:2>
|   |-DeclStmt 0x5584a79a2058 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x5584a79a1f60 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x5584a79a1fd8 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x5584a79a2128 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x5584a79a2070 <col:3> 'sys_snode_t *' lvalue Var 0x5584a79a1f60 'head' 'sys_snode_t *'
|   | `-CallExpr 0x5584a79a20e8 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5584a79a20d0 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5584a79a2090 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79ccf70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x5584a79a2110 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79a20b0 <col:40> 'sys_slist_t *' lvalue ParmVar 0x5584a79d2128 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x5584a79a2200 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x5584a79a2148 <col:3> 'sys_snode_t *' lvalue Var 0x5584a79a1fd8 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x5584a79a21c0 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5584a79a21a8 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5584a79a2168 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79cd190 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x5584a79a21e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79a2188 <col:40> 'sys_slist_t *' lvalue ParmVar 0x5584a79d2128 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x5584a79a2318 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x5584a79a2300 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79a2220 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x5584a79d1808 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x5584a79a2350 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79a2240 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5584a79d20b0 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x5584a79a2380 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x5584a79a2368 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5584a79a2260 <col:41> 'sys_snode_t *' lvalue Var 0x5584a79a1f60 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x5584a79a23b0 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x5584a79a2398 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79a2280 <col:47> 'sys_snode_t *' lvalue Var 0x5584a79a1fd8 'tail' 'sys_snode_t *'
|   `-CallExpr 0x5584a79a2488 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x5584a79a2470 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a79a23c8 <col:1> 'void (sys_slist_t *)' Function 0x5584a79b72f0 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x5584a79a24b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a79a23e8 <col:28> 'sys_slist_t *' lvalue ParmVar 0x5584a79d2128 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x5584a79a2770 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79a2540 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79a25b8 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x5584a79a2630 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5584a7a4a160 <line:340:3, line:346:46>
|   |-ParagraphComment 0x5584a7a49d90 <line:340:3>
|   | `-TextComment 0x5584a7a49d60 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a49db0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7a49e10 <col:10, col:41>
|   |   `-TextComment 0x5584a7a49de0 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x5584a7a49e60 <line:342:3, col:62>
|   | `-TextComment 0x5584a7a49e30 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a49eb0 <line:344:3>
|   | `-TextComment 0x5584a7a49e80 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a49ed0 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a49f80 <line:344:15, line:345:3>
|   |   |-TextComment 0x5584a7a49f30 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7a49f50 <line:345:3> Text=" "
|   |-ParamCommandComment 0x5584a7a49fa0 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a4a050 <line:345:15, line:346:3>
|   |   |-TextComment 0x5584a7a4a000 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x5584a7a4a020 <line:346:3> Text=" "
|   `-ParamCommandComment 0x5584a7a4a070 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5584a7a4a100 <col:15, col:46>
|       `-TextComment 0x5584a7a4a0d0 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x5584a79a29c8 prev 0x5584a79a2770 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79a2838 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79a28b0 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x5584a79a2928 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79a3158 <line:148:2, line:158:2>
|   `-IfStmt 0x5584a79a3108 <line:149:3, line:157:3> has_else
|     |-BinaryOperator 0x5584a79a2b50 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x5584a79a2b20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x5584a79a2a80 <col:7> 'sys_snode_t *' lvalue ParmVar 0x5584a79a28b0 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x5584a79a2b38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x5584a79a2b00 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5584a79a2ad8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5584a79a2aa0 <col:23> 'int' 0
|     |-CompoundStmt 0x5584a79a2c48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x5584a79a2be8 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x5584a79a2bd0 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5584a79a2b70 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79d0210 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x5584a79a2c18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5584a79a2b90 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5584a79a2838 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x5584a79a2c30 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5584a79a2bb0 <col:38> 'sys_snode_t *' lvalue ParmVar 0x5584a79a2928 'node' 'sys_snode_t *'
|     `-IfStmt 0x5584a79a30e0 <line:151:10, line:157:3> has_else
|       |-BinaryOperator 0x5584a79a2d90 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x5584a79a2cb8 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x5584a79a2ca0 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5584a79a2c60 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5584a79b7710 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x5584a79a2ce0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5584a79a2c80 <col:42> 'sys_snode_t *' lvalue ParmVar 0x5584a79a28b0 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x5584a79a2d78 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x5584a79a2d58 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5584a79a2d30 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5584a79a2cf8 <col:23> 'int' 0
|       |-CompoundStmt 0x5584a79a2e88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x5584a79a2e28 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x5584a79a2e10 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5584a79a2db0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79d0b90 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x5584a79a2e58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5584a79a2dd0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5584a79a2838 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x5584a79a2e70 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5584a79a2df0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5584a79a2928 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x5584a79a30c0 <line:153:10, line:157:3>
|         |-CallExpr 0x5584a79a2fa0 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x5584a79a2f88 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5584a79a2eb0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5584a79cc6c0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x5584a79a2fd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x5584a79a2ed0 <col:31> 'sys_snode_t *' lvalue ParmVar 0x5584a79a2928 'node' 'sys_snode_t *'
|         | `-CallExpr 0x5584a79a2f48 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x5584a79a2f30 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x5584a79a2ef0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5584a79b7710 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x5584a79a2f70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x5584a79a2f10 <col:33> 'sys_snode_t *' lvalue ParmVar 0x5584a79a28b0 'prev' 'sys_snode_t *'
|         `-CallExpr 0x5584a79a3060 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x5584a79a3048 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5584a79a2fe8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5584a79cc6c0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x5584a79a3090 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x5584a79a3008 <col:31> 'sys_snode_t *' lvalue ParmVar 0x5584a79a28b0 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x5584a79a30a8 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5584a79a3028 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5584a79a2928 'node' 'sys_snode_t *'
|-FunctionDecl 0x5584a79a3210 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79a3180 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x5584a7a4a540 <line:355:3, line:362:50>
|   |-ParagraphComment 0x5584a7a4a200 <line:355:3>
|   | `-TextComment 0x5584a7a4a1d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a4a220 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5584a7a4a280 <col:10, col:59>
|   |   `-TextComment 0x5584a7a4a250 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5584a7a4a310 <line:357:3, line:358:62>
|   | |-TextComment 0x5584a7a4a2a0 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x5584a7a4a2e0 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a4a360 <line:360:3>
|   | `-TextComment 0x5584a7a4a330 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4a380 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a4a410 <col:15, col:46>
|   |   `-TextComment 0x5584a7a4a3e0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5584a7a4a460 <line:362:3>
|   | `-TextComment 0x5584a7a4a430 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a4a480 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x5584a7a4a4e0 <col:11, col:50>
|       `-TextComment 0x5584a7a4a4b0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x5584a79a3358 prev 0x5584a79a3210 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79a32c8 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x5584a79a3928 <line:163:2, line:175:2>
|   |-DeclStmt 0x5584a79a3510 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x5584a79a3410 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x5584a79a34d0 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x5584a79a34b8 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5584a79a3478 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79ccf70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x5584a79a34f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5584a79a3498 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5584a79a32c8 'list' 'sys_slist_t *'
|   |-CallExpr 0x5584a79a3618 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x5584a79a3600 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79a3528 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79cc9f0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5584a79a3648 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79a3548 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5584a79a32c8 'list' 'sys_slist_t *'
|   | `-CallExpr 0x5584a79a35c0 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5584a79a35a8 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5584a79a3568 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5584a79b7710 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x5584a79a35e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79a3588 <col:33> 'sys_snode_t *' lvalue Var 0x5584a79a3410 'node' 'sys_snode_t *'
|   |-IfStmt 0x5584a79a38a0 <line:169:3, line:172:3>
|   | |-BinaryOperator 0x5584a79a3730 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x5584a79a36b8 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x5584a79a36a0 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5584a79a3660 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79cd190 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x5584a79a36e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5584a79a3680 <col:37> 'sys_slist_t *' lvalue ParmVar 0x5584a79a32c8 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x5584a79a3718 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5584a79a36f8 <col:46> 'sys_snode_t *' lvalue Var 0x5584a79a3410 'node' 'sys_snode_t *'
|   | `-CompoundStmt 0x5584a79a3888 <col:52, line:172:3>
|   |   `-CallExpr 0x5584a79a3840 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   |     |-ImplicitCastExpr 0x5584a79a3828 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5584a79a3750 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79ccc98 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |-ImplicitCastExpr 0x5584a79a3870 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5584a79a3770 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5584a79a32c8 'list' 'sys_slist_t *'
|   |     `-CallExpr 0x5584a79a37e8 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   |       |-ImplicitCastExpr 0x5584a79a37d0 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5584a79a3790 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79ccf70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |       `-ImplicitCastExpr 0x5584a79a3810 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5584a79a37b0 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5584a79a32c8 'list' 'sys_slist_t *'
|   `-ReturnStmt 0x5584a79a38f0 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x5584a79a38d8 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a79a38b8 <col:10> 'sys_snode_t *' lvalue Var 0x5584a79a3410 'node' 'sys_snode_t *'
|-FunctionDecl 0x5584a79a39f8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79a3968 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x5584a7a4a8e0 <line:369:3, line:375:69>
|   |-ParagraphComment 0x5584a7a4a5e0 <line:369:3>
|   | `-TextComment 0x5584a7a4a5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a4a600 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5584a7a4a660 <col:10, col:59>
|   |   `-TextComment 0x5584a7a4a630 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5584a7a4a6b0 <line:371:3, col:62>
|   | `-TextComment 0x5584a7a4a680 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a4a700 <line:373:3>
|   | `-TextComment 0x5584a7a4a6d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4a720 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a4a7b0 <col:15, col:46>
|   |   `-TextComment 0x5584a7a4a780 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5584a7a4a800 <line:375:3>
|   | `-TextComment 0x5584a7a4a7d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a4a820 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5584a7a4a880 <col:11, col:69>
|       `-TextComment 0x5584a7a4a850 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x5584a79a3b40 prev 0x5584a79a39f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5584a79a3ab0 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x5584a79a3e98 <line:180:2, line:183:2>
|   `-ReturnStmt 0x5584a79a3e60 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x5584a79a3e30 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x5584a79a3e00 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x5584a79a3ca8 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x5584a79a3c90 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5584a79a3be8 <col:1> 'bool (sys_slist_t *)' Function 0x5584a79cd608 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x5584a79a3cd0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5584a79a3c08 <col:39> 'sys_slist_t *' lvalue ParmVar 0x5584a79a3ab0 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x5584a79a3e18 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x5584a79a3d48 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x5584a79a3d20 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x5584a79a3ce8 <col:23> 'int' 0
|       `-CallExpr 0x5584a79a3dc0 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x5584a79a3da8 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5584a79a3d68 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79a3358 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x5584a79a3de8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5584a79a3d88 <col:38> 'sys_slist_t *' lvalue ParmVar 0x5584a79a3ab0 'list' 'sys_slist_t *'
|-FunctionDecl 0x5584a79d8390 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79d8200 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d8278 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x5584a79d82f0 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5584a7a4ad80 <line:382:3, line:389:46>
|   |-ParagraphComment 0x5584a7a4a980 <line:382:3>
|   | `-TextComment 0x5584a7a4a950 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a4a9a0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5584a7a4aa00 <col:10, col:23>
|   |   `-TextComment 0x5584a7a4a9d0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x5584a7a4aa50 <line:384:3, col:62>
|   | `-TextComment 0x5584a7a4aa20 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a4aaa0 <line:386:3>
|   | `-TextComment 0x5584a7a4aa70 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4aac0 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a4ab70 <line:386:15, line:387:3>
|   |   |-TextComment 0x5584a7a4ab20 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7a4ab40 <line:387:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4ab90 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a4ac70 <line:387:20, line:389:3>
|   |   |-TextComment 0x5584a7a4abf0 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x5584a7a4ac10 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x5584a7a4ac30 <line:389:3> Text=" "
|   `-ParamCommandComment 0x5584a7a4ac90 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5584a7a4ad20 <col:15, col:46>
|       `-TextComment 0x5584a7a4acf0 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x5584a79d85e8 prev 0x5584a79d8390 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79d8458 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d84d0 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x5584a79d8548 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79d9018 <line:190:2, line:212:2>
|   |-IfStmt 0x5584a79d8e90 <line:191:3, line:209:3> has_else
|   | |-BinaryOperator 0x5584a79d8770 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x5584a79d8740 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5584a79d86a0 <col:7> 'sys_snode_t *' lvalue ParmVar 0x5584a79d84d0 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x5584a79d8758 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x5584a79d8720 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5584a79d86f8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5584a79d86c0 <col:23> 'int' 0
|   | |-CompoundStmt 0x5584a79d8b20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x5584a79d8880 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x5584a79d8868 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5584a79d8790 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79cc9f0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x5584a79d88b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5584a79d87b0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5584a79d8458 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x5584a79d8828 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x5584a79d8810 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5584a79d87d0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5584a79b7710 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x5584a79d8850 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5584a79d87f0 <col:33> 'sys_snode_t *' lvalue ParmVar 0x5584a79d8548 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x5584a79d8b08 <line:196:4, line:199:4>
|   | |   |-BinaryOperator 0x5584a79d8998 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x5584a79d8920 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x5584a79d8908 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x5584a79d88c8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79cd190 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x5584a79d8948 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x5584a79d88e8 <col:38> 'sys_slist_t *' lvalue ParmVar 0x5584a79d8458 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x5584a79d8980 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x5584a79d8960 <col:47> 'sys_snode_t *' lvalue ParmVar 0x5584a79d8548 'node' 'sys_snode_t *'
|   | |   `-CompoundStmt 0x5584a79d8af0 <col:53, line:199:4>
|   | |     `-CallExpr 0x5584a79d8aa8 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |       |-ImplicitCastExpr 0x5584a79d8a90 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5584a79d89b8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79ccc98 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |       |-ImplicitCastExpr 0x5584a79d8ad8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5584a79d89d8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5584a79d8458 'list' 'sys_slist_t *'
|   | |       `-CallExpr 0x5584a79d8a50 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |         |-ImplicitCastExpr 0x5584a79d8a38 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x5584a79d89f8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79ccf70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |         `-ImplicitCastExpr 0x5584a79d8a78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x5584a79d8a18 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5584a79d8458 'list' 'sys_slist_t *'
|   | `-CompoundStmt 0x5584a79d8e70 <line:200:10, line:209:3>
|   |   |-CallExpr 0x5584a79d8c30 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x5584a79d8c18 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5584a79d8b40 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5584a79cc6c0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x5584a79d8c60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x5584a79d8b60 <col:31> 'sys_snode_t *' lvalue ParmVar 0x5584a79d84d0 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x5584a79d8bd8 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x5584a79d8bc0 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x5584a79d8b80 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5584a79b7710 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x5584a79d8c00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5584a79d8ba0 <col:33> 'sys_snode_t *' lvalue ParmVar 0x5584a79d8548 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x5584a79d8e58 <line:205:4, line:208:4>
|   |     |-BinaryOperator 0x5584a79d8d48 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x5584a79d8cd0 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x5584a79d8cb8 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x5584a79d8c78 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79cd190 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x5584a79d8cf8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5584a79d8c98 <col:38> 'sys_slist_t *' lvalue ParmVar 0x5584a79d8458 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x5584a79d8d30 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5584a79d8d10 <col:47> 'sys_snode_t *' lvalue ParmVar 0x5584a79d8548 'node' 'sys_snode_t *'
|   |     `-CompoundStmt 0x5584a79d8e40 <col:53, line:208:4>
|   |       `-CallExpr 0x5584a79d8de0 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |         |-ImplicitCastExpr 0x5584a79d8dc8 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5584a79d8d68 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5584a79ccc98 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |         |-ImplicitCastExpr 0x5584a79d8e10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5584a79d8d88 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5584a79d8458 'list' 'sys_slist_t *'
|   |         `-ImplicitCastExpr 0x5584a79d8e28 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5584a79d8da8 <col:13> 'sys_snode_t *' lvalue ParmVar 0x5584a79d84d0 'prev_node' 'sys_snode_t *'
|   `-CallExpr 0x5584a79d8f90 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x5584a79d8f78 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a79d8eb8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5584a79cc6c0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x5584a79d8fc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a79d8ed8 <col:30> 'sys_snode_t *' lvalue ParmVar 0x5584a79d8548 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x5584a79d8fd8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x5584a79d8f58 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x5584a79d8f30 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x5584a79d8ef8 <col:23> 'int' 0
|-FunctionDecl 0x5584a79d9200 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79d9048 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d90c0 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x5584a7a4b1f0 <line:398:3, line:405:35>
|   |-ParagraphComment 0x5584a7a4ae20 <line:398:3>
|   | `-TextComment 0x5584a7a4adf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a4ae40 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7a4aea0 <col:10, col:44>
|   |   `-TextComment 0x5584a7a4ae70 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x5584a7a4aef0 <line:400:3, col:62>
|   | `-TextComment 0x5584a7a4aec0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7a4af40 <line:402:3>
|   | `-TextComment 0x5584a7a4af10 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4af60 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a4b010 <line:402:15, line:403:3>
|   |   |-TextComment 0x5584a7a4afc0 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7a4afe0 <line:403:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4b030 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7a4b0c0 <col:15, col:60>
|   |   `-TextComment 0x5584a7a4b090 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x5584a7a4b110 <line:405:3>
|   | `-TextComment 0x5584a7a4b0e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a4b130 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7a4b190 <col:11, col:35>
|       `-TextComment 0x5584a7a4b160 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x5584a79d93d0 prev 0x5584a79d9200 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5584a79d92c0 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5584a79d9338 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x5584a79d9ca8 <line:218:2, line:233:2>
|   |-DeclStmt 0x5584a79d9590 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x5584a79d9490 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x5584a79d9578 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x5584a79d9558 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x5584a79d9530 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x5584a79d94f8 <col:23> 'int' 0
|   |-DeclStmt 0x5584a79d9620 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x5584a79d95b8 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x5584a79d9c00 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x5584a79d96f0 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x5584a79d9638 <line:222:42> 'sys_snode_t *' lvalue Var 0x5584a79d95b8 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x5584a79d96b0 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x5584a79d9698 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5584a79d9658 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5584a79ccf70 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x5584a79d96d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5584a79d9678 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5584a79d92c0 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5584a79d97e0 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x5584a79d97b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5584a79d9710 <col:42> 'sys_snode_t *' lvalue Var 0x5584a79d95b8 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x5584a79d97c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x5584a79d9790 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5584a79d9768 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5584a79d9730 <col:23> 'int' 0
|   | |-BinaryOperator 0x5584a79d98b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x5584a79d9800 <line:222:42> 'sys_snode_t *' lvalue Var 0x5584a79d95b8 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x5584a79d9878 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x5584a79d9860 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5584a79d9820 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5584a79cdeb8 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x5584a79d98a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5584a79d9840 <col:42> 'sys_snode_t *' lvalue Var 0x5584a79d95b8 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x5584a79d9be0 <col:48, line:230:3>
|   |   |-IfStmt 0x5584a79d9b50 <line:223:4, line:227:4>
|   |   | |-BinaryOperator 0x5584a79d9948 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x5584a79d9918 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x5584a79d98d8 <col:8> 'sys_snode_t *' lvalue Var 0x5584a79d95b8 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x5584a79d9930 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5584a79d98f8 <col:16> 'sys_snode_t *' lvalue ParmVar 0x5584a79d9338 'node' 'sys_snode_t *'
|   |   | `-CompoundStmt 0x5584a79d9b30 <col:22, line:227:4>
|   |   |   |-CallExpr 0x5584a79d9a68 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   |   | |-ImplicitCastExpr 0x5584a79d9a50 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x5584a79d9968 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x5584a79d85e8 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   |   | |-ImplicitCastExpr 0x5584a79d9aa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5584a79d9988 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5584a79d92c0 'list' 'sys_slist_t *'
|   |   |   | |-ImplicitCastExpr 0x5584a79d9ab8 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5584a79d99a8 <col:38> 'sys_snode_t *' lvalue Var 0x5584a79d9490 'prev' 'sys_snode_t *'
|   |   |   | `-ImplicitCastExpr 0x5584a79d9ad0 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5584a79d99c8 <col:11> 'sys_snode_t *' lvalue ParmVar 0x5584a79d9338 'node' 'sys_snode_t *'
|   |   |   `-ReturnStmt 0x5584a79d9b20 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   |     `-ImplicitCastExpr 0x5584a79d9b08 <col:16> 'bool' <IntegralToBoolean>
|   |   |       `-IntegerLiteral 0x5584a79d9ae8 <col:16> 'int' 1
|   |   `-BinaryOperator 0x5584a79d9bc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x5584a79d9b68 <col:4> 'sys_snode_t *' lvalue Var 0x5584a79d9490 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x5584a79d9ba8 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5584a79d9b88 <col:11> 'sys_snode_t *' lvalue Var 0x5584a79d95b8 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x5584a79d9c70 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x5584a79d9c58 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x5584a79d9c38 <col:16> 'int' 0
|-TypedefDecl 0x5584a79d9d18 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x5584a79d9ce0 'u64_t' sugar
|   |-Typedef 0x5584a79312e0 'u64_t'
|   `-BuiltinType 0x5584a78ba6d0 'unsigned long long'
|-RecordDecl 0x5584a79d9d70 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x5584a79d9e58 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x5584a79d9f08 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x5584a79d9eb0 'struct _sfnode' sugar
|   `-RecordType 0x5584a79d9df0 'struct _sfnode'
|     `-Record 0x5584a79d9d70 '_sfnode'
|-RecordDecl 0x5584a79d9f60 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x5584a79da0b0 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x5584a79da110 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x5584a79e09c0 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x5584a79da160 'struct _sflist' sugar
|   `-RecordType 0x5584a79d9fe0 'struct _sflist'
|     `-Record 0x5584a79d9f60 '_sflist'
|-FunctionDecl 0x5584a79e0cf0 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79e0be0 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x5584a79e0fd8 <line:197:1, line:200:1>
| | |-BinaryOperator 0x5584a79e0e98 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x5584a79e0dd0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x5584a79da0b0
| | | | `-ImplicitCastExpr 0x5584a79e0db8 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5584a79e0d98 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e0be0 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x5584a79e0e80 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x5584a79e0e60 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x5584a79e0e38 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5584a79e0e00 <col:23> 'int' 0
| | `-BinaryOperator 0x5584a79e0fb8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x5584a79e0ef0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x5584a79da110
| |   | `-ImplicitCastExpr 0x5584a79e0ed8 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5584a79e0eb8 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e0be0 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x5584a79e0fa0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x5584a79e0f80 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x5584a79e0f58 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x5584a79e0f20 <col:23> 'int' 0
| `-FullComment 0x5584a7a4b450 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x5584a7a4b290 <line:192:3>
|   | `-TextComment 0x5584a7a4b260 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a4b2b0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5584a7a4b310 <col:10, col:27>
|   |   `-TextComment 0x5584a7a4b2e0 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x5584a7a4b360 <line:194:3>
|   | `-TextComment 0x5584a7a4b330 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7a4b380 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x5584a7a4b410 <col:15, col:50>
|       `-TextComment 0x5584a7a4b3e0 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x5584a79e1110 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e1008 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79e1330 <line:206:1, line:208:1>
|   `-ReturnStmt 0x5584a79e1320 <line:207:2, col:71>
|     `-CStyleCastExpr 0x5584a79e12f8 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x5584a79e12d8 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x5584a79e1288 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x5584a79e1258 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x5584a79e11f0 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5584a79d9e58
|           |   `-ImplicitCastExpr 0x5584a79e11d8 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x5584a79e11b8 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e1008 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x5584a79e1270 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x5584a79e1240 <line:207:49, line:203:31> 'unsigned long' prefix '~' cannot overflow
|               `-IntegerLiteral 0x5584a79e1220 <col:31> 'unsigned long' 3
|-FunctionDecl 0x5584a79e1460 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x5584a79e1358 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x5584a79e16b0 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e1518 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x5584a79e1590 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79e1a68 <line:214:1, line:218:1>
|   |-DeclStmt 0x5584a79e18d8 <line:215:2, col:47>
|   | `-VarDecl 0x5584a79e1770 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x5584a79e1898 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x5584a79e1880 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5584a79e17d8 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x5584a79e1460 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x5584a79e18c0 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5584a79e17f8 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e1518 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x5584a79e1a48 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x5584a79e1928 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5584a79d9e58
|     | `-ImplicitCastExpr 0x5584a79e1910 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5584a79e18f0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e1518 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x5584a79e1a28 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x5584a79e1a10 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x5584a79e19f8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x5584a79e1958 <col:27> 'u8_t':'unsigned char' lvalue Var 0x5584a79e1770 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x5584a79e19d0 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x5584a79e19a8 <col:50> 'sys_sfnode_t *' <LValueToRValue> part_of_explicit_cast
|           `-DeclRefExpr 0x5584a79e1978 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e1590 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x5584a79e1c30 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e1a98 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e1b10 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79e1da0 <line:221:1, line:223:1>
|   `-BinaryOperator 0x5584a79e1d80 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x5584a79e1d18 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x5584a79da0b0
|     | `-ImplicitCastExpr 0x5584a79e1d00 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5584a79e1ce0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e1a98 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x5584a79e1d68 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a79e1d48 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e1b10 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5584a79e1ed8 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e1dc8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e1e40 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79e2078 <line:226:1, line:228:1>
|   `-BinaryOperator 0x5584a79e2028 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x5584a79e1fc0 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x5584a79da110
|     | `-ImplicitCastExpr 0x5584a79e1fa8 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5584a79e1f88 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e1dc8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x5584a79e2010 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a79e1ff0 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e1e40 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5584a79e21b0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79e20a0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x5584a79e2318 <line:238:1, line:240:1>
| | `-ReturnStmt 0x5584a79e22d8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x5584a79e22c0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5584a79e2290 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x5584a79da0b0
| |       `-ImplicitCastExpr 0x5584a79e2278 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a79e2258 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e20a0 'list' 'sys_sflist_t *'
| `-FullComment 0x5584a7a4b790 <line:231:3, line:235:68>
|   |-ParagraphComment 0x5584a7a4b4f0 <line:231:3>
|   | `-TextComment 0x5584a7a4b4c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a4b510 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7a4b570 <col:10, col:43>
|   |   `-TextComment 0x5584a7a4b540 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x5584a7a4b5c0 <line:233:3>
|   | `-TextComment 0x5584a7a4b590 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4b5e0 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a4b670 <col:15, col:62>
|   |   `-TextComment 0x5584a7a4b640 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x5584a7a4b6c0 <line:235:3>
|   | `-TextComment 0x5584a7a4b690 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a4b6e0 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x5584a7a4b740 <col:11, col:68>
|       `-TextComment 0x5584a7a4b710 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x5584a79e23d0 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79e2340 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x5584a79e2538 <line:250:1, line:252:1>
| | `-ReturnStmt 0x5584a79e24f8 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x5584a79e24e0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5584a79e24b0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x5584a79da110
| |       `-ImplicitCastExpr 0x5584a79e2498 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a79e2478 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e2340 'list' 'sys_sflist_t *'
| `-FullComment 0x5584a7a4bad0 <line:243:3, line:247:67>
|   |-ParagraphComment 0x5584a7a4b830 <line:243:3>
|   | `-TextComment 0x5584a7a4b800 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a4b850 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7a4b8b0 <col:10, col:42>
|   |   `-TextComment 0x5584a7a4b880 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x5584a7a4b900 <line:245:3>
|   | `-TextComment 0x5584a7a4b8d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4b920 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a4b9b0 <col:15, col:61>
|   |   `-TextComment 0x5584a7a4b980 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x5584a7a4ba00 <line:247:3>
|   | `-TextComment 0x5584a7a4b9d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7a4ba20 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5584a7a4ba80 <col:11, col:67>
|       `-TextComment 0x5584a7a4ba50 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x5584a79e25f0 prev 0x5584a79e1460 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e2560 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x5584a79e27c8 <line:265:1, line:267:1>
| | `-ReturnStmt 0x5584a79e2788 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x5584a79e2770 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x5584a79e2750 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x5584a79e2720 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x5584a79e26d0 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5584a79d9e58
| |       |   `-ImplicitCastExpr 0x5584a79e26b8 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5584a79e2698 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e2560 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x5584a79e2738 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x5584a79e2700 <col:31> 'unsigned long' 3
| `-FullComment 0x5584a7a4bde0 <line:259:3, line:262:60>
|   |-ParagraphComment 0x5584a7a4bb70 <line:259:3>
|   | `-TextComment 0x5584a7a4bb40 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a4bb90 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5584a7a4bbf0 <col:10, col:51>
|   |   `-TextComment 0x5584a7a4bbc0 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x5584a7a4bc40 <line:261:3>
|   | `-TextComment 0x5584a7a4bc10 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4bc60 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a4bd10 <line:261:15, line:262:3>
|   |   |-TextComment 0x5584a7a4bcc0 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x5584a7a4bce0 <line:262:3> Text=" "
|   `-BlockCommandComment 0x5584a7a4bd30 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x5584a7a4bd90 <col:11, col:60>
|       `-TextComment 0x5584a7a4bd60 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x5584a79e29e0 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x5584a79e27f0 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5584a79e2868 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x5584a79e2ba8 <line:283:1, line:286:1>
| | |-CompoundStmt 0x5584a79e2a90 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5584a79e2aa0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x5584a79e2b60 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x5584a79e2ae0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5584a79d9e58
| |   | `-ImplicitCastExpr 0x5584a79e2ac8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5584a79e2aa8 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e27f0 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x5584a79e2b48 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x5584a79e2b30 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x5584a79e2b10 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x5584a79e2868 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x5584a7a4c240 <line:270:3, line:280:62>
|   |-ParagraphComment 0x5584a7a4be80 <line:270:3>
|   | `-TextComment 0x5584a7a4be50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7a4bea0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5584a7a4bf00 <col:10, col:35>
|   |   `-TextComment 0x5584a7a4bed0 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x5584a7a4bfa0 <line:272:3, line:274:64>
|   | |-TextComment 0x5584a7a4bf20 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x5584a7a4bf40 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x5584a7a4bf60 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x5584a7a4c010 <line:276:3, line:277:61>
|   | |-TextComment 0x5584a7a4bfc0 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x5584a7a4bfe0 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x5584a7a4c060 <line:279:3>
|   | `-TextComment 0x5584a7a4c030 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7a4c080 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7a4c130 <line:279:15, line:280:3>
|   |   |-TextComment 0x5584a7a4c0e0 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x5584a7a4c100 <line:280:3> Text=" "
|   `-ParamCommandComment 0x5584a7a4c150 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x5584a7a4c1e0 <col:16, col:62>
|       `-TextComment 0x5584a7a4c1b0 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x5584a79e2cf0 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x5584a79e2be0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5584a79e2c58 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x5584a79e3048 <line:299:1, line:302:1>
| | |-CompoundStmt 0x5584a79e2da0 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5584a79e2db0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x5584a79e3000 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x5584a79e2df0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5584a79d9e58
| |   | `-ImplicitCastExpr 0x5584a79e2dd8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5584a79e2db8 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e2be0 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x5584a79e2fe0 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x5584a79e2f68 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x5584a79e2f48 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x5584a79e2ed8 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x5584a79e2ec0 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x5584a79e2e20 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e1110 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x5584a79e2f00 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5584a79e2e40 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e2be0 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x5584a79e2fc8 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x5584a79e2fb0 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a79e2f90 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x5584a79e2c58 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x5584a7af0ad0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x5584a7af0790 <line:289:3>
|   | `-TextComment 0x5584a7a4c2b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af07b0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7af0810 <col:10, col:44>
|   |   `-TextComment 0x5584a7af07e0 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x5584a7af08b0 <line:291:3, line:293:64>
|   | |-TextComment 0x5584a7af0830 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x5584a7af0850 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x5584a7af0870 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x5584a7af0900 <line:295:3>
|   | `-TextComment 0x5584a7af08d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af0920 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af09d0 <line:295:15, line:296:3>
|   |   |-TextComment 0x5584a7af0980 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x5584a7af09a0 <line:296:3> Text=" "
|   `-ParamCommandComment 0x5584a7af09f0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x5584a7af0a80 <col:16, col:62>
|       `-TextComment 0x5584a7af0a50 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x5584a79e3190 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79e3080 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x5584a7af0e10 <line:309:3, line:313:57>
|   |-ParagraphComment 0x5584a7af0b70 <line:309:3>
|   | `-TextComment 0x5584a7af0b40 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af0b90 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7af0bf0 <col:10, col:41>
|   |   `-TextComment 0x5584a7af0bc0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x5584a7af0c40 <line:311:3>
|   | `-TextComment 0x5584a7af0c10 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af0c60 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af0cf0 <col:15, col:44>
|   |   `-TextComment 0x5584a7af0cc0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x5584a7af0d40 <line:313:3>
|   | `-TextComment 0x5584a7af0d10 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af0d60 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5584a7af0dc0 <col:11, col:57>
|       `-TextComment 0x5584a7af0d90 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x5584a79e32d8 prev 0x5584a79e3190 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79e3248 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x5584a79e35a8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x5584a79e3568 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x5584a79e3550 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5584a79e3530 <col:10, col:54> 'int'
|         `-BinaryOperator 0x5584a79e3510 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x5584a79e3438 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x5584a79e3420 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x5584a79e3380 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x5584a79e3460 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x5584a79e33a0 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e3248 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x5584a79e34f8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x5584a79e34d8 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x5584a79e34b0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x5584a79e3478 <col:23> 'int' 0
|-FunctionDecl 0x5584a79e3660 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e35d0 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x5584a7af11b0 <line:320:3, line:326:55>
|   |-ParagraphComment 0x5584a7af0eb0 <line:320:3>
|   | `-TextComment 0x5584a7af0e80 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af0ed0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5584a7af0f30 <col:10, col:64>
|   |   `-TextComment 0x5584a7af0f00 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x5584a7af0f80 <line:322:3, col:70>
|   | `-TextComment 0x5584a7af0f50 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5584a7af0fd0 <line:324:3>
|   | `-TextComment 0x5584a7af0fa0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af0ff0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af1080 <col:15, col:64>
|   |   `-TextComment 0x5584a7af1050 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5584a7af10d0 <line:326:3>
|   | `-TextComment 0x5584a7af10a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af10f0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5584a7af1150 <col:11, col:55>
|       `-TextComment 0x5584a7af1120 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5584a79e37a8 prev 0x5584a79e3660 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e3718 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79e3928 <line:67:2, line:69:2>
|   `-ReturnStmt 0x5584a79e38e8 <line:68:3, col:42>
|     `-CallExpr 0x5584a79e38a8 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x5584a79e3890 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a79e3850 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e1110 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x5584a79e38d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a79e3870 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e3718 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5584a79e39f0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e3950 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x5584a7af14f0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x5584a7af1250 <line:333:3>
|   | `-TextComment 0x5584a7af1220 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af1270 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5584a7af12d0 <col:10, col:46>
|   |   `-TextComment 0x5584a7af12a0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x5584a7af1320 <line:335:3>
|   | `-TextComment 0x5584a7af12f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af1340 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af13d0 <col:15, col:64>
|   |   `-TextComment 0x5584a7af13a0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5584a7af1420 <line:337:3>
|   | `-TextComment 0x5584a7af13f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af1440 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5584a7af14a0 <col:11, col:55>
|       `-TextComment 0x5584a7af1470 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5584a79e3b38 prev 0x5584a79e39f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e3aa8 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79e3e68 <line:74:2, line:78:2>
|   `-ReturnStmt 0x5584a79e3e30 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x5584a79e3e00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x5584a79e3cb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x5584a79e3c80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x5584a79e3be0 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e3aa8 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x5584a79e3c98 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x5584a79e3c60 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5584a79e3c38 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5584a79e3c00 <col:23> 'int' 0
|       |-CallExpr 0x5584a79e3d28 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5584a79e3d10 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5584a79e3cd0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e37a8 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x5584a79e3d50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5584a79e3cf0 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e3aa8 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x5584a79e3de8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x5584a79e3dc8 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x5584a79e3da0 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x5584a79e3d68 <col:23> 'int' 0
|-FunctionDecl 0x5584a79e3fa0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e3e90 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e3f08 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x5584a7af1880 <line:344:3, line:349:47>
|   |-ParagraphComment 0x5584a7af1590 <line:344:3>
|   | `-TextComment 0x5584a7af1560 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af15b0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7af1610 <col:10, col:42>
|   |   `-TextComment 0x5584a7af15e0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x5584a7af1660 <line:346:3, col:63>
|   | `-TextComment 0x5584a7af1630 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7af16b0 <line:348:3>
|   | `-TextComment 0x5584a7af1680 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af16d0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af1780 <line:348:15, line:349:3>
|   |   |-TextComment 0x5584a7af1730 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7af1750 <line:349:3> Text=" "
|   `-ParamCommandComment 0x5584a7af17a0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5584a7af1830 <col:15, col:47>
|       `-TextComment 0x5584a7af1800 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x5584a79e4170 prev 0x5584a79e3fa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e4060 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e40d8 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79e47d8 <line:84:2, line:93:2>
|   |-CallExpr 0x5584a79e4378 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x5584a79e4360 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79e4220 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5584a79e16b0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5584a79e43a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79e4240 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e40d8 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x5584a79e42b8 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5584a79e42a0 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5584a79e4260 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x5584a79e42e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79e4280 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4060 'list' 'sys_sflist_t *'
|   |-CallExpr 0x5584a79e4498 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x5584a79e4480 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79e43c0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5584a79e44c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79e43e0 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4060 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x5584a79e44e0 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5584a79e4400 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e40d8 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x5584a79e4798 <line:89:3, line:92:3>
|     |-BinaryOperator 0x5584a79e4628 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5584a79e4550 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x5584a79e4538 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5584a79e44f8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x5584a79e4578 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5584a79e4518 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4060 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x5584a79e4610 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x5584a79e45f0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5584a79e45c8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5584a79e4590 <col:23> 'int' 0
|     `-CompoundStmt 0x5584a79e4780 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|       `-CallExpr 0x5584a79e4738 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|         |-ImplicitCastExpr 0x5584a79e4720 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5584a79e4648 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x5584a79e4768 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5584a79e4668 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4060 'list' 'sys_sflist_t *'
|         `-CallExpr 0x5584a79e46e0 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|           |-ImplicitCastExpr 0x5584a79e46c8 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5584a79e4688 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           `-ImplicitCastExpr 0x5584a79e4708 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5584a79e46a8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4060 'list' 'sys_sflist_t *'
|-FunctionDecl 0x5584a79e4920 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e4810 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e4888 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x5584a7af1c10 <line:357:3, line:362:46>
|   |-ParagraphComment 0x5584a7af1920 <line:357:3>
|   | `-TextComment 0x5584a7af18f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af1940 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7af19a0 <col:10, col:41>
|   |   `-TextComment 0x5584a7af1970 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x5584a7af19f0 <line:359:3, col:63>
|   | `-TextComment 0x5584a7af19c0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7af1a40 <line:361:3>
|   | `-TextComment 0x5584a7af1a10 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af1a60 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af1b10 <line:361:15, line:362:3>
|   |   |-TextComment 0x5584a7af1ac0 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7af1ae0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x5584a7af1b30 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5584a7af1bc0 <col:15, col:46>
|       `-TextComment 0x5584a7af1b90 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x5584a79e4b10 prev 0x5584a79e4920 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e4a00 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e4a78 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79e5298 <line:99:2, line:111:2>
|   |-CallExpr 0x5584a79e4c98 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x5584a79e4c80 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79e4bc0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5584a79e16b0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5584a79e4cc8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79e4be0 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e4a78 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x5584a79e4ce0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x5584a79e4c60 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x5584a79e4c38 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x5584a79e4c00 <col:23> 'int' 0
|   `-IfStmt 0x5584a79e5248 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3> has_else
|     |-BinaryOperator 0x5584a79e4e28 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5584a79e4d50 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x5584a79e4d38 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5584a79e4cf8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x5584a79e4d78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5584a79e4d18 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4a00 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x5584a79e4e10 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x5584a79e4df0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5584a79e4dc8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5584a79e4d90 <col:23> 'int' 0
|     |-CompoundStmt 0x5584a79e4ff8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x5584a79e4ec0 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x5584a79e4ea8 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5584a79e4e48 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x5584a79e4ef0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5584a79e4e68 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4a00 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x5584a79e4f08 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5584a79e4e88 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e4a78 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x5584a79e4f98 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x5584a79e4f80 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5584a79e4f20 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x5584a79e4fc8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5584a79e4f40 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4a00 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x5584a79e4fe0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5584a79e4f60 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e4a78 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x5584a79e5228 <line:105:10, line:110:3>
|       |-CallExpr 0x5584a79e5108 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x5584a79e50f0 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5584a79e5018 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5584a79e16b0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x5584a79e5090 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x5584a79e5078 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5584a79e5038 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x5584a79e50b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5584a79e5058 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4a00 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x5584a79e5138 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5584a79e50d0 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e4a78 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x5584a79e51c8 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x5584a79e51b0 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5584a79e5150 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x5584a79e51f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5584a79e5170 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e4a00 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x5584a79e5210 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5584a79e5190 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e4a78 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5584a79e5500 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5584a79e52c8 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e5348 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x5584a79e53c8 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x5584a7af2170 <line:370:3, line:380:66>
|   |-ParagraphComment 0x5584a7af1cb0 <line:370:3>
|   | `-TextComment 0x5584a7af1c80 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af1cd0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7af1d30 <col:10, col:41>
|   |   `-TextComment 0x5584a7af1d00 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x5584a7af1e20 <line:372:3, line:374:63>
|   | |-TextComment 0x5584a7af1d50 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x5584a7af1d70 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x5584a7af1dc0 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x5584a7af1de0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7af1e70 <line:376:3, col:48>
|   | `-TextComment 0x5584a7af1e40 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x5584a7af1ec0 <line:378:3>
|   | `-TextComment 0x5584a7af1e90 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af1ee0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af1f90 <line:378:15, line:379:3>
|   |   |-TextComment 0x5584a7af1f40 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7af1f60 <line:379:3> Text=" "
|   |-ParamCommandComment 0x5584a7af1fb0 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5584a7af2060 <line:379:15, line:380:3>
|   |   |-TextComment 0x5584a7af2010 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x5584a7af2030 <line:380:3> Text=" "
|   `-ParamCommandComment 0x5584a7af2080 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x5584a7af2110 <col:15, col:66>
|       `-TextComment 0x5584a7af20e0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x5584a79e5768 prev 0x5584a79e5500 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5584a79e55c8 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e5648 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x5584a79e56c8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x5584a79e5d98 <col:31, line:127:42>
|   |-IfStmt 0x5584a79e5c38 <line:118:2, line:125:2> has_else
|   | |-BinaryOperator 0x5584a79e5950 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x5584a79e5878 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x5584a79e5860 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5584a79e5820 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x5584a79e58a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5584a79e5840 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e55c8 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x5584a79e5938 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x5584a79e5918 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5584a79e58f0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5584a79e58b8 <col:23> 'int' 0
|   | |-CompoundStmt 0x5584a79e5a98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x5584a79e5a50 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x5584a79e5a38 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5584a79e5970 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x5584a79e5a80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5584a79e5990 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e55c8 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x5584a79e5a10 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x5584a79e59e0 <col:31> 'void *' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x5584a79e59b0 <col:31> 'void *' lvalue ParmVar 0x5584a79e5648 'head' 'void *'
|   | `-CompoundStmt 0x5584a79e5c20 <line:121:9, line:125:2>
|   |   `-CallExpr 0x5584a79e5bf0 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x5584a79e5bd8 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5584a79e5ab0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5584a79e16b0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x5584a79e5b28 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x5584a79e5b10 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5584a79e5ad0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x5584a79e5b50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5584a79e5af0 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e55c8 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x5584a79e5bb0 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x5584a79e5b98 <col:29> 'void *' <LValueToRValue> part_of_explicit_cast
|   |         `-DeclRefExpr 0x5584a79e5b68 <col:29> 'void *' lvalue ParmVar 0x5584a79e5648 'head' 'void *'
|   `-CallExpr 0x5584a79e5d28 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x5584a79e5d10 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a79e5c60 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x5584a79e5d58 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a79e5c80 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e55c8 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x5584a79e5ce8 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x5584a79e5cd0 <col:35> 'void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5584a79e5ca0 <col:35> 'void *' lvalue ParmVar 0x5584a79e56c8 'tail' 'void *'
|-FunctionDecl 0x5584a79e5f60 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79e5dc8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e5e40 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x5584a7af2520 <line:388:3, line:394:57>
|   |-ParagraphComment 0x5584a7af2210 <line:388:3>
|   | `-TextComment 0x5584a7af21e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af2230 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x5584a7af2290 <col:10, col:66>
|   |   `-TextComment 0x5584a7af2260 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x5584a7af2300 <line:390:3, line:391:63>
|   | |-TextComment 0x5584a7af22b0 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x5584a7af22d0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7af2350 <line:393:3>
|   | `-TextComment 0x5584a7af2320 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af2370 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af2420 <line:393:15, line:394:3>
|   |   |-TextComment 0x5584a7af23d0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7af23f0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x5584a7af2440 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x5584a7af24d0 <col:25, col:57>
|       `-TextComment 0x5584a7af24a0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x5584a79e6130 prev 0x5584a79e5f60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79e6020 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e6098 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x5584a79e6788 <line:135:2, line:141:2>
|   |-DeclStmt 0x5584a79e62e8 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x5584a79e61f0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x5584a79e6268 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x5584a79e63b8 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x5584a79e6300 <col:3> 'sys_sfnode_t *' lvalue Var 0x5584a79e61f0 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x5584a79e6378 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5584a79e6360 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5584a79e6320 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x5584a79e63a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79e6340 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e6098 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x5584a79e6490 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x5584a79e63d8 <col:3> 'sys_sfnode_t *' lvalue Var 0x5584a79e6268 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x5584a79e6450 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5584a79e6438 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5584a79e63f8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x5584a79e6478 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79e6418 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e6098 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x5584a79e65a8 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x5584a79e6590 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79e64b0 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x5584a79e5768 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x5584a79e65e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79e64d0 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e6020 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x5584a79e6610 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x5584a79e65f8 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5584a79e64f0 <col:41> 'sys_sfnode_t *' lvalue Var 0x5584a79e61f0 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x5584a79e6640 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x5584a79e6628 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79e6510 <col:47> 'sys_sfnode_t *' lvalue Var 0x5584a79e6268 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x5584a79e6718 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x5584a79e6700 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a79e6658 <col:1> 'void (sys_sflist_t *)' Function 0x5584a79e0cf0 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x5584a79e6740 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a79e6678 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e6098 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x5584a79e7a40 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e67d0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e6848 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x5584a79e68c0 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x5584a7af29b0 <line:402:3, line:408:46>
|   |-ParagraphComment 0x5584a7af25c0 <line:402:3>
|   | `-TextComment 0x5584a7af2590 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af25e0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7af2640 <col:10, col:41>
|   |   `-TextComment 0x5584a7af2610 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x5584a7af2690 <line:404:3, col:63>
|   | `-TextComment 0x5584a7af2660 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7af26e0 <line:406:3>
|   | `-TextComment 0x5584a7af26b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af2700 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af27d0 <line:406:15, line:407:3>
|   |   |-TextComment 0x5584a7af2760 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7af27a0 <line:407:3> Text=" "
|   |-ParamCommandComment 0x5584a7af27f0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x5584a7af28a0 <line:407:15, line:408:3>
|   |   |-TextComment 0x5584a7af2850 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x5584a7af2870 <line:408:3> Text=" "
|   `-ParamCommandComment 0x5584a7af28c0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5584a7af2950 <col:15, col:46>
|       `-TextComment 0x5584a7af2920 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x5584a79e7c98 prev 0x5584a79e7a40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79e7b08 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79e7b80 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x5584a79e7bf8 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79e8418 <line:148:2, line:158:2>
|   `-IfStmt 0x5584a79e83c8 <line:149:3, line:157:3> has_else
|     |-BinaryOperator 0x5584a79e7e20 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x5584a79e7df0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x5584a79e7d50 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e7b80 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x5584a79e7e08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x5584a79e7dd0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5584a79e7da8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5584a79e7d70 <col:23> 'int' 0
|     |-CompoundStmt 0x5584a79e7f18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x5584a79e7eb8 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x5584a79e7ea0 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5584a79e7e40 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e4170 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x5584a79e7ee8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5584a79e7e60 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e7b08 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x5584a79e7f00 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5584a79e7e80 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e7bf8 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x5584a79e83a0 <line:151:10, line:157:3> has_else
|       |-BinaryOperator 0x5584a79e8060 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x5584a79e7f88 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x5584a79e7f70 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5584a79e7f30 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e1110 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x5584a79e7fb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5584a79e7f50 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e7b80 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x5584a79e8048 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x5584a79e8028 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5584a79e8000 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5584a79e7fc8 <col:23> 'int' 0
|       |-CompoundStmt 0x5584a79e8158 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x5584a79e80f8 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x5584a79e80e0 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5584a79e8080 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e4b10 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x5584a79e8128 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5584a79e80a0 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e7b08 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x5584a79e8140 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5584a79e80c0 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e7bf8 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x5584a79e8380 <line:153:10, line:157:3>
|         |-CallExpr 0x5584a79e8260 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x5584a79e8248 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5584a79e8170 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5584a79e16b0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x5584a79e8290 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x5584a79e8190 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e7bf8 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x5584a79e8208 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x5584a79e81f0 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x5584a79e81b0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e1110 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x5584a79e8230 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x5584a79e81d0 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e7b80 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x5584a79e8320 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x5584a79e8308 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5584a79e82a8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5584a79e16b0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x5584a79e8350 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x5584a79e82c8 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e7b80 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x5584a79e8368 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5584a79e82e8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79e7bf8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5584a79e84d0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79e8440 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x5584a7af2d70 <line:417:3, line:424:50>
|   |-ParagraphComment 0x5584a7af2a50 <line:417:3>
|   | `-TextComment 0x5584a7af2a20 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af2a70 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5584a7af2ad0 <col:10, col:59>
|   |   `-TextComment 0x5584a7af2aa0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5584a7af2b40 <line:419:3, line:420:63>
|   | |-TextComment 0x5584a7af2af0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x5584a7af2b10 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7af2b90 <line:422:3>
|   | `-TextComment 0x5584a7af2b60 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af2bb0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af2c40 <col:15, col:46>
|   |   `-TextComment 0x5584a7af2c10 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5584a7af2c90 <line:424:3>
|   | `-TextComment 0x5584a7af2c60 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af2cb0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x5584a7af2d10 <col:11, col:50>
|       `-TextComment 0x5584a7af2ce0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x5584a79e8618 prev 0x5584a79e84d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79e8588 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x5584a79d33c8 <line:163:2, line:175:2>
|   |-DeclStmt 0x5584a79e87d0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x5584a79e86d0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x5584a79e8790 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x5584a79e8778 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5584a79e8738 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x5584a79e87b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5584a79e8758 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e8588 'list' 'sys_sflist_t *'
|   |-CallExpr 0x5584a79e88d8 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x5584a79e88c0 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5584a79e87e8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5584a79e8908 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5584a79e8808 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e8588 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x5584a79e8880 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5584a79e8868 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5584a79e8828 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e1110 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x5584a79e88a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5584a79e8848 <col:33> 'sys_sfnode_t *' lvalue Var 0x5584a79e86d0 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x5584a79d3340 <line:169:3, line:172:3>
|   | |-BinaryOperator 0x5584a79e89f0 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x5584a79e8978 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x5584a79e8960 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5584a79e8920 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x5584a79e89a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5584a79e8940 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e8588 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x5584a79e89d8 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5584a79e89b8 <col:46> 'sys_sfnode_t *' lvalue Var 0x5584a79e86d0 'node' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x5584a79d3328 <col:52, line:172:3>
|   |   `-CallExpr 0x5584a79d32e0 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   |     |-ImplicitCastExpr 0x5584a79d32c8 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5584a79e8a10 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |-ImplicitCastExpr 0x5584a79d3310 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5584a79d3210 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e8588 'list' 'sys_sflist_t *'
|   |     `-CallExpr 0x5584a79d3288 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   |       |-ImplicitCastExpr 0x5584a79d3270 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5584a79d3230 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |       `-ImplicitCastExpr 0x5584a79d32b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5584a79d3250 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5584a79e8588 'list' 'sys_sflist_t *'
|   `-ReturnStmt 0x5584a79d3390 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x5584a79d3378 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a79d3358 <col:10> 'sys_sfnode_t *' lvalue Var 0x5584a79e86d0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5584a79d3498 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79d3408 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x5584a7af3110 <line:431:3, line:437:69>
|   |-ParagraphComment 0x5584a7af2e10 <line:431:3>
|   | `-TextComment 0x5584a7af2de0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af2e30 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5584a7af2e90 <col:10, col:59>
|   |   `-TextComment 0x5584a7af2e60 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5584a7af2ee0 <line:433:3, col:63>
|   | `-TextComment 0x5584a7af2eb0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7af2f30 <line:435:3>
|   | `-TextComment 0x5584a7af2f00 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af2f50 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af2fe0 <col:15, col:46>
|   |   `-TextComment 0x5584a7af2fb0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5584a7af3030 <line:437:3>
|   | `-TextComment 0x5584a7af3000 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af3050 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5584a7af30b0 <col:11, col:69>
|       `-TextComment 0x5584a7af3080 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x5584a79d35e0 prev 0x5584a79d3498 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5584a79d3550 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x5584a79d3938 <line:180:2, line:183:2>
|   `-ReturnStmt 0x5584a79d3900 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x5584a79d38d0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x5584a79d38a0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x5584a79d3748 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x5584a79d3730 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5584a79d3688 <col:1> 'bool (sys_sflist_t *)' Function 0x5584a79e32d8 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x5584a79d3770 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5584a79d36a8 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d3550 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x5584a79d38b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x5584a79d37e8 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x5584a79d37c0 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x5584a79d3788 <col:23> 'int' 0
|       `-CallExpr 0x5584a79d3860 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x5584a79d3848 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5584a79d3808 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e8618 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x5584a79d3888 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5584a79d3828 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d3550 'list' 'sys_sflist_t *'
|-FunctionDecl 0x5584a79d3af0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79d3960 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79d39d8 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5584a79d3a50 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x5584a7af35b0 <line:444:3, line:451:46>
|   |-ParagraphComment 0x5584a7af31b0 <line:444:3>
|   | `-TextComment 0x5584a7af3180 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af31d0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5584a7af3230 <col:10, col:23>
|   |   `-TextComment 0x5584a7af3200 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x5584a7af3280 <line:446:3, col:63>
|   | `-TextComment 0x5584a7af3250 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7af32d0 <line:448:3>
|   | `-TextComment 0x5584a7af32a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af32f0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af33a0 <line:448:15, line:449:3>
|   |   |-TextComment 0x5584a7af3350 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7af3370 <line:449:3> Text=" "
|   |-ParamCommandComment 0x5584a7af33c0 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7af34a0 <line:449:20, line:451:3>
|   |   |-TextComment 0x5584a7af3420 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x5584a7af3440 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x5584a7af3460 <line:451:3> Text=" "
|   `-ParamCommandComment 0x5584a7af34c0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5584a7af3550 <col:15, col:46>
|       `-TextComment 0x5584a7af3520 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x5584a79d3d48 prev 0x5584a79d3af0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79d3bb8 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79d3c30 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5584a79d3ca8 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79d4798 <line:190:2, line:212:2>
|   |-IfStmt 0x5584a79d4608 <line:191:3, line:209:3> has_else
|   | |-BinaryOperator 0x5584a79d3ed0 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x5584a79d3ea0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5584a79d3e00 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d3c30 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x5584a79d3eb8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x5584a79d3e80 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5584a79d3e58 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5584a79d3e20 <col:23> 'int' 0
|   | |-CompoundStmt 0x5584a79d4298 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x5584a79d3fe0 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x5584a79d3fc8 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5584a79d3ef0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1c30 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x5584a79d4010 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5584a79d3f10 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d3bb8 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x5584a79d3f88 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x5584a79d3f70 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5584a79d3f30 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e1110 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x5584a79d3fb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5584a79d3f50 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d3ca8 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x5584a79d4280 <line:196:4, line:199:4>
|   | |   |-BinaryOperator 0x5584a79d40f8 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x5584a79d4080 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x5584a79d4068 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x5584a79d4028 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x5584a79d40a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x5584a79d4048 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d3bb8 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x5584a79d40e0 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x5584a79d40c0 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d3ca8 'node' 'sys_sfnode_t *'
|   | |   `-CompoundStmt 0x5584a79d4268 <col:53, line:199:4>
|   | |     `-CallExpr 0x5584a79d4220 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |       |-ImplicitCastExpr 0x5584a79d41f0 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5584a79d4118 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |       |-ImplicitCastExpr 0x5584a79d4250 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5584a79d4138 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d3bb8 'list' 'sys_sflist_t *'
|   | |       `-CallExpr 0x5584a79d41b0 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |         |-ImplicitCastExpr 0x5584a79d4198 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x5584a79d4158 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |         `-ImplicitCastExpr 0x5584a79d41d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x5584a79d4178 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d3bb8 'list' 'sys_sflist_t *'
|   | `-CompoundStmt 0x5584a79d45e8 <line:200:10, line:209:3>
|   |   |-CallExpr 0x5584a79d43a8 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x5584a79d4390 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5584a79d42b8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5584a79e16b0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x5584a79d43d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x5584a79d42d8 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d3c30 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x5584a79d4350 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x5584a79d4338 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x5584a79d42f8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e1110 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x5584a79d4378 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5584a79d4318 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d3ca8 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x5584a79d45d0 <line:205:4, line:208:4>
|   |     |-BinaryOperator 0x5584a79d44c0 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x5584a79d4448 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x5584a79d4430 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x5584a79d43f0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x5584a79d4470 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5584a79d4410 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d3bb8 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x5584a79d44a8 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5584a79d4488 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d3ca8 'node' 'sys_sfnode_t *'
|   |     `-CompoundStmt 0x5584a79d45b8 <col:53, line:208:4>
|   |       `-CallExpr 0x5584a79d4558 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |         |-ImplicitCastExpr 0x5584a79d4540 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5584a79d44e0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79e1ed8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |         |-ImplicitCastExpr 0x5584a79d4588 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5584a79d4500 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d3bb8 'list' 'sys_sflist_t *'
|   |         `-ImplicitCastExpr 0x5584a79d45a0 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5584a79d4520 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d3c30 'prev_node' 'sys_sfnode_t *'
|   `-CallExpr 0x5584a79d4708 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x5584a79d46f0 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a79d4630 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5584a79e16b0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x5584a79d4738 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a79d4650 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d3ca8 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x5584a79d4750 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x5584a79d46d0 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x5584a79d46a8 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x5584a79d4670 <col:23> 'int' 0
|-FunctionDecl 0x5584a79d4960 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79d47c8 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79d4840 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x5584a7af3a20 <line:460:3, line:467:35>
|   |-ParagraphComment 0x5584a7af3650 <line:460:3>
|   | `-TextComment 0x5584a7af3620 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af3670 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7af36d0 <col:10, col:44>
|   |   `-TextComment 0x5584a7af36a0 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x5584a7af3720 <line:462:3, col:63>
|   | `-TextComment 0x5584a7af36f0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5584a7af3770 <line:464:3>
|   | `-TextComment 0x5584a7af3740 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af3790 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af3840 <line:464:15, line:465:3>
|   |   |-TextComment 0x5584a7af37f0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5584a7af3810 <line:465:3> Text=" "
|   |-ParamCommandComment 0x5584a7af3860 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5584a7af38f0 <col:15, col:60>
|   |   `-TextComment 0x5584a7af38c0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x5584a7af3940 <line:467:3>
|   | `-TextComment 0x5584a7af3910 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af3960 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7af39c0 <col:11, col:35>
|       `-TextComment 0x5584a7af3990 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x5584a79d4b30 prev 0x5584a79d4960 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5584a79d4a20 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5584a79d4a98 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5584a79d53f8 <line:218:2, line:233:2>
|   |-DeclStmt 0x5584a79d4cf0 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x5584a79d4bf0 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x5584a79d4cd8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x5584a79d4cb8 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x5584a79d4c90 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x5584a79d4c58 <col:23> 'int' 0
|   |-DeclStmt 0x5584a79d4d80 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x5584a79d4d18 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x5584a79d5378 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x5584a79d4e50 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x5584a79d4d98 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x5584a79d4d18 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x5584a79d4e10 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x5584a79d4df8 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5584a79d4db8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x5584a79d4e38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5584a79d4dd8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d4a20 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5584a79d4f40 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x5584a79d4f10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5584a79d4e70 <col:42> 'sys_sfnode_t *' lvalue Var 0x5584a79d4d18 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x5584a79d4f28 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x5584a79d4ef0 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5584a79d4ec8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5584a79d4e90 <col:23> 'int' 0
|   | |-BinaryOperator 0x5584a79d5018 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x5584a79d4f60 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x5584a79d4d18 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x5584a79d4fd8 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x5584a79d4fc0 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5584a79d4f80 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e3b38 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x5584a79d5000 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5584a79d4fa0 <col:42> 'sys_sfnode_t *' lvalue Var 0x5584a79d4d18 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x5584a79d5358 <col:48, line:230:3>
|   |   |-IfStmt 0x5584a79d52c8 <line:223:4, line:227:4>
|   |   | |-BinaryOperator 0x5584a79d50a8 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x5584a79d5078 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x5584a79d5038 <col:8> 'sys_sfnode_t *' lvalue Var 0x5584a79d4d18 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x5584a79d5090 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5584a79d5058 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d4a98 'node' 'sys_sfnode_t *'
|   |   | `-CompoundStmt 0x5584a79d52a8 <col:22, line:227:4>
|   |   |   |-CallExpr 0x5584a79d51c8 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   |   | |-ImplicitCastExpr 0x5584a79d51b0 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x5584a79d50c8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x5584a79d3d48 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   |   | |-ImplicitCastExpr 0x5584a79d5200 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5584a79d50e8 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5584a79d4a20 'list' 'sys_sflist_t *'
|   |   |   | |-ImplicitCastExpr 0x5584a79d5230 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5584a79d5108 <col:38> 'sys_sfnode_t *' lvalue Var 0x5584a79d4bf0 'prev' 'sys_sfnode_t *'
|   |   |   | `-ImplicitCastExpr 0x5584a79d5248 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5584a79d5128 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x5584a79d4a98 'node' 'sys_sfnode_t *'
|   |   |   `-ReturnStmt 0x5584a79d5298 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   |     `-ImplicitCastExpr 0x5584a79d5280 <col:16> 'bool' <IntegralToBoolean>
|   |   |       `-IntegerLiteral 0x5584a79d5260 <col:16> 'int' 1
|   |   `-BinaryOperator 0x5584a79d5338 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x5584a79d52e0 <col:4> 'sys_sfnode_t *' lvalue Var 0x5584a79d4bf0 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x5584a79d5320 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5584a79d5300 <col:11> 'sys_sfnode_t *' lvalue Var 0x5584a79d4d18 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x5584a79d53e8 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x5584a79d53d0 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x5584a79d53b0 <col:16> 'int' 0
|-RecordDecl 0x5584a79d5428 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x5584a79d54d8 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x5584a79d5600 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x5584a79d5790 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x5584a79d5840 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x5584a79d58a0 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x5584a79d5840 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x5584a79d5600 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x5584a79d58f8 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x5584a79d5840 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x5584a79d5790 'bits' 'u32_t [2]'
| `-FieldDecl 0x5584a79d5950 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x5584a79d59f8 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x5584a79d5ac0 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x5584a79d5b20 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x5584a79d5ba8 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x5584a79d5c08 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x5584a79d5c98 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x5584a79d5db8 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x5584a79d5e18 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x5584a79d6040 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x5584a79d5f38 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x5584a79f80b8 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x5584a79d6110 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x5584a79d6188 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a79f7e20 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x5584a79f7e98 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x5584a79f7f48 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x5584a79f83d0 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x5584a79f81a8 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x5584a79f8220 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x5584a79f8298 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x5584a79f8488 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x5584a79f8560 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x5584a79f8608 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x5584a79f85b0 'struct _ready_q' sugar
|   `-RecordType 0x5584a79f8510 'struct _ready_q'
|     `-Record 0x5584a79f8488 '_ready_q'
|-RecordDecl 0x5584a79f8660 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x5584a79f8718 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x5584a79f8780 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x5584a79f87f8 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x5584a79f8870 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x5584a79f88d0 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x5584a79f8978 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x5584a79f8920 'struct _cpu' sugar
|   `-RecordType 0x5584a79f86e0 'struct _cpu'
|     `-Record 0x5584a79f8660 '_cpu'
|-RecordDecl 0x5584a79f89d0 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x5584a79f8a78 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x5584a79f8b70 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x5584a79f8bc0 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x5584a79f8c78 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x5584a79f8ce0 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x5584a79f8d58 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x5584a79fcd60 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x5584a79fcdc0 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x5584a79fcd60 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x5584a79f8c78 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x5584a79fce18 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x5584a79fcd60 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x5584a79f8ce0 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x5584a79fce70 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x5584a79fcd60 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x5584a79f8d58 'current' 'struct k_thread *'
| `-FieldDecl 0x5584a79fcf48 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x5584a79fd048 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x5584a79fcff0 'struct z_kernel' sugar
|   `-RecordType 0x5584a79f8a50 'struct z_kernel'
|     `-Record 0x5584a79f89d0 'z_kernel'
|-VarDecl 0x5584a79fd0c0 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x5584a79fd280 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x5584a7af3cd0 <line:40:3, line:45:25>
|   |-ParagraphComment 0x5584a7af3ac0 <line:40:3>
|   | `-TextComment 0x5584a7af3a90 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af3ae0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5584a7af3b40 <col:10, col:56>
|   |   `-TextComment 0x5584a7af3b10 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x5584a7af3bb0 <line:42:3, line:43:27>
|   | |-TextComment 0x5584a7af3b60 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x5584a7af3b80 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x5584a7af3c00 <line:45:3>
|   | `-TextComment 0x5584a7af3bd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af3c20 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x5584a7af3c80 <col:11, col:25>
|       `-TextComment 0x5584a7af3c50 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x5584a79fd470 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x5584a7af4020 <line:37:3, line:43:31>
|   |-ParagraphComment 0x5584a7af3d70 <line:37:3>
|   | `-TextComment 0x5584a7af3d40 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af3d90 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x5584a7af3e10 <line:37:10, line:38:20>
|   |   |-TextComment 0x5584a7af3dc0 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x5584a7af3de0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x5584a7af3e60 <line:40:3>
|   | `-TextComment 0x5584a7af3e30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af3e80 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x5584a7af3f00 <line:40:9, line:41:23>
|   |   |-TextComment 0x5584a7af3eb0 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x5584a7af3ed0 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x5584a7af3f50 <line:43:3>
|   | `-TextComment 0x5584a7af3f20 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af3f70 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x5584a7af3fd0 <col:11, col:31>
|       `-TextComment 0x5584a7af3fa0 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x5584a79fd6e0 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x5584a79fd550 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x5584a79fd5c8 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x5584a7af44d0 <line:47:3, line:56:1>
|   |-ParagraphComment 0x5584a7af40c0 <line:47:3>
|   | `-TextComment 0x5584a7af4090 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af40e0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x5584a7af4160 <line:47:10, line:48:33>
|   |   |-TextComment 0x5584a7af4110 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x5584a7af4130 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x5584a7af41b0 <line:50:3>
|   | `-TextComment 0x5584a7af4180 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af41d0 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x5584a7af4250 <line:50:9, line:51:31>
|   |   |-TextComment 0x5584a7af4200 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x5584a7af4220 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x5584a7af42a0 <line:53:3>
|   | `-TextComment 0x5584a7af4270 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af42c0 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af4370 <line:53:20, line:54:3>
|   |   |-TextComment 0x5584a7af4320 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x5584a7af4340 <line:54:3> Text=" "
|   |-ParamCommandComment 0x5584a7af4390 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x5584a7af4420 <col:14, col:45>
|   |   `-TextComment 0x5584a7af43f0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x5584a7af4470 <line:56:1>
|     `-TextComment 0x5584a7af4440 <col:1> Text=" "
|-FunctionDecl 0x5584a79fd968 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x5584a79fd7d0 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x5584a79fd848 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x5584a7af4a70 <line:60:3, line:71:1>
|   |-ParagraphComment 0x5584a7af4570 <line:60:3>
|   | `-TextComment 0x5584a7af4540 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af4590 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x5584a7af4610 <line:60:10, line:61:22>
|   |   |-TextComment 0x5584a7af45c0 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x5584a7af45e0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x5584a7af4660 <line:63:3>
|   | `-TextComment 0x5584a7af4630 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af4680 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x5584a7af4700 <line:63:9, line:64:42>
|   |   |-TextComment 0x5584a7af46b0 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x5584a7af46d0 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x5584a7af4750 <line:66:3>
|   | `-TextComment 0x5584a7af4720 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af4770 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af4830 <line:66:20, line:67:3>
|   |   |-TextComment 0x5584a7af47e0 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x5584a7af4800 <line:67:3> Text=" "
|   |-ParamCommandComment 0x5584a7af4850 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x5584a7af48e0 <col:14, col:45>
|   |   `-TextComment 0x5584a7af48b0 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x5584a7af4930 <line:69:3>
|   | `-TextComment 0x5584a7af4900 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af4950 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x5584a7af49b0 <col:11, col:53>
|   |   `-TextComment 0x5584a7af4980 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x5584a7af4a00 <line:71:1>
|     `-TextComment 0x5584a7af49d0 <col:1> Text=" "
|-TypedefDecl 0x5584a7a1af98 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x5584a7a1af00 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x5584a7a1aea0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x5584a7a1ae30 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x5584a79fda80 'uintptr_t' sugar
| |     | |-Typedef 0x5584a7930f60 'uintptr_t'
| |     | `-BuiltinType 0x5584a78ba6b0 'unsigned long'
| |     |-TypedefType 0x5584a79fda80 'uintptr_t' sugar
| |     | |-Typedef 0x5584a7930f60 'uintptr_t'
| |     | `-BuiltinType 0x5584a78ba6b0 'unsigned long'
| |     |-TypedefType 0x5584a79fda80 'uintptr_t' sugar
| |     | |-Typedef 0x5584a7930f60 'uintptr_t'
| |     | `-BuiltinType 0x5584a78ba6b0 'unsigned long'
| |     |-TypedefType 0x5584a79fda80 'uintptr_t' sugar
| |     | |-Typedef 0x5584a7930f60 'uintptr_t'
| |     | `-BuiltinType 0x5584a78ba6b0 'unsigned long'
| |     |-TypedefType 0x5584a79fda80 'uintptr_t' sugar
| |     | |-Typedef 0x5584a7930f60 'uintptr_t'
| |     | `-BuiltinType 0x5584a78ba6b0 'unsigned long'
| |     |-TypedefType 0x5584a79fda80 'uintptr_t' sugar
| |     | |-Typedef 0x5584a7930f60 'uintptr_t'
| |     | `-BuiltinType 0x5584a78ba6b0 'unsigned long'
| |     |-TypedefType 0x5584a79fda80 'uintptr_t' sugar
| |     | |-Typedef 0x5584a7930f60 'uintptr_t'
| |     | `-BuiltinType 0x5584a78ba6b0 'unsigned long'
| |     `-PointerType 0x5584a78bad10 'void *'
| |       `-BuiltinType 0x5584a78ba550 'void'
| `-FullComment 0x5584a7af5700 <line:50:3, line:84:1>
|   |-ParagraphComment 0x5584a7af4b10 <line:50:3>
|   | `-TextComment 0x5584a7af4ae0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5584a7af4b30 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x5584a7af4ba0 <line:51:3>
|   | `-TextComment 0x5584a7af4b70 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af4bc0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7af4c20 <col:10, col:43>
|   |   `-TextComment 0x5584a7af4bf0 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x5584a7af4c90 <line:53:3, line:54:67>
|   | |-TextComment 0x5584a7af4c40 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x5584a7af4c60 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x5584a7af4e70 <line:56:3, line:66:41>
|   | |-TextComment 0x5584a7af4cb0 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x5584a7af4cd0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x5584a7af4cf0 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x5584a7af4d10 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x5584a7af4d30 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x5584a7af4d50 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x5584a7af4d70 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x5584a7af4d90 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x5584a7af4db0 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x5584a7af4dd0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x5584a7af4df0 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x5584a7af4ee0 <line:68:3, line:69:70>
|   | |-TextComment 0x5584a7af4e90 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x5584a7af4eb0 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x5584a7af4f30 <line:71:3, col:80>
|   | `-TextComment 0x5584a7af4f00 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x5584a7af4f80 <line:73:3>
|   | `-TextComment 0x5584a7af4f50 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af4fa0 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af5050 <line:73:15, line:74:3>
|   |   |-TextComment 0x5584a7af5000 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x5584a7af5020 <line:74:3> Text=" "
|   |-ParamCommandComment 0x5584a7af5070 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x5584a7af5120 <line:74:15, line:75:3>
|   |   |-TextComment 0x5584a7af50d0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x5584a7af50f0 <line:75:3> Text=" "
|   |-ParamCommandComment 0x5584a7af5140 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x5584a7af51f0 <line:75:15, line:76:3>
|   |   |-TextComment 0x5584a7af51a0 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x5584a7af51c0 <line:76:3> Text=" "
|   |-ParamCommandComment 0x5584a7af5210 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x5584a7af52c0 <line:76:15, line:77:3>
|   |   |-TextComment 0x5584a7af5270 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x5584a7af5290 <line:77:3> Text=" "
|   |-ParamCommandComment 0x5584a7af52e0 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x5584a7af5390 <line:77:15, line:78:3>
|   |   |-TextComment 0x5584a7af5340 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x5584a7af5360 <line:78:3> Text=" "
|   |-ParamCommandComment 0x5584a7af53b0 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x5584a7af5460 <line:78:15, line:79:3>
|   |   |-TextComment 0x5584a7af5410 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x5584a7af5430 <line:79:3> Text=" "
|   |-ParamCommandComment 0x5584a7af5480 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x5584a7af5560 <line:79:14, line:81:3>
|   |   |-TextComment 0x5584a7af54e0 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x5584a7af5500 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x5584a7af5520 <line:81:3> Text=" "
|   |-BlockCommandComment 0x5584a7af5580 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x5584a7af5600 <line:81:11, line:82:22>
|   |   |-TextComment 0x5584a7af55b0 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x5584a7af55d0 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x5584a7af5650 <line:84:1>
|     `-TextComment 0x5584a7af5620 <col:1> Text=" "
|-FunctionDecl 0x5584a7a1b0c0 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x5584a7a1b2f8 <line:94:1, line:106:1>
| | |-DeclStmt 0x5584a7a1b268 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x5584a7a1b1c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x5584a7a1b250 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x5584a7a1b230 <col:16> 'int' 0
| | `-ReturnStmt 0x5584a7a1b2b8 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x5584a7a1b2a0 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a7a1b280 <col:9> 'bool' lvalue Var 0x5584a7a1b1c8 'ret' 'bool'
| `-AlwaysInlineAttr 0x5584a7a1b160 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5584a7a1b3b0 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x5584a7a1b498 <line:114:1, line:120:1>
| | `-ReturnStmt 0x5584a7a1b488 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x5584a7a1b470 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x5584a7a1b450 <col:16> 'int' 0
| `-FullComment 0x5584a7af58b0 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x5584a7af57a0 <line:109:3, col:53>
|   | `-TextComment 0x5584a7af5770 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x5584a7af57f0 <line:111:3>
|   | `-TextComment 0x5584a7af57c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af5810 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5584a7af5870 <col:11, col:69>
|       `-TextComment 0x5584a7af5840 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-TypedefDecl 0x5584a7a1b4e8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x5584a7a1b4b0 '__builtin_va_list' sugar
|   |-Typedef 0x5584a78fb5c0 '__builtin_va_list'
|   `-ConstantArrayType 0x5584a78bb450 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x5584a78bb290 'struct __va_list_tag'
|       `-Record 0x5584a78bb210 '__va_list_tag'
|-TypedefDecl 0x5584a7a1b578 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x5584a7a1b540 '__gnuc_va_list' sugar
|   |-Typedef 0x5584a7a1b4e8 '__gnuc_va_list'
|   `-TypedefType 0x5584a7a1b4b0 '__builtin_va_list' sugar
|     |-Typedef 0x5584a78fb5c0 '__builtin_va_list'
|     `-ConstantArrayType 0x5584a78bb450 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x5584a78bb290 'struct __va_list_tag'
|         `-Record 0x5584a78bb210 '__va_list_tag'
|-FunctionDecl 0x5584a7a1b738 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x5584a7a1b660 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x5584a7a1b8f8 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x5584a7a1b8d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5584a7a1b8b8 <col:29, col:31> 'const char *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5584a7a1b898 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x5584a7a1b848 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x5584a7a1b660 'fmt' 'const char *'
| `-FormatAttr 0x5584a7a1b7e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x5584a7a1bba0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x5584a7a1b978 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x5584a7a1ba88 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x5584a7a241b0 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x5584a7a240d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5584a7a240c0 <col:29, col:31> 'const char *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5584a7a240a0 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x5584a7a24050 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x5584a7a1b978 'fmt' 'const char *'
| | `-CStyleCastExpr 0x5584a7a24188 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5584a7a24170 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5584a7a24150 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x5584a7a24100 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x5584a7a1ba88 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5584a7a1bc50 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x5584a7a24480 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x5584a7a24238 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x5584a7a242b0 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7a24330 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x5584a7a24538 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x5584a7a248c8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5584a7a24608 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x5584a7a24680 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7a24700 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x5584a7a24778 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5584a7a24988 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x5584a7a24f20 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5584a7a24c58 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x5584a7a24cd8 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x5584a7a24d58 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x5584a7a24dd0 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5584a7a24fe0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-RecordDecl 0x5584a7a255a8 prev 0x5584a79b3e58 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x5584a7a25628 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x5584a7a256d8 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x5584a7a257f0 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x5584a7a25790 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x5584a7a25760 'struct _k_thread_stack_element'
|     `-Record 0x5584a7a6a180 '_k_thread_stack_element'
|-TypedefDecl 0x5584a7a25b08 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x5584a7a25a90 'void (*)(void *, void *, void *)'
|   `-ParenType 0x5584a7a25a30 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x5584a7a259e0 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x5584a78ba550 'void'
|       |-PointerType 0x5584a78bad10 'void *'
|       | `-BuiltinType 0x5584a78ba550 'void'
|       |-PointerType 0x5584a78bad10 'void *'
|       | `-BuiltinType 0x5584a78ba550 'void'
|       `-PointerType 0x5584a78bad10 'void *'
|         `-BuiltinType 0x5584a78ba550 'void'
|-FunctionDecl 0x5584a7a25c50 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x5584a7af5a60 <line:55:3, line:57:24>
|   |-ParagraphComment 0x5584a7af5950 <line:55:3, col:70>
|   | `-TextComment 0x5584a7af5920 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x5584a7af59a0 <line:57:3>
|   | `-TextComment 0x5584a7af5970 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af59c0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x5584a7af5a20 <col:8, col:24>
|       `-TextComment 0x5584a7af59f0 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x5584a7a25fc0 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x5584a7af5de0 <line:120:3, line:130:20>
|   |-ParagraphComment 0x5584a7af5b00 <line:120:3>
|   | `-TextComment 0x5584a7af5ad0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af5b20 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5584a7af5b80 <col:10, col:33>
|   |   `-TextComment 0x5584a7af5b50 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x5584a7af5c20 <line:122:3, line:124:47>
|   | |-TextComment 0x5584a7af5ba0 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x5584a7af5bc0 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x5584a7af5be0 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x5584a7af5cc0 <line:126:3, line:128:35>
|   | |-TextComment 0x5584a7af5c40 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x5584a7af5c60 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x5584a7af5c80 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x5584a7af5d10 <line:130:3>
|   | `-TextComment 0x5584a7af5ce0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af5d30 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5584a7af5d90 <col:8, col:20>
|       `-TextComment 0x5584a7af5d60 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x5584a7a26170 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x5584a7a260a0 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x5584a7af62f0 <line:135:3, line:150:76>
|   |-ParagraphComment 0x5584a7af5e80 <line:135:3>
|   | `-TextComment 0x5584a7af5e50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af5ea0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x5584a7af5f00 <col:10, col:66>
|   |   `-TextComment 0x5584a7af5ed0 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x5584a7af5f50 <line:137:3, col:62>
|   | `-TextComment 0x5584a7af5f20 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x5584a7af6040 <line:139:3, line:143:44>
|   | |-TextComment 0x5584a7af5f70 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x5584a7af5f90 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x5584a7af5fb0 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x5584a7af5fd0 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x5584a7af5ff0 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x5584a7af60b0 <line:145:3, line:146:65>
|   | |-TextComment 0x5584a7af6060 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x5584a7af6080 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x5584a7af6100 <line:148:3>
|   | `-TextComment 0x5584a7af60d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af6120 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x5584a7af6180 <col:8, col:27>
|   |   `-TextComment 0x5584a7af6150 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x5584a7af61d0 <line:150:3>
|   | `-TextComment 0x5584a7af61a0 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7af61f0 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x5584a7af6280 <col:14, col:76>
|       `-TextComment 0x5584a7af6250 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x5584a7a26478 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x5584a7a26410 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x5584a7a263b0 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x5584a7a26370 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x5584a78ba550 'void'
| |     `-PointerType 0x5584a78bad10 'void *'
| |       `-BuiltinType 0x5584a78ba550 'void'
| `-FullComment 0x5584a7af64d0 <line:163:3, line:165:52>
|   |-ParagraphComment 0x5584a7af6390 <line:163:3, col:25>
|   | `-TextComment 0x5584a7af6360 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x5584a7af63e0 <line:165:3>
|   | `-TextComment 0x5584a7af63b0 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7af6400 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x5584a7af6490 <col:18, col:52>
|       `-TextComment 0x5584a7af6460 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x5584a7a29250 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x5584a7a28e30 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x5584a7a28f40 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5584a7a28fc0 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x5584a7a29068 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x5584a7a290e8 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x5584a7af7c80 <line:170:3, line:187:51>
|   |-ParagraphComment 0x5584a7af6570 <line:170:3>
|   | `-TextComment 0x5584a7af6540 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7af6590 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5584a7af65f0 <col:10, col:53>
|   |   `-TextComment 0x5584a7af65c0 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x5584a7af66e0 <line:172:3, line:176:68>
|   | |-TextComment 0x5584a7af6610 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x5584a7af6630 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x5584a7af6650 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x5584a7af6670 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x5584a7af6690 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x5584a7af77d0 <line:178:3, line:181:41>
|   | |-TextComment 0x5584a7af6700 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x5584a7af6720 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x5584a7af6740 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x5584a7af6760 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x5584a7af7820 <line:183:3>
|   | `-TextComment 0x5584a7af77f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af7840 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af78f0 <line:183:18, line:184:3>
|   |   |-TextComment 0x5584a7af78a0 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x5584a7af78c0 <line:184:3> Text=" "
|   |-ParamCommandComment 0x5584a7af7910 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5584a7af79c0 <line:184:16, line:185:3>
|   |   |-TextComment 0x5584a7af7970 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x5584a7af7990 <line:185:3> Text=" "
|   |-ParamCommandComment 0x5584a7af79e0 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x5584a7af7a90 <line:185:13, line:186:3>
|   |   |-TextComment 0x5584a7af7a40 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x5584a7af7a60 <line:186:3> Text=" "
|   |-ParamCommandComment 0x5584a7af7ab0 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x5584a7af7b60 <line:186:13, line:187:3>
|   |   |-TextComment 0x5584a7af7b10 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x5584a7af7b30 <line:187:3> Text=" "
|   `-ParamCommandComment 0x5584a7af7b80 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x5584a7af7c10 <col:14, col:51>
|       `-TextComment 0x5584a7af7be0 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x5584a7a29448 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x5584a7af7e30 <line:200:3, line:202:18>
|   |-ParagraphComment 0x5584a7af7d20 <line:200:3, col:37>
|   | `-TextComment 0x5584a7af7cf0 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x5584a7af7d70 <line:202:3>
|   | `-TextComment 0x5584a7af7d40 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af7d90 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x5584a7af7df0 <col:8, col:18>
|       `-TextComment 0x5584a7af7dc0 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x5584a7a295c0 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x5584a7a29530 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x5584a7af7fe0 <line:207:3, line:209:20>
|   |-ParagraphComment 0x5584a7af7ed0 <line:207:3, col:39>
|   | `-TextComment 0x5584a7af7ea0 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x5584a7af7f20 <line:209:3>
|   | `-TextComment 0x5584a7af7ef0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af7f40 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5584a7af7fa0 <col:8, col:20>
|       `-TextComment 0x5584a7af7f70 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x5584a7a29740 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x5584a7a296b0 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x5584a7af8280 <line:214:3, line:218:39>
|   |-ParagraphComment 0x5584a7af8080 <line:214:3, col:68>
|   | `-TextComment 0x5584a7af8050 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x5584a7af80d0 <line:216:3>
|   | `-TextComment 0x5584a7af80a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af80f0 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af81a0 <line:216:14, line:217:3>
|   |   |-TextComment 0x5584a7af8150 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x5584a7af8170 <line:217:3> Text=" "
|   `-BlockCommandComment 0x5584a7af81c0 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x5584a7af8240 <line:217:11, line:218:39>
|       |-TextComment 0x5584a7af81f0 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x5584a7af8210 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x5584a7a298c0 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x5584a7a29830 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x5584a7af8430 <line:223:3, line:225:21>
|   |-ParagraphComment 0x5584a7af8320 <line:223:3, col:39>
|   | `-TextComment 0x5584a7af82f0 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x5584a7af8370 <line:225:3>
|   | `-TextComment 0x5584a7af8340 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af8390 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x5584a7af83f0 <col:8, col:21>
|       `-TextComment 0x5584a7af83c0 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x5584a7a29a40 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x5584a7a299b0 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x5584a7af85e0 <line:230:3, line:232:20>
|   |-ParagraphComment 0x5584a7af84d0 <line:230:3, col:38>
|   | `-TextComment 0x5584a7af84a0 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x5584a7af8520 <line:232:3>
|   | `-TextComment 0x5584a7af84f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af8540 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5584a7af85a0 <col:8, col:20>
|       `-TextComment 0x5584a7af8570 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x5584a7a29c08 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x5584a7a29b30 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x5584a7af8790 <line:237:3, line:239:24>
|   |-ParagraphComment 0x5584a7af8680 <line:237:3, col:39>
|   | `-TextComment 0x5584a7af8650 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x5584a7af86d0 <line:239:3>
|   | `-TextComment 0x5584a7af86a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af86f0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x5584a7af8750 <col:8, col:24>
|       `-TextComment 0x5584a7af8720 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x5584a7a2a428 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x5584a7a29cf0 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x5584a7a29d70 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x5584a7a2a1b8 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x5584a7a2a238 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x5584a7a2a2b0 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x5584a7af8db0 <line:244:3, line:252:48>
|   |-ParagraphComment 0x5584a7af8830 <line:244:3, col:53>
|   | `-TextComment 0x5584a7af8800 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x5584a7af8880 <line:246:3>
|   | `-TextComment 0x5584a7af8850 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7af88a0 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7af8950 <line:246:14, line:247:3>
|   |   |-TextComment 0x5584a7af8900 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x5584a7af8920 <line:247:3> Text=" "
|   |-ParamCommandComment 0x5584a7af8970 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x5584a7af8a20 <line:247:19, line:248:3>
|   |   |-TextComment 0x5584a7af89d0 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x5584a7af89f0 <line:248:3> Text=" "
|   |-ParamCommandComment 0x5584a7af8a40 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x5584a7af8af0 <line:248:18, line:249:3>
|   |   |-TextComment 0x5584a7af8aa0 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x5584a7af8ac0 <line:249:3> Text=" "
|   |-ParamCommandComment 0x5584a7af8b10 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x5584a7af8bc0 <line:249:20, line:250:3>
|   |   |-TextComment 0x5584a7af8b70 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x5584a7af8b90 <line:250:3> Text=" "
|   |-ParamCommandComment 0x5584a7af8be0 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x5584a7af8c70 <col:16, col:52>
|   |   `-TextComment 0x5584a7af8c40 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x5584a7af8cc0 <line:252:3>
|   | `-TextComment 0x5584a7af8c90 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af8ce0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x5584a7af8d40 <col:11, col:48>
|       `-TextComment 0x5584a7af8d10 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x5584a7a2a858 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x5584a7a2a908 <line:28:1, line:34:1>
|-FunctionDecl 0x5584a7a2ad90 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x5584a7a2a928 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x5584a7a2a9a0 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5584a7a2aa18 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5584a7a2aa90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x5584a7a2ab08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x5584a7a2ab80 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x5584a7a2abf8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x5584a7a30ca8 <line:58:1, line:105:1>
| | |-DeclStmt 0x5584a7a2cf00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x5584a7a2aed0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x5584a7a2cee8 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x5584a7a2cec8 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x5584a7a2b038 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x5584a7a2b020 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x5584a7a2b008 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x5584a7a2af38 <col:19> 'bool' lvalue ParmVar 0x5584a7a2aa90 'const_hz' 'bool'
| | |       | `-ParenExpr 0x5584a7a2afe8 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x5584a7a2afc8 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x5584a7a2af98 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x5584a7a2af58 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x5584a7a2afb0 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x5584a7a2af78 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x5584a7a2cea8 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x5584a7a2ce88 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x5584a7a2ce30 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x5584a7a2ce10 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x5584a7a2cde0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x5584a7a2b058 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x5584a7a2cdf8 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x5584a7a2cdc0 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x5584a7a2ce70 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x5584a7a2ce50 <col:46> 'int' 0
| | |-DeclStmt 0x5584a7a2d210 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x5584a7a2cf28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x5584a7a2d1f8 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x5584a7a2d1d8 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x5584a7a2d090 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x5584a7a2d078 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x5584a7a2d060 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x5584a7a2cf90 <col:19> 'bool' lvalue ParmVar 0x5584a7a2aa90 'const_hz' 'bool'
| | |       | `-ParenExpr 0x5584a7a2d040 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x5584a7a2d020 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x5584a7a2cff0 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x5584a7a2cfb0 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x5584a7a2d008 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x5584a7a2cfd0 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x5584a7a2d1b8 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x5584a7a2d198 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x5584a7a2d140 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x5584a7a2d120 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x5584a7a2d0f0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x5584a7a2d0b0 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x5584a7a2d108 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x5584a7a2d0d0 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x5584a7a2d180 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x5584a7a2d160 <col:46> 'int' 0
| | |-IfStmt 0x5584a7a2d440 <line:64:2, line:66:2>
| | | |-BinaryOperator 0x5584a7a2d298 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x5584a7a2d268 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x5584a7a2d228 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x5584a7a2d280 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5584a7a2d248 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| | | `-CompoundStmt 0x5584a7a2d428 <col:24, line:66:2>
| | |   `-ReturnStmt 0x5584a7a2d418 <line:65:3, col:34>
| | |     `-ConditionalOperator 0x5584a7a2d3e8 <col:10, col:34> 'unsigned long long'
| | |       |-ImplicitCastExpr 0x5584a7a2d3a0 <col:10> 'int' <IntegralCast>
| | |       | `-ImplicitCastExpr 0x5584a7a2d388 <col:10> 'bool' <LValueToRValue>
| | |       |   `-DeclRefExpr 0x5584a7a2d2b8 <col:10> 'bool' lvalue ParmVar 0x5584a7a2ab08 'result32' 'bool'
| | |       |-ImplicitCastExpr 0x5584a7a2d3d0 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | |       | `-ParenExpr 0x5584a7a2d348 <col:21, col:30> 'u32_t':'unsigned int'
| | |       |   `-CStyleCastExpr 0x5584a7a2d320 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | |       |     `-ImplicitCastExpr 0x5584a7a2d308 <col:29> 'u64_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
| | |       |       `-DeclRefExpr 0x5584a7a2d2d8 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a2a928 't' 'u64_t':'unsigned long long'
| | |       `-ImplicitCastExpr 0x5584a7a2d3b8 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | |         `-DeclRefExpr 0x5584a7a2d368 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a2a928 't' 'u64_t':'unsigned long long'
| | |-DeclStmt 0x5584a7a2d508 <line:68:2, col:15>
| | | `-VarDecl 0x5584a7a2d468 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x5584a7a2d4f0 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x5584a7a2d4d0 <col:14> 'int' 0
| | |-IfStmt 0x5584a7a2da38 <line:70:2, line:78:2>
| | | |-UnaryOperator 0x5584a7a2d558 <line:70:6, col:7> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x5584a7a2d540 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5584a7a2d520 <col:7> 'bool' lvalue Var 0x5584a7a2aed0 'mul_ratio' 'bool'
| | | `-CompoundStmt 0x5584a7a2da18 <col:18, line:78:2>
| | |   |-DeclStmt 0x5584a7a2d750 <line:71:3, col:59>
| | |   | `-VarDecl 0x5584a7a2d580 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | |   |   `-ConditionalOperator 0x5584a7a2d720 <col:20, col:52> 'unsigned int'
| | |   |     |-ImplicitCastExpr 0x5584a7a2d6f0 <col:20> 'int' <IntegralCast>
| | |   |     | `-ImplicitCastExpr 0x5584a7a2d6d8 <col:20> 'bool' <LValueToRValue>
| | |   |     |   `-DeclRefExpr 0x5584a7a2d5e8 <col:20> 'bool' lvalue Var 0x5584a7a2cf28 'div_ratio' 'bool'
| | |   |     |-ParenExpr 0x5584a7a2d698 <col:32, col:48> 'unsigned int'
| | |   |     | `-BinaryOperator 0x5584a7a2d678 <col:33, col:43> 'unsigned int' '/'
| | |   |     |   |-ImplicitCastExpr 0x5584a7a2d648 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | |   |     |   | `-DeclRefExpr 0x5584a7a2d608 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| | |   |     |   `-ImplicitCastExpr 0x5584a7a2d660 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | |   |     |     `-DeclRefExpr 0x5584a7a2d628 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| | |   |     `-ImplicitCastExpr 0x5584a7a2d708 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x5584a7a2d6b8 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| | |   `-IfStmt 0x5584a7a2d9f0 <line:73:3, line:77:3> has_else
| | |     |-ImplicitCastExpr 0x5584a7a2d788 <line:73:7> 'bool' <LValueToRValue>
| | |     | `-DeclRefExpr 0x5584a7a2d768 <col:7> 'bool' lvalue ParmVar 0x5584a7a2ab80 'round_up' 'bool'
| | |     |-CompoundStmt 0x5584a7a2d888 <col:17, line:75:3>
| | |     | `-BinaryOperator 0x5584a7a2d868 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | |     |   |-DeclRefExpr 0x5584a7a2d7a0 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x5584a7a2d468 'off' 'u64_t':'unsigned long long'
| | |     |   `-ImplicitCastExpr 0x5584a7a2d850 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | |     |     `-BinaryOperator 0x5584a7a2d830 <col:10, col:21> 'unsigned int' '-'
| | |     |       |-ImplicitCastExpr 0x5584a7a2d800 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | |     |       | `-DeclRefExpr 0x5584a7a2d7c0 <col:10> 'u32_t':'unsigned int' lvalue Var 0x5584a7a2d580 'rdivisor' 'u32_t':'unsigned int'
| | |     |       `-ImplicitCastExpr 0x5584a7a2d818 <col:21> 'unsigned int' <IntegralCast>
| | |     |         `-IntegerLiteral 0x5584a7a2d7e0 <col:21> 'int' 1
| | |     `-IfStmt 0x5584a7a2d9d8 <line:75:10, line:77:3>
| | |       |-ImplicitCastExpr 0x5584a7a2d8c0 <line:75:14> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0x5584a7a2d8a0 <col:14> 'bool' lvalue ParmVar 0x5584a7a2abf8 'round_off' 'bool'
| | |       `-CompoundStmt 0x5584a7a2d9c0 <col:25, line:77:3>
| | |         `-BinaryOperator 0x5584a7a2d9a0 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | |           |-DeclRefExpr 0x5584a7a2d8d8 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x5584a7a2d468 'off' 'u64_t':'unsigned long long'
| | |           `-ImplicitCastExpr 0x5584a7a2d988 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | |             `-BinaryOperator 0x5584a7a2d968 <col:10, col:21> 'unsigned int' '/'
| | |               |-ImplicitCastExpr 0x5584a7a2d938 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | |               | `-DeclRefExpr 0x5584a7a2d8f8 <col:10> 'u32_t':'unsigned int' lvalue Var 0x5584a7a2d580 'rdivisor' 'u32_t':'unsigned int'
| | |               `-ImplicitCastExpr 0x5584a7a2d950 <col:21> 'unsigned int' <IntegralCast>
| | |                 `-IntegerLiteral 0x5584a7a2d918 <col:21> 'int' 2
| | `-IfStmt 0x5584a7a30c58 <line:85:2, line:104:2> has_else
| |   |-ImplicitCastExpr 0x5584a7a2da70 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x5584a7a2da50 <col:6> 'bool' lvalue Var 0x5584a7a2cf28 'div_ratio' 'bool'
| |   |-CompoundStmt 0x5584a7a30400 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x5584a7a2dae0 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x5584a7a2da88 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a2a928 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x5584a7a2dac8 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x5584a7a2daa8 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x5584a7a2d468 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x5584a7a303d8 <line:87:3, line:91:3> has_else
| |   |   |-ImplicitCastExpr 0x5584a7a2db30 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x5584a7a2db10 <col:7> 'bool' lvalue ParmVar 0x5584a7a2ab08 'result32' 'bool'
| |   |   |-CompoundStmt 0x5584a7a2dcd0 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x5584a7a2dcc0 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x5584a7a2dca8 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x5584a7a2dc88 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x5584a7a2dbb8 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x5584a7a2db90 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x5584a7a2db78 <col:19> 'u64_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
| |   |   |       |     `-DeclRefExpr 0x5584a7a2db48 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a2a928 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x5584a7a2dc68 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x5584a7a2dc48 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x5584a7a2dc18 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x5584a7a2dbd8 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x5584a7a2dc30 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x5584a7a2dbf8 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x5584a7a303c0 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x5584a7a303b0 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x5584a7a30390 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x5584a7a30360 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x5584a7a2dce8 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a2a928 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x5584a7a30378 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x5584a7a2dd98 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x5584a7a2dd78 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x5584a7a2dd48 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x5584a7a2dd08 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x5584a7a2dd60 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x5584a7a2dd28 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x5584a7a30c30 <line:92:9, line:104:2> has_else
| |     |-ImplicitCastExpr 0x5584a7a30440 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a30420 <col:13> 'bool' lvalue Var 0x5584a7a2aed0 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x5584a7a307a0 <col:24, line:98:2>
| |     | `-IfStmt 0x5584a7a30778 <line:93:3, line:97:3> has_else
| |     |   |-ImplicitCastExpr 0x5584a7a30478 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5584a7a30458 <col:7> 'bool' lvalue ParmVar 0x5584a7a2ab08 'result32' 'bool'
| |     |   |-CompoundStmt 0x5584a7a30618 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x5584a7a30608 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x5584a7a305f0 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x5584a7a305d0 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x5584a7a30500 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x5584a7a304d8 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x5584a7a304c0 <col:19> 'u64_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
| |     |   |       |     `-DeclRefExpr 0x5584a7a30490 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a2a928 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x5584a7a305b0 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x5584a7a30590 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x5584a7a30560 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x5584a7a30520 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x5584a7a30578 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x5584a7a30540 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x5584a7a30760 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x5584a7a30750 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x5584a7a30730 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x5584a7a30700 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x5584a7a30630 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a2a928 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x5584a7a30718 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x5584a7a306e0 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x5584a7a306c0 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x5584a7a30690 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x5584a7a30650 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x5584a7a306a8 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x5584a7a30670 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x5584a7a30c18 <line:98:9, line:104:2>
| |       `-IfStmt 0x5584a7a30bf0 <line:99:3, line:103:3> has_else
| |         |-ImplicitCastExpr 0x5584a7a307d8 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x5584a7a307b8 <col:7> 'bool' lvalue ParmVar 0x5584a7a2ab08 'result32' 'bool'
| |         |-CompoundStmt 0x5584a7a30a20 <col:17, line:101:3>
| |         | `-ReturnStmt 0x5584a7a30a10 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x5584a7a309f8 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x5584a7a309d0 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x5584a7a309b0 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x5584a7a30960 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x5584a7a308f0 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x5584a7a308d0 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x5584a7a30878 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x5584a7a30830 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x5584a7a307f0 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a2a928 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x5584a7a30860 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x5584a7a30848 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x5584a7a30810 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x5584a7a308b8 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x5584a7a30898 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x5584a7a2d468 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x5584a7a30948 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x5584a7a30930 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x5584a7a30910 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x5584a7a30bd8 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x5584a7a30bc8 <line:102:4, col:31>
| |             `-BinaryOperator 0x5584a7a30ba8 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x5584a7a30b38 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x5584a7a30b18 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x5584a7a30ac0 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x5584a7a30a78 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x5584a7a30a38 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a2a928 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x5584a7a30aa8 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x5584a7a30a90 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x5584a7a30a58 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2aa18 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x5584a7a30b00 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x5584a7a30ae0 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x5584a7a2d468 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x5584a7a30b90 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x5584a7a30b78 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x5584a7a30b58 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a2a9a0 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x5584a7a2ae68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5584a7a30e00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a30cf8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a31238 <line:191:1, line:194:1>
| | `-ReturnStmt 0x5584a7a311f8 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x5584a7a311e0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a310c8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a310b0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a30ea8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a7a31138 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a7a31120 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a7a30ec8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a30cf8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a7a31150 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a7a30ee8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5584a7a31168 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a7a30f78 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a7a30f60 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a7a30f08 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a7a31180 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a7a30fd0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a7a30fb8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a7a30f98 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a7a31198 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a30ff0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a7a311b0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a31010 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a7a311c8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a7a31030 <col:16> 'int' 0
| `-FullComment 0x5584a7af9090 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x5584a7af8e50 <line:182:4>
|   | `-TextComment 0x5584a7af8e20 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7af8e70 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7af8ed0 <col:11, col:50>
|   |   `-TextComment 0x5584a7af8ea0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7af8f70 <line:184:3, line:186:44>
|   | |-TextComment 0x5584a7af8ef0 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5584a7af8f10 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7af8f30 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7af8fc0 <line:188:3>
|   | `-TextComment 0x5584a7af8f90 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af8fe0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7af9040 <col:11, col:35>
|       `-TextComment 0x5584a7af9010 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a323a8 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a31260 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a32718 <line:205:1, line:208:1>
| | `-ReturnStmt 0x5584a7a326d8 <line:207:2, col:66>
| |   `-CallExpr 0x5584a7a325d8 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a325c0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a32450 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a7a32630 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a32470 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a31260 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a32648 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a7a32490 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5584a7a32660 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a7a324e8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a7a324d0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a7a324b0 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a7a32678 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a7a32540 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a7a32528 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a7a32508 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a32690 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a32560 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a326a8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a32580 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a7a326c0 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a7a325a0 <col:16> 'int' 0
| `-FullComment 0x5584a7af9370 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x5584a7af9130 <line:196:4>
|   | `-TextComment 0x5584a7af9100 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7af9150 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7af91b0 <col:11, col:50>
|   |   `-TextComment 0x5584a7af9180 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7af9250 <line:198:3, line:200:44>
|   | |-TextComment 0x5584a7af91d0 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5584a7af91f0 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7af9210 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7af92a0 <line:202:3>
|   | `-TextComment 0x5584a7af9270 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af92c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7af9320 <col:11, col:35>
|       `-TextComment 0x5584a7af92f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a327d0 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a32740 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a32b68 <line:219:1, line:222:1>
| | `-ReturnStmt 0x5584a7a32b30 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x5584a7a32b18 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a32a00 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a329e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a32878 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a7a32a70 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a7a32a58 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a7a32898 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a32740 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a7a32a88 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a7a328b8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5584a7a32aa0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a7a32910 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a7a328f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a7a328d8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a7a32ab8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a7a32968 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a7a32950 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a7a32930 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a7a32ad0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a32988 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a7a32ae8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a329a8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a7a32b00 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a7a329c8 <col:16> 'int' 1
| `-FullComment 0x5584a7af9650 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x5584a7af9410 <line:210:4>
|   | `-TextComment 0x5584a7af93e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7af9430 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7af9490 <col:11, col:50>
|   |   `-TextComment 0x5584a7af9460 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7af9530 <line:212:3, line:214:37>
|   | |-TextComment 0x5584a7af94b0 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5584a7af94d0 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7af94f0 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7af9580 <line:216:3>
|   | `-TextComment 0x5584a7af9550 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af95a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7af9600 <col:11, col:35>
|       `-TextComment 0x5584a7af95d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a32c20 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a32b90 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a32f88 <line:233:1, line:236:1>
| | `-ReturnStmt 0x5584a7a32f50 <line:235:2, col:65>
| |   `-CallExpr 0x5584a7a32e50 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a32e38 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a32cc8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a7a32ea8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a32ce8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a32b90 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a32ec0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a7a32d08 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5584a7a32ed8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a7a32d60 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a7a32d48 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a7a32d28 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a7a32ef0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a7a32db8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a7a32da0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a7a32d80 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a32f08 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a32dd8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a32f20 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a32df8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a7a32f38 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a7a32e18 <col:16> 'int' 1
| `-FullComment 0x5584a7af9940 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x5584a7af96f0 <line:224:4>
|   | `-TextComment 0x5584a7af96c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7af9710 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7af9770 <col:11, col:50>
|   |   `-TextComment 0x5584a7af9740 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7af9820 <line:226:3, line:228:37>
|   | |-TextComment 0x5584a7af9790 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5584a7af97b0 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7af97e0 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7af9870 <line:230:3>
|   | `-TextComment 0x5584a7af9840 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af9890 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7af98f0 <col:11, col:35>
|       `-TextComment 0x5584a7af98c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a33040 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a32fb0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a333f8 <line:247:1, line:250:1>
| | `-ReturnStmt 0x5584a7a333c0 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x5584a7a333a8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a33270 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a33258 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a330e8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a7a332e0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a7a332c8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a7a33108 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a32fb0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a7a332f8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a7a33128 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5584a7a33310 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a7a33180 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a7a33168 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a7a33148 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a7a33328 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a7a331d8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a7a331c0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a7a331a0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a7a33340 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a331f8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a7a33358 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a33218 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5584a7a33390 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a7a33238 <col:16> 'int' 0
| `-FullComment 0x5584a7af9c20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x5584a7af99e0 <line:238:4>
|   | `-TextComment 0x5584a7af99b0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7af9a00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7af9a60 <col:11, col:50>
|   |   `-TextComment 0x5584a7af9a30 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7af9b00 <line:240:3, line:242:45>
|   | |-TextComment 0x5584a7af9a80 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5584a7af9aa0 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7af9ac0 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7af9b50 <line:244:3>
|   | `-TextComment 0x5584a7af9b20 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af9b70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7af9bd0 <col:11, col:35>
|       `-TextComment 0x5584a7af9ba0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a334b0 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a33420 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a33818 <line:261:1, line:264:1>
| | `-ReturnStmt 0x5584a7a337e0 <line:263:2, col:65>
| |   `-CallExpr 0x5584a7a336e0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a336c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a33558 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a7a33738 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a33578 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a33420 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a33750 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a7a33598 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5584a7a33768 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a7a335f0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a7a335d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a7a335b8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a7a33780 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a7a33648 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a7a33630 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a7a33610 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a33798 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a33668 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a337b0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a33688 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5584a7a337c8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a7a336a8 <col:16> 'int' 0
| `-FullComment 0x5584a7af9f00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x5584a7af9cc0 <line:252:4>
|   | `-TextComment 0x5584a7af9c90 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7af9ce0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7af9d40 <col:11, col:50>
|   |   `-TextComment 0x5584a7af9d10 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7af9de0 <line:254:3, line:256:45>
|   | |-TextComment 0x5584a7af9d60 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5584a7af9d80 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7af9da0 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7af9e30 <line:258:3>
|   | `-TextComment 0x5584a7af9e00 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7af9e50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7af9eb0 <col:11, col:35>
|       `-TextComment 0x5584a7af9e80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a338d0 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a33840 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a33b08 <line:275:1, line:278:1>
| `-FullComment 0x5584a7afa1e0 <line:266:4, line:272:35>
|   |-ParagraphComment 0x5584a7af9fa0 <line:266:4>
|   | `-TextComment 0x5584a7af9f70 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7af9fc0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afa020 <col:11, col:40>
|   |   `-TextComment 0x5584a7af9ff0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5584a7afa0c0 <line:268:3, line:270:44>
|   | |-TextComment 0x5584a7afa040 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5584a7afa060 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afa080 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afa110 <line:272:3>
|   | `-TextComment 0x5584a7afa0e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afa130 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afa190 <col:11, col:35>
|       `-TextComment 0x5584a7afa160 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a33bb8 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a33b28 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a33de8 <line:289:1, line:292:1>
| `-FullComment 0x5584a7afa4c0 <line:280:4, line:286:35>
|   |-ParagraphComment 0x5584a7afa280 <line:280:4>
|   | `-TextComment 0x5584a7afa250 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afa2a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afa300 <col:11, col:40>
|   |   `-TextComment 0x5584a7afa2d0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5584a7afa3a0 <line:282:3, line:284:44>
|   | |-TextComment 0x5584a7afa320 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5584a7afa340 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afa360 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afa3f0 <line:286:3>
|   | `-TextComment 0x5584a7afa3c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afa410 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afa470 <col:11, col:35>
|       `-TextComment 0x5584a7afa440 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a33e98 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a33e08 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a340c8 <line:303:1, line:306:1>
| `-FullComment 0x5584a7afa7a0 <line:294:4, line:300:35>
|   |-ParagraphComment 0x5584a7afa560 <line:294:4>
|   | `-TextComment 0x5584a7afa530 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afa580 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afa5e0 <col:11, col:40>
|   |   `-TextComment 0x5584a7afa5b0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5584a7afa680 <line:296:3, line:298:37>
|   | |-TextComment 0x5584a7afa600 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5584a7afa620 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afa640 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afa6d0 <line:300:3>
|   | `-TextComment 0x5584a7afa6a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afa6f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afa750 <col:11, col:35>
|       `-TextComment 0x5584a7afa720 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a34178 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a340e8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a34e48 <line:317:1, line:320:1>
| `-FullComment 0x5584a7afaa80 <line:308:4, line:314:35>
|   |-ParagraphComment 0x5584a7afa840 <line:308:4>
|   | `-TextComment 0x5584a7afa810 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afa860 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afa8c0 <col:11, col:40>
|   |   `-TextComment 0x5584a7afa890 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5584a7afa960 <line:310:3, line:312:37>
|   | |-TextComment 0x5584a7afa8e0 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5584a7afa900 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afa920 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afa9b0 <line:314:3>
|   | `-TextComment 0x5584a7afa980 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afa9d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afaa30 <col:11, col:35>
|       `-TextComment 0x5584a7afaa00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a34ef8 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a34e68 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a35128 <line:331:1, line:334:1>
| `-FullComment 0x5584a7afad60 <line:322:4, line:328:35>
|   |-ParagraphComment 0x5584a7afab20 <line:322:4>
|   | `-TextComment 0x5584a7afaaf0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afab40 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afaba0 <col:11, col:40>
|   |   `-TextComment 0x5584a7afab70 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5584a7afac40 <line:324:3, line:326:45>
|   | |-TextComment 0x5584a7afabc0 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5584a7afabe0 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afac00 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7afac90 <line:328:3>
|   | `-TextComment 0x5584a7afac60 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afacb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afad10 <col:11, col:35>
|       `-TextComment 0x5584a7aface0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a351d8 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a35148 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a35408 <line:345:1, line:348:1>
| `-FullComment 0x5584a7afb040 <line:336:4, line:342:35>
|   |-ParagraphComment 0x5584a7afae00 <line:336:4>
|   | `-TextComment 0x5584a7afadd0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afae20 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afae80 <col:11, col:40>
|   |   `-TextComment 0x5584a7afae50 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5584a7afaf20 <line:338:3, line:340:45>
|   | |-TextComment 0x5584a7afaea0 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5584a7afaec0 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afaee0 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7afaf70 <line:342:3>
|   | `-TextComment 0x5584a7afaf40 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afaf90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afaff0 <col:11, col:35>
|       `-TextComment 0x5584a7afafc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a354b8 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a35428 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a35858 <line:359:1, line:362:1>
| | `-ReturnStmt 0x5584a7a35818 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x5584a7a35800 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a356e8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a356d0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a35560 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a7a35758 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a7a35740 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a7a35580 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a35428 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a7a35770 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a7a355a0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5584a7a35788 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a7a355f8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a7a355e0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a7a355c0 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a7a357a0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a7a35650 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a7a35638 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a7a35618 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a7a357b8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a35670 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a7a357d0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a35690 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a7a357e8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a7a356b0 <col:16> 'int' 0
| `-FullComment 0x5584a7afb320 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x5584a7afb0e0 <line:350:4>
|   | `-TextComment 0x5584a7afb0b0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afb100 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7afb160 <col:11, col:50>
|   |   `-TextComment 0x5584a7afb130 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afb200 <line:352:3, line:354:44>
|   | |-TextComment 0x5584a7afb180 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5584a7afb1a0 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afb1c0 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afb250 <line:356:3>
|   | `-TextComment 0x5584a7afb220 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afb270 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afb2d0 <col:11, col:35>
|       `-TextComment 0x5584a7afb2a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a35910 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a35880 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a35c78 <line:373:1, line:376:1>
| | `-ReturnStmt 0x5584a7a35c40 <line:375:2, col:66>
| |   `-CallExpr 0x5584a7a35b40 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a35b28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a359b8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a7a35b98 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a359d8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a35880 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a35bb0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a7a359f8 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5584a7a35bc8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a7a35a50 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a7a35a38 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a7a35a18 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a7a35be0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a7a35aa8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a7a35a90 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a7a35a70 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a35bf8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a35ac8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a35c10 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a35ae8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a7a35c28 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a7a35b08 <col:16> 'int' 0
| `-FullComment 0x5584a7afb600 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x5584a7afb3c0 <line:364:4>
|   | `-TextComment 0x5584a7afb390 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afb3e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7afb440 <col:11, col:50>
|   |   `-TextComment 0x5584a7afb410 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afb4e0 <line:366:3, line:368:44>
|   | |-TextComment 0x5584a7afb460 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5584a7afb480 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afb4a0 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afb530 <line:370:3>
|   | `-TextComment 0x5584a7afb500 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afb550 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afb5b0 <col:11, col:35>
|       `-TextComment 0x5584a7afb580 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a35d30 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a35ca0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a360e8 <line:387:1, line:390:1>
| | `-ReturnStmt 0x5584a7a360a8 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x5584a7a36090 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a35f78 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a35f60 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a35dd8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a7a35fe8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a7a35fd0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a7a35df8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a35ca0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a7a36000 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a7a35e30 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5584a7a36018 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a7a35e88 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a7a35e70 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a7a35e50 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a7a36030 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a7a35ee0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a7a35ec8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a7a35ea8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a7a36048 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a35f00 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a7a36060 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a35f20 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a7a36078 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a7a35f40 <col:16> 'int' 1
| `-FullComment 0x5584a7afb8f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x5584a7afb6a0 <line:378:4>
|   | `-TextComment 0x5584a7afb670 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afb6c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7afb720 <col:11, col:50>
|   |   `-TextComment 0x5584a7afb6f0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afb7c0 <line:380:3, line:382:37>
|   | |-TextComment 0x5584a7afb740 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5584a7afb760 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afb780 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afb820 <line:384:3>
|   | `-TextComment 0x5584a7afb7f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afb840 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afb8a0 <col:11, col:35>
|       `-TextComment 0x5584a7afb870 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a361a0 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a36110 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a36508 <line:401:1, line:404:1>
| | `-ReturnStmt 0x5584a7a364d0 <line:403:2, col:65>
| |   `-CallExpr 0x5584a7a363d0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a363b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a36248 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a7a36428 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a36268 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a36110 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a36440 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a7a36288 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5584a7a36458 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a7a362e0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a7a362c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a7a362a8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a7a36470 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a7a36338 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a7a36320 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a7a36300 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a36488 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a36358 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a364a0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a36378 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a7a364b8 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a7a36398 <col:16> 'int' 1
| `-FullComment 0x5584a7afbbd0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x5584a7afb990 <line:392:4>
|   | `-TextComment 0x5584a7afb960 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afb9b0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7afba10 <col:11, col:50>
|   |   `-TextComment 0x5584a7afb9e0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afbab0 <line:394:3, line:396:37>
|   | |-TextComment 0x5584a7afba30 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5584a7afba50 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afba70 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afbb00 <line:398:3>
|   | `-TextComment 0x5584a7afbad0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afbb20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afbb80 <col:11, col:35>
|       `-TextComment 0x5584a7afbb50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a365c0 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a36530 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a36958 <line:415:1, line:418:1>
| | `-ReturnStmt 0x5584a7a36920 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x5584a7a36908 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a367f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a367d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a36668 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a7a36860 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a7a36848 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a7a36688 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a36530 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a7a36878 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a7a366a8 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5584a7a36890 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a7a36700 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a7a366e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a7a366c8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a7a368a8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a7a36758 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a7a36740 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a7a36720 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a7a368c0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a36778 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a7a368d8 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a36798 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5584a7a368f0 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a7a367b8 <col:16> 'int' 0
| `-FullComment 0x5584a7afbeb0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x5584a7afbc70 <line:406:4>
|   | `-TextComment 0x5584a7afbc40 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afbc90 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7afbcf0 <col:11, col:50>
|   |   `-TextComment 0x5584a7afbcc0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afbd90 <line:408:3, line:410:45>
|   | |-TextComment 0x5584a7afbd10 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5584a7afbd30 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afbd50 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7afbde0 <line:412:3>
|   | `-TextComment 0x5584a7afbdb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afbe00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afbe60 <col:11, col:35>
|       `-TextComment 0x5584a7afbe30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a36a10 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a36980 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a36d78 <line:429:1, line:432:1>
| | `-ReturnStmt 0x5584a7a36d40 <line:431:2, col:65>
| |   `-CallExpr 0x5584a7a36c40 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a36c28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a36ab8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a7a36c98 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a36ad8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a36980 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a36cb0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a7a36af8 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5584a7a36cc8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a7a36b50 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a7a36b38 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a7a36b18 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a7a36ce0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a7a36ba8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a7a36b90 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a7a36b70 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a36cf8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a36bc8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a36d10 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a36be8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5584a7a36d28 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a7a36c08 <col:16> 'int' 0
| `-FullComment 0x5584a7afc190 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x5584a7afbf50 <line:420:4>
|   | `-TextComment 0x5584a7afbf20 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afbf70 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7afbfd0 <col:11, col:50>
|   |   `-TextComment 0x5584a7afbfa0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afc070 <line:422:3, line:424:45>
|   | |-TextComment 0x5584a7afbff0 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5584a7afc010 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afc030 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7afc0c0 <line:426:3>
|   | `-TextComment 0x5584a7afc090 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afc0e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afc140 <col:11, col:35>
|       `-TextComment 0x5584a7afc110 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a36e40 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a36da0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a37078 <line:443:1, line:446:1>
| `-FullComment 0x5584a7afc470 <line:434:4, line:440:35>
|   |-ParagraphComment 0x5584a7afc230 <line:434:4>
|   | `-TextComment 0x5584a7afc200 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afc250 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afc2b0 <col:11, col:40>
|   |   `-TextComment 0x5584a7afc280 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5584a7afc350 <line:436:3, line:438:44>
|   | |-TextComment 0x5584a7afc2d0 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5584a7afc2f0 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afc310 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afc3a0 <line:440:3>
|   | `-TextComment 0x5584a7afc370 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afc3c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afc420 <col:11, col:35>
|       `-TextComment 0x5584a7afc3f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a37128 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a37098 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a37358 <line:457:1, line:460:1>
| `-FullComment 0x5584a7afc750 <line:448:4, line:454:35>
|   |-ParagraphComment 0x5584a7afc510 <line:448:4>
|   | `-TextComment 0x5584a7afc4e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afc530 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afc590 <col:11, col:40>
|   |   `-TextComment 0x5584a7afc560 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5584a7afc630 <line:450:3, line:452:44>
|   | |-TextComment 0x5584a7afc5b0 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5584a7afc5d0 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afc5f0 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afc680 <line:454:3>
|   | `-TextComment 0x5584a7afc650 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afc6a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afc700 <col:11, col:35>
|       `-TextComment 0x5584a7afc6d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a37408 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a37378 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a37638 <line:471:1, line:474:1>
| `-FullComment 0x5584a7afca30 <line:462:4, line:468:35>
|   |-ParagraphComment 0x5584a7afc7f0 <line:462:4>
|   | `-TextComment 0x5584a7afc7c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afc810 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afc870 <col:11, col:40>
|   |   `-TextComment 0x5584a7afc840 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5584a7afc910 <line:464:3, line:466:37>
|   | |-TextComment 0x5584a7afc890 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5584a7afc8b0 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afc8d0 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afc960 <line:468:3>
|   | `-TextComment 0x5584a7afc930 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afc980 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afc9e0 <col:11, col:35>
|       `-TextComment 0x5584a7afc9b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a376e8 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a37658 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a37918 <line:485:1, line:488:1>
| `-FullComment 0x5584a7afcd10 <line:476:4, line:482:35>
|   |-ParagraphComment 0x5584a7afcad0 <line:476:4>
|   | `-TextComment 0x5584a7afcaa0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afcaf0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afcb50 <col:11, col:40>
|   |   `-TextComment 0x5584a7afcb20 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5584a7afcbf0 <line:478:3, line:480:37>
|   | |-TextComment 0x5584a7afcb70 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5584a7afcb90 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afcbb0 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afcc40 <line:482:3>
|   | `-TextComment 0x5584a7afcc10 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afcc60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afccc0 <col:11, col:35>
|       `-TextComment 0x5584a7afcc90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a379c8 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a37938 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a37bf8 <line:499:1, line:502:1>
| `-FullComment 0x5584a7afcff0 <line:490:4, line:496:35>
|   |-ParagraphComment 0x5584a7afcdb0 <line:490:4>
|   | `-TextComment 0x5584a7afcd80 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afcdd0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afce30 <col:11, col:40>
|   |   `-TextComment 0x5584a7afce00 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5584a7afced0 <line:492:3, line:494:45>
|   | |-TextComment 0x5584a7afce50 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5584a7afce70 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afce90 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7afcf20 <line:496:3>
|   | `-TextComment 0x5584a7afcef0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afcf40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afcfa0 <col:11, col:35>
|       `-TextComment 0x5584a7afcf70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a37ca8 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a37c18 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a382a8 <line:513:1, line:516:1>
| `-FullComment 0x5584a7afd2d0 <line:504:4, line:510:35>
|   |-ParagraphComment 0x5584a7afd090 <line:504:4>
|   | `-TextComment 0x5584a7afd060 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afd0b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7afd110 <col:11, col:40>
|   |   `-TextComment 0x5584a7afd0e0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5584a7afd1b0 <line:506:3, line:508:45>
|   | |-TextComment 0x5584a7afd130 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5584a7afd150 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afd170 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7afd200 <line:510:3>
|   | `-TextComment 0x5584a7afd1d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afd220 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afd280 <col:11, col:35>
|       `-TextComment 0x5584a7afd250 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a38358 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a382c8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a386f8 <line:527:1, line:530:1>
| | `-ReturnStmt 0x5584a7a386b8 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x5584a7a386a0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a38588 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a38570 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a38400 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a7a385f8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a7a385e0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a7a38420 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a382c8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a7a38610 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a7a38440 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5584a7a38628 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a7a38498 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a7a38480 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a7a38460 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a7a38640 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a7a384f0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a7a384d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a7a384b8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a7a38658 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a38510 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a7a38670 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a38530 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a7a38688 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a7a38550 <col:16> 'int' 0
| `-FullComment 0x5584a7afd5b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x5584a7afd370 <line:518:4>
|   | `-TextComment 0x5584a7afd340 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afd390 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7afd3f0 <col:11, col:49>
|   |   `-TextComment 0x5584a7afd3c0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afd490 <line:520:3, line:522:44>
|   | |-TextComment 0x5584a7afd410 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5584a7afd430 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afd450 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afd4e0 <line:524:3>
|   | `-TextComment 0x5584a7afd4b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afd500 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afd560 <col:11, col:35>
|       `-TextComment 0x5584a7afd530 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a387b0 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a38720 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a38b18 <line:541:1, line:544:1>
| | `-ReturnStmt 0x5584a7a38ae0 <line:543:2, col:66>
| |   `-CallExpr 0x5584a7a389e0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a389c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a38858 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a7a38a38 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a38878 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a38720 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a38a50 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a7a38898 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5584a7a38a68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a7a388f0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a7a388d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a7a388b8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a7a38a80 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a7a38948 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a7a38930 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a7a38910 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a38a98 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a38968 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a38ab0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a38988 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a7a38ac8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a7a389a8 <col:16> 'int' 0
| `-FullComment 0x5584a7afd8b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x5584a7afd650 <line:532:4>
|   | `-TextComment 0x5584a7afd620 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afd670 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7afd6d0 <col:11, col:49>
|   |   `-TextComment 0x5584a7afd6a0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afd770 <line:534:3, line:536:44>
|   | |-TextComment 0x5584a7afd6f0 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5584a7afd710 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afd730 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afd7c0 <line:538:3>
|   | `-TextComment 0x5584a7afd790 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afd800 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afd860 <col:11, col:35>
|       `-TextComment 0x5584a7afd830 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a38bd0 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a38b40 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a38f68 <line:555:1, line:558:1>
| | `-ReturnStmt 0x5584a7a38f30 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x5584a7a38f18 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a38e00 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a38de8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a38c78 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a7a38e70 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a7a38e58 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a7a38c98 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a38b40 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a7a38e88 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a7a38cb8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5584a7a38ea0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a7a38d10 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a7a38cf8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a7a38cd8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a7a38eb8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a7a38d68 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a7a38d50 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a7a38d30 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a7a38ed0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a38d88 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a7a38ee8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a38da8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a7a38f00 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a7a38dc8 <col:16> 'int' 1
| `-FullComment 0x5584a7afdb90 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x5584a7afd950 <line:546:4>
|   | `-TextComment 0x5584a7afd920 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afd970 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7afd9d0 <col:11, col:49>
|   |   `-TextComment 0x5584a7afd9a0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afda70 <line:548:3, line:550:37>
|   | |-TextComment 0x5584a7afd9f0 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5584a7afda10 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afda30 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afdac0 <line:552:3>
|   | `-TextComment 0x5584a7afda90 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afdae0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afdb40 <col:11, col:35>
|       `-TextComment 0x5584a7afdb10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a39020 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a38f90 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a393b8 <line:569:1, line:572:1>
| | `-ReturnStmt 0x5584a7a39378 <line:571:2, col:65>
| |   `-CallExpr 0x5584a7a39278 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a39260 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a390c8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a7a392d0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a390e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a38f90 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a392e8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a7a39108 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5584a7a39300 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a7a39160 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a7a39148 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a7a39128 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a7a39318 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a7a391b8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a7a391a0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a7a39180 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a39330 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a391d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a39348 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a39220 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a7a39360 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a7a39240 <col:16> 'int' 1
| `-FullComment 0x5584a7afde70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x5584a7afdc30 <line:560:4>
|   | `-TextComment 0x5584a7afdc00 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afdc50 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7afdcb0 <col:11, col:49>
|   |   `-TextComment 0x5584a7afdc80 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afdd50 <line:562:3, line:564:37>
|   | |-TextComment 0x5584a7afdcd0 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5584a7afdcf0 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afdd10 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afdda0 <line:566:3>
|   | `-TextComment 0x5584a7afdd70 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afddc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afde20 <col:11, col:35>
|       `-TextComment 0x5584a7afddf0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a39470 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a393e0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a39808 <line:583:1, line:586:1>
| | `-ReturnStmt 0x5584a7a397d0 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x5584a7a397b8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a396a0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a39688 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a39518 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a7a39710 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a7a396f8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a7a39538 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a393e0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a7a39728 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a7a39558 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5584a7a39740 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a7a395b0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a7a39598 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a7a39578 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a7a39758 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a7a39608 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a7a395f0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a7a395d0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a7a39770 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a39628 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a7a39788 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a7a39648 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5584a7a397a0 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a7a39668 <col:16> 'int' 0
| `-FullComment 0x5584a7afe150 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x5584a7afdf10 <line:574:4>
|   | `-TextComment 0x5584a7afdee0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afdf30 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7afdf90 <col:11, col:49>
|   |   `-TextComment 0x5584a7afdf60 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afe030 <line:576:3, line:578:45>
|   | |-TextComment 0x5584a7afdfb0 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5584a7afdfd0 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afdff0 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7afe080 <line:580:3>
|   | `-TextComment 0x5584a7afe050 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afe0a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afe100 <col:11, col:35>
|       `-TextComment 0x5584a7afe0d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a398c0 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a39830 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a39c28 <line:597:1, line:600:1>
| | `-ReturnStmt 0x5584a7a39bf0 <line:599:2, col:65>
| |   `-CallExpr 0x5584a7a39af0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a39ad8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a39968 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a7a39b48 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a39988 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a7a39830 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a7a39b60 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a7a399a8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5584a7a39b78 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a7a39a00 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a7a399e8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a7a399c8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a7a39b90 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a7a39a58 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a7a39a40 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a7a39a20 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a39ba8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a39a78 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a7a39bc0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a7a39a98 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5584a7a39bd8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a7a39ab8 <col:16> 'int' 0
| `-FullComment 0x5584a7afe430 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x5584a7afe1f0 <line:588:4>
|   | `-TextComment 0x5584a7afe1c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afe210 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7afe270 <col:11, col:49>
|   |   `-TextComment 0x5584a7afe240 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5584a7afe310 <line:590:3, line:592:45>
|   | |-TextComment 0x5584a7afe290 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5584a7afe2b0 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afe2d0 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7afe360 <line:594:3>
|   | `-TextComment 0x5584a7afe330 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afe380 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afe3e0 <col:11, col:35>
|       `-TextComment 0x5584a7afe3b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a39ce0 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a39c50 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a39f18 <line:611:1, line:614:1>
| `-FullComment 0x5584a7afe710 <line:602:4, line:608:35>
|   |-ParagraphComment 0x5584a7afe4d0 <line:602:4>
|   | `-TextComment 0x5584a7afe4a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afe4f0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7afe550 <col:11, col:39>
|   |   `-TextComment 0x5584a7afe520 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5584a7afe5f0 <line:604:3, line:606:44>
|   | |-TextComment 0x5584a7afe570 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5584a7afe590 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afe5b0 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afe640 <line:608:3>
|   | `-TextComment 0x5584a7afe610 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afe660 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afe6c0 <col:11, col:35>
|       `-TextComment 0x5584a7afe690 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a39fc8 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a39f38 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a3a1f8 <line:625:1, line:628:1>
| `-FullComment 0x5584a7afe9f0 <line:616:4, line:622:35>
|   |-ParagraphComment 0x5584a7afe7b0 <line:616:4>
|   | `-TextComment 0x5584a7afe780 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afe7d0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7afe830 <col:11, col:39>
|   |   `-TextComment 0x5584a7afe800 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5584a7afe8d0 <line:618:3, line:620:44>
|   | |-TextComment 0x5584a7afe850 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5584a7afe870 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afe890 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7afe920 <line:622:3>
|   | `-TextComment 0x5584a7afe8f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afe940 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afe9a0 <col:11, col:35>
|       `-TextComment 0x5584a7afe970 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79e8be0 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79e8b50 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79e8e18 <line:639:1, line:642:1>
| `-FullComment 0x5584a7afecd0 <line:630:4, line:636:35>
|   |-ParagraphComment 0x5584a7afea90 <line:630:4>
|   | `-TextComment 0x5584a7afea60 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afeab0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7afeb10 <col:11, col:39>
|   |   `-TextComment 0x5584a7afeae0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5584a7afebb0 <line:632:3, line:634:37>
|   | |-TextComment 0x5584a7afeb30 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5584a7afeb50 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7afeb70 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afec00 <line:636:3>
|   | `-TextComment 0x5584a7afebd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afec20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afec80 <col:11, col:35>
|       `-TextComment 0x5584a7afec50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79e8ec8 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79e8e38 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79e90f8 <line:653:1, line:656:1>
| `-FullComment 0x5584a7afefb0 <line:644:4, line:650:35>
|   |-ParagraphComment 0x5584a7afed70 <line:644:4>
|   | `-TextComment 0x5584a7afed40 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7afed90 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7afedf0 <col:11, col:39>
|   |   `-TextComment 0x5584a7afedc0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5584a7afee90 <line:646:3, line:648:37>
|   | |-TextComment 0x5584a7afee10 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5584a7afee30 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afee50 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7afeee0 <line:650:3>
|   | `-TextComment 0x5584a7afeeb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7afef00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7afef60 <col:11, col:35>
|       `-TextComment 0x5584a7afef30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79e91a8 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79e9118 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79e9358 <line:667:1, line:670:1>
| `-FullComment 0x5584a7aff290 <line:658:4, line:664:35>
|   |-ParagraphComment 0x5584a7aff050 <line:658:4>
|   | `-TextComment 0x5584a7aff020 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7aff070 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7aff0d0 <col:11, col:39>
|   |   `-TextComment 0x5584a7aff0a0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5584a7aff170 <line:660:3, line:662:45>
|   | |-TextComment 0x5584a7aff0f0 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5584a7aff110 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7aff130 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7aff1c0 <line:664:3>
|   | `-TextComment 0x5584a7aff190 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7aff1e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7aff240 <col:11, col:35>
|       `-TextComment 0x5584a7aff210 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79e9408 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79e9378 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79e95b8 <line:681:1, line:684:1>
| `-FullComment 0x5584a7aff570 <line:672:4, line:678:35>
|   |-ParagraphComment 0x5584a7aff330 <line:672:4>
|   | `-TextComment 0x5584a7aff300 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7aff350 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7aff3b0 <col:11, col:39>
|   |   `-TextComment 0x5584a7aff380 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5584a7aff450 <line:674:3, line:676:45>
|   | |-TextComment 0x5584a7aff3d0 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5584a7aff3f0 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7aff410 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7aff4a0 <line:678:3>
|   | `-TextComment 0x5584a7aff470 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7aff4c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7aff520 <col:11, col:35>
|       `-TextComment 0x5584a7aff4f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79e9668 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79e95d8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79e9a08 <line:695:1, line:698:1>
| | `-ReturnStmt 0x5584a79e99c8 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x5584a79e99b0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a79e9898 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a79e9880 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a79e9710 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a79e9908 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a79e98f0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a79e9730 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a79e95d8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a79e9920 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a79e9788 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a79e9770 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a79e9750 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a79e9938 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a79e97a8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5584a79e9950 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a79e9800 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a79e97e8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a79e97c8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a79e9968 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79e9820 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a79e9980 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79e9840 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a79e9998 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a79e9860 <col:16> 'int' 0
| `-FullComment 0x5584a7aff860 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x5584a7aff610 <line:686:4>
|   | `-TextComment 0x5584a7aff5e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7aff630 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7aff690 <col:11, col:50>
|   |   `-TextComment 0x5584a7aff660 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5584a7aff730 <line:688:3, line:690:44>
|   | |-TextComment 0x5584a7aff6b0 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5584a7aff6d0 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7aff6f0 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7aff780 <line:692:3>
|   | `-TextComment 0x5584a7aff750 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7aff7a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7aff810 <col:11, col:35>
|       `-TextComment 0x5584a7aff7d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79e9ba0 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79e9a30 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79e9f08 <line:709:1, line:712:1>
| | `-ReturnStmt 0x5584a79e9ed0 <line:711:2, col:66>
| |   `-CallExpr 0x5584a79e9dd0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79e9db8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79e9c48 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a79e9e28 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79e9c68 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a79e9a30 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79e9e40 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a79e9cc0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a79e9ca8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a79e9c88 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a79e9e58 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a79e9ce0 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5584a79e9e70 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a79e9d38 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a79e9d20 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a79e9d00 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79e9e88 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79e9d58 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79e9ea0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79e9d78 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a79e9eb8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a79e9d98 <col:16> 'int' 0
| `-FullComment 0x5584a7affb40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x5584a7aff900 <line:700:4>
|   | `-TextComment 0x5584a7aff8d0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7aff920 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7aff980 <col:11, col:50>
|   |   `-TextComment 0x5584a7aff950 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5584a7affa20 <line:702:3, line:704:44>
|   | |-TextComment 0x5584a7aff9a0 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5584a7aff9c0 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7aff9e0 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7affa70 <line:706:3>
|   | `-TextComment 0x5584a7affa40 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7affa90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7affaf0 <col:11, col:35>
|       `-TextComment 0x5584a7affac0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79e9fc0 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79e9f30 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79ea358 <line:723:1, line:726:1>
| | `-ReturnStmt 0x5584a79ea320 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x5584a79ea308 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a79ea1f0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a79ea1d8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a79ea068 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a79ea260 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a79ea248 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a79ea088 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a79e9f30 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a79ea278 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a79ea0e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a79ea0c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a79ea0a8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a79ea290 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a79ea100 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5584a79ea2a8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a79ea158 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a79ea140 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a79ea120 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a79ea2c0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ea178 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a79ea2d8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ea198 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a79ea2f0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a79ea1b8 <col:16> 'int' 1
| `-FullComment 0x5584a7affe20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x5584a7affbe0 <line:714:4>
|   | `-TextComment 0x5584a7affbb0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7affc00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7affc60 <col:11, col:50>
|   |   `-TextComment 0x5584a7affc30 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5584a7affd00 <line:716:3, line:718:37>
|   | |-TextComment 0x5584a7affc80 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5584a7affca0 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7affcc0 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7affd50 <line:720:3>
|   | `-TextComment 0x5584a7affd20 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7affd70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7affdd0 <col:11, col:35>
|       `-TextComment 0x5584a7affda0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ea410 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79ea380 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79ea778 <line:737:1, line:740:1>
| | `-ReturnStmt 0x5584a79ea740 <line:739:2, col:65>
| |   `-CallExpr 0x5584a79ea640 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ea628 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79ea4b8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a79ea698 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79ea4d8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a79ea380 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ea6b0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a79ea530 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a79ea518 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a79ea4f8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a79ea6c8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a79ea550 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5584a79ea6e0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a79ea5a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a79ea590 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a79ea570 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ea6f8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ea5c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ea710 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ea5e8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a79ea728 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a79ea608 <col:16> 'int' 1
| `-FullComment 0x5584a7b00100 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x5584a7affec0 <line:728:4>
|   | `-TextComment 0x5584a7affe90 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7affee0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7afff40 <col:11, col:50>
|   |   `-TextComment 0x5584a7afff10 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5584a7afffe0 <line:730:3, line:732:37>
|   | |-TextComment 0x5584a7afff60 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5584a7afff80 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7afffa0 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b00030 <line:734:3>
|   | `-TextComment 0x5584a7b00000 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b00050 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b000b0 <col:11, col:35>
|       `-TextComment 0x5584a7b00080 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ea830 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79ea7a0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79eabd8 <line:751:1, line:754:1>
| | `-ReturnStmt 0x5584a79eab90 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x5584a79eab78 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a79eaa60 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a79eaa48 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a79ea8d8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a79eaad0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a79eaab8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a79ea8f8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a79ea7a0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a79eaae8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a79ea950 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a79ea938 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a79ea918 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a79eab00 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a79ea970 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5584a79eab18 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a79ea9c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a79ea9b0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a79ea990 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a79eab30 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ea9e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a79eab48 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79eaa08 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5584a79eab60 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a79eaa28 <col:16> 'int' 0
| `-FullComment 0x5584a7b003e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x5584a7b001a0 <line:742:4>
|   | `-TextComment 0x5584a7b00170 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b001c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b00220 <col:11, col:50>
|   |   `-TextComment 0x5584a7b001f0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5584a7b002c0 <line:744:3, line:746:45>
|   | |-TextComment 0x5584a7b00240 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5584a7b00260 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b00280 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b00310 <line:748:3>
|   | `-TextComment 0x5584a7b002e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b00330 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b00390 <col:11, col:35>
|       `-TextComment 0x5584a7b00360 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79eac90 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79eac00 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79eaff8 <line:765:1, line:768:1>
| | `-ReturnStmt 0x5584a79eafc0 <line:767:2, col:65>
| |   `-CallExpr 0x5584a79eaec0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79eaea8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79ead38 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a79eaf18 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79ead58 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a79eac00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79eaf30 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a79eadb0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a79ead98 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a79ead78 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a79eaf48 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a79eadd0 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5584a79eaf60 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a79eae28 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a79eae10 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a79eadf0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79eaf78 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79eae48 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79eaf90 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79eae68 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5584a79eafa8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a79eae88 <col:16> 'int' 0
| `-FullComment 0x5584a7b006c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x5584a7b00480 <line:756:4>
|   | `-TextComment 0x5584a7b00450 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b004a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b00500 <col:11, col:50>
|   |   `-TextComment 0x5584a7b004d0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5584a7b005a0 <line:758:3, line:760:45>
|   | |-TextComment 0x5584a7b00520 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5584a7b00540 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b00560 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b005f0 <line:762:3>
|   | `-TextComment 0x5584a7b005c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b00610 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b00670 <col:11, col:35>
|       `-TextComment 0x5584a7b00640 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79eb0b0 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79eb020 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79eb448 <line:779:1, line:782:1>
| | `-ReturnStmt 0x5584a79eb410 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x5584a79eb3f8 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a79eb2e0 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a79eb2c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a79eb158 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a79eb350 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a79eb338 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a79eb178 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a79eb020 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a79eb368 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a79eb1d0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a79eb1b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a79eb198 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a79eb380 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a79eb1f0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5584a79eb398 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a79eb248 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a79eb230 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a79eb210 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a79eb3b0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79eb268 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a79eb3c8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79eb288 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a79eb3e0 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a79eb2a8 <col:16> 'int' 0
| `-FullComment 0x5584a7b009a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x5584a7b00760 <line:770:4>
|   | `-TextComment 0x5584a7b00730 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b00780 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b007e0 <col:11, col:50>
|   |   `-TextComment 0x5584a7b007b0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5584a7b00880 <line:772:3, line:774:44>
|   | |-TextComment 0x5584a7b00800 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5584a7b00820 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b00840 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b008d0 <line:776:3>
|   | `-TextComment 0x5584a7b008a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b008f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b00950 <col:11, col:35>
|       `-TextComment 0x5584a7b00920 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79eb500 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79eb470 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79eb868 <line:793:1, line:796:1>
| | `-ReturnStmt 0x5584a79eb830 <line:795:2, col:66>
| |   `-CallExpr 0x5584a79eb730 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79eb718 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79eb5a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a79eb788 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79eb5c8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a79eb470 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79eb7a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a79eb620 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a79eb608 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a79eb5e8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a79eb7b8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a79eb640 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5584a79eb7d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a79eb698 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a79eb680 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a79eb660 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79eb7e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79eb6b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79eb800 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79eb6d8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a79eb818 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a79eb6f8 <col:16> 'int' 0
| `-FullComment 0x5584a7b00c80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x5584a7b00a40 <line:784:4>
|   | `-TextComment 0x5584a7b00a10 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b00a60 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b00ac0 <col:11, col:50>
|   |   `-TextComment 0x5584a7b00a90 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5584a7b00b60 <line:786:3, line:788:44>
|   | |-TextComment 0x5584a7b00ae0 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5584a7b00b00 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b00b20 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b00bb0 <line:790:3>
|   | `-TextComment 0x5584a7b00b80 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b00bd0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b00c30 <col:11, col:35>
|       `-TextComment 0x5584a7b00c00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79eb920 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79eb890 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79ebcd8 <line:807:1, line:810:1>
| | `-ReturnStmt 0x5584a79ebc98 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x5584a79ebc80 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a79ebb50 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a79ebb38 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a79eb9c8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a79ebbd8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a79ebbc0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a79eb9e8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a79eb890 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a79ebbf0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a79eba40 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a79eba28 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a79eba08 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a79ebc08 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a79eba60 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5584a79ebc20 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a79ebab8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a79ebaa0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a79eba80 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a79ebc38 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ebad8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a79ebc50 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ebaf8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a79ebc68 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a79ebb18 <col:16> 'int' 1
| `-FullComment 0x5584a7b00f60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x5584a7b00d20 <line:798:4>
|   | `-TextComment 0x5584a7b00cf0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b00d40 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b00da0 <col:11, col:50>
|   |   `-TextComment 0x5584a7b00d70 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5584a7b00e40 <line:800:3, line:802:37>
|   | |-TextComment 0x5584a7b00dc0 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5584a7b00de0 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b00e00 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b00e90 <line:804:3>
|   | `-TextComment 0x5584a7b00e60 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b00eb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b00f10 <col:11, col:35>
|       `-TextComment 0x5584a7b00ee0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ebd90 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79ebd00 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79ec0f8 <line:821:1, line:824:1>
| | `-ReturnStmt 0x5584a79ec0c0 <line:823:2, col:65>
| |   `-CallExpr 0x5584a79ebfc0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ebfa8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79ebe38 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a79ec018 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79ebe58 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a79ebd00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ec030 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a79ebeb0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a79ebe98 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a79ebe78 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a79ec048 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a79ebed0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5584a79ec060 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a79ebf28 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a79ebf10 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a79ebef0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ec078 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ebf48 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ec090 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ebf68 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a79ec0a8 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a79ebf88 <col:16> 'int' 1
| `-FullComment 0x5584a7b01240 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x5584a7b01000 <line:812:4>
|   | `-TextComment 0x5584a7b00fd0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b01020 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b01080 <col:11, col:50>
|   |   `-TextComment 0x5584a7b01050 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5584a7b01120 <line:814:3, line:816:37>
|   | |-TextComment 0x5584a7b010a0 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5584a7b010c0 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b010e0 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b01170 <line:818:3>
|   | `-TextComment 0x5584a7b01140 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b01190 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b011f0 <col:11, col:35>
|       `-TextComment 0x5584a7b011c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ec1b0 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79ec120 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79ec548 <line:835:1, line:838:1>
| | `-ReturnStmt 0x5584a79ec510 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x5584a79ec4f8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a79ec3e0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a79ec3c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a79ec258 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a79ec450 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a79ec438 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a79ec278 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a79ec120 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a79ec468 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a79ec2d0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a79ec2b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a79ec298 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a79ec480 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a79ec2f0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5584a79ec498 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a79ec348 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a79ec330 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a79ec310 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a79ec4b0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ec368 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a79ec4c8 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ec388 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5584a79ec4e0 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a79ec3a8 <col:16> 'int' 0
| `-FullComment 0x5584a7b01520 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x5584a7b012e0 <line:826:4>
|   | `-TextComment 0x5584a7b012b0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b01300 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b01360 <col:11, col:50>
|   |   `-TextComment 0x5584a7b01330 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5584a7b01400 <line:828:3, line:830:45>
|   | |-TextComment 0x5584a7b01380 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5584a7b013a0 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b013c0 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b01450 <line:832:3>
|   | `-TextComment 0x5584a7b01420 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b01470 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b014d0 <col:11, col:35>
|       `-TextComment 0x5584a7b014a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ec600 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79ec570 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79ec968 <line:849:1, line:852:1>
| | `-ReturnStmt 0x5584a79ec930 <line:851:2, col:65>
| |   `-CallExpr 0x5584a79ec830 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ec818 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79ec6a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a79ec888 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79ec6c8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a79ec570 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ec8a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a79ec720 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a79ec708 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a79ec6e8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a79ec8b8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a79ec740 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5584a79ec8d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a79ec798 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a79ec780 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a79ec760 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ec8e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ec7b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ec900 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ec7d8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5584a79ec918 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a79ec7f8 <col:16> 'int' 0
| `-FullComment 0x5584a7b01820 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x5584a7b015c0 <line:840:4>
|   | `-TextComment 0x5584a7b01590 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b015e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b01640 <col:11, col:50>
|   |   `-TextComment 0x5584a7b01610 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5584a7b016e0 <line:842:3, line:844:45>
|   | |-TextComment 0x5584a7b01660 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5584a7b01680 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b016a0 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b01730 <line:846:3>
|   | `-TextComment 0x5584a7b01700 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b01750 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b017b0 <col:11, col:35>
|       `-TextComment 0x5584a7b01780 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79eca20 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79ec990 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79ecdd8 <line:863:1, line:866:1>
| | `-ReturnStmt 0x5584a79ecd98 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x5584a79ecd80 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a79ecc68 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a79ecc50 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a79ecac8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a79eccd8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a79eccc0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a79ecae8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a79ec990 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a79eccf0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a79ecb40 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a79ecb28 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a79ecb08 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a79ecd08 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a79ecb60 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5584a79ecd20 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a79ecbd0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a79ecba0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a79ecb80 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a79ecd38 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ecbf0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a79ecd50 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ecc10 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a79ecd68 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a79ecc30 <col:16> 'int' 0
| `-FullComment 0x5584a7b01b00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x5584a7b018c0 <line:854:4>
|   | `-TextComment 0x5584a7b01890 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b018e0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b01940 <col:11, col:49>
|   |   `-TextComment 0x5584a7b01910 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5584a7b019e0 <line:856:3, line:858:44>
|   | |-TextComment 0x5584a7b01960 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5584a7b01980 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b019a0 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b01a30 <line:860:3>
|   | `-TextComment 0x5584a7b01a00 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b01a50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b01ab0 <col:11, col:35>
|       `-TextComment 0x5584a7b01a80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ece90 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79ece00 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79ed1f8 <line:877:1, line:880:1>
| | `-ReturnStmt 0x5584a79ed1c0 <line:879:2, col:66>
| |   `-CallExpr 0x5584a79ed0c0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ed0a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79ecf38 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a79ed118 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79ecf58 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a79ece00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ed130 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a79ecfb0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a79ecf98 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a79ecf78 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a79ed148 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a79ecfd0 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5584a79ed160 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a79ed028 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a79ed010 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a79ecff0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ed178 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ed048 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ed190 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ed068 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a79ed1a8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a79ed088 <col:16> 'int' 0
| `-FullComment 0x5584a7b01de0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x5584a7b01ba0 <line:868:4>
|   | `-TextComment 0x5584a7b01b70 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b01bc0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b01c20 <col:11, col:49>
|   |   `-TextComment 0x5584a7b01bf0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5584a7b01cc0 <line:870:3, line:872:44>
|   | |-TextComment 0x5584a7b01c40 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5584a7b01c60 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b01c80 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b01d10 <line:874:3>
|   | `-TextComment 0x5584a7b01ce0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b01d30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b01d90 <col:11, col:35>
|       `-TextComment 0x5584a7b01d60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ed2b0 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79ed220 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79ed648 <line:891:1, line:894:1>
| | `-ReturnStmt 0x5584a79ed610 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x5584a79ed5f8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a79ed4e0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a79ed4c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a79ed358 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a79ed550 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a79ed538 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a79ed378 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a79ed220 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a79ed568 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a79ed3d0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a79ed3b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a79ed398 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a79ed580 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a79ed3f0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5584a79ed598 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a79ed448 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a79ed430 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a79ed410 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a79ed5b0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ed468 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a79ed5c8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79ed488 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5584a79ed5e0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a79ed4a8 <col:16> 'int' 1
| `-FullComment 0x5584a7b020c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x5584a7b01e80 <line:882:4>
|   | `-TextComment 0x5584a7b01e50 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b01ea0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b01f00 <col:11, col:49>
|   |   `-TextComment 0x5584a7b01ed0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5584a7b01fa0 <line:884:3, line:886:37>
|   | |-TextComment 0x5584a7b01f20 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5584a7b01f40 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b01f60 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b01ff0 <line:888:3>
|   | `-TextComment 0x5584a7b01fc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b02010 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b02070 <col:11, col:35>
|       `-TextComment 0x5584a7b02040 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ed700 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79ed670 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79eda68 <line:905:1, line:908:1>
| | `-ReturnStmt 0x5584a79eda30 <line:907:2, col:65>
| |   `-CallExpr 0x5584a79ed930 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ed918 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79ed7a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a79ed988 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79ed7c8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a79ed670 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ed9a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a79ed820 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a79ed808 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a79ed7e8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a79ed9b8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a79ed840 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5584a79ed9d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a79ed898 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a79ed880 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a79ed860 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ed9e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ed8b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79eda00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ed8d8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5584a79eda18 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a79ed8f8 <col:16> 'int' 1
| `-FullComment 0x5584a7b023a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x5584a7b02160 <line:896:4>
|   | `-TextComment 0x5584a7b02130 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b02180 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b021e0 <col:11, col:49>
|   |   `-TextComment 0x5584a7b021b0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5584a7b02280 <line:898:3, line:900:37>
|   | |-TextComment 0x5584a7b02200 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5584a7b02220 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b02240 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b022d0 <line:902:3>
|   | `-TextComment 0x5584a7b022a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b022f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b02350 <col:11, col:35>
|       `-TextComment 0x5584a7b02320 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79edb20 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79eda90 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79edf18 <line:919:1, line:922:1>
| | `-ReturnStmt 0x5584a79eded8 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x5584a79edec0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a79edda8 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a79edd90 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a79edc20 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5584a79ede18 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5584a79ede00 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5584a79edc40 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a79eda90 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5584a79ede30 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5584a79edc98 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5584a79edc80 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5584a79edc60 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5584a79ede48 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5584a79edcb8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5584a79ede60 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5584a79edd10 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5584a79edcf8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5584a79edcd8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5584a79ede78 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79edd30 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5584a79ede90 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5584a79edd50 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5584a79edea8 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5584a79edd70 <col:16> 'int' 0
| `-FullComment 0x5584a7b02680 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x5584a7b02440 <line:910:4>
|   | `-TextComment 0x5584a7b02410 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b02460 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b024c0 <col:11, col:49>
|   |   `-TextComment 0x5584a7b02490 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5584a7b02560 <line:912:3, line:914:45>
|   | |-TextComment 0x5584a7b024e0 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5584a7b02500 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b02520 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b025b0 <line:916:3>
|   | `-TextComment 0x5584a7b02580 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b025d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b02630 <col:11, col:35>
|       `-TextComment 0x5584a7b02600 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79edfd0 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79edf40 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79ee338 <line:933:1, line:936:1>
| | `-ReturnStmt 0x5584a79ee300 <line:935:2, col:65>
| |   `-CallExpr 0x5584a79ee200 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ee1e8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a79ee078 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5584a7a2ad90 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5584a79ee258 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a79ee098 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5584a79edf40 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5584a79ee270 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5584a79ee0f0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5584a79ee0d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5584a79ee0b8 <col:18> 'int (void)' Function 0x5584a7a2a858 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5584a79ee288 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5584a79ee110 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5584a79ee2a0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5584a79ee168 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5584a79ee150 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5584a79ee130 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ee2b8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ee188 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5584a79ee2d0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5584a79ee1a8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5584a79ee2e8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5584a79ee1c8 <col:16> 'int' 0
| `-FullComment 0x5584a7b02960 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x5584a7b02720 <line:924:4>
|   | `-TextComment 0x5584a7b026f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b02740 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b027a0 <col:11, col:49>
|   |   `-TextComment 0x5584a7b02770 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5584a7b02840 <line:926:3, line:928:45>
|   | |-TextComment 0x5584a7b027c0 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5584a7b027e0 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b02800 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b02890 <line:930:3>
|   | `-TextComment 0x5584a7b02860 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b028b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b02910 <col:11, col:35>
|       `-TextComment 0x5584a7b028e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ee3f0 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79ee360 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79ee618 <line:947:1, line:950:1>
| `-FullComment 0x5584a7b02c40 <line:938:4, line:944:35>
|   |-ParagraphComment 0x5584a7b02a00 <line:938:4>
|   | `-TextComment 0x5584a7b029d0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b02a20 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b02a80 <col:11, col:43>
|   |   `-TextComment 0x5584a7b02a50 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5584a7b02b20 <line:940:3, line:942:44>
|   | |-TextComment 0x5584a7b02aa0 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5584a7b02ac0 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b02ae0 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b02b70 <line:944:3>
|   | `-TextComment 0x5584a7b02b40 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b02b90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b02bf0 <col:11, col:35>
|       `-TextComment 0x5584a7b02bc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ee6c8 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79ee638 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79ee8e8 <line:961:1, line:964:1>
| `-FullComment 0x5584a7b02f20 <line:952:4, line:958:35>
|   |-ParagraphComment 0x5584a7b02ce0 <line:952:4>
|   | `-TextComment 0x5584a7b02cb0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b02d00 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b02d60 <col:11, col:43>
|   |   `-TextComment 0x5584a7b02d30 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5584a7b02e00 <line:954:3, line:956:44>
|   | |-TextComment 0x5584a7b02d80 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5584a7b02da0 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b02dc0 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b02e50 <line:958:3>
|   | `-TextComment 0x5584a7b02e20 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b02e70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b02ed0 <col:11, col:35>
|       `-TextComment 0x5584a7b02ea0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79ee998 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79ee908 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79eebb8 <line:975:1, line:978:1>
| `-FullComment 0x5584a7b03200 <line:966:4, line:972:35>
|   |-ParagraphComment 0x5584a7b02fc0 <line:966:4>
|   | `-TextComment 0x5584a7b02f90 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b02fe0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b03040 <col:11, col:43>
|   |   `-TextComment 0x5584a7b03010 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5584a7b030e0 <line:968:3, line:970:37>
|   | |-TextComment 0x5584a7b03060 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5584a7b03080 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b030a0 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b03130 <line:972:3>
|   | `-TextComment 0x5584a7b03100 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b03150 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b031b0 <col:11, col:35>
|       `-TextComment 0x5584a7b03180 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79efe10 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79efd80 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79f0038 <line:989:1, line:992:1>
| `-FullComment 0x5584a7b034e0 <line:980:4, line:986:35>
|   |-ParagraphComment 0x5584a7b032a0 <line:980:4>
|   | `-TextComment 0x5584a7b03270 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b032c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b03320 <col:11, col:43>
|   |   `-TextComment 0x5584a7b032f0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5584a7b033c0 <line:982:3, line:984:37>
|   | |-TextComment 0x5584a7b03340 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5584a7b03360 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b03380 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b03410 <line:986:3>
|   | `-TextComment 0x5584a7b033e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b03430 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b03490 <col:11, col:35>
|       `-TextComment 0x5584a7b03460 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f00e8 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79f0058 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79f0308 <line:1003:1, line:1006:1>
| `-FullComment 0x5584a7b037c0 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x5584a7b03580 <line:994:4>
|   | `-TextComment 0x5584a7b03550 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b035a0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b03600 <col:11, col:43>
|   |   `-TextComment 0x5584a7b035d0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5584a7b036a0 <line:996:3, line:998:45>
|   | |-TextComment 0x5584a7b03620 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5584a7b03640 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b03660 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b036f0 <line:1000:3>
|   | `-TextComment 0x5584a7b036c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b03710 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b03770 <col:11, col:35>
|       `-TextComment 0x5584a7b03740 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f03b8 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79f0328 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79f05d8 <line:1017:1, line:1020:1>
| `-FullComment 0x5584a7b03ae0 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x5584a7b038a0 <line:1008:4>
|   | `-TextComment 0x5584a7b03870 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b038c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b03920 <col:11, col:43>
|   |   `-TextComment 0x5584a7b038f0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5584a7b039c0 <line:1010:3, line:1012:45>
|   | |-TextComment 0x5584a7b03940 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5584a7b03960 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b03980 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b03a10 <line:1014:3>
|   | `-TextComment 0x5584a7b039e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b03a30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b03a90 <col:11, col:35>
|       `-TextComment 0x5584a7b03a60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f0688 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79f05f8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79f0838 <line:1031:1, line:1034:1>
| `-FullComment 0x5584a7b03dc0 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x5584a7b03b80 <line:1022:4>
|   | `-TextComment 0x5584a7b03b50 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b03ba0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b03c00 <col:11, col:40>
|   |   `-TextComment 0x5584a7b03bd0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5584a7b03ca0 <line:1024:3, line:1026:44>
|   | |-TextComment 0x5584a7b03c20 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5584a7b03c40 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b03c60 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b03cf0 <line:1028:3>
|   | `-TextComment 0x5584a7b03cc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b03d10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b03d70 <col:11, col:35>
|       `-TextComment 0x5584a7b03d40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f08e8 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79f0858 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79f0a98 <line:1045:1, line:1048:1>
| `-FullComment 0x5584a7b040a0 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x5584a7b03e60 <line:1036:4>
|   | `-TextComment 0x5584a7b03e30 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b03e80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b03ee0 <col:11, col:40>
|   |   `-TextComment 0x5584a7b03eb0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5584a7b03f80 <line:1038:3, line:1040:44>
|   | |-TextComment 0x5584a7b03f00 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5584a7b03f20 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b03f40 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b03fd0 <line:1042:3>
|   | `-TextComment 0x5584a7b03fa0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b03ff0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b04050 <col:11, col:35>
|       `-TextComment 0x5584a7b04020 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f0b48 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79f0ab8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79f0cf8 <line:1059:1, line:1062:1>
| `-FullComment 0x5584a7b04380 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x5584a7b04140 <line:1050:4>
|   | `-TextComment 0x5584a7b04110 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b04160 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b041c0 <col:11, col:40>
|   |   `-TextComment 0x5584a7b04190 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5584a7b04260 <line:1052:3, line:1054:37>
|   | |-TextComment 0x5584a7b041e0 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5584a7b04200 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b04220 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b042b0 <line:1056:3>
|   | `-TextComment 0x5584a7b04280 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b042d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b04330 <col:11, col:35>
|       `-TextComment 0x5584a7b04300 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f0f38 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79f0d18 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79f10e8 <line:1073:1, line:1076:1>
| `-FullComment 0x5584a7b04660 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x5584a7b04420 <line:1064:4>
|   | `-TextComment 0x5584a7b043f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b04440 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b044a0 <col:11, col:40>
|   |   `-TextComment 0x5584a7b04470 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5584a7b04540 <line:1066:3, line:1068:37>
|   | |-TextComment 0x5584a7b044c0 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5584a7b044e0 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b04500 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b04590 <line:1070:3>
|   | `-TextComment 0x5584a7b04560 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b045b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b04610 <col:11, col:35>
|       `-TextComment 0x5584a7b045e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f1198 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79f1108 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79f1348 <line:1087:1, line:1090:1>
| `-FullComment 0x5584a7b04940 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x5584a7b04700 <line:1078:4>
|   | `-TextComment 0x5584a7b046d0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b04720 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b04780 <col:11, col:40>
|   |   `-TextComment 0x5584a7b04750 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5584a7b04820 <line:1080:3, line:1082:45>
|   | |-TextComment 0x5584a7b047a0 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5584a7b047c0 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b047e0 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b04870 <line:1084:3>
|   | `-TextComment 0x5584a7b04840 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b04890 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b048f0 <col:11, col:35>
|       `-TextComment 0x5584a7b048c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f13f8 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79f1368 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79f15a8 <line:1101:1, line:1104:1>
| `-FullComment 0x5584a7b04c20 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x5584a7b049e0 <line:1092:4>
|   | `-TextComment 0x5584a7b049b0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b04a00 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b04a60 <col:11, col:40>
|   |   `-TextComment 0x5584a7b04a30 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5584a7b04b00 <line:1094:3, line:1096:45>
|   | |-TextComment 0x5584a7b04a80 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5584a7b04aa0 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b04ac0 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b04b50 <line:1098:3>
|   | `-TextComment 0x5584a7b04b20 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b04b70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b04bd0 <col:11, col:35>
|       `-TextComment 0x5584a7b04ba0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f1658 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79f15c8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79f1808 <line:1115:1, line:1118:1>
| `-FullComment 0x5584a7b04f00 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x5584a7b04cc0 <line:1106:4>
|   | `-TextComment 0x5584a7b04c90 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b04ce0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b04d40 <col:11, col:40>
|   |   `-TextComment 0x5584a7b04d10 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5584a7b04de0 <line:1108:3, line:1110:44>
|   | |-TextComment 0x5584a7b04d60 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5584a7b04d80 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b04da0 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b04e30 <line:1112:3>
|   | `-TextComment 0x5584a7b04e00 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b04e50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b04eb0 <col:11, col:35>
|       `-TextComment 0x5584a7b04e80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f18b8 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79f1828 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a79f1a68 <line:1129:1, line:1132:1>
| `-FullComment 0x5584a7b051e0 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x5584a7b04fa0 <line:1120:4>
|   | `-TextComment 0x5584a7b04f70 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b04fc0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b05020 <col:11, col:40>
|   |   `-TextComment 0x5584a7b04ff0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5584a7b050c0 <line:1122:3, line:1124:44>
|   | |-TextComment 0x5584a7b05040 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5584a7b05060 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b05080 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b05110 <line:1126:3>
|   | `-TextComment 0x5584a7b050e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b05130 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b05190 <col:11, col:35>
|       `-TextComment 0x5584a7b05160 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f1b18 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a79f1a88 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a79f1cc8 <line:1143:1, line:1146:1>
| `-FullComment 0x5584a7b054c0 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x5584a7b05280 <line:1134:4>
|   | `-TextComment 0x5584a7b05250 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b052a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b05300 <col:11, col:40>
|   |   `-TextComment 0x5584a7b052d0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5584a7b053a0 <line:1136:3, line:1138:37>
|   | |-TextComment 0x5584a7b05320 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5584a7b05340 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b05360 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b053f0 <line:1140:3>
|   | `-TextComment 0x5584a7b053c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b05410 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b05470 <col:11, col:35>
|       `-TextComment 0x5584a7b05440 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a79f1d78 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a79f1ce8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a4e238 <line:1157:1, line:1160:1>
| `-FullComment 0x5584a7b057a0 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x5584a7b05560 <line:1148:4>
|   | `-TextComment 0x5584a7b05530 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b05580 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b055e0 <col:11, col:40>
|   |   `-TextComment 0x5584a7b055b0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5584a7b05680 <line:1150:3, line:1152:37>
|   | |-TextComment 0x5584a7b05600 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5584a7b05620 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b05640 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b056d0 <line:1154:3>
|   | `-TextComment 0x5584a7b056a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b056f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b05750 <col:11, col:35>
|       `-TextComment 0x5584a7b05720 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4e2e8 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a4e258 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a4e498 <line:1171:1, line:1174:1>
| `-FullComment 0x5584a7b05a90 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x5584a7b05850 <line:1162:4>
|   | `-TextComment 0x5584a7b05810 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b05870 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b058d0 <col:11, col:40>
|   |   `-TextComment 0x5584a7b058a0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5584a7b05970 <line:1164:3, line:1166:45>
|   | |-TextComment 0x5584a7b058f0 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5584a7b05910 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b05930 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b059c0 <line:1168:3>
|   | `-TextComment 0x5584a7b05990 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b059e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b05a40 <col:11, col:35>
|       `-TextComment 0x5584a7b05a10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4e548 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a4e4b8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a4e6f8 <line:1185:1, line:1188:1>
| `-FullComment 0x5584a7b05d70 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x5584a7b05b30 <line:1176:4>
|   | `-TextComment 0x5584a7b05b00 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b05b50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b05bb0 <col:11, col:40>
|   |   `-TextComment 0x5584a7b05b80 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5584a7b05c50 <line:1178:3, line:1180:45>
|   | |-TextComment 0x5584a7b05bd0 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5584a7b05bf0 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b05c10 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b05ca0 <line:1182:3>
|   | `-TextComment 0x5584a7b05c70 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b05cc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b05d20 <col:11, col:35>
|       `-TextComment 0x5584a7b05cf0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4e7a8 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a4e718 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a4e958 <line:1199:1, line:1202:1>
| `-FullComment 0x5584a7b06050 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x5584a7b05e10 <line:1190:4>
|   | `-TextComment 0x5584a7b05de0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b05e30 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b05e90 <col:11, col:39>
|   |   `-TextComment 0x5584a7b05e60 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5584a7b05f30 <line:1192:3, line:1194:44>
|   | |-TextComment 0x5584a7b05eb0 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5584a7b05ed0 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b05ef0 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b05f80 <line:1196:3>
|   | `-TextComment 0x5584a7b05f50 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b05fa0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b06000 <col:11, col:35>
|       `-TextComment 0x5584a7b05fd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4ea08 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a4e978 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a4ebb8 <line:1213:1, line:1216:1>
| `-FullComment 0x5584a7b06330 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x5584a7b060f0 <line:1204:4>
|   | `-TextComment 0x5584a7b060c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b06110 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b06170 <col:11, col:39>
|   |   `-TextComment 0x5584a7b06140 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5584a7b06210 <line:1206:3, line:1208:44>
|   | |-TextComment 0x5584a7b06190 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5584a7b061b0 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b061d0 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b06260 <line:1210:3>
|   | `-TextComment 0x5584a7b06230 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b06280 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b062e0 <col:11, col:35>
|       `-TextComment 0x5584a7b062b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4ec68 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a4ebd8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a4ee18 <line:1227:1, line:1230:1>
| `-FullComment 0x5584a7b06610 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x5584a7b063d0 <line:1218:4>
|   | `-TextComment 0x5584a7b063a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b063f0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b06450 <col:11, col:39>
|   |   `-TextComment 0x5584a7b06420 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5584a7b064f0 <line:1220:3, line:1222:37>
|   | |-TextComment 0x5584a7b06470 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5584a7b06490 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b064b0 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b06540 <line:1224:3>
|   | `-TextComment 0x5584a7b06510 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b06560 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b065c0 <col:11, col:35>
|       `-TextComment 0x5584a7b06590 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4eec8 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a4ee38 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a4f078 <line:1241:1, line:1244:1>
| `-FullComment 0x5584a7b068f0 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x5584a7b066b0 <line:1232:4>
|   | `-TextComment 0x5584a7b06680 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b066d0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b06730 <col:11, col:39>
|   |   `-TextComment 0x5584a7b06700 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5584a7b067d0 <line:1234:3, line:1236:37>
|   | |-TextComment 0x5584a7b06750 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5584a7b06770 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b06790 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b06820 <line:1238:3>
|   | `-TextComment 0x5584a7b067f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b06840 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b068a0 <col:11, col:35>
|       `-TextComment 0x5584a7b06870 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4f128 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a4f098 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a4f2e8 <line:1255:1, line:1258:1>
| `-FullComment 0x5584a7b06bd0 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x5584a7b06990 <line:1246:4>
|   | `-TextComment 0x5584a7b06960 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b069b0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b06a10 <col:11, col:39>
|   |   `-TextComment 0x5584a7b069e0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5584a7b06ab0 <line:1248:3, line:1250:45>
|   | |-TextComment 0x5584a7b06a30 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5584a7b06a50 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b06a70 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b06b00 <line:1252:3>
|   | `-TextComment 0x5584a7b06ad0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b06b20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b06b80 <col:11, col:35>
|       `-TextComment 0x5584a7b06b50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4f398 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a4f308 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a4f548 <line:1269:1, line:1272:1>
| `-FullComment 0x5584a7b06eb0 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x5584a7b06c70 <line:1260:4>
|   | `-TextComment 0x5584a7b06c40 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b06c90 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b06cf0 <col:11, col:39>
|   |   `-TextComment 0x5584a7b06cc0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5584a7b06d90 <line:1262:3, line:1264:45>
|   | |-TextComment 0x5584a7b06d10 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5584a7b06d30 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b06d50 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b06de0 <line:1266:3>
|   | `-TextComment 0x5584a7b06db0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b06e00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b06e60 <col:11, col:35>
|       `-TextComment 0x5584a7b06e30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4f5f8 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a4f568 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a4f818 <line:1283:1, line:1286:1>
| `-FullComment 0x5584a7b07190 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x5584a7b06f50 <line:1274:4>
|   | `-TextComment 0x5584a7b06f20 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b06f70 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b06fd0 <col:11, col:43>
|   |   `-TextComment 0x5584a7b06fa0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5584a7b07070 <line:1276:3, line:1278:44>
|   | |-TextComment 0x5584a7b06ff0 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5584a7b07010 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b07030 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b070c0 <line:1280:3>
|   | `-TextComment 0x5584a7b07090 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b070e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b07140 <col:11, col:35>
|       `-TextComment 0x5584a7b07110 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4f8c8 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a4f838 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a4fae8 <line:1297:1, line:1300:1>
| `-FullComment 0x5584a7b07470 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x5584a7b07230 <line:1288:4>
|   | `-TextComment 0x5584a7b07200 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b07250 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b072b0 <col:11, col:43>
|   |   `-TextComment 0x5584a7b07280 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5584a7b07350 <line:1290:3, line:1292:44>
|   | |-TextComment 0x5584a7b072d0 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5584a7b072f0 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b07310 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5584a7b073a0 <line:1294:3>
|   | `-TextComment 0x5584a7b07370 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b073c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b07420 <col:11, col:35>
|       `-TextComment 0x5584a7b073f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4fb98 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a4fb08 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a4fdb8 <line:1311:1, line:1314:1>
| `-FullComment 0x5584a7b07750 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x5584a7b07510 <line:1302:4>
|   | `-TextComment 0x5584a7b074e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b07530 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b07590 <col:11, col:43>
|   |   `-TextComment 0x5584a7b07560 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5584a7b07630 <line:1304:3, line:1306:37>
|   | |-TextComment 0x5584a7b075b0 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5584a7b075d0 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b075f0 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b07680 <line:1308:3>
|   | `-TextComment 0x5584a7b07650 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b076a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b07700 <col:11, col:35>
|       `-TextComment 0x5584a7b076d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a4fe68 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a4fdd8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a50088 <line:1325:1, line:1328:1>
| `-FullComment 0x5584a7b07a40 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x5584a7b077f0 <line:1316:4>
|   | `-TextComment 0x5584a7b077c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b07810 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b07880 <col:11, col:43>
|   |   `-TextComment 0x5584a7b07850 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5584a7b07920 <line:1318:3, line:1320:37>
|   | |-TextComment 0x5584a7b078a0 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5584a7b078c0 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b078e0 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5584a7b07970 <line:1322:3>
|   | `-TextComment 0x5584a7b07940 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b07990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b079f0 <col:11, col:35>
|       `-TextComment 0x5584a7b079c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a50138 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a500a8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a50368 <line:1339:1, line:1342:1>
| `-FullComment 0x5584a7b07d20 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x5584a7b07ae0 <line:1330:4>
|   | `-TextComment 0x5584a7b07ab0 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b07b00 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b07b60 <col:11, col:43>
|   |   `-TextComment 0x5584a7b07b30 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5584a7b07c00 <line:1332:3, line:1334:45>
|   | |-TextComment 0x5584a7b07b80 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5584a7b07ba0 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5584a7b07bc0 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b07c50 <line:1336:3>
|   | `-TextComment 0x5584a7b07c20 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b07c70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b07cd0 <col:11, col:35>
|       `-TextComment 0x5584a7b07ca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a50418 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5584a7a50388 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5584a7a50698 <line:1353:1, line:1356:1>
| `-FullComment 0x5584a7b08000 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x5584a7b07dc0 <line:1344:4>
|   | `-TextComment 0x5584a7b07d90 <col:4> Text=" "
|   |-BlockCommandComment 0x5584a7b07de0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b07e40 <col:11, col:43>
|   |   `-TextComment 0x5584a7b07e10 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5584a7b07ee0 <line:1346:3, line:1348:45>
|   | |-TextComment 0x5584a7b07e60 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5584a7b07e80 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5584a7b07ea0 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5584a7b07f30 <line:1350:3>
|   | `-TextComment 0x5584a7b07f00 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b07f50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5584a7b07fb0 <col:11, col:35>
|       `-TextComment 0x5584a7b07f80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5584a7a50740 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x5584a7b08290 <line:112:3, line:116:1>
|   |-ParagraphComment 0x5584a7b080a0 <line:112:3>
|   | `-TextComment 0x5584a7b08070 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b080c0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5584a7b08120 <col:10, col:64>
|   |   `-TextComment 0x5584a7b080f0 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x5584a7b08170 <line:114:3>
|   | `-TextComment 0x5584a7b08140 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b08190 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x5584a7b081f0 <col:11, col:40>
|   |   `-TextComment 0x5584a7b081c0 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x5584a7b08240 <line:116:1>
|     `-TextComment 0x5584a7b08210 <col:1> Text=" "
|-FunctionDecl 0x5584a7a50900 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x5584a7b08520 <line:121:3, line:125:1>
|   |-ParagraphComment 0x5584a7b08330 <line:121:3>
|   | `-TextComment 0x5584a7b08300 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b08350 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5584a7b083b0 <col:10, col:46>
|   |   `-TextComment 0x5584a7b08380 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x5584a7b08400 <line:123:3>
|   | `-TextComment 0x5584a7b083d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b08420 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x5584a7b08480 <col:11, col:40>
|   |   `-TextComment 0x5584a7b08450 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x5584a7b084d0 <line:125:1>
|     `-TextComment 0x5584a7b084a0 <col:1> Text=" "
|-RecordDecl 0x5584a7a509a0 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x5584a7a50cc8 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x5584a7a50c60 'void (*)(struct _timeout *)'
|   `-ParenType 0x5584a7a50c00 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x5584a7a50bc0 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x5584a78ba550 'void'
|       `-PointerType 0x5584a7a50ac0 'struct _timeout *'
|         `-ElaboratedType 0x5584a7a50a50 'struct _timeout' sugar
|           `-RecordType 0x5584a7a50a20 'struct _timeout'
|             `-Record 0x5584a7a50d20 '_timeout'
|-RecordDecl 0x5584a7a50d20 prev 0x5584a7a509a0 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x5584a7a50db0 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x5584a7a50e38 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x5584a7a50ec8 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x5584a7a50f18 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x5584a7a50fe0 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x5584a7a51088 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x5584a7a51030 'struct k_spinlock_key' sugar
|   `-RecordType 0x5584a7a50fa0 'struct k_spinlock_key'
|     `-Record 0x5584a7a50f18 'k_spinlock_key'
|-RecordDecl 0x5584a7a510e0 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x5584a7a53bf0 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x5584a7a53ae8 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x5584a7a53fe0 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x5584a7a53d78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5584a7a53d60 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5584a7a53d40 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x5584a7a53cf0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x5584a7a53ae8 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x5584a7a53e18 <line:65:2, col:20>
| | | `-VarDecl 0x5584a7a53db0 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key' nrvo
| | |-BinaryOperator 0x5584a7a53f20 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x5584a7a53e50 <col:2, col:4> 'int' lvalue .key 0x5584a7a50fe0
| | | | `-DeclRefExpr 0x5584a7a53e30 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x5584a7a53db0 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x5584a7a53f08 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x5584a7a53ee8 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x5584a7a53ed0 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x5584a7a53e80 <col:10> 'unsigned int (void)' Function 0x5584a7a29448 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x5584a7a53fc8 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x5584a7a53fb0 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a7a53f90 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x5584a7a53db0 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x5584a7a53c98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5584a7a541d0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x5584a7a54038 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x5584a7a540b0 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x5584a7a544a0 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x5584a7a54360 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5584a7a54348 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5584a7a54328 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x5584a7a542d8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x5584a7a54038 'l' 'struct k_spinlock *'
| | `-CallExpr 0x5584a7a54448 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x5584a7a54430 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5584a7a54388 <col:2> 'void (unsigned int)' Function 0x5584a7a295c0 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x5584a7a54488 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x5584a7a54470 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5584a7a543c8 <col:18, col:22> 'int' lvalue .key 0x5584a7a50fe0
| |         `-DeclRefExpr 0x5584a7a543a8 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x5584a7a540b0 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x5584a7a54280 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5584a7a545f0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x5584a7a544e8 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x5584a7a547f8 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x5584a7a54778 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5584a7a54760 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5584a7a54740 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x5584a7a546f0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x5584a7a544e8 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x5584a7a54698 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x5584a7a54810 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x5584a7b08780 <line:18:3, line:20:5>
| | |-ParagraphComment 0x5584a7b085c0 <line:18:3>
| | | `-TextComment 0x5584a7b08590 <col:3> Text=" "
| | |-VerbatimLineComment 0x5584a7b085e0 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x5584a7b08650 <line:19:3>
| | | `-TextComment 0x5584a7b08620 <col:3> Text=" "
| | |-VerbatimLineComment 0x5584a7b08670 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x5584a7b08730 <line:20:3, col:5>
| |   |-TextComment 0x5584a7b086b0 <col:3> Text=" "
| |   |-TextComment 0x5584a7b086d0 <col:4> Text="@"
| |   `-TextComment 0x5584a7b086f0 <col:5> Text="{"
| |-EnumConstantDecl 0x5584a7a54908 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x5584a7b08850 <line:24:5, col:55>
| |   `-ParagraphComment 0x5584a7b08820 <col:5, col:55>
| |     `-TextComment 0x5584a7b087f0 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x5584a7a54988 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x5584a7b08920 <line:27:5, col:34>
| |   `-ParagraphComment 0x5584a7b088f0 <col:5, col:34>
| |     `-TextComment 0x5584a7b088c0 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x5584a7a54a08 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x5584a7b089f0 <line:30:5, col:50>
| |   `-ParagraphComment 0x5584a7b089c0 <col:5, col:50>
| |     `-TextComment 0x5584a7b08990 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x5584a7a55c00 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x5584a7b08ac0 <line:33:5, col:38>
| |   `-ParagraphComment 0x5584a7b08a90 <col:5, col:38>
| |     `-TextComment 0x5584a7b08a60 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x5584a7a55c78 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x5584a7b08b90 <line:36:5, col:34>
|     `-ParagraphComment 0x5584a7b08b60 <col:5, col:34>
|       `-TextComment 0x5584a7b08b30 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x5584a7a55de0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x5584a7a55d10 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x5584a7b08e70 <line:45:3, line:50:44>
|   |-ParagraphComment 0x5584a7b08c30 <line:45:3>
|   | `-TextComment 0x5584a7b08c00 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b08c50 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7b08cb0 <col:10, col:42>
|   |   `-TextComment 0x5584a7b08c80 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x5584a7b08d20 <line:47:3, line:48:76>
|   | |-TextComment 0x5584a7b08cd0 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x5584a7b08cf0 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x5584a7b08d70 <line:50:3>
|   | `-TextComment 0x5584a7b08d40 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7b08d90 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x5584a7b08e20 <col:17, col:44>
|       `-TextComment 0x5584a7b08df0 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x5584a7a56030 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x5584a7a55ed0 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x5584a7a55f50 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x5584a7b09550 <line:55:3, line:81:71>
|   |-ParagraphComment 0x5584a7b08f10 <line:55:3>
|   | `-TextComment 0x5584a7b08ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b08f30 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5584a7b08f90 <col:10, col:36>
|   |   `-TextComment 0x5584a7b08f60 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x5584a7b09000 <line:57:3, line:58:67>
|   | |-TextComment 0x5584a7b08fb0 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x5584a7b08fd0 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x5584a7b090a0 <line:60:3, line:62:71>
|   | |-TextComment 0x5584a7b09020 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x5584a7b09040 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x5584a7b09060 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x5584a7b09110 <line:64:3, line:65:11>
|   | |-TextComment 0x5584a7b090c0 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x5584a7b090e0 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x5584a7b09160 <line:67:3, col:42>
|   | `-TextComment 0x5584a7b09130 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x5584a7b092f0 <line:69:3, line:77:23>
|   | |-TextComment 0x5584a7b09180 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x5584a7b091a0 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x5584a7b091c0 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x5584a7b091e0 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x5584a7b09200 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x5584a7b09220 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x5584a7b09240 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x5584a7b09260 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x5584a7b09280 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x5584a7b09340 <line:79:3>
|   | `-TextComment 0x5584a7b09310 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b09360 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b09410 <line:79:17, line:80:3>
|   |   |-TextComment 0x5584a7b093c0 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x5584a7b093e0 <line:80:3> Text=" "
|   `-ParamCommandComment 0x5584a7b09430 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x5584a7b094e0 <line:80:14, line:81:71>
|       |-TextComment 0x5584a7b09490 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x5584a7b094b0 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x5584a7a56238 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x5584a7a56120 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x5584a7a561a0 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x5584a7b0b970 <line:86:3, line:97:71>
|   |-ParagraphComment 0x5584a7b095f0 <line:86:3, col:50>
|   | `-TextComment 0x5584a7b095c0 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x5584a7b09690 <line:88:3, line:90:31>
|   | |-TextComment 0x5584a7b09610 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x5584a7b09630 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x5584a7b09650 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x5584a7b09700 <line:92:3, line:93:24>
|   | |-TextComment 0x5584a7b096b0 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x5584a7b096d0 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x5584a7b09750 <line:95:3>
|   | `-TextComment 0x5584a7b09720 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b09770 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b09820 <line:95:17, line:96:3>
|   |   |-TextComment 0x5584a7b097d0 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x5584a7b097f0 <line:96:3> Text=" "
|   `-ParamCommandComment 0x5584a7b0b870 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x5584a7b0b920 <line:96:14, line:97:71>
|       |-TextComment 0x5584a7b0b8d0 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x5584a7b0b8f0 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x5584a7a56740 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x5584a7a563f0 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x5584a7a56470 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x5584a7a56590 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x5584a7a56610 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x5584a7a56688 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x5584a7a5bd08 <line:70:1, line:73:1>
| | `-ReturnStmt 0x5584a7a56a08 <line:71:2, line:72:11>
| |   `-CallExpr 0x5584a7a56948 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x5584a7a56930 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a56808 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x5584a7a2a428 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x5584a7a56990 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a56828 <col:34> 'unsigned int' lvalue ParmVar 0x5584a7a563f0 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x5584a7a569a8 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a56848 <col:39> 'unsigned int' lvalue ParmVar 0x5584a7a56470 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x5584a7a569c0 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a56868 <col:49> 'void (*)(void *)' lvalue ParmVar 0x5584a7a56590 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x5584a7a569d8 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a56888 <col:58> 'void *' lvalue ParmVar 0x5584a7a56610 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x5584a7a569f0 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x5584a7a568a8 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7a56688 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x5584a7b0bfe0 <line:54:3, line:64:48>
|   |-ParagraphComment 0x5584a7b0ba10 <line:54:3, col:33>
|   | `-TextComment 0x5584a7b0b9e0 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x5584a7b0ba60 <line:56:3, col:80>
|   | `-TextComment 0x5584a7b0ba30 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x5584a7b0bab0 <line:58:3>
|   | `-TextComment 0x5584a7b0ba80 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0bad0 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0bb80 <line:58:14, line:59:3>
|   |   |-TextComment 0x5584a7b0bb30 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x5584a7b0bb50 <line:59:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0bba0 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b0bc50 <line:59:19, line:60:3>
|   |   |-TextComment 0x5584a7b0bc00 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x5584a7b0bc20 <line:60:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0bc70 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b0bd20 <line:60:18, line:61:3>
|   |   |-TextComment 0x5584a7b0bcd0 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x5584a7b0bcf0 <line:61:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0bd40 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b0bdf0 <line:61:20, line:62:3>
|   |   |-TextComment 0x5584a7b0bda0 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x5584a7b0bdc0 <line:62:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0be10 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x5584a7b0bea0 <col:16, col:53>
|   |   `-TextComment 0x5584a7b0be70 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x5584a7b0bef0 <line:64:3>
|   | `-TextComment 0x5584a7b0bec0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b0bf10 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x5584a7b0bf70 <col:11, col:48>
|       `-TextComment 0x5584a7b0bf40 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x5584a7a5bdf8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x5584a7b0c200 <line:21:3, line:26:59>
|   |-ParagraphComment 0x5584a7b0c080 <line:21:3, col:57>
|   | `-TextComment 0x5584a7b0c050 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x5584a7b0c0f0 <line:23:3, line:24:52>
|   | |-TextComment 0x5584a7b0c0a0 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x5584a7b0c0c0 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x5584a7b0c140 <line:26:3>
|   | `-TextComment 0x5584a7b0c110 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b0c160 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x5584a7b0c1c0 <col:11, col:59>
|       `-TextComment 0x5584a7b0c190 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x5584a7a5bef8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x5584a7a5bfc0 prev 0x5584a7a5bdf8 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x5584a7a5c2a8 <line:26:1, line:34:1>
|   |-DoStmt 0x5584a7a5c1b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7a5c180 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7a5c120 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7a5c198 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7a5c268 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x5584a7a5c248 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x5584a7a5c230 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5584a7a5c1d8 <col:9> 'int *()' Function 0x5584a7a5bef8 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x5584a7a5c2c8 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x5584a7a5c388 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x5584a7a5c440 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x5584a7a5c3e0 'struct _wait_q_t' sugar
|   `-RecordType 0x5584a7a5c350 '_wait_q_t'
|     `-Record 0x5584a7a5c2c8 ''
|-RecordDecl 0x5584a7a5c4b0 prev 0x5584a7a255a8 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x5584a7a5c530 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x5584a7a5c5d8 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x5584a7a5c688 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x5584a7a5c738 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x5584a7a5c7e8 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x5584a7a5c898 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x5584a7a5c948 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x5584a7a5c9f8 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x5584a7a5caa8 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x5584a7a5cb58 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x5584a7a5cc08 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x5584a7a68028 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x5584a7a680d8 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x5584a7a68188 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x5584a7a68238 prev 0x5584a7a25628 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x5584a7a682b8 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x5584a7a68368 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x5584a7a68448 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x5584a7b0c400 <line:140:3, line:144:33>
| | |-ParagraphComment 0x5584a7b0c2a0 <line:140:3>
| | | `-TextComment 0x5584a7b0c270 <col:3> Text=" "
| | |-BlockCommandComment 0x5584a7b0c2c0 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x5584a7b0c320 <col:10, col:29>
| | |   `-TextComment 0x5584a7b0c2f0 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x5584a7b0c3c0 <line:142:3, line:144:33>
| |   |-TextComment 0x5584a7b0c340 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x5584a7b0c360 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x5584a7b0c380 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x5584a7a68518 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x5584a7a68598 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x5584a7a685e8 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x5584a7a68638 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x5584a7a68688 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x5584a7a686d8 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x5584a7a68728 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x5584a7a68778 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x5584a7a687c8 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x5584a7a68818 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x5584a7a68868 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x5584a7a688b8 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x5584a7a68908 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x5584a7a68958 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x5584a7a689a8 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x5584a7a689f8 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x5584a7a68a48 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x5584a7a68a98 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x5584a7a68ae8 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x5584a7a68b38 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x5584a7a68b88 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x5584a7a68bd8 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x5584a7a68c28 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x5584a7a68c78 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x5584a7a68cc8 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x5584a7a68d18 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x5584a7a68d68 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x5584a7a68db8 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x5584a7a68e08 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x5584a7a68e58 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x5584a7a68ea8 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x5584a7a68ef8 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x5584a7a68f48 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x5584a7a68f98 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x5584a7a6eda0 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x5584a7a6edf0 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x5584a7a6ee68 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x5584a7b0c520 <line:156:5, col:13>
|     `-ParagraphComment 0x5584a7b0c4f0 <col:5, col:13>
|       |-TextComment 0x5584a7b0c470 <col:5> Text=" "
|       `-InlineCommandComment 0x5584a7b0c4c0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x5584a7a6efc0 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x5584a7a6ef30 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x5584a7a6f148 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x5584a7a6f0f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5584a7a6f0d8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5584a7a6f0b8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5584a7a6f068 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x5584a7a6ef30 'obj' 'void *'
| `-FullComment 0x5584a7b0c640 <line:227:3, col:12>
|   `-ParagraphComment 0x5584a7b0c610 <col:3, col:12>
|     |-TextComment 0x5584a7b0c590 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b0c5e0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7a6f320 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5584a7a6f178 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x5584a7a6f208 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x5584a7a6f558 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x5584a7a6f458 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5584a7a6f440 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5584a7a6f420 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x5584a7a6f3d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x5584a7a6f178 'object' 'void *'
| | `-CStyleCastExpr 0x5584a7a6f508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5584a7a6f4f0 <col:29, col:31> 'struct k_thread *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5584a7a6f4d0 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x5584a7a6f480 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x5584a7a6f208 'thread' 'struct k_thread *'
| `-FullComment 0x5584a7b0c730 <line:235:3, col:12>
|   `-ParagraphComment 0x5584a7b0c700 <col:3, col:12>
|     |-TextComment 0x5584a7b0c6b0 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b0c6d0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7a6f6b8 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5584a7a6f590 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x5584a7a6f620 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x5584a7a6f8f8 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x5584a7a6f7f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5584a7a6f7d8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5584a7a6f7b8 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x5584a7a6f768 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x5584a7a6f590 'object' 'void *'
| | `-CStyleCastExpr 0x5584a7a6f8a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5584a7a6f888 <col:29, col:31> 'struct k_thread *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5584a7a6f868 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x5584a7a6f818 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x5584a7a6f620 'thread' 'struct k_thread *'
| `-FullComment 0x5584a7b0c820 <line:245:3, col:12>
|   `-ParagraphComment 0x5584a7b0c7f0 <col:3, col:12>
|     |-TextComment 0x5584a7b0c7a0 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b0c7c0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7a6f9c0 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5584a7a6f930 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x5584a7a6fb18 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x5584a7a6faf0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5584a7a6fad8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5584a7a6fab8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5584a7a6fa68 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x5584a7a6f930 'object' 'void *'
| `-FullComment 0x5584a7b0c910 <line:255:3, col:12>
|   `-ParagraphComment 0x5584a7b0c8e0 <col:3, col:12>
|     |-TextComment 0x5584a7b0c890 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b0c8b0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7a6fbd8 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x5584a7a6fb48 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x5584a7a6fd58 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x5584a7a6fd08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x5584a7a6fcf0 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
|       `-ParenExpr 0x5584a7a6fcd0 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x5584a7a6fc80 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x5584a7a6fb48 'object' 'void *'
|-FunctionDecl 0x5584a7a69438 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5584a7a69310 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x5584a7a693a0 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x5584a7b0cc70 <line:270:3, line:277:53>
|   |-ParagraphComment 0x5584a7b0c9b0 <line:270:3, col:43>
|   | `-TextComment 0x5584a7b0c980 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x5584a7b0ca50 <line:272:3, line:274:67>
|   | |-TextComment 0x5584a7b0c9d0 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x5584a7b0c9f0 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x5584a7b0ca10 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x5584a7b0caa0 <line:276:3>
|   | `-TextComment 0x5584a7b0ca70 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0cac0 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0cb70 <line:276:17, line:277:3>
|   |   |-TextComment 0x5584a7b0cb20 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x5584a7b0cb40 <line:277:3> Text=" "
|   `-ParamCommandComment 0x5584a7b0cb90 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x5584a7b0cc20 <col:17, col:53>
|       `-TextComment 0x5584a7b0cbf0 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x5584a7a69658 prev 0x5584a7a6f6b8 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x5584a7a69530 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x5584a7a695c0 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x5584a7b0cfd0 <line:282:3, line:289:54>
|   |-ParagraphComment 0x5584a7b0cd10 <line:282:3, col:46>
|   | `-TextComment 0x5584a7b0cce0 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x5584a7b0cdb0 <line:284:3, line:286:67>
|   | |-TextComment 0x5584a7b0cd30 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x5584a7b0cd50 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x5584a7b0cd70 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x5584a7b0ce00 <line:288:3>
|   | `-TextComment 0x5584a7b0cdd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0ce20 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0ced0 <line:288:17, line:289:3>
|   |   |-TextComment 0x5584a7b0ce80 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x5584a7b0cea0 <line:289:3> Text=" "
|   `-ParamCommandComment 0x5584a7b0cef0 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x5584a7b0cf80 <col:17, col:54>
|       `-TextComment 0x5584a7b0cf50 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x5584a7a697e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5584a7a69750 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x5584a7b0d300 <line:294:3, line:301:1>
|   |-ParagraphComment 0x5584a7b0d070 <line:294:3>
|   | `-TextComment 0x5584a7b0d040 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0d090 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5584a7b0d0f0 <col:10, col:27>
|   |   `-TextComment 0x5584a7b0d0c0 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x5584a7b0d160 <line:296:3, line:297:72>
|   | |-TextComment 0x5584a7b0d110 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x5584a7b0d130 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x5584a7b0d1b0 <line:299:3>
|   | `-TextComment 0x5584a7b0d180 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0d1d0 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0d260 <col:17, col:42>
|   |   `-TextComment 0x5584a7b0d230 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x5584a7b0d2b0 <line:301:1>
|     `-TextComment 0x5584a7b0d280 <col:1> Text=" "
|-FunctionDecl 0x5584a7a69960 prev 0x5584a7a6fbd8 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x5584a7a698d0 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x5584a7b0d6c0 <line:305:3, line:319:41>
|   |-ParagraphComment 0x5584a7b0d3a0 <line:305:3, col:59>
|   | `-TextComment 0x5584a7b0d370 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x5584a7b0d460 <line:307:3, line:310:59>
|   | |-TextComment 0x5584a7b0d3c0 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x5584a7b0d3e0 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x5584a7b0d400 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x5584a7b0d420 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x5584a7b0d500 <line:312:3, line:314:43>
|   | |-TextComment 0x5584a7b0d480 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x5584a7b0d4a0 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x5584a7b0d4c0 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x5584a7b0d570 <line:316:3, line:317:25>
|   | |-TextComment 0x5584a7b0d520 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x5584a7b0d540 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x5584a7b0d5c0 <line:319:3>
|   | `-TextComment 0x5584a7b0d590 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7b0d5e0 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x5584a7b0d670 <col:17, col:41>
|       `-TextComment 0x5584a7b0d640 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x5584a7a69ba8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5584a7a69a98 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x5584a7b0da90 <line:324:3, line:335:12>
|   |-ParagraphComment 0x5584a7b0d760 <line:324:3, col:48>
|   | `-TextComment 0x5584a7b0d730 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x5584a7b0d820 <line:326:3, line:329:78>
|   | |-TextComment 0x5584a7b0d780 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x5584a7b0d7a0 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x5584a7b0d7c0 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x5584a7b0d7e0 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x5584a7b0d880 <line:331:3, col:59>
|   | `-TextComment 0x5584a7b0d840 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x5584a7b0d8d0 <line:333:3>
|   | `-TextComment 0x5584a7b0d8a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0d8f0 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0d9a0 <line:333:16, line:334:3>
|   |   |-TextComment 0x5584a7b0d950 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x5584a7b0d970 <line:334:3> Text=" "
|   `-BlockCommandComment 0x5584a7b0d9c0 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x5584a7b0da40 <line:334:11, line:335:12>
|       |-TextComment 0x5584a7b0d9f0 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x5584a7b0da10 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x5584a7a69d08 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5584a7a69c70 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x5584a7a69f18 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x5584a7a69e38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x5584a7a69e20 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue> part_of_explicit_cast
|   |   `-ParenExpr 0x5584a7a69e00 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x5584a7a69db0 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x5584a7a69c70 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x5584a7a69ee0 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x5584a7a69ec0 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x5584a7a69e98 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x5584a7a69e60 <col:23> 'int' 0
|-FunctionDecl 0x5584a7a69fe0 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x5584a7a69f50 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x5584a7a6a168 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x5584a7a6a110 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5584a7a6a0f8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5584a7a6a0d8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5584a7a6a088 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x5584a7a69f50 'obj' 'void *'
| `-FullComment 0x5584a7b0dcf0 <line:359:3, line:362:1>
|   |-ParagraphComment 0x5584a7b0db30 <line:359:3>
|   | `-TextComment 0x5584a7b0db00 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0db50 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x5584a7b0dbb0 <col:10, col:24>
|   |   `-TextComment 0x5584a7b0db80 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x5584a7b0dc00 <line:361:3>
|   | `-TextComment 0x5584a7b0dbd0 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7b0dc20 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x5584a7b0dcb0 <col:1>
|       `-TextComment 0x5584a7b0dc80 <col:1> Text=" "
|-RecordDecl 0x5584a7a6a180 prev 0x5584a7a256d8 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x5584a7a6a200 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x5584a7a6a268 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x5584a7a6c458 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x5584a7a6c508 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x5584a7a6c5c8 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x5584a7a6c638 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x5584a7a6c6f0 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x5584a7a6c750 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x5584a7a6c6f0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x5584a7a6c5c8 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x5584a7a6c7a8 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x5584a7a6c6f0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x5584a7a6c638 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x5584a7a6c890 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x5584a7a6c8f0 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x5584a7a6c950 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x5584a7a6c9a0 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x5584a7a6ca48 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x5584a7a6cb08 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x5584a7a6cb68 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x5584a7a6cc20 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x5584a7a6cc80 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x5584a7a6cc20 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x5584a7a6cb08 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x5584a7a6ccd8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x5584a7a6cc20 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x5584a7a6cb68 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x5584a7a6cd30 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x5584a7a6ce40 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x5584a7a6cea8 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x5584a7a6ce40 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x5584a7a6cc20 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x5584a7a6cb08 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x5584a7a6cf08 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x5584a7a6ce40 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x5584a7a6cc20 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x5584a7a6cb68 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x5584a7a6cf60 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x5584a7a6ce40 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x5584a7a6cd30 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x5584a7a6cfb8 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x5584a7a6d020 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x5584a7a6d178 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x5584a7a6d120 'struct _thread_base' sugar
|   `-RecordType 0x5584a7a6c4e0 'struct _thread_base'
|     `-Record 0x5584a7a6c458 '_thread_base'
|-RecordDecl 0x5584a7a6d1f8 prev 0x5584a7a5c4b0 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x5584a7b0de60 <line:542:3, line:543:19>
| | |-ParagraphComment 0x5584a7b0dd90 <line:542:3>
| | | `-TextComment 0x5584a7b0dd60 <col:3> Text=" "
| | |-VerbatimLineComment 0x5584a7b0ddb0 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x5584a7b0de20 <line:543:3, col:19>
| |   `-TextComment 0x5584a7b0ddf0 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x5584a7a6d298 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x5584a7a6d318 parent 0x5584a78ba4f8 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x5584a7a71e10 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x5584a7b0df30 <line:549:5, col:59>
| |   `-ParagraphComment 0x5584a7b0df00 <col:5, col:59>
| |     `-TextComment 0x5584a7b0ded0 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x5584a7a71ea0 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x5584a7b0e000 <line:552:5, col:29>
| |   `-ParagraphComment 0x5584a7b0dfd0 <col:5, col:29>
| |     `-TextComment 0x5584a7b0dfa0 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x5584a7a72050 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x5584a7b0e170 <line:556:4, line:558:4>
| |   `-ParagraphComment 0x5584a7b0e140 <line:556:4, line:558:4>
| |     |-TextComment 0x5584a7b0e070 <line:556:4, col:18> Text=" abort function"
| |     |-TextComment 0x5584a7b0e090 <line:557:4> Text=" "
| |     |-InlineCommandComment 0x5584a7b0e0e0 <col:5, col:8> Name="ref" RenderNormal Arg[0]="K-THREAD-002"
| |     `-TextComment 0x5584a7b0e100 <line:558:4> Text=" "
| |-FieldDecl 0x5584a7a72198 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x5584a7b0e240 <line:613:5, col:19>
| |   `-ParagraphComment 0x5584a7b0e210 <col:5, col:19>
| |     `-TextComment 0x5584a7b0e1e0 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x5584a7a72218 parent 0x5584a78ba4f8 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x5584a7a72340 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x5584a7b0e310 <line:616:5, col:47>
|     `-ParagraphComment 0x5584a7b0e2e0 <col:5, col:47>
|       `-TextComment 0x5584a7b0e2b0 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x5584a7a72488 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x5584a79b3f80 'struct k_thread' sugar
|   `-RecordType 0x5584a79b3ee0 'struct k_thread'
|     `-Record 0x5584a7a6d1f8 'k_thread'
|-TypedefDecl 0x5584a7a72508 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x5584a79b3ff0 'struct k_thread *'
|   `-ElaboratedType 0x5584a79b3f80 'struct k_thread' sugar
|     `-RecordType 0x5584a79b3ee0 'struct k_thread'
|       `-Record 0x5584a7a6d1f8 'k_thread'
|-EnumDecl 0x5584a7a72560 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x5584a7a72660 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-ConstantExpr 0x5584a7a72648 <col:10> 'int'
| |   `-IntegerLiteral 0x5584a7a72628 <col:10> 'int' 0
| |-EnumConstantDecl 0x5584a7a726b0 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x5584a7a72700 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x5584a7a72a40 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x5584a7a729d0 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x5584a7a72970 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x5584a7a72930 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x5584a78ba550 'void'
| |     |-PointerType 0x5584a7a727b0 'const struct k_thread *'
| |     | `-QualType 0x5584a79b3f81 'const struct k_thread' const
| |     |   `-ElaboratedType 0x5584a79b3f80 'struct k_thread' sugar
| |     |     `-RecordType 0x5584a79b3ee0 'struct k_thread'
| |     |       `-Record 0x5584a7a6d1f8 'k_thread'
| |     `-PointerType 0x5584a78bad10 'void *'
| |       `-BuiltinType 0x5584a78ba550 'void'
| `-FullComment 0x5584a7b0e4d0 <line:630:3, line:631:5>
|   |-ParagraphComment 0x5584a7b0e3b0 <line:630:3>
|   | `-TextComment 0x5584a7b0e380 <col:3> Text=" "
|   |-VerbatimLineComment 0x5584a7b0e3d0 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x5584a7b0e490 <line:631:3, col:5>
|     |-TextComment 0x5584a7b0e410 <col:3> Text=" "
|     |-TextComment 0x5584a7b0e430 <col:4> Text="@"
|     `-TextComment 0x5584a7b0e450 <col:5> Text="{"
|-FunctionDecl 0x5584a7a72ca0 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x5584a7a72b08 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x5584a7a72b88 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x5584a7b0ebf0 <line:638:3, line:652:14>
|   |-ParagraphComment 0x5584a7b0e570 <line:638:3>
|   | `-TextComment 0x5584a7b0e540 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0e590 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5584a7b0e5f0 <col:10, col:53>
|   |   `-TextComment 0x5584a7b0e5c0 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x5584a7b0e660 <line:640:3, line:641:46>
|   | |-TextComment 0x5584a7b0e610 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x5584a7b0e630 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x5584a7b0e6b0 <line:643:3>
|   | `-TextComment 0x5584a7b0e680 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0e6d0 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0e780 <line:643:18, line:644:3>
|   |   |-TextComment 0x5584a7b0e730 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x5584a7b0e750 <line:644:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0e7a0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b0e830 <col:20, col:41>
|   |   `-TextComment 0x5584a7b0e800 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x5584a7b0e880 <line:646:3>
|   | `-TextComment 0x5584a7b0e850 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0e8a0 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x5584a7b0e950 <line:646:9, line:648:3>
|   |   |-TextComment 0x5584a7b0e8d0 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x5584a7b0e8f0 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x5584a7b0e910 <line:648:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0e970 <col:4, line:650:46> Name="note"
|   | `-ParagraphComment 0x5584a7b0eaa0 <line:648:9, line:650:46>
|   |   |-TextComment 0x5584a7b0e9a0 <line:648:9, col:23> Text=" This API uses "
|   |   |-InlineCommandComment 0x5584a7b0e9f0 <col:24, col:27> Name="ref" RenderNormal Arg[0]="k_spin_lock"
|   |   |-TextComment 0x5584a7b0ea10 <col:40, col:70> Text=" to protect the _kernel.threads"
|   |   |-TextComment 0x5584a7b0ea30 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   |   `-TextComment 0x5584a7b0ea50 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x5584a7b0eaf0 <line:652:3>
|   | `-TextComment 0x5584a7b0eac0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b0eb10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b0eb70 <col:11, col:14>
|       `-TextComment 0x5584a7b0eb40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a72eb0 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x5584a7a72d88 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x5584a7a72e18 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x5584a7b0f6e0 <line:657:3, line:681:72>
|   |-ParagraphComment 0x5584a7b0ec90 <line:657:3>
|   | `-TextComment 0x5584a7b0ec60 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0ecb0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x5584a7b0ed10 <col:10, col:69>
|   |   `-TextComment 0x5584a7b0ece0 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x5584a7b0edf0 <line:659:3, line:660:51>
|   | |-TextComment 0x5584a7b0ed30 <line:659:3, col:44> Text=" This routine works exactly the same like "
|   | |-InlineCommandComment 0x5584a7b0ed90 <col:45, col:48> Name="ref" RenderNormal Arg[0]="k_thread_foreach"
|   | `-TextComment 0x5584a7b0edb0 <line:660:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x5584a7b0ee40 <line:662:3>
|   | `-TextComment 0x5584a7b0ee10 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0ee60 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0ef10 <line:662:18, line:663:3>
|   |   |-TextComment 0x5584a7b0eec0 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x5584a7b0eee0 <line:663:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0ef30 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b0efc0 <col:20, col:41>
|   |   `-TextComment 0x5584a7b0ef90 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x5584a7b0f010 <line:665:3>
|   | `-TextComment 0x5584a7b0efe0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0f030 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x5584a7b0f0e0 <line:665:9, line:667:3>
|   |   |-TextComment 0x5584a7b0f060 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x5584a7b0f080 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x5584a7b0f0a0 <line:667:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0f100 <col:4, line:674:3> Name="note"
|   | `-ParagraphComment 0x5584a7b0f370 <line:667:9, line:674:3>
|   |   |-TextComment 0x5584a7b0f130 <line:667:9, col:23> Text=" This API uses "
|   |   |-InlineCommandComment 0x5584a7b0f180 <col:24, col:27> Name="ref" RenderNormal Arg[0]="k_spin_lock"
|   |   |-TextComment 0x5584a7b0f1a0 <col:40, col:79> Text=" only when accessing the _kernel.threads"
|   |   |-TextComment 0x5584a7b0f1c0 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   |   |-TextComment 0x5584a7b0f1e0 <line:669:3, col:38> Text=" If a new task is created when this "
|   |   |-InlineCommandComment 0x5584a7b0f230 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   |   |-TextComment 0x5584a7b0f250 <col:49, col:73> Text=" function is in progress,"
|   |   |-TextComment 0x5584a7b0f270 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   |   |-TextComment 0x5584a7b0f290 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   |   |-TextComment 0x5584a7b0f2b0 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   |   |-TextComment 0x5584a7b0f2d0 <line:673:3, col:15> Text=" enumeration."
|   |   `-TextComment 0x5584a7b0f2f0 <line:674:3> Text=" "
|   `-BlockCommandComment 0x5584a7b0f390 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x5584a7b0f670 <line:674:9, line:681:72>
|       |-TextComment 0x5584a7b0f3c0 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x5584a7b0f410 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x5584a7b0f430 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x5584a7b0f490 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x5584a7b0f4b0 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x5584a7b0f4d0 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x5584a7b0f4f0 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x5584a7b0f540 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x5584a7b0f560 <col:67, col:71> Text=" task"
|       |-TextComment 0x5584a7b0f580 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x5584a7b0f5a0 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x5584a7b0f5c0 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x5584a7b0f5e0 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x5584a7a73730 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x5584a7a730d0 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5584a7a73148 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5584a7a731c0 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7a73268 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5584a7a732e8 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x5584a7a73368 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x5584a7a733e8 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x5584a7a73468 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x5584a7a734e0 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5584a7a73558 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x5584a7b10540 <line:746:3, line:778:1>
|   |-ParagraphComment 0x5584a7b0f780 <line:746:3>
|   | `-TextComment 0x5584a7b0f750 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0f7a0 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x5584a7b0f800 <col:10, col:26>
|   |   `-TextComment 0x5584a7b0f7d0 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x5584a7b0f850 <line:748:3, col:70>
|   | `-TextComment 0x5584a7b0f820 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x5584a7b0f930 <line:750:3, line:753:11>
|   | |-TextComment 0x5584a7b0f890 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x5584a7b0f8b0 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x5584a7b0f8d0 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x5584a7b0f8f0 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x5584a7b0f9d0 <line:755:3, line:757:44>
|   | |-TextComment 0x5584a7b0f950 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x5584a7b0f970 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x5584a7b0f990 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x5584a7b0fa90 <line:759:3, line:762:13>
|   | |-TextComment 0x5584a7b0f9f0 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x5584a7b0fa10 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x5584a7b0fa30 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x5584a7b0fa50 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x5584a7b0fae0 <line:764:3>
|   | `-TextComment 0x5584a7b0fab0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0fb00 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0fbb0 <line:764:21, line:765:3>
|   |   |-TextComment 0x5584a7b0fb60 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x5584a7b0fb80 <line:765:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0fbd0 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b0fc80 <line:765:16, line:766:3>
|   |   |-TextComment 0x5584a7b0fc30 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x5584a7b0fc50 <line:766:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0fca0 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b0fd50 <line:766:21, line:767:3>
|   |   |-TextComment 0x5584a7b0fd00 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x5584a7b0fd20 <line:767:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0fd70 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b0fe20 <line:767:16, line:768:3>
|   |   |-TextComment 0x5584a7b0fdd0 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x5584a7b0fdf0 <line:768:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0fe40 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x5584a7b0fef0 <line:768:13, line:769:3>
|   |   |-TextComment 0x5584a7b0fea0 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x5584a7b0fec0 <line:769:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0ff10 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x5584a7b0ffc0 <line:769:13, line:770:3>
|   |   |-TextComment 0x5584a7b0ff70 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x5584a7b0ff90 <line:770:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0ffe0 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x5584a7b10090 <line:770:13, line:771:3>
|   |   |-TextComment 0x5584a7b10040 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x5584a7b10060 <line:771:3> Text=" "
|   |-ParamCommandComment 0x5584a7b100b0 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x5584a7b10160 <line:771:15, line:772:3>
|   |   |-TextComment 0x5584a7b10110 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x5584a7b10130 <line:772:3> Text=" "
|   |-ParamCommandComment 0x5584a7b10180 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x5584a7b10230 <line:772:18, line:773:3>
|   |   |-TextComment 0x5584a7b101e0 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x5584a7b10200 <line:773:3> Text=" "
|   |-ParamCommandComment 0x5584a7b10250 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x5584a7b102e0 <col:16, col:80>
|   |   `-TextComment 0x5584a7b102b0 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x5584a7b10330 <line:775:3>
|   | `-TextComment 0x5584a7b10300 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b10350 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x5584a7b103b0 <col:11, col:28>
|   |   `-TextComment 0x5584a7b10380 <col:11, col:28> Text=" ID of new thread."
|   `-ParagraphComment 0x5584a7b10480 <line:777:3, line:778:1>
|     |-TextComment 0x5584a7b103d0 <line:777:3> Text=" "
|     |-InlineCommandComment 0x5584a7b10420 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-001"
|     `-TextComment 0x5584a7b10440 <line:778:1> Text=" "
|-FunctionDecl 0x5584a7a73bc0 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5584a7a73858 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5584a7a738d8 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x5584a7a73958 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x5584a7a739d8 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x5584a7b10ad0 <line:787:3, line:794:1>
|   |-ParagraphComment 0x5584a7b105e0 <line:787:3>
|   | `-TextComment 0x5584a7b105b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b10600 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x5584a7b10660 <col:10, col:61>
|   |   `-TextComment 0x5584a7b10630 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x5584a7b106b0 <line:789:3>
|   | `-TextComment 0x5584a7b10680 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b106d0 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b10780 <line:789:16, line:790:3>
|   |   |-TextComment 0x5584a7b10730 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x5584a7b10750 <line:790:3> Text=" "
|   |-ParamCommandComment 0x5584a7b107a0 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b10850 <line:790:13, line:791:3>
|   |   |-TextComment 0x5584a7b10800 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x5584a7b10820 <line:791:3> Text=" "
|   |-ParamCommandComment 0x5584a7b10870 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b10920 <line:791:13, line:792:3>
|   |   |-TextComment 0x5584a7b108d0 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x5584a7b108f0 <line:792:3> Text=" "
|   `-ParamCommandComment 0x5584a7b10940 <col:4, line:794:1> [in] implicitly Param="p3" ParamIndex=3
|     `-ParagraphComment 0x5584a7b10a70 <line:792:13, line:794:1>
|       |-TextComment 0x5584a7b109a0 <line:792:13, col:38> Text=" 3rd entry point parameter"
|       |-TextComment 0x5584a7b109c0 <line:793:3> Text=" "
|       |-InlineCommandComment 0x5584a7b10a10 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-003"
|       `-TextComment 0x5584a7b10a30 <line:794:1> Text=" "
|-FunctionDecl 0x5584a7a74ed0 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x5584a7a73d00 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x5584a7a73d90 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x5584a7a75068 <line:833:1, line:835:1>
| | `-BinaryOperator 0x5584a7a75020 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x5584a7a74fb8 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x5584a7a72198
| |   | `-ImplicitCastExpr 0x5584a7a74fa0 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5584a7a74f80 <col:2> 'struct k_thread *' lvalue ParmVar 0x5584a7a73d00 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x5584a7a75008 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a7a74fe8 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x5584a7a73d90 'pool' 'struct k_mem_pool *'
| `-FullComment 0x5584a7b11000 <line:817:3, line:830:1>
|   |-ParagraphComment 0x5584a7b10b70 <line:817:3>
|   | `-TextComment 0x5584a7b10b40 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b10b90 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5584a7b10bf0 <col:10, col:51>
|   |   `-TextComment 0x5584a7b10bc0 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x5584a7b10c90 <line:819:3, line:821:51>
|   | |-TextComment 0x5584a7b10c10 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x5584a7b10c30 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x5584a7b10c50 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x5584a7b10d00 <line:823:3, line:824:17>
|   | |-TextComment 0x5584a7b10cb0 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x5584a7b10cd0 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x5584a7b10d50 <line:826:3>
|   | `-TextComment 0x5584a7b10d20 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b10d70 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b10e50 <line:826:17, line:828:3>
|   |   |-TextComment 0x5584a7b10dd0 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x5584a7b10df0 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x5584a7b10e10 <line:828:3> Text=" "
|   `-ParamCommandComment 0x5584a7b10e70 <col:4, line:830:1> [in] implicitly Param="pool" ParamIndex=1
|     `-ParagraphComment 0x5584a7b10fa0 <line:828:15, line:830:1>
|       |-TextComment 0x5584a7b10ed0 <line:828:15, col:48> Text=" Memory pool to use for resources."
|       |-TextComment 0x5584a7b10ef0 <line:829:3> Text=" "
|       |-InlineCommandComment 0x5584a7b10f40 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-005"
|       `-TextComment 0x5584a7b10f60 <line:830:1> Text=" "
|-FunctionDecl 0x5584a7a751a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5584a7a75090 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x5584a7b114c0 <line:855:3, line:862:63>
|   |-ParagraphComment 0x5584a7b110a0 <line:855:3>
|   | `-TextComment 0x5584a7b11070 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b110c0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7b11120 <col:10, col:42>
|   |   `-TextComment 0x5584a7b110f0 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x5584a7b111f0 <line:857:3, col:78>
|   | |-TextComment 0x5584a7b11140 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x5584a7b11190 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x5584a7b111b0 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x5584a7b11240 <line:859:3>
|   | `-TextComment 0x5584a7b11210 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b11260 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b112f0 <col:13, col:45>
|   |   `-TextComment 0x5584a7b112c0 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x5584a7b11340 <line:861:3>
|   | `-TextComment 0x5584a7b11310 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b11360 <col:4, line:862:63> Name="return"
|     `-ParagraphComment 0x5584a7b11460 <line:861:11, line:862:63>
|       |-TextComment 0x5584a7b11390 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|       |-TextComment 0x5584a7b113b0 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|       |-InlineCommandComment 0x5584a7b11400 <col:45, col:48> Name="ref" RenderNormal Arg[0]="k_wakeup"
|       `-TextComment 0x5584a7b11420 <col:58, col:63> Text=" call."
|-FunctionDecl 0x5584a7a75318 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5584a7a75288 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x5584a7b119b0 <line:867:3, line:878:63>
|   |-ParagraphComment 0x5584a7b11560 <line:867:3>
|   | `-TextComment 0x5584a7b11530 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b11580 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x5584a7b115e0 <col:10, col:70>
|   |   `-TextComment 0x5584a7b115b0 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x5584a7b116d0 <line:869:3, line:873:71>
|   | |-TextComment 0x5584a7b11600 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x5584a7b11620 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x5584a7b11640 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x5584a7b11660 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x5584a7b11680 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x5584a7b11720 <line:875:3>
|   | `-TextComment 0x5584a7b116f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b11740 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b117d0 <col:13, col:45>
|   |   `-TextComment 0x5584a7b117a0 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x5584a7b11820 <line:877:3>
|   | `-TextComment 0x5584a7b117f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b11840 <col:4, line:878:63> Name="return"
|     `-ParagraphComment 0x5584a7b11950 <line:877:11, line:878:63>
|       |-TextComment 0x5584a7b11870 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|       |-TextComment 0x5584a7b118a0 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|       |-InlineCommandComment 0x5584a7b118f0 <col:45, col:48> Name="ref" RenderNormal Arg[0]="k_wakeup"
|       `-TextComment 0x5584a7b11910 <col:58, col:63> Text=" call."
|-FunctionDecl 0x5584a7a754c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x5584a7a753f8 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x5584a7b11ce0 <line:883:3, line:888:14>
|   |-ParagraphComment 0x5584a7b11a50 <line:883:3>
|   | `-TextComment 0x5584a7b11a20 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b11a70 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5584a7b11ad0 <col:10, col:48>
|   |   `-TextComment 0x5584a7b11aa0 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x5584a7b11bc0 <line:885:3, line:886:32>
|   | |-TextComment 0x5584a7b11af0 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x5584a7b11b10 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x5584a7b11b60 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x5584a7b11b80 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x5584a7b11c10 <line:888:3>
|   | `-TextComment 0x5584a7b11be0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b11c30 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b11c90 <col:11, col:14>
|       `-TextComment 0x5584a7b11c60 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a75630 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x5584a7b12060 <line:893:3, line:901:1>
|   |-ParagraphComment 0x5584a7b11d80 <line:893:3>
|   | `-TextComment 0x5584a7b11d50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b11da0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5584a7b11e00 <col:10, col:35>
|   |   `-TextComment 0x5584a7b11dd0 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x5584a7b11ea0 <line:895:3, line:897:67>
|   | |-TextComment 0x5584a7b11e20 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x5584a7b11e40 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x5584a7b11e60 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x5584a7b11ef0 <line:899:3>
|   | `-TextComment 0x5584a7b11ec0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b11f10 <col:4, line:901:1> Name="return"
|     `-ParagraphComment 0x5584a7b12010 <line:899:11, line:901:1>
|       |-TextComment 0x5584a7b11f40 <line:899:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b11f60 <line:900:3> Text=" "
|       |-InlineCommandComment 0x5584a7b11fb0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-015"
|       `-TextComment 0x5584a7b11fd0 <line:901:1> Text=" "
|-FunctionDecl 0x5584a7a75810 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7a75708 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b125f0 <line:905:3, line:915:1>
|   |-ParagraphComment 0x5584a7b12100 <line:905:3>
|   | `-TextComment 0x5584a7b120d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b12120 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5584a7b12180 <col:10, col:36>
|   |   `-TextComment 0x5584a7b12150 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x5584a7b12250 <line:907:3, col:61>
|   | |-TextComment 0x5584a7b121a0 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x5584a7b121f0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5584a7b12210 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x5584a7b12320 <line:909:3, col:69>
|   | |-TextComment 0x5584a7b12270 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5584a7b122c0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5584a7b122e0 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x5584a7b12370 <line:911:3>
|   | `-TextComment 0x5584a7b12340 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b12390 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b12420 <col:17, col:38>
|   |   `-TextComment 0x5584a7b123f0 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x5584a7b12470 <line:913:3>
|   | `-TextComment 0x5584a7b12440 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b12490 <col:4, line:915:1> Name="return"
|     `-ParagraphComment 0x5584a7b12590 <line:913:11, line:915:1>
|       |-TextComment 0x5584a7b124c0 <line:913:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b124e0 <line:914:3> Text=" "
|       |-InlineCommandComment 0x5584a7b12530 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-014"
|       `-TextComment 0x5584a7b12550 <line:915:1> Text=" "
|-FunctionDecl 0x5584a7a759e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x5584a7b12900 <line:919:3, line:924:1>
|   |-ParagraphComment 0x5584a7b12690 <line:919:3>
|   | `-TextComment 0x5584a7b12660 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b126b0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5584a7b12710 <col:10, col:46>
|   |   `-TextComment 0x5584a7b126e0 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x5584a7b12760 <line:921:3>
|   | `-TextComment 0x5584a7b12730 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b12780 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x5584a7b127e0 <col:11, col:32>
|   |   `-TextComment 0x5584a7b127b0 <col:11, col:32> Text=" ID of current thread."
|   `-ParagraphComment 0x5584a7b128b0 <line:923:3, line:924:1>
|     |-TextComment 0x5584a7b12800 <line:923:3> Text=" "
|     |-InlineCommandComment 0x5584a7b12850 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-013"
|     `-TextComment 0x5584a7b12870 <line:924:1> Text=" "
|-FunctionDecl 0x5584a7a75b48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7a75ab8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b12e80 <line:928:3, line:941:1>
|   |-ParagraphComment 0x5584a7b129a0 <line:928:3>
|   | `-TextComment 0x5584a7b12970 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b129c0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x5584a7b12a20 <col:10, col:25>
|   |   `-TextComment 0x5584a7b129f0 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x5584a7b12bb0 <line:930:3, line:935:38>
|   | |-TextComment 0x5584a7b12a40 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x5584a7b12a90 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x5584a7b12ab0 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x5584a7b12ad0 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x5584a7b12af0 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x5584a7b12b10 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x5584a7b12b30 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x5584a7b12b50 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x5584a7b12c00 <line:937:3>
|   | `-TextComment 0x5584a7b12bd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b12c20 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b12cb0 <col:17, col:39>
|   |   `-TextComment 0x5584a7b12c80 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x5584a7b12d00 <line:939:3>
|   | `-TextComment 0x5584a7b12cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b12d20 <col:4, line:941:1> Name="return"
|     `-ParagraphComment 0x5584a7b12e20 <line:939:11, line:941:1>
|       |-TextComment 0x5584a7b12d50 <line:939:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b12d70 <line:940:3> Text=" "
|       |-InlineCommandComment 0x5584a7b12dc0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-012"
|       `-TextComment 0x5584a7b12de0 <line:941:1> Text=" "
|-FunctionDecl 0x5584a7a75cb8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7a75c28 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b13230 <line:946:3, line:954:1>
|   |-ParagraphComment 0x5584a7b12f20 <line:946:3>
|   | `-TextComment 0x5584a7b12ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b12f40 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5584a7b12fa0 <col:10, col:34>
|   |   `-TextComment 0x5584a7b12f70 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x5584a7b13040 <line:948:3, line:950:9>
|   | |-TextComment 0x5584a7b12fc0 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x5584a7b12fe0 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x5584a7b13000 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x5584a7b13090 <line:952:3>
|   | `-TextComment 0x5584a7b13060 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7b130b0 <col:4, line:954:1> [in] implicitly Param="thread" ParamIndex=0
|     `-ParagraphComment 0x5584a7b131e0 <line:952:17, line:954:1>
|       |-TextComment 0x5584a7b13110 <line:952:17, col:32> Text=" thread to start"
|       |-TextComment 0x5584a7b13130 <line:953:3> Text=" "
|       |-InlineCommandComment 0x5584a7b13180 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-011"
|       `-TextComment 0x5584a7b131a0 <line:954:1> Text=" "
|-RecordDecl 0x5584a7a75d88 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x5584a7a75e80 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x5584a7a75ee0 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x5584a7a75f48 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x5584a7a75fa8 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x5584a7a76010 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x5584a7a76078 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x5584a7a760e0 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x5584a7a76148 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x5584a7a761a8 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x5584a7a76208 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x5584a7a76300 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x5584a7a76368 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x5584a7a76568 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7a76458 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b13720 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x5584a7b132d0 <line:1044:3>
|   | `-TextComment 0x5584a7b132a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b132f0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5584a7b13350 <col:10, col:34>
|   |   `-TextComment 0x5584a7b13320 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x5584a7b133f0 <line:1046:3, col:39>
|   | |-TextComment 0x5584a7b13370 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x5584a7b133c0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x5584a7b13440 <line:1048:3>
|   | `-TextComment 0x5584a7b13410 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b13460 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b134f0 <col:17, col:55>
|   |   `-TextComment 0x5584a7b134c0 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x5584a7b13540 <line:1050:3>
|   | `-TextComment 0x5584a7b13510 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b13560 <col:4, line:1052:1> Name="return"
|     `-ParagraphComment 0x5584a7b136c0 <line:1050:11, line:1052:1>
|       |-TextComment 0x5584a7b13590 <line:1050:11, col:23> Text=" Priority of "
|       |-InlineCommandComment 0x5584a7b135e0 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|       |-TextComment 0x5584a7b13600 <line:1051:3> Text=" "
|       |-InlineCommandComment 0x5584a7b13650 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-009"
|       `-TextComment 0x5584a7b13670 <line:1052:1> Text=" "
|-FunctionDecl 0x5584a7a767e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5584a7a76648 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5584a7a766c8 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x5584a7b140e0 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x5584a7b137c0 <line:1056:3>
|   | `-TextComment 0x5584a7b13790 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b137e0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5584a7b13840 <col:10, col:34>
|   |   `-TextComment 0x5584a7b13810 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x5584a7b13900 <line:1058:3, col:54>
|   | |-TextComment 0x5584a7b13860 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x5584a7b138d0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x5584a7b139f0 <line:1060:3, line:1061:10>
|   | |-TextComment 0x5584a7b13920 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x5584a7b13970 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5584a7b13990 <col:74, col:76> Text=" is"
|   | `-TextComment 0x5584a7b139b0 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x5584a7b13ae0 <line:1063:3, line:1064:75>
|   | |-TextComment 0x5584a7b13a10 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x5584a7b13a30 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x5584a7b13a80 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5584a7b13aa0 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x5584a7b13b80 <line:1066:3, line:1068:41>
|   | |-TextComment 0x5584a7b13b00 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x5584a7b13b20 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x5584a7b13b40 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x5584a7b13c20 <line:1070:3, line:1072:20>
|   | |-TextComment 0x5584a7b13ba0 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x5584a7b13bc0 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x5584a7b13be0 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x5584a7b13c70 <line:1074:3>
|   | `-TextComment 0x5584a7b13c40 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b13c90 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b13d40 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x5584a7b13cf0 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x5584a7b13d10 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x5584a7b13d60 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b13df0 <col:15, col:28>
|   |   `-TextComment 0x5584a7b13dc0 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x5584a7b13e40 <line:1077:3>
|   | `-TextComment 0x5584a7b13e10 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b13e60 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x5584a7b13ee0 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x5584a7b13e90 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x5584a7b13eb0 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x5584a7b13f30 <line:1080:3>
|   | `-TextComment 0x5584a7b13f00 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b13f50 <col:4, line:1082:1> Name="return"
|     `-ParagraphComment 0x5584a7b14050 <line:1080:11, line:1082:1>
|       |-TextComment 0x5584a7b13f80 <line:1080:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b13fa0 <line:1081:3> Text=" "
|       |-InlineCommandComment 0x5584a7b13ff0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-008"
|       `-TextComment 0x5584a7b14010 <line:1082:1> Text=" "
|-FunctionDecl 0x5584a7a76958 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7a768c8 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b147b0 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x5584a7b14180 <line:1196:3>
|   | `-TextComment 0x5584a7b14150 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b141a0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5584a7b14200 <col:10, col:27>
|   |   `-TextComment 0x5584a7b141d0 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x5584a7b14410 <line:1198:3, line:1204:48>
|   | |-TextComment 0x5584a7b14220 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x5584a7b14270 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5584a7b14290 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x5584a7b142e0 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5584a7b14300 <col:66, col:69> Text=" are"
|   | |-TextComment 0x5584a7b14320 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x5584a7b14340 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x5584a7b14360 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x5584a7b14380 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x5584a7b143a0 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x5584a7b144e0 <line:1206:3, col:64>
|   | |-TextComment 0x5584a7b14430 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5584a7b14480 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5584a7b144a0 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x5584a7b14530 <line:1208:3>
|   | `-TextComment 0x5584a7b14500 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b14550 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b145e0 <col:17, col:41>
|   |   `-TextComment 0x5584a7b145b0 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x5584a7b14630 <line:1210:3>
|   | `-TextComment 0x5584a7b14600 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b14650 <col:4, line:1212:1> Name="return"
|     `-ParagraphComment 0x5584a7b14750 <line:1210:11, line:1212:1>
|       |-TextComment 0x5584a7b14680 <line:1210:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b146a0 <line:1211:3> Text=" "
|       |-InlineCommandComment 0x5584a7b146f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-005"
|       `-TextComment 0x5584a7b14710 <line:1212:1> Text=" "
|-FunctionDecl 0x5584a7a76ac8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7a76a38 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b14d60 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x5584a7b14850 <line:1216:3>
|   | `-TextComment 0x5584a7b14820 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b14870 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5584a7b148d0 <col:10, col:36>
|   |   `-TextComment 0x5584a7b148a0 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x5584a7b149c0 <line:1218:3, line:1219:50>
|   | |-TextComment 0x5584a7b148f0 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x5584a7b14940 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5584a7b14960 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x5584a7b14980 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x5584a7b14a90 <line:1221:3, col:70>
|   | |-TextComment 0x5584a7b149e0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5584a7b14a30 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5584a7b14a50 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x5584a7b14ae0 <line:1223:3>
|   | `-TextComment 0x5584a7b14ab0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b14b00 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b14b90 <col:17, col:40>
|   |   `-TextComment 0x5584a7b14b60 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x5584a7b14be0 <line:1225:3>
|   | `-TextComment 0x5584a7b14bb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b14c00 <col:4, line:1227:1> Name="return"
|     `-ParagraphComment 0x5584a7b14d00 <line:1225:11, line:1227:1>
|       |-TextComment 0x5584a7b14c30 <line:1225:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b14c50 <line:1226:3> Text=" "
|       |-InlineCommandComment 0x5584a7b14ca0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-006"
|       `-TextComment 0x5584a7b14cc0 <line:1227:1> Text=" "
|-FunctionDecl 0x5584a7a76d40 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x5584a7a76ba8 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x5584a7a76c28 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x5584a7b156b0 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x5584a7b14e00 <line:1231:3>
|   | `-TextComment 0x5584a7b14dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b14e20 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7b14e80 <col:10, col:44>
|   |   `-TextComment 0x5584a7b14e50 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x5584a7b14ef0 <line:1233:3, line:1234:23>
|   | |-TextComment 0x5584a7b14ea0 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x5584a7b14ec0 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x5584a7b150e0 <line:1236:3, line:1240:74>
|   | |-TextComment 0x5584a7b14f10 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x5584a7b14f60 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x5584a7b14f80 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x5584a7b14fa0 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x5584a7b14fc0 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x5584a7b14fe0 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x5584a7b15030 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x5584a7b15050 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x5584a7b15070 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x5584a7b151a0 <line:1242:3, line:1245:32>
|   | |-TextComment 0x5584a7b15100 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x5584a7b15120 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x5584a7b15140 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x5584a7b15160 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x5584a7b15240 <line:1247:3, line:1249:46>
|   | |-TextComment 0x5584a7b151c0 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x5584a7b151e0 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x5584a7b15200 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x5584a7b15390 <line:1251:3, col:65>
|   | |-TextComment 0x5584a7b15260 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x5584a7b152b0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x5584a7b152d0 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x5584a7b15320 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x5584a7b15340 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x5584a7b153e0 <line:1253:3>
|   | `-TextComment 0x5584a7b153b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b15400 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b154b0 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x5584a7b15460 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x5584a7b15480 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x5584a7b154d0 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b15560 <col:15, col:71>
|   |   `-TextComment 0x5584a7b15530 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x5584a7b155b0 <line:1256:3>
|   | `-TextComment 0x5584a7b15580 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b155d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b15630 <col:11, col:14>
|       `-TextComment 0x5584a7b15600 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a78080 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x5584a7b15af0 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x5584a7b15750 <line:1268:3>
|   | `-TextComment 0x5584a7b15720 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b15770 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5584a7b157d0 <col:10, col:58>
|   |   `-TextComment 0x5584a7b157a0 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x5584a7b15840 <line:1270:3, line:1271:36>
|   | |-TextComment 0x5584a7b157f0 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x5584a7b15810 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x5584a7b15890 <line:1273:3>
|   | `-TextComment 0x5584a7b15860 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b158c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b15920 <col:9, col:31>
|   |   `-TextComment 0x5584a7b158f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b15970 <line:1275:3>
|   | `-TextComment 0x5584a7b15940 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b15990 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x5584a7b15a10 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x5584a7b159c0 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x5584a7b159e0 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x5584a7b15a30 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x5584a7b15a90 <col:11, col:37>
|       `-TextComment 0x5584a7b15a60 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x5584a7a781e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x5584a7b16000 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x5584a7b15b90 <line:1281:3>
|   | `-TextComment 0x5584a7b15b60 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b15bb0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5584a7b15c10 <col:10, col:63>
|   |   `-TextComment 0x5584a7b15be0 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x5584a7b15cb0 <line:1283:3, line:1285:52>
|   | |-TextComment 0x5584a7b15c30 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x5584a7b15c50 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x5584a7b15c70 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x5584a7b15d50 <line:1287:3, line:1289:45>
|   | |-TextComment 0x5584a7b15cd0 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x5584a7b15cf0 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x5584a7b15d10 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x5584a7b15da0 <line:1291:3>
|   | `-TextComment 0x5584a7b15d70 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b15dc0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b15e20 <col:9, col:31>
|   |   `-TextComment 0x5584a7b15df0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b15e70 <line:1293:3>
|   | `-TextComment 0x5584a7b15e40 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b15e90 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x5584a7b15f10 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x5584a7b15ec0 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x5584a7b15ee0 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x5584a7b15f30 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5584a7b15f90 <col:11, col:55>
|       `-TextComment 0x5584a7b15f60 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x5584a7a78350 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x5584a7a78598 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x5584a7a78478 <line:1311:2, col:31>
| | | `-VarDecl 0x5584a7a78400 parent 0x5584a78ba4f8 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x5584a7a784f8 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x5584a7a784e0 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x5584a7a784c8 <col:9, col:10> 'int' prefix '!' cannot overflow
| |       `-ImplicitCastExpr 0x5584a7a784b0 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a7a78490 <col:10> 'bool' lvalue Var 0x5584a7a78400 'z_sys_post_kernel' 'bool'
| `-FullComment 0x5584a7b16430 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x5584a7b160a0 <line:1299:3>
|   | `-TextComment 0x5584a7b16070 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b160c0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5584a7b16120 <col:10, col:64>
|   |   `-TextComment 0x5584a7b160f0 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x5584a7b16190 <line:1301:3, line:1302:62>
|   | |-TextComment 0x5584a7b16140 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x5584a7b16160 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x5584a7b161e0 <line:1304:3>
|   | `-TextComment 0x5584a7b161b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b16200 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b16260 <col:9, col:31>
|   |   `-TextComment 0x5584a7b16230 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b162b0 <line:1306:3>
|   | `-TextComment 0x5584a7b16280 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b162d0 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x5584a7b16350 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x5584a7b16300 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x5584a7b16320 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x5584a7b16370 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5584a7b163d0 <col:11, col:67>
|       `-TextComment 0x5584a7b163a0 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x5584a7a78650 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x5584a7b16900 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x5584a7b164d0 <line:1326:3>
|   | `-TextComment 0x5584a7b164a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b164f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5584a7b16550 <col:10, col:29>
|   |   `-TextComment 0x5584a7b16520 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x5584a7b16640 <line:1328:3, line:1332:78>
|   | |-TextComment 0x5584a7b16570 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x5584a7b16590 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x5584a7b165b0 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x5584a7b165d0 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x5584a7b165f0 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x5584a7b16690 <line:1334:3, col:42>
|   | `-TextComment 0x5584a7b16660 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x5584a7b166e0 <line:1336:3>
|   | `-TextComment 0x5584a7b166b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b16700 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x5584a7b167d0 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x5584a7b16730 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x5584a7b16750 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x5584a7b16770 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x5584a7b16790 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x5584a7b16820 <line:1341:3>
|   | `-TextComment 0x5584a7b167f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b16840 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b168a0 <col:11, col:14>
|       `-TextComment 0x5584a7b16870 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a787b0 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x5584a7b16be0 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x5584a7b169a0 <line:1346:3>
|   | `-TextComment 0x5584a7b16970 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b169c0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5584a7b16a20 <col:10, col:31>
|   |   `-TextComment 0x5584a7b169f0 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x5584a7b16ac0 <line:1348:3, line:1350:41>
|   | |-TextComment 0x5584a7b16a40 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x5584a7b16a60 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x5584a7b16a80 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x5584a7b16b10 <line:1352:3>
|   | `-TextComment 0x5584a7b16ae0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b16b30 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b16b90 <col:11, col:14>
|       `-TextComment 0x5584a7b16b60 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a78920 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x5584a7a78890 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x5584a7b17150 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x5584a7b16c80 <line:1357:3>
|   | `-TextComment 0x5584a7b16c50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b16ca0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b16d00 <col:10, col:43>
|   |   `-TextComment 0x5584a7b16cd0 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x5584a7b16da0 <line:1359:3, col:71>
|   | |-TextComment 0x5584a7b16d20 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x5584a7b16d40 <col:64> Text="@"
|   | `-TextComment 0x5584a7b16d60 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x5584a7b16e40 <line:1361:3, line:1363:44>
|   | |-TextComment 0x5584a7b16dc0 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x5584a7b16de0 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x5584a7b16e00 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x5584a7b16e90 <line:1365:3>
|   | `-TextComment 0x5584a7b16e60 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b16eb0 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b16f40 <col:16, col:38>
|   |   `-TextComment 0x5584a7b16f10 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x5584a7b16f90 <line:1367:3>
|   | `-TextComment 0x5584a7b16f60 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b16fb0 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x5584a7b17010 <col:11, col:14>
|   |   `-TextComment 0x5584a7b16fe0 <col:11, col:14> Text=" N/A"
|   `-ParagraphComment 0x5584a7b170e0 <line:1369:3, line:1370:1>
|     |-TextComment 0x5584a7b17030 <line:1369:3> Text=" "
|     |-InlineCommandComment 0x5584a7b17080 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-016"
|     `-TextComment 0x5584a7b170a0 <line:1370:1> Text=" "
|-FunctionDecl 0x5584a7a78ac8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x5584a7b17480 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x5584a7b171f0 <line:1374:3>
|   | `-TextComment 0x5584a7b171c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b17210 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b17270 <col:10, col:43>
|   |   `-TextComment 0x5584a7b17240 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x5584a7b172c0 <line:1376:3, col:63>
|   | `-TextComment 0x5584a7b17290 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x5584a7b17310 <line:1378:3>
|   | `-TextComment 0x5584a7b172e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b17330 <col:4, line:1380:1> Name="return"
|     `-ParagraphComment 0x5584a7b17430 <line:1378:11, line:1380:1>
|       |-TextComment 0x5584a7b17360 <line:1378:11, col:37> Text=" Current custom data value."
|       |-TextComment 0x5584a7b17380 <line:1379:3> Text=" "
|       |-InlineCommandComment 0x5584a7b173d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-007"
|       `-TextComment 0x5584a7b173f0 <line:1380:1> Text=" "
|-FunctionDecl 0x5584a7a78d48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x5584a7a78ba8 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5584a7a78c28 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x5584a7b17ae0 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x5584a7b17520 <line:1384:3>
|   | `-TextComment 0x5584a7b174f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b17540 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5584a7b175a0 <col:10, col:33>
|   |   `-TextComment 0x5584a7b17570 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x5584a7b17610 <line:1386:3, line:1387:25>
|   | |-TextComment 0x5584a7b175c0 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x5584a7b175e0 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x5584a7b17660 <line:1389:3>
|   | `-TextComment 0x5584a7b17630 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b17680 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b17730 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x5584a7b176e0 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x5584a7b17700 <line:1390:3> Text=" "
|   |-ParamCommandComment 0x5584a7b17750 <col:4, line:1391:3> [in] implicitly Param="value" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b17800 <line:1390:16, line:1391:3>
|   |   |-TextComment 0x5584a7b177b0 <line:1390:16, col:27> Text=" Name string"
|   |   `-TextComment 0x5584a7b177d0 <line:1391:3> Text=" "
|   |-BlockCommandComment 0x5584a7b17820 <col:4, line:1392:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b178a0 <line:1391:11, line:1392:3>
|   |   |-TextComment 0x5584a7b17850 <line:1391:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b17870 <line:1392:3> Text=" "
|   |-BlockCommandComment 0x5584a7b178d0 <col:4, line:1393:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b17950 <line:1392:11, line:1393:3>
|   |   |-TextComment 0x5584a7b17900 <line:1392:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|   |   `-TextComment 0x5584a7b17920 <line:1393:3> Text=" "
|   |-BlockCommandComment 0x5584a7b17970 <col:4, line:1394:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b179f0 <line:1393:11, line:1394:3>
|   |   |-TextComment 0x5584a7b179a0 <line:1393:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|   |   `-TextComment 0x5584a7b179c0 <line:1394:3> Text=" "
|   `-BlockCommandComment 0x5584a7b17a10 <col:4, col:39> Name="retval"
|     `-ParagraphComment 0x5584a7b17a70 <col:11, col:39>
|       `-TextComment 0x5584a7b17a40 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x5584a7a797a0 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x5584a7a78e38 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b17e40 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x5584a7b17b80 <line:1399:3>
|   | `-TextComment 0x5584a7b17b50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b17ba0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x5584a7b17c00 <col:10, col:25>
|   |   `-TextComment 0x5584a7b17bd0 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x5584a7b17c50 <line:1401:3, col:27>
|   | `-TextComment 0x5584a7b17c20 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x5584a7b17ca0 <line:1403:3>
|   | `-TextComment 0x5584a7b17c70 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b17cc0 <col:4, line:1404:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b17d70 <line:1403:20, line:1404:3>
|   |   |-TextComment 0x5584a7b17d20 <line:1403:20, col:29> Text=" Thread ID"
|   |   `-TextComment 0x5584a7b17d40 <line:1404:3> Text=" "
|   `-BlockCommandComment 0x5584a7b17d90 <col:4, col:60> Name="retval"
|     `-ParagraphComment 0x5584a7b17df0 <col:11, col:60>
|       `-TextComment 0x5584a7b17dc0 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x5584a7a79ac8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x5584a7a79888 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5584a7a79908 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x5584a7a79980 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x5584a7b184f0 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x5584a7b17ee0 <line:1409:3>
|   | `-TextComment 0x5584a7b17eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b17f00 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5584a7b17f60 <col:10, col:53>
|   |   `-TextComment 0x5584a7b17f30 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x5584a7b17fb0 <line:1411:3>
|   | `-TextComment 0x5584a7b17f80 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b17fd0 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b18080 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x5584a7b18030 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x5584a7b18050 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x5584a7b180a0 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b18150 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x5584a7b18100 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x5584a7b18120 <line:1413:3> Text=" "
|   |-ParamCommandComment 0x5584a7b18170 <col:4, line:1414:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b18220 <line:1413:15, line:1414:3>
|   |   |-TextComment 0x5584a7b181d0 <line:1413:15, col:38> Text=" Destination buffer size"
|   |   `-TextComment 0x5584a7b181f0 <line:1414:3> Text=" "
|   |-BlockCommandComment 0x5584a7b18240 <col:4, line:1415:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b182c0 <line:1414:11, line:1415:3>
|   |   |-TextComment 0x5584a7b18270 <line:1414:11, col:47> Text=" -ENOSPC Destination buffer too small"
|   |   `-TextComment 0x5584a7b18290 <line:1415:3> Text=" "
|   |-BlockCommandComment 0x5584a7b182e0 <col:4, line:1416:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b18360 <line:1415:11, line:1416:3>
|   |   |-TextComment 0x5584a7b18310 <line:1415:11, col:38> Text=" -EFAULT Memory access error"
|   |   `-TextComment 0x5584a7b18330 <line:1416:3> Text=" "
|   |-BlockCommandComment 0x5584a7b18380 <col:4, line:1417:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b18400 <line:1416:11, line:1417:3>
|   |   |-TextComment 0x5584a7b183b0 <line:1416:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|   |   `-TextComment 0x5584a7b183d0 <line:1417:3> Text=" "
|   `-BlockCommandComment 0x5584a7b18420 <col:4, col:20> Name="retval"
|     `-ParagraphComment 0x5584a7b18480 <col:11, col:20>
|       `-TextComment 0x5584a7b18450 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x5584a7a79c50 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x5584a7a79bb8 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b18850 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x5584a7b18590 <line:1423:3>
|   | `-TextComment 0x5584a7b18560 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b185b0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5584a7b18610 <col:10, col:33>
|   |   `-TextComment 0x5584a7b185e0 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x5584a7b18660 <line:1425:3, col:45>
|   | `-TextComment 0x5584a7b18630 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x5584a7b186b0 <line:1427:3>
|   | `-TextComment 0x5584a7b18680 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b186d0 <col:4, line:1428:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b18780 <line:1427:20, line:1428:3>
|   |   |-TextComment 0x5584a7b18730 <line:1427:20, col:29> Text=" Thread ID"
|   |   `-TextComment 0x5584a7b18750 <line:1428:3> Text=" "
|   `-BlockCommandComment 0x5584a7b187a0 <col:4, col:61> Name="retval"
|     `-ParagraphComment 0x5584a7b18800 <col:11, col:61>
|       `-TextComment 0x5584a7b187d0 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x5584a7a79ed8 prev 0x5584a7a68028 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x5584a7b189a0 <line:1514:3, col:24>
| | `-ParagraphComment 0x5584a7b18970 <col:3, col:24>
| |   |-TextComment 0x5584a7b188c0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5584a7b18910 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5584a7b18930 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5584a7a79f78 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x5584a7a79fd8 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5584a7a7a2a8 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x5584a7a7a3c0 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x5584a7a7a420 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x5584a7a7a480 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x5584a7a7a4e8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x5584a7a7a6f0 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x5584a7a7a240 'void (*)(struct k_timer *)'
| | `-ParenType 0x5584a7a7a1e0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x5584a7a7a1a0 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x5584a78ba550 'void'
| |     `-PointerType 0x5584a7a7a0a0 'struct k_timer *'
| |       `-ElaboratedType 0x5584a7a7a030 'struct k_timer' sugar
| |         `-RecordType 0x5584a7a680b0 'struct k_timer'
| |           `-Record 0x5584a7a79ed8 'k_timer'
| `-FullComment 0x5584a7b18e30 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x5584a7b18a40 <line:1576:3>
|   | `-TextComment 0x5584a7b18a10 <col:3> Text=" "
|   |-VerbatimLineComment 0x5584a7b18a60 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x5584a7b18ad0 <line:1577:3>
|   | `-TextComment 0x5584a7b18aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b18af0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5584a7b18b50 <col:10, col:37>
|   |   `-TextComment 0x5584a7b18b20 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x5584a7b18bf0 <line:1579:3, line:1581:54>
|   | |-TextComment 0x5584a7b18b70 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x5584a7b18b90 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x5584a7b18bb0 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x5584a7b18c40 <line:1583:3>
|   | `-TextComment 0x5584a7b18c10 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b18c60 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b18cf0 <col:16, col:37>
|   |   `-TextComment 0x5584a7b18cc0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5584a7b18d40 <line:1585:3>
|   | `-TextComment 0x5584a7b18d10 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b18d60 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b18dc0 <col:11, col:14>
|       `-TextComment 0x5584a7b18d90 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x5584a7a7c310 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x5584a7a7a240 'void (*)(struct k_timer *)'
| | `-ParenType 0x5584a7a7a1e0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x5584a7a7a1a0 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x5584a78ba550 'void'
| |     `-PointerType 0x5584a7a7a0a0 'struct k_timer *'
| |       `-ElaboratedType 0x5584a7a7a030 'struct k_timer' sugar
| |         `-RecordType 0x5584a7a680b0 'struct k_timer'
| |           `-Record 0x5584a7a79ed8 'k_timer'
| `-FullComment 0x5584a7b192e0 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x5584a7b18ed0 <line:1590:3>
|   | `-TextComment 0x5584a7b18ea0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5584a7b18ef0 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x5584a7b18f60 <line:1591:3>
|   | `-TextComment 0x5584a7b18f30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b18f80 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5584a7b18fe0 <col:10, col:35>
|   |   `-TextComment 0x5584a7b18fb0 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x5584a7b190a0 <line:1593:3, line:1596:24>
|   | |-TextComment 0x5584a7b19000 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x5584a7b19020 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x5584a7b19040 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x5584a7b19060 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x5584a7b190f0 <line:1598:3>
|   | `-TextComment 0x5584a7b190c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b19110 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b191a0 <col:16, col:37>
|   |   `-TextComment 0x5584a7b19170 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5584a7b191f0 <line:1600:3>
|   | `-TextComment 0x5584a7b191c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b19210 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b19270 <col:11, col:14>
|       `-TextComment 0x5584a7b19240 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a7c670 <line:1630:1, line:1632:27> line:1630:13 k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x5584a7a7c3f0 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x5584a7a7c498 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x5584a7a7c538 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x5584a7b19830 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x5584a7b19380 <line:1620:3>
|   | `-TextComment 0x5584a7b19350 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b193a0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5584a7b19400 <col:10, col:29>
|   |   `-TextComment 0x5584a7b193d0 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x5584a7b19450 <line:1622:3, col:60>
|   | `-TextComment 0x5584a7b19420 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x5584a7b194a0 <line:1624:3>
|   | `-TextComment 0x5584a7b19470 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b194c0 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b19570 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x5584a7b19520 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5584a7b19540 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x5584a7b19590 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b19640 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x5584a7b195f0 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x5584a7b19610 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x5584a7b19660 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b196f0 <col:18, col:77>
|   |   `-TextComment 0x5584a7b196c0 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x5584a7b19740 <line:1628:3>
|   | `-TextComment 0x5584a7b19710 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b19760 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b197c0 <col:11, col:14>
|       `-TextComment 0x5584a7b19790 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a7c780 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x5584a7a7caa0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x5584a7a7c870 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x5584a7a7c8e8 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x5584a7a7c960 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x5584a7b19e50 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x5584a7b198e0 <line:1637:3>
|   | `-TextComment 0x5584a7b198a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b19900 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x5584a7b19960 <col:10, col:24>
|   |   `-TextComment 0x5584a7b19930 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x5584a7b199d0 <line:1639:3, line:1640:71>
|   | |-TextComment 0x5584a7b19980 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x5584a7b199a0 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x5584a7b19a70 <line:1642:3, line:1644:44>
|   | |-TextComment 0x5584a7b199f0 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x5584a7b19a10 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x5584a7b19a30 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x5584a7b19ac0 <line:1646:3>
|   | `-TextComment 0x5584a7b19a90 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b19ae0 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b19b90 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x5584a7b19b40 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5584a7b19b60 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x5584a7b19bb0 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b19c60 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x5584a7b19c10 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x5584a7b19c30 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x5584a7b19c80 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b19d10 <col:17, col:51>
|   |   `-TextComment 0x5584a7b19ce0 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x5584a7b19d60 <line:1650:3>
|   | `-TextComment 0x5584a7b19d30 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b19d80 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b19de0 <col:11, col:14>
|       `-TextComment 0x5584a7b19db0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a7cc40 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7a7cbb0 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x5584a7b1a400 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x5584a7b19ef0 <line:1656:3>
|   | `-TextComment 0x5584a7b19ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b19f10 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5584a7b19f70 <col:10, col:23>
|   |   `-TextComment 0x5584a7b19f40 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x5584a7b19fe0 <line:1658:3, line:1659:43>
|   | |-TextComment 0x5584a7b19f90 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x5584a7b19fb0 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x5584a7b1a050 <line:1661:3, line:1662:23>
|   | |-TextComment 0x5584a7b1a000 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x5584a7b1a020 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x5584a7b1a0a0 <line:1664:3>
|   | `-TextComment 0x5584a7b1a070 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1a0c0 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x5584a7b1a1c0 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x5584a7b1a0f0 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x5584a7b1a110 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x5584a7b1a160 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x5584a7b1a180 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x5584a7b1a210 <line:1667:3>
|   | `-TextComment 0x5584a7b1a1e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1a230 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1a2c0 <col:16, col:37>
|   |   `-TextComment 0x5584a7b1a290 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5584a7b1a310 <line:1669:3>
|   | `-TextComment 0x5584a7b1a2e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1a330 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b1a390 <col:11, col:14>
|       `-TextComment 0x5584a7b1a360 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a7ce50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7a7cd40 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x5584a7b1a810 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x5584a7b1a4a0 <line:1674:3>
|   | `-TextComment 0x5584a7b1a470 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1a4c0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5584a7b1a520 <col:10, col:28>
|   |   `-TextComment 0x5584a7b1a4f0 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x5584a7b1a590 <line:1676:3, line:1677:49>
|   | |-TextComment 0x5584a7b1a540 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x5584a7b1a560 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x5584a7b1a5e0 <line:1679:3, col:58>
|   | `-TextComment 0x5584a7b1a5b0 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x5584a7b1a630 <line:1681:3>
|   | `-TextComment 0x5584a7b1a600 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1a650 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1a6e0 <col:16, col:37>
|   |   `-TextComment 0x5584a7b1a6b0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5584a7b1a730 <line:1683:3>
|   | `-TextComment 0x5584a7b1a700 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1a750 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5584a7b1a7b0 <col:11, col:24>
|       `-TextComment 0x5584a7b1a780 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x5584a7a7cfe0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7a7cf50 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x5584a7b1acf0 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x5584a7b1a8b0 <line:1688:3>
|   | `-TextComment 0x5584a7b1a880 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1a8d0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b1a930 <col:10, col:49>
|   |   `-TextComment 0x5584a7b1a900 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x5584a7b1a9f0 <line:1690:3, line:1693:73>
|   | |-TextComment 0x5584a7b1a950 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x5584a7b1a970 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x5584a7b1a990 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x5584a7b1a9b0 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x5584a7b1aa40 <line:1695:3, col:58>
|   | `-TextComment 0x5584a7b1aa10 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x5584a7b1aab0 <line:1697:3, line:1698:20>
|   | |-TextComment 0x5584a7b1aa60 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x5584a7b1aa80 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x5584a7b1ab00 <line:1700:3>
|   | `-TextComment 0x5584a7b1aad0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1ab20 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1abb0 <col:16, col:37>
|   |   `-TextComment 0x5584a7b1ab80 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5584a7b1ac00 <line:1702:3>
|   | `-TextComment 0x5584a7b1abd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1ac20 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5584a7b1ac80 <col:11, col:24>
|       `-TextComment 0x5584a7b1ac50 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x5584a7a7d1c0 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x5584a7a7d0b0 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x5584a7a7d4e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7a7d450 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x5584a7b1b0b0 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x5584a7b1ad90 <line:1709:3>
|   | `-TextComment 0x5584a7b1ad60 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1adb0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5584a7b1ae10 <col:10, col:57>
|   |   `-TextComment 0x5584a7b1ade0 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x5584a7b1ae80 <line:1711:3, line:1712:68>
|   | |-TextComment 0x5584a7b1ae30 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x5584a7b1ae50 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x5584a7b1aed0 <line:1714:3>
|   | `-TextComment 0x5584a7b1aea0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1aef0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1af80 <col:16, col:37>
|   |   `-TextComment 0x5584a7b1af50 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5584a7b1afd0 <line:1716:3>
|   | `-TextComment 0x5584a7b1afa0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1aff0 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x5584a7b1b050 <col:11, col:44>
|       `-TextComment 0x5584a7b1b020 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x5584a7a7d640 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7a7d5b0 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x5584a7a7db78 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x5584a7a7d8a0 <line:1722:2, col:58>
|   | `-VarDecl 0x5584a7a7d6f8 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x5584a7a7d878 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x5584a7a7d860 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5584a7a7d760 <col:22> 's32_t (struct _timeout *)' Function 0x5584a7a7d1c0 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x5584a7a7d7e8 <col:42, col:50> 'struct _timeout *' prefix '&' cannot overflow
|   |       `-MemberExpr 0x5584a7a7d7b8 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x5584a7a79f78
|   |         `-ImplicitCastExpr 0x5584a7a7d7a0 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5584a7a7d780 <col:43> 'struct k_timer *' lvalue ParmVar 0x5584a7a7d5b0 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x5584a7a7db40 <line:1723:2, col:61>
|     `-ConditionalOperator 0x5584a7a7dab8 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x5584a7a7d930 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x5584a7a7d910 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x5584a7a7d8f8 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5584a7a7d8b8 <col:10> 'const s32_t':'const int' lvalue Var 0x5584a7a7d6f8 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x5584a7a7d8d8 <col:18> 'int' 0
|       |-CStyleCastExpr 0x5584a7a7da70 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x5584a7a7da08 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x5584a7a7d9f0 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5584a7a7d950 <col:30> 'u64_t (u64_t)' Function 0x5584a79f08e8 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x5584a7a7da48 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x5584a7a7da30 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x5584a7a7d970 <col:52> 'const s32_t':'const int' lvalue Var 0x5584a7a7d6f8 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x5584a7a7da98 <col:61> 'unsigned int' 0
|-FunctionDecl 0x5584a7a7dd60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5584a7a7dbc0 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x5584a7a7dc40 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x5584a7b1b6c0 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x5584a7b1b150 <line:1727:3>
|   | `-TextComment 0x5584a7b1b120 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1b170 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5584a7b1b1d0 <col:10, col:52>
|   |   `-TextComment 0x5584a7b1b1a0 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x5584a7b1b340 <line:1729:3, line:1730:9>
|   | |-TextComment 0x5584a7b1b1f0 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x5584a7b1b240 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x5584a7b1b260 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x5584a7b1b2b0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x5584a7b1b2d0 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x5584a7b1b2f0 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x5584a7b1b3b0 <line:1732:3, line:1733:73>
|   | |-TextComment 0x5584a7b1b360 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x5584a7b1b380 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x5584a7b1b400 <line:1735:3>
|   | `-TextComment 0x5584a7b1b3d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1b420 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1b4d0 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x5584a7b1b480 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5584a7b1b4a0 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1b4f0 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b1b580 <col:20, col:58>
|   |   `-TextComment 0x5584a7b1b550 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x5584a7b1b5d0 <line:1738:3>
|   | `-TextComment 0x5584a7b1b5a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1b5f0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b1b650 <col:11, col:14>
|       `-TextComment 0x5584a7b1b620 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a7df78 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5584a7a7de60 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5584a7a7dee0 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x5584a7a7e118 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x5584a7a7e0c8 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x5584a7a7e060 <col:2, col:9> 'void *' lvalue ->user_data 0x5584a7a7a4e8
| |   | `-ImplicitCastExpr 0x5584a7a7e048 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5584a7a7e028 <col:2> 'struct k_timer *' lvalue ParmVar 0x5584a7a7de60 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x5584a7a7e0b0 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a7a7e090 <col:21> 'void *' lvalue ParmVar 0x5584a7a7dee0 'user_data' 'void *'
| `-FullComment 0x5584a7b1b7b0 <line:1743:3, col:12>
|   `-ParagraphComment 0x5584a7b1b780 <col:3, col:12>
|     |-TextComment 0x5584a7b1b730 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b1b750 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7a7e268 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7a7e158 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x5584a7b1bb10 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x5584a7b1b850 <line:1752:3>
|   | `-TextComment 0x5584a7b1b820 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1b870 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x5584a7b1b8f0 <col:10, col:55>
|   |   `-TextComment 0x5584a7b1b8a0 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x5584a7b1b940 <line:1754:3>
|   | `-TextComment 0x5584a7b1b910 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1b960 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1b9f0 <col:16, col:37>
|   |   `-TextComment 0x5584a7b1b9c0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5584a7b1ba40 <line:1756:3>
|   | `-TextComment 0x5584a7b1ba10 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1ba60 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x5584a7b1bac0 <col:11, col:25>
|       `-TextComment 0x5584a7b1ba90 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x5584a7a7e920 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7a7e338 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x5584a7a7eae8 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x5584a7a7ea48 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x5584a7a7ea30 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5584a7a7ea00 <col:9, col:16> 'void *' lvalue ->user_data 0x5584a7a7a4e8
|         `-ImplicitCastExpr 0x5584a7a7e9e8 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x5584a7a7e9c8 <col:9> 'struct k_timer *' lvalue ParmVar 0x5584a7a7e338 'timer' 'struct k_timer *'
|-FunctionDecl 0x5584a7a7eb98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x5584a7b1bff0 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x5584a7b1bbb0 <line:1773:3>
|   | `-TextComment 0x5584a7b1bb80 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1bbd0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5584a7b1bc30 <col:10, col:28>
|   |   `-TextComment 0x5584a7b1bc00 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x5584a7b1bca0 <line:1775:3, line:1776:19>
|   | |-TextComment 0x5584a7b1bc50 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x5584a7b1bc70 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x5584a7b1bcf0 <line:1778:3>
|   | `-TextComment 0x5584a7b1bcc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1bd10 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x5584a7b1bec0 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x5584a7b1bd40 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x5584a7b1bd90 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x5584a7b1bdb0 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x5584a7b1bdd0 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x5584a7b1bdf0 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x5584a7b1be10 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x5584a7b1be60 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x5584a7b1bf10 <line:1785:3>
|   | `-TextComment 0x5584a7b1bee0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1bf30 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x5584a7b1bf90 <col:11, col:42>
|       `-TextComment 0x5584a7b1bf60 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x5584a7a7ed08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x5584a7a7eea8 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x5584a7a7ee18 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5584a7a7ee28 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x5584a7a7ee68 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x5584a7a7ee50 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     `-IntegerLiteral 0x5584a7a7ee30 <col:16> 'int' 0
| |-DeprecatedAttr 0x5584a7a7eda8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x5584a7b1c2d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x5584a7b1c090 <line:1790:3>
|   | `-TextComment 0x5584a7b1c060 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1c0b0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5584a7b1c110 <col:10, col:51>
|   |   `-TextComment 0x5584a7b1c0e0 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x5584a7b1c1b0 <line:1792:3, line:1794:11>
|   | |-TextComment 0x5584a7b1c130 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x5584a7b1c150 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x5584a7b1c170 <line:1794:3, col:11> Text=" kconfig."
|   |-ParagraphComment 0x5584a7b1c200 <line:1796:3>
|   | `-TextComment 0x5584a7b1c1d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1c220 <col:4, col:56> Name="retval"
|     `-ParagraphComment 0x5584a7b1c280 <col:11, col:56>
|       `-TextComment 0x5584a7b1c250 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x5584a7a7ef68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x5584a7a7f0b8 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x5584a7a7f078 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x5584a7a7f088 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x5584a7a7f008 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x5584a7b1c4d0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x5584a7b1c370 <line:1809:3>
|   | `-TextComment 0x5584a7b1c340 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1c390 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5584a7b1c3f0 <col:10, col:52>
|   |   `-TextComment 0x5584a7b1c3c0 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x5584a7b1c490 <line:1811:3, line:1813:11>
|     |-TextComment 0x5584a7b1c410 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x5584a7b1c430 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x5584a7b1c450 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x5584a7a7f170 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x5584a7a7f338 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x5584a7a7f300 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x5584a7a7f2d8 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a7f2a8 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x5584a7a7f290 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5584a7a7f210 <col:16> 's64_t (void)' Function 0x5584a7a7eb98 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x5584a7b1ca40 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x5584a7b1c570 <line:1824:3>
|   | `-TextComment 0x5584a7b1c540 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1c590 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5584a7b1c5f0 <col:10, col:45>
|   |   `-TextComment 0x5584a7b1c5c0 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x5584a7b1c660 <line:1826:3, line:1827:16>
|   | |-TextComment 0x5584a7b1c610 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x5584a7b1c630 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x5584a7b1c750 <line:1829:3, line:1833:38>
|   | |-TextComment 0x5584a7b1c680 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x5584a7b1c6a0 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x5584a7b1c6c0 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x5584a7b1c6e0 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x5584a7b1c700 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x5584a7b1c7a0 <line:1835:3>
|   | `-TextComment 0x5584a7b1c770 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1c7c0 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x5584a7b1c910 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x5584a7b1c7f0 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x5584a7b1c810 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x5584a7b1c830 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x5584a7b1c850 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x5584a7b1c870 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x5584a7b1c890 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x5584a7b1c8b0 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x5584a7b1c960 <line:1842:3>
|   | `-TextComment 0x5584a7b1c930 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1c980 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x5584a7b1c9e0 <col:11, col:66>
|       `-TextComment 0x5584a7b1c9b0 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x5584a7a7f4d0 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x5584a7a7f3c0 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x5584a7a80c68 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x5584a7a7f680 <line:1862:2, col:21>
| | | |-VarDecl 0x5584a7a7f588 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x5584a7a7f600 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x5584a7a7f710 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x5584a7a7f698 <col:2> 's64_t':'long long' lvalue Var 0x5584a7a7f588 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x5584a7a7f6f0 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x5584a7a7f6d8 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x5584a7a7f6b8 <col:11> 's64_t (void)' Function 0x5584a7a7eb98 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x5584a7a7f810 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x5584a7a7f730 <col:2> 's64_t':'long long' lvalue Var 0x5584a7a7f600 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x5584a7a7f7f0 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x5584a7a7f7c0 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x5584a7a7f750 <col:10> 's64_t':'long long' lvalue Var 0x5584a7a7f588 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x5584a7a7f7d8 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x5584a7a7f7a8 <col:19, col:20> 's64_t':'long long' lvalue prefix '*' cannot overflow
| | |       `-ImplicitCastExpr 0x5584a7a7f790 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5584a7a7f770 <col:20> 's64_t *' lvalue ParmVar 0x5584a7a7f3c0 'reftime' 's64_t *'
| | |-BinaryOperator 0x5584a7a7f8b8 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x5584a7a7f868 <col:2, col:3> 's64_t':'long long' lvalue prefix '*' cannot overflow
| | | | `-ImplicitCastExpr 0x5584a7a7f850 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5584a7a7f830 <col:3> 's64_t *' lvalue ParmVar 0x5584a7a7f3c0 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x5584a7a7f8a0 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5584a7a7f880 <col:13> 's64_t':'long long' lvalue Var 0x5584a7a7f588 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x5584a7a7f910 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x5584a7a7f8f8 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a7a7f8d8 <col:9> 's64_t':'long long' lvalue Var 0x5584a7a7f600 'delta' 's64_t':'long long'
| `-FullComment 0x5584a7b1ce20 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x5584a7b1cae0 <line:1850:3>
|   | `-TextComment 0x5584a7b1cab0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1cb00 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5584a7b1cb60 <col:10, col:27>
|   |   `-TextComment 0x5584a7b1cb30 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x5584a7b1cbd0 <line:1852:3, line:1853:50>
|   | |-TextComment 0x5584a7b1cb80 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x5584a7b1cba0 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x5584a7b1cc20 <line:1855:3>
|   | `-TextComment 0x5584a7b1cbf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1cc40 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1ccf0 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x5584a7b1cca0 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x5584a7b1ccc0 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x5584a7b1cd40 <line:1858:3>
|   | `-TextComment 0x5584a7b1cd10 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1cd60 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5584a7b1cdc0 <col:11, col:24>
|       `-TextComment 0x5584a7b1cd90 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x5584a7a80dc0 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x5584a7a80cb0 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x5584a7a80fd8 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x5584a7a80fa0 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x5584a7a80f78 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5584a7a80f28 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x5584a7a80f10 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a80e68 <col:16> 's64_t (s64_t *)' Function 0x5584a7a7f4d0 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x5584a7a80f50 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a7a80e88 <col:31> 's64_t *' lvalue ParmVar 0x5584a7a80cb0 'reftime' 's64_t *'
| `-FullComment 0x5584a7b1d2c0 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x5584a7b1cec0 <line:1872:3>
|   | `-TextComment 0x5584a7b1ce90 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1cee0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7b1cf40 <col:10, col:44>
|   |   `-TextComment 0x5584a7b1cf10 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x5584a7b1cfb0 <line:1874:3, line:1875:50>
|   | |-TextComment 0x5584a7b1cf60 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x5584a7b1cf80 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x5584a7b1d070 <line:1877:3, line:1880:41>
|   | |-TextComment 0x5584a7b1cfd0 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x5584a7b1cff0 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x5584a7b1d010 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x5584a7b1d030 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x5584a7b1d0c0 <line:1882:3>
|   | `-TextComment 0x5584a7b1d090 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1d0e0 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1d190 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x5584a7b1d140 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x5584a7b1d160 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x5584a7b1d1e0 <line:1885:3>
|   | `-TextComment 0x5584a7b1d1b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1d200 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5584a7b1d260 <col:11, col:24>
|       `-TextComment 0x5584a7b1d230 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x5584a7a81088 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x5584a7a81228 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x5584a7a811b8 <line:1902:2, col:29>
| |   `-CallExpr 0x5584a7a81198 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x5584a7a81180 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x5584a7a81128 <col:9> 'u32_t (void)' Function 0x5584a7a25c50 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x5584a7b1d570 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x5584a7b1d360 <line:1893:3>
|   | `-TextComment 0x5584a7b1d330 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1d380 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5584a7b1d3e0 <col:10, col:34>
|   |   `-TextComment 0x5584a7b1d3b0 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x5584a7b1d450 <line:1895:3, line:1896:9>
|   | |-TextComment 0x5584a7b1d400 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x5584a7b1d420 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x5584a7b1d4a0 <line:1898:3>
|   | `-TextComment 0x5584a7b1d470 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1d4c0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5584a7b1d520 <col:11, col:57>
|       `-TextComment 0x5584a7b1d4f0 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x5584a7a81240 prev 0x5584a7a5c898 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x5584a7b1d690 <line:1910:3, col:24>
| | `-ParagraphComment 0x5584a7b1d660 <col:3, col:24>
| |   |-TextComment 0x5584a7b1d5e0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5584a7b1d600 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5584a7b1d620 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5584a7a812d0 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x5584a7a81340 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x5584a7a81390 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x5584a7a81448 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5584a7a81550 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x5584a7a815b0 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x5584a7a81550 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x5584a7a81448 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x5584a7a817f8 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x5584a7a81660 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x5584a7a816d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x5584a7a81b10 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7a81a08 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x5584a7b1da40 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x5584a7b1d730 <line:1952:3>
|   | `-TextComment 0x5584a7b1d700 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1d750 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5584a7b1d7b0 <col:10, col:29>
|   |   `-TextComment 0x5584a7b1d780 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x5584a7b1d800 <line:1954:3, col:67>
|   | `-TextComment 0x5584a7b1d7d0 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x5584a7b1d850 <line:1956:3>
|   | `-TextComment 0x5584a7b1d820 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1d870 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1d910 <col:16, col:37>
|   |   `-TextComment 0x5584a7b1d8d0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5584a7b1d960 <line:1958:3>
|   | `-TextComment 0x5584a7b1d930 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1d980 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b1d9e0 <col:11, col:14>
|       `-TextComment 0x5584a7b1d9b0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a82590 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7a82500 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x5584a7b1dfe0 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x5584a7b1dae0 <line:1963:3>
|   | `-TextComment 0x5584a7b1dab0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1db00 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5584a7b1db60 <col:10, col:36>
|   |   `-TextComment 0x5584a7b1db30 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x5584a7b1dcd0 <line:1965:3, line:1969:35>
|   | |-TextComment 0x5584a7b1db80 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x5584a7b1dbd0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x5584a7b1dbf0 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x5584a7b1dc10 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x5584a7b1dc30 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x5584a7b1dc50 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x5584a7b1dc70 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x5584a7b1dd20 <line:1971:3>
|   | `-TextComment 0x5584a7b1dcf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1dd40 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b1dda0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b1dd70 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b1ddf0 <line:1973:3>
|   | `-TextComment 0x5584a7b1ddc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1de10 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1dea0 <col:16, col:37>
|   |   `-TextComment 0x5584a7b1de70 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5584a7b1def0 <line:1975:3>
|   | `-TextComment 0x5584a7b1dec0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1df10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b1df70 <col:11, col:14>
|       `-TextComment 0x5584a7b1df40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a82830 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5584a7a82690 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a82710 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x5584a7b1e600 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x5584a7b1e080 <line:1980:3>
|   | `-TextComment 0x5584a7b1e050 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1e0a0 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b1e100 <col:10, col:50>
|   |   `-TextComment 0x5584a7b1e0d0 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x5584a7b1e220 <line:1982:3, line:1984:24>
|   | |-TextComment 0x5584a7b1e120 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x5584a7b1e170 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5584a7b1e190 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x5584a7b1e1b0 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x5584a7b1e1d0 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x5584a7b1e270 <line:1986:3>
|   | `-TextComment 0x5584a7b1e240 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1e290 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b1e2f0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b1e2c0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b1e340 <line:1988:3>
|   | `-TextComment 0x5584a7b1e310 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1e360 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1e410 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x5584a7b1e3c0 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b1e3e0 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1e430 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b1e4c0 <col:15, col:40>
|   |   `-TextComment 0x5584a7b1e490 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5584a7b1e510 <line:1991:3>
|   | `-TextComment 0x5584a7b1e4e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1e530 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b1e590 <col:11, col:14>
|       `-TextComment 0x5584a7b1e560 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a82ad0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5584a7a82930 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a829b0 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x5584a7b1ecf0 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x5584a7b1e6a0 <line:1996:3>
|   | `-TextComment 0x5584a7b1e670 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1e6c0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b1e720 <col:10, col:39>
|   |   `-TextComment 0x5584a7b1e6f0 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x5584a7b1e860 <line:1998:3, line:2001:50>
|   | |-TextComment 0x5584a7b1e740 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x5584a7b1e790 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5584a7b1e7b0 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x5584a7b1e7d0 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x5584a7b1e7f0 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x5584a7b1e810 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x5584a7b1e8b0 <line:2003:3>
|   | `-TextComment 0x5584a7b1e880 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1e8d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b1e930 <col:9, col:31>
|   |   `-TextComment 0x5584a7b1e900 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b1e980 <line:2005:3>
|   | `-TextComment 0x5584a7b1e950 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1e9a0 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1ea50 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x5584a7b1ea00 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b1ea20 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1ea70 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b1eb00 <col:15, col:40>
|   |   `-TextComment 0x5584a7b1ead0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5584a7b1eb50 <line:2008:3>
|   | `-TextComment 0x5584a7b1eb20 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1eb70 <col:4, line:2009:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b1ebf0 <line:2008:11, line:2009:3>
|   |   |-TextComment 0x5584a7b1eba0 <line:2008:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b1ebc0 <line:2009:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1ec10 <col:4, col:78> Name="retval"
|     `-ParagraphComment 0x5584a7b1ec70 <col:11, col:78>
|       `-TextComment 0x5584a7b1ec40 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x5584a7a82ce8 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5584a7a82bd0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a82c50 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x5584a7b1f310 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x5584a7b1ed90 <line:2014:3>
|   | `-TextComment 0x5584a7b1ed60 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1edb0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b1ee10 <col:10, col:40>
|   |   `-TextComment 0x5584a7b1ede0 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x5584a7b1ef30 <line:2016:3, line:2018:24>
|   | |-TextComment 0x5584a7b1ee30 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x5584a7b1ee80 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5584a7b1eea0 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x5584a7b1eec0 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x5584a7b1eee0 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x5584a7b1ef80 <line:2020:3>
|   | `-TextComment 0x5584a7b1ef50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1efa0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b1f000 <col:9, col:31>
|   |   `-TextComment 0x5584a7b1efd0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b1f050 <line:2022:3>
|   | `-TextComment 0x5584a7b1f020 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1f070 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1f120 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x5584a7b1f0d0 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b1f0f0 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1f140 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b1f1d0 <col:15, col:40>
|   |   `-TextComment 0x5584a7b1f1a0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5584a7b1f220 <line:2025:3>
|   | `-TextComment 0x5584a7b1f1f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1f240 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b1f2a0 <col:11, col:14>
|       `-TextComment 0x5584a7b1f270 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a82f08 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5584a7a82df0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a82e70 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x5584a7b1fa10 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x5584a7b1f3b0 <line:2030:3>
|   | `-TextComment 0x5584a7b1f380 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1f3d0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b1f430 <col:10, col:40>
|   |   `-TextComment 0x5584a7b1f400 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x5584a7b1f570 <line:2032:3, line:2035:50>
|   | |-TextComment 0x5584a7b1f450 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x5584a7b1f4a0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5584a7b1f4c0 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x5584a7b1f4e0 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x5584a7b1f500 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x5584a7b1f520 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x5584a7b1f5c0 <line:2037:3>
|   | `-TextComment 0x5584a7b1f590 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1f5e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b1f640 <col:9, col:31>
|   |   `-TextComment 0x5584a7b1f610 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b1f690 <line:2039:3>
|   | `-TextComment 0x5584a7b1f660 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1f6b0 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1f760 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x5584a7b1f710 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b1f730 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1f780 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b1f810 <col:15, col:40>
|   |   `-TextComment 0x5584a7b1f7e0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5584a7b1f860 <line:2042:3>
|   | `-TextComment 0x5584a7b1f830 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1f880 <col:4, line:2043:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b1f910 <line:2042:11, line:2043:3>
|   |   |-TextComment 0x5584a7b1f8b0 <line:2042:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b1f8d0 <line:2043:3> Text=" "
|   `-BlockCommandComment 0x5584a7b1f930 <col:4, col:78> Name="retval"
|     `-ParagraphComment 0x5584a7b1f990 <col:11, col:78>
|       `-TextComment 0x5584a7b1f960 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x5584a7a83250 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x5584a7a83010 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a83090 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x5584a7a83110 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x5584a7b20110 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x5584a7b1fab0 <line:2048:3>
|   | `-TextComment 0x5584a7b1fa80 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1fad0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b1fb30 <col:10, col:40>
|   |   `-TextComment 0x5584a7b1fb00 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x5584a7b1fc50 <line:2050:3, line:2052:45>
|   | |-TextComment 0x5584a7b1fb50 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x5584a7b1fba0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x5584a7b1fbc0 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x5584a7b1fbe0 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x5584a7b1fc00 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x5584a7b1fca0 <line:2054:3>
|   | `-TextComment 0x5584a7b1fc70 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b1fcc0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b1fd20 <col:9, col:31>
|   |   `-TextComment 0x5584a7b1fcf0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b1fd70 <line:2056:3>
|   | `-TextComment 0x5584a7b1fd40 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1fd90 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b1fe40 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x5584a7b1fdf0 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b1fe10 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1fe60 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b1ff10 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x5584a7b1fec0 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x5584a7b1fee0 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x5584a7b1ff30 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b1ffc0 <col:15, col:40>
|   |   `-TextComment 0x5584a7b1ff90 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5584a7b20010 <line:2060:3>
|   | `-TextComment 0x5584a7b1ffe0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b20030 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b20090 <col:11, col:14>
|       `-TextComment 0x5584a7b20060 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a83768 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x5584a7a83360 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a833e0 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x5584a7a83460 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x5584a7b20930 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x5584a7b201b0 <line:2065:3>
|   | `-TextComment 0x5584a7b20180 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b201d0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5584a7b20230 <col:10, col:58>
|   |   `-TextComment 0x5584a7b20200 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x5584a7b20370 <line:2067:3, line:2070:19>
|   | |-TextComment 0x5584a7b20250 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x5584a7b202a0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x5584a7b202c0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x5584a7b202e0 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x5584a7b20300 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x5584a7b20320 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x5584a7b203c0 <line:2072:3>
|   | `-TextComment 0x5584a7b20390 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b203e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b20440 <col:9, col:31>
|   |   `-TextComment 0x5584a7b20410 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b20490 <line:2074:3>
|   | `-TextComment 0x5584a7b20460 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b204b0 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b20560 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x5584a7b20510 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b20530 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x5584a7b20580 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b20630 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x5584a7b205e0 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x5584a7b20600 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x5584a7b20650 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b206e0 <col:15, col:58>
|   |   `-TextComment 0x5584a7b206b0 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x5584a7b20730 <line:2078:3>
|   | `-TextComment 0x5584a7b20700 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b20750 <col:4, line:2079:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b207d0 <line:2078:11, line:2079:3>
|   |   |-TextComment 0x5584a7b20780 <line:2078:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b207a0 <line:2079:3> Text=" "
|   |-BlockCommandComment 0x5584a7b207f0 <col:4, col:43> Name="retval"
|   | `-ParagraphComment 0x5584a7b20850 <col:11, col:43>
|   |   `-TextComment 0x5584a7b20820 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x5584a7b208a0 <line:2081:1>
|     `-TextComment 0x5584a7b20870 <col:1> Text=" "
|-FunctionDecl 0x5584a7a83a08 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x5584a7a83870 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a838e8 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x5584a7b21000 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x5584a7b209d0 <line:2085:3>
|   | `-TextComment 0x5584a7b209a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b209f0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x5584a7b20a50 <col:10, col:55>
|   |   `-TextComment 0x5584a7b20a20 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x5584a7b20b70 <line:2087:3, line:2089:67>
|   | |-TextComment 0x5584a7b20a70 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x5584a7b20ac0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x5584a7b20ae0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x5584a7b20b00 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x5584a7b20b20 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x5584a7b20bc0 <line:2091:3>
|   | `-TextComment 0x5584a7b20b90 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b20be0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b20c40 <col:9, col:31>
|   |   `-TextComment 0x5584a7b20c10 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b20c90 <line:2093:3>
|   | `-TextComment 0x5584a7b20c60 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b20cb0 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b20d60 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x5584a7b20d10 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b20d30 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x5584a7b20d80 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b20e10 <col:15, col:45>
|   |   `-TextComment 0x5584a7b20de0 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   |-ParagraphComment 0x5584a7b20e60 <line:2096:3>
|   | `-TextComment 0x5584a7b20e30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b20e80 <col:4, line:2097:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b20f00 <line:2096:11, line:2097:3>
|   |   |-TextComment 0x5584a7b20eb0 <line:2096:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b20ed0 <line:2097:3> Text=" "
|   `-BlockCommandComment 0x5584a7b20f20 <col:4, col:34> Name="retval"
|     `-ParagraphComment 0x5584a7b20f80 <col:11, col:34>
|       `-TextComment 0x5584a7b20f50 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x5584a7a83ca8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7a83b10 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a83b88 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x5584a7b216e0 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x5584a7b210a0 <line:2102:3>
|   | `-TextComment 0x5584a7b21070 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b210c0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5584a7b21120 <col:10, col:38>
|   |   `-TextComment 0x5584a7b210f0 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x5584a7b21210 <line:2104:3, line:2105:46>
|   | |-TextComment 0x5584a7b21140 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x5584a7b21190 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5584a7b211b0 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x5584a7b211d0 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x5584a7b21260 <line:2107:3>
|   | `-TextComment 0x5584a7b21230 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b21280 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5584a7b21360 <col:9, col:72>
|   |   |-TextComment 0x5584a7b212b0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5584a7b21300 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5584a7b21320 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5584a7b213b0 <line:2109:3>
|   | `-TextComment 0x5584a7b21380 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b213d0 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b21480 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x5584a7b21430 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b21450 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x5584a7b214a0 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b21580 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x5584a7b21500 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x5584a7b21520 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5584a7b21540 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5584a7b215d0 <line:2114:3>
|   | `-TextComment 0x5584a7b215a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b215f0 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x5584a7b21670 <line:2114:11, line:2115:48>
|       |-TextComment 0x5584a7b21620 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x5584a7b21640 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x5584a7a83f50 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5584a7a83db0 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a83e30 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x5584a7a841f8 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x5584a7a841b8 <line:2135:2, col:72>
| |   `-CallExpr 0x5584a7a84188 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x5584a7a84170 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a84000 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x5584a79d4b30 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x5584a7a84088 <col:36, col:44> 'sys_sflist_t *' prefix '&' cannot overflow
| |     | `-MemberExpr 0x5584a7a84058 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5584a7a812d0
| |     |   `-ImplicitCastExpr 0x5584a7a84040 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5584a7a84020 <col:37> 'struct k_queue *' lvalue ParmVar 0x5584a7a83db0 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x5584a7a840e8 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x5584a7a840d0 <col:68> 'void *' <LValueToRValue> part_of_explicit_cast
| |         `-DeclRefExpr 0x5584a7a840a0 <col:68> 'void *' lvalue ParmVar 0x5584a7a83e30 'data' 'void *'
| `-FullComment 0x5584a7b21d30 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x5584a7b21780 <line:2120:3>
|   | `-TextComment 0x5584a7b21750 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b217a0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7b21800 <col:10, col:41>
|   |   `-TextComment 0x5584a7b217d0 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x5584a7b21950 <line:2122:3, line:2124:76>
|   | |-TextComment 0x5584a7b21820 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x5584a7b21870 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5584a7b21890 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x5584a7b218b0 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x5584a7b218d0 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x5584a7b219a0 <line:2126:3>
|   | `-TextComment 0x5584a7b21970 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b219c0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x5584a7b21a20 <col:9, col:30>
|   |   `-TextComment 0x5584a7b219f0 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x5584a7b21a70 <line:2128:3>
|   | `-TextComment 0x5584a7b21a40 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b21a90 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b21b40 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x5584a7b21af0 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b21b10 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x5584a7b21b60 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b21bf0 <col:15, col:40>
|   |   `-TextComment 0x5584a7b21bc0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5584a7b21c40 <line:2131:3>
|   | `-TextComment 0x5584a7b21c10 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b21c60 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x5584a7b21cc0 <col:11, col:40>
|       `-TextComment 0x5584a7b21c90 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x5584a7a84350 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5584a7a84238 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7a842b8 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x5584a7a850f8 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x5584a7a84478 <line:2154:2, col:20>
| | | `-VarDecl 0x5584a7a84410 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x5584a7a84f10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x5584a7a84590 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x5584a7a84490 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x5584a7a84410 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x5584a7a84568 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x5584a7a84550 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5584a7a844b0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x5584a7a84538 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&' cannot overflow
| | | |     `-MemberExpr 0x5584a7a84508 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5584a7a812d0
| | | |       `-ImplicitCastExpr 0x5584a7a844f0 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x5584a7a844d0 <col:28> 'struct k_queue *' lvalue ParmVar 0x5584a7a84238 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x5584a7a84cc0 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x5584a7a84650 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x5584a7a845b0 <col:43> 'sys_sfnode_t *' lvalue Var 0x5584a7a84410 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x5584a7a84668 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x5584a7a84630 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x5584a7a84608 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x5584a7a845d0 <col:23> 'int' 0
| | | |-BinaryOperator 0x5584a7a84d98 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x5584a7a84ce0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x5584a7a84410 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x5584a7a84d58 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x5584a7a84d40 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5584a7a84d00 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5584a79e3b38 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x5584a7a84d80 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5584a7a84d20 <col:43> 'sys_sfnode_t *' lvalue Var 0x5584a7a84410 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x5584a7a84ef8 <col:49, line:2160:2>
| | |   `-IfStmt 0x5584a7a84ee0 <line:2157:3, line:2159:3>
| | |     |-BinaryOperator 0x5584a7a84e60 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x5584a7a84e48 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x5584a7a84db8 <col:7> 'sys_sfnode_t *' lvalue Var 0x5584a7a84410 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x5584a7a84e20 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x5584a7a84e08 <col:32> 'void *' <LValueToRValue> part_of_explicit_cast
| | |     |     `-DeclRefExpr 0x5584a7a84dd8 <col:32> 'void *' lvalue ParmVar 0x5584a7a842b8 'data' 'void *'
| | |     `-CompoundStmt 0x5584a7a84ec8 <col:38, line:2159:3>
| | |       `-ReturnStmt 0x5584a7a84eb8 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |         `-ImplicitCastExpr 0x5584a7a84ea0 <col:16> 'bool' <IntegralToBoolean>
| | |           `-IntegerLiteral 0x5584a7a84e80 <col:16> 'int' 0
| | |-CallExpr 0x5584a7a85028 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x5584a7a85010 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x5584a7a84f48 <col:2> 'void (struct k_queue *, void *)' Function 0x5584a7a82830 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x5584a7a85058 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x5584a7a84f68 <col:17> 'struct k_queue *' lvalue ParmVar 0x5584a7a84238 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x5584a7a85070 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5584a7a84f88 <col:24> 'void *' lvalue ParmVar 0x5584a7a842b8 'data' 'void *'
| | `-ReturnStmt 0x5584a7a850c0 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x5584a7a850a8 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x5584a7a85088 <col:16> 'int' 1
| `-FullComment 0x5584a7b22350 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x5584a7b21dd0 <line:2139:3>
|   | `-TextComment 0x5584a7b21da0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b21df0 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x5584a7b21e50 <col:10, col:72>
|   |   `-TextComment 0x5584a7b21e20 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x5584a7b21f70 <line:2141:3, line:2143:78>
|   | |-TextComment 0x5584a7b21e70 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x5584a7b21ec0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5584a7b21ee0 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x5584a7b21f00 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x5584a7b21f20 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x5584a7b21fc0 <line:2145:3>
|   | `-TextComment 0x5584a7b21f90 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b21fe0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x5584a7b22040 <col:9, col:30>
|   |   `-TextComment 0x5584a7b22010 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x5584a7b22090 <line:2147:3>
|   | `-TextComment 0x5584a7b22060 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b220b0 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b22160 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x5584a7b22110 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5584a7b22130 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x5584a7b22180 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b22210 <col:15, col:40>
|   |   `-TextComment 0x5584a7b221e0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5584a7b22260 <line:2150:3>
|   | `-TextComment 0x5584a7b22230 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b22280 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x5584a7b222e0 <col:11, col:52>
|       `-TextComment 0x5584a7b222b0 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x5584a7a85268 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7a85150 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x5584a7b22890 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x5584a7b223f0 <line:2167:3>
|   | `-TextComment 0x5584a7b223c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b22410 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5584a7b22470 <col:10, col:56>
|   |   `-TextComment 0x5584a7b22440 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x5584a7b224e0 <line:2169:3, line:2170:59>
|   | |-TextComment 0x5584a7b22490 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x5584a7b224b0 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x5584a7b22530 <line:2172:3>
|   | `-TextComment 0x5584a7b22500 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b22550 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b225b0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b22580 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b22600 <line:2174:3>
|   | `-TextComment 0x5584a7b225d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b22620 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b226b0 <col:16, col:37>
|   |   `-TextComment 0x5584a7b22680 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5584a7b22700 <line:2176:3>
|   | `-TextComment 0x5584a7b226d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b22720 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x5584a7b227a0 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x5584a7b22750 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x5584a7b22770 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x5584a7b227c0 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x5584a7b22820 <col:11, col:34>
|       `-TextComment 0x5584a7b227f0 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x5584a7a853d0 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7a85338 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x5584a7a855d8 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x5584a7a85598 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x5584a7a85570 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x5584a7a85530 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x5584a7a85518 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5584a7a85478 <col:14> 'bool (sys_sflist_t *)' Function 0x5584a79e32d8 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x5584a7a85500 <col:34, col:42> 'sys_sflist_t *' prefix '&' cannot overflow
|           `-MemberExpr 0x5584a7a854d0 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5584a7a812d0
|             `-ImplicitCastExpr 0x5584a7a854b8 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x5584a7a85498 <col:35> 'struct k_queue *' lvalue ParmVar 0x5584a7a85338 'queue' 'struct k_queue *'
|-FunctionDecl 0x5584a7a85728 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7a85618 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x5584a7b22c30 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x5584a7b22930 <line:2187:3>
|   | `-TextComment 0x5584a7b22900 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b22950 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7b229b0 <col:10, col:44>
|   |   `-TextComment 0x5584a7b22980 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x5584a7b22a00 <line:2189:3, col:61>
|   | `-TextComment 0x5584a7b229d0 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x5584a7b22a50 <line:2191:3>
|   | `-TextComment 0x5584a7b22a20 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b22a70 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b22b00 <col:16, col:37>
|   |   `-TextComment 0x5584a7b22ad0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5584a7b22b50 <line:2193:3>
|   | `-TextComment 0x5584a7b22b20 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b22b70 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x5584a7b22bd0 <col:11, col:51>
|       `-TextComment 0x5584a7b22ba0 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x5584a7a85890 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7a857f8 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x5584a7a85b58 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x5584a7a85b20 <line:2199:2, col:70>
|     `-CallExpr 0x5584a7a85ad8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x5584a7a85ac0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7a85938 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x5584a7a817f8 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x5584a7a85a10 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5584a7a859f8 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5584a7a85958 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e21b0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x5584a7a859e0 <col:48, col:56> 'sys_sflist_t *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x5584a7a859b0 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5584a7a812d0
|       |     `-ImplicitCastExpr 0x5584a7a85998 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5584a7a85978 <col:49> 'struct k_queue *' lvalue ParmVar 0x5584a7a857f8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5584a7a85b08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x5584a7a85a38 <col:16> 'int' 0
|-FunctionDecl 0x5584a7a865a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7a85b98 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x5584a7b22fd0 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x5584a7b22cd0 <line:2203:3>
|   | `-TextComment 0x5584a7b22ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b22cf0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7b22d50 <col:10, col:44>
|   |   `-TextComment 0x5584a7b22d20 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x5584a7b22da0 <line:2205:3, col:61>
|   | `-TextComment 0x5584a7b22d70 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x5584a7b22df0 <line:2207:3>
|   | `-TextComment 0x5584a7b22dc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b22e10 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b22ea0 <col:16, col:37>
|   |   `-TextComment 0x5584a7b22e70 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5584a7b22ef0 <line:2209:3>
|   | `-TextComment 0x5584a7b22ec0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b22f10 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x5584a7b22f70 <col:11, col:51>
|       `-TextComment 0x5584a7b22f40 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x5584a7a86708 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7a86670 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x5584a7a86998 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x5584a7a86930 <line:2215:2, col:70>
|     `-CallExpr 0x5584a7a868e8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x5584a7a868d0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7a867b0 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x5584a7a817f8 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x5584a7a86888 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5584a7a86870 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5584a7a867d0 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5584a79e23d0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x5584a7a86858 <col:48, col:56> 'sys_sflist_t *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x5584a7a86828 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5584a7a812d0
|       |     `-ImplicitCastExpr 0x5584a7a86810 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5584a7a867f0 <col:49> 'struct k_queue *' lvalue ParmVar 0x5584a7a86670 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5584a7a86918 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x5584a7a868b0 <col:16> 'int' 0
|-RecordDecl 0x5584a7a869b0 prev 0x5584a7a5c948 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x5584a7a86a50 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x5584a7a86e68 prev 0x5584a7a5c9f8 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x5584a7b230f0 <line:2523:4, col:7>
| | `-ParagraphComment 0x5584a7b230c0 <col:4, col:7>
| |   |-TextComment 0x5584a7b23040 <col:4> Text=" "
| |   |-TextComment 0x5584a7b23060 <col:5> Text="@"
| |   `-TextComment 0x5584a7b23080 <col:6, col:7> Text="} "
| `-FieldDecl 0x5584a7a86f08 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x5584a7a87148 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x5584a79fda80 'uintptr_t' sugar
|   |-Typedef 0x5584a7930f60 'uintptr_t'
|   `-BuiltinType 0x5584a78ba6b0 'unsigned long'
|-RecordDecl 0x5584a7a871a0 prev 0x5584a7a5caa8 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x5584a7a87230 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5584a7a872a0 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x5584a7a87390 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x5584a7a873f0 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x5584a7a87450 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x5584a7a874b0 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x5584a7978700 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x5584a79784d8 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x5584a7978550 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x5584a79785c8 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x5584a7b236e0 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x5584a7b23190 <line:2675:3>
|   | `-TextComment 0x5584a7b23160 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b231b0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5584a7b23210 <col:10, col:29>
|   |   `-TextComment 0x5584a7b231e0 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x5584a7b23260 <line:2677:3, col:67>
|   | `-TextComment 0x5584a7b23230 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x5584a7b232b0 <line:2679:3>
|   | `-TextComment 0x5584a7b23280 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b232d0 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b23380 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x5584a7b23330 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5584a7b23350 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x5584a7b233a0 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b23450 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x5584a7b23400 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x5584a7b23420 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x5584a7b23470 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b23500 <col:22, col:67>
|   |   `-TextComment 0x5584a7b234d0 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x5584a7b23550 <line:2683:3>
|   | `-TextComment 0x5584a7b23520 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b23570 <col:4, line:2685:1> Name="return"
|     `-ParagraphComment 0x5584a7b23670 <line:2683:11, line:2685:1>
|       |-TextComment 0x5584a7b235a0 <line:2683:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b235c0 <line:2684:3> Text=" "
|       |-InlineCommandComment 0x5584a7b23610 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5584a7b23630 <line:2685:1> Text=" "
|-FunctionDecl 0x5584a79789a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x5584a7978810 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x5584a7978888 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x5584a7b23c80 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x5584a7b23780 <line:2691:3>
|   | `-TextComment 0x5584a7b23750 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b237a0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5584a7b23800 <col:10, col:29>
|   |   `-TextComment 0x5584a7b237d0 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x5584a7b238c0 <line:2693:3, line:2696:72>
|   | |-TextComment 0x5584a7b23820 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x5584a7b23840 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x5584a7b23860 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x5584a7b23880 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x5584a7b23930 <line:2698:3>
|   | `-TextComment 0x5584a7b238e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b23950 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b23a00 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x5584a7b239b0 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5584a7b239d0 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x5584a7b23a20 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b23ab0 <col:22, col:67>
|   |   `-TextComment 0x5584a7b23a80 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x5584a7b23b00 <line:2701:3>
|   | `-TextComment 0x5584a7b23ad0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b23b20 <col:4, line:2703:1> Name="return"
|     `-ParagraphComment 0x5584a7b23c20 <line:2701:11, line:2703:1>
|       |-TextComment 0x5584a7b23b50 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|       |-TextComment 0x5584a7b23b70 <line:2702:3> Text=" "
|       |-InlineCommandComment 0x5584a7b23bc0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5584a7b23be0 <line:2703:1> Text=" "
|-FunctionDecl 0x5584a7978bb8 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x5584a7978aa0 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x5584a7b24180 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x5584a7b23d20 <line:2709:3>
|   | `-TextComment 0x5584a7b23cf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b23d40 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7b23da0 <col:10, col:44>
|   |   `-TextComment 0x5584a7b23d70 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x5584a7b23e40 <line:2711:3, line:2713:46>
|   | |-TextComment 0x5584a7b23dc0 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x5584a7b23de0 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x5584a7b23e00 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x5584a7b23e90 <line:2715:3>
|   | `-TextComment 0x5584a7b23e60 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b23eb0 <col:4, line:2716:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b23f60 <line:2715:16, line:2716:3>
|   |   |-TextComment 0x5584a7b23f10 <line:2715:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5584a7b23f30 <line:2716:3> Text=" "
|   |-BlockCommandComment 0x5584a7b23f80 <col:4, line:2717:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b24000 <line:2716:11, line:2717:3>
|   |   |-TextComment 0x5584a7b23fb0 <line:2716:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b23fd0 <line:2717:3> Text=" "
|   `-BlockCommandComment 0x5584a7b24020 <col:4, line:2719:1> Name="retval"
|     `-ParagraphComment 0x5584a7b24120 <line:2717:11, line:2719:1>
|       |-TextComment 0x5584a7b24050 <line:2717:11, col:46> Text=" -EAGAIN when object is still in use"
|       |-TextComment 0x5584a7b24070 <line:2718:3> Text=" "
|       |-InlineCommandComment 0x5584a7b240c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5584a7b240e0 <line:2719:1> Text=" "
|-FunctionDecl 0x5584a7978e48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x5584a7978cb0 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x5584a7978d28 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x5584a7b248f0 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x5584a7b24220 <line:2723:3>
|   | `-TextComment 0x5584a7b241f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b24240 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b242a0 <col:10, col:39>
|   |   `-TextComment 0x5584a7b24270 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x5584a7b243c0 <line:2725:3, col:55>
|   | |-TextComment 0x5584a7b242c0 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x5584a7b24310 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x5584a7b24330 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x5584a7b24380 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x5584a7b24410 <line:2727:3>
|   | `-TextComment 0x5584a7b243e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b24430 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b24490 <col:9, col:31>
|   |   `-TextComment 0x5584a7b24460 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b244e0 <line:2729:3>
|   | `-TextComment 0x5584a7b244b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b24500 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b245b0 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x5584a7b24560 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5584a7b24580 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x5584a7b245d0 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b24660 <col:15, col:44>
|   |   `-TextComment 0x5584a7b24630 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x5584a7b246b0 <line:2732:3>
|   | `-TextComment 0x5584a7b24680 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b246d0 <col:4, line:2733:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b24750 <line:2732:11, line:2733:3>
|   |   |-TextComment 0x5584a7b24700 <line:2732:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b24720 <line:2733:3> Text=" "
|   `-BlockCommandComment 0x5584a7b24770 <col:4, line:2735:1> Name="retval"
|     `-ParagraphComment 0x5584a7b24870 <line:2733:11, line:2735:1>
|       |-TextComment 0x5584a7b247a0 <line:2733:11, col:35> Text=" -ENOMEM if stack is full"
|       |-TextComment 0x5584a7b247c0 <line:2734:3> Text=" "
|       |-InlineCommandComment 0x5584a7b24810 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5584a7b24830 <line:2735:1> Text=" "
|-FunctionDecl 0x5584a7979188 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7978f50 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x5584a7978fc8 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x5584a7979040 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x5584a7b252e0 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x5584a7b24990 <line:2739:3>
|   | `-TextComment 0x5584a7b24960 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b249b0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5584a7b24a10 <col:10, col:38>
|   |   `-TextComment 0x5584a7b249e0 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x5584a7b24b60 <line:2741:3, line:2742:47>
|   | |-TextComment 0x5584a7b24a30 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x5584a7b24a80 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x5584a7b24aa0 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x5584a7b24ac0 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x5584a7b24b10 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x5584a7b24bb0 <line:2744:3>
|   | `-TextComment 0x5584a7b24b80 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b24bd0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5584a7b24cb0 <col:9, col:72>
|   |   |-TextComment 0x5584a7b24c00 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5584a7b24c50 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5584a7b24c70 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5584a7b24d00 <line:2746:3>
|   | `-TextComment 0x5584a7b24cd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b24d20 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b24dd0 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x5584a7b24d80 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5584a7b24da0 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x5584a7b24df0 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b24ea0 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x5584a7b24e50 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x5584a7b24e70 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x5584a7b24ec0 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b24fa0 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x5584a7b24f20 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x5584a7b24f40 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5584a7b24f60 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5584a7b24ff0 <line:2752:3>
|   | `-TextComment 0x5584a7b24fc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b25010 <col:4, line:2753:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b25090 <line:2752:11, line:2753:3>
|   |   |-TextComment 0x5584a7b25040 <line:2752:11, col:39> Text=" 0 Element popped from stack."
|   |   `-TextComment 0x5584a7b25060 <line:2753:3> Text=" "
|   |-BlockCommandComment 0x5584a7b250b0 <col:4, line:2754:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b25130 <line:2753:11, line:2754:3>
|   |   |-TextComment 0x5584a7b250e0 <line:2753:11, col:43> Text=" -EBUSY Returned without waiting."
|   |   `-TextComment 0x5584a7b25100 <line:2754:3> Text=" "
|   `-BlockCommandComment 0x5584a7b25150 <col:4, line:2756:1> Name="retval"
|     `-ParagraphComment 0x5584a7b25250 <line:2754:11, line:2756:1>
|       |-TextComment 0x5584a7b25180 <line:2754:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5584a7b251a0 <line:2755:3> Text=" "
|       |-InlineCommandComment 0x5584a7b251f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5584a7b25210 <line:2756:1> Text=" "
|-RecordDecl 0x5584a7979298 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x5584a7b25400 <line:2778:4, col:7>
|   `-ParagraphComment 0x5584a7b253d0 <col:4, col:7>
|     |-TextComment 0x5584a7b25350 <col:4> Text=" "
|     |-TextComment 0x5584a7b25370 <col:5> Text="@"
|     `-TextComment 0x5584a7b25390 <col:6, col:7> Text="} "
|-RecordDecl 0x5584a7979348 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x5584a797ac08 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x5584a797ab90 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x5584a797ab30 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x5584a797aaf0 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x5584a78ba5f0 'int'
|       |-PointerType 0x5584a797a970 'struct k_poll_event *'
|       | `-ElaboratedType 0x5584a797a900 'struct k_poll_event' sugar
|       |   `-RecordType 0x5584a7a68160 'struct k_poll_event'
|       |     `-Record 0x5584a7ab3f48 'k_poll_event'
|       `-TypedefType 0x5584a794cd30 'u32_t' sugar
|         |-Typedef 0x5584a7931270 'u32_t'
|         `-BuiltinType 0x5584a78ba690 'unsigned int'
|-RecordDecl 0x5584a797ac60 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x5584a797ad18 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x5584a797ad90 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x5584a797ae18 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x5584a797b148 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x5584a797b0e0 'void (*)(struct k_work *)'
| | `-ParenType 0x5584a797b080 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x5584a797b040 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x5584a78ba550 'void'
| |     `-PointerType 0x5584a797af40 'struct k_work *'
| |       `-ElaboratedType 0x5584a797aed0 'struct k_work' sugar
| |         `-RecordType 0x5584a7979320 'struct k_work'
| |           `-Record 0x5584a797b478 'k_work'
| `-FullComment 0x5584a7b25900 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x5584a7b254a0 <line:2797:3>
|   | `-TextComment 0x5584a7b25470 <col:3> Text=" "
|   |-VerbatimLineComment 0x5584a7b254c0 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x5584a7b25530 <line:2798:3>
|   | `-TextComment 0x5584a7b25500 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b25550 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7b255b0 <col:10, col:42>
|   |   `-TextComment 0x5584a7b25580 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x5584a7b25620 <line:2800:3, line:2801:52>
|   | |-TextComment 0x5584a7b255d0 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x5584a7b255f0 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x5584a7b25670 <line:2803:3>
|   | `-TextComment 0x5584a7b25640 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b25690 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b25720 <col:15, col:40>
|   |   `-TextComment 0x5584a7b256f0 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x5584a7b25770 <line:2805:3>
|   | `-TextComment 0x5584a7b25740 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b25790 <col:4, line:2807:1> Name="return"
|     `-ParagraphComment 0x5584a7b25890 <line:2805:11, line:2807:1>
|       |-TextComment 0x5584a7b257c0 <line:2805:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b257e0 <line:2806:3> Text=" "
|       |-InlineCommandComment 0x5584a7b25830 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5584a7b25850 <line:2807:1> Text=" "
|-RecordDecl 0x5584a797b1c8 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x5584a7b25a30 <line:2811:3, col:24>
| | `-ParagraphComment 0x5584a7b25a00 <col:3, col:24>
| |   |-TextComment 0x5584a7b25980 <col:3> Text=" "
| |   |-InlineCommandComment 0x5584a7b259a0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5584a7b259c0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5584a797b298 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x5584a797b308 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x5584a797b358 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x5584a797b428 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x5584a797b478 prev 0x5584a7979298 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x5584a797b510 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x5584a797b598 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x5584a797b6c0 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x5584a797b710 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x5584a797b7d8 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x5584a797b848 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x5584a797ba58 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x5584a797bb08 prev 0x5584a7979348 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x5584a797bba8 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x5584a797bc58 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x5584a797bcd0 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x5584a797bd38 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x5584a797bd98 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x5584a797be08 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x5584a797be70 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x5584a797bee0 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x5584a797c190 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x5584a797c000 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x5584a797c078 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x5584a797c698 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x5584a797c650 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x5584a797c278 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*' cannot overflow
| |   | `-ImplicitCastExpr 0x5584a797c260 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5584a797c240 <col:3> 'struct k_work *' lvalue ParmVar 0x5584a797c000 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x5584a797c638 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x5584a797c610 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x5584a797c548 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x5584a797c310 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x5584a797c2e8 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x5584a797c2b0 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x5584a797c5a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x5584a797c370 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x5584a797c078 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x5584a797c5c8 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x5584a797c3d0 <col:13> 'int' 0
| `-FullComment 0x5584a7b25f40 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x5584a7b25ad0 <line:2876:3>
|   | `-TextComment 0x5584a7b25aa0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b25af0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5584a7b25b50 <col:10, col:33>
|   |   `-TextComment 0x5584a7b25b20 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x5584a7b25ba0 <line:2878:3, col:74>
|   | `-TextComment 0x5584a7b25b70 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x5584a7b25bf0 <line:2880:3>
|   | `-TextComment 0x5584a7b25bc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b25c10 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b25cc0 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x5584a7b25c70 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x5584a7b25c90 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x5584a7b25ce0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b25d70 <col:18, col:70>
|   |   `-TextComment 0x5584a7b25d40 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5584a7b25dc0 <line:2883:3>
|   | `-TextComment 0x5584a7b25d90 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b25de0 <col:4, line:2885:1> Name="return"
|     `-ParagraphComment 0x5584a7b25ee0 <line:2883:11, line:2885:1>
|       |-TextComment 0x5584a7b25e10 <line:2883:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b25e30 <line:2884:3> Text=" "
|       |-InlineCommandComment 0x5584a7b25e80 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5584a7b25ea0 <line:2885:1> Text=" "
|-FunctionDecl 0x5584a797c880 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x5584a797c6d8 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5584a797c768 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x5584a797d118 <line:2915:1, line:2919:1>
| | `-IfStmt 0x5584a797d0d8 <line:2916:2, line:2918:2>
| |   |-UnaryOperator 0x5584a797cf70 <line:2916:6, col:64> 'int' prefix '!' cannot overflow
| |   | `-CallExpr 0x5584a797cf28 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x5584a797cf10 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5584a797c930 <col:7> 'bool (atomic_t *, int)' Function 0x5584a79590f0 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x5584a797cf58 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x5584a797c988 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x5584a797b6c0
| |   |   |   `-ImplicitCastExpr 0x5584a797c970 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x5584a797c950 <col:31> 'struct k_work *' lvalue ParmVar 0x5584a797c768 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x5584a797ce90 <col:44> 'int' EnumConstant 0x5584a797b428 'K_WORK_STATE_PENDING' 'int'
| |   `-CompoundStmt 0x5584a797d0c0 <col:67, line:2918:2>
| |     `-CallExpr 0x5584a797d060 <line:2917:3, col:38> 'void'
| |       |-ImplicitCastExpr 0x5584a797d048 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a797cf88 <col:3> 'void (struct k_queue *, void *)' Function 0x5584a7a82830 'k_queue_append' 'void (struct k_queue *, void *)'
| |       |-UnaryOperator 0x5584a797d010 <col:18, col:27> 'struct k_queue *' prefix '&' cannot overflow
| |       | `-MemberExpr 0x5584a797cfe0 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x5584a797b298
| |       |   `-ImplicitCastExpr 0x5584a797cfc8 <col:19> 'struct k_work_q *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5584a797cfa8 <col:19> 'struct k_work_q *' lvalue ParmVar 0x5584a797c6d8 'work_q' 'struct k_work_q *'
| |       `-ImplicitCastExpr 0x5584a797d0a8 <col:34> 'void *' <BitCast>
| |         `-ImplicitCastExpr 0x5584a797d090 <col:34> 'struct k_work *' <LValueToRValue>
| |           `-DeclRefExpr 0x5584a797d028 <col:34> 'struct k_work *' lvalue ParmVar 0x5584a797c768 'work' 'struct k_work *'
| `-FullComment 0x5584a7b267f0 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x5584a7b25fe0 <line:2892:3>
|   | `-TextComment 0x5584a7b25fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b26000 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5584a7b26060 <col:10, col:29>
|   |   `-TextComment 0x5584a7b26030 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x5584a7b26270 <line:2894:3, line:2899:15>
|   | |-TextComment 0x5584a7b26080 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x5584a7b260d0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5584a7b260f0 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x5584a7b26110 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x5584a7b26160 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x5584a7b26180 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x5584a7b261a0 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x5584a7b261c0 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x5584a7b261e0 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x5584a7b26200 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x5584a7b262c0 <line:2901:3>
|   | `-TextComment 0x5584a7b26290 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b262e0 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x5584a7b26360 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x5584a7b26310 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x5584a7b26330 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x5584a7b263b0 <line:2905:3>
|   | `-TextComment 0x5584a7b26380 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b263d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b26430 <col:9, col:31>
|   |   `-TextComment 0x5584a7b26400 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b26480 <line:2907:3>
|   | `-TextComment 0x5584a7b26450 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b264a0 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b26550 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x5584a7b26500 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5584a7b26520 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x5584a7b26570 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b26600 <col:15, col:36>
|   |   `-TextComment 0x5584a7b265d0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5584a7b26650 <line:2910:3>
|   | `-TextComment 0x5584a7b26620 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b26670 <col:4, line:2912:1> Name="return"
|     `-ParagraphComment 0x5584a7b26770 <line:2910:11, line:2912:1>
|       |-TextComment 0x5584a7b266a0 <line:2910:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b266c0 <line:2911:3> Text=" "
|       |-InlineCommandComment 0x5584a7b26710 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5584a7b26730 <line:2912:1> Text=" "
|-FunctionDecl 0x5584a797d308 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x5584a797d158 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5584a797d1e8 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x5584a797da48 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x5584a797d470 <line:2945:2, col:18>
| | | `-VarDecl 0x5584a797d3d0 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x5584a797d458 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x5584a797d438 <col:15> 'int' 16
| | |-IfStmt 0x5584a797d9c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-UnaryOperator 0x5584a797d590 <line:2947:6, col:64> 'int' prefix '!' cannot overflow
| | | | `-CallExpr 0x5584a797d548 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x5584a797d530 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5584a797d488 <col:7> 'bool (atomic_t *, int)' Function 0x5584a79590f0 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x5584a797d578 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x5584a797d4e0 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x5584a797b6c0
| | | |   |   `-ImplicitCastExpr 0x5584a797d4c8 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x5584a797d4a8 <col:31> 'struct k_work *' lvalue ParmVar 0x5584a797d1e8 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x5584a797d510 <col:44> 'int' EnumConstant 0x5584a797b428 'K_WORK_STATE_PENDING' 'int'
| | | `-CompoundStmt 0x5584a797d9a0 <col:67, line:2956:2>
| | |   |-BinaryOperator 0x5584a797d768 <line:2948:3, col:50> 'int' '='
| | |   | |-DeclRefExpr 0x5584a797d5a8 <col:3> 'int' lvalue Var 0x5584a797d3d0 'ret' 'int'
| | |   | `-CallExpr 0x5584a797d708 <col:9, col:50> 's32_t':'int'
| | |   |   |-ImplicitCastExpr 0x5584a797d6f0 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | |   |   | `-DeclRefExpr 0x5584a797d5c8 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5584a7a82ad0 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | |   |   |-UnaryOperator 0x5584a797d650 <col:30, col:39> 'struct k_queue *' prefix '&' cannot overflow
| | |   |   | `-MemberExpr 0x5584a797d620 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x5584a797b298
| | |   |   |   `-ImplicitCastExpr 0x5584a797d608 <col:31> 'struct k_work_q *' <LValueToRValue>
| | |   |   |     `-DeclRefExpr 0x5584a797d5e8 <col:31> 'struct k_work_q *' lvalue ParmVar 0x5584a797d158 'work_q' 'struct k_work_q *'
| | |   |   `-ImplicitCastExpr 0x5584a797d750 <col:46> 'void *' <BitCast>
| | |   |     `-ImplicitCastExpr 0x5584a797d738 <col:46> 'struct k_work *' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x5584a797d668 <col:46> 'struct k_work *' lvalue ParmVar 0x5584a797d1e8 'work' 'struct k_work *'
| | |   `-IfStmt 0x5584a797d988 <line:2953:3, line:2955:3>
| | |     |-BinaryOperator 0x5584a797d7e0 <line:2953:7, col:14> 'int' '!='
| | |     | |-ImplicitCastExpr 0x5584a797d7c8 <col:7> 'int' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x5584a797d788 <col:7> 'int' lvalue Var 0x5584a797d3d0 'ret' 'int'
| | |     | `-IntegerLiteral 0x5584a797d7a8 <col:14> 'int' 0
| | |     `-CompoundStmt 0x5584a797d970 <col:17, line:2955:3>
| | |       `-CallExpr 0x5584a797d928 <line:2954:4, col:54> 'void'
| | |         |-ImplicitCastExpr 0x5584a797d910 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x5584a797d800 <col:4> 'void (atomic_t *, int)' Function 0x5584a7959b60 'atomic_clear_bit' 'void (atomic_t *, int)'
| | |         |-ImplicitCastExpr 0x5584a797d958 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | |         | `-MemberExpr 0x5584a797d858 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x5584a797b6c0
| | |         |   `-ImplicitCastExpr 0x5584a797d840 <col:21> 'struct k_work *' <LValueToRValue>
| | |         |     `-DeclRefExpr 0x5584a797d820 <col:21> 'struct k_work *' lvalue ParmVar 0x5584a797d1e8 'work' 'struct k_work *'
| | |         `-DeclRefExpr 0x5584a797d888 <col:34> 'int' EnumConstant 0x5584a797b428 'K_WORK_STATE_PENDING' 'int'
| | `-ReturnStmt 0x5584a797da10 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x5584a797d9f8 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a797d9d8 <col:9> 'int' lvalue Var 0x5584a797d3d0 'ret' 'int'
| `-FullComment 0x5584a7b27030 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x5584a7b26890 <line:2922:3>
|   | `-TextComment 0x5584a7b26860 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b268b0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5584a7b26910 <col:10, col:53>
|   |   `-TextComment 0x5584a7b268e0 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x5584a7b26a00 <line:2924:3, line:2928:71>
|   | |-TextComment 0x5584a7b26930 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x5584a7b26950 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x5584a7b26970 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x5584a7b26990 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x5584a7b269b0 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x5584a7b26a50 <line:2930:3, col:61>
|   | `-TextComment 0x5584a7b26a20 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x5584a7b26aa0 <line:2932:3>
|   | `-TextComment 0x5584a7b26a70 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b26ac0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b26b20 <col:9, col:31>
|   |   `-TextComment 0x5584a7b26af0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b26b70 <line:2934:3>
|   | `-TextComment 0x5584a7b26b40 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b26b90 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b26c40 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x5584a7b26bf0 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5584a7b26c10 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x5584a7b26c60 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b26cf0 <col:15, col:36>
|   |   `-TextComment 0x5584a7b26cc0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5584a7b26d40 <line:2937:3>
|   | `-TextComment 0x5584a7b26d10 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b26d60 <col:4, line:2938:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b26de0 <line:2937:11, line:2938:3>
|   |   |-TextComment 0x5584a7b26d90 <line:2937:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   |   `-TextComment 0x5584a7b26db0 <line:2938:3> Text=" "
|   |-BlockCommandComment 0x5584a7b26e00 <col:4, line:2939:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b26e80 <line:2938:11, line:2939:3>
|   |   |-TextComment 0x5584a7b26e30 <line:2938:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   |   `-TextComment 0x5584a7b26e50 <line:2939:3> Text=" "
|   `-BlockCommandComment 0x5584a7b26ea0 <col:4, line:2941:1> Name="retval"
|     `-ParagraphComment 0x5584a7b26fa0 <line:2939:11, line:2941:1>
|       |-TextComment 0x5584a7b26ed0 <line:2939:11, col:20> Text=" 0 Success"
|       |-TextComment 0x5584a7b26ef0 <line:2940:3> Text=" "
|       |-InlineCommandComment 0x5584a7b26f40 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5584a7b26f60 <line:2941:1> Text=" "
|-FunctionDecl 0x5584a797dba0 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x5584a797da98 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x5584a797de08 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x5584a797ddc8 <line:2976:2, col:58>
| |   `-CallExpr 0x5584a797dd68 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x5584a797dd50 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a797dc48 <col:9> 'bool (const atomic_t *, int)' Function 0x5584a794c300 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x5584a797ddb0 <col:25, col:31> 'const atomic_t *' <NoOp>
| |     | `-ImplicitCastExpr 0x5584a797dd98 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x5584a797dca0 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x5584a797b6c0
| |     |     `-ImplicitCastExpr 0x5584a797dc88 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5584a797dc68 <col:25> 'struct k_work *' lvalue ParmVar 0x5584a797da98 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x5584a797dcd0 <col:38> 'int' EnumConstant 0x5584a797b428 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x5584a7b275f0 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x5584a7b270d0 <line:2962:3>
|   | `-TextComment 0x5584a7b270a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b270f0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7b27150 <col:10, col:42>
|   |   `-TextComment 0x5584a7b27120 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x5584a7b27240 <line:2964:3, line:2965:9>
|   | |-TextComment 0x5584a7b27170 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x5584a7b271c0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5584a7b271e0 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x5584a7b27200 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x5584a7b27290 <line:2967:3>
|   | `-TextComment 0x5584a7b27260 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b272b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b27310 <col:9, col:31>
|   |   `-TextComment 0x5584a7b272e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b27360 <line:2969:3>
|   | `-TextComment 0x5584a7b27330 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b27380 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b27410 <col:15, col:36>
|   |   `-TextComment 0x5584a7b273e0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5584a7b27460 <line:2971:3>
|   | `-TextComment 0x5584a7b27430 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b27480 <col:4, line:2973:1> Name="return"
|     `-ParagraphComment 0x5584a7b27580 <line:2971:11, line:2973:1>
|       |-TextComment 0x5584a7b274b0 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|       |-TextComment 0x5584a7b274d0 <line:2972:3> Text=" "
|       |-InlineCommandComment 0x5584a7b27520 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5584a7b27540 <line:2973:1> Text=" "
|-FunctionDecl 0x5584a797e280 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x5584a797dfc0 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5584a797e038 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5584a797e0b0 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a797e130 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x5584a7b27de0 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x5584a7b27690 <line:2980:3>
|   | `-TextComment 0x5584a7b27660 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b276b0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5584a7b27710 <col:10, col:28>
|   |   `-TextComment 0x5584a7b276e0 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x5584a7b27800 <line:2982:3, line:2983:41>
|   | |-TextComment 0x5584a7b27730 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x5584a7b27780 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x5584a7b277a0 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x5584a7b277c0 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x5584a7b27850 <line:2985:3>
|   | `-TextComment 0x5584a7b27820 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b27870 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b27920 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x5584a7b278d0 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5584a7b278f0 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x5584a7b27950 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b27a30 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x5584a7b279b0 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x5584a7b279d0 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x5584a7b279f0 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x5584a7b27a50 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b27b50 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x5584a7b27ab0 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x5584a7b27ad0 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x5584a7b27af0 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x5584a7b27b10 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x5584a7b27b70 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b27c00 <col:15, col:51>
|   |   `-TextComment 0x5584a7b27bd0 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x5584a7b27c50 <line:2993:3>
|   | `-TextComment 0x5584a7b27c20 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b27c70 <col:4, line:2995:1> Name="return"
|     `-ParagraphComment 0x5584a7b27d70 <line:2993:11, line:2995:1>
|       |-TextComment 0x5584a7b27ca0 <line:2993:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b27cc0 <line:2994:3> Text=" "
|       |-InlineCommandComment 0x5584a7b27d10 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5584a7b27d30 <line:2995:1> Text=" "
|-FunctionDecl 0x5584a797e5a8 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x5584a797e390 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5584a797e408 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5584a797e480 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a797e500 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x5584a7b285c0 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x5584a7b27e80 <line:3001:3>
|   | `-TextComment 0x5584a7b27e50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b27ea0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5584a7b27f00 <col:10, col:40>
|   |   `-TextComment 0x5584a7b27ed0 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x5584a7b27ff0 <line:3003:3, line:3007:21>
|   | |-TextComment 0x5584a7b27f20 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x5584a7b27f40 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x5584a7b27f60 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x5584a7b27f80 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x5584a7b27fa0 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x5584a7b28040 <line:3009:3>
|   | `-TextComment 0x5584a7b28010 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b28060 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b28110 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x5584a7b280c0 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5584a7b280e0 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x5584a7b28130 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b28210 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x5584a7b28190 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x5584a7b281b0 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x5584a7b281d0 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x5584a7b28230 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b28330 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x5584a7b28290 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x5584a7b282b0 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x5584a7b282d0 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x5584a7b282f0 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x5584a7b28350 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b283e0 <col:15, col:51>
|   |   `-TextComment 0x5584a7b283b0 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x5584a7b28430 <line:3017:3>
|   | `-TextComment 0x5584a7b28400 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b28450 <col:4, line:3019:1> Name="return"
|     `-ParagraphComment 0x5584a7b28550 <line:3017:11, line:3019:1>
|       |-TextComment 0x5584a7b28480 <line:3017:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b284a0 <line:3018:3> Text=" "
|       |-InlineCommandComment 0x5584a7b284f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5584a7b28510 <line:3019:1> Text=" "
|-FunctionDecl 0x5584a797e900 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x5584a797e768 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5584a797e7e0 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x5584a7b28af0 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x5584a7b28660 <line:3025:3>
|   | `-TextComment 0x5584a7b28630 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b28680 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5584a7b286e0 <col:10, col:41>
|   |   `-TextComment 0x5584a7b286b0 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x5584a7b28750 <line:3027:3, line:3028:17>
|   | |-TextComment 0x5584a7b28700 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x5584a7b28720 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x5584a7b287a0 <line:3030:3>
|   | `-TextComment 0x5584a7b28770 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b287c0 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b28870 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x5584a7b28820 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5584a7b28840 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x5584a7b28890 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b28920 <col:18, col:70>
|   |   `-TextComment 0x5584a7b288f0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5584a7b28970 <line:3033:3>
|   | `-TextComment 0x5584a7b28940 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b28990 <col:4, line:3035:1> Name="return"
|     `-ParagraphComment 0x5584a7b28a90 <line:3033:11, line:3035:1>
|       |-TextComment 0x5584a7b289c0 <line:3033:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b289e0 <line:3034:3> Text=" "
|       |-InlineCommandComment 0x5584a7b28a30 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5584a7b28a50 <line:3035:1> Text=" "
|-FunctionDecl 0x5584a797ec48 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x5584a797ea00 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5584a797ea90 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5584a797eb08 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x5584a7b29760 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x5584a7b28b90 <line:3040:3>
|   | `-TextComment 0x5584a7b28b60 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b28bb0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5584a7b28c10 <col:10, col:37>
|   |   `-TextComment 0x5584a7b28be0 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x5584a7b28e80 <line:3042:3, line:3046:37>
|   | |-TextComment 0x5584a7b28c30 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5584a7b28c80 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5584a7b28ca0 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x5584a7b28cc0 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x5584a7b28d10 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x5584a7b28d30 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x5584a7b28d80 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x5584a7b28da0 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x5584a7b28dc0 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x5584a7b28de0 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x5584a7b28e00 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x5584a7b28f90 <line:3048:3, line:3053:28>
|   | |-TextComment 0x5584a7b28ea0 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x5584a7b28ec0 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x5584a7b28ee0 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x5584a7b28f00 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x5584a7b28f20 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x5584a7b28f40 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x5584a7b28fe0 <line:3055:3>
|   | `-TextComment 0x5584a7b28fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b29000 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x5584a7b29080 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x5584a7b29030 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x5584a7b29050 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x5584a7b290d0 <line:3059:3>
|   | `-TextComment 0x5584a7b290a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b290f0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b29150 <col:9, col:31>
|   |   `-TextComment 0x5584a7b29120 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b291a0 <line:3061:3>
|   | `-TextComment 0x5584a7b29170 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b291c0 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b29270 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x5584a7b29220 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5584a7b29240 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x5584a7b29290 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b29340 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x5584a7b292f0 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5584a7b29310 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x5584a7b29360 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b29410 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x5584a7b293c0 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x5584a7b293e0 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x5584a7b29460 <line:3066:3>
|   | `-TextComment 0x5584a7b29430 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b29480 <col:4, line:3067:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b29500 <line:3066:11, line:3067:3>
|   |   |-TextComment 0x5584a7b294b0 <line:3066:11, col:41> Text=" 0 Work item countdown started."
|   |   `-TextComment 0x5584a7b294d0 <line:3067:3> Text=" "
|   |-BlockCommandComment 0x5584a7b29520 <col:4, line:3068:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b295a0 <line:3067:11, line:3068:3>
|   |   |-TextComment 0x5584a7b29550 <line:3067:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5584a7b29570 <line:3068:3> Text=" "
|   `-BlockCommandComment 0x5584a7b295c0 <col:4, line:3070:1> Name="retval"
|     `-ParagraphComment 0x5584a7b296c0 <line:3068:11, line:3070:1>
|       |-TextComment 0x5584a7b295f0 <line:3068:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|       |-TextComment 0x5584a7b29610 <line:3069:3> Text=" "
|       |-InlineCommandComment 0x5584a7b29660 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5584a7b29680 <line:3070:1> Text=" "
|-FunctionDecl 0x5584a797ee68 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x5584a797ed50 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x5584a7b29f00 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x5584a7b29800 <line:3076:3>
|   | `-TextComment 0x5584a7b297d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b29820 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5584a7b29880 <col:10, col:37>
|   |   `-TextComment 0x5584a7b29850 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x5584a7b29980 <line:3078:3, line:3080:12>
|   | |-TextComment 0x5584a7b298a0 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x5584a7b298f0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x5584a7b29910 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x5584a7b29930 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x5584a7b299d0 <line:3082:3>
|   | `-TextComment 0x5584a7b299a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b299f0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b29a50 <col:9, col:31>
|   |   `-TextComment 0x5584a7b29a20 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b29aa0 <line:3084:3>
|   | `-TextComment 0x5584a7b29a70 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b29ac0 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x5584a7b29b70 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x5584a7b29af0 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x5584a7b29b10 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x5584a7b29b30 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x5584a7b29bc0 <line:3088:3>
|   | `-TextComment 0x5584a7b29b90 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b29be0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b29c70 <col:15, col:44>
|   |   `-TextComment 0x5584a7b29c40 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x5584a7b29cc0 <line:3090:3>
|   | `-TextComment 0x5584a7b29c90 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b29ce0 <col:4, line:3091:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b29d60 <line:3090:11, line:3091:3>
|   |   |-TextComment 0x5584a7b29d10 <line:3090:11, col:42> Text=" 0 Work item countdown canceled."
|   |   `-TextComment 0x5584a7b29d30 <line:3091:3> Text=" "
|   `-BlockCommandComment 0x5584a7b29d80 <col:4, line:3093:1> Name="retval"
|     `-ParagraphComment 0x5584a7b29e80 <line:3091:11, line:3093:1>
|       |-TextComment 0x5584a7b29db0 <line:3091:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|       |-TextComment 0x5584a7b29dd0 <line:3092:3> Text=" "
|       |-InlineCommandComment 0x5584a7b29e20 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5584a7b29e40 <line:3093:1> Text=" "
|-FunctionDecl 0x5584a7a9ad40 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x5584a7a9acb0 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x5584a7a9af48 <line:3119:1, line:3121:1>
| | `-CallExpr 0x5584a7a9aed8 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x5584a7a9aec0 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5584a7a9ade8 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x5584a797c880 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x5584a7a9ae28 <col:25, col:26> 'struct k_work_q *' prefix '&' cannot overflow
| |   | `-DeclRefExpr 0x5584a7a9ae08 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5584a797bee0 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x5584a7a9af08 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a7a9ae40 <col:40> 'struct k_work *' lvalue ParmVar 0x5584a7a9acb0 'work' 'struct k_work *'
| `-FullComment 0x5584a7b2a690 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x5584a7b29fa0 <line:3097:3>
|   | `-TextComment 0x5584a7b29f70 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b29fc0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5584a7b2a020 <col:10, col:53>
|   |   `-TextComment 0x5584a7b29ff0 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x5584a7b2a1b0 <line:3099:3, line:3104:15>
|   | |-TextComment 0x5584a7b2a040 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x5584a7b2a090 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5584a7b2a0b0 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x5584a7b2a0d0 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x5584a7b2a0f0 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x5584a7b2a110 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x5584a7b2a130 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x5584a7b2a150 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x5584a7b2a200 <line:3106:3>
|   | `-TextComment 0x5584a7b2a1d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2a220 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x5584a7b2a2d0 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x5584a7b2a250 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x5584a7b2a270 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x5584a7b2a290 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x5584a7b2a320 <line:3111:3>
|   | `-TextComment 0x5584a7b2a2f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2a340 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b2a3a0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b2a370 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b2a3f0 <line:3113:3>
|   | `-TextComment 0x5584a7b2a3c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2a410 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2a4a0 <col:15, col:36>
|   |   `-TextComment 0x5584a7b2a470 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5584a7b2a4f0 <line:3115:3>
|   | `-TextComment 0x5584a7b2a4c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b2a510 <col:4, line:3117:1> Name="return"
|     `-ParagraphComment 0x5584a7b2a610 <line:3115:11, line:3117:1>
|       |-TextComment 0x5584a7b2a540 <line:3115:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b2a560 <line:3116:3> Text=" "
|       |-InlineCommandComment 0x5584a7b2a5b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5584a7b2a5d0 <line:3117:1> Text=" "
|-FunctionDecl 0x5584a7a9b128 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7a9af88 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5584a7a9b000 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x5584a7a9b388 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x5584a7a9b350 <line:3159:2, col:66>
| |   `-CallExpr 0x5584a7a9b2e8 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x5584a7a9b2d0 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a9b1d8 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x5584a797ec48 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x5584a7a9b218 <col:40, col:41> 'struct k_work_q *' prefix '&' cannot overflow
| |     | `-DeclRefExpr 0x5584a7a9b1f8 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5584a797bee0 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x5584a7a9b320 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a9b230 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x5584a7a9af88 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x5584a7a9b338 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5584a7a9b250 <col:61> 's32_t':'int' lvalue ParmVar 0x5584a7a9b000 'delay' 's32_t':'int'
| `-FullComment 0x5584a7b2b210 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x5584a7b2a730 <line:3124:3>
|   | `-TextComment 0x5584a7b2a700 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2a750 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x5584a7b2a7b0 <col:10, col:61>
|   |   `-TextComment 0x5584a7b2a780 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x5584a7b2a9a0 <line:3126:3, line:3130:37>
|   | |-TextComment 0x5584a7b2a7d0 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5584a7b2a820 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5584a7b2a840 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x5584a7b2a860 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x5584a7b2a8b0 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x5584a7b2a8d0 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x5584a7b2a8f0 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x5584a7b2a910 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x5584a7b2a930 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x5584a7b2aae0 <line:3132:3, line:3138:72>
|   | |-TextComment 0x5584a7b2a9c0 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x5584a7b2a9e0 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x5584a7b2aa00 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x5584a7b2aa20 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x5584a7b2aa40 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x5584a7b2aa60 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x5584a7b2aa80 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x5584a7b2ab30 <line:3140:3>
|   | `-TextComment 0x5584a7b2ab00 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2ab50 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x5584a7b2ac00 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x5584a7b2ab80 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x5584a7b2aba0 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x5584a7b2abc0 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x5584a7b2ac50 <line:3145:3>
|   | `-TextComment 0x5584a7b2ac20 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2ac70 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b2acd0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b2aca0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b2ad20 <line:3147:3>
|   | `-TextComment 0x5584a7b2acf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2ad40 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2adf0 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x5584a7b2ada0 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5584a7b2adc0 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2ae10 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b2aec0 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x5584a7b2ae70 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x5584a7b2ae90 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x5584a7b2af10 <line:3151:3>
|   | `-TextComment 0x5584a7b2aee0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2af30 <col:4, line:3152:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2afb0 <line:3151:11, line:3152:3>
|   |   |-TextComment 0x5584a7b2af60 <line:3151:11, col:41> Text=" 0 Work item countdown started."
|   |   `-TextComment 0x5584a7b2af80 <line:3152:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2afd0 <col:4, line:3153:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2b050 <line:3152:11, line:3153:3>
|   |   |-TextComment 0x5584a7b2b000 <line:3152:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5584a7b2b020 <line:3153:3> Text=" "
|   `-BlockCommandComment 0x5584a7b2b070 <col:4, line:3155:1> Name="retval"
|     `-ParagraphComment 0x5584a7b2b170 <line:3153:11, line:3155:1>
|       |-TextComment 0x5584a7b2b0a0 <line:3153:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|       |-TextComment 0x5584a7b2b0c0 <line:3154:3> Text=" "
|       |-InlineCommandComment 0x5584a7b2b110 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5584a7b2b130 <line:3155:1> Text=" "
|-FunctionDecl 0x5584a7a9b490 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x5584a7a9b3c8 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x5584a7a9b6e8 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x5584a7a9b6a8 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x5584a7a9b690 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x5584a7a9b650 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5584a7a9b638 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5584a7a9b538 <col:9> 'u64_t (u64_t)' Function 0x5584a79f08e8 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x5584a7a9b678 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x5584a7a9b610 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x5584a7a9b5f8 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x5584a7a9b558 <col:31> 's32_t (struct _timeout *)' Function 0x5584a7a7d1c0 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x5584a7a9b5e0 <col:51, col:58> 'struct _timeout *' prefix '&' cannot overflow
| |             `-MemberExpr 0x5584a7a9b5b0 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x5584a797b848
| |               `-ImplicitCastExpr 0x5584a7a9b598 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x5584a7a9b578 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x5584a7a9b3c8 'work' 'struct k_delayed_work *'
| `-FullComment 0x5584a7b2b6a0 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x5584a7b2b2b0 <line:3163:3>
|   | `-TextComment 0x5584a7b2b280 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2b2d0 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x5584a7b2b330 <col:10, col:66>
|   |   `-TextComment 0x5584a7b2b300 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x5584a7b2b3d0 <line:3165:3, line:3167:30>
|   | |-TextComment 0x5584a7b2b350 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x5584a7b2b370 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x5584a7b2b390 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x5584a7b2b420 <line:3169:3>
|   | `-TextComment 0x5584a7b2b3f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2b440 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2b4d0 <col:15, col:37>
|   |   `-TextComment 0x5584a7b2b4a0 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x5584a7b2b520 <line:3171:3>
|   | `-TextComment 0x5584a7b2b4f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b2b540 <col:4, line:3173:1> Name="return"
|     `-ParagraphComment 0x5584a7b2b640 <line:3171:11, line:3173:1>
|       |-TextComment 0x5584a7b2b570 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|       |-TextComment 0x5584a7b2b590 <line:3172:3> Text=" "
|       |-InlineCommandComment 0x5584a7b2b5e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5584a7b2b600 <line:3173:1> Text=" "
|-FunctionDecl 0x5584a7a9b960 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x5584a7a9b7c8 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x5584a7a9b840 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x5584a7b2bb50 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x5584a7b2b740 <line:3180:3>
|   | `-TextComment 0x5584a7b2b710 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2b760 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b2b7c0 <col:10, col:43>
|   |   `-TextComment 0x5584a7b2b790 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x5584a7b2b830 <line:3182:3, line:3183:17>
|   | |-TextComment 0x5584a7b2b7e0 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x5584a7b2b800 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x5584a7b2b880 <line:3185:3>
|   | `-TextComment 0x5584a7b2b850 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2b8a0 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2b970 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x5584a7b2b900 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x5584a7b2b920 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2b990 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b2ba20 <col:18, col:70>
|   |   `-TextComment 0x5584a7b2b9f0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5584a7b2ba70 <line:3188:3>
|   | `-TextComment 0x5584a7b2ba40 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b2ba90 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5584a7b2baf0 <col:11, col:14>
|       `-TextComment 0x5584a7b2bac0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5584a7a9c3a8 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x5584a7a9ba60 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5584a7a9baf0 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x5584a7a9bb80 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5584a7a9bc00 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x5584a7a9c230 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x5584a7b2c8e0 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x5584a7b2bbf0 <line:3194:3>
|   | `-TextComment 0x5584a7b2bbc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2bc10 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b2bc70 <col:10, col:39>
|   |   `-TextComment 0x5584a7b2bc40 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x5584a7b2bee0 <line:3196:3, line:3200:50>
|   | |-TextComment 0x5584a7b2bc90 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5584a7b2bce0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5584a7b2bd00 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x5584a7b2bd20 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x5584a7b2bd70 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x5584a7b2bd90 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x5584a7b2bde0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x5584a7b2be00 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x5584a7b2be20 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x5584a7b2be40 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x5584a7b2be60 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x5584a7b2bfd0 <line:3202:3, line:3206:70>
|   | |-TextComment 0x5584a7b2bf00 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x5584a7b2bf20 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x5584a7b2bf40 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x5584a7b2bf60 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x5584a7b2bf80 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x5584a7b2c020 <line:3208:3>
|   | `-TextComment 0x5584a7b2bff0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2c040 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b2c0a0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b2c070 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b2c0f0 <line:3210:3>
|   | `-TextComment 0x5584a7b2c0c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2c110 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x5584a7b2c1c0 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x5584a7b2c140 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x5584a7b2c160 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x5584a7b2c180 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x5584a7b2c210 <line:3215:3>
|   | `-TextComment 0x5584a7b2c1e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2c230 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2c2e0 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x5584a7b2c290 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5584a7b2c2b0 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2c300 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b2c3b0 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x5584a7b2c360 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5584a7b2c380 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2c3d0 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b2c480 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x5584a7b2c430 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x5584a7b2c450 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2c4a0 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b2c550 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x5584a7b2c500 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5584a7b2c520 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2c570 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x5584a7b2c620 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x5584a7b2c5d0 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x5584a7b2c5f0 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   |-ParagraphComment 0x5584a7b2c670 <line:3223:3>
|   | `-TextComment 0x5584a7b2c640 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2c690 <col:4, line:3224:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2c710 <line:3223:11, line:3224:3>
|   |   |-TextComment 0x5584a7b2c6c0 <line:3223:11, col:51> Text=" 0 Work item started watching for events."
|   |   `-TextComment 0x5584a7b2c6e0 <line:3224:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2c730 <col:4, line:3225:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2c7b0 <line:3224:11, line:3225:3>
|   |   |-TextComment 0x5584a7b2c760 <line:3224:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5584a7b2c780 <line:3225:3> Text=" "
|   `-BlockCommandComment 0x5584a7b2c7d0 <col:4, col:69> Name="retval"
|     `-ParagraphComment 0x5584a7b2c830 <col:11, col:69>
|       `-TextComment 0x5584a7b2c800 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x5584a7a9c798 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5584a7a9c4c0 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x5584a7a9c550 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x5584a7a9c5d0 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x5584a7a9c648 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x5584a7a9ca88 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x5584a7a9ca50 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x5584a7a9c9a8 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x5584a7a9c990 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5584a7a9c858 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x5584a7a9c3a8 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x5584a7a9c898 <col:37, col:38> 'struct k_work_q *' prefix '&' cannot overflow
| |     | `-DeclRefExpr 0x5584a7a9c878 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5584a797bee0 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x5584a7a9c9f0 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a9c8b0 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x5584a7a9c4c0 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x5584a7a9ca08 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a9c8d0 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x5584a7a9c550 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x5584a7a9ca20 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5584a7a9c8f0 <col:15> 'int' lvalue ParmVar 0x5584a7a9c5d0 'num_events' 'int'
| |     `-ImplicitCastExpr 0x5584a7a9ca38 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5584a7a9c910 <col:27> 's32_t':'int' lvalue ParmVar 0x5584a7a9c648 'timeout' 's32_t':'int'
| `-FullComment 0x5584a7b2d4f0 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x5584a7b2c980 <line:3234:3>
|   | `-TextComment 0x5584a7b2c950 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2c9a0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5584a7b2ca00 <col:10, col:63>
|   |   `-TextComment 0x5584a7b2c9d0 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x5584a7b2cbf0 <line:3236:3, line:3240:50>
|   | |-TextComment 0x5584a7b2ca20 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5584a7b2ca70 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5584a7b2ca90 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x5584a7b2cab0 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x5584a7b2cb00 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x5584a7b2cb20 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x5584a7b2cb40 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x5584a7b2cb60 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x5584a7b2cb80 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x5584a7b2cce0 <line:3242:3, line:3246:70>
|   | |-TextComment 0x5584a7b2cc10 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x5584a7b2cc30 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x5584a7b2cc50 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x5584a7b2cc70 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x5584a7b2cc90 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x5584a7b2cd30 <line:3248:3>
|   | `-TextComment 0x5584a7b2cd00 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2cd50 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b2cdb0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b2cd80 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b2ce00 <line:3250:3>
|   | `-TextComment 0x5584a7b2cdd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2ce20 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x5584a7b2cea0 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x5584a7b2ce50 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x5584a7b2ce70 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x5584a7b2cef0 <line:3254:3>
|   | `-TextComment 0x5584a7b2cec0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2cf10 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2cfc0 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x5584a7b2cf70 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5584a7b2cf90 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2cfe0 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b2d090 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x5584a7b2d040 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x5584a7b2d060 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2d0b0 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b2d160 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x5584a7b2d110 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5584a7b2d130 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2d180 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b2d230 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x5584a7b2d1e0 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x5584a7b2d200 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   |-ParagraphComment 0x5584a7b2d280 <line:3260:3>
|   | `-TextComment 0x5584a7b2d250 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2d2a0 <col:4, line:3261:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2d320 <line:3260:11, line:3261:3>
|   |   |-TextComment 0x5584a7b2d2d0 <line:3260:11, col:51> Text=" 0 Work item started watching for events."
|   |   `-TextComment 0x5584a7b2d2f0 <line:3261:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2d340 <col:4, line:3262:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2d3c0 <line:3261:11, line:3262:3>
|   |   |-TextComment 0x5584a7b2d370 <line:3261:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5584a7b2d390 <line:3262:3> Text=" "
|   `-BlockCommandComment 0x5584a7b2d3e0 <col:4, col:69> Name="retval"
|     `-ParagraphComment 0x5584a7b2d440 <col:11, col:69>
|       `-TextComment 0x5584a7b2d410 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x5584a7a9cbd8 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x5584a7a9cac8 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x5584a7b2dac0 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x5584a7b2d590 <line:3274:3>
|   | `-TextComment 0x5584a7b2d560 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2d5b0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b2d610 <col:10, col:39>
|   |   `-TextComment 0x5584a7b2d5e0 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x5584a7b2d700 <line:3276:3, line:3278:14>
|   | |-TextComment 0x5584a7b2d630 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x5584a7b2d680 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x5584a7b2d6a0 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x5584a7b2d6c0 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x5584a7b2d750 <line:3280:3>
|   | `-TextComment 0x5584a7b2d720 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2d770 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b2d7d0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b2d7a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b2d820 <line:3282:3>
|   | `-TextComment 0x5584a7b2d7f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2d840 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2d8d0 <col:15, col:44>
|   |   `-TextComment 0x5584a7b2d8a0 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x5584a7b2d920 <line:3284:3>
|   | `-TextComment 0x5584a7b2d8f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2d940 <col:4, line:3285:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2d9d0 <line:3284:11, line:3285:3>
|   |   |-TextComment 0x5584a7b2d980 <line:3284:11, col:32> Text=" 0 Work item canceled."
|   |   `-TextComment 0x5584a7b2d9a0 <line:3285:3> Text=" "
|   `-BlockCommandComment 0x5584a7b2d9f0 <col:4, col:74> Name="retval"
|     `-ParagraphComment 0x5584a7b2da50 <col:11, col:74>
|       `-TextComment 0x5584a7b2da20 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x5584a7a9ccd8 prev 0x5584a7a5c530 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x5584a7b2dc50 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x5584a7b2db80 <line:3297:3, line:3298:3>
| | | |-TextComment 0x5584a7b2db30 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x5584a7b2db50 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x5584a7b2dba0 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x5584a7b2dc10 <line:3299:1>
| |   `-TextComment 0x5584a7b2dbe0 <col:1> Text=" "
| |-FieldDecl 0x5584a7a9cd98 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5584a7b2dd20 <line:3301:5, col:22>
| |   `-ParagraphComment 0x5584a7b2dcf0 <col:5, col:22>
| |     `-TextComment 0x5584a7b2dcc0 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x5584a7a9ce40 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x5584a7b2ddf0 <line:3303:5, col:17>
| |   `-ParagraphComment 0x5584a7b2ddc0 <col:5, col:17>
| |     `-TextComment 0x5584a7b2dd90 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x5584a7a9cec8 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x5584a7b2dec0 <line:3306:5, col:24>
| |   `-ParagraphComment 0x5584a7b2de90 <col:5, col:24>
| |     `-TextComment 0x5584a7b2de60 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x5584a7a9cf60 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x5584a7b2df90 <line:3309:5, col:30>
|     `-ParagraphComment 0x5584a7b2df60 <col:5, col:30>
|       `-TextComment 0x5584a7b2df30 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x5584a7a9da60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5584a7a9d138 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x5584a7b2e460 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x5584a7b2e030 <line:3349:3>
|   | `-TextComment 0x5584a7b2e000 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2e050 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5584a7b2e0b0 <col:10, col:29>
|   |   `-TextComment 0x5584a7b2e080 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x5584a7b2e100 <line:3351:3, col:67>
|   | `-TextComment 0x5584a7b2e0d0 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x5584a7b2e150 <line:3353:3, col:70>
|   | `-TextComment 0x5584a7b2e120 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x5584a7b2e1a0 <line:3355:3>
|   | `-TextComment 0x5584a7b2e170 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2e1c0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2e250 <col:16, col:37>
|   |   `-TextComment 0x5584a7b2e220 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x5584a7b2e2a0 <line:3357:3>
|   | `-TextComment 0x5584a7b2e270 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2e2c0 <col:4, col:33> Name="retval"
|   | `-ParagraphComment 0x5584a7b2e320 <col:11, col:33>
|   |   `-TextComment 0x5584a7b2e2f0 <col:11, col:33> Text=" 0 Mutex object created"
|   `-ParagraphComment 0x5584a7b2e3f0 <line:3359:3, line:3360:1>
|     |-TextComment 0x5584a7b2e340 <line:3359:3> Text=" "
|     |-InlineCommandComment 0x5584a7b2e390 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MUTEX-002"
|     `-TextComment 0x5584a7b2e3b0 <line:3360:1> Text=" "
|-FunctionDecl 0x5584a7a9dcf8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7a9db60 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x5584a7a9dbd8 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x5584a7b2ec60 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x5584a7b2e500 <line:3365:3>
|   | `-TextComment 0x5584a7b2e4d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2e520 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5584a7b2e580 <col:10, col:23>
|   |   `-TextComment 0x5584a7b2e550 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x5584a7b2e6a0 <line:3367:3, line:3369:20>
|   | |-TextComment 0x5584a7b2e5a0 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x5584a7b2e5f0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x5584a7b2e610 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x5584a7b2e630 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x5584a7b2e650 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x5584a7b2e710 <line:3371:3, line:3372:62>
|   | |-TextComment 0x5584a7b2e6c0 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x5584a7b2e6e0 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x5584a7b2e760 <line:3374:3>
|   | `-TextComment 0x5584a7b2e730 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2e780 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2e830 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x5584a7b2e7e0 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x5584a7b2e800 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2e850 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b2e930 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x5584a7b2e8b0 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x5584a7b2e8d0 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5584a7b2e8f0 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5584a7b2e980 <line:3379:3>
|   | `-TextComment 0x5584a7b2e950 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2e9a0 <col:4, line:3380:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2ea20 <line:3379:11, line:3380:3>
|   |   |-TextComment 0x5584a7b2e9d0 <line:3379:11, col:26> Text=" 0 Mutex locked."
|   |   `-TextComment 0x5584a7b2e9f0 <line:3380:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2ea40 <col:4, line:3381:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2eac0 <line:3380:11, line:3381:3>
|   |   |-TextComment 0x5584a7b2ea70 <line:3380:11, col:43> Text=" -EBUSY Returned without waiting."
|   |   `-TextComment 0x5584a7b2ea90 <line:3381:3> Text=" "
|   `-BlockCommandComment 0x5584a7b2eae0 <col:4, line:3383:1> Name="retval"
|     `-ParagraphComment 0x5584a7b2ebe0 <line:3381:11, line:3383:1>
|       |-TextComment 0x5584a7b2eb10 <line:3381:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5584a7b2eb30 <line:3382:3> Text=" "
|       |-InlineCommandComment 0x5584a7b2eb80 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MUTEX-002"
|       `-TextComment 0x5584a7b2eba0 <line:3383:1> Text=" "
|-FunctionDecl 0x5584a7a9de98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5584a7a9de00 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x5584a7b2f370 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x5584a7b2ed00 <line:3387:3>
|   | `-TextComment 0x5584a7b2ecd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2ed20 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x5584a7b2ed80 <col:10, col:25>
|   |   `-TextComment 0x5584a7b2ed50 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x5584a7b2ee70 <line:3389:3, line:3390:18>
|   | |-TextComment 0x5584a7b2eda0 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x5584a7b2edf0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x5584a7b2ee10 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x5584a7b2ee30 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x5584a7b2ef10 <line:3392:3, line:3394:10>
|   | |-TextComment 0x5584a7b2ee90 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x5584a7b2eeb0 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x5584a7b2eed0 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x5584a7b2ef60 <line:3396:3>
|   | `-TextComment 0x5584a7b2ef30 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2ef80 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2f010 <col:16, col:37>
|   |   `-TextComment 0x5584a7b2efe0 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x5584a7b2f060 <line:3398:3>
|   | `-TextComment 0x5584a7b2f030 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2f080 <col:4, line:3399:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2f100 <line:3398:11, line:3399:3>
|   |   |-TextComment 0x5584a7b2f0b0 <line:3398:11, col:28> Text=" 0 Mutex unlocked."
|   |   `-TextComment 0x5584a7b2f0d0 <line:3399:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2f120 <col:4, line:3400:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2f1a0 <line:3399:11, line:3400:3>
|   |   |-TextComment 0x5584a7b2f150 <line:3399:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   |   `-TextComment 0x5584a7b2f170 <line:3400:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2f1c0 <col:4, col:42> Name="retval"
|   | `-ParagraphComment 0x5584a7b2f220 <col:11, col:42>
|   |   `-TextComment 0x5584a7b2f1f0 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   `-ParagraphComment 0x5584a7b2f2f0 <line:3402:3, line:3403:1>
|     |-TextComment 0x5584a7b2f240 <line:3402:3> Text=" "
|     |-InlineCommandComment 0x5584a7b2f290 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MUTEX-002"
|     `-TextComment 0x5584a7b2f2b0 <line:3403:1> Text=" "
|-RecordDecl 0x5584a7a9df98 prev 0x5584a7a5c5d8 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x5584a7b2f490 <line:3411:3, col:24>
| | `-ParagraphComment 0x5584a7b2f460 <col:3, col:24>
| |   |-TextComment 0x5584a7b2f3e0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5584a7b2f400 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5584a7b2f420 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5584a7a9e028 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5584a7a9e088 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x5584a7a9e0e8 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x5584a7a9e4d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x5584a7a9e298 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x5584a7a9e318 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x5584a7a9e398 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x5584a7b2fb70 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x5584a7b2f530 <line:3446:3>
|   | `-TextComment 0x5584a7b2f500 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2f550 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5584a7b2f5b0 <col:10, col:33>
|   |   `-TextComment 0x5584a7b2f580 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x5584a7b2f600 <line:3448:3, col:71>
|   | `-TextComment 0x5584a7b2f5d0 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x5584a7b2f650 <line:3450:3>
|   | `-TextComment 0x5584a7b2f620 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2f670 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2f720 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x5584a7b2f6d0 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x5584a7b2f6f0 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2f740 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b2f7f0 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x5584a7b2f7a0 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x5584a7b2f7c0 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2f810 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b2f8a0 <col:16, col:50>
|   |   `-TextComment 0x5584a7b2f870 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x5584a7b2f8f0 <line:3454:3>
|   | `-TextComment 0x5584a7b2f8c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2f910 <col:4, line:3455:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b2f9a0 <line:3454:11, line:3455:3>
|   |   |-TextComment 0x5584a7b2f940 <line:3454:11, col:43> Text=" 0 Semaphore created successfully"
|   |   `-TextComment 0x5584a7b2f960 <line:3455:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2f9c0 <col:4, col:33> Name="retval"
|   | `-ParagraphComment 0x5584a7b2fa20 <col:11, col:33>
|   |   `-TextComment 0x5584a7b2f9f0 <col:11, col:33> Text=" -EINVAL Invalid values"
|   `-ParagraphComment 0x5584a7b2faf0 <line:3457:3, line:3458:1>
|     |-TextComment 0x5584a7b2fa40 <line:3457:3> Text=" "
|     |-InlineCommandComment 0x5584a7b2fa90 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|     `-TextComment 0x5584a7b2fab0 <line:3458:1> Text=" "
|-FunctionDecl 0x5584a7a9e778 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7a9e5e0 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x5584a7a9e658 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x5584a7b303d0 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x5584a7b2fc10 <line:3463:3>
|   | `-TextComment 0x5584a7b2fbe0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2fc30 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5584a7b2fc90 <col:10, col:27>
|   |   `-TextComment 0x5584a7b2fc60 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x5584a7b2fd30 <line:3465:3, col:24>
|   | |-TextComment 0x5584a7b2fcb0 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x5584a7b2fd00 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x5584a7b2fd80 <line:3467:3>
|   | `-TextComment 0x5584a7b2fd50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b2fda0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5584a7b2fe80 <col:9, col:72>
|   |   |-TextComment 0x5584a7b2fdd0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5584a7b2fe20 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5584a7b2fe40 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5584a7b2fed0 <line:3469:3>
|   | `-TextComment 0x5584a7b2fea0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2fef0 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b2ffa0 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x5584a7b2ff50 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x5584a7b2ff70 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x5584a7b2ffc0 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b300a0 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x5584a7b30020 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x5584a7b30040 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5584a7b30060 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5584a7b300f0 <line:3474:3>
|   | `-TextComment 0x5584a7b300c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b30110 <col:4, line:3475:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b30190 <line:3474:11, line:3475:3>
|   |   |-TextComment 0x5584a7b30140 <line:3474:11, col:29> Text=" 0 Semaphore taken."
|   |   `-TextComment 0x5584a7b30160 <line:3475:3> Text=" "
|   |-BlockCommandComment 0x5584a7b301b0 <col:4, line:3476:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b30230 <line:3475:11, line:3476:3>
|   |   |-TextComment 0x5584a7b301e0 <line:3475:11, col:43> Text=" -EBUSY Returned without waiting."
|   |   `-TextComment 0x5584a7b30200 <line:3476:3> Text=" "
|   `-BlockCommandComment 0x5584a7b30250 <col:4, line:3478:1> Name="retval"
|     `-ParagraphComment 0x5584a7b30350 <line:3476:11, line:3478:1>
|       |-TextComment 0x5584a7b30280 <line:3476:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5584a7b302a0 <line:3477:3> Text=" "
|       |-InlineCommandComment 0x5584a7b302f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5584a7b30310 <line:3478:1> Text=" "
|-FunctionDecl 0x5584a7a9e990 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5584a7a9e880 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x5584a7b30990 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x5584a7b30470 <line:3482:3>
|   | `-TextComment 0x5584a7b30440 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b30490 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5584a7b304f0 <col:10, col:27>
|   |   `-TextComment 0x5584a7b304c0 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x5584a7b305e0 <line:3484:3, line:3485:19>
|   | |-TextComment 0x5584a7b30510 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x5584a7b30560 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x5584a7b30580 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x5584a7b305a0 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x5584a7b30630 <line:3487:3>
|   | `-TextComment 0x5584a7b30600 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b30650 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b306b0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b30680 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b30700 <line:3489:3>
|   | `-TextComment 0x5584a7b306d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b30720 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b307b0 <col:14, col:39>
|   |   `-TextComment 0x5584a7b30780 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x5584a7b30800 <line:3491:3>
|   | `-TextComment 0x5584a7b307d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b30820 <col:4, line:3493:1> Name="return"
|     `-ParagraphComment 0x5584a7b30920 <line:3491:11, line:3493:1>
|       |-TextComment 0x5584a7b30850 <line:3491:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b30870 <line:3492:3> Text=" "
|       |-InlineCommandComment 0x5584a7b308c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5584a7b308e0 <line:3493:1> Text=" "
|-FunctionDecl 0x5584a7a9f0c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5584a7a9f030 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x5584a7b30e50 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x5584a7b30a30 <line:3497:3>
|   | `-TextComment 0x5584a7b30a00 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b30a50 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7b30ab0 <col:10, col:44>
|   |   `-TextComment 0x5584a7b30a80 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x5584a7b30b80 <line:3499:3, col:49>
|   | |-TextComment 0x5584a7b30ad0 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x5584a7b30b20 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x5584a7b30b40 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x5584a7b30bd0 <line:3501:3>
|   | `-TextComment 0x5584a7b30ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b30bf0 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b30c80 <col:14, col:39>
|   |   `-TextComment 0x5584a7b30c50 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x5584a7b30cd0 <line:3503:3>
|   | `-TextComment 0x5584a7b30ca0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b30cf0 <col:4, line:3505:1> Name="return"
|     `-ParagraphComment 0x5584a7b30df0 <line:3503:11, line:3505:1>
|       |-TextComment 0x5584a7b30d20 <line:3503:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b30d40 <line:3504:3> Text=" "
|       |-InlineCommandComment 0x5584a7b30d90 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5584a7b30db0 <line:3505:1> Text=" "
|-FunctionDecl 0x5584a7a9f250 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5584a7a9f1c0 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x5584a7a9f3c8 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x5584a7a9f380 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x5584a7a9f330 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x5584a7a9e088
| |   | `-ImplicitCastExpr 0x5584a7a9f318 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5584a7a9f2f8 <col:2> 'struct k_sem *' lvalue ParmVar 0x5584a7a9f1c0 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x5584a7a9f360 <col:15> 'unsigned int' 0
| `-FullComment 0x5584a7b30f40 <line:3509:3, col:12>
|   `-ParagraphComment 0x5584a7b30f10 <col:3, col:12>
|     |-TextComment 0x5584a7b30ec0 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b30ee0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7a9f518 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5584a7a9f408 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x5584a7b313d0 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x5584a7b30fe0 <line:3517:3>
|   | `-TextComment 0x5584a7b30fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b31000 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5584a7b31060 <col:10, col:34>
|   |   `-TextComment 0x5584a7b31030 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x5584a7b31100 <line:3519:3, col:47>
|   | |-TextComment 0x5584a7b31080 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x5584a7b310d0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x5584a7b31150 <line:3521:3>
|   | `-TextComment 0x5584a7b31120 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b31170 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b31200 <col:14, col:39>
|   |   `-TextComment 0x5584a7b311d0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x5584a7b31250 <line:3523:3>
|   | `-TextComment 0x5584a7b31220 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b31270 <col:4, line:3525:1> Name="return"
|     `-ParagraphComment 0x5584a7b31370 <line:3523:11, line:3525:1>
|       |-TextComment 0x5584a7b312a0 <line:3523:11, col:35> Text=" Current semaphore count."
|       |-TextComment 0x5584a7b312c0 <line:3524:3> Text=" "
|       |-InlineCommandComment 0x5584a7b31310 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5584a7b31330 <line:3525:1> Text=" "
|-FunctionDecl 0x5584a7a9f6a8 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5584a7a9f610 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x5584a7a9f898 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x5584a7a9f7d0 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x5584a7a9f7b8 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x5584a7a9f788 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x5584a7a9e088
| |       `-ImplicitCastExpr 0x5584a7a9f770 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a7a9f750 <col:9> 'struct k_sem *' lvalue ParmVar 0x5584a7a9f610 'sem' 'struct k_sem *'
| `-FullComment 0x5584a7b314c0 <line:3529:3, col:12>
|   `-ParagraphComment 0x5584a7b31490 <col:3, col:12>
|     |-TextComment 0x5584a7b31440 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b31460 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x5584a7a9f8b0 prev 0x5584a7a5c688 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x5584a7b31610 <line:3563:3, col:33>
| | |-ParagraphComment 0x5584a7b31560 <col:3>
| | | `-TextComment 0x5584a7b31530 <col:3> Text=" "
| | `-BlockCommandComment 0x5584a7b31580 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x5584a7b315e0 <col:10, col:33>
| |     `-TextComment 0x5584a7b315b0 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x5584a7a9f968 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5584a7b316e0 <line:3566:5, col:30>
| |   `-ParagraphComment 0x5584a7b316b0 <col:5, col:30>
| |     `-TextComment 0x5584a7b31680 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x5584a7a9fa08 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x5584a7b317b0 <line:3568:5, col:10>
| |   `-ParagraphComment 0x5584a7b31780 <col:5, col:10>
| |     `-TextComment 0x5584a7b31750 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x5584a7a9fa98 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x5584a7b31880 <line:3570:5, col:18>
| |   `-ParagraphComment 0x5584a7b31850 <col:5, col:18>
| |     `-TextComment 0x5584a7b31820 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x5584a7a9fb28 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x5584a7b31950 <line:3572:5, col:32>
| |   `-ParagraphComment 0x5584a7b31920 <col:5, col:32>
| |     `-TextComment 0x5584a7b318f0 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x5584a7a9fbc0 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x5584a7b31a40 <line:3574:5, col:29>
| |   `-ParagraphComment 0x5584a7b31a10 <col:5, col:29>
| |     `-TextComment 0x5584a7b319e0 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x5584a7a9fc50 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x5584a7b31b10 <line:3576:5, col:27>
| |   `-ParagraphComment 0x5584a7b31ae0 <col:5, col:27>
| |     `-TextComment 0x5584a7b31ab0 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x5584a7a9fce0 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x5584a7b31be0 <line:3578:5, col:18>
| |   `-ParagraphComment 0x5584a7b31bb0 <col:5, col:18>
| |     `-TextComment 0x5584a7b31b80 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x5584a7a9fd70 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x5584a7b31cb0 <line:3580:5, col:19>
| |   `-ParagraphComment 0x5584a7b31c80 <col:5, col:19>
| |     `-TextComment 0x5584a7b31c50 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x5584a7a9fdf8 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x5584a7b31d80 <line:3582:5, col:29>
| |   `-ParagraphComment 0x5584a7b31d50 <col:5, col:29>
| |     `-TextComment 0x5584a7b31d20 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x5584a7a9fe88 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x5584a7b31e50 <line:3588:5, col:19>
|     `-ParagraphComment 0x5584a7b31e20 <col:5, col:19>
|       `-TextComment 0x5584a7b31df0 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x5584a7aa3710 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x5584a7b31fa0 <line:3617:3, col:34>
| | |-ParagraphComment 0x5584a7b31ef0 <col:3>
| | | `-TextComment 0x5584a7b31ec0 <col:3> Text=" "
| | `-BlockCommandComment 0x5584a7b31f10 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x5584a7b31f70 <col:10, col:34>
| |     `-TextComment 0x5584a7b31f40 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x5584a7aa37f8 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x5584a7b32070 <line:3620:5, col:18>
| |   `-ParagraphComment 0x5584a7b32040 <col:5, col:18>
| |     `-TextComment 0x5584a7b32010 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x5584a7aa3888 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x5584a7b32140 <line:3622:5, col:32>
| |   `-ParagraphComment 0x5584a7b32110 <col:5, col:32>
| |     `-TextComment 0x5584a7b320e0 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x5584a7aa3918 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x5584a7b32210 <line:3624:5, col:19>
|     `-ParagraphComment 0x5584a7b321e0 <col:5, col:19>
|       `-TextComment 0x5584a7b321b0 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x5584a7aa3d50 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x5584a7aa3a98 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7aa3b18 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x5584a7aa3b90 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7aa3c08 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x5584a7b32b20 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x5584a7b322b0 <line:3658:3>
|   | `-TextComment 0x5584a7b32280 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b322d0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5584a7b32330 <col:10, col:37>
|   |   `-TextComment 0x5584a7b32300 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x5584a7b32380 <line:3660:3, col:75>
|   | `-TextComment 0x5584a7b32350 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x5584a7b325c0 <line:3662:3, line:3666:32>
|   | |-TextComment 0x5584a7b323a0 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x5584a7b323f0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x5584a7b32410 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x5584a7b32430 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x5584a7b32480 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x5584a7b324a0 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x5584a7b324c0 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x5584a7b324e0 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x5584a7b32530 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x5584a7b32550 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x5584a7b32610 <line:3668:3>
|   | `-TextComment 0x5584a7b325e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b32630 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b326e0 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x5584a7b32690 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x5584a7b326b0 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x5584a7b32700 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b327b0 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x5584a7b32760 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x5584a7b32780 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x5584a7b327d0 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b32880 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x5584a7b32830 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x5584a7b32850 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x5584a7b328a0 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b32930 <col:19, col:65>
|   |   `-TextComment 0x5584a7b32900 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x5584a7b32980 <line:3673:3>
|   | `-TextComment 0x5584a7b32950 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b329a0 <col:4, line:3675:1> Name="return"
|     `-ParagraphComment 0x5584a7b32aa0 <line:3673:11, line:3675:1>
|       |-TextComment 0x5584a7b329d0 <line:3673:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b329f0 <line:3674:3> Text=" "
|       |-InlineCommandComment 0x5584a7b32a40 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5584a7b32a60 <line:3675:1> Text=" "
|-FunctionDecl 0x5584a7aa4098 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x5584a7aa3e60 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7aa3ed8 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7aa3f50 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x5584a7b33250 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x5584a7b32bc0 <line:3680:3>
|   | `-TextComment 0x5584a7b32b90 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b32be0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5584a7b32c40 <col:10, col:37>
|   |   `-TextComment 0x5584a7b32c10 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x5584a7b32ce0 <line:3682:3, line:3684:8>
|   | |-TextComment 0x5584a7b32c60 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x5584a7b32c80 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x5584a7b32ca0 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x5584a7b32d80 <line:3686:3, line:3688:25>
|   | |-TextComment 0x5584a7b32d00 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x5584a7b32d20 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x5584a7b32d40 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x5584a7b32dd0 <line:3690:3>
|   | `-TextComment 0x5584a7b32da0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b32df0 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b32ea0 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x5584a7b32e50 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5584a7b32e70 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x5584a7b32ec0 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b32f70 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x5584a7b32f20 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x5584a7b32f40 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x5584a7b32f90 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b33020 <col:19, col:65>
|   |   `-TextComment 0x5584a7b32ff0 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x5584a7b33070 <line:3694:3>
|   | `-TextComment 0x5584a7b33040 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b33090 <col:4, line:3698:1> Name="return"
|     `-ParagraphComment 0x5584a7b331e0 <line:3694:11, line:3698:1>
|       |-TextComment 0x5584a7b330c0 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|       |-TextComment 0x5584a7b330e0 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|       |-TextComment 0x5584a7b33100 <line:3696:3, col:23> Text="	an integer overflow."
|       |-TextComment 0x5584a7b33120 <line:3697:3> Text=" "
|       |-InlineCommandComment 0x5584a7b33170 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5584a7b33190 <line:3698:1> Text=" "
|-FunctionDecl 0x5584a7aa42b8 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x5584a7aa41a0 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x5584a7b33690 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x5584a7b332f0 <line:3703:3>
|   | `-TextComment 0x5584a7b332c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b33310 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5584a7b33370 <col:10, col:46>
|   |   `-TextComment 0x5584a7b33340 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x5584a7b333c0 <line:3705:3, col:49>
|   | `-TextComment 0x5584a7b33390 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x5584a7b33410 <line:3707:3>
|   | `-TextComment 0x5584a7b333e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b33430 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b334c0 <col:15, col:39>
|   |   `-TextComment 0x5584a7b33490 <col:15, col:39> Text=" message queue to cleanup"
|   |-ParagraphComment 0x5584a7b33510 <line:3709:3>
|   | `-TextComment 0x5584a7b334e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b33530 <col:4, line:3710:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b335b0 <line:3709:11, line:3710:3>
|   |   |-TextComment 0x5584a7b33560 <line:3709:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b33580 <line:3710:3> Text=" "
|   `-BlockCommandComment 0x5584a7b335d0 <col:4, col:33> Name="retval"
|     `-ParagraphComment 0x5584a7b33630 <col:11, col:33>
|       `-TextComment 0x5584a7b33600 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x5584a7aa45e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7aa43b0 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7aa4430 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5584a7aa44a8 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x5584a7b33f70 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x5584a7b33730 <line:3715:3>
|   | `-TextComment 0x5584a7b33700 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b33750 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7b337b0 <col:10, col:44>
|   |   `-TextComment 0x5584a7b33780 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x5584a7b33850 <line:3717:3, col:51>
|   | |-TextComment 0x5584a7b337d0 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x5584a7b33820 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x5584a7b338a0 <line:3719:3>
|   | `-TextComment 0x5584a7b33870 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b338c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b33920 <col:9, col:31>
|   |   `-TextComment 0x5584a7b338f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b33970 <line:3721:3>
|   | `-TextComment 0x5584a7b33940 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b339b0 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b33a60 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x5584a7b33a10 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5584a7b33a30 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x5584a7b33a80 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b33b30 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x5584a7b33ae0 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x5584a7b33b00 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x5584a7b33b50 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b33c30 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x5584a7b33bb0 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x5584a7b33bd0 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5584a7b33bf0 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5584a7b33c80 <line:3727:3>
|   | `-TextComment 0x5584a7b33c50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b33ca0 <col:4, line:3728:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b33d20 <line:3727:11, line:3728:3>
|   |   |-TextComment 0x5584a7b33cd0 <line:3727:11, col:26> Text=" 0 Message sent."
|   |   `-TextComment 0x5584a7b33cf0 <line:3728:3> Text=" "
|   |-BlockCommandComment 0x5584a7b33d40 <col:4, line:3729:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b33dc0 <line:3728:11, line:3729:3>
|   |   |-TextComment 0x5584a7b33d70 <line:3728:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   |   `-TextComment 0x5584a7b33d90 <line:3729:3> Text=" "
|   `-BlockCommandComment 0x5584a7b33de0 <col:4, line:3731:1> Name="retval"
|     `-ParagraphComment 0x5584a7b33ee0 <line:3729:11, line:3731:1>
|       |-TextComment 0x5584a7b33e10 <line:3729:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5584a7b33e30 <line:3730:3> Text=" "
|       |-InlineCommandComment 0x5584a7b33e80 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5584a7b33ea0 <line:3731:1> Text=" "
|-FunctionDecl 0x5584a7aa51b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7aa5010 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7aa5090 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5584a7aa5108 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x5584a7b34900 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x5584a7b34010 <line:3735:3>
|   | `-TextComment 0x5584a7b33fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b34030 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b34090 <col:10, col:49>
|   |   `-TextComment 0x5584a7b34060 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x5584a7b34180 <line:3737:3, line:3738:21>
|   | |-TextComment 0x5584a7b340b0 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x5584a7b34100 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x5584a7b34120 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x5584a7b34140 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x5584a7b341d0 <line:3740:3>
|   | `-TextComment 0x5584a7b341a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b341f0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5584a7b342d0 <col:9, col:72>
|   |   |-TextComment 0x5584a7b34220 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5584a7b34270 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5584a7b34290 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5584a7b34320 <line:3742:3>
|   | `-TextComment 0x5584a7b342f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b34340 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b343f0 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x5584a7b343a0 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5584a7b343c0 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x5584a7b34410 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b344c0 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x5584a7b34470 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x5584a7b34490 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x5584a7b344e0 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b345c0 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x5584a7b34540 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x5584a7b34560 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5584a7b34580 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5584a7b34610 <line:3748:3>
|   | `-TextComment 0x5584a7b345e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b34630 <col:4, line:3749:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b346b0 <line:3748:11, line:3749:3>
|   |   |-TextComment 0x5584a7b34660 <line:3748:11, col:30> Text=" 0 Message received."
|   |   `-TextComment 0x5584a7b34680 <line:3749:3> Text=" "
|   |-BlockCommandComment 0x5584a7b346d0 <col:4, line:3750:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b34750 <line:3749:11, line:3750:3>
|   |   |-TextComment 0x5584a7b34700 <line:3749:11, col:44> Text=" -ENOMSG Returned without waiting."
|   |   `-TextComment 0x5584a7b34720 <line:3750:3> Text=" "
|   `-BlockCommandComment 0x5584a7b34770 <col:4, line:3752:1> Name="retval"
|     `-ParagraphComment 0x5584a7b34870 <line:3750:11, line:3752:1>
|       |-TextComment 0x5584a7b347a0 <line:3750:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5584a7b347c0 <line:3751:3> Text=" "
|       |-InlineCommandComment 0x5584a7b34810 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5584a7b34830 <line:3752:1> Text=" "
|-FunctionDecl 0x5584a7aa5468 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x5584a7aa52c0 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7aa5340 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x5584a7b35040 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x5584a7b349a0 <line:3756:3>
|   | `-TextComment 0x5584a7b34970 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b349c0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5584a7b34a20 <col:10, col:51>
|   |   `-TextComment 0x5584a7b349f0 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x5584a7b34b10 <line:3758:3, line:3759:57>
|   | |-TextComment 0x5584a7b34a40 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x5584a7b34a90 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x5584a7b34ab0 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x5584a7b34ad0 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x5584a7b34b60 <line:3761:3>
|   | `-TextComment 0x5584a7b34b30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b34b80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5584a7b34be0 <col:9, col:31>
|   |   `-TextComment 0x5584a7b34bb0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5584a7b34c30 <line:3763:3>
|   | `-TextComment 0x5584a7b34c00 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b34c50 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b34d00 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x5584a7b34cb0 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5584a7b34cd0 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x5584a7b34d20 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b34db0 <col:15, col:71>
|   |   `-TextComment 0x5584a7b34d80 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x5584a7b34e00 <line:3766:3>
|   | `-TextComment 0x5584a7b34dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b34e20 <col:4, line:3767:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b34ea0 <line:3766:11, line:3767:3>
|   |   |-TextComment 0x5584a7b34e50 <line:3766:11, col:26> Text=" 0 Message read."
|   |   `-TextComment 0x5584a7b34e70 <line:3767:3> Text=" "
|   `-BlockCommandComment 0x5584a7b34ec0 <col:4, line:3769:1> Name="retval"
|     `-ParagraphComment 0x5584a7b34fc0 <line:3767:11, line:3769:1>
|       |-TextComment 0x5584a7b34ef0 <line:3767:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|       |-TextComment 0x5584a7b34f10 <line:3768:3> Text=" "
|       |-InlineCommandComment 0x5584a7b34f60 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5584a7b34f80 <line:3769:1> Text=" "
|-FunctionDecl 0x5584a7aa5680 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5584a7aa5570 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x5584a7b354d0 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x5584a7b350e0 <line:3773:3>
|   | `-TextComment 0x5584a7b350b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b35100 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5584a7b35160 <col:10, col:32>
|   |   `-TextComment 0x5584a7b35130 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x5584a7b35200 <line:3775:3, line:3777:61>
|   | |-TextComment 0x5584a7b35180 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x5584a7b351a0 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x5584a7b351c0 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x5584a7b35250 <line:3779:3>
|   | `-TextComment 0x5584a7b35220 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b35270 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b35300 <col:15, col:44>
|   |   `-TextComment 0x5584a7b352d0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5584a7b35350 <line:3781:3>
|   | `-TextComment 0x5584a7b35320 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b35370 <col:4, line:3783:1> Name="return"
|     `-ParagraphComment 0x5584a7b35470 <line:3781:11, line:3783:1>
|       |-TextComment 0x5584a7b353a0 <line:3781:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b353c0 <line:3782:3> Text=" "
|       |-InlineCommandComment 0x5584a7b35410 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5584a7b35430 <line:3783:1> Text=" "
|-FunctionDecl 0x5584a7aa5890 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5584a7aa5780 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x5584a7b35930 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x5584a7b35570 <line:3787:3>
|   | `-TextComment 0x5584a7b35540 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b35590 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5584a7b355f0 <col:10, col:58>
|   |   `-TextComment 0x5584a7b355c0 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x5584a7b35660 <line:3789:3, line:3790:15>
|   | |-TextComment 0x5584a7b35610 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x5584a7b35630 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x5584a7b356b0 <line:3792:3>
|   | `-TextComment 0x5584a7b35680 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b356d0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b35760 <col:15, col:44>
|   |   `-TextComment 0x5584a7b35730 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5584a7b357b0 <line:3794:3>
|   | `-TextComment 0x5584a7b35780 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b357d0 <col:4, line:3796:1> Name="return"
|     `-ParagraphComment 0x5584a7b358d0 <line:3794:11, line:3796:1>
|       |-TextComment 0x5584a7b35800 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|       |-TextComment 0x5584a7b35820 <line:3795:3> Text=" "
|       |-InlineCommandComment 0x5584a7b35870 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5584a7b35890 <line:3796:1> Text=" "
|-FunctionDecl 0x5584a7aa5be0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x5584a7aa5990 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7aa5ac8 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x5584a7b35e60 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x5584a7b359f0 <line:3800:3>
|   | `-TextComment 0x5584a7b359c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b35a10 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x5584a7b35a70 <col:10, col:50>
|   |   `-TextComment 0x5584a7b35a40 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x5584a7b35ac0 <line:3802:3, col:77>
|   | `-TextComment 0x5584a7b35a90 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x5584a7b35b10 <line:3804:3>
|   | `-TextComment 0x5584a7b35ae0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b35b30 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b35be0 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x5584a7b35b90 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5584a7b35bb0 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x5584a7b35c00 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b35c90 <col:16, col:61>
|   |   `-TextComment 0x5584a7b35c60 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x5584a7b35ce0 <line:3807:3>
|   | `-TextComment 0x5584a7b35cb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b35d00 <col:4, line:3809:1> Name="return"
|     `-ParagraphComment 0x5584a7b35e00 <line:3807:11, line:3809:1>
|       |-TextComment 0x5584a7b35d30 <line:3807:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b35d50 <line:3808:3> Text=" "
|       |-InlineCommandComment 0x5584a7b35da0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-003"
|       `-TextComment 0x5584a7b35dc0 <line:3809:1> Text=" "
|-FunctionDecl 0x5584a7aa5d48 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5584a7aa5cb8 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5584a7aa5f48 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x5584a7aa5f10 <line:3816:2, col:32>
|     `-BinaryOperator 0x5584a7aa5ef0 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x5584a7aa5ec0 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x5584a7aa5e28 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x5584a7a9fb28
|       |   `-ImplicitCastExpr 0x5584a7aa5e10 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5584a7aa5df0 <col:9> 'struct k_msgq *' lvalue ParmVar 0x5584a7aa5cb8 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x5584a7aa5ed8 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x5584a7aa5e90 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x5584a7a9fdf8
|           `-ImplicitCastExpr 0x5584a7aa5e78 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x5584a7aa5e58 <col:26> 'struct k_msgq *' lvalue ParmVar 0x5584a7aa5cb8 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5584a7aa65f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5584a7aa5f88 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x5584a7b362a0 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x5584a7b35f00 <line:3820:3>
|   | `-TextComment 0x5584a7b35ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b35f20 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5584a7b35f80 <col:10, col:56>
|   |   `-TextComment 0x5584a7b35f50 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x5584a7b35fd0 <line:3822:3, col:80>
|   | `-TextComment 0x5584a7b35fa0 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x5584a7b36020 <line:3824:3>
|   | `-TextComment 0x5584a7b35ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b36040 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b360d0 <col:15, col:44>
|   |   `-TextComment 0x5584a7b360a0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5584a7b36120 <line:3826:3>
|   | `-TextComment 0x5584a7b360f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b36140 <col:4, line:3828:1> Name="return"
|     `-ParagraphComment 0x5584a7b36240 <line:3826:11, line:3828:1>
|       |-TextComment 0x5584a7b36170 <line:3826:11, col:30> Text=" Number of messages."
|       |-TextComment 0x5584a7b36190 <line:3827:3> Text=" "
|       |-InlineCommandComment 0x5584a7b361e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5584a7b36200 <line:3828:1> Text=" "
|-FunctionDecl 0x5584a7aa6758 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5584a7aa66c8 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5584a7aa68e8 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x5584a7aa6880 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x5584a7aa6868 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5584a7aa6838 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x5584a7a9fdf8
|         `-ImplicitCastExpr 0x5584a7aa6820 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x5584a7aa6800 <col:9> 'struct k_msgq *' lvalue ParmVar 0x5584a7aa66c8 'msgq' 'struct k_msgq *'
|-RecordDecl 0x5584a7aa6900 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x5584a7b36500 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x5584a7b36340 <line:3839:3>
| | | `-TextComment 0x5584a7b36310 <col:3> Text=" "
| | |-VerbatimLineComment 0x5584a7b36360 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x5584a7b363d0 <line:3840:3>
| | | `-TextComment 0x5584a7b363a0 <col:3> Text=" "
| | |-VerbatimLineComment 0x5584a7b363f0 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x5584a7b364b0 <line:3841:3, col:5>
| |   |-TextComment 0x5584a7b36430 <col:3> Text=" "
| |   |-TextComment 0x5584a7b36450 <col:4> Text="@"
| |   `-TextComment 0x5584a7b36470 <col:5> Text="{"
| |-FieldDecl 0x5584a7aa69f0 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-ConstantExpr 0x5584a7aa69d8 <col:15> 'int'
| |   `-IntegerLiteral 0x5584a7aa69a8 <col:15> 'int' 8
| |-FieldDecl 0x5584a7aa6a88 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-ConstantExpr 0x5584a7aa6a70 <col:16> 'int'
| |   `-IntegerLiteral 0x5584a7aa6a40 <col:16> 'int' 4
| `-FieldDecl 0x5584a7aa6b20 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-ConstantExpr 0x5584a7aa6b08 <col:16> 'int'
|     `-IntegerLiteral 0x5584a7aa6ad8 <col:16> 'int' 20
|-RecordDecl 0x5584a7aa6b70 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x5584a7aa6c30 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x5584a7aa6cd8 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x5584a7aa6db8 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x5584a7b366b0 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x5584a7b365a0 <line:3869:3>
| | | `-TextComment 0x5584a7b36570 <col:3> Text=" "
| | |-BlockCommandComment 0x5584a7b365c0 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x5584a7b36620 <col:10, col:35>
| | |   `-TextComment 0x5584a7b365f0 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x5584a7b36670 <line:3871:1>
| |   `-TextComment 0x5584a7b36640 <col:1> Text=" "
| |-FieldDecl 0x5584a7aa6ea8 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x5584a7b36780 <line:3873:5, col:55>
| |   `-ParagraphComment 0x5584a7b36750 <col:5, col:55>
| |     `-TextComment 0x5584a7b36720 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x5584a7aa6f38 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x5584a7b36850 <line:3875:5, col:32>
| |   `-ParagraphComment 0x5584a7b36820 <col:5, col:32>
| |     `-TextComment 0x5584a7b367f0 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x5584a7aa6fc8 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x5584a7b36920 <line:3877:5, col:43>
| |   `-ParagraphComment 0x5584a7b368f0 <col:5, col:43>
| |     `-TextComment 0x5584a7b368c0 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x5584a7aa7060 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x5584a7b369f0 <line:3879:5, col:34>
| |   `-ParagraphComment 0x5584a7b369c0 <col:5, col:34>
| |     `-TextComment 0x5584a7b36990 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x5584a7aa70f0 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x5584a7b36ac0 <line:3881:5, col:55>
| |   `-ParagraphComment 0x5584a7b36a90 <col:5, col:55>
| |     `-TextComment 0x5584a7b36a60 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x5584a7aa71c8 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x5584a7b36b90 <line:3883:5, col:35>
| |   `-ParagraphComment 0x5584a7b36b60 <col:5, col:35>
| |     `-TextComment 0x5584a7b36b30 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x5584a7aa7258 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x5584a7b36c60 <line:3885:5, col:22>
| |   `-ParagraphComment 0x5584a7b36c30 <col:5, col:22>
| |     `-TextComment 0x5584a7b36c00 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x5584a7aa72e8 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x5584a7b36d30 <line:3887:5, col:22>
| |   `-ParagraphComment 0x5584a7b36d00 <col:5, col:22>
| |     `-TextComment 0x5584a7b36cd0 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x5584a7aa7378 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x5584a7b36e00 <line:3889:5, col:65>
|     `-ParagraphComment 0x5584a7b36dd0 <col:5, col:65>
|       `-TextComment 0x5584a7b36da0 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x5584a7aa73f8 prev 0x5584a7a5c738 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x5584a7b36fb0 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x5584a7b36ea0 <line:3897:3>
| | | `-TextComment 0x5584a7b36e70 <col:3> Text=" "
| | |-BlockCommandComment 0x5584a7b36ec0 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x5584a7b36f20 <col:10, col:27>
| | |   `-TextComment 0x5584a7b36ef0 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x5584a7b36f70 <line:3899:1>
| |   `-TextComment 0x5584a7b36f40 <col:1> Text=" "
| |-FieldDecl 0x5584a7aa74b8 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5584a7b37080 <line:3901:5, col:29>
| |   `-ParagraphComment 0x5584a7b37050 <col:5, col:29>
| |     `-TextComment 0x5584a7b37020 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x5584a7aa7548 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5584a7b37150 <line:3903:5, col:27>
| |   `-ParagraphComment 0x5584a7b37120 <col:5, col:27>
| |     `-TextComment 0x5584a7b370f0 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x5584a7aa7a20 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x5584a7aa7d00 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x5584a7aa7bf8 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x5584a7b37590 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x5584a7b371f0 <line:3942:3>
|   | `-TextComment 0x5584a7b371c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b37210 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5584a7b37270 <col:10, col:31>
|   |   `-TextComment 0x5584a7b37240 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x5584a7b372c0 <line:3944:3, col:69>
|   | `-TextComment 0x5584a7b37290 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x5584a7b37310 <line:3946:3>
|   | `-TextComment 0x5584a7b372e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b37330 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b373c0 <col:15, col:38>
|   |   `-TextComment 0x5584a7b37390 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x5584a7b37410 <line:3948:3>
|   | `-TextComment 0x5584a7b373e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b37430 <col:4, line:3950:1> Name="return"
|     `-ParagraphComment 0x5584a7b37530 <line:3948:11, line:3950:1>
|       |-TextComment 0x5584a7b37460 <line:3948:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b37480 <line:3949:3> Text=" "
|       |-InlineCommandComment 0x5584a7b374d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5584a7b374f0 <line:3950:1> Text=" "
|-FunctionDecl 0x5584a7aa80f8 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x5584a7aa7e00 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5584a7aa7f38 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5584a7aa7fb0 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x5584a7b37e50 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x5584a7b37630 <line:3954:3>
|   | `-TextComment 0x5584a7b37600 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b37650 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5584a7b376b0 <col:10, col:57>
|   |   `-TextComment 0x5584a7b37680 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x5584a7b377d0 <line:3956:3, line:3958:55>
|   | |-TextComment 0x5584a7b376d0 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x5584a7b37720 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x5584a7b37740 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x5584a7b37760 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x5584a7b37780 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x5584a7b37820 <line:3960:3>
|   | `-TextComment 0x5584a7b377f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b37840 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b378f0 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x5584a7b378a0 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5584a7b378c0 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x5584a7b37910 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b379d0 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x5584a7b37970 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x5584a7b37990 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x5584a7b379f0 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b37b20 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x5584a7b37a50 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x5584a7b37a70 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x5584a7b37a90 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x5584a7b37ab0 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x5584a7b37ad0 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x5584a7b37b70 <line:3968:3>
|   | `-TextComment 0x5584a7b37b40 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b37b90 <col:4, line:3969:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b37c10 <line:3968:11, line:3969:3>
|   |   |-TextComment 0x5584a7b37bc0 <line:3968:11, col:26> Text=" 0 Message sent."
|   |   `-TextComment 0x5584a7b37be0 <line:3969:3> Text=" "
|   |-BlockCommandComment 0x5584a7b37c30 <col:4, line:3970:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b37cb0 <line:3969:11, line:3970:3>
|   |   |-TextComment 0x5584a7b37c60 <line:3969:11, col:44> Text=" -ENOMSG Returned without waiting."
|   |   `-TextComment 0x5584a7b37c80 <line:3970:3> Text=" "
|   `-BlockCommandComment 0x5584a7b37cd0 <col:4, line:3972:1> Name="retval"
|     `-ParagraphComment 0x5584a7b37dd0 <line:3970:11, line:3972:1>
|       |-TextComment 0x5584a7b37d00 <line:3970:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5584a7b37d20 <line:3971:3> Text=" "
|       |-InlineCommandComment 0x5584a7b37d70 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5584a7b37d90 <line:3972:1> Text=" "
|-FunctionDecl 0x5584a7aa8460 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x5584a7aa8200 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5584a7aa8290 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5584a7aa8320 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x5584a7b385b0 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x5584a7b37ef0 <line:3977:3>
|   | `-TextComment 0x5584a7b37ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b37f10 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5584a7b37f70 <col:10, col:59>
|   |   `-TextComment 0x5584a7b37f40 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x5584a7b38130 <line:3979:3, line:3983:29>
|   | |-TextComment 0x5584a7b37f90 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x5584a7b37fe0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x5584a7b38000 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x5584a7b38020 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x5584a7b38040 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x5584a7b38090 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x5584a7b380b0 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x5584a7b380d0 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x5584a7b38180 <line:3985:3>
|   | `-TextComment 0x5584a7b38150 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b381a0 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b38250 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x5584a7b38200 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5584a7b38220 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x5584a7b38270 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b38320 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x5584a7b382d0 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x5584a7b382f0 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x5584a7b38340 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b383d0 <col:14, col:64>
|   |   `-TextComment 0x5584a7b383a0 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x5584a7b38420 <line:3989:3>
|   | `-TextComment 0x5584a7b383f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b38440 <col:4, line:3991:1> Name="return"
|     `-ParagraphComment 0x5584a7b38540 <line:3989:11, line:3991:1>
|       |-TextComment 0x5584a7b38470 <line:3989:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b38490 <line:3990:3> Text=" "
|       |-InlineCommandComment 0x5584a7b384e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5584a7b38500 <line:3991:1> Text=" "
|-FunctionDecl 0x5584a7aa8848 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x5584a7aa8570 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5584a7aa8600 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5584a7aa8680 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x5584a7aa86f8 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x5584a7b38ee0 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x5584a7b38650 <line:3996:3>
|   | `-TextComment 0x5584a7b38620 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b38670 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5584a7b386d0 <col:10, col:36>
|   |   `-TextComment 0x5584a7b386a0 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x5584a7b387c0 <line:3998:3, line:3999:40>
|   | |-TextComment 0x5584a7b386f0 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x5584a7b38740 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x5584a7b38760 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x5584a7b38780 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x5584a7b38810 <line:4001:3>
|   | `-TextComment 0x5584a7b387e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b38830 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b388e0 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x5584a7b38890 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5584a7b388b0 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x5584a7b38900 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b389b0 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x5584a7b38960 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x5584a7b38980 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x5584a7b389d0 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b38ab0 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x5584a7b38a30 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x5584a7b38a50 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x5584a7b38a70 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x5584a7b38ad0 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b38bb0 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x5584a7b38b30 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x5584a7b38b50 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5584a7b38b70 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5584a7b38c00 <line:4009:3>
|   | `-TextComment 0x5584a7b38bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b38c20 <col:4, line:4010:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b38ca0 <line:4009:11, line:4010:3>
|   |   |-TextComment 0x5584a7b38c50 <line:4009:11, col:30> Text=" 0 Message received."
|   |   `-TextComment 0x5584a7b38c70 <line:4010:3> Text=" "
|   |-BlockCommandComment 0x5584a7b38cc0 <col:4, line:4011:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b38d40 <line:4010:11, line:4011:3>
|   |   |-TextComment 0x5584a7b38cf0 <line:4010:11, col:44> Text=" -ENOMSG Returned without waiting."
|   |   `-TextComment 0x5584a7b38d10 <line:4011:3> Text=" "
|   `-BlockCommandComment 0x5584a7b38d60 <col:4, line:4013:1> Name="retval"
|     `-ParagraphComment 0x5584a7b38e60 <line:4011:11, line:4013:1>
|       |-TextComment 0x5584a7b38d90 <line:4011:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5584a7b38db0 <line:4012:3> Text=" "
|       |-InlineCommandComment 0x5584a7b38e00 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5584a7b38e20 <line:4013:1> Text=" "
|-FunctionDecl 0x5584a7aa9240 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x5584a7aa8960 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5584a7aa9120 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x5584a7b394b0 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x5584a7b38f80 <line:4018:3>
|   | `-TextComment 0x5584a7b38f50 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b38fa0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5584a7b39000 <col:10, col:54>
|   |   `-TextComment 0x5584a7b38fd0 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x5584a7b39070 <line:4020:3, line:4021:57>
|   | |-TextComment 0x5584a7b39020 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x5584a7b39040 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x5584a7b390e0 <line:4023:3, line:4024:31>
|   | |-TextComment 0x5584a7b39090 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x5584a7b390b0 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x5584a7b39130 <line:4026:3>
|   | `-TextComment 0x5584a7b39100 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b39150 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b39200 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x5584a7b391b0 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x5584a7b391d0 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x5584a7b39220 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b392d0 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x5584a7b39280 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x5584a7b392a0 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x5584a7b39320 <line:4030:3>
|   | `-TextComment 0x5584a7b392f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b39340 <col:4, line:4032:1> Name="return"
|     `-ParagraphComment 0x5584a7b39440 <line:4030:11, line:4032:1>
|       |-TextComment 0x5584a7b39370 <line:4030:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b39390 <line:4031:3> Text=" "
|       |-InlineCommandComment 0x5584a7b393e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5584a7b39400 <line:4032:1> Text=" "
|-FunctionDecl 0x5584a7aa9698 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x5584a7aa9340 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5584a7aa93d0 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5584a7aa94c8 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5584a7aa9540 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x5584a7b39f60 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x5584a7b39550 <line:4036:3>
|   | `-TextComment 0x5584a7b39520 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b39570 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5584a7b395d0 <col:10, col:65>
|   |   `-TextComment 0x5584a7b395a0 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x5584a7b396c0 <line:4038:3, line:4042:42>
|   | |-TextComment 0x5584a7b395f0 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x5584a7b39610 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x5584a7b39630 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x5584a7b39650 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x5584a7b39670 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x5584a7b39760 <line:4044:3, line:4046:33>
|   | |-TextComment 0x5584a7b396e0 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x5584a7b39700 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x5584a7b39720 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x5584a7b39850 <line:4048:3, line:4052:55>
|   | |-TextComment 0x5584a7b39780 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x5584a7b397a0 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x5584a7b397c0 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x5584a7b397e0 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x5584a7b39800 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x5584a7b398a0 <line:4054:3>
|   | `-TextComment 0x5584a7b39870 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b398c0 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b39970 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x5584a7b39920 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x5584a7b39940 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x5584a7b39990 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b39a50 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x5584a7b39a00 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x5584a7b39a20 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x5584a7b39a70 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b39b20 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x5584a7b39ad0 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x5584a7b39af0 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x5584a7b39b40 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b39c20 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x5584a7b39ba0 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x5584a7b39bc0 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5584a7b39be0 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5584a7b39c70 <line:4061:3>
|   | `-TextComment 0x5584a7b39c40 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b39c90 <col:4, line:4062:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b39d10 <line:4061:11, line:4062:3>
|   |   |-TextComment 0x5584a7b39cc0 <line:4061:11, col:28> Text=" 0 Data retrieved."
|   |   `-TextComment 0x5584a7b39ce0 <line:4062:3> Text=" "
|   |-BlockCommandComment 0x5584a7b39d30 <col:4, line:4063:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b39db0 <line:4062:11, line:4063:3>
|   |   |-TextComment 0x5584a7b39d60 <line:4062:11, col:44> Text=" -ENOMEM Returned without waiting."
|   |   `-TextComment 0x5584a7b39d80 <line:4063:3> Text=" "
|   `-BlockCommandComment 0x5584a7b39dd0 <col:4, line:4065:1> Name="retval"
|     `-ParagraphComment 0x5584a7b39ed0 <line:4063:11, line:4065:1>
|       |-TextComment 0x5584a7b39e00 <line:4063:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5584a7b39e20 <line:4064:3> Text=" "
|       |-InlineCommandComment 0x5584a7b39e70 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5584a7b39e90 <line:4065:1> Text=" "
|-RecordDecl 0x5584a7aa97e8 prev 0x5584a7a5c7e8 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x5584a7b3a030 <line:4078:4, col:19>
| | `-ParagraphComment 0x5584a7b3a000 <col:4, col:19>
| |   `-TextComment 0x5584a7b39fd0 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x5584a7aa9880 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x5584a7b3a100 <col:38, col:63>
| |   `-ParagraphComment 0x5584a7b3a0d0 <col:38, col:63>
| |     `-TextComment 0x5584a7b3a0a0 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x5584a7aa9908 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x5584a7b3a1d0 <col:38, col:50>
| |   `-ParagraphComment 0x5584a7b3a1a0 <col:38, col:50>
| |     `-TextComment 0x5584a7b3a170 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x5584a7aa9998 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x5584a7b3a2a0 <col:38, col:61>
| |   `-ParagraphComment 0x5584a7b3a270 <col:38, col:61>
| |     `-TextComment 0x5584a7b3a240 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x5584a7aa9a28 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x5584a7b3a370 <col:38, col:67>
| |   `-ParagraphComment 0x5584a7b3a340 <col:38, col:67>
| |     `-TextComment 0x5584a7b3a310 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x5584a7aa9ab8 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x5584a7b3a440 <col:38, col:63>
| |   `-ParagraphComment 0x5584a7b3a410 <col:38, col:63>
| |     `-TextComment 0x5584a7b3a3e0 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x5584a7aa9b58 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x5584a7b3a510 <col:31, col:52>
| |   `-ParagraphComment 0x5584a7b3a4e0 <col:31, col:52>
| |     `-TextComment 0x5584a7b3a4b0 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x5584a7aa9bd8 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x5584a7aa9c98 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x5584a7b3a5e0 <col:31, col:49>
| | |   `-ParagraphComment 0x5584a7b3a5b0 <col:31, col:49>
| | |     `-TextComment 0x5584a7b3a580 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x5584a7aa9d28 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x5584a7b3a6b0 <col:31, col:49>
| |     `-ParagraphComment 0x5584a7b3a680 <col:31, col:49>
| |       `-TextComment 0x5584a7b3a650 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x5584a7aa9e10 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x5584a7aa9e70 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x5584a7b3a780 <col:26, col:32>
|     `-ParagraphComment 0x5584a7b3a750 <col:26, col:32>
|       `-TextComment 0x5584a7b3a720 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x5584a7aab180 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x5584a7aaa0a8 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7aaafc8 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x5584a7aab040 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x5584a7b3adc0 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x5584a7b3a820 <line:4145:3>
|   | `-TextComment 0x5584a7b3a7f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b3a840 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5584a7b3a8a0 <col:10, col:28>
|   |   `-TextComment 0x5584a7b3a870 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x5584a7b3a8f0 <line:4147:3, col:66>
|   | `-TextComment 0x5584a7b3a8c0 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x5584a7b3a940 <line:4149:3>
|   | `-TextComment 0x5584a7b3a910 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b3a960 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b3aa10 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x5584a7b3a9c0 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5584a7b3a9e0 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x5584a7b3aa30 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b3ab10 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x5584a7b3aa90 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x5584a7b3aab0 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x5584a7b3aad0 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x5584a7b3ab30 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b3abe0 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x5584a7b3ab90 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x5584a7b3abb0 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x5584a7b3ac30 <line:4155:3>
|   | `-TextComment 0x5584a7b3ac00 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b3ac50 <col:4, line:4157:1> Name="return"
|     `-ParagraphComment 0x5584a7b3ad50 <line:4155:11, line:4157:1>
|       |-TextComment 0x5584a7b3ac80 <line:4155:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b3aca0 <line:4156:3> Text=" "
|       |-InlineCommandComment 0x5584a7b3acf0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5584a7b3ad10 <line:4157:1> Text=" "
|-FunctionDecl 0x5584a7aab3a8 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x5584a7aab290 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x5584a7b3b2c0 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x5584a7b3ae60 <line:4161:3>
|   | `-TextComment 0x5584a7b3ae30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b3ae80 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5584a7b3aee0 <col:10, col:43>
|   |   `-TextComment 0x5584a7b3aeb0 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x5584a7b3af80 <line:4163:3, line:4165:46>
|   | |-TextComment 0x5584a7b3af00 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x5584a7b3af20 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x5584a7b3af40 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x5584a7b3afd0 <line:4167:3>
|   | `-TextComment 0x5584a7b3afa0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b3aff0 <col:4, line:4168:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b3b0a0 <line:4167:15, line:4168:3>
|   |   |-TextComment 0x5584a7b3b050 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5584a7b3b070 <line:4168:3> Text=" "
|   |-BlockCommandComment 0x5584a7b3b0c0 <col:4, line:4169:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b3b140 <line:4168:11, line:4169:3>
|   |   |-TextComment 0x5584a7b3b0f0 <line:4168:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b3b110 <line:4169:3> Text=" "
|   `-BlockCommandComment 0x5584a7b3b160 <col:4, line:4171:1> Name="retval"
|     `-ParagraphComment 0x5584a7b3b260 <line:4169:11, line:4171:1>
|       |-TextComment 0x5584a7b3b190 <line:4169:11, col:37> Text=" -EAGAIN nothing to cleanup"
|       |-TextComment 0x5584a7b3b1b0 <line:4170:3> Text=" "
|       |-InlineCommandComment 0x5584a7b3b200 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5584a7b3b220 <line:4171:1> Text=" "
|-FunctionDecl 0x5584a7aab638 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x5584a7aab4a0 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7aab518 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x5584a7b3b920 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x5584a7b3b360 <line:4175:3>
|   | `-TextComment 0x5584a7b3b330 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b3b380 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5584a7b3b3e0 <col:10, col:56>
|   |   `-TextComment 0x5584a7b3b3b0 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x5584a7b3b480 <line:4177:3, line:4179:74>
|   | |-TextComment 0x5584a7b3b400 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x5584a7b3b420 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x5584a7b3b440 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x5584a7b3b4d0 <line:4181:3, col:69>
|   | `-TextComment 0x5584a7b3b4a0 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x5584a7b3b520 <line:4183:3>
|   | `-TextComment 0x5584a7b3b4f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b3b540 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b3b5f0 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x5584a7b3b5a0 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5584a7b3b5c0 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x5584a7b3b610 <col:4, line:4186:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b3b6f0 <line:4184:15, line:4186:3>
|   |   |-TextComment 0x5584a7b3b670 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x5584a7b3b690 <line:4185:3, col:30> Text="             buffer is used."
|   |   `-TextComment 0x5584a7b3b6b0 <line:4186:3> Text=" "
|   |-BlockCommandComment 0x5584a7b3b710 <col:4, line:4187:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b3b790 <line:4186:11, line:4187:3>
|   |   |-TextComment 0x5584a7b3b740 <line:4186:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b3b760 <line:4187:3> Text=" "
|   `-BlockCommandComment 0x5584a7b3b7b0 <col:4, line:4189:1> Name="retval"
|     `-ParagraphComment 0x5584a7b3b8b0 <line:4187:11, line:4189:1>
|       |-TextComment 0x5584a7b3b7e0 <line:4187:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|       |-TextComment 0x5584a7b3b800 <line:4188:3> Text=" "
|       |-InlineCommandComment 0x5584a7b3b850 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5584a7b3b870 <line:4189:1> Text=" "
|-FunctionDecl 0x5584a7aabb58 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5584a7aab740 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7aab7c0 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5584a7aab838 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7aab8e0 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x5584a7aab958 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7aab9d0 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x5584a7b0a380 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x5584a7b3b9c0 <line:4193:3>
|   | `-TextComment 0x5584a7b3b990 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b09860 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5584a7b098c0 <col:10, col:31>
|   |   `-TextComment 0x5584a7b09890 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x5584a7b099e0 <line:4195:3, col:66>
|   | |-TextComment 0x5584a7b098e0 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x5584a7b09930 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x5584a7b09950 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x5584a7b099a0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x5584a7b09a30 <line:4197:3>
|   | `-TextComment 0x5584a7b09a00 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b09a50 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b09b00 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x5584a7b09ab0 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5584a7b09ad0 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x5584a7b09b20 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b09bd0 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x5584a7b09b80 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x5584a7b09ba0 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x5584a7b09bf0 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b09ca0 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x5584a7b09c50 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x5584a7b09c70 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x5584a7b09cc0 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b09d70 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x5584a7b09d20 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x5584a7b09d40 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x5584a7b09d90 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x5584a7b09e40 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x5584a7b09df0 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x5584a7b09e10 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x5584a7b09e60 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x5584a7b09f40 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x5584a7b09ec0 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x5584a7b09ee0 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5584a7b09f00 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5584a7b09f90 <line:4206:3>
|   | `-TextComment 0x5584a7b09f60 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b09fb0 <col:4, line:4207:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b0a0b0 <line:4206:11, line:4207:3>
|   |   |-TextComment 0x5584a7b09fe0 <line:4206:11, col:22> Text=" 0 At least "
|   |   |-InlineCommandComment 0x5584a7b0a030 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   |   |-TextComment 0x5584a7b0a050 <col:34, col:61> Text=" bytes of data were written."
|   |   `-TextComment 0x5584a7b0a070 <line:4207:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0a0d0 <col:4, line:4208:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b0a150 <line:4207:11, line:4208:3>
|   |   |-TextComment 0x5584a7b0a100 <line:4207:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   |   `-TextComment 0x5584a7b0a120 <line:4208:3> Text=" "
|   `-BlockCommandComment 0x5584a7b0a170 <col:4, line:4211:1> Name="retval"
|     `-ParagraphComment 0x5584a7b0a2f0 <line:4208:11, line:4211:1>
|       |-TextComment 0x5584a7b0a1a0 <line:4208:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|       |-InlineCommandComment 0x5584a7b0a1f0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|       |-TextComment 0x5584a7b0a210 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|       |-TextComment 0x5584a7b0a230 <line:4210:3> Text=" "
|       |-InlineCommandComment 0x5584a7b0a280 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5584a7b0a2a0 <line:4211:1> Text=" "
|-FunctionDecl 0x5584a7aad0d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5584a7aabc80 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7aabd00 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5584a7aabd78 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7aabdf0 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x5584a7aabe68 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7aabee0 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x5584a7b0b010 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x5584a7b0a420 <line:4217:3>
|   | `-TextComment 0x5584a7b0a3f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0a440 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5584a7b0a4a0 <col:10, col:32>
|   |   `-TextComment 0x5584a7b0a470 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x5584a7b0a5c0 <line:4219:3, col:66>
|   | |-TextComment 0x5584a7b0a4c0 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x5584a7b0a510 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x5584a7b0a530 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x5584a7b0a580 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x5584a7b0a610 <line:4221:3>
|   | `-TextComment 0x5584a7b0a5e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0a630 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0a6e0 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x5584a7b0a690 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5584a7b0a6b0 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0a700 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b0a7b0 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x5584a7b0a760 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x5584a7b0a780 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0a7d0 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b0a880 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x5584a7b0a830 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x5584a7b0a850 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0a8a0 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b0a950 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x5584a7b0a900 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x5584a7b0a920 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0a970 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x5584a7b0aa20 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x5584a7b0a9d0 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x5584a7b0a9f0 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0aa40 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x5584a7b0ab20 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x5584a7b0aaa0 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x5584a7b0aac0 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5584a7b0aae0 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5584a7b0ab70 <line:4230:3>
|   | `-TextComment 0x5584a7b0ab40 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0ab90 <col:4, line:4231:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b0ac90 <line:4230:11, line:4231:3>
|   |   |-TextComment 0x5584a7b0abc0 <line:4230:11, col:22> Text=" 0 At least "
|   |   |-InlineCommandComment 0x5584a7b0ac10 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   |   |-TextComment 0x5584a7b0ac30 <col:34, col:58> Text=" bytes of data were read."
|   |   `-TextComment 0x5584a7b0ac50 <line:4231:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0acb0 <col:4, line:4232:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b0ad30 <line:4231:11, line:4232:3>
|   |   |-TextComment 0x5584a7b0ace0 <line:4231:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   |   `-TextComment 0x5584a7b0ad00 <line:4232:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0ad50 <col:4, line:4233:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b0add0 <line:4232:11, line:4233:3>
|   |   |-TextComment 0x5584a7b0ad80 <line:4232:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   |   `-TextComment 0x5584a7b0ada0 <line:4233:3> Text=" "
|   `-BlockCommandComment 0x5584a7b0adf0 <col:4, line:4236:1> Name="retval"
|     `-ParagraphComment 0x5584a7b0af70 <line:4233:11, line:4236:1>
|       |-TextComment 0x5584a7b0ae20 <line:4233:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|       |-InlineCommandComment 0x5584a7b0ae70 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|       |-TextComment 0x5584a7b0ae90 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|       |-TextComment 0x5584a7b0aeb0 <line:4235:3> Text=" "
|       |-InlineCommandComment 0x5584a7b0af00 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5584a7b0af20 <line:4236:1> Text=" "
|-FunctionDecl 0x5584a7aad4d0 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x5584a7aad1f0 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7aad280 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5584a7aad2f8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7aad388 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x5584a7b3fa50 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x5584a7b0b0b0 <line:4242:3>
|   | `-TextComment 0x5584a7b0b080 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b0b0d0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5584a7b0b130 <col:10, col:39>
|   |   `-TextComment 0x5584a7b0b100 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x5584a7b0b320 <line:4244:3, line:4246:79>
|   | |-TextComment 0x5584a7b0b150 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x5584a7b0b1a0 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x5584a7b0b1c0 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x5584a7b0b1e0 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x5584a7b0b230 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x5584a7b0b250 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x5584a7b0b2a0 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x5584a7b0b2c0 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x5584a7b0b370 <line:4248:3>
|   | `-TextComment 0x5584a7b0b340 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0b390 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b0b440 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x5584a7b0b3f0 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5584a7b0b410 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0b460 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b0b510 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x5584a7b0b4c0 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x5584a7b0b4e0 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0b530 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b0b5e0 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x5584a7b0b590 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x5584a7b0b5b0 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x5584a7b0b600 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b0b690 <col:14, col:61>
|   |   `-TextComment 0x5584a7b0b660 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x5584a7b0b6e0 <line:4253:3>
|   | `-TextComment 0x5584a7b0b6b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b0b700 <col:4, line:4255:1> Name="return"
|     `-ParagraphComment 0x5584a7b0b800 <line:4253:11, line:4255:1>
|       |-TextComment 0x5584a7b0b730 <line:4253:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b0b750 <line:4254:3> Text=" "
|       |-InlineCommandComment 0x5584a7b0b7a0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5584a7b0b7c0 <line:4255:1> Text=" "
|-RecordDecl 0x5584a7aad5e8 prev 0x5584a7a5cb58 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x5584a7b3fb70 <line:4262:3, col:24>
| | `-ParagraphComment 0x5584a7b3fb40 <col:3, col:24>
| |   |-TextComment 0x5584a7b3fac0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5584a7b3fae0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5584a7b3fb00 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5584a7aad678 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5584a7aad6d8 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x5584a7aad738 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x5584a7aad7a0 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x5584a7aad808 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x5584a7aad868 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x5584a7aadd08 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x5584a7aada48 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x5584a7aadac8 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x5584a7aadb40 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7aadbb8 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x5584a7b405b0 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x5584a7b3fc10 <line:4330:3>
|   | `-TextComment 0x5584a7b3fbe0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b3fc30 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5584a7b3fc90 <col:10, col:35>
|   |   `-TextComment 0x5584a7b3fc60 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x5584a7b3fce0 <line:4332:3, col:53>
|   | `-TextComment 0x5584a7b3fcb0 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x5584a7b3ff70 <line:4334:3, line:4339:51>
|   | |-TextComment 0x5584a7b3fd00 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x5584a7b3fd50 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x5584a7b3fd70 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x5584a7b3fd90 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x5584a7b3fde0 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x5584a7b3fe00 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x5584a7b3fe20 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x5584a7b3fe40 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x5584a7b3fe60 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x5584a7b3fe80 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x5584a7b3fed0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x5584a7b3fef0 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x5584a7b3ffc0 <line:4341:3>
|   | `-TextComment 0x5584a7b3ff90 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b3ffe0 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b40090 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x5584a7b40040 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5584a7b40060 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x5584a7b400b0 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b40160 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x5584a7b40110 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x5584a7b40130 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x5584a7b40180 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b40230 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x5584a7b401e0 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x5584a7b40200 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x5584a7b40250 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b402e0 <col:21, col:45>
|   |   `-TextComment 0x5584a7b402b0 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x5584a7b40330 <line:4346:3>
|   | `-TextComment 0x5584a7b40300 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b40350 <col:4, line:4347:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b403d0 <line:4346:11, line:4347:3>
|   |   |-TextComment 0x5584a7b40380 <line:4346:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5584a7b403a0 <line:4347:3> Text=" "
|   |-BlockCommandComment 0x5584a7b403f0 <col:4, col:40> Name="retval"
|   | `-ParagraphComment 0x5584a7b40450 <col:11, col:40>
|   |   `-TextComment 0x5584a7b40420 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   `-ParagraphComment 0x5584a7b40520 <line:4349:3, line:4350:1>
|     |-TextComment 0x5584a7b40470 <line:4349:3> Text=" "
|     |-InlineCommandComment 0x5584a7b404c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|     `-TextComment 0x5584a7b404e0 <line:4350:1> Text=" "
|-FunctionDecl 0x5584a7aaf040 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x5584a7aade20 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x5584a7aadea0 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x5584a7aadf18 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x5584a7b40e60 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x5584a7b40650 <line:4355:3>
|   | `-TextComment 0x5584a7b40620 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b40670 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5584a7b406d0 <col:10, col:45>
|   |   `-TextComment 0x5584a7b406a0 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x5584a7b40720 <line:4357:3, col:60>
|   | `-TextComment 0x5584a7b406f0 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x5584a7b40770 <line:4359:3>
|   | `-TextComment 0x5584a7b40740 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b40790 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b40840 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x5584a7b407f0 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5584a7b40810 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x5584a7b40860 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b40910 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x5584a7b408c0 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x5584a7b408e0 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x5584a7b40930 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b40a10 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x5584a7b40990 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x5584a7b409b0 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x5584a7b409d0 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x5584a7b40a60 <line:4365:3>
|   | `-TextComment 0x5584a7b40a30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b40a80 <col:4, line:4367:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b40b80 <line:4365:11, line:4367:3>
|   |   |-TextComment 0x5584a7b40ab0 <line:4365:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   |   |-InlineCommandComment 0x5584a7b40b00 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   |   |-TextComment 0x5584a7b40b20 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   |   `-TextComment 0x5584a7b40b40 <line:4367:3> Text=" "
|   |-BlockCommandComment 0x5584a7b40ba0 <col:4, line:4368:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b40c20 <line:4367:11, line:4368:3>
|   |   |-TextComment 0x5584a7b40bd0 <line:4367:11, col:44> Text=" -ENOMEM Returned without waiting."
|   |   `-TextComment 0x5584a7b40bf0 <line:4368:3> Text=" "
|   |-BlockCommandComment 0x5584a7b40c40 <col:4, line:4369:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b40cc0 <line:4368:11, line:4369:3>
|   |   |-TextComment 0x5584a7b40c70 <line:4368:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   |   `-TextComment 0x5584a7b40c90 <line:4369:3> Text=" "
|   `-BlockCommandComment 0x5584a7b40ce0 <col:4, line:4371:1> Name="retval"
|     `-ParagraphComment 0x5584a7b40de0 <line:4369:11, line:4371:1>
|       |-TextComment 0x5584a7b40d10 <line:4369:11, col:40> Text=" -EINVAL Invalid data supplied"
|       |-TextComment 0x5584a7b40d30 <line:4370:3> Text=" "
|       |-InlineCommandComment 0x5584a7b40d80 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5584a7b40da0 <line:4371:1> Text=" "
|-FunctionDecl 0x5584a7aaf2f0 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x5584a7aaf150 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x5584a7aaf1d0 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x5584a7b41390 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x5584a7b40f00 <line:4376:3>
|   | `-TextComment 0x5584a7b40ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b40f20 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5584a7b40f80 <col:10, col:51>
|   |   `-TextComment 0x5584a7b40f50 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x5584a7b40ff0 <line:4378:3, line:4379:26>
|   | |-TextComment 0x5584a7b40fa0 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5584a7b40fc0 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x5584a7b41040 <line:4381:3>
|   | `-TextComment 0x5584a7b41010 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b41060 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b41110 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x5584a7b410c0 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5584a7b410e0 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x5584a7b41130 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b411c0 <col:14, col:75>
|   |   `-TextComment 0x5584a7b41190 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x5584a7b41210 <line:4384:3>
|   | `-TextComment 0x5584a7b411e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b41230 <col:4, line:4386:1> Name="return"
|     `-ParagraphComment 0x5584a7b41330 <line:4384:11, line:4386:1>
|       |-TextComment 0x5584a7b41260 <line:4384:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b41280 <line:4385:3> Text=" "
|       |-InlineCommandComment 0x5584a7b412d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5584a7b412f0 <line:4386:1> Text=" "
|-FunctionDecl 0x5584a7aaf500 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x5584a7aaf3f0 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x5584a7aaf668 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x5584a7aaf628 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x5584a7aaf610 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x5584a7aaf5e0 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x5584a7aad868
| |       `-ImplicitCastExpr 0x5584a7aaf5c8 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x5584a7aaf5a8 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x5584a7aaf3f0 'slab' 'struct k_mem_slab *'
| `-FullComment 0x5584a7b41850 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x5584a7b41430 <line:4390:3>
|   | `-TextComment 0x5584a7b41400 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b41450 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5584a7b414b0 <col:10, col:57>
|   |   `-TextComment 0x5584a7b41480 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x5584a7b41580 <line:4392:3, line:4393:18>
|   | |-TextComment 0x5584a7b414d0 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x5584a7b414f0 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x5584a7b41540 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x5584a7b415d0 <line:4395:3>
|   | `-TextComment 0x5584a7b415a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b415f0 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b41680 <col:15, col:42>
|   |   `-TextComment 0x5584a7b41650 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x5584a7b416d0 <line:4397:3>
|   | `-TextComment 0x5584a7b416a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b416f0 <col:4, line:4399:1> Name="return"
|     `-ParagraphComment 0x5584a7b417f0 <line:4397:11, line:4399:1>
|       |-TextComment 0x5584a7b41720 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|       |-TextComment 0x5584a7b41740 <line:4398:3> Text=" "
|       |-InlineCommandComment 0x5584a7b41790 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5584a7b417b0 <line:4399:1> Text=" "
|-FunctionDecl 0x5584a7aaf738 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x5584a7aaf6a8 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x5584a7aaf968 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x5584a7aaf900 <line:4418:2, col:34>
| |   `-BinaryOperator 0x5584a7aaf8e0 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x5584a7aaf8b0 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x5584a7aaf818 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x5584a7aad6d8
| |     |   `-ImplicitCastExpr 0x5584a7aaf800 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5584a7aaf7e0 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x5584a7aaf6a8 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x5584a7aaf8c8 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x5584a7aaf880 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x5584a7aad868
| |         `-ImplicitCastExpr 0x5584a7aaf868 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x5584a7aaf848 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x5584a7aaf6a8 'slab' 'struct k_mem_slab *'
| `-FullComment 0x5584a7b41d20 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x5584a7b418f0 <line:4406:3>
|   | `-TextComment 0x5584a7b418c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b41910 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5584a7b41970 <col:10, col:59>
|   |   `-TextComment 0x5584a7b41940 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x5584a7b41a50 <line:4408:3, line:4409:20>
|   | |-TextComment 0x5584a7b41990 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x5584a7b419b0 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x5584a7b41a10 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x5584a7b41aa0 <line:4411:3>
|   | `-TextComment 0x5584a7b41a70 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b41ac0 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b41b50 <col:15, col:42>
|   |   `-TextComment 0x5584a7b41b20 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x5584a7b41ba0 <line:4413:3>
|   | `-TextComment 0x5584a7b41b70 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b41bc0 <col:4, line:4415:1> Name="return"
|     `-ParagraphComment 0x5584a7b41cc0 <line:4413:11, line:4415:1>
|       |-TextComment 0x5584a7b41bf0 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|       |-TextComment 0x5584a7b41c10 <line:4414:3> Text=" "
|       |-InlineCommandComment 0x5584a7b41c60 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5584a7b41c80 <line:4415:1> Text=" "
|-RecordDecl 0x5584a7aaf980 prev 0x5584a7a5cc08 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x5584a7b41e40 <line:4424:3, col:24>
| | `-ParagraphComment 0x5584a7b41e10 <col:3, col:24>
| |   |-TextComment 0x5584a7b41d90 <col:3> Text=" "
| |   |-InlineCommandComment 0x5584a7b41db0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5584a7b41dd0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5584a7aafa20 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x5584a7aafa80 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x5584a7aaff08 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x5584a7aafc30 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5584a7aafcc0 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5584a7aafd38 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7aafdb0 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x5584a7b42750 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x5584a7b41ee0 <line:4478:3>
|   | `-TextComment 0x5584a7b41eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b41f00 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5584a7b41f60 <col:10, col:45>
|   |   `-TextComment 0x5584a7b41f30 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x5584a7b41fb0 <line:4480:3, col:60>
|   | `-TextComment 0x5584a7b41f80 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x5584a7b42000 <line:4482:3>
|   | `-TextComment 0x5584a7b41fd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b42020 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b420d0 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x5584a7b42080 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x5584a7b420a0 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x5584a7b420f0 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b421a0 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x5584a7b42150 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x5584a7b42170 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x5584a7b421c0 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b42270 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x5584a7b42220 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x5584a7b42240 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x5584a7b42290 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b42370 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x5584a7b422f0 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x5584a7b42310 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x5584a7b42330 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x5584a7b423c0 <line:4489:3>
|   | `-TextComment 0x5584a7b42390 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b423e0 <col:4, line:4491:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b42510 <line:4489:11, line:4491:3>
|   |   |-TextComment 0x5584a7b42410 <line:4489:11, col:35> Text=" 0 Memory allocated. The "
|   |   |-InlineCommandComment 0x5584a7b42460 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   |   |-TextComment 0x5584a7b42480 <col:43, col:72> Text=" field of the block descriptor"
|   |   |-TextComment 0x5584a7b424a0 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   |   `-TextComment 0x5584a7b424c0 <line:4491:3> Text=" "
|   |-BlockCommandComment 0x5584a7b42530 <col:4, line:4492:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b425b0 <line:4491:11, line:4492:3>
|   |   |-TextComment 0x5584a7b42560 <line:4491:11, col:44> Text=" -ENOMEM Returned without waiting."
|   |   `-TextComment 0x5584a7b42580 <line:4492:3> Text=" "
|   `-BlockCommandComment 0x5584a7b425d0 <col:4, line:4494:1> Name="retval"
|     `-ParagraphComment 0x5584a7b426d0 <line:4492:11, line:4494:1>
|       |-TextComment 0x5584a7b42600 <line:4492:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5584a7b42620 <line:4493:3> Text=" "
|       |-InlineCommandComment 0x5584a7b42670 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5584a7b42690 <line:4494:1> Text=" "
|-FunctionDecl 0x5584a7ab1648 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x5584a7ab14b0 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5584a7ab1528 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x5584a7b42c30 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x5584a7b427f0 <line:4499:3>
|   | `-TextComment 0x5584a7b427c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b42810 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5584a7b42870 <col:10, col:68>
|   |   `-TextComment 0x5584a7b42840 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x5584a7b428c0 <line:4501:3, col:47>
|   | `-TextComment 0x5584a7b42890 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x5584a7b42910 <line:4503:3>
|   | `-TextComment 0x5584a7b428e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b42930 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b429e0 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x5584a7b42990 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x5584a7b429b0 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x5584a7b42a00 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b42ab0 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x5584a7b42a60 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x5584a7b42a80 <line:4505:3> Text=" "
|   `-BlockCommandComment 0x5584a7b42ad0 <col:4, line:4507:1> Name="return"
|     `-ParagraphComment 0x5584a7b42bd0 <line:4505:11, line:4507:1>
|       |-TextComment 0x5584a7b42b00 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|       |-TextComment 0x5584a7b42b20 <line:4506:3> Text=" "
|       |-InlineCommandComment 0x5584a7b42b70 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5584a7b42b90 <line:4507:1> Text=" "
|-FunctionDecl 0x5584a7ab1860 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x5584a7ab1750 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x5584a7b43090 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x5584a7b42cd0 <line:4511:3>
|   | `-TextComment 0x5584a7b42ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b42cf0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5584a7b42d50 <col:10, col:51>
|   |   `-TextComment 0x5584a7b42d20 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x5584a7b42dc0 <line:4513:3, line:4514:15>
|   | |-TextComment 0x5584a7b42d70 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5584a7b42d90 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x5584a7b42e10 <line:4516:3>
|   | `-TextComment 0x5584a7b42de0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b42e30 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b42ec0 <col:16, col:69>
|   |   `-TextComment 0x5584a7b42e90 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x5584a7b42f10 <line:4518:3>
|   | `-TextComment 0x5584a7b42ee0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b42f30 <col:4, line:4520:1> Name="return"
|     `-ParagraphComment 0x5584a7b43030 <line:4518:11, line:4520:1>
|       |-TextComment 0x5584a7b42f60 <line:4518:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b42f80 <line:4519:3> Text=" "
|       |-InlineCommandComment 0x5584a7b42fd0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5584a7b42ff0 <line:4520:1> Text=" "
|-FunctionDecl 0x5584a7ab1ad0 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x5584a7ab19c8 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x5584a7b434f0 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x5584a7b43130 <line:4524:3>
|   | `-TextComment 0x5584a7b43100 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b43150 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5584a7b431b0 <col:10, col:51>
|   |   `-TextComment 0x5584a7b43180 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x5584a7b43220 <line:4526:3, line:4527:14>
|   | |-TextComment 0x5584a7b431d0 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5584a7b431f0 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x5584a7b43270 <line:4529:3>
|   | `-TextComment 0x5584a7b43240 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b43290 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b43320 <col:13, col:37>
|   |   `-TextComment 0x5584a7b432f0 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x5584a7b43370 <line:4531:3>
|   | `-TextComment 0x5584a7b43340 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b43390 <col:4, line:4533:1> Name="return"
|     `-ParagraphComment 0x5584a7b43490 <line:4531:11, line:4533:1>
|       |-TextComment 0x5584a7b433c0 <line:4531:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b433e0 <line:4532:3> Text=" "
|       |-InlineCommandComment 0x5584a7b43430 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5584a7b43450 <line:4533:1> Text=" "
|-FunctionDecl 0x5584a7ab1d28 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x5584a7ab1c18 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x5584a7b43950 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x5584a7b43590 <line:4547:3>
|   | `-TextComment 0x5584a7b43560 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b435b0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5584a7b43610 <col:10, col:36>
|   |   `-TextComment 0x5584a7b435e0 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x5584a7b43680 <line:4549:3, line:4550:39>
|   | |-TextComment 0x5584a7b43630 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x5584a7b43650 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x5584a7b436d0 <line:4552:3>
|   | `-TextComment 0x5584a7b436a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b436f0 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b43780 <col:15, col:53>
|   |   `-TextComment 0x5584a7b43750 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x5584a7b437d0 <line:4554:3>
|   | `-TextComment 0x5584a7b437a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b437f0 <col:4, line:4556:1> Name="return"
|     `-ParagraphComment 0x5584a7b438f0 <line:4554:11, line:4556:1>
|       |-TextComment 0x5584a7b43820 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|       |-TextComment 0x5584a7b43840 <line:4555:3> Text=" "
|       |-InlineCommandComment 0x5584a7b43890 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-HEAP-001"
|       `-TextComment 0x5584a7b438b0 <line:4556:1> Text=" "
|-FunctionDecl 0x5584a7ab1ea0 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x5584a7ab1e10 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x5584a7b43ec0 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x5584a7b439f0 <line:4560:3>
|   | `-TextComment 0x5584a7b439c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b43a20 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7b43a80 <col:10, col:42>
|   |   `-TextComment 0x5584a7b43a50 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x5584a7b43b20 <line:4562:3, line:4564:23>
|   | |-TextComment 0x5584a7b43aa0 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x5584a7b43ac0 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x5584a7b43ae0 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x5584a7b43bf0 <line:4566:3, col:48>
|   | |-TextComment 0x5584a7b43b40 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5584a7b43b90 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x5584a7b43bb0 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x5584a7b43c40 <line:4568:3>
|   | `-TextComment 0x5584a7b43c10 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b43c60 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b43cf0 <col:14, col:53>
|   |   `-TextComment 0x5584a7b43cc0 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x5584a7b43d40 <line:4570:3>
|   | `-TextComment 0x5584a7b43d10 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b43d60 <col:4, line:4572:1> Name="return"
|     `-ParagraphComment 0x5584a7b43e60 <line:4570:11, line:4572:1>
|       |-TextComment 0x5584a7b43d90 <line:4570:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b43db0 <line:4571:3> Text=" "
|       |-InlineCommandComment 0x5584a7b43e00 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-HEAP-001"
|       `-TextComment 0x5584a7b43e20 <line:4572:1> Text=" "
|-FunctionDecl 0x5584a7ab2128 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x5584a7ab1f88 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7ab2000 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x5584a7b443f0 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x5584a7b43f60 <line:4576:3>
|   | `-TextComment 0x5584a7b43f30 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b43f80 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5584a7b43fe0 <col:10, col:48>
|   |   `-TextComment 0x5584a7b43fb0 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x5584a7b44050 <line:4578:3, line:4579:50>
|   | |-TextComment 0x5584a7b44000 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x5584a7b44020 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x5584a7b440a0 <line:4581:3>
|   | `-TextComment 0x5584a7b44070 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b440c0 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b44170 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x5584a7b44120 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x5584a7b44140 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x5584a7b44190 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b44220 <col:15, col:53>
|   |   `-TextComment 0x5584a7b441f0 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x5584a7b44270 <line:4584:3>
|   | `-TextComment 0x5584a7b44240 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b44290 <col:4, line:4586:1> Name="return"
|     `-ParagraphComment 0x5584a7b44390 <line:4584:11, line:4586:1>
|       |-TextComment 0x5584a7b442c0 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|       |-TextComment 0x5584a7b442e0 <line:4585:3> Text=" "
|       |-InlineCommandComment 0x5584a7b44330 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-HEAP-001"
|       `-TextComment 0x5584a7b44350 <line:4586:1> Text=" "
|-EnumDecl 0x5584a7ab2208 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x5584a7ab22d8 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x5584a7ab2328 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x5584a7ab2378 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x5584a7ab23c8 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x5584a7ab2418 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x5584a7ab3870 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x5584a7ab3938 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x5584a7ab3988 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x5584a7ab39d8 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x5584a7ab3a28 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x5584a7ab3a78 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x5584a7ab3ac8 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x5584a7ab3b48 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x5584a7ab3c50 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-ConstantExpr 0x5584a7ab3c38 <col:28> 'int'
| |   `-IntegerLiteral 0x5584a7ab3c18 <col:28> 'int' 0
| `-EnumConstantDecl 0x5584a7ab3ca0 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x5584a7ab3cf0 prev 0x5584a7a68188 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x5584a7ab3da8 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x5584a7b444c0 <line:4684:5, col:28>
| |   `-ParagraphComment 0x5584a7b44490 <col:5, col:28>
| |     `-TextComment 0x5584a7b44460 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x5584a7ab3e40 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x5584a7b445b0 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x5584a7b44580 <line:4688:4, line:4689:24>
| |     |-TextComment 0x5584a7b44530 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x5584a7b44550 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x5584a7ab3ed0 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x5584a7b44680 <line:4693:5, col:67>
|     `-ParagraphComment 0x5584a7b44650 <col:5, col:67>
|       `-TextComment 0x5584a7b44620 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x5584a7ab3f48 prev 0x5584a7a680d8 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x5584a7b44830 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x5584a7b44720 <line:4704:3>
| | | `-TextComment 0x5584a7b446f0 <col:3> Text=" "
| | |-BlockCommandComment 0x5584a7b44740 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x5584a7b447a0 <col:10, col:20>
| | |   `-TextComment 0x5584a7b44770 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x5584a7b447f0 <line:4706:1>
| |   `-TextComment 0x5584a7b447c0 <col:1> Text=" "
| |-FieldDecl 0x5584a7ab4008 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x5584a7b44900 <line:4708:5, col:28>
| |   `-ParagraphComment 0x5584a7b448d0 <col:5, col:28>
| |     `-TextComment 0x5584a7b448a0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x5584a7ab4118 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x5584a7b449d0 <line:4711:5, col:28>
| |   `-ParagraphComment 0x5584a7b449a0 <col:5, col:28>
| |     `-TextComment 0x5584a7b44970 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x5584a7ab41e0 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5584a7ab41c8 <col:12> 'int'
| | | `-IntegerLiteral 0x5584a7ab4198 <col:12> 'int' 8
| | `-FullComment 0x5584a7b44aa0 <line:4714:5, col:63>
| |   `-ParagraphComment 0x5584a7b44a70 <col:5, col:63>
| |     `-TextComment 0x5584a7b44a40 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x5584a7ab42a0 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5584a7ab4288 <col:13> 'int'
| | | `-DeclRefExpr 0x5584a7ab4258 <col:13> 'int' EnumConstant 0x5584a7ab2418 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x5584a7b44b70 <line:4717:5, col:67>
| |   `-ParagraphComment 0x5584a7b44b40 <col:5, col:67>
| |     `-TextComment 0x5584a7b44b10 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x5584a7ab4360 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5584a7ab4348 <col:14> 'int'
| | | `-DeclRefExpr 0x5584a7ab4318 <col:14> 'int' EnumConstant 0x5584a7ab3ac8 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x5584a7b44c40 <line:4720:5, col:69>
| |   `-ParagraphComment 0x5584a7b44c10 <col:5, col:69>
| |     `-TextComment 0x5584a7b44be0 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x5584a7ab4420 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5584a7ab4408 <col:13> 'int'
| | | `-IntegerLiteral 0x5584a7ab43d8 <col:13> 'int' 1
| | `-FullComment 0x5584a7b44d10 <line:4723:5, col:47>
| |   `-ParagraphComment 0x5584a7b44ce0 <col:5, col:47>
| |     `-TextComment 0x5584a7b44cb0 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x5584a7ab4660 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5584a7ab4648 <line:4641:2, line:4646:9> 'int'
| | | `-ParenExpr 0x5584a7ab4618 <line:4641:2, line:4646:9> 'int'
| | |   `-BinaryOperator 0x5584a7ab45f8 <line:4641:3, line:4646:8> 'int' '-'
| | |     |-IntegerLiteral 0x5584a7ab4498 <line:4641:3> 'int' 32
| | |     `-ParenExpr 0x5584a7ab45d8 <col:8, line:4646:8> 'int'
| | |       `-BinaryOperator 0x5584a7ab45b8 <line:4641:9, line:4645:11> 'int' '+'
| | |         |-BinaryOperator 0x5584a7ab4578 <line:4641:9, line:4644:11> 'int' '+'
| | |         | |-BinaryOperator 0x5584a7ab4538 <line:4641:9, line:4643:11> 'int' '+'
| | |         | | |-BinaryOperator 0x5584a7ab44f8 <line:4641:9, line:4642:11> 'int' '+'
| | |         | | | |-IntegerLiteral 0x5584a7ab44b8 <line:4641:9> 'int' 0
| | |         | | | `-IntegerLiteral 0x5584a7ab44d8 <line:4642:11> 'int' 8
| | |         | | `-DeclRefExpr 0x5584a7ab4518 <line:4643:11> 'int' EnumConstant 0x5584a7ab2418 '_POLL_NUM_TYPES' 'int'
| | |         | `-DeclRefExpr 0x5584a7ab4558 <line:4644:11> 'int' EnumConstant 0x5584a7ab3ac8 '_POLL_NUM_STATES' 'int'
| | |         `-IntegerLiteral 0x5584a7ab4598 <line:4645:11> 'int' 1
| | `-FullComment 0x5584a7b44de0 <line:4726:5, col:32>
| |   `-ParagraphComment 0x5584a7b44db0 <col:5, col:32>
| |     `-TextComment 0x5584a7b44d80 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x5584a7ab46d8 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x5584a7b44eb0 <line:4729:5, col:19>
| | | `-ParagraphComment 0x5584a7b44e80 <col:5, col:19>
| | |   `-TextComment 0x5584a7b44e50 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x5584a7ab47a0 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x5584a7ab72c8 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x5584a7ab7340 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x5584a7ab7458 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x5584a7ab74d0 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x5584a7ab7580 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x5584a7ab75e0 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x5584a7ab7580 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5584a7ab47a0 'obj' 'void *'
| |-IndirectFieldDecl 0x5584a7ab7638 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x5584a7ab7580 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5584a7ab72c8 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x5584a7ab7690 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x5584a7ab7580 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5584a7ab7340 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x5584a7ab76e8 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x5584a7ab7580 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5584a7ab7458 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x5584a7ab7740 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x5584a7ab7580 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x5584a7ab74d0 'queue' 'struct k_queue *'
|-FunctionDecl 0x5584a7ab7aa0 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x5584a7ab77e0 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x5584a7ab7858 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5584a7ab78d8 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x5584a7ab7958 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x5584a7b45610 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x5584a7b44f50 <line:4761:3>
|   | `-TextComment 0x5584a7b44f20 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b44f70 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5584a7b44fd0 <col:10, col:53>
|   |   `-TextComment 0x5584a7b44fa0 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x5584a7b45040 <line:4763:3, line:4764:53>
|   | |-TextComment 0x5584a7b44ff0 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x5584a7b45010 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x5584a7b45090 <line:4766:3>
|   | `-TextComment 0x5584a7b45060 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b450b0 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b45160 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x5584a7b45110 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x5584a7b45130 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x5584a7b45180 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b452b0 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x5584a7b451e0 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x5584a7b45200 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x5584a7b45220 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x5584a7b45240 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x5584a7b45260 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x5584a7b452d0 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b45380 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x5584a7b45330 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x5584a7b45350 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x5584a7b453a0 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x5584a7b45430 <col:14, col:43>
|   |   `-TextComment 0x5584a7b45400 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x5584a7b45480 <line:4774:3>
|   | `-TextComment 0x5584a7b45450 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b454a0 <col:4, line:4776:1> Name="return"
|     `-ParagraphComment 0x5584a7b455a0 <line:4774:11, line:4776:1>
|       |-TextComment 0x5584a7b454d0 <line:4774:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b454f0 <line:4775:3> Text=" "
|       |-InlineCommandComment 0x5584a7b45540 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5584a7b45560 <line:4776:1> Text=" "
|-FunctionDecl 0x5584a7ab7de8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5584a7ab7bb0 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5584a7ab7c30 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x5584a7ab7ca8 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x5584a7b46320 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x5584a7b456b0 <line:4782:3>
|   | `-TextComment 0x5584a7b45680 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b456d0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5584a7b45730 <col:10, col:63>
|   |   `-TextComment 0x5584a7b45700 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x5584a7b457d0 <line:4784:3, line:4786:61>
|   | |-TextComment 0x5584a7b45750 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x5584a7b45770 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x5584a7b45790 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x5584a7b45960 <line:4788:3, line:4796:68>
|   | |-TextComment 0x5584a7b457f0 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x5584a7b45810 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x5584a7b45830 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x5584a7b45850 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x5584a7b45870 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x5584a7b45890 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x5584a7b458b0 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x5584a7b458d0 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x5584a7b458f0 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x5584a7b45a00 <line:4798:3, line:4800:44>
|   | |-TextComment 0x5584a7b45980 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x5584a7b459a0 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x5584a7b459c0 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x5584a7b45a80 <line:4802:3, line:4803:41>
|   | |-TextComment 0x5584a7b45a30 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x5584a7b45a50 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x5584a7b45af0 <line:4805:3, line:4806:30>
|   | |-TextComment 0x5584a7b45aa0 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x5584a7b45ac0 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x5584a7b45b40 <line:4808:3>
|   | `-TextComment 0x5584a7b45b10 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b45b60 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b45c10 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x5584a7b45bc0 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x5584a7b45be0 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x5584a7b45c30 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b45ce0 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x5584a7b45c90 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5584a7b45cb0 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x5584a7b45d00 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5584a7b45de0 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x5584a7b45d60 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x5584a7b45d80 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5584a7b45da0 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5584a7b45e30 <line:4814:3>
|   | `-TextComment 0x5584a7b45e00 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b45e50 <col:4, line:4815:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b45ed0 <line:4814:11, line:4815:3>
|   |   |-TextComment 0x5584a7b45e80 <line:4814:11, col:42> Text=" 0 One or more events are ready."
|   |   `-TextComment 0x5584a7b45ea0 <line:4815:3> Text=" "
|   |-BlockCommandComment 0x5584a7b45ef0 <col:4, line:4816:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b45f70 <line:4815:11, line:4816:3>
|   |   |-TextComment 0x5584a7b45f20 <line:4815:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   |   `-TextComment 0x5584a7b45f40 <line:4816:3> Text=" "
|   |-BlockCommandComment 0x5584a7b45f90 <col:4, line:4821:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b460b0 <line:4816:11, line:4821:3>
|   |   |-TextComment 0x5584a7b45fc0 <line:4816:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   |   |-TextComment 0x5584a7b45fe0 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   |   |-TextComment 0x5584a7b46000 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   |   |-TextComment 0x5584a7b46020 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   |   |-TextComment 0x5584a7b46040 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   |   `-TextComment 0x5584a7b46060 <line:4821:3> Text=" "
|   |-BlockCommandComment 0x5584a7b460d0 <col:4, line:4822:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b46150 <line:4821:11, line:4822:3>
|   |   |-TextComment 0x5584a7b46100 <line:4821:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   |   `-TextComment 0x5584a7b46120 <line:4822:3> Text=" "
|   `-BlockCommandComment 0x5584a7b46170 <col:4, line:4824:1> Name="retval"
|     `-ParagraphComment 0x5584a7b46270 <line:4822:11, line:4824:1>
|       |-TextComment 0x5584a7b461a0 <line:4822:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|       |-TextComment 0x5584a7b461c0 <line:4823:3> Text=" "
|       |-InlineCommandComment 0x5584a7b46210 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5584a7b46230 <line:4824:1> Text=" "
|-FunctionDecl 0x5584a7ab8000 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5584a7ab7ef0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x5584a7b46760 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x5584a7b463c0 <line:4830:3>
|   | `-TextComment 0x5584a7b46390 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b463e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5584a7b46440 <col:10, col:42>
|   |   `-TextComment 0x5584a7b46410 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x5584a7b46490 <line:4832:3, col:71>
|   | `-TextComment 0x5584a7b46460 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x5584a7b464e0 <line:4834:3>
|   | `-TextComment 0x5584a7b464b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b46500 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b46590 <col:17, col:31>
|   |   `-TextComment 0x5584a7b46560 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x5584a7b465e0 <line:4836:3>
|   | `-TextComment 0x5584a7b465b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b46600 <col:4, line:4838:1> Name="return"
|     `-ParagraphComment 0x5584a7b46700 <line:4836:11, line:4838:1>
|       |-TextComment 0x5584a7b46630 <line:4836:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b46650 <line:4837:3> Text=" "
|       |-InlineCommandComment 0x5584a7b466a0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5584a7b466c0 <line:4838:1> Text=" "
|-FunctionDecl 0x5584a7ab8160 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x5584a7ab80d0 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x5584a7ab8a70 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5584a7ab89e0 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5584a7ab8be8 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x5584a7ab8ba0 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x5584a7ab8b50 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x5584a7ab3e40
|     | `-ImplicitCastExpr 0x5584a7ab8b38 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5584a7ab8b18 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x5584a7ab89e0 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x5584a7ab8b80 <col:21> 'unsigned int' 0
|-FunctionDecl 0x5584a7ab8e60 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x5584a7ab8c28 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5584a7ab8ca8 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x5584a7ab8d28 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x5584a7b46c90 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x5584a7b46800 <line:4856:3>
|   | `-TextComment 0x5584a7b467d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b46820 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5584a7b46880 <col:10, col:68>
|   |   `-TextComment 0x5584a7b46850 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x5584a7b468d0 <line:4858:3>
|   | `-TextComment 0x5584a7b468a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b468f0 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b469a0 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x5584a7b46950 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x5584a7b46970 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x5584a7b469c0 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b46aa0 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x5584a7b46a20 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x5584a7b46a40 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x5584a7b46a60 <line:4861:3> Text=" "
|   `-ParamCommandComment 0x5584a7b46ac0 <col:4, line:4865:1> [in] implicitly Param="result" ParamIndex=2
|     `-ParagraphComment 0x5584a7b46c40 <line:4861:17, line:4865:1>
|       |-TextComment 0x5584a7b46b20 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|       |-TextComment 0x5584a7b46b40 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|       |-TextComment 0x5584a7b46b60 <line:4863:3, col:27> Text="		   value if it was not."
|       |-TextComment 0x5584a7b46b80 <line:4864:3> Text=" "
|       |-InlineCommandComment 0x5584a7b46bd0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5584a7b46bf0 <line:4865:1> Text=" "
|-FunctionDecl 0x5584a7ab9118 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x5584a7ab8f70 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5584a7ab8ff0 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x5584a7b47540 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x5584a7b46d30 <line:4870:3>
|   | `-TextComment 0x5584a7b46d00 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b46d50 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5584a7b46db0 <col:10, col:38>
|   |   `-TextComment 0x5584a7b46d80 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x5584a7b46ed0 <line:4872:3, line:4874:57>
|   | |-TextComment 0x5584a7b46dd0 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x5584a7b46df0 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x5584a7b46e10 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x5584a7b46e60 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x5584a7b46e80 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x5584a7b46fc0 <line:4876:3, line:4880:27>
|   | |-TextComment 0x5584a7b46ef0 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x5584a7b46f10 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x5584a7b46f30 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x5584a7b46f50 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x5584a7b46f70 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x5584a7b47010 <line:4882:3>
|   | `-TextComment 0x5584a7b46fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b47030 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x5584a7b470e0 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x5584a7b47060 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x5584a7b47080 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x5584a7b470a0 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x5584a7b47130 <line:4886:3>
|   | `-TextComment 0x5584a7b47100 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b47150 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b47200 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x5584a7b471b0 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x5584a7b471d0 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x5584a7b47220 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b472b0 <col:17, col:70>
|   |   `-TextComment 0x5584a7b47280 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x5584a7b47300 <line:4889:3>
|   | `-TextComment 0x5584a7b472d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b47320 <col:4, line:4890:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b473a0 <line:4889:11, line:4890:3>
|   |   |-TextComment 0x5584a7b47350 <line:4889:11, col:51> Text=" 0 The signal was delivered successfully."
|   |   `-TextComment 0x5584a7b47370 <line:4890:3> Text=" "
|   `-BlockCommandComment 0x5584a7b473c0 <col:4, line:4892:1> Name="retval"
|     `-ParagraphComment 0x5584a7b474c0 <line:4890:11, line:4892:1>
|       |-TextComment 0x5584a7b473f0 <line:4890:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|       |-TextComment 0x5584a7b47410 <line:4891:3> Text=" "
|       |-InlineCommandComment 0x5584a7b47460 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5584a7b47480 <line:4892:1> Text=" "
|-FunctionDecl 0x5584a7ab93a0 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x5584a7ab9208 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x5584a7ab9280 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x5584a7b47630 <line:4897:3, col:12>
|   `-ParagraphComment 0x5584a7b47600 <col:3, col:12>
|     |-TextComment 0x5584a7b475b0 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b475d0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7ab9540 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x5584a7ab9668 <line:4922:1, line:4924:1>
| | `-CallExpr 0x5584a7ab9618 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x5584a7ab9600 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x5584a7ab95e0 <col:2> 'void (void)' Function 0x5584a7a25fc0 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x5584a7b47c30 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x5584a7b476d0 <line:4904:3>
|   | `-TextComment 0x5584a7b476a0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5584a7b476f0 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x5584a7b47760 <line:4905:3>
|   | `-TextComment 0x5584a7b47730 <col:3> Text=" "
|   |-VerbatimLineComment 0x5584a7b47780 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x5584a7b47840 <line:4906:3, col:5>
|   | |-TextComment 0x5584a7b477c0 <col:3> Text=" "
|   | |-TextComment 0x5584a7b477e0 <col:4> Text="@"
|   | `-TextComment 0x5584a7b47800 <col:5> Text="{"
|   |-ParagraphComment 0x5584a7b47890 <line:4909:3>
|   | `-TextComment 0x5584a7b47860 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b478b0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5584a7b47910 <col:10, col:28>
|   |   `-TextComment 0x5584a7b478e0 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x5584a7b47960 <line:4911:3, col:63>
|   | `-TextComment 0x5584a7b47930 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x5584a7b47a40 <line:4913:3, line:4916:59>
|   | |-TextComment 0x5584a7b47980 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x5584a7b479a0 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x5584a7b479c0 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x5584a7b479e0 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x5584a7b47a90 <line:4918:3>
|   | `-TextComment 0x5584a7b47a60 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b47ab0 <col:4, line:4920:1> Name="return"
|     `-ParagraphComment 0x5584a7b47bb0 <line:4918:11, line:4920:1>
|       |-TextComment 0x5584a7b47ae0 <line:4918:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b47b00 <line:4919:3> Text=" "
|       |-InlineCommandComment 0x5584a7b47b50 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-CPU-IDLE-001"
|       `-TextComment 0x5584a7b47b70 <line:4920:1> Text=" "
|-FunctionDecl 0x5584a7ab9728 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x5584a7ab9698 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x5584a7ab98c8 <line:4938:1, line:4940:1>
| | `-CallExpr 0x5584a7ab9828 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x5584a7ab9810 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5584a7ab97d0 <col:2> 'void (unsigned int)' Function 0x5584a7a26170 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x5584a7ab9850 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x5584a7ab97f0 <col:23> 'unsigned int' lvalue ParmVar 0x5584a7ab9698 'key' 'unsigned int'
| `-FullComment 0x5584a7b48090 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x5584a7b47cd0 <line:4927:3>
|   | `-TextComment 0x5584a7b47ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b47cf0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b47d50 <col:10, col:49>
|   |   `-TextComment 0x5584a7b47d20 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x5584a7b47dc0 <line:4929:3, line:4930:54>
|   | |-TextComment 0x5584a7b47d70 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x5584a7b47d90 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x5584a7b47e10 <line:4932:3>
|   | `-TextComment 0x5584a7b47de0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b47e30 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b47ec0 <col:14, col:61>
|   |   `-TextComment 0x5584a7b47e90 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x5584a7b47f10 <line:4934:3>
|   | `-TextComment 0x5584a7b47ee0 <col:3> Text=" "
|   `-BlockCommandComment 0x5584a7b47f30 <col:4, line:4936:1> Name="return"
|     `-ParagraphComment 0x5584a7b48030 <line:4934:11, line:4936:1>
|       |-TextComment 0x5584a7b47f60 <line:4934:11, col:14> Text=" N/A"
|       |-TextComment 0x5584a7b47f80 <line:4935:3> Text=" "
|       |-InlineCommandComment 0x5584a7b47fd0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-CPU-IDLE-002"
|       `-TextComment 0x5584a7b47ff0 <line:4936:1> Text=" "
|-FunctionDecl 0x5584a7aba088 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x5584a7ab98f0 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x5584a7b48180 <line:4947:3, col:12>
|   `-ParagraphComment 0x5584a7b48150 <col:3, col:12>
|     |-TextComment 0x5584a7b48100 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b48120 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7aba510 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x5584a7aba248 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x5584a7aba2c8 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x5584a7aba340 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5584a7aba3c0 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x5584a7b48270 <line:5006:3, col:12>
|   `-ParagraphComment 0x5584a7b48240 <col:3, col:12>
|     |-TextComment 0x5584a7b481f0 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b48210 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7aba6c0 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x5584a7b48360 <line:5025:3, col:12>
|   `-ParagraphComment 0x5584a7b48330 <col:3, col:12>
|     |-TextComment 0x5584a7b482e0 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b48300 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7aba840 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x5584a7aba7b0 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x5584a7b48450 <line:5029:3, col:12>
|   `-ParagraphComment 0x5584a7b48420 <col:3, col:12>
|     |-TextComment 0x5584a7b483d0 <col:3> Text=" "
|     `-InlineCommandComment 0x5584a7b483f0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5584a7abab88 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x5584a7abaa78 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x5584a7abad18 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x5584a7abaca8 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x5584a7abac80 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x5584a7abac68 <col:17> 'k_thread_stack_t *' <LValueToRValue> part_of_explicit_cast
| |       `-DeclRefExpr 0x5584a7abac30 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x5584a7abaa78 'sym' 'k_thread_stack_t *'
| `-FullComment 0x5584a7b48870 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x5584a7b484f0 <line:5168:3>
|   | `-TextComment 0x5584a7b484c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b48510 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5584a7b48570 <col:10, col:52>
|   |   `-TextComment 0x5584a7b48540 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x5584a7b485e0 <line:5170:3, line:5171:76>
|   | |-TextComment 0x5584a7b48590 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x5584a7b485b0 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x5584a7b48630 <line:5173:3>
|   | `-TextComment 0x5584a7b48600 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b48650 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b48700 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x5584a7b486b0 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x5584a7b486d0 <line:5174:3> Text=" "
|   `-BlockCommandComment 0x5584a7b48720 <col:4, line:5176:1> Name="return"
|     `-ParagraphComment 0x5584a7b48820 <line:5174:11, line:5176:1>
|       |-TextComment 0x5584a7b48750 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|       |-TextComment 0x5584a7b48770 <line:5175:3> Text=" "
|       |-InlineCommandComment 0x5584a7b487c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-TSTACK-001"
|       `-TextComment 0x5584a7b487e0 <line:5176:1> Text=" "
|-RecordDecl 0x5584a7abad30 prev 0x5584a7a682b8 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x5584a7abade8 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x5584a7b48940 <line:5208:5, col:39>
| |   `-ParagraphComment 0x5584a7b48910 <col:5, col:39>
| |     `-TextComment 0x5584a7b488e0 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x5584a7abae78 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x5584a7b48a10 <line:5210:5, col:30>
|     `-ParagraphComment 0x5584a7b489e0 <col:5, col:30>
|       `-TextComment 0x5584a7b489b0 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x5584a7abaef8 prev 0x5584a7a68238 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x5584a7b48bc0 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x5584a7b48ab0 <line:5219:3>
| | | `-TextComment 0x5584a7b48a80 <col:3> Text=" "
| | |-BlockCommandComment 0x5584a7b48ad0 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x5584a7b48b30 <col:10, col:23>
| | |   `-TextComment 0x5584a7b48b00 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x5584a7b48b80 <line:5221:1>
| |   `-TextComment 0x5584a7b48b50 <col:1> Text=" "
| |-FieldDecl 0x5584a7abafb8 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x5584a7b48c90 <line:5227:5, col:14>
| |   `-ParagraphComment 0x5584a7b48c60 <col:5, col:14>
| |     `-TextComment 0x5584a7b48c30 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x5584a7abcf90 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x5584a7b48d60 <line:5229:5, col:40>
|     `-ParagraphComment 0x5584a7b48d30 <col:5, col:40>
|       `-TextComment 0x5584a7b48d00 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x5584a7abd4d0 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x5584a7abd0d8 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5584a7abd150 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5584a7abd398 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x5584a7b49310 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x5584a7b48e00 <line:5235:3>
|   | `-TextComment 0x5584a7b48dd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b48e20 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5584a7b48e80 <col:10, col:37>
|   |   `-TextComment 0x5584a7b48e50 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x5584a7b48ed0 <line:5237:3, col:68>
|   | `-TextComment 0x5584a7b48ea0 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x5584a7b48f40 <line:5239:3, line:5240:25>
|   | |-TextComment 0x5584a7b48ef0 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x5584a7b48f10 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x5584a7b48f90 <line:5242:3>
|   | `-TextComment 0x5584a7b48f60 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b48fb0 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b49060 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x5584a7b49010 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x5584a7b49030 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x5584a7b49080 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b49130 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x5584a7b490e0 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x5584a7b49100 <line:5244:3> Text=" "
|   `-ParamCommandComment 0x5584a7b49150 <col:4, line:5247:1> [in] implicitly Param="parts" ParamIndex=2
|     `-ParagraphComment 0x5584a7b492b0 <line:5244:16, line:5247:1>
|       |-TextComment 0x5584a7b491b0 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|       |-TextComment 0x5584a7b491d0 <line:5245:3, col:37> Text="              if num_parts is zero."
|       |-TextComment 0x5584a7b491f0 <line:5246:3> Text=" "
|       |-InlineCommandComment 0x5584a7b49240 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5584a7b49260 <line:5247:1> Text=" "
|-FunctionDecl 0x5584a7abd6f0 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x5584a7abd5e0 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x5584a7b49670 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x5584a7b493b0 <line:5251:3>
|   | `-TextComment 0x5584a7b49380 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b493d0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5584a7b49430 <col:10, col:34>
|   |   `-TextComment 0x5584a7b49400 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x5584a7b49480 <line:5253:3, col:27>
|   | `-TextComment 0x5584a7b49450 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x5584a7b494d0 <line:5255:3>
|   | `-TextComment 0x5584a7b494a0 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7b494f0 <col:4, line:5257:1> [in] implicitly Param="domain" ParamIndex=0
|     `-ParagraphComment 0x5584a7b49620 <line:5255:17, line:5257:1>
|       |-TextComment 0x5584a7b49550 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|       |-TextComment 0x5584a7b49570 <line:5256:3> Text=" "
|       |-InlineCommandComment 0x5584a7b495c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5584a7b495e0 <line:5257:1> Text=" "
|-FunctionDecl 0x5584a7abd9a0 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x5584a7abd7f0 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5584a7abd880 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x5584a7b49d00 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x5584a7b49710 <line:5261:3>
|   | `-TextComment 0x5584a7b496e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b49730 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5584a7b49790 <col:10, col:54>
|   |   `-TextComment 0x5584a7b49760 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x5584a7b49800 <line:5263:3, line:5264:29>
|   | |-TextComment 0x5584a7b497b0 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x5584a7b497d0 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x5584a7b499b0 <line:5266:3, line:5275:28>
|   | |-TextComment 0x5584a7b49820 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x5584a7b49840 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x5584a7b49860 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x5584a7b49880 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x5584a7b498a0 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x5584a7b498c0 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x5584a7b498e0 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x5584a7b49900 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x5584a7b49920 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x5584a7b49940 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x5584a7b49a20 <line:5277:3, line:5278:12>
|   | |-TextComment 0x5584a7b499d0 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x5584a7b499f0 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x5584a7b49a80 <line:5280:3>
|   | `-TextComment 0x5584a7b49a50 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b49aa0 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b49b50 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x5584a7b49b00 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x5584a7b49b20 <line:5281:3> Text=" "
|   `-ParamCommandComment 0x5584a7b49b70 <col:4, line:5283:1> [in] implicitly Param="part" ParamIndex=1
|     `-ParagraphComment 0x5584a7b49ca0 <line:5281:15, line:5283:1>
|       |-TextComment 0x5584a7b49bd0 <line:5281:15, col:47> Text=" The memory partition to be added"
|       |-TextComment 0x5584a7b49bf0 <line:5282:3> Text=" "
|       |-InlineCommandComment 0x5584a7b49c40 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5584a7b49c60 <line:5283:1> Text=" "
|-FunctionDecl 0x5584a7abdbc8 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x5584a7abdaa0 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5584a7abdb30 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x5584a7b4a130 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x5584a7b49da0 <line:5288:3>
|   | `-TextComment 0x5584a7b49d70 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b49dc0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5584a7b49e20 <col:10, col:57>
|   |   `-TextComment 0x5584a7b49df0 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x5584a7b49e70 <line:5290:3, col:50>
|   | `-TextComment 0x5584a7b49e40 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x5584a7b49ec0 <line:5292:3>
|   | `-TextComment 0x5584a7b49e90 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b49ee0 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b49f90 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x5584a7b49f40 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x5584a7b49f60 <line:5293:3> Text=" "
|   `-ParamCommandComment 0x5584a7b49fb0 <col:4, line:5295:1> [in] implicitly Param="part" ParamIndex=1
|     `-ParagraphComment 0x5584a7b4a0e0 <line:5293:15, line:5295:1>
|       |-TextComment 0x5584a7b4a010 <line:5293:15, col:49> Text=" The memory partition to be removed"
|       |-TextComment 0x5584a7b4a030 <line:5294:3> Text=" "
|       |-InlineCommandComment 0x5584a7b4a080 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5584a7b4a0a0 <line:5295:1> Text=" "
|-FunctionDecl 0x5584a7abde60 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x5584a7abdcd0 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5584a7abdd48 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b4a5a0 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x5584a7b4a1d0 <line:5300:3>
|   | `-TextComment 0x5584a7b4a1a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b4a1f0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5584a7b4a250 <col:10, col:44>
|   |   `-TextComment 0x5584a7b4a220 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x5584a7b4a2a0 <line:5302:3, col:37>
|   | `-TextComment 0x5584a7b4a270 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x5584a7b4a2f0 <line:5304:3>
|   | `-TextComment 0x5584a7b4a2c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b4a310 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b4a3c0 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x5584a7b4a370 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x5584a7b4a390 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x5584a7b4a3e0 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x5584a7b4a470 <col:17, col:71>
|   |   `-TextComment 0x5584a7b4a440 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   `-ParagraphComment 0x5584a7b4a540 <line:5307:3, line:5308:1>
|     |-TextComment 0x5584a7b4a490 <line:5307:3> Text=" "
|     |-InlineCommandComment 0x5584a7b4a4e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|     `-TextComment 0x5584a7b4a500 <line:5308:1> Text=" "
|-FunctionDecl 0x5584a7abe1b0 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x5584a7abe120 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5584a7b4a900 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x5584a7b4a640 <line:5313:3>
|   | `-TextComment 0x5584a7b4a610 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b4a660 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5584a7b4a6c0 <col:10, col:49>
|   |   `-TextComment 0x5584a7b4a690 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x5584a7b4a710 <line:5315:3, col:42>
|   | `-TextComment 0x5584a7b4a6e0 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x5584a7b4a760 <line:5317:3>
|   | `-TextComment 0x5584a7b4a730 <col:3> Text=" "
|   `-ParamCommandComment 0x5584a7b4a780 <col:4, line:5319:1> [in] implicitly Param="thread" ParamIndex=0
|     `-ParagraphComment 0x5584a7b4a8b0 <line:5317:17, line:5319:1>
|       |-TextComment 0x5584a7b4a7e0 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|       |-TextComment 0x5584a7b4a800 <line:5318:3> Text=" "
|       |-InlineCommandComment 0x5584a7b4a850 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5584a7b4a870 <line:5319:1> Text=" "
|-FunctionDecl 0x5584a7abe3b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x5584a7abe2e0 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x5584a7b4af80 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x5584a7b4a9a0 <line:5337:3>
|   | `-TextComment 0x5584a7b4a970 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b4a9c0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x5584a7b4aa20 <col:10, col:69>
|   |   `-TextComment 0x5584a7b4a9f0 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x5584a7b4aa90 <line:5339:3, line:5340:56>
|   | |-TextComment 0x5584a7b4aa40 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x5584a7b4aa60 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x5584a7b4aae0 <line:5342:3>
|   | `-TextComment 0x5584a7b4aab0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b4ab00 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x5584a7b4ab80 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x5584a7b4ab30 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x5584a7b4ab50 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x5584a7b4abd0 <line:5346:3>
|   | `-TextComment 0x5584a7b4aba0 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b4abf0 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x5584a7b4ac70 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x5584a7b4ac20 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x5584a7b4ac40 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x5584a7b4acc0 <line:5350:3>
|   | `-TextComment 0x5584a7b4ac90 <col:3> Text=" "
|   |-ParamCommandComment 0x5584a7b4ace0 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5584a7b4ad70 <col:17, col:30>
|   |   `-TextComment 0x5584a7b4ad40 <col:17, col:30> Text=" ID of thread."
|   |-ParagraphComment 0x5584a7b4adc0 <line:5352:3>
|   | `-TextComment 0x5584a7b4ad90 <col:3> Text=" "
|   |-BlockCommandComment 0x5584a7b4ade0 <col:4, line:5353:3> Name="retval"
|   | `-ParagraphComment 0x5584a7b4ae60 <line:5352:11, line:5353:3>
|   |   |-TextComment 0x5584a7b4ae10 <line:5352:11, col:30> Text=" 0       On success."
|   |   `-TextComment 0x5584a7b4ae30 <line:5353:3> Text=" "
|   `-BlockCommandComment 0x5584a7b4ae80 <col:4, line:5354:74> Name="retval"
|     `-ParagraphComment 0x5584a7b4af00 <line:5353:11, line:5354:74>
|       |-TextComment 0x5584a7b4aeb0 <line:5353:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|       `-TextComment 0x5584a7b4aed0 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x5584a7abe928 prev 0x5584a7a6f320 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x5584a7abe800 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x5584a7abe890 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x5584a7abeb18 prev 0x5584a7a69438 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5584a7abe9f0 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x5584a7abea80 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x5584a7abedf8 <line:26:1, line:35:1>
|   |-DoStmt 0x5584a7abec98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7abec60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7abec00 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7abec78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7abed98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x5584a7abed80 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7abecb8 <col:2> 'void (void *, struct k_thread *)' Function 0x5584a7abe928 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x5584a7abedc8 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7abecd8 <col:31> 'void *' lvalue ParmVar 0x5584a7abe9f0 'object' 'void *'
|     `-ImplicitCastExpr 0x5584a7abede0 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7abecf8 <col:39> 'struct k_thread *' lvalue ParmVar 0x5584a7abea80 'thread' 'struct k_thread *'
|-FunctionDecl 0x5584a7abeec0 prev 0x5584a7a6f9c0 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x5584a7abee30 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x5584a7abf010 prev 0x5584a7a697e0 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5584a7abef80 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x5584a7ac5200 <line:40:1, line:49:1>
|   |-DoStmt 0x5584a7ac5148 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac5110 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac50b0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac5128 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ac51c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x5584a7ac51a8 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ac5168 <col:2> 'void (void *)' Function 0x5584a7abeec0 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x5584a7ac51e8 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ac5188 <col:26> 'void *' lvalue ParmVar 0x5584a7abef80 'object' 'void *'
|-FunctionDecl 0x5584a7ac52d8 prev 0x5584a7a69d08 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x5584a7ac5240 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x5584a7ac5438 prev 0x5584a7a69ba8 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5584a7ac53a0 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x5584a7ac56d8 <line:54:1, line:62:1>
|   |-DoStmt 0x5584a7ac55b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac5578 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac5518 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac5590 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ac56c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x5584a7ac5688 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x5584a7ac5670 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ac55d0 <col:9> 'void *(enum k_objects)' Function 0x5584a7ac52d8 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x5584a7ac56b0 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ac55f0 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x5584a7ac53a0 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x5584a7ac5c50 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x5584a7ac5720 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5584a7ac5798 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5584a7ac5810 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7ac5888 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5584a7ac5908 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x5584a7ac5988 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x5584a7ac5a08 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x5584a7ac5a88 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x5584a7ac5b00 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x5584a7ac5b78 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x5584a7ac6308 prev 0x5584a7a73730 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x5584a7ac5d68 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5584a7ac5de0 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5584a7ac5e58 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7ac5ed0 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5584a7ac5f50 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x5584a7ac5fd0 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x5584a7ac60c0 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x5584a7ac6140 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x5584a7ac61b8 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5584a7ac6230 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x5584a7ac6838 <line:67:1, line:82:1>
|   |-DoStmt 0x5584a7ac64c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac6490 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac6430 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac64a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ac6828 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x5584a7ac66c8 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x5584a7ac66b0 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ac64e8 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x5584a7ac5c50 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x5584a7ac6738 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ac6508 <col:32> 'struct k_thread *' lvalue ParmVar 0x5584a7ac5d68 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x5584a7ac6750 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ac6528 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x5584a7ac5de0 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x5584a7ac6768 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ac6548 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x5584a7ac5e58 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5584a7ac6780 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ac6568 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x5584a7ac5ed0 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x5584a7ac6798 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ac6588 <col:70> 'void *' lvalue ParmVar 0x5584a7ac5f50 'p1' 'void *'
|       |-ImplicitCastExpr 0x5584a7ac67b0 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ac65a8 <col:74> 'void *' lvalue ParmVar 0x5584a7ac5fd0 'p2' 'void *'
|       |-ImplicitCastExpr 0x5584a7ac67c8 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ac65c8 <col:78> 'void *' lvalue ParmVar 0x5584a7ac60c0 'p3' 'void *'
|       |-ImplicitCastExpr 0x5584a7ac67e0 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ac65e8 <col:82> 'int' lvalue ParmVar 0x5584a7ac6140 'prio' 'int'
|       |-ImplicitCastExpr 0x5584a7ac67f8 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ac6608 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7ac61b8 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5584a7ac6810 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ac6628 <col:97> 's32_t':'int' lvalue ParmVar 0x5584a7ac6230 'delay' 's32_t':'int'
|-FunctionDecl 0x5584a7ac68f8 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x5584a7ac6868 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x5584a7ac6a40 prev 0x5584a7a751a0 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5584a7ac69b0 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x5584a7ac6ce8 <line:87:1, line:95:1>
|   |-DoStmt 0x5584a7ac6bb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac6b80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac6b20 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac6b98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ac6cd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x5584a7ac6c98 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x5584a7ac6c80 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ac6bd8 <col:9> 's32_t (s32_t)' Function 0x5584a7ac68f8 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x5584a7ac6cc0 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ac6bf8 <col:24> 's32_t':'int' lvalue ParmVar 0x5584a7ac69b0 'ms' 's32_t':'int'
|-FunctionDecl 0x5584a7ac6da8 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x5584a7ac6d18 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x5584a7ac6ef0 prev 0x5584a7a75318 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5584a7ac6e60 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x5584a7ac7198 <line:100:1, line:108:1>
|   |-DoStmt 0x5584a7ac7068 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac7030 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac6fd0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac7048 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ac7188 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x5584a7ac7148 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x5584a7ac7130 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ac7088 <col:9> 's32_t (s32_t)' Function 0x5584a7ac6da8 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x5584a7ac7170 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ac7110 <col:25> 's32_t':'int' lvalue ParmVar 0x5584a7ac6e60 'us' 's32_t':'int'
|-FunctionDecl 0x5584a7ac7258 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x5584a7ac71c8 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x5584a7ac73a0 prev 0x5584a7a754c0 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x5584a7ac7310 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x5584a7ac7608 <line:113:1, line:122:1>
|   |-DoStmt 0x5584a7ac7518 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac74e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac7480 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac74f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ac75c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x5584a7ac75b0 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ac7538 <col:2> 'void (u32_t)' Function 0x5584a7ac7258 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x5584a7ac75f0 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ac7558 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7ac7310 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x5584a7ac7648 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x5584a7ac7708 prev 0x5584a7a75630 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x5584a7ac7928 <line:127:1, line:136:1>
|   |-DoStmt 0x5584a7ac7878 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac7840 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac77e0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac7858 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ac7908 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x5584a7ac78f0 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x5584a7ac7898 <col:2> 'void ()' Function 0x5584a7ac7648 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x5584a7ac79e8 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5584a7ac7958 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac7b30 prev 0x5584a7a75810 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7ac7aa0 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5584a7ac7dc8 <line:141:1, line:150:1>
|   |-DoStmt 0x5584a7ac7ca8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac7c70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac7c10 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac7c88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ac7d88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x5584a7ac7d70 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ac7cc8 <col:2> 'void (k_tid_t)' Function 0x5584a7ac79e8 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5584a7ac7db0 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ac7ce8 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7ac7aa0 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac7e70 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x5584a7ac7f30 prev 0x5584a7a759e0 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x5584a7ac8198 <line:155:1, line:163:1>
|   |-DoStmt 0x5584a7ac80a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac8068 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac8008 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac8080 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ac8188 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x5584a7ac8168 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x5584a7ac8150 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5584a7ac80c0 <col:9> 'k_tid_t ()' Function 0x5584a7ac7e70 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x5584a7ac8258 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5584a7ac81c8 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac83a0 prev 0x5584a7a75b48 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7ac8310 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5584a7ac85d0 <line:168:1, line:177:1>
|   |-DoStmt 0x5584a7ac8518 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac84e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac8480 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac84f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ac8590 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x5584a7ac8578 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ac8538 <col:2> 'void (k_tid_t)' Function 0x5584a7ac8258 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5584a7ac85b8 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ac8558 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7ac8310 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac8690 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5584a7ac8600 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac87d8 prev 0x5584a7a75cb8 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7ac8748 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5584a7ac8a08 <line:182:1, line:191:1>
|   |-DoStmt 0x5584a7ac8950 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac8918 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac88b8 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac8930 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ac89c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x5584a7ac89b0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ac8970 <col:2> 'void (k_tid_t)' Function 0x5584a7ac8690 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5584a7ac89f0 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ac8990 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7ac8748 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac8ad0 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x5584a7ac8a38 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac8c20 prev 0x5584a7a76568 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7ac8b88 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5584a7ac8ec8 <line:196:1, line:204:1>
|   |-DoStmt 0x5584a7ac8d98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac8d60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac8d00 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac8d78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ac8eb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x5584a7ac8e78 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x5584a7ac8e60 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ac8db8 <col:9> 'int (k_tid_t)' Function 0x5584a7ac8ad0 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x5584a7ac8ea0 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ac8dd8 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7ac8b88 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac9010 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x5584a7ac8ef8 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x5584a7ac8f78 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x5584a7ac9248 prev 0x5584a7a767e0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5584a7ac9130 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5584a7ac91b0 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x5584a7ac9528 <line:209:1, line:218:1>
|   |-DoStmt 0x5584a7ac93c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac9390 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac9330 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac93a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ac94c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x5584a7ac94b0 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ac93e8 <col:2> 'void (k_tid_t, int)' Function 0x5584a7ac9010 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x5584a7ac94f8 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7ac9408 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7ac9130 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x5584a7ac9510 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ac9428 <col:39> 'int' lvalue ParmVar 0x5584a7ac91b0 'prio' 'int'
|-FunctionDecl 0x5584a7ac9670 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x5584a7ac9558 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x5584a7ac95d8 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x5584a7ac9848 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5584a7ac9730 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5584a7ac97b0 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x5584a7ac9ac0 <line:223:1, line:232:1>
|   |-DoStmt 0x5584a7ac99c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac9990 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac9930 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac99a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ac9a60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x5584a7ac9a48 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ac99e8 <col:2> 'void (k_tid_t, int)' Function 0x5584a7ac9670 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x5584a7ac9a90 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7ac9a08 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7ac9730 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x5584a7ac9aa8 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ac9a28 <col:39> 'int' lvalue ParmVar 0x5584a7ac97b0 'deadline' 'int'
|-FunctionDecl 0x5584a7ac9b80 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5584a7ac9af0 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac9cc8 prev 0x5584a7a76958 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7ac9c38 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5584a7ac9ef8 <line:237:1, line:246:1>
|   |-DoStmt 0x5584a7ac9e40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ac9e08 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ac9da8 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ac9e20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ac9eb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x5584a7ac9ea0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ac9e60 <col:2> 'void (k_tid_t)' Function 0x5584a7ac9b80 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5584a7ac9ee0 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ac9e80 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7ac9c38 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7ac9fb8 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5584a7ac9f28 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7aca140 prev 0x5584a7a76ac8 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5584a7aca070 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5584a7aca370 <line:251:1, line:260:1>
|   |-DoStmt 0x5584a7aca2b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7aca280 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7aca220 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7aca298 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7aca330 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x5584a7aca318 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7aca2d8 <col:2> 'void (k_tid_t)' Function 0x5584a7ac9fb8 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5584a7aca358 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7aca2f8 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7aca070 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5584a7aca3e8 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x5584a7aca4b0 prev 0x5584a7a781e8 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x5584a7aca6d8 <line:265:1, line:273:1>
|   |-DoStmt 0x5584a7aca620 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7aca5e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7aca588 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7aca600 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7aca6c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x5584a7aca6a8 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x5584a7aca690 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5584a7aca640 <col:9> 'int ()' Function 0x5584a7aca3e8 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x5584a7aca7a0 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x5584a7aca710 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x5584a7aca8f0 prev 0x5584a7a78920 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x5584a7aca860 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x5584a7acab20 <line:278:1, line:287:1>
|   |-DoStmt 0x5584a7acaa68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acaa30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7aca9d0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acaa48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7acaae0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x5584a7acaac8 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7acaa88 <col:2> 'void (void *)' Function 0x5584a7aca7a0 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x5584a7acab08 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7acaaa8 <col:34> 'void *' lvalue ParmVar 0x5584a7aca860 'value' 'void *'
|-FunctionDecl 0x5584a7acab98 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x5584a7acac60 prev 0x5584a7a78ac8 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x5584a7acae88 <line:292:1, line:300:1>
|   |-DoStmt 0x5584a7acadd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acad98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acad38 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acadb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7acae78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x5584a7acae58 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x5584a7acae40 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5584a7acadf0 <col:9> 'void *()' Function 0x5584a7acab98 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x5584a7acafd8 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x5584a7acaeb8 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x5584a7acaf38 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x5584a7acb1f0 prev 0x5584a7a78d48 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x5584a7acb098 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5584a7acb150 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x5584a7acb4d8 <line:305:1, line:313:1>
|   |-DoStmt 0x5584a7acb370 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acb338 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acb2d8 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acb350 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7acb4c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x5584a7acb468 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5584a7acb450 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7acb390 <col:9> 'int (k_tid_t, const char *)' Function 0x5584a7acafd8 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x5584a7acb498 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7acb3b0 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7acb098 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x5584a7acb4b0 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7acb3d0 <col:45> 'const char *' lvalue ParmVar 0x5584a7acb150 'value' 'const char *'
|-FunctionDecl 0x5584a7acb6a8 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x5584a7acb508 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5584a7acb588 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x5584a7acb600 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x5584a7acb910 prev 0x5584a7a79ac8 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x5584a7acb770 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5584a7acb7f0 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x5584a7acb868 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x5584a7acbc48 <line:318:1, line:326:1>
|   |-DoStmt 0x5584a7acba98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acba60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acba00 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acba78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7acbc38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x5584a7acbbb8 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x5584a7acbba0 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7acbab8 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x5584a7acb6a8 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x5584a7acbbf0 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7acbad8 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5584a7acb770 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x5584a7acbc08 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7acbaf8 <col:46> 'char *' lvalue ParmVar 0x5584a7acb7f0 'buf' 'char *'
|       `-ImplicitCastExpr 0x5584a7acbc20 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7acbb18 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x5584a7acb868 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x5584a7acbe20 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x5584a7acbc90 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x5584a7acbd08 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x5584a7acbd80 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x5584a7acc090 prev 0x5584a7a7caa0 <line:330:1, line:340:1> line:330:20 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x5584a7acbf00 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5584a7acbf78 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x5584a7acbff0 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x5584a7accbd8 <line:331:1, line:340:1>
|   |-DoStmt 0x5584a7acca40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acca08 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acc9a8 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acca20 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7accb58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x5584a7accb40 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7acca60 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x5584a7acbe20 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x5584a7accb90 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7acca80 <col:23> 'struct k_timer *' lvalue ParmVar 0x5584a7acbf00 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x5584a7accba8 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7accaa0 <col:30> 's32_t':'int' lvalue ParmVar 0x5584a7acbf78 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x5584a7accbc0 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7accac0 <col:40> 's32_t':'int' lvalue ParmVar 0x5584a7acbff0 'period' 's32_t':'int'
|-FunctionDecl 0x5584a7acccb0 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x5584a7accc20 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x5584a7acce10 prev 0x5584a7a7cc40 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7accd80 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x5584a7acd078 <line:345:1, line:354:1>
|   |-DoStmt 0x5584a7accf88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7accf50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7accef0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7accf68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7acd038 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x5584a7acd020 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7accfa8 <col:2> 'void (struct k_timer *)' Function 0x5584a7acccb0 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x5584a7acd060 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7accfc8 <col:22> 'struct k_timer *' lvalue ParmVar 0x5584a7accd80 'timer' 'struct k_timer *'
|-FunctionDecl 0x5584a7acd150 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5584a7acd0c0 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x5584a7acd2b0 prev 0x5584a7a7ce50 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7acd220 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x5584a7acd558 <line:359:1, line:367:1>
|   |-DoStmt 0x5584a7acd428 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acd3f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acd390 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acd408 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7acd548 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x5584a7acd508 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5584a7acd4f0 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7acd448 <col:9> 'u32_t (struct k_timer *)' Function 0x5584a7acd150 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5584a7acd530 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7acd468 <col:35> 'struct k_timer *' lvalue ParmVar 0x5584a7acd220 'timer' 'struct k_timer *'
|-FunctionDecl 0x5584a7acd630 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5584a7acd5a0 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x5584a7acd790 prev 0x5584a7a7cfe0 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7acd700 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x5584a7acd9e8 <line:372:1, line:380:1>
|   |-DoStmt 0x5584a7acd908 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acd8d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acd870 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acd8e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7acd9d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x5584a7acd998 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5584a7acd980 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7acd928 <col:9> 'u32_t (struct k_timer *)' Function 0x5584a7acd630 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5584a7acd9c0 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7acd948 <col:36> 'struct k_timer *' lvalue ParmVar 0x5584a7acd700 'timer' 'struct k_timer *'
|-FunctionDecl 0x5584a7acdac0 prev 0x5584a7a7d640 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5584a7acda30 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x5584a7acdc20 prev 0x5584a7a7d4e0 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7acdb90 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x5584a7acde60 <line:385:1, line:393:1>
|   |-DoStmt 0x5584a7acdd98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acdd60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acdd00 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acdd78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7acde50 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x5584a7acde10 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5584a7acddf8 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7acddb8 <col:9> 'u32_t (struct k_timer *)' Function 0x5584a7acdac0 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5584a7acde38 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7acddd8 <col:38> 'struct k_timer *' lvalue ParmVar 0x5584a7acdb90 'timer' 'struct k_timer *'
|-FunctionDecl 0x5584a7acdfc0 prev 0x5584a7a7df78 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x5584a7acdea8 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x5584a7acdf28 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x5584a7ace1b0 prev 0x5584a7a7dd60 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5584a7ace098 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5584a7ace118 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x5584a7ace488 <line:398:1, line:407:1>
|   |-DoStmt 0x5584a7ace330 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ace2f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ace298 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ace310 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ace428 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x5584a7ace410 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ace350 <col:2> 'void (struct k_timer *, void *)' Function 0x5584a7acdfc0 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x5584a7ace458 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7ace370 <col:31> 'struct k_timer *' lvalue ParmVar 0x5584a7ace098 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x5584a7ace470 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ace390 <col:38> 'void *' lvalue ParmVar 0x5584a7ace118 'user_data' 'void *'
|-FunctionDecl 0x5584a7ace568 prev 0x5584a7a7e920 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x5584a7ace4d0 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x5584a7ace6d0 prev 0x5584a7a7e268 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5584a7ace638 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x5584a7ace990 <line:412:1, line:420:1>
|   |-DoStmt 0x5584a7ace848 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ace810 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ace7b0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ace828 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ace968 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x5584a7ace928 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x5584a7ace910 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ace868 <col:9> 'void *(struct k_timer *)' Function 0x5584a7ace568 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x5584a7ace950 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ace888 <col:38> 'struct k_timer *' lvalue ParmVar 0x5584a7ace638 'timer' 'struct k_timer *'
|-FunctionDecl 0x5584a7acea30 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x5584a7aceaf0 prev 0x5584a7a7eb98 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x5584a7aced48 <line:425:1, line:435:1>
|   |-DoStmt 0x5584a7acec60 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acec28 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acebc8 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acec40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7aced38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x5584a7aced18 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x5584a7aced00 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5584a7acec80 <col:9> 's64_t ()' Function 0x5584a7acea30 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x5584a7acee20 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x5584a7aced90 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x5584a7acef80 prev 0x5584a7a81b10 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7aceef0 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x5584a7acf218 <line:440:1, line:449:1>
|   |-DoStmt 0x5584a7acf0f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acf0c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acf060 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acf0d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7acf1d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x5584a7acf1c0 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7acf118 <col:2> 'void (struct k_queue *)' Function 0x5584a7acee20 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x5584a7acf200 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7acf138 <col:22> 'struct k_queue *' lvalue ParmVar 0x5584a7aceef0 'queue' 'struct k_queue *'
|-FunctionDecl 0x5584a7acf2f0 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x5584a7acf260 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5584a7acf450 prev 0x5584a7a82590 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7acf3c0 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5584a7acf680 <line:454:1, line:463:1>
|   |-DoStmt 0x5584a7acf5c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acf590 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acf530 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acf5a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7acf640 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x5584a7acf628 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7acf5e8 <col:2> 'void (struct k_queue *)' Function 0x5584a7acf2f0 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x5584a7acf668 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7acf608 <col:29> 'struct k_queue *' lvalue ParmVar 0x5584a7acf3c0 'queue' 'struct k_queue *'
|-FunctionDecl 0x5584a7acf7e0 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5584a7acf6c8 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x5584a7acf748 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x5584a7acfa38 prev 0x5584a7a82ad0 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5584a7acf8b8 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7acf9a0 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x5584a7acfcc0 <line:468:1, line:476:1>
|   |-DoStmt 0x5584a7acfbb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7acfb80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7acfb20 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7acfb98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7acfcb0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x5584a7acfc50 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x5584a7acfc38 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7acfbd8 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5584a7acf7e0 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x5584a7acfc80 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7acfbf8 <col:37> 'struct k_queue *' lvalue ParmVar 0x5584a7acf8b8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5584a7acfc98 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7acfc18 <col:44> 'void *' lvalue ParmVar 0x5584a7acf9a0 'data' 'void *'
|-FunctionDecl 0x5584a7acfe20 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5584a7acfd08 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x5584a7acfd88 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x5584a7ad0010 prev 0x5584a7a82f08 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5584a7acfef8 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7acff78 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x5584a7ad0298 <line:481:1, line:489:1>
|   |-DoStmt 0x5584a7ad0190 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad0158 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad00f8 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad0170 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad0288 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x5584a7ad0228 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x5584a7ad0210 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad01b0 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5584a7acfe20 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x5584a7ad0258 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad01d0 <col:38> 'struct k_queue *' lvalue ParmVar 0x5584a7acfef8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5584a7ad0270 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad01f0 <col:45> 'void *' lvalue ParmVar 0x5584a7acff78 'data' 'void *'
|-FunctionDecl 0x5584a7ad03f8 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x5584a7ad02e0 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x5584a7ad0358 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7ad05e8 prev 0x5584a7a83ca8 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7ad04d0 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5584a7ad0548 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7ad08d8 <line:494:1, line:502:1>
|   |-DoStmt 0x5584a7ad0768 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad0730 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad06d0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad0748 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad08c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x5584a7ad0868 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x5584a7ad0850 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad0788 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x5584a7ad03f8 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x5584a7ad0898 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad07a8 <col:28> 'struct k_queue *' lvalue ParmVar 0x5584a7ad04d0 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5584a7ad08b0 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad07c8 <col:35> 's32_t':'int' lvalue ParmVar 0x5584a7ad0548 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7ad09e0 prev 0x5584a7a853d0 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x5584a7ad0920 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x5584a7ad0b48 prev 0x5584a7a85268 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7ad0ab0 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x5584a7ad0de8 <line:507:1, line:515:1>
|   |-DoStmt 0x5584a7ad0cc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad0c88 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad0c28 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad0ca0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad0dd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x5584a7ad0d98 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x5584a7ad0d80 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad0ce0 <col:9> 'int (struct k_queue *)' Function 0x5584a7ad09e0 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x5584a7ad0dc0 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad0d00 <col:33> 'struct k_queue *' lvalue ParmVar 0x5584a7ad0ab0 'queue' 'struct k_queue *'
|-FunctionDecl 0x5584a7ad0ec8 prev 0x5584a7a85890 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x5584a7ad0e30 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5584a7ad1030 prev 0x5584a7a85728 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7ad0f98 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5584a7ad12d8 <line:520:1, line:528:1>
|   |-DoStmt 0x5584a7ad11a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad1170 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad1110 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad1188 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad12c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x5584a7ad1288 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x5584a7ad1270 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad11c8 <col:9> 'void *(struct k_queue *)' Function 0x5584a7ad0ec8 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x5584a7ad12b0 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad11e8 <col:34> 'struct k_queue *' lvalue ParmVar 0x5584a7ad0f98 'queue' 'struct k_queue *'
|-FunctionDecl 0x5584a7ad13b8 prev 0x5584a7a86708 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x5584a7ad1320 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5584a7ad1520 prev 0x5584a7a865a0 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5584a7ad1488 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5584a7ad1760 <line:533:1, line:541:1>
|   |-DoStmt 0x5584a7ad1698 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad1660 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad1600 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad1678 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad1750 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x5584a7ad1710 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x5584a7ad16f8 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad16b8 <col:9> 'void *(struct k_queue *)' Function 0x5584a7ad13b8 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x5584a7ad1738 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad16d8 <col:34> 'struct k_queue *' lvalue ParmVar 0x5584a7ad1488 'queue' 'struct k_queue *'
|-FunctionDecl 0x5584a7ad2aa8 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x5584a7ad1848 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x5584a7ad18c8 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x5584a7ad1940 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7ad2d28 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x5584a7ad2b88 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x5584a7ad2c08 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x5584a7ad2c80 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7ad3058 <line:546:1, line:554:1>
|   |-DoStmt 0x5584a7ad2eb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad2e78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad2e18 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad2e90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad3048 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x5584a7ad2fc8 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x5584a7ad2fb0 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad2ed0 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x5584a7ad2aa8 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x5584a7ad3000 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad2ef0 <col:29> 'struct k_futex *' lvalue ParmVar 0x5584a7ad2b88 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x5584a7ad3018 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad2f10 <col:36> 'int' lvalue ParmVar 0x5584a7ad2c08 'expected' 'int'
|       `-ImplicitCastExpr 0x5584a7ad3030 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad2f30 <col:46> 's32_t':'int' lvalue ParmVar 0x5584a7ad2c80 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7ad3238 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x5584a7ad30a0 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x5584a7ad3118 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x5584a7ad3428 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x5584a7ad3310 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x5584a7ad3388 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x5584a7ad3718 <line:559:1, line:567:1>
|   |-DoStmt 0x5584a7ad35a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad3570 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad3510 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad3588 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad3708 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x5584a7ad36a8 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x5584a7ad3690 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad35c8 <col:9> 'int (struct k_futex *, bool)' Function 0x5584a7ad3238 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x5584a7ad36d8 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad35e8 <col:29> 'struct k_futex *' lvalue ParmVar 0x5584a7ad3310 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x5584a7ad36f0 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad3608 <col:36> 'bool' lvalue ParmVar 0x5584a7ad3388 'wake_all' 'bool'
|-FunctionDecl 0x5584a7ad3870 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x5584a7ad3760 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x5584a7ad37d8 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x5584a7ad3a78 prev 0x5584a79789a0 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x5584a7ad3948 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5584a7ad39e0 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x5584a7ad3d68 <line:572:1, line:580:1>
|   |-DoStmt 0x5584a7ad3bf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad3bc0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad3b60 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad3bd8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad3d58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x5584a7ad3cf8 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x5584a7ad3ce0 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad3c18 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x5584a7ad3870 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x5584a7ad3d28 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad3c38 <col:35> 'struct k_stack *' lvalue ParmVar 0x5584a7ad3948 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x5584a7ad3d40 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad3c58 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7ad39e0 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x5584a7ad3ec8 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x5584a7ad3db0 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x5584a7ad3e28 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x5584a7ad40b8 prev 0x5584a7978e48 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x5584a7ad3fa0 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5584a7ad4018 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x5584a7ad43a8 <line:585:1, line:593:1>
|   |-DoStmt 0x5584a7ad4238 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad4200 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad41a0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad4218 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad4398 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x5584a7ad4338 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x5584a7ad4320 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad4258 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x5584a7ad3ec8 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x5584a7ad4368 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad4278 <col:29> 'struct k_stack *' lvalue ParmVar 0x5584a7ad3fa0 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x5584a7ad4380 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad4298 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x5584a7ad4018 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x5584a7ad4588 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x5584a7ad43f0 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x5584a7ad4468 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x5584a7ad44e0 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7ad4800 prev 0x5584a7979188 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7ad4668 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5584a7ad46e0 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x5584a7ad4758 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7ad4b58 <line:598:1, line:606:1>
|   |-DoStmt 0x5584a7ad4988 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad4950 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad48f0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad4968 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad4b48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x5584a7ad4ac8 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x5584a7ad4ab0 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad49a8 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x5584a7ad4588 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x5584a7ad4b00 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad49f0 <col:28> 'struct k_stack *' lvalue ParmVar 0x5584a7ad4668 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x5584a7ad4b18 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad4a10 <col:35> 'stack_data_t *' lvalue ParmVar 0x5584a7ad46e0 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x5584a7ad4b30 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad4a30 <col:41> 's32_t':'int' lvalue ParmVar 0x5584a7ad4758 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7ad4c38 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x5584a7ad4ba0 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x5584a7ad4da0 prev 0x5584a7a9da60 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5584a7ad4d08 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x5584a7ad5048 <line:611:1, line:619:1>
|   |-DoStmt 0x5584a7ad4f18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad4ee0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad4e80 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad4ef8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad5038 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x5584a7ad4ff8 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x5584a7ad4fe0 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad4f38 <col:9> 'int (struct k_mutex *)' Function 0x5584a7ad4c38 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x5584a7ad5020 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad4f58 <col:29> 'struct k_mutex *' lvalue ParmVar 0x5584a7ad4d08 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x5584a7ad51a8 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x5584a7ad5090 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x5584a7ad5108 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7ad5398 prev 0x5584a7a9dcf8 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7ad5280 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x5584a7ad52f8 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7ad5688 <line:624:1, line:632:1>
|   |-DoStmt 0x5584a7ad5518 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad54e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad5480 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad54f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad5678 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x5584a7ad5618 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x5584a7ad5600 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad5538 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x5584a7ad51a8 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x5584a7ad5648 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad5558 <col:29> 'struct k_mutex *' lvalue ParmVar 0x5584a7ad5280 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x5584a7ad5660 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad5578 <col:36> 's32_t':'int' lvalue ParmVar 0x5584a7ad52f8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7ad5768 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x5584a7ad56d0 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x5584a7ad58d0 prev 0x5584a7a9de98 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5584a7ad5838 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x5584a7ad5b60 <line:637:1, line:645:1>
|   |-DoStmt 0x5584a7ad5a98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad5a60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad5a00 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad5a78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad5b50 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x5584a7ad5b10 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x5584a7ad5af8 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad5ab8 <col:9> 'int (struct k_mutex *)' Function 0x5584a7ad5768 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x5584a7ad5b38 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad5ad8 <col:31> 'struct k_mutex *' lvalue ParmVar 0x5584a7ad5838 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x5584a7ad5d50 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x5584a7ad5ba8 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x5584a7ad5c28 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x5584a7ad5ca8 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x5584a7ad5fd8 prev 0x5584a7a9e4d8 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x5584a7ad5e30 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x5584a7ad5eb0 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x5584a7ad5f30 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x5584a7ad6308 <line:650:1, line:658:1>
|   |-DoStmt 0x5584a7ad6160 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad6128 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad60c8 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad6140 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad62f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x5584a7ad6278 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x5584a7ad6260 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad6180 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x5584a7ad5d50 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x5584a7ad62b0 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad61a0 <col:27> 'struct k_sem *' lvalue ParmVar 0x5584a7ad5e30 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x5584a7ad62c8 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad61c0 <col:32> 'unsigned int' lvalue ParmVar 0x5584a7ad5eb0 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x5584a7ad62e0 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad61e0 <col:47> 'unsigned int' lvalue ParmVar 0x5584a7ad5f30 'limit' 'unsigned int'
|-FunctionDecl 0x5584a7ad6468 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x5584a7ad6350 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x5584a7ad63c8 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7ad6658 prev 0x5584a7a9e778 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7ad6540 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x5584a7ad65b8 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7ad6948 <line:663:1, line:671:1>
|   |-DoStmt 0x5584a7ad67d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad67a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad6740 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad67b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad6938 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x5584a7ad68d8 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x5584a7ad68c0 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad67f8 <col:9> 'int (struct k_sem *, s32_t)' Function 0x5584a7ad6468 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x5584a7ad6908 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad6818 <col:27> 'struct k_sem *' lvalue ParmVar 0x5584a7ad6540 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x5584a7ad6920 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad6838 <col:32> 's32_t':'int' lvalue ParmVar 0x5584a7ad65b8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7ad6a20 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x5584a7ad6990 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x5584a7ad6b80 prev 0x5584a7a9e990 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5584a7ad6af0 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x5584a7ad6e18 <line:676:1, line:685:1>
|   |-DoStmt 0x5584a7ad6cf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad6cc0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad6c60 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad6cd8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ad6dd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x5584a7ad6dc0 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ad6d18 <col:2> 'void (struct k_sem *)' Function 0x5584a7ad6a20 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x5584a7ad6e00 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ad6d38 <col:20> 'struct k_sem *' lvalue ParmVar 0x5584a7ad6af0 'sem' 'struct k_sem *'
|-FunctionDecl 0x5584a7ad6ef0 prev 0x5584a7a9f250 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x5584a7ad6e60 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x5584a7ad7050 prev 0x5584a7a9f0c0 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5584a7ad6fc0 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x5584a7ad7280 <line:690:1, line:699:1>
|   |-DoStmt 0x5584a7ad71c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad7190 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad7130 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad71a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ad7240 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x5584a7ad7228 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ad71e8 <col:2> 'void (struct k_sem *)' Function 0x5584a7ad6ef0 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x5584a7ad7268 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ad7208 <col:21> 'struct k_sem *' lvalue ParmVar 0x5584a7ad6fc0 'sem' 'struct k_sem *'
|-FunctionDecl 0x5584a7ad7360 prev 0x5584a7a9f6a8 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x5584a7ad72c8 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x5584a7ad74c8 prev 0x5584a7a9f518 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5584a7ad7430 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x5584a7ad7768 <line:704:1, line:712:1>
|   |-DoStmt 0x5584a7ad7640 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad7608 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad75a8 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad7620 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad7758 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x5584a7ad7718 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x5584a7ad7700 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad7660 <col:9> 'unsigned int (struct k_sem *)' Function 0x5584a7ad7360 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x5584a7ad7740 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad7680 <col:32> 'struct k_sem *' lvalue ParmVar 0x5584a7ad7430 'sem' 'struct k_sem *'
|-FunctionDecl 0x5584a7ad7948 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x5584a7ad77b0 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7ad7828 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x5584a7ad78a0 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x5584a7ad7bd0 prev 0x5584a7aa4098 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x5584a7ad7a38 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7ad7ab0 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7ad7b28 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x5584a7ad7f08 <line:717:1, line:725:1>
|   |-DoStmt 0x5584a7ad7d58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad7d20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad7cc0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad7d38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad7ef8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x5584a7ad7e78 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x5584a7ad7e60 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad7d78 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x5584a7ad7948 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x5584a7ad7eb0 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad7d98 <col:34> 'struct k_msgq *' lvalue ParmVar 0x5584a7ad7a38 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x5584a7ad7ec8 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad7db8 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x5584a7ad7ab0 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5584a7ad7ee0 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad7dd8 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x5584a7ad7b28 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x5584a7ad80f0 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x5584a7ad7f50 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7ad7fd0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x5584a7ad8048 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7ad8370 prev 0x5584a7aa45e8 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7ad81d0 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7ad8250 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5584a7ad82c8 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7ad86a8 <line:730:1, line:738:1>
|   |-DoStmt 0x5584a7ad84f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad84c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad8460 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad84d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad8698 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x5584a7ad8618 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x5584a7ad8600 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad8518 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x5584a7ad80f0 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x5584a7ad8650 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad8538 <col:27> 'struct k_msgq *' lvalue ParmVar 0x5584a7ad81d0 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x5584a7ad8668 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad8558 <col:33> 'void *' lvalue ParmVar 0x5584a7ad8250 'data' 'void *'
|       `-ImplicitCastExpr 0x5584a7ad8680 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad8578 <col:39> 's32_t':'int' lvalue ParmVar 0x5584a7ad82c8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7ad8890 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x5584a7ad86f0 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7ad8770 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x5584a7ad87e8 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7ad8b10 prev 0x5584a7aa51b0 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5584a7ad8970 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7ad89f0 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5584a7ad8a68 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7ad8de0 <line:743:1, line:751:1>
|   |-DoStmt 0x5584a7ad8c98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad8c60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad8c00 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad8c78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad8dd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x5584a7ad8d50 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x5584a7ad8d38 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad8cb8 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x5584a7ad8890 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x5584a7ad8d88 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad8cd8 <col:27> 'struct k_msgq *' lvalue ParmVar 0x5584a7ad8970 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x5584a7ad8da0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad8cf8 <col:33> 'void *' lvalue ParmVar 0x5584a7ad89f0 'data' 'void *'
|       `-ImplicitCastExpr 0x5584a7ad8db8 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad8d18 <col:39> 's32_t':'int' lvalue ParmVar 0x5584a7ad8a68 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7ad8f48 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x5584a7ad8e28 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x5584a7ad8ea8 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x5584a7ad9140 prev 0x5584a7aa5468 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x5584a7ad9020 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7ad90a0 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x5584a7ad9428 <line:756:1, line:764:1>
|   |-DoStmt 0x5584a7ad92c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad9288 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad9228 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad92a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad9418 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x5584a7ad93b8 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x5584a7ad93a0 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad92e0 <col:9> 'int (struct k_msgq *, void *)' Function 0x5584a7ad8f48 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x5584a7ad93e8 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ad9300 <col:28> 'struct k_msgq *' lvalue ParmVar 0x5584a7ad9020 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x5584a7ad9400 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad9320 <col:34> 'void *' lvalue ParmVar 0x5584a7ad90a0 'data' 'void *'
|-FunctionDecl 0x5584a7ad9500 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x5584a7ad9470 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x5584a7ad9660 prev 0x5584a7aa5680 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5584a7ad95d0 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5584a7ad98f8 <line:769:1, line:778:1>
|   |-DoStmt 0x5584a7ad97d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad97a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad9740 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad97b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ad98b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x5584a7ad98a0 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ad97f8 <col:2> 'void (struct k_msgq *)' Function 0x5584a7ad9500 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x5584a7ad98e0 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ad9818 <col:22> 'struct k_msgq *' lvalue ParmVar 0x5584a7ad95d0 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5584a7ad9a20 prev 0x5584a7aa5d48 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x5584a7ad9940 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x5584a7ad9b80 prev 0x5584a7aa5890 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5584a7ad9af0 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5584a7ad9e28 <line:783:1, line:791:1>
|   |-DoStmt 0x5584a7ad9cf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ad9cc0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ad9c60 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ad9cd8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ad9e18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x5584a7ad9dd8 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5584a7ad9dc0 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ad9d18 <col:9> 'u32_t (struct k_msgq *)' Function 0x5584a7ad9a20 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x5584a7ad9e00 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ad9d38 <col:36> 'struct k_msgq *' lvalue ParmVar 0x5584a7ad9af0 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5584a7ad9f98 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x5584a7ad9e70 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x5584a7ad9f00 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x5584a7ada198 prev 0x5584a7aa5be0 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x5584a7ada070 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5584a7ada100 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x5584a7ada478 <line:796:1, line:805:1>
|   |-DoStmt 0x5584a7ada318 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ada2e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ada280 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ada2f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7ada418 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x5584a7ada400 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7ada338 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x5584a7ad9f98 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x5584a7ada448 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7ada358 <col:26> 'struct k_msgq *' lvalue ParmVar 0x5584a7ada070 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x5584a7ada460 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7ada378 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x5584a7ada100 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x5584a7ada550 prev 0x5584a7aa6758 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x5584a7ada4c0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x5584a7ada6b0 prev 0x5584a7aa65f8 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5584a7ada620 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5584a7ada8f0 <line:810:1, line:818:1>
|   |-DoStmt 0x5584a7ada828 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ada7f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ada790 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ada808 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ada8e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x5584a7ada8a0 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5584a7ada888 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ada848 <col:9> 'u32_t (struct k_msgq *)' Function 0x5584a7ada550 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x5584a7ada8c8 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ada868 <col:36> 'struct k_msgq *' lvalue ParmVar 0x5584a7ada620 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5584a7adaa50 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x5584a7ada938 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x5584a7ada9b0 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x5584a7adac40 prev 0x5584a7aab638 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x5584a7adab28 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7adaba0 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x5584a7adaf28 <line:823:1, line:831:1>
|   |-DoStmt 0x5584a7adadc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7adad88 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7adad28 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7adada0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7adaf18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x5584a7adaeb8 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x5584a7adaea0 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7adade0 <col:9> 'int (struct k_pipe *, size_t)' Function 0x5584a7adaa50 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x5584a7adaee8 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adae00 <col:34> 'struct k_pipe *' lvalue ParmVar 0x5584a7adab28 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x5584a7adaf00 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7adae20 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x5584a7adaba0 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x5584a7adb290 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x5584a7adaf70 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7adaff0 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x5584a7adb068 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7adb0e0 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x5584a7adb158 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x5584a7adb1d0 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7adb6a8 prev 0x5584a7aabb58 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5584a7adb388 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7adb408 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5584a7adb480 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7adb4f8 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x5584a7adb570 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7adb5e8 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7adbad0 <line:836:1, line:844:1>
|   |-DoStmt 0x5584a7adb848 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7adb810 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7adb7b0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7adb828 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7adbac0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x5584a7adb9c8 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x5584a7adb9b0 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7adb868 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x5584a7adb290 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x5584a7adba30 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adb888 <col:27> 'struct k_pipe *' lvalue ParmVar 0x5584a7adb388 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x5584a7adba48 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adb8a8 <col:33> 'void *' lvalue ParmVar 0x5584a7adb408 'data' 'void *'
|       |-ImplicitCastExpr 0x5584a7adba60 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adb8c8 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x5584a7adb480 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5584a7adba78 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adb8e8 <col:55> 'size_t *' lvalue ParmVar 0x5584a7adb4f8 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x5584a7adba90 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adb908 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x5584a7adb570 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5584a7adbaa8 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7adb928 <col:80> 's32_t':'int' lvalue ParmVar 0x5584a7adb5e8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7adbe38 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x5584a7adbb18 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7adbb98 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x5584a7adbc10 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7adbc88 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x5584a7adbd00 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x5584a7adbd78 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7adc250 prev 0x5584a7aad0d0 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5584a7adbf30 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5584a7adbfb0 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5584a7adc028 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7adc0a0 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x5584a7adc118 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5584a7adc190 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7adc5f8 <line:849:1, line:857:1>
|   |-DoStmt 0x5584a7adc3f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7adc3b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7adc358 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7adc3d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7adc5e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x5584a7adc508 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x5584a7adc4f0 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7adc410 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x5584a7adbe38 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x5584a7adc558 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adc430 <col:27> 'struct k_pipe *' lvalue ParmVar 0x5584a7adbf30 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x5584a7adc570 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adc450 <col:33> 'void *' lvalue ParmVar 0x5584a7adbfb0 'data' 'void *'
|       |-ImplicitCastExpr 0x5584a7adc588 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adc470 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x5584a7adc028 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5584a7adc5a0 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adc490 <col:54> 'size_t *' lvalue ParmVar 0x5584a7adc0a0 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x5584a7adc5b8 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adc4b0 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x5584a7adc118 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5584a7adc5d0 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7adc4d0 <col:76> 's32_t':'int' lvalue ParmVar 0x5584a7adc190 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7adc7e0 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x5584a7adc640 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5584a7adc6c0 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x5584a7adc738 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x5584a7adca60 prev 0x5584a7ab7de8 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5584a7adc8c0 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x5584a7adc940 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x5584a7adc9b8 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x5584a7adcd98 <line:862:1, line:870:1>
|   |-DoStmt 0x5584a7adcbe8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7adcbb0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7adcb50 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7adcbc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7adcd88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x5584a7adcd08 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5584a7adccf0 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7adcc08 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x5584a7adc7e0 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x5584a7adcd40 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adcc28 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x5584a7adc8c0 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x5584a7adcd58 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7adcc48 <col:31> 'int' lvalue ParmVar 0x5584a7adc940 'num_events' 'int'
|       `-ImplicitCastExpr 0x5584a7adcd70 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7adcc68 <col:43> 's32_t':'int' lvalue ParmVar 0x5584a7adc9b8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5584a7adce70 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x5584a7adcde0 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x5584a7adcfd0 prev 0x5584a7ab8000 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5584a7adcf40 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5584a7add268 <line:875:1, line:884:1>
|   |-DoStmt 0x5584a7add148 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7add110 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7add0b0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7add128 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7add228 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x5584a7add210 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7add168 <col:2> 'void (struct k_poll_signal *)' Function 0x5584a7adce70 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x5584a7add250 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7add188 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x5584a7adcf40 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x5584a7add340 prev 0x5584a7ab8a70 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x5584a7add2b0 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x5584a7add4a0 prev 0x5584a7ab8160 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5584a7add410 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5584a7add6d0 <line:889:1, line:898:1>
|   |-DoStmt 0x5584a7add618 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7add5e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7add580 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7add5f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7add690 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x5584a7add678 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7add638 <col:2> 'void (struct k_poll_signal *)' Function 0x5584a7add340 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x5584a7add6b8 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7add658 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x5584a7add410 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x5584a7add8b8 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x5584a7add718 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5584a7add798 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x5584a7add818 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x5584a7addb60 prev 0x5584a7ab8e60 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x5584a7add998 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5584a7adda40 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x5584a7addac0 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x5584a7adde88 <line:903:1, line:912:1>
|   |-DoStmt 0x5584a7addce8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7addcb0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7addc50 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7addcc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7adde08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x5584a7adddf0 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7addd08 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x5584a7add8b8 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x5584a7adde40 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7addd28 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x5584a7add998 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x5584a7adde58 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7addd48 <col:37> 'unsigned int *' lvalue ParmVar 0x5584a7adda40 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x5584a7adde70 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7addd68 <col:47> 'int *' lvalue ParmVar 0x5584a7addac0 'result' 'int *'
|-FunctionDecl 0x5584a7addff0 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x5584a7added0 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x5584a7addf50 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x5584a7ade1e8 prev 0x5584a7ab9118 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x5584a7ade0c8 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5584a7ade148 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x5584a7ade4d8 <line:917:1, line:925:1>
|   |-DoStmt 0x5584a7ade368 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ade330 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ade2d0 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ade348 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7ade4c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x5584a7ade468 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5584a7ade450 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7ade388 <col:9> 'int (struct k_poll_signal *, int)' Function 0x5584a7addff0 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x5584a7ade498 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x5584a7ade3a8 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x5584a7ade0c8 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x5584a7ade4b0 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7ade3c8 <col:44> 'int' lvalue ParmVar 0x5584a7ade148 'result' 'int'
|-FunctionDecl 0x5584a7ade6a0 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x5584a7ade510 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x5584a7ade588 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x5584a7ade878 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x5584a7ade768 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x5584a7ade7e0 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x5584a7adeb58 <line:930:1, line:939:1>
|   |-DoStmt 0x5584a7ade9f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7ade9c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7ade960 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7ade9d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5584a7adeaf8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x5584a7adeae0 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5584a7adea18 <col:2> 'void (char *, size_t)' Function 0x5584a7ade6a0 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x5584a7adeb28 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5584a7adea38 <col:19> 'char *' lvalue ParmVar 0x5584a7ade768 'c' 'char *'
|     `-ImplicitCastExpr 0x5584a7adeb40 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5584a7adea58 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x5584a7ade7e0 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x5584a7adec38 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x5584a7adeba0 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x5584a7adeda0 prev 0x5584a7abe3b8 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x5584a7aded08 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x5584a7adf018 <line:944:1, line:952:1>
|   |-DoStmt 0x5584a7adef18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5584a7adeee0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5584a7adee80 <col:2, col:39>
|   | `-IntegerLiteral 0x5584a7adeef8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5584a7adf008 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x5584a7adefc8 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x5584a7adefb0 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5584a7adef38 <col:9> 'int (struct k_thread *)' Function 0x5584a7adec38 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x5584a7adeff0 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x5584a7adef58 <col:32> 'struct k_thread *' lvalue ParmVar 0x5584a7aded08 'thread' 'struct k_thread *'
|-FunctionDecl 0x5584a7adf130 </vagrant/apps/plc_led_blink/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x5584a7adf310 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x5584a7adf208 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x5584a7adf458 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x5584a7adf3c8 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x5584a7adf598 <line:14:1, col:39> col:6 tfm_gpio_disable_all_outputs 'void (void)'
|-FunctionDecl 0x5584a7adf750 <line:15:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5584a7adf648 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7adf9a0 <line:16:1, col:64> col:6 tfm_gpio_set_update_hooks 'void (uint32_t, uint32_t)'
| |-ParmVarDecl 0x5584a7adf808 <col:32, col:41> col:41 trigger 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5584a7adf880 <col:50, col:59> col:59 apply 'uint32_t':'unsigned int'
|-FunctionDecl 0x5584a7ae07c0 <line:18:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5584a7ae0730 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7ae08f0 <line:19:1, col:34> col:10 tfm_gpio_output_enabled 'uint32_t ()'
|-FunctionDecl 0x5584a7ae09b0 <line:20:1, col:27> col:10 tfm_gpio_dataout 'uint32_t ()'
|-FunctionDecl 0x5584a7ae0af0 <line:21:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5584a7ae0a60 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7ae0c38 <line:22:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5584a7ae0ba8 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7ae0d80 <line:23:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5584a7ae0cf0 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7ae0ec8 prev 0x5584a7adf750 <line:24:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5584a7ae0e38 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x5584a7ae0f70 <line:38:9, line:42:1> line:38:9 struct definition
| |-FieldDecl 0x5584a7ae1028 <line:39:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x5584a7ae1088 <line:40:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x5584a7ae1180 <line:41:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x5584a7ae1230 <line:38:1, line:42:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x5584a7ae11d0 'struct gpio_int_config' sugar
|   `-RecordType 0x5584a7ae0ff0 'gpio_int_config'
|     `-Record 0x5584a7ae0f70 ''
|-FunctionDecl 0x5584a7ae14e0 <line:44:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x5584a7ae12b0 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x5584a7ae13c0 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x5584a7ae1630 <line:45:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5584a7ae15a0 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7ae16f8 <line:46:1, col:38> col:10 tfm_gpio_interrupts_enabled 'uint32_t ()'
|-FunctionDecl 0x5584a7ae18b0 <line:47:1, col:57> col:10 tfm_gpio_interrupt_callback_for_pin 'uint32_t (uint8_t)'
| `-ParmVarDecl 0x5584a7ae17a8 <col:46, col:54> col:54 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x5584a7ae1970 </vagrant/apps/plc_led_blink/./include/plc_platform.h:5:1, col:22> col:22 referenced SWORD 'short'
| `-BuiltinType 0x5584a78ba5d0 'short'
|-TypedefDecl 0x5584a7ae19e0 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x5584a78ba650 'unsigned char'
|-EnumDecl 0x5584a7ae1a38 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x5584a7ae1b40 <line:26:2, col:6> col:2 R 'int'
| | `-ConstantExpr 0x5584a7ae1b28 <col:6> 'int'
| |   `-IntegerLiteral 0x5584a7ae1b08 <col:6> 'int' 2
| |-EnumConstantDecl 0x5584a7ae1bc8 <line:27:2, col:6> col:2 G 'int'
| | `-ConstantExpr 0x5584a7ae1bb0 <col:6> 'int'
| |   `-IntegerLiteral 0x5584a7ae1b90 <col:6> 'int' 3
| `-EnumConstantDecl 0x5584a7ae1c50 <line:28:2, col:6> col:2 B 'int'
|   `-ConstantExpr 0x5584a7ae1c38 <col:6> 'int'
|     `-IntegerLiteral 0x5584a7ae1c18 <col:6> 'int' 4
|-TypedefDecl 0x5584a7ae1d00 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x5584a7ae1ca0 'enum LED' sugar
|   `-EnumType 0x5584a7ae1ae0 'LED'
|     `-Enum 0x5584a7ae1a38 ''
|-FunctionDecl 0x5584a7ae1f40 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x5584a7ae1db0 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x5584a7ae1e28 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7ae2110 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x5584a7ae2000 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7ae2250 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x5584a7ae2388 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x5584a7ae24f8 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x5584a7ae2468 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x5584a7b4b050 <line:39:4, col:42>
|   `-ParagraphComment 0x5584a7b4b020 <col:4, col:42>
|     `-TextComment 0x5584a7b4aff0 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x5584a7ae2640 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x5584a7ae25b0 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7ae8900 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x5584a7ae8740 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x5584a7ae87e8 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x5584a7ae8a90 <line:47:1, col:26> col:6 read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x5584a7ae89c0 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5584a7ae8c80 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x5584a7ae8b78 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x5584a7ae8dc8 <line:51:1, col:23> col:6 LED_off 'void (LED)'
| `-ParmVarDecl 0x5584a7ae8d38 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x5584a7ae8f90 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x5584a7ae8e80 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x5584a7ae91e0 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x5584a7ae9048 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x5584a7ae90c0 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x5584a7ae9330 <line:57:1, col:29> col:6 read_button 'BOOL (uint8_t)'
| `-ParmVarDecl 0x5584a7ae92a0 <col:18, col:26> col:26 pin 'uint8_t':'unsigned char'
|-VarDecl 0x5584a7ae9460 </vagrant/apps/plc_led_blink/./include/ladder.h:13:1, col:33> col:16 output_pins 'uint8_t [0]' static cinit
| `-InitListExpr 0x5584a7ae9508 <col:32, col:33> 'uint8_t [0]'
|-FunctionDecl 0x5584a7ae9690 <line:18:1, col:19> col:6 PlcCycle 'void (void)'
| `-FullComment 0x5584a7b4b120 <line:15:4, col:57>
|   `-ParagraphComment 0x5584a7b4b0f0 <col:4, col:57>
|     `-TextComment 0x5584a7b4b0c0 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x5584a7ae97e8 <line:21:1, col:36> col:6 plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x5584a7ae9758 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x5584a7ae9928 <line:24:1, col:19> col:6 init_plc 'void (void)'
|-FunctionDecl 0x5584a7ae9b20 <line:31:1, col:27> col:6 used Read_U_b_Xbutton 'BOOL (void)'
| `-FullComment 0x5584a7b4b1f0 <line:29:4, col:57>
|   `-ParagraphComment 0x5584a7b4b1c0 <col:4, col:57>
|     `-TextComment 0x5584a7b4b190 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x5584a7ae9c58 <line:33:1, col:24> col:6 Read_U_b_Yled 'BOOL (void)'
|-FunctionDecl 0x5584a7ae9dd0 <line:35:1, col:27> col:6 used Write_U_b_Yled 'void (BOOL)'
| `-ParmVarDecl 0x5584a7ae9d08 <col:21, col:26> col:26 v 'BOOL':'unsigned char'
|-FunctionDecl 0x5584a7ae9f10 <line:37:1, col:23> col:6 Read_U_b_Ytx 'BOOL (void)'
|-FunctionDecl 0x5584a7aea050 <line:39:1, col:26> col:6 used Write_U_b_Ytx 'void (BOOL)'
| `-ParmVarDecl 0x5584a7ae9fc0 <col:20, col:25> col:25 v 'BOOL':'unsigned char'
|-VarDecl 0x5584a7aea108 <./src/LEDtutorial.c:26:16, line:43:23> col:13 used I_b_mcr 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aea190 <col:23> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea170 <col:23> 'int' 0
|-VarDecl 0x5584a7aea1b8 <line:26:16, line:46:28> col:13 used I_b_rung_top 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aea240 <col:28> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea220 <col:28> 'int' 0
|-VarDecl 0x5584a7aea268 <line:26:16, line:49:24> col:13 used U_b_Rosc 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aea2f0 <col:24> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea2d0 <col:24> 'int' 0
|-VarDecl 0x5584a7aea348 <line:26:16, line:52:28> col:14 used U_i_Tosc_on 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x5584a7aea3d0 <col:28> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea3b0 <col:28> 'int' 0
|-VarDecl 0x5584a7aea3f8 <line:26:16, line:53:39> col:13 used I_b_Tosc_off_antiglitch 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aea480 <col:39> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea460 <col:39> 'int' 0
|-VarDecl 0x5584a7aea4a8 <line:26:16, line:56:29> col:14 used U_i_Tosc_off 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x5584a7aea530 <col:29> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea510 <col:29> 'int' 0
|-FunctionDecl 0x5584a7aea5e0 prev 0x5584a7ae9b20 <line:59:7, col:40> col:19 used Read_U_b_Xbutton 'BOOL (void)' extern
|-VarDecl 0x5584a7aea690 <line:26:16, line:61:31> col:13 used I_b_parOut_0000 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aea718 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea6f8 <col:31> 'int' 0
|-VarDecl 0x5584a7aea750 <line:26:16, line:64:32> col:13 used I_b_parThis_0000 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aea7d8 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea7b8 <col:32> 'int' 0
|-VarDecl 0x5584a7aea800 <line:26:16, line:67:32> col:13 used I_b_oneShot_0000 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aea888 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea868 <col:32> 'int' 0
|-VarDecl 0x5584a7aea8b0 <line:26:16, line:70:27> col:14 used U_i_Cstate 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x5584a7aea938 <col:27> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea918 <col:27> 'int' 0
|-VarDecl 0x5584a7aea960 <line:26:16, line:71:24> col:13 used U_b_Rbon 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aea9e8 <col:24> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aea9c8 <col:24> 'int' 0
|-VarDecl 0x5584a7aeaa10 <line:26:16, line:74:32> col:14 used U_i_Tkill_delay 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x5584a7aeaa98 <col:32> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aeaa78 <col:32> 'int' 0
|-VarDecl 0x5584a7aeaac0 <line:26:16, line:75:25> col:13 used U_b_Rkill 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aeab48 <col:25> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aeab28 <col:25> 'int' 0
|-VarDecl 0x5584a7aeab70 <line:26:16, line:78:31> col:13 used I_b_parOut_0001 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aeabf8 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aeabd8 <col:31> 'int' 0
|-VarDecl 0x5584a7aeac20 <line:26:16, line:81:32> col:13 used I_b_parThis_0001 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aeaca8 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aeac88 <col:32> 'int' 0
|-VarDecl 0x5584a7aeacd0 <line:26:16, line:84:25> col:13 used U_b_Rhigh 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aead58 <col:25> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aead38 <col:25> 'int' 0
|-VarDecl 0x5584a7aead80 <line:26:16, line:87:31> col:13 used I_b_parOut_0002 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aeae08 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aeade8 <col:31> 'int' 0
|-VarDecl 0x5584a7aeae30 <line:26:16, line:90:32> col:13 used I_b_parThis_0002 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aeaeb8 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aeae98 <col:32> 'int' 0
|-FunctionDecl 0x5584a7aeaf68 prev 0x5584a7ae9f10 <line:95:7, col:29> col:12 Read_U_b_Ytx 'BOOL (void)'
|-FunctionDecl 0x5584a7aeb0a8 prev 0x5584a7aea050 <line:96:7, col:32> col:12 used Write_U_b_Ytx 'void (BOOL)'
| `-ParmVarDecl 0x5584a7aeb018 <col:26, col:31> col:31 v 'BOOL':'unsigned char'
|-VarDecl 0x5584a7aeb160 <line:26:16, line:98:31> col:13 used I_b_parOut_0003 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aeb1e8 <col:31> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aeb1c8 <col:31> 'int' 0
|-VarDecl 0x5584a7aeb210 <line:26:16, line:101:32> col:13 used I_b_parThis_0003 'BOOL':'unsigned char' static cinit
| `-ImplicitCastExpr 0x5584a7aeb298 <col:32> 'BOOL':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aeb278 <col:32> 'int' 0
|-VarDecl 0x5584a7aeb2c0 <line:26:16, line:104:29> col:14 used I_i_scratch2 'SWORD':'short' static cinit
| `-ImplicitCastExpr 0x5584a7aeb348 <col:29> 'SWORD':'short' <IntegralCast>
|   `-IntegerLiteral 0x5584a7aeb328 <col:29> 'int' 0
|-FunctionDecl 0x5584a7aeb3f8 prev 0x5584a7ae9c58 <line:107:7, col:30> col:12 Read_U_b_Yled 'BOOL (void)'
|-FunctionDecl 0x5584a7aeb538 prev 0x5584a7ae9dd0 <line:108:7, col:33> col:12 used Write_U_b_Yled 'void (BOOL)'
| `-ParmVarDecl 0x5584a7aeb4a8 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
`-FunctionDecl 0x5584a7aeb678 prev 0x5584a7ae9690 <line:115:1, line:296:1> line:115:6 PlcCycle 'void (void)'
  `-CompoundStmt 0x5584a7af0448 <line:116:1, line:296:1>
    |-BinaryOperator 0x5584a7aeb770 <line:45:26, line:117:19> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aeb718 <line:45:26> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea108 'I_b_mcr' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aeb758 <line:117:19> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x5584a7aeb738 <col:19> 'int' 1
    |-BinaryOperator 0x5584a7aeb7e8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aeb790 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aeb7d0 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aeb7b0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea108 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aeb8e8 <line:123:5, line:125:5>
    | |-UnaryOperator 0x5584a7aeb840 <line:123:8, line:50:25> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x5584a7aeb828 <col:25> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x5584a7aeb808 <col:25> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea268 'U_b_Rosc' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aeb8d0 <line:123:26, line:125:5>
    |   `-BinaryOperator 0x5584a7aeb8b0 <line:48:31, line:124:28> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aeb858 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aeb898 <line:124:28> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aeb878 <col:28> 'int' 0
    |-IfStmt 0x5584a7aebb58 <line:127:5, line:134:5> has_else
    | |-ImplicitCastExpr 0x5584a7aeb920 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aeb900 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x5584a7aebab0 <line:127:29, line:132:5>
    | | `-IfStmt 0x5584a7aeba98 <line:128:9, line:131:9>
    | |   |-BinaryOperator 0x5584a7aeb9a8 <line:128:12, col:26> 'int' '<'
    | |   | |-ImplicitCastExpr 0x5584a7aeb990 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x5584a7aeb978 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x5584a7aeb938 <col:12> 'SWORD':'short' lvalue Var 0x5584a7aea348 'U_i_Tosc_on' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x5584a7aeb958 <col:26> 'int' 24
    | |   `-CompoundStmt 0x5584a7aeba78 <col:30, line:131:9>
    | |     |-UnaryOperator 0x5584a7aeb9e8 <line:129:13, col:24> 'SWORD':'short' postfix '++' cannot overflow
    | |     | `-DeclRefExpr 0x5584a7aeb9c8 <col:13> 'SWORD':'short' lvalue Var 0x5584a7aea348 'U_i_Tosc_on' 'SWORD':'short'
    | |     `-BinaryOperator 0x5584a7aeba58 <line:48:31, line:130:32> 'BOOL':'unsigned char' '='
    | |       |-DeclRefExpr 0x5584a7aeba00 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | |       `-ImplicitCastExpr 0x5584a7aeba40 <line:130:32> 'BOOL':'unsigned char' <IntegralCast>
    | |         `-IntegerLiteral 0x5584a7aeba20 <col:32> 'int' 0
    | `-CompoundStmt 0x5584a7aebb40 <line:132:12, line:134:5>
    |   `-BinaryOperator 0x5584a7aebb20 <line:133:9, col:23> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x5584a7aebac8 <col:9> 'SWORD':'short' lvalue Var 0x5584a7aea348 'U_i_Tosc_on' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x5584a7aebb08 <col:23> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aebae8 <col:23> 'int' 0
    |-IfStmt 0x5584a7aebc60 <line:136:5, line:138:5>
    | |-UnaryOperator 0x5584a7aebbb8 <line:136:8, line:54:40> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x5584a7aebba0 <col:40> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x5584a7aebb80 <col:40> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea3f8 'I_b_Tosc_off_antiglitch' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aebc48 <line:136:41, line:138:5>
    |   `-BinaryOperator 0x5584a7aebc28 <line:137:9, col:24> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x5584a7aebbd0 <col:9> 'SWORD':'short' lvalue Var 0x5584a7aea4a8 'U_i_Tosc_off' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x5584a7aebc10 <col:24> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aebbf0 <col:24> 'int' 24
    |-BinaryOperator 0x5584a7aebcd0 <line:55:42, line:139:35> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aebc78 <line:55:42> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea3f8 'I_b_Tosc_off_antiglitch' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aebcb8 <line:139:35> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x5584a7aebc98 <col:35> 'int' 1
    |-IfStmt 0x5584a7aebf60 <line:140:5, line:147:5> has_else
    | |-UnaryOperator 0x5584a7aebd28 <line:140:8, line:47:29> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x5584a7aebd10 <col:29> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x5584a7aebcf0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x5584a7aebeb8 <line:140:30, line:145:5>
    | | `-IfStmt 0x5584a7aebea0 <line:141:9, line:144:9>
    | |   |-BinaryOperator 0x5584a7aebdb0 <line:141:12, col:27> 'int' '<'
    | |   | |-ImplicitCastExpr 0x5584a7aebd98 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x5584a7aebd80 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x5584a7aebd40 <col:12> 'SWORD':'short' lvalue Var 0x5584a7aea4a8 'U_i_Tosc_off' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x5584a7aebd60 <col:27> 'int' 24
    | |   `-CompoundStmt 0x5584a7aebe80 <col:31, line:144:9>
    | |     |-UnaryOperator 0x5584a7aebdf0 <line:142:13, col:25> 'SWORD':'short' postfix '++' cannot overflow
    | |     | `-DeclRefExpr 0x5584a7aebdd0 <col:13> 'SWORD':'short' lvalue Var 0x5584a7aea4a8 'U_i_Tosc_off' 'SWORD':'short'
    | |     `-BinaryOperator 0x5584a7aebe60 <line:48:31, line:143:32> 'BOOL':'unsigned char' '='
    | |       |-DeclRefExpr 0x5584a7aebe08 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | |       `-ImplicitCastExpr 0x5584a7aebe48 <line:143:32> 'BOOL':'unsigned char' <IntegralCast>
    | |         `-IntegerLiteral 0x5584a7aebe28 <col:32> 'int' 1
    | `-CompoundStmt 0x5584a7aebf48 <line:145:12, line:147:5>
    |   `-BinaryOperator 0x5584a7aebf28 <line:146:9, col:24> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x5584a7aebed0 <col:9> 'SWORD':'short' lvalue Var 0x5584a7aea4a8 'U_i_Tosc_off' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x5584a7aebf10 <col:24> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aebef0 <col:24> 'int' 0
    |-IfStmt 0x5584a7aec0e0 <line:149:5, line:153:5> has_else
    | |-ImplicitCastExpr 0x5584a7aebfa8 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aebf88 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x5584a7aec038 <line:149:29, line:151:5>
    | | `-BinaryOperator 0x5584a7aec018 <line:51:27, line:150:24> 'BOOL':'unsigned char' '='
    | |   |-DeclRefExpr 0x5584a7aebfc0 <line:51:27> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea268 'U_b_Rosc' 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x5584a7aec000 <line:150:24> 'BOOL':'unsigned char' <IntegralCast>
    | |     `-IntegerLiteral 0x5584a7aebfe0 <col:24> 'int' 0
    | `-CompoundStmt 0x5584a7aec0c8 <line:151:12, line:153:5>
    |   `-BinaryOperator 0x5584a7aec0a8 <line:51:27, line:152:24> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aec050 <line:51:27> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea268 'U_b_Rosc' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aec090 <line:152:24> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aec070 <col:24> 'int' 1
    |-BinaryOperator 0x5584a7aec160 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aec108 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aec148 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aec128 <col:24> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea108 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aec2e0 <line:161:5, line:163:5>
    | |-UnaryOperator 0x5584a7aec238 <line:161:8, col:26> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x5584a7aec218 <col:9, col:26> 'BOOL':'unsigned char'
    | |   `-ImplicitCastExpr 0x5584a7aec200 <col:9> 'BOOL (*)(void)' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x5584a7aec180 <col:9> 'BOOL (void)' Function 0x5584a7aea5e0 'Read_U_b_Xbutton' 'BOOL (void)'
    | `-CompoundStmt 0x5584a7aec2c8 <col:29, line:163:5>
    |   `-BinaryOperator 0x5584a7aec2a8 <line:48:31, line:162:28> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aec250 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aec290 <line:162:28> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aec270 <col:28> 'int' 0
    |-BinaryOperator 0x5584a7aec350 <line:63:34, line:166:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aec2f8 <line:63:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea690 'I_b_parOut_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aec338 <line:166:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x5584a7aec318 <col:27> 'int' 0
    |-BinaryOperator 0x5584a7aec3c8 <line:66:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aec370 <line:66:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea750 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aec3b0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aec390 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aec650 <line:168:5, line:176:5>
    | |-ImplicitCastExpr 0x5584a7aec408 <line:65:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aec3e8 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea750 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aec638 <line:168:33, line:176:5>
    |   `-IfStmt 0x5584a7aec620 <line:169:9, line:175:9>
    |     |-UnaryOperator 0x5584a7aec458 <line:169:12, line:68:33> 'int' prefix '!' cannot overflow
    |     | `-ImplicitCastExpr 0x5584a7aec440 <col:33> 'BOOL':'unsigned char' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5584a7aec420 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea800 'I_b_oneShot_0000' 'BOOL':'unsigned char'
    |     `-CompoundStmt 0x5584a7aec600 <line:169:38, line:175:9>
    |       |-UnaryOperator 0x5584a7aec490 <line:170:13, col:23> 'SWORD':'short' postfix '++' cannot overflow
    |       | `-DeclRefExpr 0x5584a7aec470 <col:13> 'SWORD':'short' lvalue Var 0x5584a7aea8b0 'U_i_Cstate' 'SWORD':'short'
    |       `-IfStmt 0x5584a7aec5d8 <line:171:13, line:174:13> has_else
    |         |-BinaryOperator 0x5584a7aec518 <line:171:16, col:29> 'int' '<'
    |         | |-ImplicitCastExpr 0x5584a7aec500 <col:16> 'int' <IntegralCast>
    |         | | `-ImplicitCastExpr 0x5584a7aec4e8 <col:16> 'SWORD':'short' <LValueToRValue>
    |         | |   `-DeclRefExpr 0x5584a7aec4a8 <col:16> 'SWORD':'short' lvalue Var 0x5584a7aea8b0 'U_i_Cstate' 'SWORD':'short'
    |         | `-IntegerLiteral 0x5584a7aec4c8 <col:29> 'int' 3
    |         |-CompoundStmt 0x5584a7aec538 <col:32, line:172:13>
    |         `-CompoundStmt 0x5584a7aec5c0 <col:20, line:174:13>
    |           `-BinaryOperator 0x5584a7aec5a0 <line:173:17, col:30> 'SWORD':'short' '='
    |             |-DeclRefExpr 0x5584a7aec548 <col:17> 'SWORD':'short' lvalue Var 0x5584a7aea8b0 'U_i_Cstate' 'SWORD':'short'
    |             `-ImplicitCastExpr 0x5584a7aec588 <col:30> 'SWORD':'short' <IntegralCast>
    |               `-IntegerLiteral 0x5584a7aec568 <col:30> 'int' 0
    |-BinaryOperator 0x5584a7aec6c0 <line:69:35, line:65:33> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aec668 <line:69:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea800 'I_b_oneShot_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aec6a8 <line:65:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aec688 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea750 'I_b_parThis_0000' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aee7f0 <line:179:5, line:181:5>
    | |-ImplicitCastExpr 0x5584a7aec700 <line:65:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aec6e0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea750 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aee7d8 <line:179:33, line:181:5>
    |   `-BinaryOperator 0x5584a7aee7b8 <line:63:34, line:180:31> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aec718 <line:63:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea690 'I_b_parOut_0000' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aee7a0 <line:180:31> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aee780 <col:31> 'int' 1
    |-BinaryOperator 0x5584a7aee860 <line:66:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aee808 <line:66:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea750 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aee848 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aee828 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x5584a7aee8d8 <line:73:27, line:65:33> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aee880 <line:73:27> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea960 'U_b_Rbon' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aee8c0 <line:65:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aee8a0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea750 'I_b_parThis_0000' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aee9c0 <line:185:5, line:187:5>
    | |-ImplicitCastExpr 0x5584a7aee918 <line:65:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aee8f8 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea750 'I_b_parThis_0000' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aee9a8 <line:185:33, line:187:5>
    |   `-BinaryOperator 0x5584a7aee988 <line:63:34, line:186:31> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aee930 <line:63:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea690 'I_b_parOut_0000' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aee970 <line:186:31> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aee950 <col:31> 'int' 1
    |-BinaryOperator 0x5584a7aeea30 <line:48:31, line:62:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aee9d8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aeea18 <line:62:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aee9f8 <col:32> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea690 'I_b_parOut_0000' 'BOOL':'unsigned char'
    |-BinaryOperator 0x5584a7aeeaa8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aeea50 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aeea90 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aeea70 <col:24> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea108 'I_b_mcr' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aeeb90 <line:196:5, line:198:5>
    | |-ImplicitCastExpr 0x5584a7aeeae8 <line:72:25> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aeeac8 <col:25> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea960 'U_b_Rbon' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aeeb78 <line:196:25, line:198:5>
    |   `-BinaryOperator 0x5584a7aeeb58 <line:48:31, line:197:28> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aeeb00 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aeeb40 <line:197:28> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aeeb20 <col:28> 'int' 0
    |-IfStmt 0x5584a7aeee00 <line:200:5, line:207:5> has_else
    | |-ImplicitCastExpr 0x5584a7aeebc8 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aeeba8 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | |-CompoundStmt 0x5584a7aeed58 <line:200:29, line:205:5>
    | | `-IfStmt 0x5584a7aeed40 <line:201:9, line:204:9>
    | |   |-BinaryOperator 0x5584a7aeec50 <line:201:12, col:30> 'int' '<'
    | |   | |-ImplicitCastExpr 0x5584a7aeec38 <col:12> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x5584a7aeec20 <col:12> 'SWORD':'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x5584a7aeebe0 <col:12> 'SWORD':'short' lvalue Var 0x5584a7aeaa10 'U_i_Tkill_delay' 'SWORD':'short'
    | |   | `-IntegerLiteral 0x5584a7aeec00 <col:30> 'int' 49
    | |   `-CompoundStmt 0x5584a7aeed20 <col:34, line:204:9>
    | |     |-UnaryOperator 0x5584a7aeec90 <line:202:13, col:28> 'SWORD':'short' postfix '++' cannot overflow
    | |     | `-DeclRefExpr 0x5584a7aeec70 <col:13> 'SWORD':'short' lvalue Var 0x5584a7aeaa10 'U_i_Tkill_delay' 'SWORD':'short'
    | |     `-BinaryOperator 0x5584a7aeed00 <line:48:31, line:203:32> 'BOOL':'unsigned char' '='
    | |       |-DeclRefExpr 0x5584a7aeeca8 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | |       `-ImplicitCastExpr 0x5584a7aeece8 <line:203:32> 'BOOL':'unsigned char' <IntegralCast>
    | |         `-IntegerLiteral 0x5584a7aeecc8 <col:32> 'int' 0
    | `-CompoundStmt 0x5584a7aeede8 <line:205:12, line:207:5>
    |   `-BinaryOperator 0x5584a7aeedc8 <line:206:9, col:27> 'SWORD':'short' '='
    |     |-DeclRefExpr 0x5584a7aeed70 <col:9> 'SWORD':'short' lvalue Var 0x5584a7aeaa10 'U_i_Tkill_delay' 'SWORD':'short'
    |     `-ImplicitCastExpr 0x5584a7aeedb0 <col:27> 'SWORD':'short' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aeed90 <col:27> 'int' 0
    |-BinaryOperator 0x5584a7aeee80 <line:77:28, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aeee28 <line:77:28> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeaac0 'U_b_Rkill' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aeee68 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aeee48 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x5584a7aeeef8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aeeea0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aeeee0 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aeeec0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea108 'I_b_mcr' 'BOOL':'unsigned char'
    |-BinaryOperator 0x5584a7aeef70 <line:80:34, line:218:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aeef18 <line:80:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeab70 'I_b_parOut_0001' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aeef58 <line:218:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x5584a7aeef38 <col:27> 'int' 0
    |-BinaryOperator 0x5584a7aeefe8 <line:83:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aeef90 <line:83:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeac20 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aeefd0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aeefb0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aef0e8 <line:220:5, line:222:5>
    | |-UnaryOperator 0x5584a7aef040 <line:220:8, line:72:25> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x5584a7aef028 <col:25> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x5584a7aef008 <col:25> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea960 'U_b_Rbon' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aef0d0 <line:220:26, line:222:5>
    |   `-BinaryOperator 0x5584a7aef0b0 <line:83:35, line:221:32> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aef058 <line:83:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeac20 'I_b_parThis_0001' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aef098 <line:221:32> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aef078 <col:32> 'int' 0
    |-IfStmt 0x5584a7aef1c8 <line:224:5, line:226:5>
    | |-ImplicitCastExpr 0x5584a7aef120 <line:82:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aef100 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeac20 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aef1b0 <line:224:33, line:226:5>
    |   `-BinaryOperator 0x5584a7aef190 <line:80:34, line:225:31> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aef138 <line:80:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeab70 'I_b_parOut_0001' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aef178 <line:225:31> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aef158 <col:31> 'int' 1
    |-BinaryOperator 0x5584a7aef238 <line:83:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aef1e0 <line:83:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeac20 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aef220 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aef200 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aef338 <line:228:5, line:230:5>
    | |-UnaryOperator 0x5584a7aef290 <line:228:8, line:85:26> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x5584a7aef278 <col:26> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x5584a7aef258 <col:26> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeacd0 'U_b_Rhigh' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aef320 <line:228:27, line:230:5>
    |   `-BinaryOperator 0x5584a7aef300 <line:83:35, line:229:32> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aef2a8 <line:83:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeac20 'I_b_parThis_0001' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aef2e8 <line:229:32> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aef2c8 <col:32> 'int' 0
    |-IfStmt 0x5584a7aef418 <line:232:5, line:234:5>
    | |-ImplicitCastExpr 0x5584a7aef370 <line:82:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aef350 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeac20 'I_b_parThis_0001' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aef400 <line:232:33, line:234:5>
    |   `-BinaryOperator 0x5584a7aef3e0 <line:80:34, line:233:31> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aef388 <line:80:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeab70 'I_b_parOut_0001' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aef3c8 <line:233:31> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aef3a8 <col:31> 'int' 1
    |-BinaryOperator 0x5584a7aef488 <line:48:31, line:79:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aef430 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aef470 <line:79:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aef450 <col:32> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeab70 'I_b_parOut_0001' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aef570 <line:237:5, line:239:5>
    | |-ImplicitCastExpr 0x5584a7aef4c8 <line:76:26> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aef4a8 <col:26> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeaac0 'U_b_Rkill' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aef558 <line:237:26, line:239:5>
    |   `-BinaryOperator 0x5584a7aef538 <line:48:31, line:238:28> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aef4e0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aef520 <line:238:28> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aef500 <col:28> 'int' 0
    |-BinaryOperator 0x5584a7aef5e0 <line:89:34, line:242:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aef588 <line:89:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aead80 'I_b_parOut_0002' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aef5c8 <line:242:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x5584a7aef5a8 <col:27> 'int' 0
    |-BinaryOperator 0x5584a7aef658 <line:92:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aef600 <line:92:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeae30 'I_b_parThis_0002' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aef640 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aef620 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x5584a7aef6d0 <line:86:28, line:91:33> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aef678 <line:86:28> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeacd0 'U_b_Rhigh' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aef6b8 <line:91:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aef698 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeae30 'I_b_parThis_0002' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aef7b8 <line:246:5, line:248:5>
    | |-ImplicitCastExpr 0x5584a7aef710 <line:91:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aef6f0 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeae30 'I_b_parThis_0002' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aef7a0 <line:246:33, line:248:5>
    |   `-BinaryOperator 0x5584a7aef780 <line:89:34, line:247:31> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aef728 <line:89:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aead80 'I_b_parOut_0002' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aef768 <line:247:31> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aef748 <col:31> 'int' 1
    |-BinaryOperator 0x5584a7aef828 <line:92:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aef7d0 <line:92:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeae30 'I_b_parThis_0002' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aef810 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aef7f0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |-CallExpr 0x5584a7aef908 <line:250:5, col:42> 'void'
    | |-ImplicitCastExpr 0x5584a7aef8f0 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5584a7aef848 <col:5> 'void (BOOL)' Function 0x5584a7aeb0a8 'Write_U_b_Ytx' 'void (BOOL)'
    | `-ImplicitCastExpr 0x5584a7aef930 <line:91:33> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aef868 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeae30 'I_b_parThis_0002' 'BOOL':'unsigned char'
    |-IfStmt 0x5584a7aefa10 <line:252:5, line:254:5>
    | |-ImplicitCastExpr 0x5584a7aef968 <line:91:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aef948 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeae30 'I_b_parThis_0002' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aef9f8 <line:252:33, line:254:5>
    |   `-BinaryOperator 0x5584a7aef9d8 <line:89:34, line:253:31> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aef980 <line:89:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aead80 'I_b_parOut_0002' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aef9c0 <line:253:31> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aef9a0 <col:31> 'int' 1
    |-BinaryOperator 0x5584a7aefa80 <line:48:31, line:88:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aefa28 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aefa68 <line:88:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aefa48 <col:32> 'BOOL':'unsigned char' lvalue Var 0x5584a7aead80 'I_b_parOut_0002' 'BOOL':'unsigned char'
    |-BinaryOperator 0x5584a7aefaf8 <line:48:31, line:44:24> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aefaa0 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aefae0 <line:44:24> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aefac0 <col:24> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea108 'I_b_mcr' 'BOOL':'unsigned char'
    |-BinaryOperator 0x5584a7aefb70 <line:100:34, line:264:27> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aefb18 <line:100:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb160 'I_b_parOut_0003' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aefb58 <line:264:27> 'BOOL':'unsigned char' <IntegralCast>
    |   `-IntegerLiteral 0x5584a7aefb38 <col:27> 'int' 0
    |-BinaryOperator 0x5584a7aefbe8 <line:103:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aefb90 <line:103:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb210 'I_b_parThis_0003' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aefbd0 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aefbb0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x5584a7aefc60 <line:266:5, col:20> 'SWORD':'short' '='
    | |-DeclRefExpr 0x5584a7aefc08 <col:5> 'SWORD':'short' lvalue Var 0x5584a7aeb2c0 'I_i_scratch2' 'SWORD':'short'
    | `-ImplicitCastExpr 0x5584a7aefc48 <col:20> 'SWORD':'short' <IntegralCast>
    |   `-IntegerLiteral 0x5584a7aefc28 <col:20> 'int' 1
    |-IfStmt 0x5584a7aefde0 <line:267:5, line:270:5> has_else
    | |-BinaryOperator 0x5584a7aefd20 <line:267:8, col:22> 'int' '=='
    | | |-ImplicitCastExpr 0x5584a7aefcf0 <col:8> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x5584a7aefcc0 <col:8> 'SWORD':'short' <LValueToRValue>
    | | |   `-DeclRefExpr 0x5584a7aefc80 <col:8> 'SWORD':'short' lvalue Var 0x5584a7aea8b0 'U_i_Cstate' 'SWORD':'short'
    | | `-ImplicitCastExpr 0x5584a7aefd08 <col:22> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x5584a7aefcd8 <col:22> 'SWORD':'short' <LValueToRValue>
    | |     `-DeclRefExpr 0x5584a7aefca0 <col:22> 'SWORD':'short' lvalue Var 0x5584a7aeb2c0 'I_i_scratch2' 'SWORD':'short'
    | |-CompoundStmt 0x5584a7aefd40 <col:36, line:268:5>
    | `-CompoundStmt 0x5584a7aefdc8 <col:12, line:270:5>
    |   `-BinaryOperator 0x5584a7aefda8 <line:103:35, line:269:32> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aefd50 <line:103:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb210 'I_b_parThis_0003' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aefd90 <line:269:32> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aefd70 <col:32> 'int' 0
    |-IfStmt 0x5584a7aefed0 <line:272:5, line:274:5>
    | |-ImplicitCastExpr 0x5584a7aefe28 <line:102:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7aefe08 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb210 'I_b_parThis_0003' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7aefeb8 <line:272:33, line:274:5>
    |   `-BinaryOperator 0x5584a7aefe98 <line:100:34, line:273:31> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7aefe40 <line:100:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb160 'I_b_parOut_0003' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7aefe80 <line:273:31> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7aefe60 <col:31> 'int' 1
    |-BinaryOperator 0x5584a7aeff40 <line:103:35, line:47:29> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7aefee8 <line:103:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb210 'I_b_parThis_0003' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7aeff28 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7aeff08 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    |-BinaryOperator 0x5584a7aeffb8 <line:277:5, col:20> 'SWORD':'short' '='
    | |-DeclRefExpr 0x5584a7aeff60 <col:5> 'SWORD':'short' lvalue Var 0x5584a7aeb2c0 'I_i_scratch2' 'SWORD':'short'
    | `-ImplicitCastExpr 0x5584a7aeffa0 <col:20> 'SWORD':'short' <IntegralCast>
    |   `-IntegerLiteral 0x5584a7aeff80 <col:20> 'int' 2
    |-IfStmt 0x5584a7af0138 <line:278:5, line:281:5> has_else
    | |-BinaryOperator 0x5584a7af0078 <line:278:8, col:22> 'int' '=='
    | | |-ImplicitCastExpr 0x5584a7af0048 <col:8> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x5584a7af0018 <col:8> 'SWORD':'short' <LValueToRValue>
    | | |   `-DeclRefExpr 0x5584a7aeffd8 <col:8> 'SWORD':'short' lvalue Var 0x5584a7aea8b0 'U_i_Cstate' 'SWORD':'short'
    | | `-ImplicitCastExpr 0x5584a7af0060 <col:22> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x5584a7af0030 <col:22> 'SWORD':'short' <LValueToRValue>
    | |     `-DeclRefExpr 0x5584a7aefff8 <col:22> 'SWORD':'short' lvalue Var 0x5584a7aeb2c0 'I_i_scratch2' 'SWORD':'short'
    | |-CompoundStmt 0x5584a7af0098 <col:36, line:279:5>
    | `-CompoundStmt 0x5584a7af0120 <col:12, line:281:5>
    |   `-BinaryOperator 0x5584a7af0100 <line:103:35, line:280:32> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7af00a8 <line:103:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb210 'I_b_parThis_0003' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7af00e8 <line:280:32> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7af00c8 <col:32> 'int' 0
    |-IfStmt 0x5584a7af0240 <line:283:5, line:285:5>
    | |-UnaryOperator 0x5584a7af0198 <line:283:8, line:50:25> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x5584a7af0180 <col:25> 'BOOL':'unsigned char' <LValueToRValue>
    | |   `-DeclRefExpr 0x5584a7af0160 <col:25> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea268 'U_b_Rosc' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7af0228 <line:283:26, line:285:5>
    |   `-BinaryOperator 0x5584a7af0208 <line:103:35, line:284:32> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7af01b0 <line:103:35> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb210 'I_b_parThis_0003' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7af01f0 <line:284:32> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7af01d0 <col:32> 'int' 0
    |-IfStmt 0x5584a7af0320 <line:288:5, line:290:5>
    | |-ImplicitCastExpr 0x5584a7af0278 <line:102:33> 'BOOL':'unsigned char' <LValueToRValue>
    | | `-DeclRefExpr 0x5584a7af0258 <col:33> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb210 'I_b_parThis_0003' 'BOOL':'unsigned char'
    | `-CompoundStmt 0x5584a7af0308 <line:288:33, line:290:5>
    |   `-BinaryOperator 0x5584a7af02e8 <line:100:34, line:289:31> 'BOOL':'unsigned char' '='
    |     |-DeclRefExpr 0x5584a7af0290 <line:100:34> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb160 'I_b_parOut_0003' 'BOOL':'unsigned char'
    |     `-ImplicitCastExpr 0x5584a7af02d0 <line:289:31> 'BOOL':'unsigned char' <IntegralCast>
    |       `-IntegerLiteral 0x5584a7af02b0 <col:31> 'int' 1
    |-BinaryOperator 0x5584a7af0390 <line:48:31, line:99:32> 'BOOL':'unsigned char' '='
    | |-DeclRefExpr 0x5584a7af0338 <line:48:31> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
    | `-ImplicitCastExpr 0x5584a7af0378 <line:99:32> 'BOOL':'unsigned char' <LValueToRValue>
    |   `-DeclRefExpr 0x5584a7af0358 <col:32> 'BOOL':'unsigned char' lvalue Var 0x5584a7aeb160 'I_b_parOut_0003' 'BOOL':'unsigned char'
    `-CallExpr 0x5584a7af0408 <line:293:5, col:39> 'void'
      |-ImplicitCastExpr 0x5584a7af03f0 <col:5> 'void (*)(BOOL)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5584a7af03b0 <col:5> 'void (BOOL)' Function 0x5584a7aeb538 'Write_U_b_Yled' 'void (BOOL)'
      `-ImplicitCastExpr 0x5584a7af0430 <line:47:29> 'BOOL':'unsigned char' <LValueToRValue>
        `-DeclRefExpr 0x5584a7af03d0 <col:29> 'BOOL':'unsigned char' lvalue Var 0x5584a7aea1b8 'I_b_rung_top' 'BOOL':'unsigned char'
TranslationUnitDecl 0x564ac1d084f8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x564ac1d08d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x564ac1d08a90 '__int128'
|-TypedefDecl 0x564ac1d08e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x564ac1d08ab0 'unsigned __int128'
|-TypedefDecl 0x564ac1d09110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x564ac1d08ee0 'struct __NSConstantString_tag'
|   `-Record 0x564ac1d08e60 '__NSConstantString_tag'
|-TypedefDecl 0x564ac1d091b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x564ac1d09170 'char *'
|   `-BuiltinType 0x564ac1d08590 'char'
|-TypedefDecl 0x564ac1d479c0 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x564ac1d09450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x564ac1d09290 'struct __va_list_tag'
|     `-Record 0x564ac1d09210 '__va_list_tag'
|-TypedefDecl 0x564ac1d47b50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x564ac1d08610 'long'
|-TypedefDecl 0x564ac1d47bc0 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x564ac1d086b0 'unsigned long'
|-TypedefDecl 0x564ac1d47c30 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x564ac1d085f0 'int'
|-RecordDecl 0x564ac1d47c88 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x564ac1d47d88 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x564ac1d47df0 <col:43, col:77> aligned
| |   `-ConstantExpr 0x564ac1d47dd8 <col:55, col:76> 'unsigned long'
| |     `-UnaryExprOrTypeTraitExpr 0x564ac1d47d50 <col:55, col:76> 'unsigned long' __alignof 'long long'
| `-FieldDecl 0x564ac1d47ea0 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x564ac1d47f08 <col:45, col:81> aligned
|     `-ConstantExpr 0x564ac1d47ef0 <col:57, col:80> 'unsigned long'
|       `-UnaryExprOrTypeTraitExpr 0x564ac1d47e68 <col:57, col:80> 'unsigned long' __alignof 'long double'
|-TypedefDecl 0x564ac1d47fd0 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x564ac1d47f70 'struct max_align_t' sugar
|   `-RecordType 0x564ac1d47d10 'max_align_t'
|     `-Record 0x564ac1d47c88 ''
|-TypedefDecl 0x564ac1d48078 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x564ac1d48040 '__builtin_va_list' sugar
|   |-Typedef 0x564ac1d479c0 '__builtin_va_list'
|   `-ConstantArrayType 0x564ac1d09450 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x564ac1d09290 'struct __va_list_tag'
|       `-Record 0x564ac1d09210 '__va_list_tag'
|-TypedefDecl 0x564ac1d48108 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x564ac1d480d0 '__gnuc_va_list' sugar
|   |-Typedef 0x564ac1d48078 '__gnuc_va_list'
|   `-TypedefType 0x564ac1d48040 '__builtin_va_list' sugar
|     |-Typedef 0x564ac1d479c0 '__builtin_va_list'
|     `-ConstantArrayType 0x564ac1d09450 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x564ac1d09290 'struct __va_list_tag'
|         `-Record 0x564ac1d09210 '__va_list_tag'
|-TypedefDecl 0x564ac1d48178 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x564ac1d085b0 'signed char'
|-TypedefDecl 0x564ac1d481e8 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x564ac1d085d0 'short'
|-TypedefDecl 0x564ac1d48258 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x564ac1d085f0 'int'
|-TypedefDecl 0x564ac1d482c8 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x564ac1d08610 'long'
|-TypedefDecl 0x564ac1d48338 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x564ac1d085b0 'signed char'
|-TypedefDecl 0x564ac1d483a8 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x564ac1d085d0 'short'
|-TypedefDecl 0x564ac1d48418 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x564ac1d085f0 'int'
|-TypedefDecl 0x564ac1d48488 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x564ac1d08610 'long'
|-TypedefDecl 0x564ac1d484f8 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x564ac1d085b0 'signed char'
|-TypedefDecl 0x564ac1d48568 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x564ac1d085d0 'short'
|-TypedefDecl 0x564ac1d485d8 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x564ac1d085f0 'int'
|-TypedefDecl 0x564ac1d48648 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x564ac1d08610 'long'
|-TypedefDecl 0x564ac1d486b8 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x564ac1d08650 'unsigned char'
|-TypedefDecl 0x564ac1d48728 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x564ac1d08670 'unsigned short'
|-TypedefDecl 0x564ac1d48798 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x564ac1d08690 'unsigned int'
|-TypedefDecl 0x564ac1d48808 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x564ac1d086b0 'unsigned long'
|-TypedefDecl 0x564ac1d48878 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x564ac1d08650 'unsigned char'
|-TypedefDecl 0x564ac1d488e8 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x564ac1d08670 'unsigned short'
|-TypedefDecl 0x564ac1d48958 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x564ac1d08690 'unsigned int'
|-TypedefDecl 0x564ac1d91628 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x564ac1d086b0 'unsigned long'
|-TypedefDecl 0x564ac1d91698 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x564ac1d08650 'unsigned char'
|-TypedefDecl 0x564ac1d91708 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x564ac1d08670 'unsigned short'
|-TypedefDecl 0x564ac1d91778 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x564ac1d08690 'unsigned int'
|-TypedefDecl 0x564ac1d917e8 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x564ac1d086b0 'unsigned long'
|-TypedefDecl 0x564ac1d91858 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x564ac1d08610 'long'
|-TypedefDecl 0x564ac1d918c8 <line:71:1, col:26> col:26 uintptr_t 'unsigned long'
| `-BuiltinType 0x564ac1d086b0 'unsigned long'
|-FunctionDecl 0x564ac1d91a88 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 used printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x564ac1d919b0 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x564ac1d91c90 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x564ac1d91c68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x564ac1d91c50 <col:29, col:31> 'const char *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x564ac1d91c30 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x564ac1d91be0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x564ac1d919b0 'fmt' 'const char *'
| `-FormatAttr 0x564ac1d91b30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x564ac1d91f40 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x564ac1d91d10 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x564ac1d91e28 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x564ac1d921b8 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x564ac1d920e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x564ac1d920c8 <col:29, col:31> 'const char *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x564ac1d920a8 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x564ac1d92058 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x564ac1d91d10 'fmt' 'const char *'
| | `-CStyleCastExpr 0x564ac1d92190 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x564ac1d92178 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x564ac1d92158 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x564ac1d92108 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x564ac1d91e28 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x564ac1d91ff0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x564ac1d924b0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x564ac1d92240 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x564ac1d922e8 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x564ac1d92368 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x564ac1d92568 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x564ac1d97298 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x564ac1d96fd8 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x564ac1d97050 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x564ac1d970d0 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x564ac1d97148 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x564ac1d97358 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x564ac1d978f0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x564ac1d97628 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x564ac1d976a8 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x564ac1d97728 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x564ac1d977a0 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x564ac1d979b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x564ac1d97b40 </vagrant/apps/plc_led_blink/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 used tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x564ac1d97d20 <line:12:1, col:40> col:9 used tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x564ac1d97c18 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x564ac1d97e68 <line:13:1, col:46> col:9 used tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x564ac1d97dd8 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x564ac1d98650 <line:14:1, col:39> col:6 tfm_gpio_disable_all_outputs 'void (void)'
|-FunctionDecl 0x564ac1d98810 <line:15:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x564ac1d98700 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d98a60 <line:16:1, col:64> col:6 tfm_gpio_set_update_hooks 'void (uint32_t, uint32_t)'
| |-ParmVarDecl 0x564ac1d988c8 <col:32, col:41> col:41 trigger 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564ac1d98940 <col:50, col:59> col:59 apply 'uint32_t':'unsigned int'
|-FunctionDecl 0x564ac1d98bb0 <line:18:1, col:43> col:9 used tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x564ac1d98b20 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d98ce0 <line:19:1, col:34> col:10 tfm_gpio_output_enabled 'uint32_t ()'
|-FunctionDecl 0x564ac1d98da0 <line:20:1, col:27> col:10 tfm_gpio_dataout 'uint32_t ()'
|-FunctionDecl 0x564ac1d98ee0 <line:21:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x564ac1d98e50 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d99028 <line:22:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x564ac1d98f98 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d99170 <line:23:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x564ac1d990e0 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d992b8 prev 0x564ac1d98810 <line:24:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x564ac1d99228 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x564ac1d99360 <line:38:9, line:42:1> line:38:9 struct definition
| |-FieldDecl 0x564ac1d99418 <line:39:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x564ac1d99478 <line:40:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x564ac1d99610 <line:41:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x564ac1d996c0 <line:38:1, line:42:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x564ac1d99660 'struct gpio_int_config' sugar
|   `-RecordType 0x564ac1d993e0 'gpio_int_config'
|     `-Record 0x564ac1d99360 ''
|-FunctionDecl 0x564ac1d99970 <line:44:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x564ac1d99740 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x564ac1d99850 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x564ac1d99ac0 <line:45:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x564ac1d99a30 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d99b88 <line:46:1, col:38> col:10 tfm_gpio_interrupts_enabled 'uint32_t ()'
|-FunctionDecl 0x564ac1d99d40 <line:47:1, col:57> col:10 tfm_gpio_interrupt_callback_for_pin 'uint32_t (uint8_t)'
| `-ParmVarDecl 0x564ac1d99c38 <col:46, col:54> col:54 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x564ac1d99e00 </vagrant/apps/plc_led_blink/./include/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x564ac1d085d0 'short'
|-TypedefDecl 0x564ac1d99e70 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x564ac1d08650 'unsigned char'
|-EnumDecl 0x564ac1d99ec8 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x564ac1d99fd0 <line:26:2, col:6> col:2 R 'int'
| | `-ConstantExpr 0x564ac1d99fb8 <col:6> 'int'
| |   `-IntegerLiteral 0x564ac1d99f98 <col:6> 'int' 2
| |-EnumConstantDecl 0x564ac1d9a058 <line:27:2, col:6> col:2 G 'int'
| | `-ConstantExpr 0x564ac1d9a040 <col:6> 'int'
| |   `-IntegerLiteral 0x564ac1d9a020 <col:6> 'int' 3
| `-EnumConstantDecl 0x564ac1d9a0e0 <line:28:2, col:6> col:2 B 'int'
|   `-ConstantExpr 0x564ac1d9a0c8 <col:6> 'int'
|     `-IntegerLiteral 0x564ac1d9a0a8 <col:6> 'int' 4
|-TypedefDecl 0x564ac1d9a190 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x564ac1d9a130 'enum LED' sugar
|   `-EnumType 0x564ac1d99f70 'LED'
|     `-Enum 0x564ac1d99ec8 ''
|-FunctionDecl 0x564ac1d9a400 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x564ac1d9a270 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x564ac1d9a2e8 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d9b8b0 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x564ac1d9a4c0 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d9b9f0 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x564ac1d9bb28 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x564ac1d9bc98 <line:41:1, col:25> col:6 used set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x564ac1d9bc08 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x564ac1da1640 <line:39:4, col:42>
|   `-ParagraphComment 0x564ac1da1610 <col:4, col:42>
|     `-TextComment 0x564ac1da15e0 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x564ac1d9bde0 <line:43:1, col:25> col:6 used clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x564ac1d9bd50 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d9c050 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x564ac1d9be98 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x564ac1d9bf38 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x564ac1d9c1e0 <line:47:1, col:26> col:6 used read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x564ac1d9c110 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x564ac1d9c3d0 <line:49:1, col:22> col:6 used LED_on 'void (LED)'
| `-ParmVarDecl 0x564ac1d9c2c8 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x564ac1d9c518 <line:51:1, col:23> col:6 used LED_off 'void (LED)'
| `-ParmVarDecl 0x564ac1d9c488 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x564ac1d9c6e0 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x564ac1d9c5d0 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x564ac1d9e180 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x564ac1d9c798 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x564ac1d9c810 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x564ac1d9e2d0 <line:57:1, col:29> col:6 read_button 'BOOL (uint8_t)'
| `-ParmVarDecl 0x564ac1d9e240 <col:18, col:26> col:26 pin 'uint8_t':'unsigned char'
|-VarDecl 0x564ac1d9e388 <./src/plc_platform.c:6:1, col:33> col:17 used gpio_in_table 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x564ac1d9e410 <col:33> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x564ac1d9e3f0 <col:33> 'int' 0
|-VarDecl 0x564ac1d9e438 <line:7:1, col:34> col:17 used gpio_out_table 'uint32_t':'unsigned int' static cinit
| `-ImplicitCastExpr 0x564ac1d9e4c0 <col:34> 'uint32_t':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x564ac1d9e4a0 <col:34> 'int' 0
|-VarDecl 0x564ac1d9e4e8 <line:10:1, col:10> col:10 cntr 'uint32_t':'unsigned int'
|-FunctionDecl 0x564ac1d9e670 prev 0x564ac1d9a400 <line:12:1, line:20:1> line:12:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x564ac1d9e560 <col:25, col:34> col:34 used pins 'uint8_t *'
| |-ParmVarDecl 0x564ac1d9e5d8 <col:40, col:48> col:48 used num_pins 'uint8_t':'unsigned char'
| `-CompoundStmt 0x564ac1d9edf8 <col:58, line:20:1>
|   |-DeclStmt 0x564ac1d9e7d0 <line:13:2, col:18>
|   | `-VarDecl 0x564ac1d9e730 <col:2, col:17> col:11 used out 'uint32_t':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x564ac1d9e7b8 <col:17> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x564ac1d9e798 <col:17> 'int' 0
|   |-ForStmt 0x564ac1d9eb48 <line:14:2, line:16:2>
|   | |-DeclStmt 0x564ac1d9e898 <line:14:7, col:20>
|   | | `-VarDecl 0x564ac1d9e7f8 <col:7, col:19> col:15 used i 'uint8_t':'unsigned char' cinit
|   | |   `-ImplicitCastExpr 0x564ac1d9e880 <col:19> 'uint8_t':'unsigned char' <IntegralCast>
|   | |     `-IntegerLiteral 0x564ac1d9e860 <col:19> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x564ac1d9e950 <col:22, col:26> 'int' '<'
|   | | |-ImplicitCastExpr 0x564ac1d9e920 <col:22> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x564ac1d9e8f0 <col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x564ac1d9e8b0 <col:22> 'uint8_t':'unsigned char' lvalue Var 0x564ac1d9e7f8 'i' 'uint8_t':'unsigned char'
|   | | `-ImplicitCastExpr 0x564ac1d9e938 <col:26> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x564ac1d9e908 <col:26> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x564ac1d9e8d0 <col:26> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1d9e5d8 'num_pins' 'uint8_t':'unsigned char'
|   | |-UnaryOperator 0x564ac1d9e990 <col:36, col:37> 'uint8_t':'unsigned char' postfix '++' cannot overflow
|   | | `-DeclRefExpr 0x564ac1d9e970 <col:36> 'uint8_t':'unsigned char' lvalue Var 0x564ac1d9e7f8 'i' 'uint8_t':'unsigned char'
|   | `-CompoundStmt 0x564ac1d9eb30 <col:41, line:16:2>
|   |   `-CompoundAssignOperator 0x564ac1d9eb00 <line:15:3, col:23> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |     |-DeclRefExpr 0x564ac1d9e9a8 <col:3> 'uint32_t':'unsigned int' lvalue Var 0x564ac1d9e730 'out' 'uint32_t':'unsigned int'
|   |     `-ImplicitCastExpr 0x564ac1d9eae8 <col:10, col:23> 'unsigned int' <IntegralCast>
|   |       `-ParenExpr 0x564ac1d9eac8 <col:10, col:23> 'int'
|   |         `-BinaryOperator 0x564ac1d9eaa8 <col:11, col:22> 'int' '<<'
|   |           |-IntegerLiteral 0x564ac1d9e9c8 <col:11> 'int' 1
|   |           `-ImplicitCastExpr 0x564ac1d9ea90 <col:16, col:22> 'int' <IntegralCast>
|   |             `-ImplicitCastExpr 0x564ac1d9ea78 <col:16, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|   |               `-ArraySubscriptExpr 0x564ac1d9ea58 <col:16, col:22> 'uint8_t':'unsigned char' lvalue
|   |                 |-ImplicitCastExpr 0x564ac1d9ea28 <col:16> 'uint8_t *' <LValueToRValue>
|   |                 | `-DeclRefExpr 0x564ac1d9e9e8 <col:16> 'uint8_t *' lvalue ParmVar 0x564ac1d9e560 'pins' 'uint8_t *'
|   |                 `-ImplicitCastExpr 0x564ac1d9ea40 <col:21> 'uint8_t':'unsigned char' <LValueToRValue>
|   |                   `-DeclRefExpr 0x564ac1d9ea08 <col:21> 'uint8_t':'unsigned char' lvalue Var 0x564ac1d9e7f8 'i' 'uint8_t':'unsigned char'
|   |-CallExpr 0x564ac1d9ec78 <line:17:2, col:38> 'void'
|   | |-ImplicitCastExpr 0x564ac1d9ec60 <col:2> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x564ac1d9eb80 <col:2> 'void (const char *, ...)' Function 0x564ac1d91a88 'printk' 'void (const char *, ...)'
|   | |-ImplicitCastExpr 0x564ac1d9ecc0 <col:9> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x564ac1d9eca8 <col:9> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x564ac1d9ebe0 <col:9> 'char [22]' lvalue "Enabling Outputs: %x\n"
|   | `-ImplicitCastExpr 0x564ac1d9ecd8 <col:35> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x564ac1d9ec10 <col:35> 'uint32_t':'unsigned int' lvalue Var 0x564ac1d9e730 'out' 'uint32_t':'unsigned int'
|   |-CallExpr 0x564ac1d9eda8 <line:18:2, col:29> 'uint8_t':'unsigned char'
|   | |-ImplicitCastExpr 0x564ac1d9ed90 <col:2> 'uint8_t (*)(uint32_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x564ac1d9ecf0 <col:2> 'uint8_t (uint32_t)' Function 0x564ac1d97e68 'tfm_gpio_enable_outputs' 'uint8_t (uint32_t)'
|   | `-ImplicitCastExpr 0x564ac1d9edd0 <col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x564ac1d9ed10 <col:26> 'uint32_t':'unsigned int' lvalue Var 0x564ac1d9e730 'out' 'uint32_t':'unsigned int'
|   `-ReturnStmt 0x564ac1d9ede8 <line:19:2>
|-FunctionDecl 0x564ac1d9eed0 prev 0x564ac1d9b8b0 <line:22:1, line:27:1> line:22:6 enable_pin_output 'void (uint8_t)'
| |-ParmVarDecl 0x564ac1d9ee40 <col:24, col:32> col:32 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x564ac1d9f3d8 <col:37, line:27:1>
|   |-IfStmt 0x564ac1d9f3b0 <line:23:2, line:25:2>
|   | |-BinaryOperator 0x564ac1d9f0b0 <line:23:6, col:37> 'int' '!='
|   | | |-ImplicitCastExpr 0x564ac1d9f098 <col:6, col:32> 'int' <IntegralCast>
|   | | | `-CallExpr 0x564ac1d9f038 <col:6, col:32> 'uint8_t':'unsigned char'
|   | | |   |-ImplicitCastExpr 0x564ac1d9f020 <col:6> 'uint8_t (*)(uint8_t)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x564ac1d9ef78 <col:6> 'uint8_t (uint8_t)' Function 0x564ac1d98bb0 'tfm_gpio_enable_output' 'uint8_t (uint8_t)'
|   | | |   `-ImplicitCastExpr 0x564ac1d9f060 <col:29> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x564ac1d9ef98 <col:29> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1d9ee40 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x564ac1d9f078 <col:37> 'int' 0
|   | `-CompoundStmt 0x564ac1d9f398 <col:40, line:25:2>
|   |   `-CallExpr 0x564ac1d9f340 <line:24:3, col:37> 'void'
|   |     |-ImplicitCastExpr 0x564ac1d9f328 <col:3> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564ac1d9f290 <col:3> 'void (const char *, ...)' Function 0x564ac1d91a88 'printk' 'void (const char *, ...)'
|   |     `-ImplicitCastExpr 0x564ac1d9f380 <col:10> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x564ac1d9f368 <col:10> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x564ac1d9f2f0 <col:10> 'char [26]' lvalue "Error! Cannot Enable Pin!"
|   `-ReturnStmt 0x564ac1d9f3c8 <line:26:2>
|-FunctionDecl 0x564ac1d9f490 prev 0x564ac1d9b9f0 <line:29:1, line:36:1> line:29:6 read_in_table 'void (void)'
| `-CompoundStmt 0x564ac1d9f638 <col:26, line:36:1>
|   |-BinaryOperator 0x564ac1d9f608 <line:30:2, col:36> 'uint32_t':'unsigned int' '='
|   | |-DeclRefExpr 0x564ac1d9f530 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x564ac1d9e388 'gpio_in_table' 'uint32_t':'unsigned int'
|   | `-CallExpr 0x564ac1d9f5e8 <col:18, col:36> 'uint32_t':'unsigned int'
|   |   `-ImplicitCastExpr 0x564ac1d9f5d0 <col:18> 'uint32_t (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x564ac1d9f550 <col:18> 'uint32_t (void)' Function 0x564ac1d97b40 'tfm_gpio_read_all' 'uint32_t (void)'
|   `-ReturnStmt 0x564ac1d9f628 <line:35:2>
|-FunctionDecl 0x564ac1d9f6f0 prev 0x564ac1d9bb28 <line:38:1, line:46:1> line:38:6 write_out_table 'void (void)'
| `-CompoundStmt 0x564ac1d9f838 <col:28, line:46:1>
|   |-CallExpr 0x564ac1d9f7e8 <line:44:2, col:35> 'uint8_t':'unsigned char'
|   | |-ImplicitCastExpr 0x564ac1d9f7d0 <col:2> 'uint8_t (*)(uint32_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x564ac1d9f790 <col:2> 'uint8_t (uint32_t)' Function 0x564ac1d97d20 'tfm_gpio_write_all' 'uint8_t (uint32_t)'
|   | `-ImplicitCastExpr 0x564ac1d9f810 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x564ac1d9f7b0 <col:21> 'uint32_t':'unsigned int' lvalue Var 0x564ac1d9e438 'gpio_out_table' 'uint32_t':'unsigned int'
|   `-ReturnStmt 0x564ac1d9f828 <line:45:2>
|-FunctionDecl 0x564ac1d9f8f8 prev 0x564ac1d9bc98 <line:48:1, line:52:1> line:48:6 used set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x564ac1d9f868 <col:14, col:22> col:22 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x564ac1d9fb98 <col:27, line:52:1>
|   |-IfStmt 0x564ac1d9fa58 <line:49:2, col:26>
|   | |-BinaryOperator 0x564ac1d9fa10 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x564ac1d9f9f8 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x564ac1d9f9e0 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x564ac1d9f9a0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1d9f868 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x564ac1d9f9c0 <col:12> 'int' 15
|   | `-CompoundStmt 0x564ac1d9fa40 <col:16, col:26>
|   |   `-ReturnStmt 0x564ac1d9fa30 <col:18>
|   |-CompoundAssignOperator 0x564ac1d9fb58 <line:50:2, col:29> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x564ac1d9fa70 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x564ac1d9e438 'gpio_out_table' 'uint32_t':'unsigned int'
|   | `-ImplicitCastExpr 0x564ac1d9fb40 <col:20, col:29> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x564ac1d9fb20 <col:20, col:29> 'int'
|   |     `-BinaryOperator 0x564ac1d9fb00 <col:21, col:26> 'int' '<<'
|   |       |-IntegerLiteral 0x564ac1d9fa90 <col:21> 'int' 1
|   |       `-ImplicitCastExpr 0x564ac1d9fae8 <col:26> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x564ac1d9fad0 <col:26> 'uint8_t':'unsigned char' <LValueToRValue>
|   |           `-DeclRefExpr 0x564ac1d9fab0 <col:26> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1d9f868 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x564ac1d9fb88 <line:51:2>
|-FunctionDecl 0x564ac1d9fc60 prev 0x564ac1d9bde0 <line:54:1, line:58:1> line:54:6 used clr_pin 'void (uint8_t)'
| |-ParmVarDecl 0x564ac1d9fbd0 <col:14, col:22> col:22 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x564ac1d9ff18 <col:27, line:58:1>
|   |-IfStmt 0x564ac1d9fdc0 <line:55:2, col:26>
|   | |-BinaryOperator 0x564ac1d9fd78 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x564ac1d9fd60 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x564ac1d9fd48 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x564ac1d9fd08 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1d9fbd0 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x564ac1d9fd28 <col:12> 'int' 15
|   | `-CompoundStmt 0x564ac1d9fda8 <col:16, col:26>
|   |   `-ReturnStmt 0x564ac1d9fd98 <col:18>
|   |-CompoundAssignOperator 0x564ac1d9fed8 <line:56:2, col:30> 'uint32_t':'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x564ac1d9fdd8 <col:2> 'uint32_t':'unsigned int' lvalue Var 0x564ac1d9e438 'gpio_out_table' 'uint32_t':'unsigned int'
|   | `-ImplicitCastExpr 0x564ac1d9fec0 <col:20, col:30> 'unsigned int' <IntegralCast>
|   |   `-UnaryOperator 0x564ac1d9fea8 <col:20, col:30> 'int' prefix '~' cannot overflow
|   |     `-ParenExpr 0x564ac1d9fe88 <col:21, col:30> 'int'
|   |       `-BinaryOperator 0x564ac1d9fe68 <col:22, col:27> 'int' '<<'
|   |         |-IntegerLiteral 0x564ac1d9fdf8 <col:22> 'int' 1
|   |         `-ImplicitCastExpr 0x564ac1d9fe50 <col:27> 'int' <IntegralCast>
|   |           `-ImplicitCastExpr 0x564ac1d9fe38 <col:27> 'uint8_t':'unsigned char' <LValueToRValue>
|   |             `-DeclRefExpr 0x564ac1d9fe18 <col:27> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1d9fbd0 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x564ac1d9ff08 <line:57:2>
|-FunctionDecl 0x564ac1da0060 prev 0x564ac1d9c050 <line:60:1, line:67:1> line:60:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x564ac1d9ff50 <col:16, col:24> col:24 used pin 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x564ac1d9ffc8 <col:29, col:34> col:34 used val 'BOOL':'unsigned char'
| `-CompoundStmt 0x564ac1da0368 <col:39, line:67:1>
|   |-IfStmt 0x564ac1da0330 <line:61:2, line:65:2> has_else
|   | |-ImplicitCastExpr 0x564ac1da0130 <line:61:6> 'BOOL':'unsigned char' <LValueToRValue>
|   | | `-DeclRefExpr 0x564ac1da0110 <col:6> 'BOOL':'unsigned char' lvalue ParmVar 0x564ac1d9ffc8 'val' 'BOOL':'unsigned char'
|   | |-CompoundStmt 0x564ac1da0248 <col:11, line:63:2>
|   | | `-CallExpr 0x564ac1da0208 <line:62:3, col:14> 'void'
|   | |   |-ImplicitCastExpr 0x564ac1da01f0 <col:3> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x564ac1da0148 <col:3> 'void (uint8_t)' Function 0x564ac1d9f8f8 'set_pin' 'void (uint8_t)'
|   | |   `-ImplicitCastExpr 0x564ac1da0230 <col:11> 'uint8_t':'unsigned char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x564ac1da0168 <col:11> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1d9ff50 'pin' 'uint8_t':'unsigned char'
|   | `-CompoundStmt 0x564ac1da0318 <line:63:9, line:65:2>
|   |   `-CallExpr 0x564ac1da02d8 <line:64:3, col:14> 'void'
|   |     |-ImplicitCastExpr 0x564ac1da02c0 <col:3> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564ac1da0260 <col:3> 'void (uint8_t)' Function 0x564ac1d9fc60 'clr_pin' 'void (uint8_t)'
|   |     `-ImplicitCastExpr 0x564ac1da0300 <col:11> 'uint8_t':'unsigned char' <LValueToRValue>
|   |       `-DeclRefExpr 0x564ac1da02a0 <col:11> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1d9ff50 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x564ac1da0358 <line:66:2>
|-FunctionDecl 0x564ac1da0428 prev 0x564ac1d9c1e0 <line:69:1, line:72:1> line:69:6 used read_pin 'BOOL (uint8_t)'
| |-ParmVarDecl 0x564ac1da0398 <col:15, col:23> col:23 used pin 'uint8_t':'unsigned char'
| `-CompoundStmt 0x564ac1da0778 <col:28, line:72:1>
|   |-IfStmt 0x564ac1da05c0 <line:70:2, col:30>
|   | |-BinaryOperator 0x564ac1da0540 <col:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x564ac1da0528 <col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x564ac1da0510 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x564ac1da04d0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1da0398 'pin' 'uint8_t':'unsigned char'
|   | | `-IntegerLiteral 0x564ac1da04f0 <col:12> 'int' 15
|   | `-CompoundStmt 0x564ac1da05a8 <col:16, col:30>
|   |   `-ReturnStmt 0x564ac1da0598 <col:18, col:25>
|   |     `-ImplicitCastExpr 0x564ac1da0580 <col:25> 'uint8_t':'unsigned char' <LValueToRValue>
|   |       `-DeclRefExpr 0x564ac1da0560 <col:25> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1da0398 'pin' 'uint8_t':'unsigned char'
|   `-ReturnStmt 0x564ac1da0768 <line:71:2, col:41>
|     `-ImplicitCastExpr 0x564ac1da0750 <col:9, col:41> 'BOOL':'unsigned char' <IntegralCast>
|       `-BinaryOperator 0x564ac1da0730 <col:9, col:41> 'int' '%'
|         |-ImplicitCastExpr 0x564ac1da0718 <col:9, col:37> 'int' <IntegralCast>
|         | `-CStyleCastExpr 0x564ac1da06d0 <col:9, col:37> 'BOOL':'unsigned char' <IntegralCast>
|         |   `-ParenExpr 0x564ac1da06b0 <col:16, col:37> 'uint32_t':'unsigned int'
|         |     `-BinaryOperator 0x564ac1da0660 <col:17, col:34> 'uint32_t':'unsigned int' '>>'
|         |       |-ImplicitCastExpr 0x564ac1da0618 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x564ac1da05d8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x564ac1d9e388 'gpio_in_table' 'uint32_t':'unsigned int'
|         |       `-ImplicitCastExpr 0x564ac1da0648 <col:34> 'int' <IntegralCast>
|         |         `-ImplicitCastExpr 0x564ac1da0630 <col:34> 'uint8_t':'unsigned char' <LValueToRValue>
|         |           `-DeclRefExpr 0x564ac1da05f8 <col:34> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1da0398 'pin' 'uint8_t':'unsigned char'
|         `-IntegerLiteral 0x564ac1da06f8 <col:41> 'int' 2
|-FunctionDecl 0x564ac1da0838 prev 0x564ac1d9c3d0 <line:74:1, line:77:1> line:74:6 used LED_on 'void (LED)'
| |-ParmVarDecl 0x564ac1da07a8 <col:13, col:17> col:17 used color 'LED':'LED'
| `-CompoundStmt 0x564ac1da09a0 <col:24, line:77:1>
|   |-CallExpr 0x564ac1da0938 <line:75:2, col:15> 'void'
|   | |-ImplicitCastExpr 0x564ac1da0920 <col:2> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x564ac1da08e0 <col:2> 'void (uint8_t)' Function 0x564ac1d9fc60 'clr_pin' 'void (uint8_t)'
|   | `-ImplicitCastExpr 0x564ac1da0978 <col:10> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x564ac1da0960 <col:10> 'LED':'LED' <LValueToRValue>
|   |     `-DeclRefExpr 0x564ac1da0900 <col:10> 'LED':'LED' lvalue ParmVar 0x564ac1da07a8 'color' 'LED':'LED'
|   `-ReturnStmt 0x564ac1da0990 <line:76:2>
|-FunctionDecl 0x564ac1da0a60 prev 0x564ac1d9c518 <line:79:1, line:82:1> line:79:6 used LED_off 'void (LED)'
| |-ParmVarDecl 0x564ac1da09d0 <col:14, col:18> col:18 used color 'LED':'LED'
| `-CompoundStmt 0x564ac1da0bc8 <col:25, line:82:1>
|   |-CallExpr 0x564ac1da0b60 <line:80:2, col:15> 'void'
|   | |-ImplicitCastExpr 0x564ac1da0b48 <col:2> 'void (*)(uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x564ac1da0b08 <col:2> 'void (uint8_t)' Function 0x564ac1d9f8f8 'set_pin' 'void (uint8_t)'
|   | `-ImplicitCastExpr 0x564ac1da0ba0 <col:10> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x564ac1da0b88 <col:10> 'LED':'LED' <LValueToRValue>
|   |     `-DeclRefExpr 0x564ac1da0b28 <col:10> 'LED':'LED' lvalue ParmVar 0x564ac1da09d0 'color' 'LED':'LED'
|   `-ReturnStmt 0x564ac1da0bb8 <line:81:2>
|-FunctionDecl 0x564ac1da0c88 prev 0x564ac1d9c6e0 <line:84:1, line:86:1> line:84:6 read_LED 'BOOL (LED)'
| |-ParmVarDecl 0x564ac1da0bf8 <col:15, col:19> col:19 used color 'LED':'LED'
| `-CompoundStmt 0x564ac1da0e58 <col:26, line:86:1>
|   `-ReturnStmt 0x564ac1da0e48 <line:85:2, col:30>
|     `-CStyleCastExpr 0x564ac1da0e20 <col:9, col:30> 'BOOL':'unsigned char' <NoOp>
|       `-CallExpr 0x564ac1da0db8 <col:16, col:30> 'BOOL':'unsigned char'
|         |-ImplicitCastExpr 0x564ac1da0da0 <col:16> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x564ac1da0d30 <col:16> 'BOOL (uint8_t)' Function 0x564ac1da0428 'read_pin' 'BOOL (uint8_t)'
|         `-ImplicitCastExpr 0x564ac1da0df8 <col:25> 'uint8_t':'unsigned char' <IntegralCast>
|           `-ImplicitCastExpr 0x564ac1da0de0 <col:25> 'LED':'LED' <LValueToRValue>
|             `-DeclRefExpr 0x564ac1da0d50 <col:25> 'LED':'LED' lvalue ParmVar 0x564ac1da0bf8 'color' 'LED':'LED'
|-FunctionDecl 0x564ac1da0f90 prev 0x564ac1d9e180 <line:88:1, line:94:1> line:88:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x564ac1da0e80 <col:16, col:20> col:20 used color 'LED':'LED'
| |-ParmVarDecl 0x564ac1da0ef8 <col:27, col:32> col:32 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x564ac1da1378 <col:35, line:94:1>
|   `-IfStmt 0x564ac1da1350 <line:89:2, line:93:2> has_else
|     |-BinaryOperator 0x564ac1da10b0 <line:89:6, col:11> 'int' '=='
|     | |-ImplicitCastExpr 0x564ac1da1098 <col:6> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x564ac1da1080 <col:6> 'BOOL':'unsigned char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564ac1da1040 <col:6> 'BOOL':'unsigned char' lvalue ParmVar 0x564ac1da0ef8 'v' 'BOOL':'unsigned char'
|     | `-IntegerLiteral 0x564ac1da1060 <col:11> 'int' 0
|     |-CompoundStmt 0x564ac1da11c8 <col:14, line:91:2>
|     | `-CallExpr 0x564ac1da1188 <line:90:3, col:16> 'void'
|     |   |-ImplicitCastExpr 0x564ac1da1170 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x564ac1da10d0 <col:3> 'void (LED)' Function 0x564ac1da0a60 'LED_off' 'void (LED)'
|     |   `-ImplicitCastExpr 0x564ac1da11b0 <col:11> 'LED':'LED' <LValueToRValue>
|     |     `-DeclRefExpr 0x564ac1da10f0 <col:11> 'LED':'LED' lvalue ParmVar 0x564ac1da0e80 'color' 'LED':'LED'
|     `-CompoundStmt 0x564ac1da1278 <line:91:9, line:93:2>
|       `-CallExpr 0x564ac1da1238 <line:92:3, col:15> 'void'
|         |-ImplicitCastExpr 0x564ac1da1220 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x564ac1da11e0 <col:3> 'void (LED)' Function 0x564ac1da0838 'LED_on' 'void (LED)'
|         `-ImplicitCastExpr 0x564ac1da1260 <col:10> 'LED':'LED' <LValueToRValue>
|           `-DeclRefExpr 0x564ac1da1200 <col:10> 'LED':'LED' lvalue ParmVar 0x564ac1da0e80 'color' 'LED':'LED'
`-FunctionDecl 0x564ac1da1430 prev 0x564ac1d9e2d0 <line:96:1, line:98:1> line:96:6 read_button 'BOOL (uint8_t)'
  |-ParmVarDecl 0x564ac1da13a0 <col:18, col:26> col:26 used pin 'uint8_t':'unsigned char'
  `-CompoundStmt 0x564ac1da1580 <col:31, line:98:1>
    `-ReturnStmt 0x564ac1da1570 <line:97:2, col:21>
      `-CallExpr 0x564ac1da1530 <col:9, col:21> 'BOOL':'unsigned char'
        |-ImplicitCastExpr 0x564ac1da1518 <col:9> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x564ac1da14d8 <col:9> 'BOOL (uint8_t)' Function 0x564ac1da0428 'read_pin' 'BOOL (uint8_t)'
        `-ImplicitCastExpr 0x564ac1da1558 <col:18> 'uint8_t':'unsigned char' <LValueToRValue>
          `-DeclRefExpr 0x564ac1da14f8 <col:18> 'uint8_t':'unsigned char' lvalue ParmVar 0x564ac1da13a0 'pin' 'uint8_t':'unsigned char'
TranslationUnitDecl 0x5626fbafd488 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5626fbafdd28 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5626fbafda20 '__int128'
|-TypedefDecl 0x5626fbafdd98 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5626fbafda40 'unsigned __int128'
|-TypedefDecl 0x5626fbafe0a0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5626fbafde70 'struct __NSConstantString_tag'
|   `-Record 0x5626fbafddf0 '__NSConstantString_tag'
|-TypedefDecl 0x5626fbafe148 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5626fbafe100 'char *'
|   `-BuiltinType 0x5626fbafd520 'char'
|-TypedefDecl 0x5626fbb3c270 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5626fbafe3e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5626fbafe220 'struct __va_list_tag'
|     `-Record 0x5626fbafe1a0 '__va_list_tag'
|-TypedefDecl 0x5626fbb3c400 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x5626fbafd5a0 'long'
|-TypedefDecl 0x5626fbb3c470 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x5626fbafd640 'unsigned long'
|-TypedefDecl 0x5626fbb3c4e0 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x5626fbafd580 'int'
|-RecordDecl 0x5626fbb3c538 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x5626fbb3c638 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x5626fbb3c6a0 <col:43, col:77> aligned
| |   `-ConstantExpr 0x5626fbb3c688 <col:55, col:76> 'unsigned long'
| |     `-UnaryExprOrTypeTraitExpr 0x5626fbb3c600 <col:55, col:76> 'unsigned long' __alignof 'long long'
| `-FieldDecl 0x5626fbb3c750 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x5626fbb3c7b8 <col:45, col:81> aligned
|     `-ConstantExpr 0x5626fbb3c7a0 <col:57, col:80> 'unsigned long'
|       `-UnaryExprOrTypeTraitExpr 0x5626fbb3c718 <col:57, col:80> 'unsigned long' __alignof 'long double'
|-TypedefDecl 0x5626fbb3c880 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x5626fbb3c820 'struct max_align_t' sugar
|   `-RecordType 0x5626fbb3c5c0 'max_align_t'
|     `-Record 0x5626fbb3c538 ''
|-TypedefDecl 0x5626fbb3c928 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x5626fbb3c8f0 '__builtin_va_list' sugar
|   |-Typedef 0x5626fbb3c270 '__builtin_va_list'
|   `-ConstantArrayType 0x5626fbafe3e0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x5626fbafe220 'struct __va_list_tag'
|       `-Record 0x5626fbafe1a0 '__va_list_tag'
|-TypedefDecl 0x5626fbb3c9b8 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x5626fbb3c980 '__gnuc_va_list' sugar
|   |-Typedef 0x5626fbb3c928 '__gnuc_va_list'
|   `-TypedefType 0x5626fbb3c8f0 '__builtin_va_list' sugar
|     |-Typedef 0x5626fbb3c270 '__builtin_va_list'
|     `-ConstantArrayType 0x5626fbafe3e0 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x5626fbafe220 'struct __va_list_tag'
|         `-Record 0x5626fbafe1a0 '__va_list_tag'
|-TypedefDecl 0x5626fbb3ca28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x5626fbafd540 'signed char'
|-TypedefDecl 0x5626fbb3ca98 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x5626fbafd560 'short'
|-TypedefDecl 0x5626fbb3cb08 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x5626fbafd580 'int'
|-TypedefDecl 0x5626fbb3cb78 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x5626fbafd5a0 'long'
|-TypedefDecl 0x5626fbb3cbe8 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x5626fbafd540 'signed char'
|-TypedefDecl 0x5626fbb3cc58 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x5626fbafd560 'short'
|-TypedefDecl 0x5626fbb3ccc8 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x5626fbafd580 'int'
|-TypedefDecl 0x5626fbb3cd38 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x5626fbafd5a0 'long'
|-TypedefDecl 0x5626fbb3cda8 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x5626fbafd540 'signed char'
|-TypedefDecl 0x5626fbb3ce18 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x5626fbafd560 'short'
|-TypedefDecl 0x5626fbb3ce88 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x5626fbafd580 'int'
|-TypedefDecl 0x5626fbb3cef8 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x5626fbafd5a0 'long'
|-TypedefDecl 0x5626fbb3cf68 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x5626fbafd5e0 'unsigned char'
|-TypedefDecl 0x5626fbb3cfd8 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x5626fbafd600 'unsigned short'
|-TypedefDecl 0x5626fbb3d048 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x5626fbafd620 'unsigned int'
|-TypedefDecl 0x5626fbb3d0b8 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x5626fbafd640 'unsigned long'
|-TypedefDecl 0x5626fbb3d128 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x5626fbafd5e0 'unsigned char'
|-TypedefDecl 0x5626fbb3d198 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x5626fbafd600 'unsigned short'
|-TypedefDecl 0x5626fbb3d208 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x5626fbafd620 'unsigned int'
|-TypedefDecl 0x5626fbb85ed8 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x5626fbafd640 'unsigned long'
|-TypedefDecl 0x5626fbb85f48 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x5626fbafd5e0 'unsigned char'
|-TypedefDecl 0x5626fbb85fb8 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x5626fbafd600 'unsigned short'
|-TypedefDecl 0x5626fbb86028 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x5626fbafd620 'unsigned int'
|-TypedefDecl 0x5626fbb86098 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x5626fbafd640 'unsigned long'
|-TypedefDecl 0x5626fbb86108 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x5626fbafd5a0 'long'
|-TypedefDecl 0x5626fbb86178 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x5626fbafd640 'unsigned long'
|-FunctionDecl 0x5626fbb86338 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x5626fbb86260 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x5626fbb86540 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x5626fbb86518 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5626fbb86500 <col:29, col:31> 'const char *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5626fbb864e0 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x5626fbb86490 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x5626fbb86260 'fmt' 'const char *'
| `-FormatAttr 0x5626fbb863e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x5626fbb867f0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x5626fbb865c0 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x5626fbb866d8 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x5626fbb86a68 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x5626fbb86990 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5626fbb86978 <col:29, col:31> 'const char *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5626fbb86958 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x5626fbb86908 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x5626fbb865c0 'fmt' 'const char *'
| | `-CStyleCastExpr 0x5626fbb86a40 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5626fbb86a28 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5626fbb86a08 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x5626fbb869b8 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x5626fbb866d8 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5626fbb868a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x5626fbb86d60 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x5626fbb86af0 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x5626fbb86b98 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbb86c18 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x5626fbb86e18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x5626fbb8bb48 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5626fbb8b888 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x5626fbb8b900 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbb8b980 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x5626fbb8b9f8 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5626fbb8bc08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x5626fbb8c1a0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5626fbb8bed8 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x5626fbb8bf58 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x5626fbb8bfd8 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x5626fbb8c050 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5626fbb8c260 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-TypedefDecl 0x5626fbb8c340 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x5626fbafd540 'signed char'
|-TypedefDecl 0x5626fbb8c3b0 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x5626fbafd560 'short'
|-TypedefDecl 0x5626fbb8c420 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x5626fbafd580 'int'
|-TypedefDecl 0x5626fbb8c490 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x5626fbafd5c0 'long long'
|-TypedefDecl 0x5626fbb8c500 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x5626fbafd5e0 'unsigned char'
|-TypedefDecl 0x5626fbb8c570 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x5626fbafd600 'unsigned short'
|-TypedefDecl 0x5626fbb8c5e0 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x5626fbafd620 'unsigned int'
|-TypedefDecl 0x5626fbb8c650 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x5626fbafd660 'unsigned long long'
|-TypedefDecl 0x5626fbb8c6c0 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x5626fbafd640 'unsigned long'
|-TypedefDecl 0x5626fbb8c760 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x5626fbafd580 'int'
|-TypedefDecl 0x5626fbb8c7f8 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x5626fbb8c7c0 'atomic_t' sugar
|   |-Typedef 0x5626fbb8c760 'atomic_t'
|   `-BuiltinType 0x5626fbafd580 'int'
|-FunctionDecl 0x5626fbb97308 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x5626fbb970a0 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x5626fbb97148 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x5626fbb971c0 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x5626fbb97590 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5626fbb973f8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5626fbb97470 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5626fbb97788 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5626fbb97678 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5626fbb976f0 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5626fbb97980 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5626fbb97878 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x5626fbb97af8 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5626fbb97a68 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x5626fbb97d20 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x5626fbb97c10 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x5626fbb97f18 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5626fbb97e08 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5626fbb97e80 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5626fbb981a8 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5626fbb98118 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x5626fbb98398 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5626fbb98288 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x5626fbb98300 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x5626fbb98598 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5626fbb98488 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5626fbb98500 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5626fbb98798 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5626fbb98688 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5626fbb98700 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5626fbb98998 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5626fbb98888 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x5626fbb98900 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x5626fbb98ce0 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x5626fbb98b48 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x5626fbb98bc8 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x5626fbb9b538 <line:352:1, line:356:1>
| | |-DeclStmt 0x5626fbb990c0 <line:353:2, col:57>
| | | `-VarDecl 0x5626fbb98da0 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x5626fbb99098 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x5626fbb99080 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x5626fbb98e08 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x5626fbb97d20 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x5626fbb98ff8 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x5626fbb98fd8 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x5626fbb98fc0 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x5626fbb98e48 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x5626fbb98e28 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x5626fbb98b48 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x5626fbb98fa0 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x5626fbb98f80 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x5626fbb98f68 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x5626fbb98f50 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x5626fbb98e88 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x5626fbb98e68 <line:353:52> 'int' lvalue ParmVar 0x5626fbb98bc8 'bit' 'int'
| | |             `-ParenExpr 0x5626fbb98f30 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x5626fbb98f10 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x5626fbb98eb8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x5626fbb98ef8 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x5626fbb98ed8 <col:45> 'int' 8
| | `-ReturnStmt 0x5626fbb9b500 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x5626fbb9b4e8 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5626fbb9b4c8 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x5626fbb9b488 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x5626fbb9b468 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x5626fbb9b220 <col:10> 'int' 1
| |       |   `-ParenExpr 0x5626fbb9b448 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x5626fbb9b428 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x5626fbb9b410 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x5626fbb9b240 <col:15> 'atomic_val_t':'int' lvalue Var 0x5626fbb98da0 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x5626fbb9b3f0 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x5626fbb9b3d0 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x5626fbb9b3b8 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x5626fbb9b3a0 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x5626fbb9b260 <col:23> 'int' lvalue ParmVar 0x5626fbb98bc8 'bit' 'int'
| |       |           `-ParenExpr 0x5626fbb9b380 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x5626fbb9b360 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x5626fbb9b308 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x5626fbb9b2e8 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x5626fbb9b290 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x5626fbb9b2d0 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x5626fbb9b2b0 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x5626fbb9b348 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x5626fbb9b328 <col:44> 'int' 1
| |       `-IntegerLiteral 0x5626fbb9b4a8 <col:53> 'int' 0
| `-FullComment 0x5626fbd2bb60 <line:341:3, line:349:55>
|   |-ParagraphComment 0x5626fbd2b650 <line:341:3>
|   | `-TextComment 0x5626fbd2b620 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2b670 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5626fbd2b6f0 <col:10, col:32>
|   |   `-TextComment 0x5626fbd2b6c0 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x5626fbd2b860 <line:343:3, line:344:66>
|   | |-TextComment 0x5626fbd2b710 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x5626fbd2b760 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5626fbd2b780 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x5626fbd2b7d0 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5626fbd2b7f0 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x5626fbd2b810 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5626fbd2b8b0 <line:346:3>
|   | `-TextComment 0x5626fbd2b880 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2b8d0 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2b980 <line:346:17, line:347:3>
|   |   |-TextComment 0x5626fbd2b930 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5626fbd2b950 <line:347:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2b9a0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2ba30 <col:14, col:43>
|   |   `-TextComment 0x5626fbd2ba00 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5626fbd2ba80 <line:349:3>
|   | `-TextComment 0x5626fbd2ba50 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2baa0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5626fbd2bb00 <col:11, col:55>
|       `-TextComment 0x5626fbd2bad0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5626fbb9b700 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5626fbb9b568 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x5626fbb9b5e8 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x5626fbb9c018 <line:370:1, line:377:1>
| | |-DeclStmt 0x5626fbb9bae0 <line:371:2, col:38>
| | | `-VarDecl 0x5626fbb9b7c0 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5626fbb9bac0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5626fbb9baa0 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5626fbb9b828 <col:27> 'int' 1
| | |       `-ParenExpr 0x5626fbb9ba80 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5626fbb9ba60 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5626fbb9ba48 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5626fbb9b900 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5626fbb9b8e8 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5626fbb9b8c8 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5626fbb9b878 <line:371:34> 'int' lvalue ParmVar 0x5626fbb9b5e8 'bit' 'int'
| | |           `-ParenExpr 0x5626fbb9ba28 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5626fbb9ba08 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5626fbb9b9b0 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5626fbb9b990 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5626fbb9b938 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5626fbb9b978 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5626fbb9b958 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5626fbb9b9f0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5626fbb9b9d0 <col:63> 'int' 1
| | |-DeclStmt 0x5626fbb9bb70 <line:372:2, col:18>
| | | `-VarDecl 0x5626fbb9bb08 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x5626fbb9beb8 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x5626fbb9bb88 <col:2> 'atomic_val_t':'int' lvalue Var 0x5626fbb9bb08 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x5626fbb9be88 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x5626fbb9be70 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x5626fbb9bba8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5626fbb98798 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x5626fbb9bd98 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x5626fbb9bd78 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x5626fbb9bd60 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x5626fbb9bbe8 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x5626fbb9bbc8 <line:374:31> 'atomic_t *' lvalue ParmVar 0x5626fbb9b568 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x5626fbb9bd40 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x5626fbb9bd20 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x5626fbb9bd08 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x5626fbb9bcf0 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x5626fbb9bc28 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x5626fbb9bc08 <line:374:39> 'int' lvalue ParmVar 0x5626fbb9b5e8 'bit' 'int'
| | |   |       `-ParenExpr 0x5626fbb9bcd0 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x5626fbb9bcb0 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x5626fbb9bc58 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x5626fbb9bc98 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x5626fbb9bc78 <col:45> 'int' 8
| | |   `-UnaryOperator 0x5626fbb9bdf0 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~' cannot overflow
| | |     `-ImplicitCastExpr 0x5626fbb9bdd8 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x5626fbb9bdb8 <col:46> 'atomic_val_t':'int' lvalue Var 0x5626fbb9b7c0 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x5626fbb9bfe0 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x5626fbb9bfc8 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5626fbb9bfa8 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x5626fbb9bf68 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x5626fbb9bf48 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5626fbb9bf18 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5626fbb9bed8 <col:10> 'atomic_val_t':'int' lvalue Var 0x5626fbb9bb08 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x5626fbb9bf30 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5626fbb9bef8 <col:16> 'atomic_val_t':'int' lvalue Var 0x5626fbb9b7c0 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x5626fbb9bf88 <col:25> 'int' 0
| `-FullComment 0x5626fbd2c0f0 <line:359:3, line:367:55>
|   |-ParagraphComment 0x5626fbd2bc00 <line:359:3>
|   | `-TextComment 0x5626fbd2bbd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2bc20 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd2bc80 <col:10, col:42>
|   |   `-TextComment 0x5626fbd2bc50 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x5626fbd2bdf0 <line:361:3, line:362:66>
|   | |-TextComment 0x5626fbd2bca0 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x5626fbd2bcf0 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5626fbd2bd10 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x5626fbd2bd60 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5626fbd2bd80 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x5626fbd2bda0 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5626fbd2be40 <line:364:3>
|   | `-TextComment 0x5626fbd2be10 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2be60 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2bf10 <line:364:17, line:365:3>
|   |   |-TextComment 0x5626fbd2bec0 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5626fbd2bee0 <line:365:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2bf30 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2bfc0 <col:14, col:43>
|   |   `-TextComment 0x5626fbd2bf90 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5626fbd2c010 <line:367:3>
|   | `-TextComment 0x5626fbd2bfe0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2c030 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5626fbd2c090 <col:11, col:55>
|       `-TextComment 0x5626fbd2c060 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5626fbb9c170 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5626fbb9c058 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x5626fbb9c0d8 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x5626fbb9c9e8 <line:391:1, line:398:1>
| | |-DeclStmt 0x5626fbb9c530 <line:392:2, col:38>
| | | `-VarDecl 0x5626fbb9c240 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5626fbb9c510 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5626fbb9c4f0 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5626fbb9c2a8 <col:27> 'int' 1
| | |       `-ParenExpr 0x5626fbb9c4d0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5626fbb9c4b0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5626fbb9c498 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5626fbb9c350 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5626fbb9c338 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5626fbb9c318 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5626fbb9c2c8 <line:392:34> 'int' lvalue ParmVar 0x5626fbb9c0d8 'bit' 'int'
| | |           `-ParenExpr 0x5626fbb9c478 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5626fbb9c458 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5626fbb9c400 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5626fbb9c3e0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5626fbb9c388 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5626fbb9c3c8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5626fbb9c3a8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5626fbb9c440 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5626fbb9c420 <col:63> 'int' 1
| | |-DeclStmt 0x5626fbb9c5c0 <line:393:2, col:18>
| | | `-VarDecl 0x5626fbb9c558 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x5626fbb9c888 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x5626fbb9c5d8 <col:2> 'atomic_val_t':'int' lvalue Var 0x5626fbb9c558 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x5626fbb9c840 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x5626fbb9c828 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x5626fbb9c5f8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5626fbb98398 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x5626fbb9c7e8 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x5626fbb9c7c8 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x5626fbb9c7b0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x5626fbb9c638 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x5626fbb9c618 <line:395:30> 'atomic_t *' lvalue ParmVar 0x5626fbb9c058 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x5626fbb9c790 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x5626fbb9c770 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x5626fbb9c758 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x5626fbb9c740 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x5626fbb9c678 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x5626fbb9c658 <line:395:38> 'int' lvalue ParmVar 0x5626fbb9c0d8 'bit' 'int'
| | |   |       `-ParenExpr 0x5626fbb9c720 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x5626fbb9c700 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x5626fbb9c6a8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x5626fbb9c6e8 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x5626fbb9c6c8 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x5626fbb9c870 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x5626fbb9c808 <col:44> 'atomic_val_t':'int' lvalue Var 0x5626fbb9c240 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x5626fbb9c9b0 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x5626fbb9c998 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5626fbb9c978 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x5626fbb9c938 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x5626fbb9c918 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5626fbb9c8e8 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5626fbb9c8a8 <col:10> 'atomic_val_t':'int' lvalue Var 0x5626fbb9c558 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x5626fbb9c900 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5626fbb9c8c8 <col:16> 'atomic_val_t':'int' lvalue Var 0x5626fbb9c240 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x5626fbb9c958 <col:25> 'int' 0
| `-FullComment 0x5626fbd2c680 <line:380:3, line:388:55>
|   |-ParagraphComment 0x5626fbd2c190 <line:380:3>
|   | `-TextComment 0x5626fbd2c160 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2c1b0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5626fbd2c210 <col:10, col:31>
|   |   `-TextComment 0x5626fbd2c1e0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x5626fbd2c380 <line:382:3, line:383:66>
|   | |-TextComment 0x5626fbd2c230 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5626fbd2c280 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5626fbd2c2a0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x5626fbd2c2f0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5626fbd2c310 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x5626fbd2c330 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5626fbd2c3d0 <line:385:3>
|   | `-TextComment 0x5626fbd2c3a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2c3f0 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2c4a0 <line:385:17, line:386:3>
|   |   |-TextComment 0x5626fbd2c450 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5626fbd2c470 <line:386:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2c4c0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2c550 <col:14, col:43>
|   |   `-TextComment 0x5626fbd2c520 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5626fbd2c5a0 <line:388:3>
|   | `-TextComment 0x5626fbd2c570 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2c5c0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5626fbd2c620 <col:11, col:55>
|       `-TextComment 0x5626fbd2c5f0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5626fbb9cbc0 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5626fbb9ca28 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x5626fbb9caa8 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x5626fbb9d2a8 <line:412:1, line:416:1>
| | |-DeclStmt 0x5626fbb9cf70 <line:413:2, col:38>
| | | `-VarDecl 0x5626fbb9cc80 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5626fbb9cf50 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5626fbb9cf30 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5626fbb9cce8 <col:27> 'int' 1
| | |       `-ParenExpr 0x5626fbb9cf10 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5626fbb9cef0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5626fbb9ced8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5626fbb9cd90 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5626fbb9cd78 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5626fbb9cd58 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5626fbb9cd08 <line:413:34> 'int' lvalue ParmVar 0x5626fbb9caa8 'bit' 'int'
| | |           `-ParenExpr 0x5626fbb9ceb8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5626fbb9ce98 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5626fbb9ce40 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5626fbb9ce20 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5626fbb9cdc8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5626fbb9ce08 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5626fbb9cde8 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5626fbb9ce80 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5626fbb9ce60 <col:63> 'int' 1
| | `-CStyleCastExpr 0x5626fbb9d250 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x5626fbb9d200 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x5626fbb9d1e8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbb9cf88 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5626fbb98798 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x5626fbb9d178 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x5626fbb9d158 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x5626fbb9d140 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5626fbb9cfc8 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x5626fbb9cfa8 <line:415:31> 'atomic_t *' lvalue ParmVar 0x5626fbb9ca28 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x5626fbb9d120 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x5626fbb9d100 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x5626fbb9d0e8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x5626fbb9d0d0 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x5626fbb9d008 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x5626fbb9cfe8 <line:415:39> 'int' lvalue ParmVar 0x5626fbb9caa8 'bit' 'int'
| |     |       `-ParenExpr 0x5626fbb9d0b0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x5626fbb9d090 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x5626fbb9d038 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x5626fbb9d078 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x5626fbb9d058 <col:45> 'int' 8
| |     `-UnaryOperator 0x5626fbb9d1d0 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~' cannot overflow
| |       `-ImplicitCastExpr 0x5626fbb9d1b8 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbb9d198 <col:46> 'atomic_val_t':'int' lvalue Var 0x5626fbb9cc80 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5626fbd2cbf0 <line:401:3, line:409:14>
|   |-ParagraphComment 0x5626fbd2c720 <line:401:3>
|   | `-TextComment 0x5626fbd2c6f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2c740 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5626fbd2c7a0 <col:10, col:33>
|   |   `-TextComment 0x5626fbd2c770 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x5626fbd2c8f0 <line:403:3, line:404:66>
|   | |-TextComment 0x5626fbd2c7c0 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x5626fbd2c810 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5626fbd2c830 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x5626fbd2c880 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x5626fbd2c8a0 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5626fbd2c940 <line:406:3>
|   | `-TextComment 0x5626fbd2c910 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2c960 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2ca10 <line:406:17, line:407:3>
|   |   |-TextComment 0x5626fbd2c9c0 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5626fbd2c9e0 <line:407:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2ca30 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2cac0 <col:14, col:43>
|   |   `-TextComment 0x5626fbd2ca90 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5626fbd2cb10 <line:409:3>
|   | `-TextComment 0x5626fbd2cae0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2cb30 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd2cb90 <col:11, col:14>
|       `-TextComment 0x5626fbd2cb60 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbb9d3f0 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5626fbb9d2d8 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x5626fbb9d358 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x5626fbb9daa8 <line:430:1, line:434:1>
| | |-DeclStmt 0x5626fbb9d7a0 <line:431:2, col:38>
| | | `-VarDecl 0x5626fbb9d4b0 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5626fbb9d780 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5626fbb9d760 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5626fbb9d518 <col:27> 'int' 1
| | |       `-ParenExpr 0x5626fbb9d740 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5626fbb9d720 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5626fbb9d708 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5626fbb9d5c0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5626fbb9d5a8 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5626fbb9d588 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5626fbb9d538 <line:431:34> 'int' lvalue ParmVar 0x5626fbb9d358 'bit' 'int'
| | |           `-ParenExpr 0x5626fbb9d6e8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5626fbb9d6c8 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5626fbb9d670 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5626fbb9d650 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5626fbb9d5f8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5626fbb9d638 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5626fbb9d618 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5626fbb9d6b0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5626fbb9d690 <col:63> 'int' 1
| | `-CStyleCastExpr 0x5626fbb9da58 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x5626fbb9da00 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x5626fbb9d9e8 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbb9d7b8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5626fbb98398 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x5626fbb9d9a8 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x5626fbb9d988 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x5626fbb9d970 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5626fbb9d7f8 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x5626fbb9d7d8 <line:433:30> 'atomic_t *' lvalue ParmVar 0x5626fbb9d2d8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x5626fbb9d950 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x5626fbb9d930 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x5626fbb9d918 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x5626fbb9d900 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x5626fbb9d838 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x5626fbb9d818 <line:433:38> 'int' lvalue ParmVar 0x5626fbb9d358 'bit' 'int'
| |     |       `-ParenExpr 0x5626fbb9d8e0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x5626fbb9d8c0 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x5626fbb9d868 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x5626fbb9d8a8 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x5626fbb9d888 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x5626fbb9da30 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5626fbb9d9c8 <col:44> 'atomic_val_t':'int' lvalue Var 0x5626fbb9d4b0 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5626fbd2d160 <line:419:3, line:427:14>
|   |-ParagraphComment 0x5626fbd2cc90 <line:419:3>
|   | `-TextComment 0x5626fbd2cc60 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2ccb0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5626fbd2cd10 <col:10, col:31>
|   |   `-TextComment 0x5626fbd2cce0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x5626fbd2ce60 <line:421:3, line:422:66>
|   | |-TextComment 0x5626fbd2cd30 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5626fbd2cd80 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5626fbd2cda0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x5626fbd2cdf0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x5626fbd2ce10 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5626fbd2ceb0 <line:424:3>
|   | `-TextComment 0x5626fbd2ce80 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2ced0 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2cf80 <line:424:17, line:425:3>
|   |   |-TextComment 0x5626fbd2cf30 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5626fbd2cf50 <line:425:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2cfa0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2d030 <col:14, col:43>
|   |   `-TextComment 0x5626fbd2d000 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5626fbd2d080 <line:427:3>
|   | `-TextComment 0x5626fbd2d050 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2d0a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd2d100 <col:11, col:14>
|       `-TextComment 0x5626fbd2d0d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbb9dd10 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x5626fbb9dad8 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x5626fbb9db58 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x5626fbb9dbd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x5626fbb8aa08 <line:449:1, line:457:1>
| | |-DeclStmt 0x5626fbb9e0c8 <line:450:2, col:38>
| | | `-VarDecl 0x5626fbb9ddd8 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5626fbb9e0a8 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5626fbb9e088 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5626fbb9de40 <col:27> 'int' 1
| | |       `-ParenExpr 0x5626fbb9e068 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5626fbb9e048 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5626fbb9e030 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5626fbb9dee8 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5626fbb9ded0 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5626fbb9deb0 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5626fbb9de60 <line:450:34> 'int' lvalue ParmVar 0x5626fbb9db58 'bit' 'int'
| | |           `-ParenExpr 0x5626fbb9e010 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5626fbb9dff0 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5626fbb9df98 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5626fbb9df78 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5626fbb9df20 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5626fbb9df60 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5626fbb9df40 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5626fbb9dfd8 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5626fbb9dfb8 <col:63> 'int' 1
| | `-IfStmt 0x5626fbb8a920 <line:452:2, line:456:2> has_else
| |   |-ImplicitCastExpr 0x5626fbb9e100 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x5626fbb9e0e0 <col:6> 'bool' lvalue ParmVar 0x5626fbb9dbd0 'val' 'bool'
| |   |-CompoundStmt 0x5626fbb8a610 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x5626fbb8a5e8 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x5626fbb8a590 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x5626fbb8a578 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5626fbb9e118 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5626fbb98398 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x5626fbb8a538 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x5626fbb8a518 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x5626fbb8a500 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x5626fbb9e158 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x5626fbb9e138 <line:453:31> 'atomic_t *' lvalue ParmVar 0x5626fbb9dad8 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x5626fbb8a4e0 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x5626fbb8a4c0 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x5626fbb8a4a8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x5626fbb8a490 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x5626fbb9e198 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x5626fbb9e178 <line:453:39> 'int' lvalue ParmVar 0x5626fbb9db58 'bit' 'int'
| |   |     |       `-ParenExpr 0x5626fbb8a470 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x5626fbb9e220 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x5626fbb9e1c8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x5626fbb9e208 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x5626fbb9e1e8 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x5626fbb8a5c0 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x5626fbb8a558 <col:45> 'atomic_val_t':'int' lvalue Var 0x5626fbb9ddd8 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x5626fbb8a908 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x5626fbb8a8e0 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x5626fbb8a8a0 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x5626fbb8a888 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x5626fbb8a628 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5626fbb98798 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x5626fbb8a818 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x5626fbb8a7f8 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x5626fbb8a7e0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x5626fbb8a668 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x5626fbb8a648 <line:455:32> 'atomic_t *' lvalue ParmVar 0x5626fbb9dad8 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x5626fbb8a7c0 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x5626fbb8a7a0 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x5626fbb8a788 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x5626fbb8a770 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x5626fbb8a6a8 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x5626fbb8a688 <line:455:40> 'int' lvalue ParmVar 0x5626fbb9db58 'bit' 'int'
| |         |       `-ParenExpr 0x5626fbb8a750 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x5626fbb8a730 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x5626fbb8a6d8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x5626fbb8a718 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x5626fbb8a6f8 <col:45> 'int' 8
| |         `-UnaryOperator 0x5626fbb8a870 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~' cannot overflow
| |           `-ImplicitCastExpr 0x5626fbb8a858 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x5626fbb8a838 <col:47> 'atomic_val_t':'int' lvalue Var 0x5626fbb9ddd8 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5626fbd2d840 <line:437:3, line:446:14>
|   |-ParagraphComment 0x5626fbd2d200 <line:437:3>
|   | `-TextComment 0x5626fbd2d1d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2d220 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5626fbd2d280 <col:10, col:48>
|   |   `-TextComment 0x5626fbd2d250 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x5626fbd2d450 <line:439:3, line:440:66>
|   | |-TextComment 0x5626fbd2d2a0 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5626fbd2d2f0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5626fbd2d310 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x5626fbd2d360 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5626fbd2d380 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x5626fbd2d3d0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x5626fbd2d3f0 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5626fbd2d4a0 <line:442:3>
|   | `-TextComment 0x5626fbd2d470 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2d4c0 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2d570 <line:442:17, line:443:3>
|   |   |-TextComment 0x5626fbd2d520 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5626fbd2d540 <line:443:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2d590 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2d640 <line:443:14, line:444:3>
|   |   |-TextComment 0x5626fbd2d5f0 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x5626fbd2d610 <line:444:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2d660 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd2d700 <col:14, col:38>
|   |   `-TextComment 0x5626fbd2d6d0 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x5626fbd2d750 <line:446:3>
|   | `-TextComment 0x5626fbd2d720 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2d770 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd2d7d0 <col:11, col:14>
|       `-TextComment 0x5626fbd2d7a0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbb8ab10 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x5626fbb8aa40 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x5626fbb8ae20 <line:114:1, line:116:1>
|   `-ReturnStmt 0x5626fbb8ae10 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x5626fbb8adf8 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5626fbb8add8 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x5626fbb8ac30 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x5626fbb8ac10 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x5626fbb8abf8 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x5626fbb8abb8 <col:10> 'unsigned int' lvalue ParmVar 0x5626fbb8aa40 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x5626fbb8abd8 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x5626fbb8adb8 <col:22, col:42> 'int'
|           `-BinaryOperator 0x5626fbb8ad98 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x5626fbb8ad58 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x5626fbb8ad38 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x5626fbb8ad20 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x5626fbb8ac50 <col:24> 'unsigned int' lvalue ParmVar 0x5626fbb8aa40 'x' 'unsigned int'
|             |   `-ParenExpr 0x5626fbb8ad00 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x5626fbb8ace0 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x5626fbb8acb0 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x5626fbb8ac70 <col:29> 'unsigned int' lvalue ParmVar 0x5626fbb8aa40 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x5626fbb8acc8 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x5626fbb8ac90 <col:33> 'int' 1
|             `-IntegerLiteral 0x5626fbb8ad78 <col:40> 'unsigned int' 0
|-FunctionDecl 0x5626fbb8b030 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x5626fbb8ae78 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x5626fbb8af18 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x5626fbba8708 <line:119:1, line:134:1>
|   |-DeclStmt 0x5626fbb8b158 <line:120:2, col:16>
|   | `-VarDecl 0x5626fbb8b0f0 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x5626fbb8b260 <line:122:2, line:124:2>
|   | |-BinaryOperator 0x5626fbb8b1e0 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x5626fbb8b1c8 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5626fbb8b1b0 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5626fbb8b170 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x5626fbb8af18 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x5626fbb8b190 <col:15> 'unsigned int' 0
|   | `-CompoundStmt 0x5626fbb8b248 <col:19, line:124:2>
|   |   `-ReturnStmt 0x5626fbb8b238 <line:123:3, col:10>
|   |     `-ImplicitCastExpr 0x5626fbb8b220 <col:10> 's64_t':'long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x5626fbb8b200 <col:10> 's64_t':'long long' lvalue ParmVar 0x5626fbb8ae78 'value' 's64_t':'long long'
|   |-BinaryOperator 0x5626fbb8b388 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x5626fbb8b278 <col:2> 's64_t':'long long' lvalue Var 0x5626fbb8b0f0 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x5626fbb8b368 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x5626fbb8b310 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x5626fbb8b2f0 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x5626fbb8b2d8 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x5626fbb8b298 <col:14> 's64_t':'long long' lvalue ParmVar 0x5626fbb8ae78 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x5626fbb8b2b8 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x5626fbb8b350 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x5626fbb8b330 <col:29> 'int' 1
|   |-BinaryOperator 0x5626fbb8b418 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x5626fbb8b3a8 <col:2> 's64_t':'long long' lvalue Var 0x5626fbb8b0f0 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x5626fbb8b400 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x5626fbb8b3e8 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbb8b3c8 <col:14> 's64_t':'long long' lvalue Var 0x5626fbb8b0f0 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x5626fbba86d0 <line:133:2, col:53>
|     `-BinaryOperator 0x5626fbba86b0 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x5626fbba8568 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x5626fbba8548 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x5626fbba8500 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5626fbb8b438 <col:10> 's64_t':'long long' lvalue ParmVar 0x5626fbb8ae78 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x5626fbba8530 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x5626fbba8518 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x5626fbba84e0 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x5626fbb8af18 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x5626fbba8690 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x5626fbba8670 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x5626fbba8658 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x5626fbba8588 <col:29> 's64_t':'long long' lvalue Var 0x5626fbb8b0f0 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x5626fbba8638 <col:41, col:52> 'int'
|             `-BinaryOperator 0x5626fbba8618 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x5626fbba85a8 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x5626fbba8600 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x5626fbba85e8 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x5626fbba85c8 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x5626fbb8af18 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x5626fbba8958 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x5626fbba8750 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x5626fbba8830 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x5626fbd2dc60 <line:137:3, line:142:63>
|   |-ParagraphComment 0x5626fbd2d8e0 <line:137:3>
|   | `-TextComment 0x5626fbd2d8b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2d900 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5626fbd2d960 <col:10, col:68>
|   |   `-TextComment 0x5626fbd2d930 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x5626fbd2d9b0 <line:139:3>
|   | `-TextComment 0x5626fbd2d980 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2d9d0 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2da80 <line:139:17, line:140:3>
|   |   |-TextComment 0x5626fbd2da30 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x5626fbd2da50 <line:140:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2daa0 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2db30 <col:17, col:69>
|   |   `-TextComment 0x5626fbd2db00 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x5626fbd2db80 <line:142:3, col:4>
|   | `-TextComment 0x5626fbd2db50 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x5626fbd2dba0 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x5626fbd2dc00 <col:12, col:63>
|       `-TextComment 0x5626fbd2dbd0 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x5626fbba8be8 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x5626fbba8a48 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5626fbba8ac8 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x5626fbd2e080 <line:147:3, line:152:63>
|   |-ParagraphComment 0x5626fbd2dd00 <line:147:3>
|   | `-TextComment 0x5626fbd2dcd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2dd20 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5626fbd2dd80 <col:10, col:68>
|   |   `-TextComment 0x5626fbd2dd50 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x5626fbd2ddd0 <line:149:3>
|   | `-TextComment 0x5626fbd2dda0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2ddf0 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2dea0 <line:149:17, line:150:3>
|   |   |-TextComment 0x5626fbd2de50 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x5626fbd2de70 <line:150:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2dec0 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2df50 <col:17, col:72>
|   |   `-TextComment 0x5626fbd2df20 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x5626fbd2dfa0 <line:152:3, col:4>
|   | `-TextComment 0x5626fbd2df70 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x5626fbd2dfc0 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x5626fbd2e020 <col:12, col:63>
|       `-TextComment 0x5626fbd2dff0 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x5626fbba9000 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x5626fbba8d40 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x5626fbba8db8 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbba8e38 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x5626fbba8eb0 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x5626fbd2e650 <line:157:3, line:164:77>
|   |-ParagraphComment 0x5626fbd2e120 <line:157:3>
|   | `-TextComment 0x5626fbd2e0f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2e140 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5626fbd2e1a0 <col:10, col:65>
|   |   `-TextComment 0x5626fbd2e170 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x5626fbd2e1f0 <line:159:3>
|   | `-TextComment 0x5626fbd2e1c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2e210 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2e2c0 <line:159:19, line:160:3>
|   |   |-TextComment 0x5626fbd2e270 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x5626fbd2e290 <line:160:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2e2e0 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2e390 <line:160:22, line:161:3>
|   |   |-TextComment 0x5626fbd2e340 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x5626fbd2e360 <line:161:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2e3b0 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd2e460 <line:161:19, line:162:3>
|   |   |-TextComment 0x5626fbd2e410 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x5626fbd2e430 <line:162:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2e480 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd2e510 <col:22, col:74>
|   |   `-TextComment 0x5626fbd2e4e0 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x5626fbd2e560 <line:164:3>
|   | `-TextComment 0x5626fbd2e530 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2e580 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x5626fbd2e5e0 <col:11, col:77>
|       `-TextComment 0x5626fbd2e5b0 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x5626fbba93b0 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x5626fbba9100 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x5626fbba9178 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbba91f0 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x5626fbba9268 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x5626fbd2ec20 <line:175:3, line:182:74>
|   |-ParagraphComment 0x5626fbd2e6f0 <line:175:3>
|   | `-TextComment 0x5626fbd2e6c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2e710 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5626fbd2e770 <col:10, col:64>
|   |   `-TextComment 0x5626fbd2e740 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x5626fbd2e7c0 <line:177:3>
|   | `-TextComment 0x5626fbd2e790 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2e7e0 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2e890 <line:177:19, line:178:3>
|   |   |-TextComment 0x5626fbd2e840 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x5626fbd2e860 <line:178:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2e8b0 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2e960 <line:178:22, line:179:3>
|   |   |-TextComment 0x5626fbd2e910 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x5626fbd2e930 <line:179:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2e980 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd2ea30 <line:179:19, line:180:3>
|   |   |-TextComment 0x5626fbd2e9e0 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x5626fbd2ea00 <line:180:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2ea50 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd2eae0 <col:22, col:63>
|   |   `-TextComment 0x5626fbd2eab0 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x5626fbd2eb30 <line:182:3>
|   | `-TextComment 0x5626fbd2eb00 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2eb50 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x5626fbd2ebb0 <col:11, col:74>
|       `-TextComment 0x5626fbd2eb80 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x5626fbba9fe0 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x5626fbba9db0 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x5626fbba9e28 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5626fbba9ea0 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x5626fbd2f1b0 <line:187:3, line:197:47>
|   |-ParagraphComment 0x5626fbd2ecc0 <line:187:3>
|   | `-TextComment 0x5626fbd2ec90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2ece0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5626fbd2ed40 <col:10, col:65>
|   |   `-TextComment 0x5626fbd2ed10 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x5626fbd2edb0 <line:189:3, line:190:60>
|   | |-TextComment 0x5626fbd2ed60 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x5626fbd2ed80 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x5626fbd2ee00 <line:192:3>
|   | `-TextComment 0x5626fbd2edd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2ee20 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2eed0 <line:192:19, line:193:3>
|   |   |-TextComment 0x5626fbd2ee80 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x5626fbd2eea0 <line:193:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2eef0 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd2efa0 <line:193:22, line:194:3>
|   |   |-TextComment 0x5626fbd2ef50 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x5626fbd2ef70 <line:194:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2efc0 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd2f050 <col:21, col:61>
|   |   `-TextComment 0x5626fbd2f020 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x5626fbd2f0a0 <line:196:3>
|   | `-TextComment 0x5626fbd2f070 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2f0c0 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x5626fbd2f140 <line:196:11, line:197:47>
|       |-TextComment 0x5626fbd2f0f0 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x5626fbd2f110 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x5626fbbaa398 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x5626fbbaa448 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x5626fbbaa5c8 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x5626fbbaa640 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x5626fbbaa6f0 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x5626fbbaa750 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x5626fbbaa6f0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x5626fbbaa5c8 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x5626fbbaa7a8 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x5626fbbaa6f0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x5626fbbaa640 'next' 'struct _dnode *'
| |-RecordDecl 0x5626fbbaa7f0 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x5626fbbaa8c0 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x5626fbbaa938 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x5626fbbaa9f0 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x5626fbbaaa50 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x5626fbbaa9f0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x5626fbbaa8c0 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x5626fbbaaaa8 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x5626fbbaa9f0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x5626fbbaa938 'prev' 'struct _dnode *'
|-TypedefDecl 0x5626fbbaab68 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x5626fbbaa500 'struct _dnode' sugar
|   `-RecordType 0x5626fbbaa420 'struct _dnode'
|     `-Record 0x5626fbbaa398 '_dnode'
|-TypedefDecl 0x5626fbbaabe0 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x5626fbbaa500 'struct _dnode' sugar
|   `-RecordType 0x5626fbbaa420 'struct _dnode'
|     `-Record 0x5626fbbaa398 '_dnode'
|-FunctionDecl 0x5626fbbe4160 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5626fbbe4050 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5626fbbe4518 <line:193:1, line:196:1>
| | |-BinaryOperator 0x5626fbbe4390 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbe4288 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| | | | `-MemberExpr 0x5626fbbe4240 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |   `-ImplicitCastExpr 0x5626fbbe4228 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbbe4208 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe4050 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x5626fbbe4368 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x5626fbbe4350 <col:30> 'sys_dlist_t *' <LValueToRValue> part_of_explicit_cast
| | |     `-DeclRefExpr 0x5626fbbe42e8 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe4050 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x5626fbbe44d0 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x5626fbbe4430 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x5626fbbaa8c0
| |   | `-MemberExpr 0x5626fbbe43e8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| |   |   `-ImplicitCastExpr 0x5626fbbe43d0 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5626fbbe43b0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe4050 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x5626fbbe44a8 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x5626fbbe4490 <col:30> 'sys_dlist_t *' <LValueToRValue> part_of_explicit_cast
| |       `-DeclRefExpr 0x5626fbbe4460 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe4050 'list' 'sys_dlist_t *'
| `-FullComment 0x5626fbd2f4f0 <line:185:3, line:189:14>
|   |-ParagraphComment 0x5626fbd2f250 <line:185:3>
|   | `-TextComment 0x5626fbd2f220 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2f270 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd2f2d0 <col:10, col:44>
|   |   `-TextComment 0x5626fbd2f2a0 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x5626fbd2f320 <line:187:3>
|   | `-TextComment 0x5626fbd2f2f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2f340 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd2f3d0 <col:15, col:37>
|   |   `-TextComment 0x5626fbd2f3a0 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x5626fbd2f420 <line:189:3>
|   | `-TextComment 0x5626fbd2f3f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd2f440 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd2f4a0 <col:11, col:14>
|       `-TextComment 0x5626fbd2f470 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbbe4610 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe4548 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbe49b8 <line:209:1, line:212:1>
| | |-BinaryOperator 0x5626fbbe4800 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbe4738 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| | | | `-MemberExpr 0x5626fbbe46f0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |   `-ImplicitCastExpr 0x5626fbbe46d8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbbe46b8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe4548 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbe47e8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x5626fbbe47c8 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x5626fbbe47a0 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5626fbbe4768 <col:23> 'int' 0
| | `-BinaryOperator 0x5626fbbe4968 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x5626fbbe48a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| |   | `-MemberExpr 0x5626fbbe4858 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| |   |   `-ImplicitCastExpr 0x5626fbbe4840 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5626fbbe4820 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe4548 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x5626fbbe4950 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x5626fbbe4930 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x5626fbbe4908 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x5626fbbe48d0 <col:23> 'int' 0
| `-FullComment 0x5626fbd31870 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x5626fbd2f590 <line:201:3>
|   | `-TextComment 0x5626fbd2f560 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd2f5b0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5626fbd2f610 <col:10, col:57>
|   |   `-TextComment 0x5626fbd2f5e0 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x5626fbd2f660 <line:203:3>
|   | `-TextComment 0x5626fbd2f630 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd2f680 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd31750 <col:15, col:23>
|   |   `-TextComment 0x5626fbd31720 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x5626fbd317a0 <line:205:3>
|   | `-TextComment 0x5626fbd31770 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd317c0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd31820 <col:11, col:14>
|       `-TextComment 0x5626fbd317f0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbbe4b60 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe4a50 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x5626fbbe4dd8 <line:223:1, line:225:1>
| | `-ReturnStmt 0x5626fbbe4da0 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x5626fbbe4d88 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5626fbbe4d68 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x5626fbbe4d38 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5626fbbe4c88 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x5626fbbaa640
| |       |   `-MemberExpr 0x5626fbbe4c40 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| |       |     `-ImplicitCastExpr 0x5626fbbe4c28 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5626fbbe4c08 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x5626fbbe4a50 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x5626fbbe4d50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x5626fbbe4d18 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x5626fbbe4cf0 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x5626fbbe4cb8 <col:23> 'int' 0
| `-FullComment 0x5626fbd31bb0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x5626fbd31910 <line:215:3>
|   | `-TextComment 0x5626fbd318e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd31930 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd31990 <col:10, col:49>
|   |   `-TextComment 0x5626fbd31960 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x5626fbd319e0 <line:217:3>
|   | `-TextComment 0x5626fbd319b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd31a00 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd31a90 <col:15, col:23>
|   |   `-TextComment 0x5626fbd31a60 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x5626fbd31ae0 <line:219:3>
|   | `-TextComment 0x5626fbd31ab0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd31b00 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x5626fbd31b60 <col:11, col:65>
|       `-TextComment 0x5626fbd31b30 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x5626fbbe66a0 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe4e00 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbbe4e78 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbe68c8 <line:237:1, line:239:1>
| | `-ReturnStmt 0x5626fbbe6888 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x5626fbbe6870 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5626fbbe6850 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5626fbbe6820 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5626fbbe67d0 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| |       |   `-MemberExpr 0x5626fbbe6788 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| |       |     `-ImplicitCastExpr 0x5626fbbe6770 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5626fbbe6750 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe4e00 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5626fbbe6838 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbbe6800 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe4e78 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd31fd0 <line:228:3, line:233:52>
|   |-ParagraphComment 0x5626fbd31c50 <line:228:3>
|   | `-TextComment 0x5626fbd31c20 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd31c70 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd31cd0 <col:10, col:44>
|   |   `-TextComment 0x5626fbd31ca0 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x5626fbd31d20 <line:230:3>
|   | `-TextComment 0x5626fbd31cf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd31d40 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd31df0 <line:230:15, line:231:3>
|   |   |-TextComment 0x5626fbd31da0 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5626fbd31dc0 <line:231:3> Text=" "
|   |-ParamCommandComment 0x5626fbd31e10 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd31ea0 <col:15, col:32>
|   |   `-TextComment 0x5626fbd31e70 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x5626fbd31ef0 <line:233:3>
|   | `-TextComment 0x5626fbd31ec0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd31f10 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x5626fbd31f70 <col:11, col:52>
|       `-TextComment 0x5626fbd31f40 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x5626fbbe6a00 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe68f0 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbbe6968 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbe6c28 <line:251:1, line:253:1>
| | `-ReturnStmt 0x5626fbbe6be8 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x5626fbbe6bd0 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5626fbbe6bb0 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5626fbbe6b80 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5626fbbe6b30 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x5626fbbaa8c0
| |       |   `-MemberExpr 0x5626fbbe6ae8 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| |       |     `-ImplicitCastExpr 0x5626fbbe6ad0 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5626fbbe6ab0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe68f0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5626fbbe6b98 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbbe6b60 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe6968 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd323f0 <line:242:3, line:247:52>
|   |-ParagraphComment 0x5626fbd32070 <line:242:3>
|   | `-TextComment 0x5626fbd32040 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd32090 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd320f0 <col:10, col:44>
|   |   `-TextComment 0x5626fbd320c0 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x5626fbd32140 <line:244:3>
|   | `-TextComment 0x5626fbd32110 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd32160 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd32210 <line:244:15, line:245:3>
|   |   |-TextComment 0x5626fbd321c0 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5626fbd321e0 <line:245:3> Text=" "
|   |-ParamCommandComment 0x5626fbd32230 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd322c0 <col:15, col:32>
|   |   `-TextComment 0x5626fbd32290 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x5626fbd32310 <line:247:3>
|   | `-TextComment 0x5626fbd322e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd32330 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x5626fbd32390 <col:11, col:52>
|       `-TextComment 0x5626fbd32360 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x5626fbbe6d60 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5626fbbe6c50 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5626fbbe6f78 <line:264:1, line:266:1>
| | `-ReturnStmt 0x5626fbbe6f40 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x5626fbbe6f28 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5626fbbe6f08 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5626fbbe6ed8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5626fbbe6e88 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| |       |   `-MemberExpr 0x5626fbbe6e40 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| |       |     `-ImplicitCastExpr 0x5626fbbe6e28 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5626fbbe6e08 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe6c50 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5626fbbe6ef0 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbbe6eb8 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe6c50 'list' 'sys_dlist_t *'
| `-FullComment 0x5626fbd32730 <line:256:3, line:260:41>
|   |-ParagraphComment 0x5626fbd32490 <line:256:3>
|   | `-TextComment 0x5626fbd32460 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd324b0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5626fbd32510 <col:10, col:36>
|   |   `-TextComment 0x5626fbd324e0 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x5626fbd32560 <line:258:3>
|   | `-TextComment 0x5626fbd32530 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd32580 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd32610 <col:15, col:51>
|   |   `-TextComment 0x5626fbd325e0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5626fbd32660 <line:260:3>
|   | `-TextComment 0x5626fbd32630 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd32680 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x5626fbd326e0 <col:11, col:41>
|       `-TextComment 0x5626fbd326b0 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x5626fbbe7030 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5626fbbe6fa0 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5626fbbe72d8 <line:279:1, line:281:1>
| | `-ReturnStmt 0x5626fbbe72a0 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x5626fbbe7288 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5626fbbe7268 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x5626fbbe7238 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5626fbbe7158 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| |       |   `-MemberExpr 0x5626fbbe7110 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| |       |     `-ImplicitCastExpr 0x5626fbbe70f8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5626fbbe70d8 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe6fa0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5626fbbe7250 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x5626fbbe7208 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x5626fbbaa8c0
| |           `-MemberExpr 0x5626fbbe71c0 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| |             `-ImplicitCastExpr 0x5626fbbe71a8 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x5626fbbe7188 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe6fa0 'list' 'sys_dlist_t *'
| `-FullComment 0x5626fbd32ad0 <line:269:3, line:275:50>
|   |-ParagraphComment 0x5626fbd327d0 <line:269:3>
|   | `-TextComment 0x5626fbd327a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd327f0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5626fbd32850 <col:10, col:45>
|   |   `-TextComment 0x5626fbd32820 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x5626fbd328a0 <line:271:3, col:62>
|   | `-TextComment 0x5626fbd32870 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd328f0 <line:273:3>
|   | `-TextComment 0x5626fbd328c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd32910 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd329a0 <col:15, col:51>
|   |   `-TextComment 0x5626fbd32970 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5626fbd329f0 <line:275:3>
|   | `-TextComment 0x5626fbd329c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd32a10 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x5626fbd32a70 <col:11, col:50>
|       `-TextComment 0x5626fbd32a40 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x5626fbbe7410 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5626fbbe7300 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5626fbbe78d8 <line:292:1, line:294:1>
| | `-ReturnStmt 0x5626fbbe78a0 <line:293:2, col:49>
| |   `-ConditionalOperator 0x5626fbbe7870 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x5626fbbe7828 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x5626fbbe7578 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x5626fbbe7560 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x5626fbbe74b8 <col:9> 'bool (sys_dlist_t *)' Function 0x5626fbbe6d60 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x5626fbbe75a0 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5626fbbe74d8 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe7300 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5626fbbe7858 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5626fbbe7618 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5626fbbe75f0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5626fbbe75b8 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbbe7840 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5626fbbe77f8 <col:43, col:49> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| |         `-MemberExpr 0x5626fbbe77b0 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| |           `-ImplicitCastExpr 0x5626fbbe7658 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5626fbbe7638 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe7300 'list' 'sys_dlist_t *'
| `-FullComment 0x5626fbd32e10 <line:284:3, line:288:63>
|   |-ParagraphComment 0x5626fbd32b70 <line:284:3>
|   | `-TextComment 0x5626fbd32b40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd32b90 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5626fbd32bf0 <col:10, col:54>
|   |   `-TextComment 0x5626fbd32bc0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x5626fbd32c40 <line:286:3>
|   | `-TextComment 0x5626fbd32c10 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd32c60 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd32cf0 <col:15, col:51>
|   |   `-TextComment 0x5626fbd32cc0 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5626fbd32d40 <line:288:3>
|   | `-TextComment 0x5626fbd32d10 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd32d60 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x5626fbd32dc0 <col:11, col:63>
|       `-TextComment 0x5626fbd32d90 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x5626fbbe7990 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5626fbbe7900 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5626fbbe7b38 <line:307:1, line:309:1>
| | `-ReturnStmt 0x5626fbbe7b00 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x5626fbbe7ae8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x5626fbbe7ab8 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| |       `-MemberExpr 0x5626fbbe7a70 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| |         `-ImplicitCastExpr 0x5626fbbe7a58 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x5626fbbe7a38 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe7900 'list' 'sys_dlist_t *'
| `-FullComment 0x5626fbd331b0 <line:297:3, line:303:40>
|   |-ParagraphComment 0x5626fbd32eb0 <line:297:3>
|   | `-TextComment 0x5626fbd32e80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd32ed0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5626fbd32f30 <col:10, col:54>
|   |   `-TextComment 0x5626fbd32f00 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x5626fbd32f80 <line:299:3, col:42>
|   | `-TextComment 0x5626fbd32f50 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x5626fbd32fd0 <line:301:3>
|   | `-TextComment 0x5626fbd32fa0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd32ff0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd33080 <col:15, col:51>
|   |   `-TextComment 0x5626fbd33050 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5626fbd330d0 <line:303:3>
|   | `-TextComment 0x5626fbd330a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd330f0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x5626fbd33150 <col:11, col:40>
|       `-TextComment 0x5626fbd33120 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x5626fbbe7cf0 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe7b60 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbbe7bd8 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbe80a8 <line:324:1, line:326:1>
| | `-ReturnStmt 0x5626fbbe8070 <line:325:2, col:45>
| |   `-ConditionalOperator 0x5626fbbe8040 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x5626fbbe7ec0 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x5626fbbe7ea0 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x5626fbbe7e70 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5626fbbe7da0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe7bd8 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5626fbbe7e88 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x5626fbbe7e40 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x5626fbbaa8c0
| |     |       `-MemberExpr 0x5626fbbe7df8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| |     |         `-ImplicitCastExpr 0x5626fbbe7de0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x5626fbbe7dc0 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe7b60 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5626fbbe8028 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5626fbbe7f40 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5626fbbe7f18 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5626fbbe7ee0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbbe8010 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5626fbbe7fe0 <col:39, col:45> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| |         `-MemberExpr 0x5626fbbe7f98 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| |           `-ImplicitCastExpr 0x5626fbbe7f80 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5626fbbe7f60 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe7bd8 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd33620 <line:312:3, line:319:78>
|   |-ParagraphComment 0x5626fbd33250 <line:312:3>
|   | `-TextComment 0x5626fbd33220 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd33270 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x5626fbd332d0 <col:10, col:72>
|   |   `-TextComment 0x5626fbd332a0 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x5626fbd33320 <line:314:3, col:69>
|   | `-TextComment 0x5626fbd332f0 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5626fbd33370 <line:316:3>
|   | `-TextComment 0x5626fbd33340 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd33390 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd33440 <line:316:15, line:317:3>
|   |   |-TextComment 0x5626fbd333f0 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5626fbd33410 <line:317:3> Text=" "
|   |-ParamCommandComment 0x5626fbd33460 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd334f0 <col:15, col:70>
|   |   `-TextComment 0x5626fbd334c0 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x5626fbd33540 <line:319:3>
|   | `-TextComment 0x5626fbd33510 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd33560 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x5626fbd335c0 <col:11, col:78>
|       `-TextComment 0x5626fbd33590 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x5626fbbe81e0 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe80d0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbbe8148 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbe85d8 <line:340:1, line:342:1>
| | `-ReturnStmt 0x5626fbbe85a0 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x5626fbbe8570 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x5626fbbe8380 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x5626fbbe8360 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x5626fbbe8330 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5626fbbe8290 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe8148 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5626fbbe8348 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x5626fbbe8310 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x5626fbbe82e8 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x5626fbbe82b0 <col:23> 'int' 0
| |     |-CallExpr 0x5626fbbe8478 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x5626fbbe8460 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x5626fbbe83a0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x5626fbbe7cf0 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x5626fbbe84a8 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x5626fbbe83c0 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe80d0 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x5626fbbe84c0 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x5626fbbe83e0 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe8148 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x5626fbbe8558 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x5626fbbe8538 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x5626fbbe8510 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x5626fbbe84d8 <col:23> 'int' 0
| `-FullComment 0x5626fbd33a90 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x5626fbd336c0 <line:329:3>
|   | `-TextComment 0x5626fbd33690 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd33710 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5626fbd33770 <col:10, col:54>
|   |   `-TextComment 0x5626fbd33740 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x5626fbd337c0 <line:331:3>
|   | `-TextComment 0x5626fbd33790 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd337e0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd33890 <line:331:15, line:332:3>
|   |   |-TextComment 0x5626fbd33840 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5626fbd33860 <line:332:3> Text=" "
|   |-ParamCommandComment 0x5626fbd338b0 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd33940 <col:15, col:70>
|   |   `-TextComment 0x5626fbd33910 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x5626fbd33990 <line:334:3>
|   | `-TextComment 0x5626fbd33960 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd339b0 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x5626fbd33a30 <line:334:11, line:335:68>
|       |-TextComment 0x5626fbd339e0 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x5626fbd33a00 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x5626fbbe8710 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe8600 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbbe8678 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbe8bd8 <line:358:1, line:360:1>
| | `-ReturnStmt 0x5626fbbe8ba0 <line:359:2, col:45>
| |   `-ConditionalOperator 0x5626fbbe8b70 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x5626fbbe89f0 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x5626fbbe89d0 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x5626fbbe89a0 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5626fbbe88d0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe8678 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5626fbbe89b8 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x5626fbbe8970 <col:18, col:24> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| |     |       `-MemberExpr 0x5626fbbe8928 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| |     |         `-ImplicitCastExpr 0x5626fbbe8910 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x5626fbbe88f0 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe8600 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5626fbbe8b58 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5626fbbe8a70 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5626fbbe8a48 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5626fbbe8a10 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbbe8b40 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5626fbbe8b10 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| |         `-MemberExpr 0x5626fbbe8ac8 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| |           `-ImplicitCastExpr 0x5626fbbe8ab0 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5626fbbe8a90 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe8678 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd33f20 <line:345:3, line:353:10>
|   |-ParagraphComment 0x5626fbd33b30 <line:345:3>
|   | `-TextComment 0x5626fbd33b00 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd33b50 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x5626fbd33bb0 <col:10, col:76>
|   |   `-TextComment 0x5626fbd33b80 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x5626fbd33c00 <line:347:3, col:69>
|   | `-TextComment 0x5626fbd33bd0 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x5626fbd33c50 <line:349:3>
|   | `-TextComment 0x5626fbd33c20 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd33c70 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd33d20 <line:349:15, line:350:3>
|   |   |-TextComment 0x5626fbd33cd0 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5626fbd33cf0 <line:350:3> Text=" "
|   |-ParamCommandComment 0x5626fbd33d40 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd33dd0 <col:15, col:74>
|   |   `-TextComment 0x5626fbd33da0 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x5626fbd33e20 <line:352:3>
|   | `-TextComment 0x5626fbd33df0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd33e40 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x5626fbd33ec0 <line:352:11, line:353:10>
|       |-TextComment 0x5626fbd33e70 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x5626fbd33e90 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x5626fbbe8d10 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe8c00 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbbe8c78 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbe90a8 <line:375:1, line:377:1>
| | `-ReturnStmt 0x5626fbbe9070 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x5626fbbe9040 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x5626fbbe8eb0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x5626fbbe8e90 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x5626fbbe8e60 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5626fbbe8dc0 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe8c78 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5626fbbe8e78 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x5626fbbe8e40 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x5626fbbe8e18 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x5626fbbe8de0 <col:23> 'int' 0
| |     |-CallExpr 0x5626fbbe8f48 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x5626fbbe8f30 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x5626fbbe8ed0 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x5626fbbe8710 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x5626fbbe8f78 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x5626fbbe8ef0 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe8c00 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x5626fbbe8f90 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x5626fbbe8f10 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe8c78 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x5626fbbe9028 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x5626fbbe9008 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x5626fbbe8fe0 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x5626fbbe8fa8 <col:23> 'int' 0
| `-FullComment 0x5626fbd34390 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x5626fbd33fc0 <line:363:3>
|   | `-TextComment 0x5626fbd33f90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd33fe0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5626fbd34040 <col:10, col:58>
|   |   `-TextComment 0x5626fbd34010 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x5626fbd34090 <line:365:3>
|   | `-TextComment 0x5626fbd34060 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd340b0 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd34160 <line:365:15, line:366:3>
|   |   |-TextComment 0x5626fbd34110 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5626fbd34130 <line:366:3> Text=" "
|   |-ParamCommandComment 0x5626fbd34180 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd34210 <col:15, col:74>
|   |   `-TextComment 0x5626fbd341e0 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x5626fbd34260 <line:368:3>
|   | `-TextComment 0x5626fbd34230 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd34280 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x5626fbd34330 <line:368:11, line:370:13>
|       |-TextComment 0x5626fbd342b0 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x5626fbd342d0 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x5626fbd342f0 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x5626fbbe9160 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5626fbbe90d0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5626fbbe9488 <line:388:1, line:390:1>
| | `-ReturnStmt 0x5626fbbe9448 <line:389:2, col:49>
| |   `-ConditionalOperator 0x5626fbbe9418 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x5626fbbe93d0 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x5626fbbe9260 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x5626fbbe9248 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x5626fbbe9208 <col:9> 'bool (sys_dlist_t *)' Function 0x5626fbbe6d60 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x5626fbbe9288 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5626fbbe9228 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe90d0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5626fbbe9400 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5626fbbe9300 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5626fbbe92d8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5626fbbe92a0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbbe93e8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5626fbbe93a0 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x5626fbbaa8c0
| |         `-MemberExpr 0x5626fbbe9358 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| |           `-ImplicitCastExpr 0x5626fbbe9340 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5626fbbe9320 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe90d0 'list' 'sys_dlist_t *'
| `-FullComment 0x5626fbd346d0 <line:380:3, line:384:63>
|   |-ParagraphComment 0x5626fbd34430 <line:380:3>
|   | `-TextComment 0x5626fbd34400 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd34450 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5626fbd344b0 <col:10, col:54>
|   |   `-TextComment 0x5626fbd34480 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x5626fbd34500 <line:382:3>
|   | `-TextComment 0x5626fbd344d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd34520 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd345b0 <col:15, col:51>
|   |   `-TextComment 0x5626fbd34580 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5626fbd34600 <line:384:3>
|   | `-TextComment 0x5626fbd345d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd34620 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x5626fbd34680 <col:11, col:63>
|       `-TextComment 0x5626fbd34650 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x5626fbbe9640 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe94b0 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbbe9528 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbe9d48 <line:404:1, line:410:1>
| | |-BinaryOperator 0x5626fbbe97d8 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbe9770 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| | | | `-MemberExpr 0x5626fbbe9728 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |   `-ImplicitCastExpr 0x5626fbbe9710 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbbe96f0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe9528 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbe97c0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626fbbe97a0 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe94b0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5626fbbe9a58 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbe9878 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| | | | `-MemberExpr 0x5626fbbe9830 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | | |   `-ImplicitCastExpr 0x5626fbbe9818 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbbe97f8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe9528 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbe9a40 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5626fbbe9a10 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x5626fbbaa8c0
| | |     `-MemberExpr 0x5626fbbe99c8 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | |       `-ImplicitCastExpr 0x5626fbbe99b0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5626fbbe9990 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe94b0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5626fbbe9bf0 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbe9b88 <col:2, col:14> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| | | | `-MemberExpr 0x5626fbbe9b40 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |   `-ImplicitCastExpr 0x5626fbbe9b28 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5626fbbe9af8 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x5626fbbaa8c0
| | | |       `-MemberExpr 0x5626fbbe9ab0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | | |         `-ImplicitCastExpr 0x5626fbbe9a98 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5626fbbe9a78 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe94b0 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x5626fbbe9bd8 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626fbbe9bb8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe9528 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x5626fbbe9cf8 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x5626fbbe9c90 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x5626fbbaa8c0
| |   | `-MemberExpr 0x5626fbbe9c48 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| |   |   `-ImplicitCastExpr 0x5626fbbe9c30 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5626fbbe9c10 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe94b0 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x5626fbbe9ce0 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbbe9cc0 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe9528 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd34b40 <line:393:3, line:400:14>
|   |-ParagraphComment 0x5626fbd34770 <line:393:3>
|   | `-TextComment 0x5626fbd34740 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd34790 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5626fbd347f0 <col:10, col:34>
|   |   `-TextComment 0x5626fbd347c0 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x5626fbd34840 <line:395:3, col:62>
|   | `-TextComment 0x5626fbd34810 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd34890 <line:397:3>
|   | `-TextComment 0x5626fbd34860 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd348b0 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd34960 <line:397:15, line:398:3>
|   |   |-TextComment 0x5626fbd34910 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5626fbd34930 <line:398:3> Text=" "
|   |-ParamCommandComment 0x5626fbd34980 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd34a10 <col:15, col:36>
|   |   `-TextComment 0x5626fbd349e0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x5626fbd34a60 <line:400:3>
|   | `-TextComment 0x5626fbd34a30 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd34a80 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd34ae0 <col:11, col:14>
|       `-TextComment 0x5626fbd34ab0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbbe9e98 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbe9d88 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbbe9e00 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbea4b8 <line:424:1, line:430:1>
| | |-BinaryOperator 0x5626fbbea0c0 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbe9fc8 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| | | | `-MemberExpr 0x5626fbbe9f80 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |   `-ImplicitCastExpr 0x5626fbbe9f68 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbbe9f48 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe9e00 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbea0a8 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5626fbbea078 <col:15, col:21> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| | |     `-MemberExpr 0x5626fbbea030 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | |       `-ImplicitCastExpr 0x5626fbbea018 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5626fbbe9ff8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe9d88 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5626fbbea1c8 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbea160 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| | | | `-MemberExpr 0x5626fbbea118 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | | |   `-ImplicitCastExpr 0x5626fbbea100 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbbea0e0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe9e00 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbea1b0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626fbbea190 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe9d88 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5626fbbea360 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbea2f8 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| | | | `-MemberExpr 0x5626fbbea2b0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | | |   `-ImplicitCastExpr 0x5626fbbea298 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5626fbbea268 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| | | |       `-MemberExpr 0x5626fbbea220 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |         `-ImplicitCastExpr 0x5626fbbea208 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5626fbbea1e8 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe9d88 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x5626fbbea348 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626fbbea328 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe9e00 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x5626fbbea468 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x5626fbbea400 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| |   | `-MemberExpr 0x5626fbbea3b8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| |   |   `-ImplicitCastExpr 0x5626fbbea3a0 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5626fbbea380 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbe9d88 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x5626fbbea450 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbbea430 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbe9e00 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd34fb0 <line:413:3, line:420:14>
|   |-ParagraphComment 0x5626fbd34be0 <line:413:3>
|   | `-TextComment 0x5626fbd34bb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd34c00 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5626fbd34c60 <col:10, col:34>
|   |   `-TextComment 0x5626fbd34c30 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x5626fbd34cb0 <line:415:3, col:62>
|   | `-TextComment 0x5626fbd34c80 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd34d00 <line:417:3>
|   | `-TextComment 0x5626fbd34cd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd34d20 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd34dd0 <line:417:15, line:418:3>
|   |   |-TextComment 0x5626fbd34d80 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5626fbd34da0 <line:418:3> Text=" "
|   |-ParamCommandComment 0x5626fbd34df0 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd34e80 <col:15, col:36>
|   |   `-TextComment 0x5626fbd34e50 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x5626fbd34ed0 <line:420:3>
|   | `-TextComment 0x5626fbd34ea0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd34ef0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd34f50 <col:11, col:14>
|       `-TextComment 0x5626fbd34f20 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbbea650 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbea4f8 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x5626fbbea570 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbeb518 <line:441:1, line:446:1>
| | |-BinaryOperator 0x5626fbbea878 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbea780 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| | | | `-MemberExpr 0x5626fbbea738 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | | |   `-ImplicitCastExpr 0x5626fbbea720 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbbea700 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbea570 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbea860 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5626fbbea830 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| | |     `-MemberExpr 0x5626fbbea7e8 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | |       `-ImplicitCastExpr 0x5626fbbea7d0 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5626fbbea7b0 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbea4f8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x5626fbbeb230 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbea918 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| | | | `-MemberExpr 0x5626fbbea8d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |   `-ImplicitCastExpr 0x5626fbbea8b8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbbea898 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbea570 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbea968 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626fbbea948 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbea4f8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x5626fbbeb3c8 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbeb360 <col:2, col:19> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| | | | `-MemberExpr 0x5626fbbeb318 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |   `-ImplicitCastExpr 0x5626fbbeb300 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5626fbbeb2d0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| | | |       `-MemberExpr 0x5626fbbeb288 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | | |         `-ImplicitCastExpr 0x5626fbbeb270 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5626fbbeb250 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbea4f8 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbeb3b0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626fbbeb390 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbea570 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x5626fbbeb4d0 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x5626fbbeb468 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| |   | `-MemberExpr 0x5626fbbeb420 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| |   |   `-ImplicitCastExpr 0x5626fbbeb408 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5626fbbeb3e8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbea4f8 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x5626fbbeb4b8 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbbeb498 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbea570 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd35340 <line:433:3, line:438:36>
|   |-ParagraphComment 0x5626fbd35050 <line:433:3>
|   | `-TextComment 0x5626fbd35020 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd35070 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5626fbd350d0 <col:10, col:35>
|   |   `-TextComment 0x5626fbd350a0 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x5626fbd35120 <line:435:3, col:52>
|   | `-TextComment 0x5626fbd350f0 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x5626fbd35170 <line:437:3>
|   | `-TextComment 0x5626fbd35140 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd35190 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd35240 <line:437:20, line:438:3>
|   |   |-TextComment 0x5626fbd351f0 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x5626fbd35210 <line:438:3> Text=" "
|   `-ParamCommandComment 0x5626fbd35260 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5626fbd352f0 <col:15, col:36>
|       `-TextComment 0x5626fbd352c0 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x5626fbbeba50 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x5626fbbeb558 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbbeb5d0 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x5626fbbeb888 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x5626fbbeb908 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x5626fbbf09b8 <line:467:1, line:482:1>
| | `-IfStmt 0x5626fbbf0960 <line:468:2, line:481:2> has_else
| |   |-CallExpr 0x5626fbbebb68 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x5626fbbebb50 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x5626fbbebb10 <col:6> 'bool (sys_dlist_t *)' Function 0x5626fbbe6d60 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x5626fbbebb90 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5626fbbebb30 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbeb558 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x5626fbbebce8 <col:32, line:470:2>
| |   | `-CallExpr 0x5626fbbebc88 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x5626fbbebc70 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5626fbbebba8 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x5626fbbe9640 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x5626fbbebcb8 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x5626fbbebbc8 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbeb558 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x5626fbbebcd0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5626fbbebbe8 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbeb5d0 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x5626fbbf0938 <line:470:9, line:481:2>
| |     |-DeclStmt 0x5626fbbebe78 <line:471:3, col:47>
| |     | `-VarDecl 0x5626fbbebd10 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x5626fbbebe38 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x5626fbbebe20 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x5626fbbebd78 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x5626fbbe7410 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x5626fbbebe60 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5626fbbebd98 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbeb558 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x5626fbbf05f0 <line:473:3, line:475:3>
| |     | |-BinaryOperator 0x5626fbbec0d8 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x5626fbbebf80 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x5626fbbebf60 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x5626fbbebf30 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x5626fbbebe90 <col:11> 'sys_dnode_t *' lvalue Var 0x5626fbbebd10 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x5626fbbebf48 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x5626fbbebf10 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x5626fbbebee8 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x5626fbbebeb0 <col:23> 'int' 0
| |     | | `-ParenExpr 0x5626fbbec0b8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x5626fbbec098 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x5626fbbec018 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x5626fbbec000 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x5626fbbebfa0 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x5626fbbeb888 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x5626fbbec048 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x5626fbbebfc0 <col:33> 'sys_dnode_t *' lvalue Var 0x5626fbbebd10 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x5626fbbec060 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x5626fbbebfe0 <col:38> 'void *' lvalue ParmVar 0x5626fbbeb908 'data' 'void *'
| |     | |     `-IntegerLiteral 0x5626fbbec078 <col:47> 'int' 0
| |     | `-CompoundStmt 0x5626fbbec210 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x5626fbbec1f0 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x5626fbbec0f8 <col:4> 'sys_dnode_t *' lvalue Var 0x5626fbbebd10 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x5626fbbec190 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x5626fbbec178 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x5626fbbec118 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x5626fbbe81e0 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x5626fbbec1c0 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x5626fbbec138 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbeb558 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x5626fbbec1d8 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x5626fbbec158 <col:36> 'sys_dnode_t *' lvalue Var 0x5626fbbebd10 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x5626fbbf0910 <line:476:3, line:480:3> has_else
| |       |-BinaryOperator 0x5626fbbf06d8 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x5626fbbf06a8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5626fbbf0608 <col:7> 'sys_dnode_t *' lvalue Var 0x5626fbbebd10 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x5626fbbf06c0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x5626fbbf0688 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x5626fbbf0660 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x5626fbbf0628 <col:23> 'int' 0
| |       |-CompoundStmt 0x5626fbbf0808 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x5626fbbf07a8 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x5626fbbf0790 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x5626fbbf06f8 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x5626fbbea650 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x5626fbbf07d8 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5626fbbf0718 <col:21> 'sys_dnode_t *' lvalue Var 0x5626fbbebd10 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x5626fbbf07f0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5626fbbf0738 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbeb5d0 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x5626fbbf08f8 <line:478:10, line:480:3>
| |         `-CallExpr 0x5626fbbf0898 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x5626fbbf0880 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x5626fbbf0820 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x5626fbbe9640 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x5626fbbf08c8 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x5626fbbf0840 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbeb558 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x5626fbbf08e0 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5626fbbf0860 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbeb5d0 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd35a10 <line:449:3, line:462:14>
|   |-ParagraphComment 0x5626fbd353e0 <line:449:3>
|   | `-TextComment 0x5626fbd353b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd35400 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5626fbd35460 <col:10, col:33>
|   |   `-TextComment 0x5626fbd35430 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x5626fbd35520 <line:451:3, line:454:62>
|   | |-TextComment 0x5626fbd35480 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x5626fbd354a0 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x5626fbd354c0 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x5626fbd354e0 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd35570 <line:456:3>
|   | `-TextComment 0x5626fbd35540 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd35590 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd35640 <line:456:15, line:457:3>
|   |   |-TextComment 0x5626fbd355f0 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5626fbd35610 <line:457:3> Text=" "
|   |-ParamCommandComment 0x5626fbd35660 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd35720 <line:457:15, line:458:3>
|   |   |-TextComment 0x5626fbd356c0 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x5626fbd356e0 <line:458:3> Text=" "
|   |-ParamCommandComment 0x5626fbd35740 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd35820 <line:458:15, line:460:3>
|   |   |-TextComment 0x5626fbd357a0 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x5626fbd357c0 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x5626fbd357e0 <line:460:3> Text=" "
|   |-ParamCommandComment 0x5626fbd35840 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd358d0 <col:15, col:34>
|   |   `-TextComment 0x5626fbd358a0 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x5626fbd35920 <line:462:3>
|   | `-TextComment 0x5626fbd358f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd35940 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd359a0 <col:11, col:14>
|       `-TextComment 0x5626fbd35970 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbbf0a70 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5626fbbf09e0 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5626fbbf1098 <line:496:1, line:500:1>
| | |-BinaryOperator 0x5626fbbf0d20 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbf0c28 <col:2, col:14> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| | | | `-MemberExpr 0x5626fbbf0be0 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |   `-ImplicitCastExpr 0x5626fbbf0bc8 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5626fbbf0b98 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| | | |       `-MemberExpr 0x5626fbbf0b50 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | | |         `-ImplicitCastExpr 0x5626fbbf0b38 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5626fbbf0b18 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbf09e0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbf0d08 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5626fbbf0cd8 <col:21, col:27> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| | |     `-MemberExpr 0x5626fbbf0c90 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | |       `-ImplicitCastExpr 0x5626fbbf0c78 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5626fbbf0c58 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbf09e0 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x5626fbbf0f48 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x5626fbbf0e50 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| | | | `-MemberExpr 0x5626fbbf0e08 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | | |   `-ImplicitCastExpr 0x5626fbbf0df0 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5626fbbf0dc0 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5626fbbaa640
| | | |       `-MemberExpr 0x5626fbbf0d78 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | | |         `-ImplicitCastExpr 0x5626fbbf0d60 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5626fbbf0d40 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbf09e0 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5626fbbf0f30 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5626fbbf0f00 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x5626fbbaa938
| | |     `-MemberExpr 0x5626fbbf0eb8 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5626fbbaa9f0
| | |       `-ImplicitCastExpr 0x5626fbbf0ea0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5626fbbf0e80 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbf09e0 'node' 'sys_dnode_t *'
| | `-CallExpr 0x5626fbbf1028 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x5626fbbf1010 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5626fbbf0f68 <col:2> 'void (sys_dnode_t *)' Function 0x5626fbbe4610 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x5626fbbf1050 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbbf0f88 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x5626fbbf09e0 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd35dd0 <line:485:3, line:492:14>
|   |-ParagraphComment 0x5626fbd35ab0 <line:485:3>
|   | `-TextComment 0x5626fbd35a80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd35ad0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd35b30 <col:10, col:44>
|   |   `-TextComment 0x5626fbd35b00 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x5626fbd35ba0 <line:487:3, line:488:62>
|   | |-TextComment 0x5626fbd35b50 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x5626fbd35b70 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd35bf0 <line:490:3>
|   | `-TextComment 0x5626fbd35bc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd35c10 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd35ca0 <col:15, col:33>
|   |   `-TextComment 0x5626fbd35c70 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x5626fbd35cf0 <line:492:3>
|   | `-TextComment 0x5626fbd35cc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd35d10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd35d70 <col:11, col:14>
|       `-TextComment 0x5626fbd35d40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbbf1160 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5626fbbf10d0 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5626fbbf16b8 <line:513:1, line:522:1>
| | |-DeclStmt 0x5626fbbf1318 <line:514:2, col:26>
| | | `-VarDecl 0x5626fbbf1218 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x5626fbbf1300 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x5626fbbf12e0 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x5626fbbf12b8 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x5626fbbf1280 <col:23> 'int' 0
| | |-IfStmt 0x5626fbbf15a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-UnaryOperator 0x5626fbbf13c8 <line:516:6, col:30> 'int' prefix '!' cannot overflow
| | | | `-CallExpr 0x5626fbbf1388 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x5626fbbf1370 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5626fbbf1330 <col:7> 'bool (sys_dlist_t *)' Function 0x5626fbbe6d60 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x5626fbbf13b0 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbbf1350 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbf10d0 'list' 'sys_dlist_t *'
| | | `-CompoundStmt 0x5626fbbf1580 <col:33, line:519:2>
| | |   |-BinaryOperator 0x5626fbbf14c8 <line:517:3, col:16> 'sys_dnode_t *' '='
| | |   | |-DeclRefExpr 0x5626fbbf13e0 <col:3> 'sys_dnode_t *' lvalue Var 0x5626fbbf1218 'node' 'sys_dnode_t *'
| | |   | `-ImplicitCastExpr 0x5626fbbf14b0 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | |   |   `-MemberExpr 0x5626fbbf1480 <col:10, col:16> 'struct _dnode *' lvalue .head 0x5626fbbaa5c8
| | |   |     `-MemberExpr 0x5626fbbf1438 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5626fbbaa6f0
| | |   |       `-ImplicitCastExpr 0x5626fbbf1420 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | |   |         `-DeclRefExpr 0x5626fbbf1400 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x5626fbbf10d0 'list' 'sys_dlist_t *'
| | |   `-CallExpr 0x5626fbbf1540 <line:518:3, col:24> 'void'
| | |     |-ImplicitCastExpr 0x5626fbbf1528 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x5626fbbf14e8 <col:3> 'void (sys_dnode_t *)' Function 0x5626fbbf0a70 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | |     `-ImplicitCastExpr 0x5626fbbf1568 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | |       `-DeclRefExpr 0x5626fbbf1508 <col:20> 'sys_dnode_t *' lvalue Var 0x5626fbbf1218 'node' 'sys_dnode_t *'
| | `-ReturnStmt 0x5626fbbf1680 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x5626fbbf15d8 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbbf15b8 <col:9> 'sys_dnode_t *' lvalue Var 0x5626fbbf1218 'node' 'sys_dnode_t *'
| `-FullComment 0x5626fbd36170 <line:503:3, line:509:60>
|   |-ParagraphComment 0x5626fbd35e70 <line:503:3>
|   | `-TextComment 0x5626fbd35e40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd35e90 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5626fbd35ef0 <col:10, col:38>
|   |   `-TextComment 0x5626fbd35ec0 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x5626fbd35f40 <line:505:3, col:62>
|   | `-TextComment 0x5626fbd35f10 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd35f90 <line:507:3>
|   | `-TextComment 0x5626fbd35f60 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd35fb0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd36040 <col:15, col:51>
|   |   `-TextComment 0x5626fbd36010 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5626fbd36090 <line:509:3>
|   | `-TextComment 0x5626fbd36060 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd360b0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x5626fbd36110 <col:11, col:60>
|       `-TextComment 0x5626fbd360e0 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x5626fbbf16e0 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x5626fbbf1928 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x5626fbbf1c20 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x5626fbbf1bb0 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x5626fbbf1b50 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x5626fbbf1b10 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x5626fbafd500 'bool'
| |     |-PointerType 0x5626fbbf1820 'struct rbnode *'
| |     | `-ElaboratedType 0x5626fbbf17b0 'struct rbnode' sugar
| |     |   `-RecordType 0x5626fbbf1760 'struct rbnode'
| |     |     `-Record 0x5626fbbf16e0 'rbnode'
| |     `-PointerType 0x5626fbbf1820 'struct rbnode *'
| |       `-ElaboratedType 0x5626fbbf17b0 'struct rbnode' sugar
| |         `-RecordType 0x5626fbbf1760 'struct rbnode'
| |           `-Record 0x5626fbbf16e0 'rbnode'
| `-FullComment 0x5626fbd364d0 <line:62:3, line:72:36>
|   |-ParagraphComment 0x5626fbd36210 <line:62:3>
|   | `-TextComment 0x5626fbd361e0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5626fbd36230 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x5626fbd362a0 <line:63:3>
|   | `-TextComment 0x5626fbd36270 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd362c0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5626fbd36320 <col:10, col:45>
|   |   `-TextComment 0x5626fbd362f0 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x5626fbd36390 <line:65:3, line:66:68>
|   | |-TextComment 0x5626fbd36340 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x5626fbd36360 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x5626fbd36480 <line:68:3, line:72:36>
|     |-TextComment 0x5626fbd363b0 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x5626fbd363d0 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x5626fbd363f0 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x5626fbd36410 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x5626fbd36430 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x5626fbbf1c78 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x5626fbbf1d50 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x5626fbbf1dd8 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x5626fbbf1e40 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x5626fbbf20f0 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x5626fbbf2080 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x5626fbbf2020 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x5626fbbf1fe0 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x5626fbafd4e0 'void'
|       |-PointerType 0x5626fbbf1820 'struct rbnode *'
|       | `-ElaboratedType 0x5626fbbf17b0 'struct rbnode' sugar
|       |   `-RecordType 0x5626fbbf1760 'struct rbnode'
|       |     `-Record 0x5626fbbf16e0 'rbnode'
|       `-PointerType 0x5626fbafdca0 'void *'
|         `-BuiltinType 0x5626fbafd4e0 'void'
|-FunctionDecl 0x5626fbbf2328 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x5626fbbf2170 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x5626fbbf21f0 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x5626fbbf2518 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x5626fbbf2400 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x5626fbbf5af0 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x5626fbbf25e8 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x5626fbbf5930 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x5626fbbf59b0 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x5626fbbf5e28 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x5626fbbf5c78 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x5626fbbf5cf8 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x5626fbbf60e0 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x5626fbbf5f30 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x5626fbbf5fc0 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x5626fbd36620 <line:96:3, col:31>
|   |-ParagraphComment 0x5626fbd36570 <col:3>
|   | `-TextComment 0x5626fbd36540 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd36590 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x5626fbd365f0 <col:10, col:31>
|       `-TextComment 0x5626fbd365c0 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x5626fbbf6308 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x5626fbbf61e0 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x5626fbbf6270 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x5626fbd36770 <line:101:3, col:31>
|   |-ParagraphComment 0x5626fbd366c0 <col:3>
|   | `-TextComment 0x5626fbd36690 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd366e0 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x5626fbd36740 <col:10, col:31>
|       `-TextComment 0x5626fbd36710 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x5626fbbf6538 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x5626fbbf6410 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x5626fbbf6738 <line:109:1, line:111:1>
| | `-ReturnStmt 0x5626fbbf6700 <line:110:2, col:32>
| |   `-CallExpr 0x5626fbbf66b8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x5626fbbf66a0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbbf65e0 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x5626fbbf5e28 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x5626fbbf66e8 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbbf6600 <col:25> 'struct rbtree *' lvalue ParmVar 0x5626fbbf6410 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x5626fbbf6620 <col:31> 'int' 0
| `-FullComment 0x5626fbd368c0 <line:106:3, col:54>
|   |-ParagraphComment 0x5626fbd36810 <col:3>
|   | `-TextComment 0x5626fbd367e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd36830 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x5626fbd36890 <col:10, col:54>
|       `-TextComment 0x5626fbd36860 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x5626fbbf6820 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x5626fbbf6778 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x5626fbbf6a68 <line:117:1, line:119:1>
| | `-ReturnStmt 0x5626fbbf6a30 <line:118:2, col:32>
| |   `-CallExpr 0x5626fbbf69e8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x5626fbbf69d0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbbf68c8 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x5626fbbf5e28 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x5626fbbf6a18 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbbf68e8 <col:25> 'struct rbtree *' lvalue ParmVar 0x5626fbbf6778 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x5626fbbf69b0 <col:31> 'int' 1
| `-FullComment 0x5626fbd36a10 <line:114:3, col:55>
|   |-ParagraphComment 0x5626fbd36960 <col:3>
|   | `-TextComment 0x5626fbd36930 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd36980 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x5626fbd369e0 <col:10, col:55>
|       `-TextComment 0x5626fbd369b0 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x5626fbbf6c50 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x5626fbbf6aa8 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x5626fbbf6b38 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x5626fbd36c60 <line:122:3, line:128:10>
|   |-ParagraphComment 0x5626fbd36ab0 <line:122:3>
|   | `-TextComment 0x5626fbd36a80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd36ad0 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x5626fbd36b30 <col:10, col:60>
|   |   `-TextComment 0x5626fbd36b00 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x5626fbd36c20 <line:124:3, line:128:10>
|     |-TextComment 0x5626fbd36b50 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x5626fbd36b70 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x5626fbd36b90 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x5626fbd36bb0 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x5626fbd36bd0 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x5626fbbf6f80 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x5626fbbf6d50 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x5626fbbf6dc8 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x5626fbbf6e48 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x5626fbbf71f8 <line:143:1, line:145:1>
| | `-CallExpr 0x5626fbbf7178 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x5626fbbf7160 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5626fbbf7038 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x5626fbbf5af0 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x5626fbbf71b0 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x5626fbbf7090 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x5626fbbf1d50
| |   |   `-ImplicitCastExpr 0x5626fbbf7078 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5626fbbf7058 <col:12> 'struct rbtree *' lvalue ParmVar 0x5626fbbf6d50 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x5626fbbf71c8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x5626fbbf70c0 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x5626fbbf6dc8 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x5626fbbf71e0 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbbf70e0 <col:34> 'void *' lvalue ParmVar 0x5626fbbf6e48 'cookie' 'void *'
| `-FullComment 0x5626fbd36e80 <line:134:3, line:139:18>
|   |-ParagraphComment 0x5626fbd36d00 <line:134:3>
|   | `-TextComment 0x5626fbd36cd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd36d20 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5626fbd36d80 <col:10, col:33>
|   |   `-TextComment 0x5626fbd36d50 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x5626fbd36e40 <line:136:3, line:139:18>
|     |-TextComment 0x5626fbd36da0 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x5626fbd36dc0 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x5626fbd36de0 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x5626fbd36e00 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x5626fbbf7210 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x5626fbbf7348 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x5626fbbf73b0 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x5626fbbf7418 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x5626fbbf76f8 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x5626fbbf7490 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x5626fbbf75c8 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x5626fbbf7868 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x5626fbbf8d48 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x5626fbbf7928 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x5626fbbf8fb0 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x5626fbbf8e00 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x5626fbbf8e90 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x5626fbbf9198 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x5626fbbf9070 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x5626fbbf9100 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x5626fbbf9248 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x5626fbbf9318 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x5626fbbf9380 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x5626fbbf96a0 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x5626fbbf94f8 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x5626fbbf9588 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x5626fbbf98a0 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x5626fbbf9778 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x5626fbbf9808 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x5626fbbf9a98 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x5626fbbf9978 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x5626fbbf9b40 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x5626fbbf9d90 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x5626fbbf9df8 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x5626fbbfa0c0 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x5626fbbf9f18 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x5626fbbf9fa8 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x5626fbbfa2c0 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x5626fbbfa198 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x5626fbbfa228 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x5626fbbfa4b8 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x5626fbbfa398 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x5626fbbfa588 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x5626fbbfa708 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x5626fbbfa778 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x5626fbbfa640 'struct _snode' sugar
|   `-RecordType 0x5626fbbfa610 'struct _snode'
|     `-Record 0x5626fbbfa588 '_snode'
|-RecordDecl 0x5626fbbfa7d0 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x5626fbbfa8f0 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x5626fbbfa950 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x5626fbbfa9f8 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x5626fbbfa9a0 'struct _slist' sugar
|   `-RecordType 0x5626fbbfa850 'struct _slist'
|     `-Record 0x5626fbbfa7d0 '_slist'
|-FunctionDecl 0x5626fbc10490 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbc10380 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x5626fbc10778 <line:191:1, line:194:1>
| | |-BinaryOperator 0x5626fbc10638 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x5626fbc10570 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x5626fbbfa8f0
| | | | `-ImplicitCastExpr 0x5626fbc10558 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5626fbc10538 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5626fbc10380 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x5626fbc10620 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x5626fbc10600 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x5626fbc105d8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5626fbc105a0 <col:23> 'int' 0
| | `-BinaryOperator 0x5626fbc10758 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x5626fbc10690 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x5626fbbfa950
| |   | `-ImplicitCastExpr 0x5626fbc10678 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5626fbc10658 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5626fbc10380 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x5626fbc10740 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x5626fbc10720 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x5626fbc106f8 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x5626fbc106c0 <col:23> 'int' 0
| `-FullComment 0x5626fbd370e0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x5626fbd36f20 <line:186:3>
|   | `-TextComment 0x5626fbd36ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd36f40 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5626fbd36fa0 <col:10, col:27>
|   |   `-TextComment 0x5626fbd36f70 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x5626fbd36ff0 <line:188:3>
|   | `-TextComment 0x5626fbd36fc0 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd37010 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x5626fbd370a0 <col:15, col:50>
|       `-TextComment 0x5626fbd37070 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x5626fbc108b0 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc107a8 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc109e8 <line:199:1, line:201:1>
|   `-ReturnStmt 0x5626fbc109d8 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x5626fbc109c0 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x5626fbc10990 <col:9, col:15> 'struct _snode *' lvalue ->next 0x5626fbbfa708
|         `-ImplicitCastExpr 0x5626fbc10978 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5626fbc10958 <col:9> 'sys_snode_t *' lvalue ParmVar 0x5626fbc107a8 'node' 'sys_snode_t *'
|-FunctionDecl 0x5626fbc10ba0 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc10a10 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x5626fbc10a88 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc10d10 <line:204:1, line:206:1>
|   `-BinaryOperator 0x5626fbc10cf0 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x5626fbc10c88 <col:2, col:10> 'struct _snode *' lvalue ->next 0x5626fbbfa708
|     | `-ImplicitCastExpr 0x5626fbc10c70 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626fbc10c50 <col:2> 'sys_snode_t *' lvalue ParmVar 0x5626fbc10a10 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x5626fbc10cd8 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbc10cb8 <col:17> 'sys_snode_t *' lvalue ParmVar 0x5626fbc10a88 'child' 'sys_snode_t *'
|-FunctionDecl 0x5626fbc10ed0 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc10d38 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc10db0 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc11040 <line:209:1, line:211:1>
|   `-BinaryOperator 0x5626fbc11020 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x5626fbc10fb8 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x5626fbbfa8f0
|     | `-ImplicitCastExpr 0x5626fbc10fa0 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626fbc10f80 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5626fbc10d38 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x5626fbc11008 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbc10fe8 <col:15> 'sys_snode_t *' lvalue ParmVar 0x5626fbc10db0 'node' 'sys_snode_t *'
|-FunctionDecl 0x5626fbc11178 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc11068 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc110e0 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc11318 <line:214:1, line:216:1>
|   `-BinaryOperator 0x5626fbc112c8 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x5626fbc11260 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x5626fbbfa950
|     | `-ImplicitCastExpr 0x5626fbc11248 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626fbc11228 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5626fbc11068 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x5626fbc112b0 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbc11290 <col:15> 'sys_snode_t *' lvalue ParmVar 0x5626fbc110e0 'node' 'sys_snode_t *'
|-FunctionDecl 0x5626fbc11490 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbc11380 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x5626fbc115f8 <line:226:1, line:228:1>
| | `-ReturnStmt 0x5626fbc115b8 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x5626fbc115a0 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5626fbc11570 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x5626fbbfa8f0
| |       `-ImplicitCastExpr 0x5626fbc11558 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbc11538 <col:9> 'sys_slist_t *' lvalue ParmVar 0x5626fbc11380 'list' 'sys_slist_t *'
| `-FullComment 0x5626fbd37420 <line:219:3, line:223:68>
|   |-ParagraphComment 0x5626fbd37180 <line:219:3>
|   | `-TextComment 0x5626fbd37150 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd371a0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd37200 <col:10, col:43>
|   |   `-TextComment 0x5626fbd371d0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x5626fbd37250 <line:221:3>
|   | `-TextComment 0x5626fbd37220 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd37270 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd37300 <col:15, col:62>
|   |   `-TextComment 0x5626fbd372d0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x5626fbd37350 <line:223:3>
|   | `-TextComment 0x5626fbd37320 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd37370 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x5626fbd373d0 <col:11, col:68>
|       `-TextComment 0x5626fbd373a0 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x5626fbc116b0 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbc11620 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x5626fbc11818 <line:238:1, line:240:1>
| | `-ReturnStmt 0x5626fbc117d8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x5626fbc117c0 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5626fbc11790 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x5626fbbfa950
| |       `-ImplicitCastExpr 0x5626fbc11778 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbc11758 <col:9> 'sys_slist_t *' lvalue ParmVar 0x5626fbc11620 'list' 'sys_slist_t *'
| `-FullComment 0x5626fbd38790 <line:231:3, line:235:67>
|   |-ParagraphComment 0x5626fbd374c0 <line:231:3>
|   | `-TextComment 0x5626fbd37490 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd374e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd37540 <col:10, col:42>
|   |   `-TextComment 0x5626fbd37510 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x5626fbd37590 <line:233:3>
|   | `-TextComment 0x5626fbd37560 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd375b0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd37640 <col:15, col:61>
|   |   `-TextComment 0x5626fbd37610 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x5626fbd37690 <line:235:3>
|   | `-TextComment 0x5626fbd37660 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd376b0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5626fbd38740 <col:11, col:67>
|       `-TextComment 0x5626fbd376e0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x5626fbc11950 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbc11840 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x5626fbd38ad0 <line:247:3, line:251:57>
|   |-ParagraphComment 0x5626fbd38830 <line:247:3>
|   | `-TextComment 0x5626fbd38800 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd38850 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd388b0 <col:10, col:41>
|   |   `-TextComment 0x5626fbd38880 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x5626fbd38900 <line:249:3>
|   | `-TextComment 0x5626fbd388d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd38920 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd389b0 <col:15, col:44>
|   |   `-TextComment 0x5626fbd38980 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x5626fbd38a00 <line:251:3>
|   | `-TextComment 0x5626fbd389d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd38a20 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5626fbd38a80 <col:11, col:57>
|       `-TextComment 0x5626fbd38a50 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x5626fbc11a98 prev 0x5626fbc11950 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbc11a08 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x5626fbc11d68 <line:60:2, line:62:2>
|   `-ReturnStmt 0x5626fbc11d28 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x5626fbc11d10 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5626fbc11cf0 <col:10, col:54> 'int'
|         `-BinaryOperator 0x5626fbc11cd0 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x5626fbc11bf8 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x5626fbc11be0 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x5626fbc11b40 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc11490 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x5626fbc11c20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x5626fbc11b60 <col:41> 'sys_slist_t *' lvalue ParmVar 0x5626fbc11a08 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x5626fbc11cb8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x5626fbc11c98 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x5626fbc11c70 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x5626fbc11c38 <col:23> 'int' 0
|-FunctionDecl 0x5626fbc11e20 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc11d90 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x5626fbd38e70 <line:258:3, line:264:55>
|   |-ParagraphComment 0x5626fbd38b70 <line:258:3>
|   | `-TextComment 0x5626fbd38b40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd38b90 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5626fbd38bf0 <col:10, col:64>
|   |   `-TextComment 0x5626fbd38bc0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x5626fbd38c40 <line:260:3, col:69>
|   | `-TextComment 0x5626fbd38c10 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5626fbd38c90 <line:262:3>
|   | `-TextComment 0x5626fbd38c60 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd38cb0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd38d40 <col:15, col:64>
|   |   `-TextComment 0x5626fbd38d10 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5626fbd38d90 <line:264:3>
|   | `-TextComment 0x5626fbd38d60 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd38db0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5626fbd38e10 <col:11, col:55>
|       `-TextComment 0x5626fbd38de0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5626fbc11f68 prev 0x5626fbc11e20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc11ed8 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc12148 <line:67:2, line:69:2>
|   `-ReturnStmt 0x5626fbc12108 <line:68:3, col:42>
|     `-CallExpr 0x5626fbc120c8 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x5626fbc120b0 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbc12010 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5626fbc108b0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x5626fbc120f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbc12030 <col:38> 'sys_snode_t *' lvalue ParmVar 0x5626fbc11ed8 'node' 'sys_snode_t *'
|-FunctionDecl 0x5626fbc12200 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc12170 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x5626fbd391b0 <line:271:3, line:275:55>
|   |-ParagraphComment 0x5626fbd38f10 <line:271:3>
|   | `-TextComment 0x5626fbd38ee0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd38f30 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5626fbd38f90 <col:10, col:46>
|   |   `-TextComment 0x5626fbd38f60 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x5626fbd38fe0 <line:273:3>
|   | `-TextComment 0x5626fbd38fb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd39000 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd39090 <col:15, col:64>
|   |   `-TextComment 0x5626fbd39060 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5626fbd390e0 <line:275:3>
|   | `-TextComment 0x5626fbd390b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd39100 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5626fbd39160 <col:11, col:55>
|       `-TextComment 0x5626fbd39130 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5626fbc13a80 prev 0x5626fbc12200 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc122b8 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc13db8 <line:74:2, line:78:2>
|   `-ReturnStmt 0x5626fbc13d78 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x5626fbc13d48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x5626fbc13bf8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x5626fbc13bc8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x5626fbc13b28 <col:10> 'sys_snode_t *' lvalue ParmVar 0x5626fbc122b8 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x5626fbc13be0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x5626fbc13ba8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5626fbc13b80 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5626fbc13b48 <col:23> 'int' 0
|       |-CallExpr 0x5626fbc13c70 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x5626fbc13c58 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5626fbc13c18 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5626fbc11f68 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x5626fbc13c98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5626fbc13c38 <col:43> 'sys_snode_t *' lvalue ParmVar 0x5626fbc122b8 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x5626fbc13d30 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x5626fbc13d10 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x5626fbc13ce8 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x5626fbc13cb0 <col:23> 'int' 0
|-FunctionDecl 0x5626fbc13ef0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc13de0 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc13e58 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x5626fbd39540 <line:282:3, line:287:47>
|   |-ParagraphComment 0x5626fbd39250 <line:282:3>
|   | `-TextComment 0x5626fbd39220 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd39270 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd392d0 <col:10, col:42>
|   |   `-TextComment 0x5626fbd392a0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x5626fbd39320 <line:284:3, col:62>
|   | `-TextComment 0x5626fbd392f0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd39370 <line:286:3>
|   | `-TextComment 0x5626fbd39340 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd39390 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd39440 <line:286:15, line:287:3>
|   |   |-TextComment 0x5626fbd393f0 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd39410 <line:287:3> Text=" "
|   `-ParamCommandComment 0x5626fbd39460 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5626fbd394f0 <col:15, col:47>
|       `-TextComment 0x5626fbd394c0 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x5626fbc140c0 prev 0x5626fbc13ef0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc13fb0 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc14028 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc14728 <line:84:2, line:93:2>
|   |-CallExpr 0x5626fbc142c8 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x5626fbc142b0 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbc14170 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5626fbc10ba0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5626fbc142f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbc14190 <col:30> 'sys_snode_t *' lvalue ParmVar 0x5626fbc14028 'node' 'sys_snode_t *'
|   | `-CallExpr 0x5626fbc14208 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5626fbc141f0 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5626fbc141b0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc11490 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x5626fbc14230 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbc141d0 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5626fbc13fb0 'list' 'sys_slist_t *'
|   |-CallExpr 0x5626fbc143e8 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x5626fbc143d0 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbc14310 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc10ed0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5626fbc14418 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbc14330 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5626fbc13fb0 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x5626fbc14430 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5626fbc14350 <col:36> 'sys_snode_t *' lvalue ParmVar 0x5626fbc14028 'node' 'sys_snode_t *'
|   `-IfStmt 0x5626fbc146e8 <line:89:3, line:92:3>
|     |-BinaryOperator 0x5626fbc14578 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5626fbc144a0 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x5626fbc14488 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5626fbc14448 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc116b0 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x5626fbc144c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5626fbc14468 <col:37> 'sys_slist_t *' lvalue ParmVar 0x5626fbc13fb0 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x5626fbc14560 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x5626fbc14540 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5626fbc14518 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5626fbc144e0 <col:23> 'int' 0
|     `-CompoundStmt 0x5626fbc146d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|       `-CallExpr 0x5626fbc14688 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|         |-ImplicitCastExpr 0x5626fbc14670 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5626fbc14598 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc11178 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x5626fbc146b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5626fbc145b8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5626fbc13fb0 'list' 'sys_slist_t *'
|         `-CallExpr 0x5626fbc14630 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|           |-ImplicitCastExpr 0x5626fbc14618 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5626fbc145d8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc11490 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           `-ImplicitCastExpr 0x5626fbc14658 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5626fbc145f8 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5626fbc13fb0 'list' 'sys_slist_t *'
|-FunctionDecl 0x5626fbc14870 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc14760 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc147d8 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5626fbd398d0 <line:295:3, line:300:46>
|   |-ParagraphComment 0x5626fbd395e0 <line:295:3>
|   | `-TextComment 0x5626fbd395b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd39600 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd39660 <col:10, col:41>
|   |   `-TextComment 0x5626fbd39630 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x5626fbd396b0 <line:297:3, col:62>
|   | `-TextComment 0x5626fbd39680 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd39700 <line:299:3>
|   | `-TextComment 0x5626fbd396d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd39720 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd397d0 <line:299:15, line:300:3>
|   |   |-TextComment 0x5626fbd39780 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd397a0 <line:300:3> Text=" "
|   `-ParamCommandComment 0x5626fbd397f0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5626fbd39880 <col:15, col:46>
|       `-TextComment 0x5626fbd39850 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x5626fbc15780 prev 0x5626fbc14870 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc14930 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc149a8 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc15f08 <line:99:2, line:111:2>
|   |-CallExpr 0x5626fbc15908 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x5626fbc158f0 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbc15830 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5626fbc10ba0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5626fbc15938 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbc15850 <col:30> 'sys_snode_t *' lvalue ParmVar 0x5626fbc149a8 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x5626fbc15950 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x5626fbc158d0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x5626fbc158a8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x5626fbc15870 <col:23> 'int' 0
|   `-IfStmt 0x5626fbc15eb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3> has_else
|     |-BinaryOperator 0x5626fbc15a98 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5626fbc159c0 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x5626fbc159a8 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5626fbc15968 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc116b0 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x5626fbc159e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5626fbc15988 <col:37> 'sys_slist_t *' lvalue ParmVar 0x5626fbc14930 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x5626fbc15a80 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x5626fbc15a60 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5626fbc15a38 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5626fbc15a00 <col:23> 'int' 0
|     |-CompoundStmt 0x5626fbc15c68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x5626fbc15b30 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x5626fbc15b18 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5626fbc15ab8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc11178 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x5626fbc15b60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5626fbc15ad8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5626fbc14930 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x5626fbc15b78 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5626fbc15af8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5626fbc149a8 'node' 'sys_snode_t *'
|     | `-CallExpr 0x5626fbc15c08 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x5626fbc15bf0 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5626fbc15b90 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc10ed0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x5626fbc15c38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5626fbc15bb0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5626fbc14930 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x5626fbc15c50 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5626fbc15bd0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5626fbc149a8 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x5626fbc15e98 <line:105:10, line:110:3>
|       |-CallExpr 0x5626fbc15d78 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x5626fbc15d60 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5626fbc15c88 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5626fbc10ba0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x5626fbc15d00 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x5626fbc15ce8 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5626fbc15ca8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc116b0 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x5626fbc15d28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5626fbc15cc8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5626fbc14930 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x5626fbc15da8 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5626fbc15d40 <col:5> 'sys_snode_t *' lvalue ParmVar 0x5626fbc149a8 'node' 'sys_snode_t *'
|       `-CallExpr 0x5626fbc15e38 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x5626fbc15e20 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5626fbc15dc0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc11178 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x5626fbc15e68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5626fbc15de0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5626fbc14930 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x5626fbc15e80 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5626fbc15e00 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5626fbc149a8 'node' 'sys_snode_t *'
|-FunctionDecl 0x5626fbc16170 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5626fbc15f38 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc15fb8 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x5626fbc16038 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x5626fbd39e30 <line:308:3, line:318:66>
|   |-ParagraphComment 0x5626fbd39970 <line:308:3>
|   | `-TextComment 0x5626fbd39940 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd39990 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd399f0 <col:10, col:41>
|   |   `-TextComment 0x5626fbd399c0 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x5626fbd39ae0 <line:310:3, line:312:62>
|   | |-TextComment 0x5626fbd39a10 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x5626fbd39a30 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x5626fbd39a80 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x5626fbd39aa0 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd39b30 <line:314:3, col:48>
|   | `-TextComment 0x5626fbd39b00 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x5626fbd39b80 <line:316:3>
|   | `-TextComment 0x5626fbd39b50 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd39ba0 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd39c50 <line:316:15, line:317:3>
|   |   |-TextComment 0x5626fbd39c00 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd39c20 <line:317:3> Text=" "
|   |-ParamCommandComment 0x5626fbd39c70 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd39d20 <line:317:15, line:318:3>
|   |   |-TextComment 0x5626fbd39cd0 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x5626fbd39cf0 <line:318:3> Text=" "
|   `-ParamCommandComment 0x5626fbd39d40 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x5626fbd39dd0 <col:15, col:66>
|       `-TextComment 0x5626fbd39da0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x5626fbc163d8 prev 0x5626fbc16170 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5626fbc16238 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc162b8 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x5626fbc16338 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x5626fbb9e4c8 <col:31, line:127:42>
|   |-IfStmt 0x5626fbb9e360 <line:118:2, line:125:2> has_else
|   | |-BinaryOperator 0x5626fbc165c0 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x5626fbc164e8 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x5626fbc164d0 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5626fbc16490 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc116b0 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x5626fbc16510 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5626fbc164b0 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5626fbc16238 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x5626fbc165a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x5626fbc16588 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5626fbc16560 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5626fbc16528 <col:23> 'int' 0
|   | |-CompoundStmt 0x5626fbc166f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x5626fbc166a8 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x5626fbc16690 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5626fbc165e0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc10ed0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x5626fbc166d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5626fbc16600 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5626fbc16238 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x5626fbc16668 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x5626fbc16650 <col:31> 'void *' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x5626fbc16620 <col:31> 'void *' lvalue ParmVar 0x5626fbc162b8 'head' 'void *'
|   | `-CompoundStmt 0x5626fbb9e348 <line:121:9, line:125:2>
|   |   `-CallExpr 0x5626fbb9e318 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x5626fbb9e300 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626fbc16708 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5626fbc10ba0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x5626fbb9e250 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x5626fbc16768 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5626fbc16728 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc116b0 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x5626fbb9e278 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5626fbc16748 <col:34> 'sys_slist_t *' lvalue ParmVar 0x5626fbc16238 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x5626fbb9e2d8 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x5626fbb9e2c0 <col:29> 'void *' <LValueToRValue> part_of_explicit_cast
|   |         `-DeclRefExpr 0x5626fbb9e290 <col:29> 'void *' lvalue ParmVar 0x5626fbc162b8 'head' 'void *'
|   `-CallExpr 0x5626fbb9e450 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x5626fbb9e438 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbb9e388 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc11178 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x5626fbb9e480 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbb9e3a8 <col:29> 'sys_slist_t *' lvalue ParmVar 0x5626fbc16238 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x5626fbb9e410 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x5626fbb9e3f8 <col:35> 'void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5626fbb9e3c8 <col:35> 'void *' lvalue ParmVar 0x5626fbc16338 'tail' 'void *'
|-FunctionDecl 0x5626fbb9e690 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbb9e4f8 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbb9e570 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x5626fbd3a1e0 <line:326:3, line:332:57>
|   |-ParagraphComment 0x5626fbd39ed0 <line:326:3>
|   | `-TextComment 0x5626fbd39ea0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd39ef0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5626fbd39f50 <col:10, col:65>
|   |   `-TextComment 0x5626fbd39f20 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x5626fbd39fc0 <line:328:3, line:329:62>
|   | |-TextComment 0x5626fbd39f70 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x5626fbd39f90 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3a010 <line:331:3>
|   | `-TextComment 0x5626fbd39fe0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3a030 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3a0e0 <line:331:15, line:332:3>
|   |   |-TextComment 0x5626fbd3a090 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd3a0b0 <line:332:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3a100 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x5626fbd3a190 <col:25, col:57>
|       `-TextComment 0x5626fbd3a160 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x5626fbb9e860 prev 0x5626fbb9e690 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbb9e750 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbb9e7c8 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x5626fbb9eeb8 <line:135:2, line:141:2>
|   |-DeclStmt 0x5626fbb9ea18 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x5626fbb9e920 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x5626fbb9e998 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x5626fbb9eae8 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x5626fbb9ea30 <col:3> 'sys_snode_t *' lvalue Var 0x5626fbb9e920 'head' 'sys_snode_t *'
|   | `-CallExpr 0x5626fbb9eaa8 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5626fbb9ea90 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5626fbb9ea50 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc11490 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x5626fbb9ead0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbb9ea70 <col:40> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9e7c8 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x5626fbb9ebc0 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x5626fbb9eb08 <col:3> 'sys_snode_t *' lvalue Var 0x5626fbb9e998 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x5626fbb9eb80 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5626fbb9eb68 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5626fbb9eb28 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc116b0 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x5626fbb9eba8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbb9eb48 <col:40> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9e7c8 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x5626fbb9ecd8 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x5626fbb9ecc0 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbb9ebe0 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x5626fbc163d8 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x5626fbb9ed10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbb9ec00 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9e750 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x5626fbb9ed40 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x5626fbb9ed28 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5626fbb9ec20 <col:41> 'sys_snode_t *' lvalue Var 0x5626fbb9e920 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x5626fbb9ed70 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x5626fbb9ed58 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbb9ec40 <col:47> 'sys_snode_t *' lvalue Var 0x5626fbb9e998 'tail' 'sys_snode_t *'
|   `-CallExpr 0x5626fbb9ee48 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x5626fbb9ee30 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbb9ed88 <col:1> 'void (sys_slist_t *)' Function 0x5626fbc10490 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x5626fbb9ee70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbb9eda8 <col:28> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9e7c8 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x5626fbb9f130 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbb9ef00 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbb9ef78 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x5626fbb9eff0 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5626fbd3a650 <line:340:3, line:346:46>
|   |-ParagraphComment 0x5626fbd3a280 <line:340:3>
|   | `-TextComment 0x5626fbd3a250 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3a2a0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd3a300 <col:10, col:41>
|   |   `-TextComment 0x5626fbd3a2d0 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x5626fbd3a350 <line:342:3, col:62>
|   | `-TextComment 0x5626fbd3a320 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3a3a0 <line:344:3>
|   | `-TextComment 0x5626fbd3a370 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3a3c0 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3a470 <line:344:15, line:345:3>
|   |   |-TextComment 0x5626fbd3a420 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd3a440 <line:345:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3a490 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd3a540 <line:345:15, line:346:3>
|   |   |-TextComment 0x5626fbd3a4f0 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x5626fbd3a510 <line:346:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3a560 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5626fbd3a5f0 <col:15, col:46>
|       `-TextComment 0x5626fbd3a5c0 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x5626fbb9f3f0 prev 0x5626fbb9f130 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbb9f260 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbb9f2d8 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x5626fbb9f350 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbb9fb78 <line:148:2, line:158:2>
|   `-IfStmt 0x5626fbb9fb20 <line:149:3, line:157:3> has_else
|     |-BinaryOperator 0x5626fbb9f578 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x5626fbb9f548 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x5626fbb9f4a8 <col:7> 'sys_snode_t *' lvalue ParmVar 0x5626fbb9f2d8 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x5626fbb9f560 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x5626fbb9f528 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5626fbb9f500 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5626fbb9f4c8 <col:23> 'int' 0
|     |-CompoundStmt 0x5626fbb9f670 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x5626fbb9f610 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x5626fbb9f5f8 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5626fbb9f598 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc140c0 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x5626fbb9f640 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5626fbb9f5b8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9f260 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x5626fbb9f658 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5626fbb9f5d8 <col:38> 'sys_snode_t *' lvalue ParmVar 0x5626fbb9f350 'node' 'sys_snode_t *'
|     `-IfStmt 0x5626fbb9faf8 <line:151:10, line:157:3> has_else
|       |-BinaryOperator 0x5626fbb9f7b8 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x5626fbb9f6e0 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x5626fbb9f6c8 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5626fbb9f688 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5626fbc108b0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x5626fbb9f708 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5626fbb9f6a8 <col:42> 'sys_snode_t *' lvalue ParmVar 0x5626fbb9f2d8 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x5626fbb9f7a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x5626fbb9f780 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5626fbb9f758 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5626fbb9f720 <col:23> 'int' 0
|       |-CompoundStmt 0x5626fbb9f8b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x5626fbb9f850 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x5626fbb9f838 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5626fbb9f7d8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc15780 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x5626fbb9f880 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5626fbb9f7f8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9f260 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x5626fbb9f898 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5626fbb9f818 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5626fbb9f350 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x5626fbb9fad8 <line:153:10, line:157:3>
|         |-CallExpr 0x5626fbb9f9b8 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x5626fbb9f9a0 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5626fbb9f8c8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5626fbc10ba0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x5626fbb9f9e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x5626fbb9f8e8 <col:31> 'sys_snode_t *' lvalue ParmVar 0x5626fbb9f350 'node' 'sys_snode_t *'
|         | `-CallExpr 0x5626fbb9f960 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x5626fbb9f948 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x5626fbb9f908 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5626fbc108b0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x5626fbb9f988 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x5626fbb9f928 <col:33> 'sys_snode_t *' lvalue ParmVar 0x5626fbb9f2d8 'prev' 'sys_snode_t *'
|         `-CallExpr 0x5626fbb9fa78 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x5626fbb9fa60 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5626fbb9fa00 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5626fbc10ba0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x5626fbb9faa8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x5626fbb9fa20 <col:31> 'sys_snode_t *' lvalue ParmVar 0x5626fbb9f2d8 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x5626fbb9fac0 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5626fbb9fa40 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5626fbb9f350 'node' 'sys_snode_t *'
|-FunctionDecl 0x5626fbb9fc30 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbb9fba0 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x5626fbd3aa20 <line:355:3, line:362:50>
|   |-ParagraphComment 0x5626fbd3a6f0 <line:355:3>
|   | `-TextComment 0x5626fbd3a6c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3a710 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5626fbd3a780 <col:10, col:59>
|   |   `-TextComment 0x5626fbd3a750 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5626fbd3a7f0 <line:357:3, line:358:62>
|   | |-TextComment 0x5626fbd3a7a0 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x5626fbd3a7c0 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3a840 <line:360:3>
|   | `-TextComment 0x5626fbd3a810 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3a860 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3a8f0 <col:15, col:46>
|   |   `-TextComment 0x5626fbd3a8c0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5626fbd3a940 <line:362:3>
|   | `-TextComment 0x5626fbd3a910 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3a960 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x5626fbd3a9c0 <col:11, col:50>
|       `-TextComment 0x5626fbd3a990 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x5626fbb9fd78 prev 0x5626fbb9fc30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbb9fce8 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x5626fbc1b858 <line:163:2, line:175:2>
|   |-DeclStmt 0x5626fbb9ff30 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x5626fbb9fe30 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x5626fbb9fef0 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x5626fbb9fed8 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626fbb9fe98 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc11490 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x5626fbb9ff18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5626fbb9feb8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9fce8 'list' 'sys_slist_t *'
|   |-CallExpr 0x5626fbba0038 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x5626fbba0020 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbb9ff48 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc10ed0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5626fbba0068 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbb9ff68 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9fce8 'list' 'sys_slist_t *'
|   | `-CallExpr 0x5626fbb9ffe0 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5626fbb9ffc8 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5626fbb9ff88 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5626fbc108b0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x5626fbba0008 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbb9ffa8 <col:33> 'sys_snode_t *' lvalue Var 0x5626fbb9fe30 'node' 'sys_snode_t *'
|   |-IfStmt 0x5626fbc1b7d0 <line:169:3, line:172:3>
|   | |-BinaryOperator 0x5626fbba0150 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x5626fbba00d8 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x5626fbba00c0 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5626fbba0080 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc116b0 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x5626fbba0100 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5626fbba00a0 <col:37> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9fce8 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x5626fbba0138 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5626fbba0118 <col:46> 'sys_snode_t *' lvalue Var 0x5626fbb9fe30 'node' 'sys_snode_t *'
|   | `-CompoundStmt 0x5626fbc1b7b8 <col:52, line:172:3>
|   |   `-CallExpr 0x5626fbc1b770 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   |     |-ImplicitCastExpr 0x5626fbba0248 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626fbba0170 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc11178 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |-ImplicitCastExpr 0x5626fbc1b7a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5626fbba0190 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9fce8 'list' 'sys_slist_t *'
|   |     `-CallExpr 0x5626fbba0208 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   |       |-ImplicitCastExpr 0x5626fbba01f0 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5626fbba01b0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc11490 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |       `-ImplicitCastExpr 0x5626fbba0230 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5626fbba01d0 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5626fbb9fce8 'list' 'sys_slist_t *'
|   `-ReturnStmt 0x5626fbc1b820 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x5626fbc1b808 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbc1b7e8 <col:10> 'sys_snode_t *' lvalue Var 0x5626fbb9fe30 'node' 'sys_snode_t *'
|-FunctionDecl 0x5626fbc1b928 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbc1b898 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x5626fbd3adc0 <line:369:3, line:375:69>
|   |-ParagraphComment 0x5626fbd3aac0 <line:369:3>
|   | `-TextComment 0x5626fbd3aa90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3aae0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5626fbd3ab40 <col:10, col:59>
|   |   `-TextComment 0x5626fbd3ab10 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5626fbd3ab90 <line:371:3, col:62>
|   | `-TextComment 0x5626fbd3ab60 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3abe0 <line:373:3>
|   | `-TextComment 0x5626fbd3abb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3ac00 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3ac90 <col:15, col:46>
|   |   `-TextComment 0x5626fbd3ac60 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5626fbd3ace0 <line:375:3>
|   | `-TextComment 0x5626fbd3acb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3ad00 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5626fbd3ad60 <col:11, col:69>
|       `-TextComment 0x5626fbd3ad30 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x5626fbc1ba70 prev 0x5626fbc1b928 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5626fbc1b9e0 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x5626fbc1bdc8 <line:180:2, line:183:2>
|   `-ReturnStmt 0x5626fbc1bd90 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x5626fbc1bd60 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x5626fbc1bd30 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x5626fbc1bbd8 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x5626fbc1bbc0 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5626fbc1bb18 <col:1> 'bool (sys_slist_t *)' Function 0x5626fbc11a98 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x5626fbc1bc00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5626fbc1bb38 <col:39> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1b9e0 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x5626fbc1bd48 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x5626fbc1bc78 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x5626fbc1bc50 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x5626fbc1bc18 <col:23> 'int' 0
|       `-CallExpr 0x5626fbc1bcf0 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x5626fbc1bcd8 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5626fbc1bc98 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbb9fd78 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x5626fbc1bd18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5626fbc1bcb8 <col:38> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1b9e0 'list' 'sys_slist_t *'
|-FunctionDecl 0x5626fbc1bf80 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc1bdf0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc1be68 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x5626fbc1bee0 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5626fbd3b260 <line:382:3, line:389:46>
|   |-ParagraphComment 0x5626fbd3ae60 <line:382:3>
|   | `-TextComment 0x5626fbd3ae30 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3ae80 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5626fbd3aee0 <col:10, col:23>
|   |   `-TextComment 0x5626fbd3aeb0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x5626fbd3af30 <line:384:3, col:62>
|   | `-TextComment 0x5626fbd3af00 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3af80 <line:386:3>
|   | `-TextComment 0x5626fbd3af50 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3afa0 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3b050 <line:386:15, line:387:3>
|   |   |-TextComment 0x5626fbd3b000 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd3b020 <line:387:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3b070 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd3b150 <line:387:20, line:389:3>
|   |   |-TextComment 0x5626fbd3b0d0 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x5626fbd3b0f0 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x5626fbd3b110 <line:389:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3b170 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5626fbd3b200 <col:15, col:46>
|       `-TextComment 0x5626fbd3b1d0 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x5626fbc1c1d8 prev 0x5626fbc1bf80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc1c048 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc1c0c0 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x5626fbc1c138 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc1cc18 <line:190:2, line:212:2>
|   |-IfStmt 0x5626fbc1ca90 <line:191:3, line:209:3> has_else
|   | |-BinaryOperator 0x5626fbc1c360 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x5626fbc1c330 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5626fbc1c290 <col:7> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1c0c0 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x5626fbc1c348 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x5626fbc1c310 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5626fbc1c2e8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5626fbc1c2b0 <col:23> 'int' 0
|   | |-CompoundStmt 0x5626fbc1c710 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x5626fbc1c470 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x5626fbc1c458 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5626fbc1c380 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc10ed0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x5626fbc1c4a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5626fbc1c3a0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1c048 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x5626fbc1c418 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x5626fbc1c400 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5626fbc1c3c0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5626fbc108b0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x5626fbc1c440 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5626fbc1c3e0 <col:33> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1c138 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x5626fbc1c6f8 <line:196:4, line:199:4>
|   | |   |-BinaryOperator 0x5626fbc1c588 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x5626fbc1c510 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x5626fbc1c4f8 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x5626fbc1c4b8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc116b0 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x5626fbc1c538 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x5626fbc1c4d8 <col:38> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1c048 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x5626fbc1c570 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x5626fbc1c550 <col:47> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1c138 'node' 'sys_snode_t *'
|   | |   `-CompoundStmt 0x5626fbc1c6e0 <col:53, line:199:4>
|   | |     `-CallExpr 0x5626fbc1c698 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |       |-ImplicitCastExpr 0x5626fbc1c680 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5626fbc1c5a8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc11178 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |       |-ImplicitCastExpr 0x5626fbc1c6c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5626fbc1c5c8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1c048 'list' 'sys_slist_t *'
|   | |       `-CallExpr 0x5626fbc1c640 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |         |-ImplicitCastExpr 0x5626fbc1c628 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x5626fbc1c5e8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc11490 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |         `-ImplicitCastExpr 0x5626fbc1c668 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x5626fbc1c608 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1c048 'list' 'sys_slist_t *'
|   | `-CompoundStmt 0x5626fbc1ca70 <line:200:10, line:209:3>
|   |   |-CallExpr 0x5626fbc1c830 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x5626fbc1c818 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5626fbc1c730 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5626fbc10ba0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x5626fbc1c860 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x5626fbc1c750 <col:31> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1c0c0 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x5626fbc1c7d8 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x5626fbc1c7c0 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x5626fbc1c780 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5626fbc108b0 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x5626fbc1c800 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5626fbc1c7a0 <col:33> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1c138 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x5626fbc1ca58 <line:205:4, line:208:4>
|   |     |-BinaryOperator 0x5626fbc1c948 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x5626fbc1c8d0 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x5626fbc1c8b8 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x5626fbc1c878 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc116b0 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x5626fbc1c8f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5626fbc1c898 <col:38> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1c048 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x5626fbc1c930 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5626fbc1c910 <col:47> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1c138 'node' 'sys_snode_t *'
|   |     `-CompoundStmt 0x5626fbc1ca40 <col:53, line:208:4>
|   |       `-CallExpr 0x5626fbc1c9e0 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |         |-ImplicitCastExpr 0x5626fbc1c9c8 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5626fbc1c968 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5626fbc11178 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |         |-ImplicitCastExpr 0x5626fbc1ca10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5626fbc1c988 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1c048 'list' 'sys_slist_t *'
|   |         `-ImplicitCastExpr 0x5626fbc1ca28 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5626fbc1c9a8 <col:13> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1c0c0 'prev_node' 'sys_snode_t *'
|   `-CallExpr 0x5626fbc1cb90 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x5626fbc1cb78 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbc1cab8 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5626fbc10ba0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x5626fbc1cbc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbc1cad8 <col:30> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1c138 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x5626fbc1cbd8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x5626fbc1cb58 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x5626fbc1cb30 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x5626fbc1caf8 <col:23> 'int' 0
|-FunctionDecl 0x5626fbc1cde0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc1cc48 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc1ccc0 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x5626fbd3b6d0 <line:398:3, line:405:35>
|   |-ParagraphComment 0x5626fbd3b300 <line:398:3>
|   | `-TextComment 0x5626fbd3b2d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3b320 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd3b380 <col:10, col:44>
|   |   `-TextComment 0x5626fbd3b350 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x5626fbd3b3d0 <line:400:3, col:62>
|   | `-TextComment 0x5626fbd3b3a0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3b420 <line:402:3>
|   | `-TextComment 0x5626fbd3b3f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3b440 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3b4f0 <line:402:15, line:403:3>
|   |   |-TextComment 0x5626fbd3b4a0 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd3b4c0 <line:403:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3b510 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd3b5a0 <col:15, col:60>
|   |   `-TextComment 0x5626fbd3b570 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x5626fbd3b5f0 <line:405:3>
|   | `-TextComment 0x5626fbd3b5c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3b610 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd3b670 <col:11, col:35>
|       `-TextComment 0x5626fbd3b640 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x5626fbc1cfb0 prev 0x5626fbc1cde0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5626fbc1cea0 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5626fbc1cf18 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x5626fbc1fa38 <line:218:2, line:233:2>
|   |-DeclStmt 0x5626fbc1d170 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x5626fbc1d070 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x5626fbc1d158 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x5626fbc1d138 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x5626fbc1d110 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x5626fbc1d0d8 <col:23> 'int' 0
|   |-DeclStmt 0x5626fbc1d200 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x5626fbc1d198 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x5626fbc1f988 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x5626fbc1d2d0 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x5626fbc1d218 <line:222:42> 'sys_snode_t *' lvalue Var 0x5626fbc1d198 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x5626fbc1d290 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x5626fbc1d278 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5626fbc1d238 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5626fbc11490 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x5626fbc1d2b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5626fbc1d258 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1cea0 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5626fbc1d3c0 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x5626fbc1d390 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5626fbc1d2f0 <col:42> 'sys_snode_t *' lvalue Var 0x5626fbc1d198 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x5626fbc1d3a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x5626fbc1d370 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5626fbc1d348 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5626fbc1d310 <col:23> 'int' 0
|   | |-BinaryOperator 0x5626fbc1d498 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x5626fbc1d3e0 <line:222:42> 'sys_snode_t *' lvalue Var 0x5626fbc1d198 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x5626fbc1d458 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x5626fbc1d440 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5626fbc1d400 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5626fbc13a80 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x5626fbc1d480 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5626fbc1d420 <col:42> 'sys_snode_t *' lvalue Var 0x5626fbc1d198 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x5626fbc1f968 <col:48, line:230:3>
|   |   |-IfStmt 0x5626fbc1d730 <line:223:4, line:227:4>
|   |   | |-BinaryOperator 0x5626fbc1d528 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x5626fbc1d4f8 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x5626fbc1d4b8 <col:8> 'sys_snode_t *' lvalue Var 0x5626fbc1d198 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x5626fbc1d510 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5626fbc1d4d8 <col:16> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1cf18 'node' 'sys_snode_t *'
|   |   | `-CompoundStmt 0x5626fbc1d710 <col:22, line:227:4>
|   |   |   |-CallExpr 0x5626fbc1d648 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   |   | |-ImplicitCastExpr 0x5626fbc1d630 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x5626fbc1d548 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x5626fbc1c1d8 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   |   | |-ImplicitCastExpr 0x5626fbc1d680 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5626fbc1d568 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5626fbc1cea0 'list' 'sys_slist_t *'
|   |   |   | |-ImplicitCastExpr 0x5626fbc1d698 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5626fbc1d588 <col:38> 'sys_snode_t *' lvalue Var 0x5626fbc1d070 'prev' 'sys_snode_t *'
|   |   |   | `-ImplicitCastExpr 0x5626fbc1d6b0 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5626fbc1d5a8 <col:11> 'sys_snode_t *' lvalue ParmVar 0x5626fbc1cf18 'node' 'sys_snode_t *'
|   |   |   `-ReturnStmt 0x5626fbc1d700 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   |     `-ImplicitCastExpr 0x5626fbc1d6e8 <col:16> 'bool' <IntegralToBoolean>
|   |   |       `-IntegerLiteral 0x5626fbc1d6c8 <col:16> 'int' 1
|   |   `-BinaryOperator 0x5626fbc1f948 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x5626fbc1d748 <col:4> 'sys_snode_t *' lvalue Var 0x5626fbc1d070 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x5626fbc1f930 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5626fbc1f910 <col:11> 'sys_snode_t *' lvalue Var 0x5626fbc1d198 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x5626fbc1f9f8 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x5626fbc1f9e0 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x5626fbc1f9c0 <col:16> 'int' 0
|-TypedefDecl 0x5626fbc1faa8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x5626fbc1fa70 'u64_t' sugar
|   |-Typedef 0x5626fbb8c650 'u64_t'
|   `-BuiltinType 0x5626fbafd660 'unsigned long long'
|-RecordDecl 0x5626fbc1fb00 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x5626fbc1fbe8 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x5626fbc1fc98 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x5626fbc1fc40 'struct _sfnode' sugar
|   `-RecordType 0x5626fbc1fb80 'struct _sfnode'
|     `-Record 0x5626fbc1fb00 '_sfnode'
|-RecordDecl 0x5626fbc1fcf0 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x5626fbc1fe40 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x5626fbc1fea0 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x5626fbc1ff48 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x5626fbc1fef0 'struct _sflist' sugar
|   `-RecordType 0x5626fbc1fd70 'struct _sflist'
|     `-Record 0x5626fbc1fcf0 '_sflist'
|-FunctionDecl 0x5626fbc20270 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc20160 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x5626fbc20558 <line:197:1, line:200:1>
| | |-BinaryOperator 0x5626fbc20418 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x5626fbc20350 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x5626fbc1fe40
| | | | `-ImplicitCastExpr 0x5626fbc20338 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5626fbc20318 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc20160 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x5626fbc20400 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x5626fbc203e0 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x5626fbc203b8 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5626fbc20380 <col:23> 'int' 0
| | `-BinaryOperator 0x5626fbc20538 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x5626fbc20470 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x5626fbc1fea0
| |   | `-ImplicitCastExpr 0x5626fbc20458 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5626fbc20438 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc20160 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x5626fbc20520 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x5626fbc20500 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x5626fbc204d8 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x5626fbc204a0 <col:23> 'int' 0
| `-FullComment 0x5626fbd3b930 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x5626fbd3b770 <line:192:3>
|   | `-TextComment 0x5626fbd3b740 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3b790 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5626fbd3b7f0 <col:10, col:27>
|   |   `-TextComment 0x5626fbd3b7c0 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x5626fbd3b840 <line:194:3>
|   | `-TextComment 0x5626fbd3b810 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3b860 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x5626fbd3b8f0 <col:15, col:50>
|       `-TextComment 0x5626fbd3b8c0 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x5626fbc20690 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc20588 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc208b0 <line:206:1, line:208:1>
|   `-ReturnStmt 0x5626fbc208a0 <line:207:2, col:71>
|     `-CStyleCastExpr 0x5626fbc20878 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x5626fbc20858 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x5626fbc20808 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x5626fbc207d8 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x5626fbc20770 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5626fbc1fbe8
|           |   `-ImplicitCastExpr 0x5626fbc20758 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x5626fbc20738 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc20588 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x5626fbc207f0 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x5626fbc207c0 <line:207:49, line:203:31> 'unsigned long' prefix '~' cannot overflow
|               `-IntegerLiteral 0x5626fbc207a0 <col:31> 'unsigned long' 3
|-FunctionDecl 0x5626fbc26070 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x5626fbc25f60 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x5626fbc262c0 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc26128 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x5626fbc261a0 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc26668 <line:214:1, line:218:1>
|   |-DeclStmt 0x5626fbc264e8 <line:215:2, col:47>
|   | `-VarDecl 0x5626fbc26380 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x5626fbc264a8 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x5626fbc26490 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626fbc263e8 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x5626fbc26070 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x5626fbc264d0 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5626fbc26408 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc26128 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x5626fbc26648 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x5626fbc26538 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5626fbc1fbe8
|     | `-ImplicitCastExpr 0x5626fbc26520 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626fbc26500 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc26128 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x5626fbc26628 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x5626fbc26610 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x5626fbc265f8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x5626fbc26568 <col:27> 'u8_t':'unsigned char' lvalue Var 0x5626fbc26380 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x5626fbc265d0 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x5626fbc265b8 <col:50> 'sys_sfnode_t *' <LValueToRValue> part_of_explicit_cast
|           `-DeclRefExpr 0x5626fbc26588 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc261a0 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x5626fbc26830 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc26698 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc26710 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc269a0 <line:221:1, line:223:1>
|   `-BinaryOperator 0x5626fbc26980 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x5626fbc26918 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x5626fbc1fe40
|     | `-ImplicitCastExpr 0x5626fbc26900 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626fbc268e0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc26698 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x5626fbc26968 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbc26948 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc26710 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5626fbc26ad8 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc269c8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc26a40 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc26c78 <line:226:1, line:228:1>
|   `-BinaryOperator 0x5626fbc26c28 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x5626fbc26bc0 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x5626fbc1fea0
|     | `-ImplicitCastExpr 0x5626fbc26ba8 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626fbc26b88 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc269c8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x5626fbc26c10 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbc26bf0 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc26a40 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5626fbc26db0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc26ca0 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x5626fbc26f18 <line:238:1, line:240:1>
| | `-ReturnStmt 0x5626fbc26ed8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x5626fbc26ec0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5626fbc26e90 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x5626fbc1fe40
| |       `-ImplicitCastExpr 0x5626fbc26e78 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbc26e58 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc26ca0 'list' 'sys_sflist_t *'
| `-FullComment 0x5626fbd3bc70 <line:231:3, line:235:68>
|   |-ParagraphComment 0x5626fbd3b9d0 <line:231:3>
|   | `-TextComment 0x5626fbd3b9a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3b9f0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd3ba50 <col:10, col:43>
|   |   `-TextComment 0x5626fbd3ba20 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x5626fbd3baa0 <line:233:3>
|   | `-TextComment 0x5626fbd3ba70 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3bac0 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3bb50 <col:15, col:62>
|   |   `-TextComment 0x5626fbd3bb20 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x5626fbd3bba0 <line:235:3>
|   | `-TextComment 0x5626fbd3bb70 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3bbc0 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x5626fbd3bc20 <col:11, col:68>
|       `-TextComment 0x5626fbd3bbf0 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x5626fbc27000 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc26f70 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x5626fbc27168 <line:250:1, line:252:1>
| | `-ReturnStmt 0x5626fbc27128 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x5626fbc27110 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5626fbc270e0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x5626fbc1fea0
| |       `-ImplicitCastExpr 0x5626fbc270c8 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbc270a8 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc26f70 'list' 'sys_sflist_t *'
| `-FullComment 0x5626fbd3bfb0 <line:243:3, line:247:67>
|   |-ParagraphComment 0x5626fbd3bd10 <line:243:3>
|   | `-TextComment 0x5626fbd3bce0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3bd30 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd3bd90 <col:10, col:42>
|   |   `-TextComment 0x5626fbd3bd60 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x5626fbd3bde0 <line:245:3>
|   | `-TextComment 0x5626fbd3bdb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3be00 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3be90 <col:15, col:61>
|   |   `-TextComment 0x5626fbd3be60 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x5626fbd3bee0 <line:247:3>
|   | `-TextComment 0x5626fbd3beb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3bf00 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5626fbd3bf60 <col:11, col:67>
|       `-TextComment 0x5626fbd3bf30 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x5626fbc27220 prev 0x5626fbc26070 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc27190 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x5626fbc273f8 <line:265:1, line:267:1>
| | `-ReturnStmt 0x5626fbc273b8 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x5626fbc273a0 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x5626fbc27380 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x5626fbc27350 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x5626fbc27300 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5626fbc1fbe8
| |       |   `-ImplicitCastExpr 0x5626fbc272e8 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5626fbc272c8 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc27190 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x5626fbc27368 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x5626fbc27330 <col:31> 'unsigned long' 3
| `-FullComment 0x5626fbd3c2c0 <line:259:3, line:262:60>
|   |-ParagraphComment 0x5626fbd3c050 <line:259:3>
|   | `-TextComment 0x5626fbd3c020 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3c070 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5626fbd3c0d0 <col:10, col:51>
|   |   `-TextComment 0x5626fbd3c0a0 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x5626fbd3c120 <line:261:3>
|   | `-TextComment 0x5626fbd3c0f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3c140 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3c1f0 <line:261:15, line:262:3>
|   |   |-TextComment 0x5626fbd3c1a0 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x5626fbd3c1c0 <line:262:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3c210 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x5626fbd3c270 <col:11, col:60>
|       `-TextComment 0x5626fbd3c240 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x5626fbc275b0 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x5626fbc27420 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5626fbc27498 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x5626fbc27778 <line:283:1, line:286:1>
| | |-CompoundStmt 0x5626fbc27660 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5626fbc27670 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x5626fbc27730 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x5626fbc276b0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5626fbc1fbe8
| |   | `-ImplicitCastExpr 0x5626fbc27698 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5626fbc27678 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc27420 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x5626fbc27718 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x5626fbc27700 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x5626fbc276e0 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x5626fbc27498 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x5626fbd3c720 <line:270:3, line:280:62>
|   |-ParagraphComment 0x5626fbd3c360 <line:270:3>
|   | `-TextComment 0x5626fbd3c330 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3c380 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5626fbd3c3e0 <col:10, col:35>
|   |   `-TextComment 0x5626fbd3c3b0 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x5626fbd3c480 <line:272:3, line:274:64>
|   | |-TextComment 0x5626fbd3c400 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x5626fbd3c420 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x5626fbd3c440 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x5626fbd3c4f0 <line:276:3, line:277:61>
|   | |-TextComment 0x5626fbd3c4a0 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x5626fbd3c4c0 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x5626fbd3c540 <line:279:3>
|   | `-TextComment 0x5626fbd3c510 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3c560 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3c610 <line:279:15, line:280:3>
|   |   |-TextComment 0x5626fbd3c5c0 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x5626fbd3c5e0 <line:280:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3c630 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x5626fbd3c6c0 <col:16, col:62>
|       `-TextComment 0x5626fbd3c690 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x5626fbc278c0 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x5626fbc277b0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5626fbc27828 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x5626fbc27c18 <line:299:1, line:302:1>
| | |-CompoundStmt 0x5626fbc27970 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5626fbc27980 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x5626fbc27bd0 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x5626fbc279c0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5626fbc1fbe8
| |   | `-ImplicitCastExpr 0x5626fbc279a8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5626fbc27988 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc277b0 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x5626fbc27bb0 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x5626fbc27b38 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x5626fbc27b18 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x5626fbc27aa8 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x5626fbc27a90 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x5626fbc279f0 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc20690 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x5626fbc27ad0 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5626fbc27a10 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc277b0 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x5626fbc27b98 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x5626fbc27b80 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbc27b60 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x5626fbc27828 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x5626fbd3db20 <line:289:3, line:296:62>
|   |-ParagraphComment 0x5626fbd3d7e0 <line:289:3>
|   | `-TextComment 0x5626fbd3d7b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3d800 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd3d860 <col:10, col:44>
|   |   `-TextComment 0x5626fbd3d830 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x5626fbd3d900 <line:291:3, line:293:64>
|   | |-TextComment 0x5626fbd3d880 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x5626fbd3d8a0 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x5626fbd3d8c0 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x5626fbd3d950 <line:295:3>
|   | `-TextComment 0x5626fbd3d920 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3d970 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3da20 <line:295:15, line:296:3>
|   |   |-TextComment 0x5626fbd3d9d0 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x5626fbd3d9f0 <line:296:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3da40 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x5626fbd3dad0 <col:16, col:62>
|       `-TextComment 0x5626fbd3daa0 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x5626fbc27d60 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc27c50 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x5626fbd3de60 <line:309:3, line:313:57>
|   |-ParagraphComment 0x5626fbd3dbc0 <line:309:3>
|   | `-TextComment 0x5626fbd3db90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3dbe0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd3dc40 <col:10, col:41>
|   |   `-TextComment 0x5626fbd3dc10 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x5626fbd3dc90 <line:311:3>
|   | `-TextComment 0x5626fbd3dc60 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3dcb0 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3dd40 <col:15, col:44>
|   |   `-TextComment 0x5626fbd3dd10 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x5626fbd3dd90 <line:313:3>
|   | `-TextComment 0x5626fbd3dd60 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3ddb0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5626fbd3de10 <col:11, col:57>
|       `-TextComment 0x5626fbd3dde0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x5626fbc27ea8 prev 0x5626fbc27d60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc27e18 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x5626fbc28188 <line:60:2, line:62:2>
|   `-ReturnStmt 0x5626fbc28148 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x5626fbc28130 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5626fbc28110 <col:10, col:54> 'int'
|         `-BinaryOperator 0x5626fbc280f0 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x5626fbc28018 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x5626fbc28000 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x5626fbc27f50 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x5626fbc28040 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x5626fbc27f80 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc27e18 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x5626fbc280d8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x5626fbc280b8 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x5626fbc28090 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x5626fbc28058 <col:23> 'int' 0
|-FunctionDecl 0x5626fbc28240 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc281b0 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x5626fbd3e200 <line:320:3, line:326:55>
|   |-ParagraphComment 0x5626fbd3df00 <line:320:3>
|   | `-TextComment 0x5626fbd3ded0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3df20 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5626fbd3df80 <col:10, col:64>
|   |   `-TextComment 0x5626fbd3df50 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x5626fbd3dfd0 <line:322:3, col:70>
|   | `-TextComment 0x5626fbd3dfa0 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5626fbd3e020 <line:324:3>
|   | `-TextComment 0x5626fbd3dff0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3e040 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3e0d0 <col:15, col:64>
|   |   `-TextComment 0x5626fbd3e0a0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5626fbd3e120 <line:326:3>
|   | `-TextComment 0x5626fbd3e0f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3e140 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5626fbd3e1a0 <col:11, col:55>
|       `-TextComment 0x5626fbd3e170 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5626fbc28388 prev 0x5626fbc28240 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc282f8 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc28508 <line:67:2, line:69:2>
|   `-ReturnStmt 0x5626fbc284c8 <line:68:3, col:42>
|     `-CallExpr 0x5626fbc28488 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x5626fbc28470 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbc28430 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc20690 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x5626fbc284b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbc28450 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc282f8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5626fbc285c0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc28530 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x5626fbd3e540 <line:333:3, line:337:55>
|   |-ParagraphComment 0x5626fbd3e2a0 <line:333:3>
|   | `-TextComment 0x5626fbd3e270 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3e2c0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5626fbd3e320 <col:10, col:46>
|   |   `-TextComment 0x5626fbd3e2f0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x5626fbd3e370 <line:335:3>
|   | `-TextComment 0x5626fbd3e340 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3e390 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3e420 <col:15, col:64>
|   |   `-TextComment 0x5626fbd3e3f0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5626fbd3e470 <line:337:3>
|   | `-TextComment 0x5626fbd3e440 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3e490 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5626fbd3e4f0 <col:11, col:55>
|       `-TextComment 0x5626fbd3e4c0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5626fbc28708 prev 0x5626fbc285c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc28678 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc28a38 <line:74:2, line:78:2>
|   `-ReturnStmt 0x5626fbc28a00 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x5626fbc289d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x5626fbc28880 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x5626fbc28850 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x5626fbc287b0 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc28678 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x5626fbc28868 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x5626fbc28830 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5626fbc28808 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5626fbc287d0 <col:23> 'int' 0
|       |-CallExpr 0x5626fbc288f8 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5626fbc288e0 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5626fbc288a0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc28388 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x5626fbc28920 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5626fbc288c0 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc28678 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x5626fbc289b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x5626fbc28998 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x5626fbc28970 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x5626fbc28938 <col:23> 'int' 0
|-FunctionDecl 0x5626fbc28b70 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc28a60 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc28ad8 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x5626fbd3e8d0 <line:344:3, line:349:47>
|   |-ParagraphComment 0x5626fbd3e5e0 <line:344:3>
|   | `-TextComment 0x5626fbd3e5b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3e600 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd3e660 <col:10, col:42>
|   |   `-TextComment 0x5626fbd3e630 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x5626fbd3e6b0 <line:346:3, col:63>
|   | `-TextComment 0x5626fbd3e680 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3e700 <line:348:3>
|   | `-TextComment 0x5626fbd3e6d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3e720 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3e7d0 <line:348:15, line:349:3>
|   |   |-TextComment 0x5626fbd3e780 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd3e7a0 <line:349:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3e7f0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5626fbd3e880 <col:15, col:47>
|       `-TextComment 0x5626fbd3e850 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x5626fbc28d40 prev 0x5626fbc28b70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc28c30 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc28ca8 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc293c8 <line:84:2, line:93:2>
|   |-CallExpr 0x5626fbc28f48 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x5626fbc28f30 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbc28df0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5626fbc262c0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5626fbc28f90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbc28e10 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc28ca8 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x5626fbc28e88 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5626fbc28e70 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5626fbc28e30 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x5626fbc28eb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbc28e50 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc28c30 'list' 'sys_sflist_t *'
|   |-CallExpr 0x5626fbc29088 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x5626fbc29070 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbc28fa8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26830 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5626fbc290b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbc28fc8 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc28c30 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x5626fbc290d0 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5626fbc28fe8 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc28ca8 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x5626fbc29388 <line:89:3, line:92:3>
|     |-BinaryOperator 0x5626fbc29218 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5626fbc29140 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x5626fbc29128 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5626fbc290e8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x5626fbc29168 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5626fbc29108 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc28c30 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x5626fbc29200 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x5626fbc291e0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5626fbc291b8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5626fbc29180 <col:23> 'int' 0
|     `-CompoundStmt 0x5626fbc29370 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|       `-CallExpr 0x5626fbc29328 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|         |-ImplicitCastExpr 0x5626fbc29310 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5626fbc29238 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26ad8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x5626fbc29358 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5626fbc29258 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc28c30 'list' 'sys_sflist_t *'
|         `-CallExpr 0x5626fbc292d0 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|           |-ImplicitCastExpr 0x5626fbc292b8 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5626fbc29278 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           `-ImplicitCastExpr 0x5626fbc292f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5626fbc29298 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc28c30 'list' 'sys_sflist_t *'
|-FunctionDecl 0x5626fbc29510 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc29400 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc29478 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x5626fbd3ec60 <line:357:3, line:362:46>
|   |-ParagraphComment 0x5626fbd3e970 <line:357:3>
|   | `-TextComment 0x5626fbd3e940 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3e990 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd3e9f0 <col:10, col:41>
|   |   `-TextComment 0x5626fbd3e9c0 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x5626fbd3ea40 <line:359:3, col:63>
|   | `-TextComment 0x5626fbd3ea10 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3ea90 <line:361:3>
|   | `-TextComment 0x5626fbd3ea60 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3eab0 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3eb60 <line:361:15, line:362:3>
|   |   |-TextComment 0x5626fbd3eb10 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd3eb30 <line:362:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3eb80 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5626fbd3ec10 <col:15, col:46>
|       `-TextComment 0x5626fbd3ebe0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x5626fbc296e0 prev 0x5626fbc29510 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc295d0 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc29648 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc29e68 <line:99:2, line:111:2>
|   |-CallExpr 0x5626fbc29868 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x5626fbc29850 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbc29790 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5626fbc262c0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5626fbc29898 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbc297b0 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc29648 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x5626fbc298b0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x5626fbc29830 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x5626fbc29808 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x5626fbc297d0 <col:23> 'int' 0
|   `-IfStmt 0x5626fbc29e18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3> has_else
|     |-BinaryOperator 0x5626fbc299f8 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5626fbc29920 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x5626fbc29908 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5626fbc298c8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x5626fbc29948 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5626fbc298e8 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc295d0 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x5626fbc299e0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x5626fbc299c0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5626fbc29998 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5626fbc29960 <col:23> 'int' 0
|     |-CompoundStmt 0x5626fbc29bc8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x5626fbc29a90 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x5626fbc29a78 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5626fbc29a18 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26ad8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x5626fbc29ac0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5626fbc29a38 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc295d0 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x5626fbc29ad8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5626fbc29a58 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc29648 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x5626fbc29b68 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x5626fbc29b50 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5626fbc29af0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26830 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x5626fbc29b98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5626fbc29b10 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc295d0 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x5626fbc29bb0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5626fbc29b30 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc29648 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x5626fbc29df8 <line:105:10, line:110:3>
|       |-CallExpr 0x5626fbc29cd8 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x5626fbc29cc0 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5626fbc29be8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5626fbc262c0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x5626fbc29c60 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x5626fbc29c48 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5626fbc29c08 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x5626fbc29c88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5626fbc29c28 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc295d0 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x5626fbc29d08 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5626fbc29ca0 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc29648 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x5626fbc29d98 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x5626fbc29d80 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5626fbc29d20 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26ad8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x5626fbc29dc8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5626fbc29d40 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc295d0 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x5626fbc29de0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5626fbc29d60 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc29648 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5626fbc2a0f0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5626fbc29e98 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc29f18 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x5626fbc29fb8 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x5626fbd3f1c0 <line:370:3, line:380:66>
|   |-ParagraphComment 0x5626fbd3ed00 <line:370:3>
|   | `-TextComment 0x5626fbd3ecd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3ed20 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd3ed80 <col:10, col:41>
|   |   `-TextComment 0x5626fbd3ed50 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x5626fbd3ee70 <line:372:3, line:374:63>
|   | |-TextComment 0x5626fbd3eda0 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x5626fbd3edc0 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x5626fbd3ee10 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x5626fbd3ee30 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3eec0 <line:376:3, col:48>
|   | `-TextComment 0x5626fbd3ee90 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x5626fbd3ef10 <line:378:3>
|   | `-TextComment 0x5626fbd3eee0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3ef30 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3efe0 <line:378:15, line:379:3>
|   |   |-TextComment 0x5626fbd3ef90 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd3efb0 <line:379:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3f000 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd3f0b0 <line:379:15, line:380:3>
|   |   |-TextComment 0x5626fbd3f060 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x5626fbd3f080 <line:380:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3f0d0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x5626fbd3f160 <col:15, col:66>
|       `-TextComment 0x5626fbd3f130 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x5626fbc2a358 prev 0x5626fbc2a0f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5626fbc2a1b8 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc2a238 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x5626fbc2a2b8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x5626fbc2a978 <col:31, line:127:42>
|   |-IfStmt 0x5626fbc2a810 <line:118:2, line:125:2> has_else
|   | |-BinaryOperator 0x5626fbc2a540 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x5626fbc2a468 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x5626fbc2a450 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5626fbc2a410 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x5626fbc2a490 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5626fbc2a430 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc2a1b8 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x5626fbc2a528 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x5626fbc2a508 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5626fbc2a4e0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5626fbc2a4a8 <col:23> 'int' 0
|   | |-CompoundStmt 0x5626fbc2a670 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x5626fbc2a628 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x5626fbc2a610 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5626fbc2a560 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26830 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x5626fbc2a658 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5626fbc2a580 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc2a1b8 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x5626fbc2a5e8 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x5626fbc2a5d0 <col:31> 'void *' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x5626fbc2a5a0 <col:31> 'void *' lvalue ParmVar 0x5626fbc2a238 'head' 'void *'
|   | `-CompoundStmt 0x5626fbc2a7f8 <line:121:9, line:125:2>
|   |   `-CallExpr 0x5626fbc2a7c8 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x5626fbc2a7b0 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626fbc2a688 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5626fbc262c0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x5626fbc2a700 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x5626fbc2a6e8 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5626fbc2a6a8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x5626fbc2a728 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5626fbc2a6c8 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc2a1b8 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x5626fbc2a788 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x5626fbc2a770 <col:29> 'void *' <LValueToRValue> part_of_explicit_cast
|   |         `-DeclRefExpr 0x5626fbc2a740 <col:29> 'void *' lvalue ParmVar 0x5626fbc2a238 'head' 'void *'
|   `-CallExpr 0x5626fbc2a900 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x5626fbc2a8e8 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbc2a838 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26ad8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x5626fbc2a930 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbc2a858 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc2a1b8 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x5626fbc2a8c0 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x5626fbc2a8a8 <col:35> 'void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5626fbc2a878 <col:35> 'void *' lvalue ParmVar 0x5626fbc2a2b8 'tail' 'void *'
|-FunctionDecl 0x5626fbc2ab40 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc2a9a8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc2aa20 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x5626fbd3f570 <line:388:3, line:394:57>
|   |-ParagraphComment 0x5626fbd3f260 <line:388:3>
|   | `-TextComment 0x5626fbd3f230 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3f280 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x5626fbd3f2e0 <col:10, col:66>
|   |   `-TextComment 0x5626fbd3f2b0 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x5626fbd3f350 <line:390:3, line:391:63>
|   | |-TextComment 0x5626fbd3f300 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x5626fbd3f320 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3f3a0 <line:393:3>
|   | `-TextComment 0x5626fbd3f370 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3f3c0 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3f470 <line:393:15, line:394:3>
|   |   |-TextComment 0x5626fbd3f420 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd3f440 <line:394:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3f490 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x5626fbd3f520 <col:25, col:57>
|       `-TextComment 0x5626fbd3f4f0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x5626fbc2ad10 prev 0x5626fbc2ab40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc2ac00 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc2ac78 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x5626fbc17b88 <line:135:2, line:141:2>
|   |-DeclStmt 0x5626fbc2aec8 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x5626fbc2add0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x5626fbc2ae48 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x5626fbc177b0 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x5626fbc2aee0 <col:3> 'sys_sfnode_t *' lvalue Var 0x5626fbc2add0 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x5626fbc2af58 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5626fbc2af40 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5626fbc2af00 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x5626fbc2af80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbc2af20 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc2ac78 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x5626fbc17888 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x5626fbc177d0 <col:3> 'sys_sfnode_t *' lvalue Var 0x5626fbc2ae48 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x5626fbc17848 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5626fbc17830 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5626fbc177f0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x5626fbc17870 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbc17810 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc2ac78 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x5626fbc179a8 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x5626fbc17990 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbc178a8 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x5626fbc2a358 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x5626fbc179e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbc178c8 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc2ac00 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x5626fbc17a10 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x5626fbc179f8 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5626fbc178e8 <col:41> 'sys_sfnode_t *' lvalue Var 0x5626fbc2add0 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x5626fbc17a40 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x5626fbc17a28 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbc17908 <col:47> 'sys_sfnode_t *' lvalue Var 0x5626fbc2ae48 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x5626fbc17b18 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x5626fbc17b00 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbc17a58 <col:1> 'void (sys_sflist_t *)' Function 0x5626fbc20270 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x5626fbc17b40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbc17a78 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc2ac78 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x5626fbc17e00 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc17bd0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc17c48 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x5626fbc17cc0 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x5626fbd3fa10 <line:402:3, line:408:46>
|   |-ParagraphComment 0x5626fbd3f610 <line:402:3>
|   | `-TextComment 0x5626fbd3f5e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3f630 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd3f690 <col:10, col:41>
|   |   `-TextComment 0x5626fbd3f660 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x5626fbd3f6e0 <line:404:3, col:63>
|   | `-TextComment 0x5626fbd3f6b0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3f730 <line:406:3>
|   | `-TextComment 0x5626fbd3f700 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3f780 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3f830 <line:406:15, line:407:3>
|   |   |-TextComment 0x5626fbd3f7e0 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd3f800 <line:407:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3f850 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd3f900 <line:407:15, line:408:3>
|   |   |-TextComment 0x5626fbd3f8b0 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x5626fbd3f8d0 <line:408:3> Text=" "
|   `-ParamCommandComment 0x5626fbd3f920 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5626fbd3f9b0 <col:15, col:46>
|       `-TextComment 0x5626fbd3f980 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x5626fbc18058 prev 0x5626fbc17e00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc17ec8 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc17f40 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x5626fbc17fb8 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc187e8 <line:148:2, line:158:2>
|   `-IfStmt 0x5626fbc18788 <line:149:3, line:157:3> has_else
|     |-BinaryOperator 0x5626fbc181e0 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x5626fbc181b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x5626fbc18110 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc17f40 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x5626fbc181c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x5626fbc18190 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5626fbc18168 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5626fbc18130 <col:23> 'int' 0
|     |-CompoundStmt 0x5626fbc182d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x5626fbc18278 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x5626fbc18260 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5626fbc18200 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc28d40 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x5626fbc182a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5626fbc18220 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc17ec8 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x5626fbc182c0 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5626fbc18240 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc17fb8 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x5626fbc18760 <line:151:10, line:157:3> has_else
|       |-BinaryOperator 0x5626fbc18420 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x5626fbc18348 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x5626fbc18330 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5626fbc182f0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc20690 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x5626fbc18370 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5626fbc18310 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc17f40 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x5626fbc18408 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x5626fbc183e8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5626fbc183c0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5626fbc18388 <col:23> 'int' 0
|       |-CompoundStmt 0x5626fbc18518 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x5626fbc184b8 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x5626fbc184a0 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5626fbc18440 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc296e0 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x5626fbc184e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5626fbc18460 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc17ec8 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x5626fbc18500 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5626fbc18480 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc17fb8 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x5626fbc18740 <line:153:10, line:157:3>
|         |-CallExpr 0x5626fbc18620 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x5626fbc18608 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5626fbc18530 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5626fbc262c0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x5626fbc18650 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x5626fbc18550 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc17fb8 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x5626fbc185c8 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x5626fbc185b0 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x5626fbc18570 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc20690 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x5626fbc185f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x5626fbc18590 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc17f40 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x5626fbc186e0 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x5626fbc186c8 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5626fbc18668 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5626fbc262c0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x5626fbc18710 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x5626fbc18688 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc17f40 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x5626fbc18728 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5626fbc186a8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc17fb8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5626fbc188a0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc18810 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x5626fbd3fdd0 <line:417:3, line:424:50>
|   |-ParagraphComment 0x5626fbd3fab0 <line:417:3>
|   | `-TextComment 0x5626fbd3fa80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3fad0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5626fbd3fb30 <col:10, col:59>
|   |   `-TextComment 0x5626fbd3fb00 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5626fbd3fba0 <line:419:3, line:420:63>
|   | |-TextComment 0x5626fbd3fb50 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x5626fbd3fb70 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3fbf0 <line:422:3>
|   | `-TextComment 0x5626fbd3fbc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3fc10 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd3fca0 <col:15, col:46>
|   |   `-TextComment 0x5626fbd3fc70 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5626fbd3fcf0 <line:424:3>
|   | `-TextComment 0x5626fbd3fcc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd3fd10 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x5626fbd3fd70 <col:11, col:50>
|       `-TextComment 0x5626fbd3fd40 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x5626fbc189e8 prev 0x5626fbc188a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc18958 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x5626fbc18fb8 <line:163:2, line:175:2>
|   |-DeclStmt 0x5626fbc18ba0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x5626fbc18aa0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x5626fbc18b60 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x5626fbc18b48 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626fbc18b08 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x5626fbc18b88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5626fbc18b28 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc18958 'list' 'sys_sflist_t *'
|   |-CallExpr 0x5626fbc18ca8 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x5626fbc18c90 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5626fbc18bb8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26830 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5626fbc18cd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5626fbc18bd8 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc18958 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x5626fbc18c50 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5626fbc18c38 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5626fbc18bf8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc20690 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x5626fbc18c78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5626fbc18c18 <col:33> 'sys_sfnode_t *' lvalue Var 0x5626fbc18aa0 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x5626fbc18f30 <line:169:3, line:172:3>
|   | |-BinaryOperator 0x5626fbc18dc0 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x5626fbc18d48 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x5626fbc18d30 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5626fbc18cf0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x5626fbc18d70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5626fbc18d10 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc18958 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x5626fbc18da8 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5626fbc18d88 <col:46> 'sys_sfnode_t *' lvalue Var 0x5626fbc18aa0 'node' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x5626fbc18f18 <col:52, line:172:3>
|   |   `-CallExpr 0x5626fbc18ed0 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   |     |-ImplicitCastExpr 0x5626fbc18eb8 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626fbc18de0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26ad8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |-ImplicitCastExpr 0x5626fbc18f00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5626fbc18e00 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc18958 'list' 'sys_sflist_t *'
|   |     `-CallExpr 0x5626fbc18e78 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   |       |-ImplicitCastExpr 0x5626fbc18e60 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5626fbc18e20 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |       `-ImplicitCastExpr 0x5626fbc18ea0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5626fbc18e40 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc18958 'list' 'sys_sflist_t *'
|   `-ReturnStmt 0x5626fbc18f80 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x5626fbc18f68 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbc18f48 <col:10> 'sys_sfnode_t *' lvalue Var 0x5626fbc18aa0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5626fbc19088 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc18ff8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x5626fbd40170 <line:431:3, line:437:69>
|   |-ParagraphComment 0x5626fbd3fe70 <line:431:3>
|   | `-TextComment 0x5626fbd3fe40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd3fe90 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5626fbd3fef0 <col:10, col:59>
|   |   `-TextComment 0x5626fbd3fec0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5626fbd3ff40 <line:433:3, col:63>
|   | `-TextComment 0x5626fbd3ff10 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd3ff90 <line:435:3>
|   | `-TextComment 0x5626fbd3ff60 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd3ffb0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd40040 <col:15, col:46>
|   |   `-TextComment 0x5626fbd40010 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5626fbd40090 <line:437:3>
|   | `-TextComment 0x5626fbd40060 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd400b0 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5626fbd40110 <col:11, col:69>
|       `-TextComment 0x5626fbd400e0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x5626fbc191d0 prev 0x5626fbc19088 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5626fbc19140 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x5626fbc19528 <line:180:2, line:183:2>
|   `-ReturnStmt 0x5626fbc194f0 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x5626fbc194c0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x5626fbc19490 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x5626fbc19338 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x5626fbc19320 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5626fbc19278 <col:1> 'bool (sys_sflist_t *)' Function 0x5626fbc27ea8 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x5626fbc19360 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5626fbc19298 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc19140 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x5626fbc194a8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x5626fbc193d8 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x5626fbc193b0 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x5626fbc19378 <col:23> 'int' 0
|       `-CallExpr 0x5626fbc19450 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x5626fbc19438 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5626fbc193f8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc189e8 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x5626fbc19478 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5626fbc19418 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc19140 'list' 'sys_sflist_t *'
|-FunctionDecl 0x5626fbc196e0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc19550 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc195c8 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5626fbc19640 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x5626fbd40610 <line:444:3, line:451:46>
|   |-ParagraphComment 0x5626fbd40210 <line:444:3>
|   | `-TextComment 0x5626fbd401e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd40230 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5626fbd40290 <col:10, col:23>
|   |   `-TextComment 0x5626fbd40260 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x5626fbd402e0 <line:446:3, col:63>
|   | `-TextComment 0x5626fbd402b0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd40330 <line:448:3>
|   | `-TextComment 0x5626fbd40300 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd40350 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd40400 <line:448:15, line:449:3>
|   |   |-TextComment 0x5626fbd403b0 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd403d0 <line:449:3> Text=" "
|   |-ParamCommandComment 0x5626fbd40420 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd40500 <line:449:20, line:451:3>
|   |   |-TextComment 0x5626fbd40480 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x5626fbd404a0 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x5626fbd404c0 <line:451:3> Text=" "
|   `-ParamCommandComment 0x5626fbd40520 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5626fbd405b0 <col:15, col:46>
|       `-TextComment 0x5626fbd40580 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x5626fbc19960 prev 0x5626fbc196e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc197d0 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc19848 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5626fbc198c0 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc1a398 <line:190:2, line:212:2>
|   |-IfStmt 0x5626fbc1a208 <line:191:3, line:209:3> has_else
|   | |-BinaryOperator 0x5626fbc19ae8 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x5626fbc19ab8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5626fbc19a18 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc19848 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x5626fbc19ad0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x5626fbc19a98 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5626fbc19a70 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5626fbc19a38 <col:23> 'int' 0
|   | |-CompoundStmt 0x5626fbc19e98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x5626fbc19bf8 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x5626fbc19be0 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5626fbc19b08 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26830 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x5626fbc19c28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5626fbc19b28 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc197d0 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x5626fbc19ba0 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x5626fbc19b88 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5626fbc19b48 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc20690 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x5626fbc19bc8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5626fbc19b68 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc198c0 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x5626fbc19e80 <line:196:4, line:199:4>
|   | |   |-BinaryOperator 0x5626fbc19d10 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x5626fbc19c98 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x5626fbc19c80 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x5626fbc19c40 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x5626fbc19cc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x5626fbc19c60 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc197d0 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x5626fbc19cf8 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x5626fbc19cd8 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc198c0 'node' 'sys_sfnode_t *'
|   | |   `-CompoundStmt 0x5626fbc19e68 <col:53, line:199:4>
|   | |     `-CallExpr 0x5626fbc19e20 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |       |-ImplicitCastExpr 0x5626fbc19e08 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5626fbc19d30 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26ad8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |       |-ImplicitCastExpr 0x5626fbc19e50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5626fbc19d50 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc197d0 'list' 'sys_sflist_t *'
|   | |       `-CallExpr 0x5626fbc19dc8 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |         |-ImplicitCastExpr 0x5626fbc19db0 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x5626fbc19d70 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |         `-ImplicitCastExpr 0x5626fbc19df0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x5626fbc19d90 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc197d0 'list' 'sys_sflist_t *'
|   | `-CompoundStmt 0x5626fbc1a1e8 <line:200:10, line:209:3>
|   |   |-CallExpr 0x5626fbc19fa8 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x5626fbc19f90 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5626fbc19eb8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5626fbc262c0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x5626fbc19fd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x5626fbc19ed8 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc19848 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x5626fbc19f50 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x5626fbc19f38 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x5626fbc19ef8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc20690 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x5626fbc19f78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5626fbc19f18 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc198c0 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x5626fbc1a1d0 <line:205:4, line:208:4>
|   |     |-BinaryOperator 0x5626fbc1a0c0 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x5626fbc1a048 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x5626fbc1a030 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x5626fbc19ff0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x5626fbc1a070 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5626fbc1a010 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc197d0 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x5626fbc1a0a8 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5626fbc1a088 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc198c0 'node' 'sys_sfnode_t *'
|   |     `-CompoundStmt 0x5626fbc1a1b8 <col:53, line:208:4>
|   |       `-CallExpr 0x5626fbc1a158 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |         |-ImplicitCastExpr 0x5626fbc1a140 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5626fbc1a0e0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc26ad8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |         |-ImplicitCastExpr 0x5626fbc1a188 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5626fbc1a100 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc197d0 'list' 'sys_sflist_t *'
|   |         `-ImplicitCastExpr 0x5626fbc1a1a0 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5626fbc1a120 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc19848 'prev_node' 'sys_sfnode_t *'
|   `-CallExpr 0x5626fbc1a308 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x5626fbc1a2f0 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbc1a230 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5626fbc262c0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x5626fbc1a338 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbc1a250 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc198c0 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x5626fbc1a350 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x5626fbc1a2d0 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x5626fbc1a2a8 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x5626fbc1a270 <col:23> 'int' 0
|-FunctionDecl 0x5626fbc1a560 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc1a3c8 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc1a440 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x5626fbd40a80 <line:460:3, line:467:35>
|   |-ParagraphComment 0x5626fbd406b0 <line:460:3>
|   | `-TextComment 0x5626fbd40680 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd406d0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd40730 <col:10, col:44>
|   |   `-TextComment 0x5626fbd40700 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x5626fbd40780 <line:462:3, col:63>
|   | `-TextComment 0x5626fbd40750 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5626fbd407d0 <line:464:3>
|   | `-TextComment 0x5626fbd407a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd407f0 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd408a0 <line:464:15, line:465:3>
|   |   |-TextComment 0x5626fbd40850 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5626fbd40870 <line:465:3> Text=" "
|   |-ParamCommandComment 0x5626fbd408c0 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd40950 <col:15, col:60>
|   |   `-TextComment 0x5626fbd40920 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x5626fbd409a0 <line:467:3>
|   | `-TextComment 0x5626fbd40970 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd409c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd40a20 <col:11, col:35>
|       `-TextComment 0x5626fbd409f0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x5626fbc1a730 prev 0x5626fbc1a560 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5626fbc1a620 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5626fbc1a698 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5626fbc357a0 <line:218:2, line:233:2>
|   |-DeclStmt 0x5626fbc350b0 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x5626fbc34fb0 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x5626fbc35098 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x5626fbc35078 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x5626fbc35050 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x5626fbc35018 <col:23> 'int' 0
|   |-DeclStmt 0x5626fbc35140 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x5626fbc350d8 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x5626fbc35720 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x5626fbc35210 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x5626fbc35158 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x5626fbc350d8 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x5626fbc351d0 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x5626fbc351b8 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5626fbc35178 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x5626fbc351f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5626fbc35198 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc1a620 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5626fbc35300 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x5626fbc352d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5626fbc35230 <col:42> 'sys_sfnode_t *' lvalue Var 0x5626fbc350d8 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x5626fbc352e8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x5626fbc352b0 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5626fbc35288 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5626fbc35250 <col:23> 'int' 0
|   | |-BinaryOperator 0x5626fbc353d8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x5626fbc35320 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x5626fbc350d8 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x5626fbc35398 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x5626fbc35380 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5626fbc35340 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc28708 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x5626fbc353c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5626fbc35360 <col:42> 'sys_sfnode_t *' lvalue Var 0x5626fbc350d8 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x5626fbc35700 <col:48, line:230:3>
|   |   |-IfStmt 0x5626fbc35670 <line:223:4, line:227:4>
|   |   | |-BinaryOperator 0x5626fbc35468 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x5626fbc35438 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x5626fbc353f8 <col:8> 'sys_sfnode_t *' lvalue Var 0x5626fbc350d8 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x5626fbc35450 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5626fbc35418 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc1a698 'node' 'sys_sfnode_t *'
|   |   | `-CompoundStmt 0x5626fbc35650 <col:22, line:227:4>
|   |   |   |-CallExpr 0x5626fbc35588 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   |   | |-ImplicitCastExpr 0x5626fbc35570 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x5626fbc35488 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x5626fbc19960 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   |   | |-ImplicitCastExpr 0x5626fbc355c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5626fbc354a8 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5626fbc1a620 'list' 'sys_sflist_t *'
|   |   |   | |-ImplicitCastExpr 0x5626fbc355d8 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5626fbc354c8 <col:38> 'sys_sfnode_t *' lvalue Var 0x5626fbc34fb0 'prev' 'sys_sfnode_t *'
|   |   |   | `-ImplicitCastExpr 0x5626fbc355f0 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5626fbc354e8 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x5626fbc1a698 'node' 'sys_sfnode_t *'
|   |   |   `-ReturnStmt 0x5626fbc35640 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   |     `-ImplicitCastExpr 0x5626fbc35628 <col:16> 'bool' <IntegralToBoolean>
|   |   |       `-IntegerLiteral 0x5626fbc35608 <col:16> 'int' 1
|   |   `-BinaryOperator 0x5626fbc356e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x5626fbc35688 <col:4> 'sys_sfnode_t *' lvalue Var 0x5626fbc34fb0 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x5626fbc356c8 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5626fbc356a8 <col:11> 'sys_sfnode_t *' lvalue Var 0x5626fbc350d8 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x5626fbc35790 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x5626fbc35778 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x5626fbc35758 <col:16> 'int' 0
|-RecordDecl 0x5626fbc357d0 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x5626fbc35878 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x5626fbc359a0 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x5626fbc35b30 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x5626fbc35be0 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x5626fbc35c40 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x5626fbc35be0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x5626fbc359a0 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x5626fbc35c98 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x5626fbc35be0 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x5626fbc35b30 'bits' 'u32_t [2]'
| `-FieldDecl 0x5626fbc35cf0 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x5626fbc35d98 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x5626fbc35e60 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x5626fbc35ec0 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x5626fbc36d70 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x5626fbc36dd0 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x5626fbc36e58 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x5626fbc36f78 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x5626fbc36fd8 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x5626fbc37200 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x5626fbc370f8 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x5626fbc37658 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x5626fbc372d0 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x5626fbc37348 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbc373c0 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x5626fbc37438 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x5626fbc374e8 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x5626fbc37970 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x5626fbc37748 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x5626fbc377c0 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x5626fbc37838 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x5626fbc37a28 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x5626fbc37b00 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x5626fbc37ba8 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x5626fbc37b50 'struct _ready_q' sugar
|   `-RecordType 0x5626fbc37ab0 'struct _ready_q'
|     `-Record 0x5626fbc37a28 '_ready_q'
|-RecordDecl 0x5626fbc37c00 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x5626fbc37cb8 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x5626fbc37d20 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x5626fbc3fa48 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x5626fbc3fac0 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x5626fbc3fb20 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x5626fbc3fbc8 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x5626fbc3fb70 'struct _cpu' sugar
|   `-RecordType 0x5626fbc37c80 'struct _cpu'
|     `-Record 0x5626fbc37c00 '_cpu'
|-RecordDecl 0x5626fbc3fc20 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x5626fbc3fcc8 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x5626fbc3fdc0 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x5626fbc3fe10 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x5626fbc3fec8 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x5626fbc3ff30 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x5626fbc3ffa8 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x5626fbc40060 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x5626fbc400c0 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x5626fbc40060 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x5626fbc3fec8 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x5626fbc40118 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x5626fbc40060 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x5626fbc3ff30 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x5626fbc40170 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x5626fbc40060 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x5626fbc3ffa8 'current' 'struct k_thread *'
| `-FieldDecl 0x5626fbc40248 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x5626fbc40348 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x5626fbc402f0 'struct z_kernel' sugar
|   `-RecordType 0x5626fbc3fca0 'struct z_kernel'
|     `-Record 0x5626fbc3fc20 'z_kernel'
|-VarDecl 0x5626fbc403c0 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x5626fbc40580 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x5626fbd40d30 <line:40:3, line:45:25>
|   |-ParagraphComment 0x5626fbd40b20 <line:40:3>
|   | `-TextComment 0x5626fbd40af0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd40b40 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5626fbd40ba0 <col:10, col:56>
|   |   `-TextComment 0x5626fbd40b70 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x5626fbd40c10 <line:42:3, line:43:27>
|   | |-TextComment 0x5626fbd40bc0 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x5626fbd40be0 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x5626fbd40c60 <line:45:3>
|   | `-TextComment 0x5626fbd40c30 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd40c80 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x5626fbd40ce0 <col:11, col:25>
|       `-TextComment 0x5626fbd40cb0 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x5626fbc40770 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x5626fbd41080 <line:37:3, line:43:31>
|   |-ParagraphComment 0x5626fbd40dd0 <line:37:3>
|   | `-TextComment 0x5626fbd40da0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd40df0 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x5626fbd40e70 <line:37:10, line:38:20>
|   |   |-TextComment 0x5626fbd40e20 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x5626fbd40e40 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x5626fbd40ec0 <line:40:3>
|   | `-TextComment 0x5626fbd40e90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd40ee0 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x5626fbd40f60 <line:40:9, line:41:23>
|   |   |-TextComment 0x5626fbd40f10 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x5626fbd40f30 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x5626fbd40fb0 <line:43:3>
|   | `-TextComment 0x5626fbd40f80 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd40fd0 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x5626fbd41030 <col:11, col:31>
|       `-TextComment 0x5626fbd41000 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x5626fbc447b0 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x5626fbc40850 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x5626fbc408c8 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x5626fbd41530 <line:47:3, line:56:1>
|   |-ParagraphComment 0x5626fbd41120 <line:47:3>
|   | `-TextComment 0x5626fbd410f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd41140 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x5626fbd411c0 <line:47:10, line:48:33>
|   |   |-TextComment 0x5626fbd41170 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x5626fbd41190 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x5626fbd41210 <line:50:3>
|   | `-TextComment 0x5626fbd411e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd41230 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x5626fbd412b0 <line:50:9, line:51:31>
|   |   |-TextComment 0x5626fbd41260 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x5626fbd41280 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x5626fbd41300 <line:53:3>
|   | `-TextComment 0x5626fbd412d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd41320 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd413d0 <line:53:20, line:54:3>
|   |   |-TextComment 0x5626fbd41380 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x5626fbd413a0 <line:54:3> Text=" "
|   |-ParamCommandComment 0x5626fbd413f0 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd41480 <col:14, col:45>
|   |   `-TextComment 0x5626fbd41450 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x5626fbd414d0 <line:56:1>
|     `-TextComment 0x5626fbd414a0 <col:1> Text=" "
|-FunctionDecl 0x5626fbc44a38 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x5626fbc448a0 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x5626fbc44918 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x5626fbd41ad0 <line:60:3, line:71:1>
|   |-ParagraphComment 0x5626fbd415d0 <line:60:3>
|   | `-TextComment 0x5626fbd415a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd415f0 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x5626fbd41670 <line:60:10, line:61:22>
|   |   |-TextComment 0x5626fbd41620 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x5626fbd41640 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x5626fbd416c0 <line:63:3>
|   | `-TextComment 0x5626fbd41690 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd416e0 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x5626fbd41760 <line:63:9, line:64:42>
|   |   |-TextComment 0x5626fbd41710 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x5626fbd41730 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x5626fbd417c0 <line:66:3>
|   | `-TextComment 0x5626fbd41790 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd417e0 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd41890 <line:66:20, line:67:3>
|   |   |-TextComment 0x5626fbd41840 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x5626fbd41860 <line:67:3> Text=" "
|   |-ParamCommandComment 0x5626fbd418b0 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd41940 <col:14, col:45>
|   |   `-TextComment 0x5626fbd41910 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x5626fbd41990 <line:69:3>
|   | `-TextComment 0x5626fbd41960 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd419b0 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x5626fbd41a10 <col:11, col:53>
|   |   `-TextComment 0x5626fbd419e0 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x5626fbd41a60 <line:71:1>
|     `-TextComment 0x5626fbd41a30 <col:1> Text=" "
|-TypedefDecl 0x5626fbc450a8 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x5626fbc45010 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x5626fbc44fb0 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x5626fbc44f40 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x5626fbc44b50 'uintptr_t' sugar
| |     | |-Typedef 0x5626fbb86178 'uintptr_t'
| |     | `-BuiltinType 0x5626fbafd640 'unsigned long'
| |     |-TypedefType 0x5626fbc44b50 'uintptr_t' sugar
| |     | |-Typedef 0x5626fbb86178 'uintptr_t'
| |     | `-BuiltinType 0x5626fbafd640 'unsigned long'
| |     |-TypedefType 0x5626fbc44b50 'uintptr_t' sugar
| |     | |-Typedef 0x5626fbb86178 'uintptr_t'
| |     | `-BuiltinType 0x5626fbafd640 'unsigned long'
| |     |-TypedefType 0x5626fbc44b50 'uintptr_t' sugar
| |     | |-Typedef 0x5626fbb86178 'uintptr_t'
| |     | `-BuiltinType 0x5626fbafd640 'unsigned long'
| |     |-TypedefType 0x5626fbc44b50 'uintptr_t' sugar
| |     | |-Typedef 0x5626fbb86178 'uintptr_t'
| |     | `-BuiltinType 0x5626fbafd640 'unsigned long'
| |     |-TypedefType 0x5626fbc44b50 'uintptr_t' sugar
| |     | |-Typedef 0x5626fbb86178 'uintptr_t'
| |     | `-BuiltinType 0x5626fbafd640 'unsigned long'
| |     |-TypedefType 0x5626fbc44b50 'uintptr_t' sugar
| |     | |-Typedef 0x5626fbb86178 'uintptr_t'
| |     | `-BuiltinType 0x5626fbafd640 'unsigned long'
| |     `-PointerType 0x5626fbafdca0 'void *'
| |       `-BuiltinType 0x5626fbafd4e0 'void'
| `-FullComment 0x5626fbd42760 <line:50:3, line:84:1>
|   |-ParagraphComment 0x5626fbd41b70 <line:50:3>
|   | `-TextComment 0x5626fbd41b40 <col:3> Text=" "
|   |-VerbatimLineComment 0x5626fbd41b90 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x5626fbd41c00 <line:51:3>
|   | `-TextComment 0x5626fbd41bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd41c20 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd41c80 <col:10, col:43>
|   |   `-TextComment 0x5626fbd41c50 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x5626fbd41cf0 <line:53:3, line:54:67>
|   | |-TextComment 0x5626fbd41ca0 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x5626fbd41cc0 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x5626fbd41ed0 <line:56:3, line:66:41>
|   | |-TextComment 0x5626fbd41d10 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x5626fbd41d30 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x5626fbd41d50 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x5626fbd41d70 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x5626fbd41d90 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x5626fbd41db0 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x5626fbd41dd0 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x5626fbd41df0 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x5626fbd41e10 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x5626fbd41e30 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x5626fbd41e50 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x5626fbd41f40 <line:68:3, line:69:70>
|   | |-TextComment 0x5626fbd41ef0 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x5626fbd41f10 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x5626fbd41f90 <line:71:3, col:80>
|   | `-TextComment 0x5626fbd41f60 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x5626fbd41fe0 <line:73:3>
|   | `-TextComment 0x5626fbd41fb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd42000 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd420b0 <line:73:15, line:74:3>
|   |   |-TextComment 0x5626fbd42060 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x5626fbd42080 <line:74:3> Text=" "
|   |-ParamCommandComment 0x5626fbd420d0 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd42180 <line:74:15, line:75:3>
|   |   |-TextComment 0x5626fbd42130 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x5626fbd42150 <line:75:3> Text=" "
|   |-ParamCommandComment 0x5626fbd421a0 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd42250 <line:75:15, line:76:3>
|   |   |-TextComment 0x5626fbd42200 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x5626fbd42220 <line:76:3> Text=" "
|   |-ParamCommandComment 0x5626fbd42270 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd42320 <line:76:15, line:77:3>
|   |   |-TextComment 0x5626fbd422d0 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x5626fbd422f0 <line:77:3> Text=" "
|   |-ParamCommandComment 0x5626fbd42340 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x5626fbd423f0 <line:77:15, line:78:3>
|   |   |-TextComment 0x5626fbd423a0 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x5626fbd423c0 <line:78:3> Text=" "
|   |-ParamCommandComment 0x5626fbd42410 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x5626fbd424c0 <line:78:15, line:79:3>
|   |   |-TextComment 0x5626fbd42470 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x5626fbd42490 <line:79:3> Text=" "
|   |-ParamCommandComment 0x5626fbd424e0 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x5626fbd425c0 <line:79:14, line:81:3>
|   |   |-TextComment 0x5626fbd42540 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x5626fbd42560 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x5626fbd42580 <line:81:3> Text=" "
|   |-BlockCommandComment 0x5626fbd425e0 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x5626fbd42660 <line:81:11, line:82:22>
|   |   |-TextComment 0x5626fbd42610 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x5626fbd42630 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x5626fbd426b0 <line:84:1>
|     `-TextComment 0x5626fbd42680 <col:1> Text=" "
|-FunctionDecl 0x5626fbc451d0 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x5626fbc45408 <line:94:1, line:106:1>
| | |-DeclStmt 0x5626fbc45378 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x5626fbc452d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x5626fbc45360 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x5626fbc45340 <col:16> 'int' 0
| | `-ReturnStmt 0x5626fbc453c8 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x5626fbc453b0 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbc45390 <col:9> 'bool' lvalue Var 0x5626fbc452d8 'ret' 'bool'
| `-AlwaysInlineAttr 0x5626fbc45270 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5626fbc454c0 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x5626fbc45608 <line:114:1, line:120:1>
| | `-ReturnStmt 0x5626fbc45598 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x5626fbc45580 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x5626fbc45560 <col:16> 'int' 0
| `-FullComment 0x5626fbd42910 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x5626fbd42800 <line:109:3, col:53>
|   | `-TextComment 0x5626fbd427d0 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x5626fbd42850 <line:111:3>
|   | `-TextComment 0x5626fbd42820 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd42870 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5626fbd428d0 <col:11, col:69>
|       `-TextComment 0x5626fbd428a0 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-RecordDecl 0x5626fbc45620 prev 0x5626fbbf7868 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x5626fbc456a0 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x5626fbc66740 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x5626fbc66850 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x5626fbc667f0 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x5626fbc667c0 'struct _k_thread_stack_element'
|     `-Record 0x5626fbcab070 '_k_thread_stack_element'
|-TypedefDecl 0x5626fbc66b68 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x5626fbc66af0 'void (*)(void *, void *, void *)'
|   `-ParenType 0x5626fbc66a90 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x5626fbc66a40 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x5626fbafd4e0 'void'
|       |-PointerType 0x5626fbafdca0 'void *'
|       | `-BuiltinType 0x5626fbafd4e0 'void'
|       |-PointerType 0x5626fbafdca0 'void *'
|       | `-BuiltinType 0x5626fbafd4e0 'void'
|       `-PointerType 0x5626fbafdca0 'void *'
|         `-BuiltinType 0x5626fbafd4e0 'void'
|-FunctionDecl 0x5626fbc66cb0 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x5626fbd42ac0 <line:55:3, line:57:24>
|   |-ParagraphComment 0x5626fbd429b0 <line:55:3, col:70>
|   | `-TextComment 0x5626fbd42980 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x5626fbd42a00 <line:57:3>
|   | `-TextComment 0x5626fbd429d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd42a20 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x5626fbd42a80 <col:8, col:24>
|       `-TextComment 0x5626fbd42a50 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x5626fbc67020 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x5626fbd42e40 <line:120:3, line:130:20>
|   |-ParagraphComment 0x5626fbd42b60 <line:120:3>
|   | `-TextComment 0x5626fbd42b30 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd42b80 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5626fbd42be0 <col:10, col:33>
|   |   `-TextComment 0x5626fbd42bb0 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x5626fbd42c80 <line:122:3, line:124:47>
|   | |-TextComment 0x5626fbd42c00 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x5626fbd42c20 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x5626fbd42c40 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x5626fbd42d20 <line:126:3, line:128:35>
|   | |-TextComment 0x5626fbd42ca0 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x5626fbd42cc0 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x5626fbd42ce0 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x5626fbd42d70 <line:130:3>
|   | `-TextComment 0x5626fbd42d40 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd42d90 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5626fbd42df0 <col:8, col:20>
|       `-TextComment 0x5626fbd42dc0 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x5626fbc671d0 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x5626fbc67100 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x5626fbd43350 <line:135:3, line:150:76>
|   |-ParagraphComment 0x5626fbd42ee0 <line:135:3>
|   | `-TextComment 0x5626fbd42eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd42f00 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x5626fbd42f60 <col:10, col:66>
|   |   `-TextComment 0x5626fbd42f30 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x5626fbd42fb0 <line:137:3, col:62>
|   | `-TextComment 0x5626fbd42f80 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x5626fbd430a0 <line:139:3, line:143:44>
|   | |-TextComment 0x5626fbd42fd0 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x5626fbd42ff0 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x5626fbd43010 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x5626fbd43030 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x5626fbd43050 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x5626fbd43110 <line:145:3, line:146:65>
|   | |-TextComment 0x5626fbd430c0 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x5626fbd430e0 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x5626fbd43160 <line:148:3>
|   | `-TextComment 0x5626fbd43130 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd43180 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x5626fbd431e0 <col:8, col:27>
|   |   `-TextComment 0x5626fbd431b0 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x5626fbd43230 <line:150:3>
|   | `-TextComment 0x5626fbd43200 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd43250 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x5626fbd432e0 <col:14, col:76>
|       `-TextComment 0x5626fbd432b0 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x5626fbc674d8 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x5626fbc67470 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x5626fbc67410 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x5626fbc673d0 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x5626fbafd4e0 'void'
| |     `-PointerType 0x5626fbafdca0 'void *'
| |       `-BuiltinType 0x5626fbafd4e0 'void'
| `-FullComment 0x5626fbd43530 <line:163:3, line:165:52>
|   |-ParagraphComment 0x5626fbd433f0 <line:163:3, col:25>
|   | `-TextComment 0x5626fbd433c0 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x5626fbd43440 <line:165:3>
|   | `-TextComment 0x5626fbd43410 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd43460 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x5626fbd434f0 <col:18, col:52>
|       `-TextComment 0x5626fbd434c0 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x5626fbc67da0 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x5626fbc67570 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x5626fbc67680 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5626fbc67b10 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x5626fbc67bb8 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x5626fbc67c38 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x5626fbd44ce0 <line:170:3, line:187:51>
|   |-ParagraphComment 0x5626fbd435d0 <line:170:3>
|   | `-TextComment 0x5626fbd435a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd435f0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5626fbd43650 <col:10, col:53>
|   |   `-TextComment 0x5626fbd43620 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x5626fbd43740 <line:172:3, line:176:68>
|   | |-TextComment 0x5626fbd43670 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x5626fbd43690 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x5626fbd436b0 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x5626fbd436d0 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x5626fbd436f0 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x5626fbd44830 <line:178:3, line:181:41>
|   | |-TextComment 0x5626fbd43760 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x5626fbd447b0 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x5626fbd447d0 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x5626fbd447f0 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x5626fbd44880 <line:183:3>
|   | `-TextComment 0x5626fbd44850 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd448a0 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd44950 <line:183:18, line:184:3>
|   |   |-TextComment 0x5626fbd44900 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x5626fbd44920 <line:184:3> Text=" "
|   |-ParamCommandComment 0x5626fbd44970 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd44a20 <line:184:16, line:185:3>
|   |   |-TextComment 0x5626fbd449d0 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x5626fbd449f0 <line:185:3> Text=" "
|   |-ParamCommandComment 0x5626fbd44a40 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd44af0 <line:185:13, line:186:3>
|   |   |-TextComment 0x5626fbd44aa0 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x5626fbd44ac0 <line:186:3> Text=" "
|   |-ParamCommandComment 0x5626fbd44b10 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd44bc0 <line:186:13, line:187:3>
|   |   |-TextComment 0x5626fbd44b70 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x5626fbd44b90 <line:187:3> Text=" "
|   `-ParamCommandComment 0x5626fbd44be0 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x5626fbd44c70 <col:14, col:51>
|       `-TextComment 0x5626fbd44c40 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x5626fbc67f98 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x5626fbd44e90 <line:200:3, line:202:18>
|   |-ParagraphComment 0x5626fbd44d80 <line:200:3, col:37>
|   | `-TextComment 0x5626fbd44d50 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x5626fbd44dd0 <line:202:3>
|   | `-TextComment 0x5626fbd44da0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd44df0 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x5626fbd44e50 <col:8, col:18>
|       `-TextComment 0x5626fbd44e20 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x5626fbc68110 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x5626fbc68080 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x5626fbd45040 <line:207:3, line:209:20>
|   |-ParagraphComment 0x5626fbd44f30 <line:207:3, col:39>
|   | `-TextComment 0x5626fbd44f00 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x5626fbd44f80 <line:209:3>
|   | `-TextComment 0x5626fbd44f50 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd44fa0 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5626fbd45000 <col:8, col:20>
|       `-TextComment 0x5626fbd44fd0 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x5626fbc68290 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x5626fbc68200 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x5626fbd452e0 <line:214:3, line:218:39>
|   |-ParagraphComment 0x5626fbd450e0 <line:214:3, col:68>
|   | `-TextComment 0x5626fbd450b0 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x5626fbd45130 <line:216:3>
|   | `-TextComment 0x5626fbd45100 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd45150 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd45200 <line:216:14, line:217:3>
|   |   |-TextComment 0x5626fbd451b0 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x5626fbd451d0 <line:217:3> Text=" "
|   `-BlockCommandComment 0x5626fbd45220 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x5626fbd452a0 <line:217:11, line:218:39>
|       |-TextComment 0x5626fbd45250 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x5626fbd45270 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x5626fbc68410 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x5626fbc68380 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x5626fbd45490 <line:223:3, line:225:21>
|   |-ParagraphComment 0x5626fbd45380 <line:223:3, col:39>
|   | `-TextComment 0x5626fbd45350 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x5626fbd453d0 <line:225:3>
|   | `-TextComment 0x5626fbd453a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd453f0 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x5626fbd45450 <col:8, col:21>
|       `-TextComment 0x5626fbd45420 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x5626fbc68590 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x5626fbc68500 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x5626fbd45640 <line:230:3, line:232:20>
|   |-ParagraphComment 0x5626fbd45530 <line:230:3, col:38>
|   | `-TextComment 0x5626fbd45500 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x5626fbd45580 <line:232:3>
|   | `-TextComment 0x5626fbd45550 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd455a0 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5626fbd45600 <col:8, col:20>
|       `-TextComment 0x5626fbd455d0 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x5626fbc68758 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x5626fbc68680 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x5626fbd457f0 <line:237:3, line:239:24>
|   |-ParagraphComment 0x5626fbd456e0 <line:237:3, col:39>
|   | `-TextComment 0x5626fbd456b0 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x5626fbd45730 <line:239:3>
|   | `-TextComment 0x5626fbd45700 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd45750 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x5626fbd457b0 <col:8, col:24>
|       `-TextComment 0x5626fbd45780 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x5626fbc68f48 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x5626fbc68840 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x5626fbc688c0 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x5626fbc68a78 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x5626fbc68d60 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x5626fbc68dd8 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x5626fbd45e10 <line:244:3, line:252:48>
|   |-ParagraphComment 0x5626fbd45890 <line:244:3, col:53>
|   | `-TextComment 0x5626fbd45860 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x5626fbd458e0 <line:246:3>
|   | `-TextComment 0x5626fbd458b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd45900 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd459b0 <line:246:14, line:247:3>
|   |   |-TextComment 0x5626fbd45960 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x5626fbd45980 <line:247:3> Text=" "
|   |-ParamCommandComment 0x5626fbd459d0 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd45a80 <line:247:19, line:248:3>
|   |   |-TextComment 0x5626fbd45a30 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x5626fbd45a50 <line:248:3> Text=" "
|   |-ParamCommandComment 0x5626fbd45aa0 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd45b50 <line:248:18, line:249:3>
|   |   |-TextComment 0x5626fbd45b00 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x5626fbd45b20 <line:249:3> Text=" "
|   |-ParamCommandComment 0x5626fbd45b70 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd45c20 <line:249:20, line:250:3>
|   |   |-TextComment 0x5626fbd45bd0 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x5626fbd45bf0 <line:250:3> Text=" "
|   |-ParamCommandComment 0x5626fbd45c40 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x5626fbd45cd0 <col:16, col:52>
|   |   `-TextComment 0x5626fbd45ca0 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x5626fbd45d20 <line:252:3>
|   | `-TextComment 0x5626fbd45cf0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd45d40 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x5626fbd45da0 <col:11, col:48>
|       `-TextComment 0x5626fbd45d70 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x5626fbc69378 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x5626fbc69428 <line:28:1, line:34:1>
|-FunctionDecl 0x5626fbc698b0 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x5626fbc69448 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x5626fbc694c0 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5626fbc69538 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5626fbc695b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x5626fbc69628 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x5626fbc696a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x5626fbc69718 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x5626fbc71588 <line:58:1, line:105:1>
| | |-DeclStmt 0x5626fbc69cd8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x5626fbc699f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x5626fbc69cc0 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x5626fbc69ca0 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x5626fbc69b58 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x5626fbc69b40 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x5626fbc69b28 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x5626fbc69a58 <col:19> 'bool' lvalue ParmVar 0x5626fbc695b0 'const_hz' 'bool'
| | |       | `-ParenExpr 0x5626fbc69b08 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x5626fbc69ae8 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x5626fbc69ab8 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x5626fbc69a78 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x5626fbc69ad0 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x5626fbc69a98 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x5626fbc69c80 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x5626fbc69c60 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x5626fbc69c08 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x5626fbc69be8 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x5626fbc69bb8 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x5626fbc69b78 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x5626fbc69bd0 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x5626fbc69b98 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x5626fbc69c48 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x5626fbc69c28 <col:46> 'int' 0
| | |-DeclStmt 0x5626fbc6dae8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x5626fbc6d800 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x5626fbc6dad0 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x5626fbc6dab0 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x5626fbc6d968 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x5626fbc6d950 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x5626fbc6d938 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x5626fbc6d868 <col:19> 'bool' lvalue ParmVar 0x5626fbc695b0 'const_hz' 'bool'
| | |       | `-ParenExpr 0x5626fbc6d918 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x5626fbc6d8f8 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x5626fbc6d8c8 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x5626fbc6d888 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x5626fbc6d8e0 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x5626fbc6d8a8 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x5626fbc6da90 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x5626fbc6da70 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x5626fbc6da18 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x5626fbc6d9f8 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x5626fbc6d9c8 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x5626fbc6d988 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x5626fbc6d9e0 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x5626fbc6d9a8 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x5626fbc6da58 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x5626fbc6da38 <col:46> 'int' 0
| | |-IfStmt 0x5626fbc6dd18 <line:64:2, line:66:2>
| | | |-BinaryOperator 0x5626fbc6db70 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x5626fbc6db40 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x5626fbc6db00 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x5626fbc6db58 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5626fbc6db20 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| | | `-CompoundStmt 0x5626fbc6dd00 <col:24, line:66:2>
| | |   `-ReturnStmt 0x5626fbc6dcf0 <line:65:3, col:34>
| | |     `-ConditionalOperator 0x5626fbc6dcc0 <col:10, col:34> 'unsigned long long'
| | |       |-ImplicitCastExpr 0x5626fbc6dc78 <col:10> 'int' <IntegralCast>
| | |       | `-ImplicitCastExpr 0x5626fbc6dc60 <col:10> 'bool' <LValueToRValue>
| | |       |   `-DeclRefExpr 0x5626fbc6db90 <col:10> 'bool' lvalue ParmVar 0x5626fbc69628 'result32' 'bool'
| | |       |-ImplicitCastExpr 0x5626fbc6dca8 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | |       | `-ParenExpr 0x5626fbc6dc20 <col:21, col:30> 'u32_t':'unsigned int'
| | |       |   `-CStyleCastExpr 0x5626fbc6dbf8 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | |       |     `-ImplicitCastExpr 0x5626fbc6dbe0 <col:29> 'u64_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
| | |       |       `-DeclRefExpr 0x5626fbc6dbb0 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc69448 't' 'u64_t':'unsigned long long'
| | |       `-ImplicitCastExpr 0x5626fbc6dc90 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | |         `-DeclRefExpr 0x5626fbc6dc40 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc69448 't' 'u64_t':'unsigned long long'
| | |-DeclStmt 0x5626fbc6dde0 <line:68:2, col:15>
| | | `-VarDecl 0x5626fbc6dd40 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x5626fbc6ddc8 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x5626fbc6dda8 <col:14> 'int' 0
| | |-IfStmt 0x5626fbc6e310 <line:70:2, line:78:2>
| | | |-UnaryOperator 0x5626fbc6de30 <line:70:6, col:7> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x5626fbc6de18 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5626fbc6ddf8 <col:7> 'bool' lvalue Var 0x5626fbc699f0 'mul_ratio' 'bool'
| | | `-CompoundStmt 0x5626fbc6e2f0 <col:18, line:78:2>
| | |   |-DeclStmt 0x5626fbc6e028 <line:71:3, col:59>
| | |   | `-VarDecl 0x5626fbc6de58 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | |   |   `-ConditionalOperator 0x5626fbc6dff8 <col:20, col:52> 'unsigned int'
| | |   |     |-ImplicitCastExpr 0x5626fbc6dfc8 <col:20> 'int' <IntegralCast>
| | |   |     | `-ImplicitCastExpr 0x5626fbc6dfb0 <col:20> 'bool' <LValueToRValue>
| | |   |     |   `-DeclRefExpr 0x5626fbc6dec0 <col:20> 'bool' lvalue Var 0x5626fbc6d800 'div_ratio' 'bool'
| | |   |     |-ParenExpr 0x5626fbc6df70 <col:32, col:48> 'unsigned int'
| | |   |     | `-BinaryOperator 0x5626fbc6df50 <col:33, col:43> 'unsigned int' '/'
| | |   |     |   |-ImplicitCastExpr 0x5626fbc6df20 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | |   |     |   | `-DeclRefExpr 0x5626fbc6dee0 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| | |   |     |   `-ImplicitCastExpr 0x5626fbc6df38 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | |   |     |     `-DeclRefExpr 0x5626fbc6df00 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| | |   |     `-ImplicitCastExpr 0x5626fbc6dfe0 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x5626fbc6df90 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| | |   `-IfStmt 0x5626fbc6e2c8 <line:73:3, line:77:3> has_else
| | |     |-ImplicitCastExpr 0x5626fbc6e060 <line:73:7> 'bool' <LValueToRValue>
| | |     | `-DeclRefExpr 0x5626fbc6e040 <col:7> 'bool' lvalue ParmVar 0x5626fbc696a0 'round_up' 'bool'
| | |     |-CompoundStmt 0x5626fbc6e160 <col:17, line:75:3>
| | |     | `-BinaryOperator 0x5626fbc6e140 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | |     |   |-DeclRefExpr 0x5626fbc6e078 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x5626fbc6dd40 'off' 'u64_t':'unsigned long long'
| | |     |   `-ImplicitCastExpr 0x5626fbc6e128 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | |     |     `-BinaryOperator 0x5626fbc6e108 <col:10, col:21> 'unsigned int' '-'
| | |     |       |-ImplicitCastExpr 0x5626fbc6e0d8 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | |     |       | `-DeclRefExpr 0x5626fbc6e098 <col:10> 'u32_t':'unsigned int' lvalue Var 0x5626fbc6de58 'rdivisor' 'u32_t':'unsigned int'
| | |     |       `-ImplicitCastExpr 0x5626fbc6e0f0 <col:21> 'unsigned int' <IntegralCast>
| | |     |         `-IntegerLiteral 0x5626fbc6e0b8 <col:21> 'int' 1
| | |     `-IfStmt 0x5626fbc6e2b0 <line:75:10, line:77:3>
| | |       |-ImplicitCastExpr 0x5626fbc6e198 <line:75:14> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0x5626fbc6e178 <col:14> 'bool' lvalue ParmVar 0x5626fbc69718 'round_off' 'bool'
| | |       `-CompoundStmt 0x5626fbc6e298 <col:25, line:77:3>
| | |         `-BinaryOperator 0x5626fbc6e278 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | |           |-DeclRefExpr 0x5626fbc6e1b0 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x5626fbc6dd40 'off' 'u64_t':'unsigned long long'
| | |           `-ImplicitCastExpr 0x5626fbc6e260 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | |             `-BinaryOperator 0x5626fbc6e240 <col:10, col:21> 'unsigned int' '/'
| | |               |-ImplicitCastExpr 0x5626fbc6e210 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | |               | `-DeclRefExpr 0x5626fbc6e1d0 <col:10> 'u32_t':'unsigned int' lvalue Var 0x5626fbc6de58 'rdivisor' 'u32_t':'unsigned int'
| | |               `-ImplicitCastExpr 0x5626fbc6e228 <col:21> 'unsigned int' <IntegralCast>
| | |                 `-IntegerLiteral 0x5626fbc6e1f0 <col:21> 'int' 2
| | `-IfStmt 0x5626fbc71538 <line:85:2, line:104:2> has_else
| |   |-ImplicitCastExpr 0x5626fbc6e348 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x5626fbc6e328 <col:6> 'bool' lvalue Var 0x5626fbc6d800 'div_ratio' 'bool'
| |   |-CompoundStmt 0x5626fbc6e730 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x5626fbc6e3b8 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x5626fbc6e360 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc69448 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x5626fbc6e3a0 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x5626fbc6e380 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x5626fbc6dd40 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x5626fbc6e708 <line:87:3, line:91:3> has_else
| |   |   |-ImplicitCastExpr 0x5626fbc6e408 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x5626fbc6e3e8 <col:7> 'bool' lvalue ParmVar 0x5626fbc69628 'result32' 'bool'
| |   |   |-CompoundStmt 0x5626fbc6e5a8 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x5626fbc6e598 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x5626fbc6e580 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x5626fbc6e560 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x5626fbc6e490 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x5626fbc6e468 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x5626fbc6e450 <col:19> 'u64_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
| |   |   |       |     `-DeclRefExpr 0x5626fbc6e420 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc69448 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x5626fbc6e540 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x5626fbc6e520 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x5626fbc6e4f0 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x5626fbc6e4b0 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x5626fbc6e508 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x5626fbc6e4d0 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x5626fbc6e6f0 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x5626fbc6e6e0 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x5626fbc6e6c0 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x5626fbc6e690 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x5626fbc6e5c0 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc69448 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x5626fbc6e6a8 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x5626fbc6e670 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x5626fbc6e650 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x5626fbc6e620 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x5626fbc6e5e0 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x5626fbc6e638 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x5626fbc6e600 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x5626fbc71510 <line:92:9, line:104:2> has_else
| |     |-ImplicitCastExpr 0x5626fbc6e770 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc6e750 <col:13> 'bool' lvalue Var 0x5626fbc699f0 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x5626fbc71080 <col:24, line:98:2>
| |     | `-IfStmt 0x5626fbc71058 <line:93:3, line:97:3> has_else
| |     |   |-ImplicitCastExpr 0x5626fbc6e7a8 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5626fbc6e788 <col:7> 'bool' lvalue ParmVar 0x5626fbc69628 'result32' 'bool'
| |     |   |-CompoundStmt 0x5626fbc70ef8 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x5626fbc70ee8 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x5626fbc70ed0 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x5626fbc70eb0 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x5626fbc70de0 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x5626fbc70db8 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x5626fbc70da0 <col:19> 'u64_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
| |     |   |       |     `-DeclRefExpr 0x5626fbc6e7c0 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc69448 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x5626fbc70e90 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x5626fbc70e70 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x5626fbc70e40 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x5626fbc70e00 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x5626fbc70e58 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x5626fbc70e20 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x5626fbc71040 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x5626fbc71030 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x5626fbc71010 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x5626fbc70fe0 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x5626fbc70f10 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc69448 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x5626fbc70ff8 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x5626fbc70fc0 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x5626fbc70fa0 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x5626fbc70f70 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x5626fbc70f30 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x5626fbc70f88 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x5626fbc70f50 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x5626fbc714f8 <line:98:9, line:104:2>
| |       `-IfStmt 0x5626fbc714d0 <line:99:3, line:103:3> has_else
| |         |-ImplicitCastExpr 0x5626fbc710b8 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x5626fbc71098 <col:7> 'bool' lvalue ParmVar 0x5626fbc69628 'result32' 'bool'
| |         |-CompoundStmt 0x5626fbc71300 <col:17, line:101:3>
| |         | `-ReturnStmt 0x5626fbc712f0 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x5626fbc712d8 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x5626fbc712b0 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x5626fbc71290 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x5626fbc71240 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x5626fbc711d0 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x5626fbc711b0 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x5626fbc71158 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x5626fbc71110 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x5626fbc710d0 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc69448 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x5626fbc71140 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x5626fbc71128 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x5626fbc710f0 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x5626fbc71198 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x5626fbc71178 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x5626fbc6dd40 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x5626fbc71228 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x5626fbc71210 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x5626fbc711f0 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x5626fbc714b8 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x5626fbc714a8 <line:102:4, col:31>
| |             `-BinaryOperator 0x5626fbc71488 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x5626fbc71418 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x5626fbc713f8 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x5626fbc713a0 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x5626fbc71358 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x5626fbc71318 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc69448 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x5626fbc71388 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x5626fbc71370 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x5626fbc71338 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc69538 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x5626fbc713e0 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x5626fbc713c0 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x5626fbc6dd40 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x5626fbc71470 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x5626fbc71458 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x5626fbc71438 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc694c0 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x5626fbc69988 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5626fbc716e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc715d8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc71b18 <line:191:1, line:194:1>
| | `-ReturnStmt 0x5626fbc71ad8 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x5626fbc71ac0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc719a8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc71990 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc71788 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc71a18 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc71a00 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc717a8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc715d8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc71a30 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc717c8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5626fbc71a48 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc71858 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc71840 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc717e8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc71a60 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc718b0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc71898 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc71878 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc71a78 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc718d0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc71a90 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc718f0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc71aa8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc71910 <col:16> 'int' 0
| `-FullComment 0x5626fbd460f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x5626fbd45eb0 <line:182:4>
|   | `-TextComment 0x5626fbd45e80 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd45ed0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd45f30 <col:11, col:50>
|   |   `-TextComment 0x5626fbd45f00 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd45fd0 <line:184:3, line:186:44>
|   | |-TextComment 0x5626fbd45f50 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5626fbd45f70 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd45f90 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd46020 <line:188:3>
|   | `-TextComment 0x5626fbd45ff0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd46040 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd460a0 <col:11, col:35>
|       `-TextComment 0x5626fbd46070 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc71c50 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc71b40 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc732f8 <line:205:1, line:208:1>
| | `-ReturnStmt 0x5626fbc732c0 <line:207:2, col:66>
| |   `-CallExpr 0x5626fbc731c0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc731a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc71cf8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc73218 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc71d18 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc71b40 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc73230 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc71d38 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5626fbc73248 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc730d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc71d78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc71d58 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc73260 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc73128 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc73110 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc730f0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc73278 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc73148 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc73290 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc73168 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc732a8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc73188 <col:16> 'int' 0
| `-FullComment 0x5626fbd463d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x5626fbd46190 <line:196:4>
|   | `-TextComment 0x5626fbd46160 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd461b0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd46210 <col:11, col:50>
|   |   `-TextComment 0x5626fbd461e0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd462b0 <line:198:3, line:200:44>
|   | |-TextComment 0x5626fbd46230 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5626fbd46250 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd46270 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd46300 <line:202:3>
|   | `-TextComment 0x5626fbd462d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd46320 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd46380 <col:11, col:35>
|       `-TextComment 0x5626fbd46350 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc733b0 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc73320 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc73748 <line:219:1, line:222:1>
| | `-ReturnStmt 0x5626fbc73710 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc736f8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc735e0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc735c8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc73458 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc73650 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc73638 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc73478 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc73320 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc73668 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc73498 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5626fbc73680 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc734f0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc734d8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc734b8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc73698 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc73548 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc73530 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc73510 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc736b0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc73568 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc736c8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc73588 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc736e0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc735a8 <col:16> 'int' 1
| `-FullComment 0x5626fbd466b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x5626fbd46470 <line:210:4>
|   | `-TextComment 0x5626fbd46440 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd46490 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd464f0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd464c0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd46590 <line:212:3, line:214:37>
|   | |-TextComment 0x5626fbd46510 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5626fbd46530 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd46550 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd465e0 <line:216:3>
|   | `-TextComment 0x5626fbd465b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd46600 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd46660 <col:11, col:35>
|       `-TextComment 0x5626fbd46630 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc73800 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc73770 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc73b68 <line:233:1, line:236:1>
| | `-ReturnStmt 0x5626fbc73b30 <line:235:2, col:65>
| |   `-CallExpr 0x5626fbc73a30 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc73a18 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc738a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc73a88 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc738c8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc73770 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc73aa0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc738e8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5626fbc73ab8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc73940 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc73928 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc73908 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc73ad0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc73998 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc73980 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc73960 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc73ae8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc739b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc73b00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc739d8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc73b18 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc739f8 <col:16> 'int' 1
| `-FullComment 0x5626fbd469b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x5626fbd46750 <line:224:4>
|   | `-TextComment 0x5626fbd46720 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd46770 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd467f0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd467c0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd46890 <line:226:3, line:228:37>
|   | |-TextComment 0x5626fbd46810 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5626fbd46830 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd46850 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd468e0 <line:230:3>
|   | `-TextComment 0x5626fbd468b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd46900 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd46960 <col:11, col:35>
|       `-TextComment 0x5626fbd46930 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc73c20 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc73b90 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc73fb8 <line:247:1, line:250:1>
| | `-ReturnStmt 0x5626fbc73f80 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc73f68 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc73e50 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc73e38 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc73cc8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc73ec0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc73ea8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc73ce8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc73b90 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc73ed8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc73d08 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5626fbc73ef0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc73d60 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc73d48 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc73d28 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc73f08 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc73db8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc73da0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc73d80 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc73f20 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc73dd8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc73f38 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc73df8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5626fbc73f50 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc73e18 <col:16> 'int' 0
| `-FullComment 0x5626fbd46c90 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x5626fbd46a50 <line:238:4>
|   | `-TextComment 0x5626fbd46a20 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd46a70 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd46ad0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd46aa0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd46b70 <line:240:3, line:242:45>
|   | |-TextComment 0x5626fbd46af0 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5626fbd46b10 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd46b30 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd46bc0 <line:244:3>
|   | `-TextComment 0x5626fbd46b90 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd46be0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd46c40 <col:11, col:35>
|       `-TextComment 0x5626fbd46c10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc74120 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc73fe0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc74488 <line:261:1, line:264:1>
| | `-ReturnStmt 0x5626fbc74450 <line:263:2, col:65>
| |   `-CallExpr 0x5626fbc74350 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc74338 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc741c8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc743a8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc741e8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc73fe0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc743c0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc74208 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5626fbc743d8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc74260 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc74248 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc74228 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc743f0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc742b8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc742a0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc74280 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc74408 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc742d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc74420 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc742f8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5626fbc74438 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc74318 <col:16> 'int' 0
| `-FullComment 0x5626fbd46f70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x5626fbd46d30 <line:252:4>
|   | `-TextComment 0x5626fbd46d00 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd46d50 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd46db0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd46d80 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd46e50 <line:254:3, line:256:45>
|   | |-TextComment 0x5626fbd46dd0 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5626fbd46df0 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd46e10 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd46ea0 <line:258:3>
|   | `-TextComment 0x5626fbd46e70 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd46ec0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd46f20 <col:11, col:35>
|       `-TextComment 0x5626fbd46ef0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc74540 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc744b0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc74778 <line:275:1, line:278:1>
| `-FullComment 0x5626fbd47250 <line:266:4, line:272:35>
|   |-ParagraphComment 0x5626fbd47010 <line:266:4>
|   | `-TextComment 0x5626fbd46fe0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd47030 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd47090 <col:11, col:40>
|   |   `-TextComment 0x5626fbd47060 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5626fbd47130 <line:268:3, line:270:44>
|   | |-TextComment 0x5626fbd470b0 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5626fbd470d0 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd470f0 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd47180 <line:272:3>
|   | `-TextComment 0x5626fbd47150 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd471a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd47200 <col:11, col:35>
|       `-TextComment 0x5626fbd471d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc74828 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc74798 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc74a58 <line:289:1, line:292:1>
| `-FullComment 0x5626fbd47530 <line:280:4, line:286:35>
|   |-ParagraphComment 0x5626fbd472f0 <line:280:4>
|   | `-TextComment 0x5626fbd472c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd47310 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd47370 <col:11, col:40>
|   |   `-TextComment 0x5626fbd47340 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5626fbd47410 <line:282:3, line:284:44>
|   | |-TextComment 0x5626fbd47390 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5626fbd473b0 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd473d0 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd47460 <line:286:3>
|   | `-TextComment 0x5626fbd47430 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd47480 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd474e0 <col:11, col:35>
|       `-TextComment 0x5626fbd474b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc74b08 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc74a78 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc74d38 <line:303:1, line:306:1>
| `-FullComment 0x5626fbd47810 <line:294:4, line:300:35>
|   |-ParagraphComment 0x5626fbd475d0 <line:294:4>
|   | `-TextComment 0x5626fbd475a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd475f0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd47650 <col:11, col:40>
|   |   `-TextComment 0x5626fbd47620 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5626fbd476f0 <line:296:3, line:298:37>
|   | |-TextComment 0x5626fbd47670 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5626fbd47690 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd476b0 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd47740 <line:300:3>
|   | `-TextComment 0x5626fbd47710 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd47760 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd477c0 <col:11, col:35>
|       `-TextComment 0x5626fbd47790 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc74de8 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc74d58 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc75018 <line:317:1, line:320:1>
| `-FullComment 0x5626fbd47af0 <line:308:4, line:314:35>
|   |-ParagraphComment 0x5626fbd478b0 <line:308:4>
|   | `-TextComment 0x5626fbd47880 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd478d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd47930 <col:11, col:40>
|   |   `-TextComment 0x5626fbd47900 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5626fbd479d0 <line:310:3, line:312:37>
|   | |-TextComment 0x5626fbd47950 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5626fbd47970 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd47990 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd47a20 <line:314:3>
|   | `-TextComment 0x5626fbd479f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd47a40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd47aa0 <col:11, col:35>
|       `-TextComment 0x5626fbd47a70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc75b70 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc75038 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc75da8 <line:331:1, line:334:1>
| `-FullComment 0x5626fbd47dd0 <line:322:4, line:328:35>
|   |-ParagraphComment 0x5626fbd47b90 <line:322:4>
|   | `-TextComment 0x5626fbd47b60 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd47bb0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd47c10 <col:11, col:40>
|   |   `-TextComment 0x5626fbd47be0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5626fbd47cb0 <line:324:3, line:326:45>
|   | |-TextComment 0x5626fbd47c30 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5626fbd47c50 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd47c70 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd47d00 <line:328:3>
|   | `-TextComment 0x5626fbd47cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd47d20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd47d80 <col:11, col:35>
|       `-TextComment 0x5626fbd47d50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc75e58 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc75dc8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc76088 <line:345:1, line:348:1>
| `-FullComment 0x5626fbd480b0 <line:336:4, line:342:35>
|   |-ParagraphComment 0x5626fbd47e70 <line:336:4>
|   | `-TextComment 0x5626fbd47e40 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd47e90 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd47ef0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd47ec0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5626fbd47f90 <line:338:3, line:340:45>
|   | |-TextComment 0x5626fbd47f10 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5626fbd47f30 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd47f50 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd47fe0 <line:342:3>
|   | `-TextComment 0x5626fbd47fb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd48000 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd48060 <col:11, col:35>
|       `-TextComment 0x5626fbd48030 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc76138 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc760a8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc764d8 <line:359:1, line:362:1>
| | `-ReturnStmt 0x5626fbc76498 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x5626fbc76480 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc76368 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc76350 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc761e0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc763d8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc763c0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc76200 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc760a8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc763f0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc76220 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5626fbc76408 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc76278 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc76260 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc76240 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc76420 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc762d0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc762b8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc76298 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc76438 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc762f0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc76450 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc76310 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc76468 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc76330 <col:16> 'int' 0
| `-FullComment 0x5626fbd48390 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x5626fbd48150 <line:350:4>
|   | `-TextComment 0x5626fbd48120 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd48170 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd481d0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd481a0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd48270 <line:352:3, line:354:44>
|   | |-TextComment 0x5626fbd481f0 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5626fbd48210 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd48230 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd482c0 <line:356:3>
|   | `-TextComment 0x5626fbd48290 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd482e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd48340 <col:11, col:35>
|       `-TextComment 0x5626fbd48310 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc76590 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc76500 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc768f8 <line:373:1, line:376:1>
| | `-ReturnStmt 0x5626fbc768c0 <line:375:2, col:66>
| |   `-CallExpr 0x5626fbc767c0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc767a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc76638 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc76818 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc76658 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc76500 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc76830 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc76678 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5626fbc76848 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc766d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc766b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc76698 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc76860 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc76728 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc76710 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc766f0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc76878 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc76748 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc76890 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc76768 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc768a8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc76788 <col:16> 'int' 0
| `-FullComment 0x5626fbd48670 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x5626fbd48430 <line:364:4>
|   | `-TextComment 0x5626fbd48400 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd48450 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd484b0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd48480 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd48550 <line:366:3, line:368:44>
|   | |-TextComment 0x5626fbd484d0 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5626fbd484f0 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd48510 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd485a0 <line:370:3>
|   | `-TextComment 0x5626fbd48570 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd485c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd48620 <col:11, col:35>
|       `-TextComment 0x5626fbd485f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc769b0 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc76920 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc76d68 <line:387:1, line:390:1>
| | `-ReturnStmt 0x5626fbc76d28 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc76d10 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc76bf8 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc76be0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc76a58 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc76c68 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc76c50 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc76a78 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc76920 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc76c80 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc76a98 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5626fbc76c98 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc76af0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc76ad8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc76ab8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc76cb0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc76b48 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc76b30 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc76b10 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc76cc8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc76b80 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc76ce0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc76ba0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc76cf8 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc76bc0 <col:16> 'int' 1
| `-FullComment 0x5626fbd48970 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x5626fbd48710 <line:378:4>
|   | `-TextComment 0x5626fbd486e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd48730 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd48790 <col:11, col:50>
|   |   `-TextComment 0x5626fbd48760 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd48850 <line:380:3, line:382:37>
|   | |-TextComment 0x5626fbd487d0 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5626fbd487f0 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd48810 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd488a0 <line:384:3>
|   | `-TextComment 0x5626fbd48870 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd488c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd48920 <col:11, col:35>
|       `-TextComment 0x5626fbd488f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc76e20 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc76d90 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc77188 <line:401:1, line:404:1>
| | `-ReturnStmt 0x5626fbc77150 <line:403:2, col:65>
| |   `-CallExpr 0x5626fbc77050 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc77038 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc76ec8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc770a8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc76ee8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc76d90 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc770c0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc76f08 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5626fbc770d8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc76f60 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc76f48 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc76f28 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc770f0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc76fb8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc76fa0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc76f80 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc77108 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc76fd8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc77120 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc76ff8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc77138 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc77018 <col:16> 'int' 1
| `-FullComment 0x5626fbd48c50 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x5626fbd48a10 <line:392:4>
|   | `-TextComment 0x5626fbd489e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd48a30 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd48a90 <col:11, col:50>
|   |   `-TextComment 0x5626fbd48a60 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd48b30 <line:394:3, line:396:37>
|   | |-TextComment 0x5626fbd48ab0 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5626fbd48ad0 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd48af0 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd48b80 <line:398:3>
|   | `-TextComment 0x5626fbd48b50 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd48ba0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd48c00 <col:11, col:35>
|       `-TextComment 0x5626fbd48bd0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc77240 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc771b0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc775d8 <line:415:1, line:418:1>
| | `-ReturnStmt 0x5626fbc775a0 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc77588 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc77470 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc77458 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc772e8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc774e0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc774c8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc77308 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc771b0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc774f8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc77328 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5626fbc77510 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc77380 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc77368 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc77348 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc77528 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc773d8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc773c0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc773a0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc77540 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc773f8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc77558 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc77418 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5626fbc77570 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc77438 <col:16> 'int' 0
| `-FullComment 0x5626fbd48f30 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x5626fbd48cf0 <line:406:4>
|   | `-TextComment 0x5626fbd48cc0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd48d10 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd48d70 <col:11, col:50>
|   |   `-TextComment 0x5626fbd48d40 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd48e10 <line:408:3, line:410:45>
|   | |-TextComment 0x5626fbd48d90 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5626fbd48db0 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd48dd0 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd48e60 <line:412:3>
|   | `-TextComment 0x5626fbd48e30 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd48e80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd48ee0 <col:11, col:35>
|       `-TextComment 0x5626fbd48eb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc77690 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc77600 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc779f8 <line:429:1, line:432:1>
| | `-ReturnStmt 0x5626fbc779c0 <line:431:2, col:65>
| |   `-CallExpr 0x5626fbc778c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc778a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc77738 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc77918 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc77758 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc77600 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc77930 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc77778 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5626fbc77948 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc777d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc777b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc77798 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc77960 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc77828 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc77810 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc777f0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc77978 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc77848 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc77990 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc77868 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5626fbc779a8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc77888 <col:16> 'int' 0
| `-FullComment 0x5626fbd49210 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x5626fbd48fd0 <line:420:4>
|   | `-TextComment 0x5626fbd48fa0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd48ff0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd49050 <col:11, col:50>
|   |   `-TextComment 0x5626fbd49020 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd490f0 <line:422:3, line:424:45>
|   | |-TextComment 0x5626fbd49070 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5626fbd49090 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd490b0 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd49140 <line:426:3>
|   | `-TextComment 0x5626fbd49110 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd49160 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd491c0 <col:11, col:35>
|       `-TextComment 0x5626fbd49190 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc77ab0 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc77a20 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc77cf8 <line:443:1, line:446:1>
| `-FullComment 0x5626fbd494f0 <line:434:4, line:440:35>
|   |-ParagraphComment 0x5626fbd492b0 <line:434:4>
|   | `-TextComment 0x5626fbd49280 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd492d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd49330 <col:11, col:40>
|   |   `-TextComment 0x5626fbd49300 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5626fbd493d0 <line:436:3, line:438:44>
|   | |-TextComment 0x5626fbd49350 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5626fbd49370 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd49390 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd49420 <line:440:3>
|   | `-TextComment 0x5626fbd493f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd49440 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd494a0 <col:11, col:35>
|       `-TextComment 0x5626fbd49470 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc77da8 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc77d18 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc77fd8 <line:457:1, line:460:1>
| `-FullComment 0x5626fbd497d0 <line:448:4, line:454:35>
|   |-ParagraphComment 0x5626fbd49590 <line:448:4>
|   | `-TextComment 0x5626fbd49560 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd495b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd49610 <col:11, col:40>
|   |   `-TextComment 0x5626fbd495e0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5626fbd496b0 <line:450:3, line:452:44>
|   | |-TextComment 0x5626fbd49630 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5626fbd49650 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd49670 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd49700 <line:454:3>
|   | `-TextComment 0x5626fbd496d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd49720 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd49780 <col:11, col:35>
|       `-TextComment 0x5626fbd49750 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc78088 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc77ff8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc782b8 <line:471:1, line:474:1>
| `-FullComment 0x5626fbd49ab0 <line:462:4, line:468:35>
|   |-ParagraphComment 0x5626fbd49870 <line:462:4>
|   | `-TextComment 0x5626fbd49840 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd49890 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd498f0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd498c0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5626fbd49990 <line:464:3, line:466:37>
|   | |-TextComment 0x5626fbd49910 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5626fbd49930 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd49950 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd499e0 <line:468:3>
|   | `-TextComment 0x5626fbd499b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd49a00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd49a60 <col:11, col:35>
|       `-TextComment 0x5626fbd49a30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc78368 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc782d8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc78598 <line:485:1, line:488:1>
| `-FullComment 0x5626fbd49d90 <line:476:4, line:482:35>
|   |-ParagraphComment 0x5626fbd49b50 <line:476:4>
|   | `-TextComment 0x5626fbd49b20 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd49b70 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd49bd0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd49ba0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5626fbd49c70 <line:478:3, line:480:37>
|   | |-TextComment 0x5626fbd49bf0 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5626fbd49c10 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd49c30 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd49cc0 <line:482:3>
|   | `-TextComment 0x5626fbd49c90 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd49ce0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd49d40 <col:11, col:35>
|       `-TextComment 0x5626fbd49d10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc78648 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc785b8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc78878 <line:499:1, line:502:1>
| `-FullComment 0x5626fbd4a070 <line:490:4, line:496:35>
|   |-ParagraphComment 0x5626fbd49e30 <line:490:4>
|   | `-TextComment 0x5626fbd49e00 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd49e50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd49eb0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd49e80 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5626fbd49f50 <line:492:3, line:494:45>
|   | |-TextComment 0x5626fbd49ed0 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5626fbd49ef0 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd49f10 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd49fa0 <line:496:3>
|   | `-TextComment 0x5626fbd49f70 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd49fc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4a020 <col:11, col:35>
|       `-TextComment 0x5626fbd49ff0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc78928 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc78898 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc78b58 <line:513:1, line:516:1>
| `-FullComment 0x5626fbd4a350 <line:504:4, line:510:35>
|   |-ParagraphComment 0x5626fbd4a110 <line:504:4>
|   | `-TextComment 0x5626fbd4a0e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4a130 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd4a190 <col:11, col:40>
|   |   `-TextComment 0x5626fbd4a160 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5626fbd4a230 <line:506:3, line:508:45>
|   | |-TextComment 0x5626fbd4a1b0 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5626fbd4a1d0 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4a1f0 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4a280 <line:510:3>
|   | `-TextComment 0x5626fbd4a250 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4a2a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4a300 <col:11, col:35>
|       `-TextComment 0x5626fbd4a2d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc78ff0 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc78f60 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc79388 <line:527:1, line:530:1>
| | `-ReturnStmt 0x5626fbc79350 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x5626fbc79338 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc79220 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc79208 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc79098 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc79290 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc79278 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc790b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc78f60 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc792a8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc790d8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5626fbc792c0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc79130 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc79118 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc790f8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc792d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc79188 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc79170 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc79150 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc792f0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc791a8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc79308 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc791c8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc79320 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc791e8 <col:16> 'int' 0
| `-FullComment 0x5626fbd4a630 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x5626fbd4a3f0 <line:518:4>
|   | `-TextComment 0x5626fbd4a3c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4a410 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4a470 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4a440 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd4a510 <line:520:3, line:522:44>
|   | |-TextComment 0x5626fbd4a490 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5626fbd4a4b0 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4a4d0 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4a560 <line:524:3>
|   | `-TextComment 0x5626fbd4a530 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4a580 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4a5e0 <col:11, col:35>
|       `-TextComment 0x5626fbd4a5b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc79440 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc793b0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc797a8 <line:541:1, line:544:1>
| | `-ReturnStmt 0x5626fbc79770 <line:543:2, col:66>
| |   `-CallExpr 0x5626fbc79670 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc79658 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc794e8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc796c8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc79508 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc793b0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc796e0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc79528 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5626fbc796f8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc79580 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc79568 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc79548 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc79710 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc795d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc795c0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc795a0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc79728 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc795f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc79740 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc79618 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc79758 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc79638 <col:16> 'int' 0
| `-FullComment 0x5626fbd4a920 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x5626fbd4a6d0 <line:532:4>
|   | `-TextComment 0x5626fbd4a6a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4a6f0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4a750 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4a720 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd4a800 <line:534:3, line:536:44>
|   | |-TextComment 0x5626fbd4a770 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5626fbd4a790 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4a7b0 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4a850 <line:538:3>
|   | `-TextComment 0x5626fbd4a820 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4a870 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4a8d0 <col:11, col:35>
|       `-TextComment 0x5626fbd4a8a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc79860 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc797d0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc79bf8 <line:555:1, line:558:1>
| | `-ReturnStmt 0x5626fbc79bc0 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc79ba8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc79a90 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc79a78 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc79908 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc79b00 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc79ae8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc79928 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc797d0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc79b18 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc79948 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5626fbc79b30 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc799a0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc79988 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc79968 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc79b48 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc799f8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc799e0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc799c0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc79b60 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc79a18 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc79b78 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc79a38 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc79b90 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc79a58 <col:16> 'int' 1
| `-FullComment 0x5626fbd4ac00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x5626fbd4a9c0 <line:546:4>
|   | `-TextComment 0x5626fbd4a990 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4a9e0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4aa40 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4aa10 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd4aae0 <line:548:3, line:550:37>
|   | |-TextComment 0x5626fbd4aa60 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5626fbd4aa80 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4aaa0 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4ab30 <line:552:3>
|   | `-TextComment 0x5626fbd4ab00 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4ab50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4abb0 <col:11, col:35>
|       `-TextComment 0x5626fbd4ab80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc79cb0 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc79c20 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc7a038 <line:569:1, line:572:1>
| | `-ReturnStmt 0x5626fbc7a000 <line:571:2, col:65>
| |   `-CallExpr 0x5626fbc79ee0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc79ec8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc79d58 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc79f38 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc79d78 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc79c20 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc79f70 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc79d98 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5626fbc79f88 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc79df0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc79dd8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc79db8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc79fa0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc79e48 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc79e30 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc79e10 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc79fb8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc79e68 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc79fd0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc79e88 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc79fe8 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc79ea8 <col:16> 'int' 1
| `-FullComment 0x5626fbd4aee0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x5626fbd4aca0 <line:560:4>
|   | `-TextComment 0x5626fbd4ac70 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4acc0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4ad20 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4acf0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd4adc0 <line:562:3, line:564:37>
|   | |-TextComment 0x5626fbd4ad40 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5626fbd4ad60 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4ad80 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4ae10 <line:566:3>
|   | `-TextComment 0x5626fbd4ade0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4ae30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4ae90 <col:11, col:35>
|       `-TextComment 0x5626fbd4ae60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc7a0f0 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc7a060 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc7a488 <line:583:1, line:586:1>
| | `-ReturnStmt 0x5626fbc7a450 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc7a438 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc7a320 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc7a308 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc7a198 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc7a390 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc7a378 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc7a1b8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc7a060 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc7a3a8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc7a1d8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5626fbc7a3c0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc7a230 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc7a218 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc7a1f8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc7a3d8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc7a288 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc7a270 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc7a250 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc7a3f0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc7a2a8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc7a408 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc7a2c8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5626fbc7a420 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc7a2e8 <col:16> 'int' 0
| `-FullComment 0x5626fbd4b1c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x5626fbd4af80 <line:574:4>
|   | `-TextComment 0x5626fbd4af50 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4afa0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4b000 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4afd0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd4b0a0 <line:576:3, line:578:45>
|   | |-TextComment 0x5626fbd4b020 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5626fbd4b040 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4b060 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4b0f0 <line:580:3>
|   | `-TextComment 0x5626fbd4b0c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4b110 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4b170 <col:11, col:35>
|       `-TextComment 0x5626fbd4b140 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc7a540 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc7a4b0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc7a8a8 <line:597:1, line:600:1>
| | `-ReturnStmt 0x5626fbc7a870 <line:599:2, col:65>
| |   `-CallExpr 0x5626fbc7a770 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc7a758 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc7a5e8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc7a7c8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc7a608 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc7a4b0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc7a7e0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc7a628 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5626fbc7a7f8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc7a680 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc7a668 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc7a648 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc7a810 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc7a6d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc7a6c0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc7a6a0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc7a828 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc7a6f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc7a840 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc7a718 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5626fbc7a858 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc7a738 <col:16> 'int' 0
| `-FullComment 0x5626fbd4b4a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x5626fbd4b260 <line:588:4>
|   | `-TextComment 0x5626fbd4b230 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4b280 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4b2e0 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4b2b0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5626fbd4b380 <line:590:3, line:592:45>
|   | |-TextComment 0x5626fbd4b300 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5626fbd4b320 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4b340 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4b3d0 <line:594:3>
|   | `-TextComment 0x5626fbd4b3a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4b3f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4b450 <col:11, col:35>
|       `-TextComment 0x5626fbd4b420 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc7a960 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc7a8d0 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc7ab98 <line:611:1, line:614:1>
| `-FullComment 0x5626fbd4b780 <line:602:4, line:608:35>
|   |-ParagraphComment 0x5626fbd4b540 <line:602:4>
|   | `-TextComment 0x5626fbd4b510 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4b560 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd4b5c0 <col:11, col:39>
|   |   `-TextComment 0x5626fbd4b590 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5626fbd4b660 <line:604:3, line:606:44>
|   | |-TextComment 0x5626fbd4b5e0 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5626fbd4b600 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4b620 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4b6b0 <line:608:3>
|   | `-TextComment 0x5626fbd4b680 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4b6d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4b730 <col:11, col:35>
|       `-TextComment 0x5626fbd4b700 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc7ac48 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc7abb8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc7ae78 <line:625:1, line:628:1>
| `-FullComment 0x5626fbd4ba60 <line:616:4, line:622:35>
|   |-ParagraphComment 0x5626fbd4b820 <line:616:4>
|   | `-TextComment 0x5626fbd4b7f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4b840 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd4b8a0 <col:11, col:39>
|   |   `-TextComment 0x5626fbd4b870 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5626fbd4b940 <line:618:3, line:620:44>
|   | |-TextComment 0x5626fbd4b8c0 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5626fbd4b8e0 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4b900 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4b990 <line:622:3>
|   | `-TextComment 0x5626fbd4b960 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4b9b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4ba10 <col:11, col:35>
|       `-TextComment 0x5626fbd4b9e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2b0b0 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc7ae98 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2b2e8 <line:639:1, line:642:1>
| `-FullComment 0x5626fbd4bd40 <line:630:4, line:636:35>
|   |-ParagraphComment 0x5626fbd4bb00 <line:630:4>
|   | `-TextComment 0x5626fbd4bad0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4bb20 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd4bb80 <col:11, col:39>
|   |   `-TextComment 0x5626fbd4bb50 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5626fbd4bc20 <line:632:3, line:634:37>
|   | |-TextComment 0x5626fbd4bba0 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5626fbd4bbc0 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4bbe0 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4bc70 <line:636:3>
|   | `-TextComment 0x5626fbd4bc40 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4bc90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4bcf0 <col:11, col:35>
|       `-TextComment 0x5626fbd4bcc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2b398 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2b308 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2b5c8 <line:653:1, line:656:1>
| `-FullComment 0x5626fbd4c020 <line:644:4, line:650:35>
|   |-ParagraphComment 0x5626fbd4bde0 <line:644:4>
|   | `-TextComment 0x5626fbd4bdb0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4be00 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd4be60 <col:11, col:39>
|   |   `-TextComment 0x5626fbd4be30 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5626fbd4bf00 <line:646:3, line:648:37>
|   | |-TextComment 0x5626fbd4be80 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5626fbd4bea0 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4bec0 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4bf50 <line:650:3>
|   | `-TextComment 0x5626fbd4bf20 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4bf70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4bfd0 <col:11, col:35>
|       `-TextComment 0x5626fbd4bfa0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2b678 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2b5e8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2b828 <line:667:1, line:670:1>
| `-FullComment 0x5626fbd4c300 <line:658:4, line:664:35>
|   |-ParagraphComment 0x5626fbd4c0c0 <line:658:4>
|   | `-TextComment 0x5626fbd4c090 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4c0e0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd4c140 <col:11, col:39>
|   |   `-TextComment 0x5626fbd4c110 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5626fbd4c1e0 <line:660:3, line:662:45>
|   | |-TextComment 0x5626fbd4c160 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5626fbd4c180 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4c1a0 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4c230 <line:664:3>
|   | `-TextComment 0x5626fbd4c200 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4c250 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4c2b0 <col:11, col:35>
|       `-TextComment 0x5626fbd4c280 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2b8d8 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2b848 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2ba88 <line:681:1, line:684:1>
| `-FullComment 0x5626fbd4c5e0 <line:672:4, line:678:35>
|   |-ParagraphComment 0x5626fbd4c3a0 <line:672:4>
|   | `-TextComment 0x5626fbd4c370 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4c3c0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd4c420 <col:11, col:39>
|   |   `-TextComment 0x5626fbd4c3f0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5626fbd4c4c0 <line:674:3, line:676:45>
|   | |-TextComment 0x5626fbd4c440 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5626fbd4c460 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4c480 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4c510 <line:678:3>
|   | `-TextComment 0x5626fbd4c4e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4c530 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4c590 <col:11, col:35>
|       `-TextComment 0x5626fbd4c560 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2bb38 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2baa8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2bed8 <line:695:1, line:698:1>
| | `-ReturnStmt 0x5626fbc2be98 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x5626fbc2be80 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc2bd68 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc2bd50 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc2bbe0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc2bdd8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc2bdc0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc2bc00 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc2baa8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc2bdf0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc2bc58 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc2bc40 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc2bc20 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc2be08 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc2bc78 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5626fbc2be20 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc2bcd0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc2bcb8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc2bc98 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc2be38 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2bcf0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc2be50 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2bd10 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc2be68 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc2bd30 <col:16> 'int' 0
| `-FullComment 0x5626fbd4c8d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x5626fbd4c680 <line:686:4>
|   | `-TextComment 0x5626fbd4c650 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4c6a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4c700 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4c6d0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5626fbd4c7a0 <line:688:3, line:690:44>
|   | |-TextComment 0x5626fbd4c720 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5626fbd4c740 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4c760 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4c800 <line:692:3>
|   | `-TextComment 0x5626fbd4c7c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4c820 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4c880 <col:11, col:35>
|       `-TextComment 0x5626fbd4c850 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2bf90 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2bf00 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2c348 <line:709:1, line:712:1>
| | `-ReturnStmt 0x5626fbc2c310 <line:711:2, col:66>
| |   `-CallExpr 0x5626fbc2c210 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2c1f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc2c038 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc2c268 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc2c058 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc2bf00 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2c280 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc2c100 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc2c098 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc2c078 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc2c298 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc2c120 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5626fbc2c2b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc2c178 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc2c160 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc2c140 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2c2c8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2c198 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2c2e0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2c1b8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc2c2f8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc2c1d8 <col:16> 'int' 0
| `-FullComment 0x5626fbd4cbb0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x5626fbd4c970 <line:700:4>
|   | `-TextComment 0x5626fbd4c940 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4c990 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4c9f0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4c9c0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5626fbd4ca90 <line:702:3, line:704:44>
|   | |-TextComment 0x5626fbd4ca10 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5626fbd4ca30 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4ca50 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4cae0 <line:706:3>
|   | `-TextComment 0x5626fbd4cab0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4cb00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4cb60 <col:11, col:35>
|       `-TextComment 0x5626fbd4cb30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2c400 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2c370 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2c798 <line:723:1, line:726:1>
| | `-ReturnStmt 0x5626fbc2c760 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc2c748 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc2c630 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc2c618 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc2c4a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc2c6a0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc2c688 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc2c4c8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc2c370 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc2c6b8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc2c520 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc2c508 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc2c4e8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc2c6d0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc2c540 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5626fbc2c6e8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc2c598 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc2c580 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc2c560 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc2c700 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2c5b8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc2c718 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2c5d8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc2c730 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc2c5f8 <col:16> 'int' 1
| `-FullComment 0x5626fbd4ce90 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x5626fbd4cc50 <line:714:4>
|   | `-TextComment 0x5626fbd4cc20 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4cc70 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4ccd0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4cca0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5626fbd4cd70 <line:716:3, line:718:37>
|   | |-TextComment 0x5626fbd4ccf0 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5626fbd4cd10 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4cd30 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4cdc0 <line:720:3>
|   | `-TextComment 0x5626fbd4cd90 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4cde0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4ce40 <col:11, col:35>
|       `-TextComment 0x5626fbd4ce10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2c850 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2c7c0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2cbb8 <line:737:1, line:740:1>
| | `-ReturnStmt 0x5626fbc2cb80 <line:739:2, col:65>
| |   `-CallExpr 0x5626fbc2ca80 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2ca68 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc2c8f8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc2cad8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc2c918 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc2c7c0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2caf0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc2c970 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc2c958 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc2c938 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc2cb08 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc2c990 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5626fbc2cb20 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc2c9e8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc2c9d0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc2c9b0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2cb38 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2ca08 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2cb50 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2ca28 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc2cb68 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc2ca48 <col:16> 'int' 1
| `-FullComment 0x5626fbd4d170 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x5626fbd4cf30 <line:728:4>
|   | `-TextComment 0x5626fbd4cf00 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4cf50 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4cfb0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4cf80 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5626fbd4d050 <line:730:3, line:732:37>
|   | |-TextComment 0x5626fbd4cfd0 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5626fbd4cff0 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4d010 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4d0a0 <line:734:3>
|   | `-TextComment 0x5626fbd4d070 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4d0c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4d120 <col:11, col:35>
|       `-TextComment 0x5626fbd4d0f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2cc70 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2cbe0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2d008 <line:751:1, line:754:1>
| | `-ReturnStmt 0x5626fbc2cfd0 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc2cfb8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc2cea0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc2ce88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc2cd18 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc2cf10 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc2cef8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc2cd38 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc2cbe0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc2cf28 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc2cd90 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc2cd78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc2cd58 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc2cf40 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc2cdb0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5626fbc2cf58 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc2ce08 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc2cdf0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc2cdd0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc2cf70 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2ce28 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc2cf88 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2ce48 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5626fbc2cfa0 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc2ce68 <col:16> 'int' 0
| `-FullComment 0x5626fbd4d450 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x5626fbd4d210 <line:742:4>
|   | `-TextComment 0x5626fbd4d1e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4d230 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4d290 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4d260 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5626fbd4d330 <line:744:3, line:746:45>
|   | |-TextComment 0x5626fbd4d2b0 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5626fbd4d2d0 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4d2f0 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4d380 <line:748:3>
|   | `-TextComment 0x5626fbd4d350 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4d3a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4d400 <col:11, col:35>
|       `-TextComment 0x5626fbd4d3d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2d110 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2d030 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2d478 <line:765:1, line:768:1>
| | `-ReturnStmt 0x5626fbc2d440 <line:767:2, col:65>
| |   `-CallExpr 0x5626fbc2d340 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2d328 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc2d1b8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc2d398 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc2d1d8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc2d030 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2d3b0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc2d230 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc2d218 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc2d1f8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc2d3c8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc2d250 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5626fbc2d3e0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc2d2a8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc2d290 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc2d270 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2d3f8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2d2c8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2d410 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2d2e8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5626fbc2d428 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc2d308 <col:16> 'int' 0
| `-FullComment 0x5626fbd4d730 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x5626fbd4d4f0 <line:756:4>
|   | `-TextComment 0x5626fbd4d4c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4d510 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4d570 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4d540 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5626fbd4d610 <line:758:3, line:760:45>
|   | |-TextComment 0x5626fbd4d590 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5626fbd4d5b0 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4d5d0 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4d660 <line:762:3>
|   | `-TextComment 0x5626fbd4d630 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4d680 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4d6e0 <col:11, col:35>
|       `-TextComment 0x5626fbd4d6b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2d530 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2d4a0 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2d8c8 <line:779:1, line:782:1>
| | `-ReturnStmt 0x5626fbc2d890 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x5626fbc2d878 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc2d760 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc2d748 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc2d5d8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc2d7d0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc2d7b8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc2d5f8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc2d4a0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc2d7e8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc2d650 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc2d638 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc2d618 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc2d800 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc2d670 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5626fbc2d818 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc2d6c8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc2d6b0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc2d690 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc2d830 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2d6e8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc2d848 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2d708 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc2d860 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc2d728 <col:16> 'int' 0
| `-FullComment 0x5626fbd4da10 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x5626fbd4d7d0 <line:770:4>
|   | `-TextComment 0x5626fbd4d7a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4d7f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4d850 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4d820 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5626fbd4d8f0 <line:772:3, line:774:44>
|   | |-TextComment 0x5626fbd4d870 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5626fbd4d890 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4d8b0 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4d940 <line:776:3>
|   | `-TextComment 0x5626fbd4d910 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4d960 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4d9c0 <col:11, col:35>
|       `-TextComment 0x5626fbd4d990 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2d980 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2d8f0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2dce8 <line:793:1, line:796:1>
| | `-ReturnStmt 0x5626fbc2dcb0 <line:795:2, col:66>
| |   `-CallExpr 0x5626fbc2dbb0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2db98 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc2da28 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc2dc08 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc2da48 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc2d8f0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2dc20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc2daa0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc2da88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc2da68 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc2dc38 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc2dac0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5626fbc2dc50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc2db18 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc2db00 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc2dae0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2dc68 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2db38 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2dc80 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2db58 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc2dc98 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc2db78 <col:16> 'int' 0
| `-FullComment 0x5626fbd4dcf0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x5626fbd4dab0 <line:784:4>
|   | `-TextComment 0x5626fbd4da80 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4dad0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4db30 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4db00 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5626fbd4dbd0 <line:786:3, line:788:44>
|   | |-TextComment 0x5626fbd4db50 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5626fbd4db70 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4db90 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4dc20 <line:790:3>
|   | `-TextComment 0x5626fbd4dbf0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4dc40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4dca0 <col:11, col:35>
|       `-TextComment 0x5626fbd4dc70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2dda0 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2dd10 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2e148 <line:807:1, line:810:1>
| | `-ReturnStmt 0x5626fbc2e100 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc2e0e8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc2dfd0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc2dfb8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc2de48 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc2e040 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc2e028 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc2de68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc2dd10 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc2e058 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc2dec0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc2dea8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc2de88 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc2e070 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc2dee0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5626fbc2e088 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc2df38 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc2df20 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc2df00 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc2e0a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2df58 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc2e0b8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2df78 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc2e0d0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc2df98 <col:16> 'int' 1
| `-FullComment 0x5626fbd4dfd0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x5626fbd4dd90 <line:798:4>
|   | `-TextComment 0x5626fbd4dd60 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4ddb0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4de10 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4dde0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5626fbd4deb0 <line:800:3, line:802:37>
|   | |-TextComment 0x5626fbd4de30 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5626fbd4de50 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4de70 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4df00 <line:804:3>
|   | `-TextComment 0x5626fbd4ded0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4df20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4df80 <col:11, col:35>
|       `-TextComment 0x5626fbd4df50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2e200 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2e170 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2e568 <line:821:1, line:824:1>
| | `-ReturnStmt 0x5626fbc2e530 <line:823:2, col:65>
| |   `-CallExpr 0x5626fbc2e430 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2e418 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc2e2a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc2e488 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc2e2c8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc2e170 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2e4a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc2e320 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc2e308 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc2e2e8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc2e4b8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc2e340 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5626fbc2e4d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc2e398 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc2e380 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc2e360 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2e4e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2e3b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2e500 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2e3d8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc2e518 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc2e3f8 <col:16> 'int' 1
| `-FullComment 0x5626fbd4e2b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x5626fbd4e070 <line:812:4>
|   | `-TextComment 0x5626fbd4e040 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4e090 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4e0f0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4e0c0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5626fbd4e190 <line:814:3, line:816:37>
|   | |-TextComment 0x5626fbd4e110 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5626fbd4e130 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4e150 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4e1e0 <line:818:3>
|   | `-TextComment 0x5626fbd4e1b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4e200 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4e260 <col:11, col:35>
|       `-TextComment 0x5626fbd4e230 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2e620 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2e590 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2e9b8 <line:835:1, line:838:1>
| | `-ReturnStmt 0x5626fbc2e980 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc2e968 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc2e850 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc2e838 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc2e6c8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc2e8c0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc2e8a8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc2e6e8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc2e590 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc2e8d8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc2e740 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc2e728 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc2e708 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc2e8f0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc2e760 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5626fbc2e908 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc2e7b8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc2e7a0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc2e780 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc2e920 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2e7d8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc2e938 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2e7f8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5626fbc2e950 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc2e818 <col:16> 'int' 0
| `-FullComment 0x5626fbd4e590 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x5626fbd4e350 <line:826:4>
|   | `-TextComment 0x5626fbd4e320 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4e370 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4e3d0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4e3a0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5626fbd4e470 <line:828:3, line:830:45>
|   | |-TextComment 0x5626fbd4e3f0 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5626fbd4e410 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4e430 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4e4c0 <line:832:3>
|   | `-TextComment 0x5626fbd4e490 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4e4e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4e540 <col:11, col:35>
|       `-TextComment 0x5626fbd4e510 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2ea70 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2e9e0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2edd8 <line:849:1, line:852:1>
| | `-ReturnStmt 0x5626fbc2eda0 <line:851:2, col:65>
| |   `-CallExpr 0x5626fbc2eca0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2ec88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc2eb18 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc2ecf8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc2eb38 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc2e9e0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2ed10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc2eb90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc2eb78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc2eb58 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc2ed28 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc2ebb0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5626fbc2ed40 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc2ec08 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc2ebf0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc2ebd0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2ed58 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2ec28 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2ed70 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2ec48 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5626fbc2ed88 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc2ec68 <col:16> 'int' 0
| `-FullComment 0x5626fbd4e880 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x5626fbd4e630 <line:840:4>
|   | `-TextComment 0x5626fbd4e600 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4e650 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd4e6b0 <col:11, col:50>
|   |   `-TextComment 0x5626fbd4e680 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5626fbd4e750 <line:842:3, line:844:45>
|   | |-TextComment 0x5626fbd4e6d0 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5626fbd4e6f0 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4e710 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4e7a0 <line:846:3>
|   | `-TextComment 0x5626fbd4e770 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4e7c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4e830 <col:11, col:35>
|       `-TextComment 0x5626fbd4e800 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2ee90 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2ee00 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2f248 <line:863:1, line:866:1>
| | `-ReturnStmt 0x5626fbc2f208 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x5626fbc2f1f0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc2f0c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc2f0a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc2ef38 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc2f148 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc2f130 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc2ef58 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc2ee00 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc2f160 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc2efb0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc2ef98 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc2ef78 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc2f178 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc2efd0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5626fbc2f190 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc2f028 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc2f010 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc2eff0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc2f1a8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2f048 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc2f1c0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2f068 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc2f1d8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc2f088 <col:16> 'int' 0
| `-FullComment 0x5626fbd4eb60 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x5626fbd4e920 <line:854:4>
|   | `-TextComment 0x5626fbd4e8f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4e940 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4e9a0 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4e970 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5626fbd4ea40 <line:856:3, line:858:44>
|   | |-TextComment 0x5626fbd4e9c0 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5626fbd4e9e0 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4ea00 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4ea90 <line:860:3>
|   | `-TextComment 0x5626fbd4ea60 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4eab0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4eb10 <col:11, col:35>
|       `-TextComment 0x5626fbd4eae0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2f300 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2f270 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2f668 <line:877:1, line:880:1>
| | `-ReturnStmt 0x5626fbc2f630 <line:879:2, col:66>
| |   `-CallExpr 0x5626fbc2f530 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2f518 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc2f3a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc2f588 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc2f3c8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc2f270 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2f5a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc2f420 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc2f408 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc2f3e8 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc2f5b8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc2f440 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5626fbc2f5d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc2f498 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc2f480 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc2f460 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2f5e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2f4b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2f600 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2f4d8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc2f618 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc2f4f8 <col:16> 'int' 0
| `-FullComment 0x5626fbd4ee40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x5626fbd4ec00 <line:868:4>
|   | `-TextComment 0x5626fbd4ebd0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4ec20 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4ec80 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4ec50 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5626fbd4ed20 <line:870:3, line:872:44>
|   | |-TextComment 0x5626fbd4eca0 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5626fbd4ecc0 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4ece0 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4ed70 <line:874:3>
|   | `-TextComment 0x5626fbd4ed40 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4ed90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4edf0 <col:11, col:35>
|       `-TextComment 0x5626fbd4edc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2f720 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2f690 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc2fab8 <line:891:1, line:894:1>
| | `-ReturnStmt 0x5626fbc2fa80 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc2fa68 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc2f950 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc2f938 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc2f7c8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc2f9c0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc2f9a8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc2f7e8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc2f690 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc2f9d8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc2f840 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc2f828 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc2f808 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc2f9f0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc2f860 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5626fbc2fa08 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc2f8b8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc2f8a0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc2f880 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc2fa20 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2f8d8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc2fa38 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc2f8f8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5626fbc2fa50 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc2f918 <col:16> 'int' 1
| `-FullComment 0x5626fbd4f120 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x5626fbd4eee0 <line:882:4>
|   | `-TextComment 0x5626fbd4eeb0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4ef00 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4ef60 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4ef30 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5626fbd4f000 <line:884:3, line:886:37>
|   | |-TextComment 0x5626fbd4ef80 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5626fbd4efa0 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4efc0 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4f050 <line:888:3>
|   | `-TextComment 0x5626fbd4f020 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4f070 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4f0d0 <col:11, col:35>
|       `-TextComment 0x5626fbd4f0a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2fb70 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc2fae0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc2fed8 <line:905:1, line:908:1>
| | `-ReturnStmt 0x5626fbc2fea0 <line:907:2, col:65>
| |   `-CallExpr 0x5626fbc2fda0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2fd88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc2fc18 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc2fdf8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc2fc38 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc2fae0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc2fe10 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc2fc90 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc2fc78 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc2fc58 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc2fe28 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc2fcb0 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5626fbc2fe40 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc2fd08 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc2fcf0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc2fcd0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2fe58 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2fd28 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc2fe70 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc2fd48 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5626fbc2fe88 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc2fd68 <col:16> 'int' 1
| `-FullComment 0x5626fbd4f400 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x5626fbd4f1c0 <line:896:4>
|   | `-TextComment 0x5626fbd4f190 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4f1e0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4f240 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4f210 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5626fbd4f2e0 <line:898:3, line:900:37>
|   | |-TextComment 0x5626fbd4f260 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5626fbd4f280 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4f2a0 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd4f330 <line:902:3>
|   | `-TextComment 0x5626fbd4f300 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4f350 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4f3b0 <col:11, col:35>
|       `-TextComment 0x5626fbd4f380 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc2ff90 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc2ff00 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc30388 <line:919:1, line:922:1>
| | `-ReturnStmt 0x5626fbc30348 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x5626fbc30330 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbc30218 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbc30200 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbc30038 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5626fbc30288 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5626fbc30270 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626fbc30058 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc2ff00 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5626fbc302a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5626fbc300b0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5626fbc30098 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5626fbc30078 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5626fbc302b8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5626fbc300d0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5626fbc302d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5626fbc30180 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5626fbc30110 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5626fbc300f0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5626fbc302e8 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc301a0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5626fbc30300 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5626fbc301c0 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5626fbc30318 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5626fbc301e0 <col:16> 'int' 0
| `-FullComment 0x5626fbd4f6e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x5626fbd4f4a0 <line:910:4>
|   | `-TextComment 0x5626fbd4f470 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4f4c0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4f520 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4f4f0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5626fbd4f5c0 <line:912:3, line:914:45>
|   | |-TextComment 0x5626fbd4f540 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5626fbd4f560 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4f580 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4f610 <line:916:3>
|   | `-TextComment 0x5626fbd4f5e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4f630 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4f690 <col:11, col:35>
|       `-TextComment 0x5626fbd4f660 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc30440 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc303b0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc307a8 <line:933:1, line:936:1>
| | `-ReturnStmt 0x5626fbc30770 <line:935:2, col:65>
| |   `-CallExpr 0x5626fbc30670 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc30658 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc304e8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5626fbc698b0 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5626fbc306c8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc30508 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5626fbc303b0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5626fbc306e0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5626fbc30560 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5626fbc30548 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5626fbc30528 <col:18> 'int (void)' Function 0x5626fbc69378 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5626fbc306f8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5626fbc30580 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5626fbc30710 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5626fbc305d8 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5626fbc305c0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5626fbc305a0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc30728 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc305f8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5626fbc30740 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5626fbc30618 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5626fbc30758 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5626fbc30638 <col:16> 'int' 0
| `-FullComment 0x5626fbd4f9c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x5626fbd4f780 <line:924:4>
|   | `-TextComment 0x5626fbd4f750 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4f7a0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd4f800 <col:11, col:49>
|   |   `-TextComment 0x5626fbd4f7d0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5626fbd4f8a0 <line:926:3, line:928:45>
|   | |-TextComment 0x5626fbd4f820 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5626fbd4f840 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4f860 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd4f8f0 <line:930:3>
|   | `-TextComment 0x5626fbd4f8c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4f910 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4f970 <col:11, col:35>
|       `-TextComment 0x5626fbd4f940 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc30860 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc307d0 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc30a88 <line:947:1, line:950:1>
| `-FullComment 0x5626fbd4fca0 <line:938:4, line:944:35>
|   |-ParagraphComment 0x5626fbd4fa60 <line:938:4>
|   | `-TextComment 0x5626fbd4fa30 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4fa80 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd4fae0 <col:11, col:43>
|   |   `-TextComment 0x5626fbd4fab0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5626fbd4fb80 <line:940:3, line:942:44>
|   | |-TextComment 0x5626fbd4fb00 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5626fbd4fb20 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd4fb40 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4fbd0 <line:944:3>
|   | `-TextComment 0x5626fbd4fba0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4fbf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4fc50 <col:11, col:35>
|       `-TextComment 0x5626fbd4fc20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc30b38 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc30aa8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc30d58 <line:961:1, line:964:1>
| `-FullComment 0x5626fbd4ff80 <line:952:4, line:958:35>
|   |-ParagraphComment 0x5626fbd4fd40 <line:952:4>
|   | `-TextComment 0x5626fbd4fd10 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd4fd60 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd4fdc0 <col:11, col:43>
|   |   `-TextComment 0x5626fbd4fd90 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5626fbd4fe60 <line:954:3, line:956:44>
|   | |-TextComment 0x5626fbd4fde0 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5626fbd4fe00 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd4fe20 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd4feb0 <line:958:3>
|   | `-TextComment 0x5626fbd4fe80 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd4fed0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd4ff30 <col:11, col:35>
|       `-TextComment 0x5626fbd4ff00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc30e08 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc30d78 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc31028 <line:975:1, line:978:1>
| `-FullComment 0x5626fbd50260 <line:966:4, line:972:35>
|   |-ParagraphComment 0x5626fbd50020 <line:966:4>
|   | `-TextComment 0x5626fbd4fff0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd50040 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd500a0 <col:11, col:43>
|   |   `-TextComment 0x5626fbd50070 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5626fbd50140 <line:968:3, line:970:37>
|   | |-TextComment 0x5626fbd500c0 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5626fbd500e0 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd50100 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd50190 <line:972:3>
|   | `-TextComment 0x5626fbd50160 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd501b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd50210 <col:11, col:35>
|       `-TextComment 0x5626fbd501e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc310d8 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc31048 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc31448 <line:989:1, line:992:1>
| `-FullComment 0x5626fbd50540 <line:980:4, line:986:35>
|   |-ParagraphComment 0x5626fbd50300 <line:980:4>
|   | `-TextComment 0x5626fbd502d0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd50320 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd50380 <col:11, col:43>
|   |   `-TextComment 0x5626fbd50350 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5626fbd50420 <line:982:3, line:984:37>
|   | |-TextComment 0x5626fbd503a0 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5626fbd503c0 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd503e0 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd50470 <line:986:3>
|   | `-TextComment 0x5626fbd50440 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd50490 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd504f0 <col:11, col:35>
|       `-TextComment 0x5626fbd504c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc314f8 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc31468 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc31718 <line:1003:1, line:1006:1>
| `-FullComment 0x5626fbd50840 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x5626fbd505e0 <line:994:4>
|   | `-TextComment 0x5626fbd505b0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd50600 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd50660 <col:11, col:43>
|   |   `-TextComment 0x5626fbd50630 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5626fbd50700 <line:996:3, line:998:45>
|   | |-TextComment 0x5626fbd50680 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5626fbd506a0 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd506c0 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd50750 <line:1000:3>
|   | `-TextComment 0x5626fbd50720 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd50770 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd507d0 <col:11, col:35>
|       `-TextComment 0x5626fbd507a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc317c8 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc31738 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc319e8 <line:1017:1, line:1020:1>
| `-FullComment 0x5626fbd50b20 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x5626fbd508e0 <line:1008:4>
|   | `-TextComment 0x5626fbd508b0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd50900 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd50960 <col:11, col:43>
|   |   `-TextComment 0x5626fbd50930 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5626fbd50a00 <line:1010:3, line:1012:45>
|   | |-TextComment 0x5626fbd50980 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5626fbd509a0 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd509c0 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd50a50 <line:1014:3>
|   | `-TextComment 0x5626fbd50a20 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd50a70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd50ad0 <col:11, col:35>
|       `-TextComment 0x5626fbd50aa0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc31a98 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc31a08 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc31c48 <line:1031:1, line:1034:1>
| `-FullComment 0x5626fbd50e00 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x5626fbd50bc0 <line:1022:4>
|   | `-TextComment 0x5626fbd50b90 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd50be0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd50c40 <col:11, col:40>
|   |   `-TextComment 0x5626fbd50c10 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5626fbd50ce0 <line:1024:3, line:1026:44>
|   | |-TextComment 0x5626fbd50c60 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5626fbd50c80 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd50ca0 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd50d30 <line:1028:3>
|   | `-TextComment 0x5626fbd50d00 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd50d50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd50db0 <col:11, col:35>
|       `-TextComment 0x5626fbd50d80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc31cf8 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc31c68 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc31ea8 <line:1045:1, line:1048:1>
| `-FullComment 0x5626fbd510e0 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x5626fbd50ea0 <line:1036:4>
|   | `-TextComment 0x5626fbd50e70 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd50ec0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd50f20 <col:11, col:40>
|   |   `-TextComment 0x5626fbd50ef0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5626fbd50fc0 <line:1038:3, line:1040:44>
|   | |-TextComment 0x5626fbd50f40 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5626fbd50f60 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd50f80 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd51010 <line:1042:3>
|   | `-TextComment 0x5626fbd50fe0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd51030 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd51090 <col:11, col:35>
|       `-TextComment 0x5626fbd51060 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc31f58 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc31ec8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc32108 <line:1059:1, line:1062:1>
| `-FullComment 0x5626fbd513c0 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x5626fbd51180 <line:1050:4>
|   | `-TextComment 0x5626fbd51150 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd511a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd51200 <col:11, col:40>
|   |   `-TextComment 0x5626fbd511d0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5626fbd512a0 <line:1052:3, line:1054:37>
|   | |-TextComment 0x5626fbd51220 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5626fbd51240 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd51260 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd512f0 <line:1056:3>
|   | `-TextComment 0x5626fbd512c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd51310 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd51370 <col:11, col:35>
|       `-TextComment 0x5626fbd51340 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc321b8 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc32128 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc33518 <line:1073:1, line:1076:1>
| `-FullComment 0x5626fbd516a0 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x5626fbd51460 <line:1064:4>
|   | `-TextComment 0x5626fbd51430 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd51480 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd514e0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd514b0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5626fbd51580 <line:1066:3, line:1068:37>
|   | |-TextComment 0x5626fbd51500 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5626fbd51520 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd51540 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd515d0 <line:1070:3>
|   | `-TextComment 0x5626fbd515a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd515f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd51650 <col:11, col:35>
|       `-TextComment 0x5626fbd51620 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc335c8 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc33538 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc33778 <line:1087:1, line:1090:1>
| `-FullComment 0x5626fbd51980 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x5626fbd51740 <line:1078:4>
|   | `-TextComment 0x5626fbd51710 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd51760 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd517c0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd51790 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5626fbd51860 <line:1080:3, line:1082:45>
|   | |-TextComment 0x5626fbd517e0 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5626fbd51800 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd51820 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd518b0 <line:1084:3>
|   | `-TextComment 0x5626fbd51880 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd518d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd51930 <col:11, col:35>
|       `-TextComment 0x5626fbd51900 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc33828 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc33798 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc339d8 <line:1101:1, line:1104:1>
| `-FullComment 0x5626fbd51c60 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x5626fbd51a20 <line:1092:4>
|   | `-TextComment 0x5626fbd519f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd51a40 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd51aa0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd51a70 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5626fbd51b40 <line:1094:3, line:1096:45>
|   | |-TextComment 0x5626fbd51ac0 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5626fbd51ae0 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd51b00 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd51b90 <line:1098:3>
|   | `-TextComment 0x5626fbd51b60 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd51bb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd51c10 <col:11, col:35>
|       `-TextComment 0x5626fbd51be0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc33a88 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc339f8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc33c38 <line:1115:1, line:1118:1>
| `-FullComment 0x5626fbd51f40 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x5626fbd51d00 <line:1106:4>
|   | `-TextComment 0x5626fbd51cd0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd51d20 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd51d80 <col:11, col:40>
|   |   `-TextComment 0x5626fbd51d50 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5626fbd51e20 <line:1108:3, line:1110:44>
|   | |-TextComment 0x5626fbd51da0 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5626fbd51dc0 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd51de0 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd51e70 <line:1112:3>
|   | `-TextComment 0x5626fbd51e40 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd51e90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd51ef0 <col:11, col:35>
|       `-TextComment 0x5626fbd51ec0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc33ce8 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc33c58 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc33e98 <line:1129:1, line:1132:1>
| `-FullComment 0x5626fbd52220 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x5626fbd51fe0 <line:1120:4>
|   | `-TextComment 0x5626fbd51fb0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd52000 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd52060 <col:11, col:40>
|   |   `-TextComment 0x5626fbd52030 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5626fbd52100 <line:1122:3, line:1124:44>
|   | |-TextComment 0x5626fbd52080 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5626fbd520a0 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd520c0 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd52150 <line:1126:3>
|   | `-TextComment 0x5626fbd52120 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd52170 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd521d0 <col:11, col:35>
|       `-TextComment 0x5626fbd521a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc33f48 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc33eb8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc340f8 <line:1143:1, line:1146:1>
| `-FullComment 0x5626fbd52500 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x5626fbd522c0 <line:1134:4>
|   | `-TextComment 0x5626fbd52290 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd522e0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd52340 <col:11, col:40>
|   |   `-TextComment 0x5626fbd52310 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5626fbd523e0 <line:1136:3, line:1138:37>
|   | |-TextComment 0x5626fbd52360 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5626fbd52380 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd523a0 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd52430 <line:1140:3>
|   | `-TextComment 0x5626fbd52400 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd52450 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd524b0 <col:11, col:35>
|       `-TextComment 0x5626fbd52480 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc341a8 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc34118 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc34358 <line:1157:1, line:1160:1>
| `-FullComment 0x5626fbd527e0 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x5626fbd525a0 <line:1148:4>
|   | `-TextComment 0x5626fbd52570 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd525c0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd52620 <col:11, col:40>
|   |   `-TextComment 0x5626fbd525f0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5626fbd526c0 <line:1150:3, line:1152:37>
|   | |-TextComment 0x5626fbd52640 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5626fbd52660 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd52680 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd52710 <line:1154:3>
|   | `-TextComment 0x5626fbd526e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd52730 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd52790 <col:11, col:35>
|       `-TextComment 0x5626fbd52760 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc8ef60 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc34378 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc8f118 <line:1171:1, line:1174:1>
| `-FullComment 0x5626fbd52ad0 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x5626fbd52890 <line:1162:4>
|   | `-TextComment 0x5626fbd52860 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd528b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd52910 <col:11, col:40>
|   |   `-TextComment 0x5626fbd528e0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5626fbd529b0 <line:1164:3, line:1166:45>
|   | |-TextComment 0x5626fbd52930 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5626fbd52950 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd52970 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd52a00 <line:1168:3>
|   | `-TextComment 0x5626fbd529d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd52a20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd52a80 <col:11, col:35>
|       `-TextComment 0x5626fbd52a50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc8f1c8 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc8f138 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc8f378 <line:1185:1, line:1188:1>
| `-FullComment 0x5626fbd52db0 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x5626fbd52b70 <line:1176:4>
|   | `-TextComment 0x5626fbd52b40 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd52b90 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd52bf0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd52bc0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5626fbd52c90 <line:1178:3, line:1180:45>
|   | |-TextComment 0x5626fbd52c10 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5626fbd52c30 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd52c50 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd52ce0 <line:1182:3>
|   | `-TextComment 0x5626fbd52cb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd52d00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd52d60 <col:11, col:35>
|       `-TextComment 0x5626fbd52d30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc8f428 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc8f398 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc8f5d8 <line:1199:1, line:1202:1>
| `-FullComment 0x5626fbd53090 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x5626fbd52e50 <line:1190:4>
|   | `-TextComment 0x5626fbd52e20 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd52e70 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd52ed0 <col:11, col:39>
|   |   `-TextComment 0x5626fbd52ea0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5626fbd52f70 <line:1192:3, line:1194:44>
|   | |-TextComment 0x5626fbd52ef0 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5626fbd52f10 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd52f30 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd52fc0 <line:1196:3>
|   | `-TextComment 0x5626fbd52f90 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd52fe0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd53040 <col:11, col:35>
|       `-TextComment 0x5626fbd53010 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc8f688 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc8f5f8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc8f838 <line:1213:1, line:1216:1>
| `-FullComment 0x5626fbd53370 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x5626fbd53130 <line:1204:4>
|   | `-TextComment 0x5626fbd53100 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd53150 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd531b0 <col:11, col:39>
|   |   `-TextComment 0x5626fbd53180 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5626fbd53250 <line:1206:3, line:1208:44>
|   | |-TextComment 0x5626fbd531d0 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5626fbd531f0 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd53210 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd532a0 <line:1210:3>
|   | `-TextComment 0x5626fbd53270 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd532c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd53320 <col:11, col:35>
|       `-TextComment 0x5626fbd532f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc8f8e8 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc8f858 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc8fa98 <line:1227:1, line:1230:1>
| `-FullComment 0x5626fbd53650 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x5626fbd53410 <line:1218:4>
|   | `-TextComment 0x5626fbd533e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd53430 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd53490 <col:11, col:39>
|   |   `-TextComment 0x5626fbd53460 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5626fbd53530 <line:1220:3, line:1222:37>
|   | |-TextComment 0x5626fbd534b0 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5626fbd534d0 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd534f0 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd53580 <line:1224:3>
|   | `-TextComment 0x5626fbd53550 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd535a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd53600 <col:11, col:35>
|       `-TextComment 0x5626fbd535d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc8fb48 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc8fab8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc8fcf8 <line:1241:1, line:1244:1>
| `-FullComment 0x5626fbd53930 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x5626fbd536f0 <line:1232:4>
|   | `-TextComment 0x5626fbd536c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd53710 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd53770 <col:11, col:39>
|   |   `-TextComment 0x5626fbd53740 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5626fbd53810 <line:1234:3, line:1236:37>
|   | |-TextComment 0x5626fbd53790 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5626fbd537b0 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd537d0 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd53860 <line:1238:3>
|   | `-TextComment 0x5626fbd53830 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd53880 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd538e0 <col:11, col:35>
|       `-TextComment 0x5626fbd538b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc8fda8 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc8fd18 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc8ff70 <line:1255:1, line:1258:1>
| `-FullComment 0x5626fbd53c10 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x5626fbd539d0 <line:1246:4>
|   | `-TextComment 0x5626fbd539a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd539f0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd53a50 <col:11, col:39>
|   |   `-TextComment 0x5626fbd53a20 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5626fbd53af0 <line:1248:3, line:1250:45>
|   | |-TextComment 0x5626fbd53a70 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5626fbd53a90 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd53ab0 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd53b40 <line:1252:3>
|   | `-TextComment 0x5626fbd53b10 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd53b60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd53bc0 <col:11, col:35>
|       `-TextComment 0x5626fbd53b90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc90020 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc8ff90 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc901d8 <line:1269:1, line:1272:1>
| `-FullComment 0x5626fbd53ef0 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x5626fbd53cb0 <line:1260:4>
|   | `-TextComment 0x5626fbd53c80 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd53cd0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd53d30 <col:11, col:39>
|   |   `-TextComment 0x5626fbd53d00 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5626fbd53dd0 <line:1262:3, line:1264:45>
|   | |-TextComment 0x5626fbd53d50 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5626fbd53d70 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd53d90 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd53e20 <line:1266:3>
|   | `-TextComment 0x5626fbd53df0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd53e40 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd53ea0 <col:11, col:35>
|       `-TextComment 0x5626fbd53e70 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc90288 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc901f8 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc904a8 <line:1283:1, line:1286:1>
| `-FullComment 0x5626fbd541d0 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x5626fbd53f90 <line:1274:4>
|   | `-TextComment 0x5626fbd53f60 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd53fb0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd54010 <col:11, col:43>
|   |   `-TextComment 0x5626fbd53fe0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5626fbd540b0 <line:1276:3, line:1278:44>
|   | |-TextComment 0x5626fbd54030 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5626fbd54050 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd54070 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd54100 <line:1280:3>
|   | `-TextComment 0x5626fbd540d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd54120 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd54180 <col:11, col:35>
|       `-TextComment 0x5626fbd54150 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc90558 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc904c8 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc90778 <line:1297:1, line:1300:1>
| `-FullComment 0x5626fbd544b0 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x5626fbd54270 <line:1288:4>
|   | `-TextComment 0x5626fbd54240 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd54290 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd542f0 <col:11, col:43>
|   |   `-TextComment 0x5626fbd542c0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5626fbd54390 <line:1290:3, line:1292:44>
|   | |-TextComment 0x5626fbd54310 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5626fbd54330 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd54350 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5626fbd543e0 <line:1294:3>
|   | `-TextComment 0x5626fbd543b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd54400 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd54460 <col:11, col:35>
|       `-TextComment 0x5626fbd54430 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc90828 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc90798 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc90a48 <line:1311:1, line:1314:1>
| `-FullComment 0x5626fbd54790 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x5626fbd54550 <line:1302:4>
|   | `-TextComment 0x5626fbd54520 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd54570 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd545d0 <col:11, col:43>
|   |   `-TextComment 0x5626fbd545a0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5626fbd54670 <line:1304:3, line:1306:37>
|   | |-TextComment 0x5626fbd545f0 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5626fbd54610 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd54630 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd546c0 <line:1308:3>
|   | `-TextComment 0x5626fbd54690 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd546e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd54740 <col:11, col:35>
|       `-TextComment 0x5626fbd54710 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc90af8 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc90a68 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc90d18 <line:1325:1, line:1328:1>
| `-FullComment 0x5626fbd54a80 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x5626fbd54840 <line:1316:4>
|   | `-TextComment 0x5626fbd54800 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd54860 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd548c0 <col:11, col:43>
|   |   `-TextComment 0x5626fbd54890 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5626fbd54960 <line:1318:3, line:1320:37>
|   | |-TextComment 0x5626fbd548e0 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5626fbd54900 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd54920 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5626fbd549b0 <line:1322:3>
|   | `-TextComment 0x5626fbd54980 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd549d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd54a30 <col:11, col:35>
|       `-TextComment 0x5626fbd54a00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc90dc8 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5626fbc90d38 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc91008 <line:1339:1, line:1342:1>
| `-FullComment 0x5626fbd54d60 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x5626fbd54b20 <line:1330:4>
|   | `-TextComment 0x5626fbd54af0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd54b40 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd54ba0 <col:11, col:43>
|   |   `-TextComment 0x5626fbd54b70 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5626fbd54c40 <line:1332:3, line:1334:45>
|   | |-TextComment 0x5626fbd54bc0 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5626fbd54be0 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5626fbd54c00 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd54c90 <line:1336:3>
|   | `-TextComment 0x5626fbd54c60 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd54cb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd54d10 <col:11, col:35>
|       `-TextComment 0x5626fbd54ce0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc910b8 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5626fbc91028 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5626fbc91338 <line:1353:1, line:1356:1>
| `-FullComment 0x5626fbd55040 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x5626fbd54e00 <line:1344:4>
|   | `-TextComment 0x5626fbd54dd0 <col:4> Text=" "
|   |-BlockCommandComment 0x5626fbd54e20 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd54e80 <col:11, col:43>
|   |   `-TextComment 0x5626fbd54e50 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5626fbd54f20 <line:1346:3, line:1348:45>
|   | |-TextComment 0x5626fbd54ea0 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5626fbd54ec0 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5626fbd54ee0 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5626fbd54f70 <line:1350:3>
|   | `-TextComment 0x5626fbd54f40 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd54f90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5626fbd54ff0 <col:11, col:35>
|       `-TextComment 0x5626fbd54fc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5626fbc913e0 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x5626fbd552d0 <line:112:3, line:116:1>
|   |-ParagraphComment 0x5626fbd550e0 <line:112:3>
|   | `-TextComment 0x5626fbd550b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd55100 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5626fbd55160 <col:10, col:64>
|   |   `-TextComment 0x5626fbd55130 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x5626fbd551b0 <line:114:3>
|   | `-TextComment 0x5626fbd55180 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd551d0 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x5626fbd55230 <col:11, col:40>
|   |   `-TextComment 0x5626fbd55200 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x5626fbd55280 <line:116:1>
|     `-TextComment 0x5626fbd55250 <col:1> Text=" "
|-FunctionDecl 0x5626fbc915a0 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x5626fbd55560 <line:121:3, line:125:1>
|   |-ParagraphComment 0x5626fbd55370 <line:121:3>
|   | `-TextComment 0x5626fbd55340 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd55390 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5626fbd553f0 <col:10, col:46>
|   |   `-TextComment 0x5626fbd553c0 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x5626fbd55440 <line:123:3>
|   | `-TextComment 0x5626fbd55410 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd55460 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x5626fbd554c0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd55490 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x5626fbd55510 <line:125:1>
|     `-TextComment 0x5626fbd554e0 <col:1> Text=" "
|-RecordDecl 0x5626fbc91640 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x5626fbc91968 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x5626fbc91900 'void (*)(struct _timeout *)'
|   `-ParenType 0x5626fbc918a0 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x5626fbc91860 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x5626fbafd4e0 'void'
|       `-PointerType 0x5626fbc91760 'struct _timeout *'
|         `-ElaboratedType 0x5626fbc916f0 'struct _timeout' sugar
|           `-RecordType 0x5626fbc916c0 'struct _timeout'
|             `-Record 0x5626fbc919c0 '_timeout'
|-RecordDecl 0x5626fbc919c0 prev 0x5626fbc91640 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x5626fbc91a50 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x5626fbc91ad8 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x5626fbc91b68 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x5626fbc91bb8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x5626fbc91c80 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x5626fbc91d28 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x5626fbc91cd0 'struct k_spinlock_key' sugar
|   `-RecordType 0x5626fbc91c40 'struct k_spinlock_key'
|     `-Record 0x5626fbc91bb8 'k_spinlock_key'
|-RecordDecl 0x5626fbc91d80 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x5626fbc94a90 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x5626fbc94980 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x5626fbc94e80 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x5626fbc94c18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5626fbc94c00 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5626fbc94be0 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x5626fbc94b90 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x5626fbc94980 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x5626fbc94cb8 <line:65:2, col:20>
| | | `-VarDecl 0x5626fbc94c50 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key' nrvo
| | |-BinaryOperator 0x5626fbc94dc0 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x5626fbc94cf0 <col:2, col:4> 'int' lvalue .key 0x5626fbc91c80
| | | | `-DeclRefExpr 0x5626fbc94cd0 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x5626fbc94c50 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x5626fbc94da8 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x5626fbc94d88 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x5626fbc94d70 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x5626fbc94d20 <col:10> 'unsigned int (void)' Function 0x5626fbc67f98 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x5626fbc94e68 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x5626fbc94e50 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbc94e30 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x5626fbc94c50 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x5626fbc94b38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5626fbc95070 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x5626fbc94ed8 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x5626fbc94f50 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x5626fbc95340 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x5626fbc95200 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5626fbc951e8 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5626fbc951c8 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x5626fbc95178 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x5626fbc94ed8 'l' 'struct k_spinlock *'
| | `-CallExpr 0x5626fbc952e8 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x5626fbc952d0 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5626fbc95228 <col:2> 'void (unsigned int)' Function 0x5626fbc68110 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x5626fbc95328 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x5626fbc95310 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5626fbc95268 <col:18, col:22> 'int' lvalue .key 0x5626fbc91c80
| |         `-DeclRefExpr 0x5626fbc95248 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x5626fbc94f50 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x5626fbc95120 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5626fbc95490 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x5626fbc95388 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x5626fbc95698 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x5626fbc95618 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5626fbc95600 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5626fbc955e0 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x5626fbc95590 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x5626fbc95388 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x5626fbc95538 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x5626fbc956b0 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x5626fbd557c0 <line:18:3, line:20:5>
| | |-ParagraphComment 0x5626fbd55600 <line:18:3>
| | | `-TextComment 0x5626fbd555d0 <col:3> Text=" "
| | |-VerbatimLineComment 0x5626fbd55620 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x5626fbd55690 <line:19:3>
| | | `-TextComment 0x5626fbd55660 <col:3> Text=" "
| | |-VerbatimLineComment 0x5626fbd556b0 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x5626fbd55770 <line:20:3, col:5>
| |   |-TextComment 0x5626fbd556f0 <col:3> Text=" "
| |   |-TextComment 0x5626fbd55710 <col:4> Text="@"
| |   `-TextComment 0x5626fbd55730 <col:5> Text="{"
| |-EnumConstantDecl 0x5626fbc957a8 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x5626fbd55890 <line:24:5, col:55>
| |   `-ParagraphComment 0x5626fbd55860 <col:5, col:55>
| |     `-TextComment 0x5626fbd55830 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x5626fbc95828 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x5626fbd55960 <line:27:5, col:34>
| |   `-ParagraphComment 0x5626fbd55930 <col:5, col:34>
| |     `-TextComment 0x5626fbd55900 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x5626fbc958a8 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x5626fbd55a30 <line:30:5, col:50>
| |   `-ParagraphComment 0x5626fbd55a00 <col:5, col:50>
| |     `-TextComment 0x5626fbd559d0 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x5626fbc95928 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x5626fbd55b00 <line:33:5, col:38>
| |   `-ParagraphComment 0x5626fbd55ad0 <col:5, col:38>
| |     `-TextComment 0x5626fbd55aa0 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x5626fbc96b18 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x5626fbd55bd0 <line:36:5, col:34>
|     `-ParagraphComment 0x5626fbd55ba0 <col:5, col:34>
|       `-TextComment 0x5626fbd55b70 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x5626fbc96c80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x5626fbc96bb0 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x5626fbd55eb0 <line:45:3, line:50:44>
|   |-ParagraphComment 0x5626fbd55c70 <line:45:3>
|   | `-TextComment 0x5626fbd55c40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd55c90 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd55cf0 <col:10, col:42>
|   |   `-TextComment 0x5626fbd55cc0 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x5626fbd55d60 <line:47:3, line:48:76>
|   | |-TextComment 0x5626fbd55d10 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x5626fbd55d30 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x5626fbd55db0 <line:50:3>
|   | `-TextComment 0x5626fbd55d80 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd55dd0 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x5626fbd55e60 <col:17, col:44>
|       `-TextComment 0x5626fbd55e30 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x5626fbc96ed0 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x5626fbc96d70 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x5626fbc96df0 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x5626fbd56590 <line:55:3, line:81:71>
|   |-ParagraphComment 0x5626fbd55f50 <line:55:3>
|   | `-TextComment 0x5626fbd55f20 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd55f70 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5626fbd55fd0 <col:10, col:36>
|   |   `-TextComment 0x5626fbd55fa0 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x5626fbd56040 <line:57:3, line:58:67>
|   | |-TextComment 0x5626fbd55ff0 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x5626fbd56010 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x5626fbd560e0 <line:60:3, line:62:71>
|   | |-TextComment 0x5626fbd56060 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x5626fbd56080 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x5626fbd560a0 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x5626fbd56150 <line:64:3, line:65:11>
|   | |-TextComment 0x5626fbd56100 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x5626fbd56120 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x5626fbd561a0 <line:67:3, col:42>
|   | `-TextComment 0x5626fbd56170 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x5626fbd56330 <line:69:3, line:77:23>
|   | |-TextComment 0x5626fbd561c0 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x5626fbd561e0 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x5626fbd56200 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x5626fbd56220 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x5626fbd56240 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x5626fbd56260 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x5626fbd56280 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x5626fbd562a0 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x5626fbd562c0 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x5626fbd56380 <line:79:3>
|   | `-TextComment 0x5626fbd56350 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd563a0 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd56450 <line:79:17, line:80:3>
|   |   |-TextComment 0x5626fbd56400 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x5626fbd56420 <line:80:3> Text=" "
|   `-ParamCommandComment 0x5626fbd56470 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x5626fbd56520 <line:80:14, line:81:71>
|       |-TextComment 0x5626fbd564d0 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x5626fbd564f0 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x5626fbc970d8 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x5626fbc96fc0 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x5626fbc97040 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x5626fbd589a0 <line:86:3, line:97:71>
|   |-ParagraphComment 0x5626fbd56630 <line:86:3, col:50>
|   | `-TextComment 0x5626fbd56600 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x5626fbd566d0 <line:88:3, line:90:31>
|   | |-TextComment 0x5626fbd56650 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x5626fbd56670 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x5626fbd56690 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x5626fbd56740 <line:92:3, line:93:24>
|   | |-TextComment 0x5626fbd566f0 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x5626fbd56710 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x5626fbd56790 <line:95:3>
|   | `-TextComment 0x5626fbd56760 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd567b0 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd58880 <line:95:17, line:96:3>
|   |   |-TextComment 0x5626fbd56810 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x5626fbd58850 <line:96:3> Text=" "
|   `-ParamCommandComment 0x5626fbd588a0 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x5626fbd58950 <line:96:14, line:97:71>
|       |-TextComment 0x5626fbd58900 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x5626fbd58920 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x5626fbc975e0 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x5626fbc97290 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x5626fbc97310 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x5626fbc97430 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x5626fbc974b0 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x5626fbc97528 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x5626fbc9e108 <line:70:1, line:73:1>
| | `-ReturnStmt 0x5626fbc978a8 <line:71:2, line:72:11>
| |   `-CallExpr 0x5626fbc977e8 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x5626fbc977d0 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbc976a8 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x5626fbc68f48 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x5626fbc97830 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc976c8 <col:34> 'unsigned int' lvalue ParmVar 0x5626fbc97290 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x5626fbc97848 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc976e8 <col:39> 'unsigned int' lvalue ParmVar 0x5626fbc97310 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x5626fbc97860 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc97708 <col:49> 'void (*)(void *)' lvalue ParmVar 0x5626fbc97430 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x5626fbc97878 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbc97728 <col:58> 'void *' lvalue ParmVar 0x5626fbc974b0 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x5626fbc97890 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x5626fbc97748 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbc97528 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x5626fbd59010 <line:54:3, line:64:48>
|   |-ParagraphComment 0x5626fbd58a40 <line:54:3, col:33>
|   | `-TextComment 0x5626fbd58a10 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x5626fbd58a90 <line:56:3, col:80>
|   | `-TextComment 0x5626fbd58a60 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x5626fbd58ae0 <line:58:3>
|   | `-TextComment 0x5626fbd58ab0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd58b00 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd58bb0 <line:58:14, line:59:3>
|   |   |-TextComment 0x5626fbd58b60 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x5626fbd58b80 <line:59:3> Text=" "
|   |-ParamCommandComment 0x5626fbd58bd0 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd58c80 <line:59:19, line:60:3>
|   |   |-TextComment 0x5626fbd58c30 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x5626fbd58c50 <line:60:3> Text=" "
|   |-ParamCommandComment 0x5626fbd58ca0 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd58d50 <line:60:18, line:61:3>
|   |   |-TextComment 0x5626fbd58d00 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x5626fbd58d20 <line:61:3> Text=" "
|   |-ParamCommandComment 0x5626fbd58d70 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd58e20 <line:61:20, line:62:3>
|   |   |-TextComment 0x5626fbd58dd0 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x5626fbd58df0 <line:62:3> Text=" "
|   |-ParamCommandComment 0x5626fbd58e40 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x5626fbd58ed0 <col:16, col:53>
|   |   `-TextComment 0x5626fbd58ea0 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x5626fbd58f20 <line:64:3>
|   | `-TextComment 0x5626fbd58ef0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd58f40 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x5626fbd58fa0 <col:11, col:48>
|       `-TextComment 0x5626fbd58f70 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x5626fbc9e1f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x5626fbd59230 <line:21:3, line:26:59>
|   |-ParagraphComment 0x5626fbd590b0 <line:21:3, col:57>
|   | `-TextComment 0x5626fbd59080 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x5626fbd59120 <line:23:3, line:24:52>
|   | |-TextComment 0x5626fbd590d0 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x5626fbd590f0 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x5626fbd59170 <line:26:3>
|   | `-TextComment 0x5626fbd59140 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd59190 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x5626fbd591f0 <col:11, col:59>
|       `-TextComment 0x5626fbd591c0 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x5626fbc9e2f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x5626fbc9e3c0 prev 0x5626fbc9e1f8 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x5626fbc9e6a8 <line:26:1, line:34:1>
|   |-DoStmt 0x5626fbc9e5b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbc9e580 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbc9e520 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbc9e598 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbc9e668 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x5626fbc9e648 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x5626fbc9e630 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5626fbc9e5d8 <col:9> 'int *()' Function 0x5626fbc9e2f8 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x5626fbc9e6c8 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x5626fbc9e788 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x5626fbc9e840 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x5626fbc9e7e0 'struct _wait_q_t' sugar
|   `-RecordType 0x5626fbc9e750 '_wait_q_t'
|     `-Record 0x5626fbc9e6c8 ''
|-RecordDecl 0x5626fbc9e8b0 prev 0x5626fbc45620 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x5626fbc9e930 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x5626fbc9e9d8 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x5626fbc9ea88 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x5626fbc9eb38 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x5626fbc9ebe8 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x5626fbc9ec98 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x5626fbc9ed48 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x5626fbc9edf8 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x5626fbc9eea8 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x5626fbc9ef58 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x5626fbc9f008 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x5626fbca8ef0 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x5626fbca8f98 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x5626fbca9048 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x5626fbca90f8 prev 0x5626fbc456a0 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x5626fbca9178 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x5626fbca9228 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x5626fbca9308 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x5626fbd59430 <line:140:3, line:144:33>
| | |-ParagraphComment 0x5626fbd592d0 <line:140:3>
| | | `-TextComment 0x5626fbd592a0 <col:3> Text=" "
| | |-BlockCommandComment 0x5626fbd592f0 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x5626fbd59350 <col:10, col:29>
| | |   `-TextComment 0x5626fbd59320 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x5626fbd593f0 <line:142:3, line:144:33>
| |   |-TextComment 0x5626fbd59370 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x5626fbd59390 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x5626fbd593b0 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x5626fbca93d8 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x5626fbca9458 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x5626fbca94a8 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x5626fbca94f8 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x5626fbca9548 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x5626fbca9598 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x5626fbca95e8 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x5626fbca9638 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x5626fbca9688 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x5626fbca96d8 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x5626fbca9728 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x5626fbca9778 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x5626fbca97c8 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x5626fbca9818 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x5626fbca9868 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x5626fbca98b8 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x5626fbca9908 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x5626fbca9958 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x5626fbca99a8 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x5626fbca99f8 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x5626fbca9a48 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x5626fbca9a98 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x5626fbca9ae8 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x5626fbca9b38 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x5626fbca9b88 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x5626fbca9bd8 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x5626fbca9c28 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x5626fbca9c78 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x5626fbca9cc8 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x5626fbca9d18 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x5626fbca9d68 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x5626fbca9db8 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x5626fbca9e08 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x5626fbca9e58 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x5626fbcafc90 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x5626fbcafce0 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x5626fbcafd58 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x5626fbd59550 <line:156:5, col:13>
|     `-ParagraphComment 0x5626fbd59520 <col:5, col:13>
|       |-TextComment 0x5626fbd594a0 <col:5> Text=" "
|       `-InlineCommandComment 0x5626fbd594f0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x5626fbcafeb0 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x5626fbcafe20 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x5626fbcb0038 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x5626fbcaffe0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5626fbcaffc8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5626fbcaffa8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5626fbcaff58 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x5626fbcafe20 'obj' 'void *'
| `-FullComment 0x5626fbd59670 <line:227:3, col:12>
|   `-ParagraphComment 0x5626fbd59640 <col:3, col:12>
|     |-TextComment 0x5626fbd595c0 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd59610 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcb0210 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5626fbcb0068 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x5626fbcb00f8 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x5626fbcb0448 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x5626fbcb0348 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5626fbcb0330 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5626fbcb0310 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x5626fbcb02c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x5626fbcb0068 'object' 'void *'
| | `-CStyleCastExpr 0x5626fbcb03f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5626fbcb03e0 <col:29, col:31> 'struct k_thread *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5626fbcb03c0 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x5626fbcb0370 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x5626fbcb00f8 'thread' 'struct k_thread *'
| `-FullComment 0x5626fbd59760 <line:235:3, col:12>
|   `-ParagraphComment 0x5626fbd59730 <col:3, col:12>
|     |-TextComment 0x5626fbd596e0 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd59700 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcb05a8 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5626fbcb0480 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x5626fbcb0510 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x5626fbcb07e8 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x5626fbcb06e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5626fbcb06c8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5626fbcb06a8 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x5626fbcb0658 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x5626fbcb0480 'object' 'void *'
| | `-CStyleCastExpr 0x5626fbcb0790 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5626fbcb0778 <col:29, col:31> 'struct k_thread *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5626fbcb0758 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x5626fbcb0708 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x5626fbcb0510 'thread' 'struct k_thread *'
| `-FullComment 0x5626fbd59850 <line:245:3, col:12>
|   `-ParagraphComment 0x5626fbd59820 <col:3, col:12>
|     |-TextComment 0x5626fbd597d0 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd597f0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcb08b0 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5626fbcb0820 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x5626fbcb0a08 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x5626fbcb09e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5626fbcb09c8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5626fbcb09a8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5626fbcb0958 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x5626fbcb0820 'object' 'void *'
| `-FullComment 0x5626fbd59940 <line:255:3, col:12>
|   `-ParagraphComment 0x5626fbd59910 <col:3, col:12>
|     |-TextComment 0x5626fbd598c0 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd598e0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcb0ac8 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x5626fbcb0a38 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x5626fbcb0c48 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x5626fbcb0bf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x5626fbcb0be0 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
|       `-ParenExpr 0x5626fbcb0bc0 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x5626fbcb0b70 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x5626fbcb0a38 'object' 'void *'
|-FunctionDecl 0x5626fbcaa328 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5626fbcaa200 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x5626fbcaa290 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x5626fbd59ca0 <line:270:3, line:277:53>
|   |-ParagraphComment 0x5626fbd599e0 <line:270:3, col:43>
|   | `-TextComment 0x5626fbd599b0 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x5626fbd59a80 <line:272:3, line:274:67>
|   | |-TextComment 0x5626fbd59a00 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x5626fbd59a20 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x5626fbd59a40 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x5626fbd59ad0 <line:276:3>
|   | `-TextComment 0x5626fbd59aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd59af0 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd59ba0 <line:276:17, line:277:3>
|   |   |-TextComment 0x5626fbd59b50 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x5626fbd59b70 <line:277:3> Text=" "
|   `-ParamCommandComment 0x5626fbd59bc0 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x5626fbd59c50 <col:17, col:53>
|       `-TextComment 0x5626fbd59c20 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x5626fbcaa548 prev 0x5626fbcb05a8 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x5626fbcaa420 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x5626fbcaa4b0 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x5626fbd5a000 <line:282:3, line:289:54>
|   |-ParagraphComment 0x5626fbd59d40 <line:282:3, col:46>
|   | `-TextComment 0x5626fbd59d10 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x5626fbd59de0 <line:284:3, line:286:67>
|   | |-TextComment 0x5626fbd59d60 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x5626fbd59d80 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x5626fbd59da0 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x5626fbd59e30 <line:288:3>
|   | `-TextComment 0x5626fbd59e00 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd59e50 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd59f00 <line:288:17, line:289:3>
|   |   |-TextComment 0x5626fbd59eb0 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x5626fbd59ed0 <line:289:3> Text=" "
|   `-ParamCommandComment 0x5626fbd59f20 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x5626fbd59fb0 <col:17, col:54>
|       `-TextComment 0x5626fbd59f80 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x5626fbcaa6d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5626fbcaa640 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x5626fbd5a330 <line:294:3, line:301:1>
|   |-ParagraphComment 0x5626fbd5a0a0 <line:294:3>
|   | `-TextComment 0x5626fbd5a070 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5a0c0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5626fbd5a120 <col:10, col:27>
|   |   `-TextComment 0x5626fbd5a0f0 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x5626fbd5a190 <line:296:3, line:297:72>
|   | |-TextComment 0x5626fbd5a140 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x5626fbd5a160 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x5626fbd5a1e0 <line:299:3>
|   | `-TextComment 0x5626fbd5a1b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5a200 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd5a290 <col:17, col:42>
|   |   `-TextComment 0x5626fbd5a260 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x5626fbd5a2e0 <line:301:1>
|     `-TextComment 0x5626fbd5a2b0 <col:1> Text=" "
|-FunctionDecl 0x5626fbcaa850 prev 0x5626fbcb0ac8 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x5626fbcaa7c0 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x5626fbd5a6f0 <line:305:3, line:319:41>
|   |-ParagraphComment 0x5626fbd5a3d0 <line:305:3, col:59>
|   | `-TextComment 0x5626fbd5a3a0 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x5626fbd5a490 <line:307:3, line:310:59>
|   | |-TextComment 0x5626fbd5a3f0 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x5626fbd5a410 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x5626fbd5a430 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x5626fbd5a450 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x5626fbd5a530 <line:312:3, line:314:43>
|   | |-TextComment 0x5626fbd5a4b0 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x5626fbd5a4d0 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x5626fbd5a4f0 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x5626fbd5a5a0 <line:316:3, line:317:25>
|   | |-TextComment 0x5626fbd5a550 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x5626fbd5a570 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x5626fbd5a5f0 <line:319:3>
|   | `-TextComment 0x5626fbd5a5c0 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd5a610 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x5626fbd5a6a0 <col:17, col:41>
|       `-TextComment 0x5626fbd5a670 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x5626fbcaaa98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5626fbcaa988 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x5626fbd5bad0 <line:324:3, line:335:12>
|   |-ParagraphComment 0x5626fbd5a790 <line:324:3, col:48>
|   | `-TextComment 0x5626fbd5a760 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x5626fbd5b870 <line:326:3, line:329:78>
|   | |-TextComment 0x5626fbd5a7b0 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x5626fbd5a7d0 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x5626fbd5a7f0 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x5626fbd5a810 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x5626fbd5b8c0 <line:331:3, col:59>
|   | `-TextComment 0x5626fbd5b890 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x5626fbd5b910 <line:333:3>
|   | `-TextComment 0x5626fbd5b8e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5b930 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd5b9e0 <line:333:16, line:334:3>
|   |   |-TextComment 0x5626fbd5b990 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x5626fbd5b9b0 <line:334:3> Text=" "
|   `-BlockCommandComment 0x5626fbd5ba00 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x5626fbd5ba80 <line:334:11, line:335:12>
|       |-TextComment 0x5626fbd5ba30 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x5626fbd5ba50 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x5626fbcaabf8 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5626fbcaab60 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x5626fbcaae08 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x5626fbcaad28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x5626fbcaad10 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue> part_of_explicit_cast
|   |   `-ParenExpr 0x5626fbcaacf0 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x5626fbcaaca0 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x5626fbcaab60 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x5626fbcaadd0 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x5626fbcaadb0 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x5626fbcaad88 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x5626fbcaad50 <col:23> 'int' 0
|-FunctionDecl 0x5626fbcaaed0 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x5626fbcaae40 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x5626fbcab058 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x5626fbcab000 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5626fbcaafe8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5626fbcaafc8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5626fbcaaf78 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x5626fbcaae40 'obj' 'void *'
| `-FullComment 0x5626fbd5bd30 <line:359:3, line:362:1>
|   |-ParagraphComment 0x5626fbd5bb70 <line:359:3>
|   | `-TextComment 0x5626fbd5bb40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5bb90 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x5626fbd5bbf0 <col:10, col:24>
|   |   `-TextComment 0x5626fbd5bbc0 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x5626fbd5bc40 <line:361:3>
|   | `-TextComment 0x5626fbd5bc10 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd5bc60 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x5626fbd5bcf0 <col:1>
|       `-TextComment 0x5626fbd5bcc0 <col:1> Text=" "
|-RecordDecl 0x5626fbcab070 prev 0x5626fbc66740 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x5626fbcab0f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x5626fbcab158 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x5626fbcad348 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x5626fbcad3f8 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x5626fbcad4b8 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x5626fbcad528 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x5626fbcad5e0 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x5626fbcad640 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x5626fbcad5e0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x5626fbcad4b8 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x5626fbcad698 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x5626fbcad5e0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x5626fbcad528 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x5626fbcad780 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x5626fbcad7e0 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x5626fbcad840 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x5626fbcad890 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x5626fbcad938 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x5626fbcad9f8 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x5626fbcada58 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x5626fbcadb10 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x5626fbcadb70 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x5626fbcadb10 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x5626fbcad9f8 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x5626fbcadbc8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x5626fbcadb10 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x5626fbcada58 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x5626fbcadc20 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x5626fbcadd30 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x5626fbcadd98 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x5626fbcadd30 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x5626fbcadb10 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x5626fbcad9f8 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x5626fbcaddf8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x5626fbcadd30 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x5626fbcadb10 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x5626fbcada58 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x5626fbcade50 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x5626fbcadd30 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x5626fbcadc20 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x5626fbcadea8 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x5626fbcadf10 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x5626fbcae068 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x5626fbcae010 'struct _thread_base' sugar
|   `-RecordType 0x5626fbcad3d0 'struct _thread_base'
|     `-Record 0x5626fbcad348 '_thread_base'
|-RecordDecl 0x5626fbcae0e8 prev 0x5626fbc9e8b0 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x5626fbd5bea0 <line:542:3, line:543:19>
| | |-ParagraphComment 0x5626fbd5bdd0 <line:542:3>
| | | `-TextComment 0x5626fbd5bda0 <col:3> Text=" "
| | |-VerbatimLineComment 0x5626fbd5bdf0 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x5626fbd5be60 <line:543:3, col:19>
| |   `-TextComment 0x5626fbd5be30 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x5626fbcae188 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x5626fbcae208 parent 0x5626fbafd488 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x5626fbcb2d00 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x5626fbd5bf70 <line:549:5, col:59>
| |   `-ParagraphComment 0x5626fbd5bf40 <col:5, col:59>
| |     `-TextComment 0x5626fbd5bf10 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x5626fbcb2d90 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x5626fbd5c040 <line:552:5, col:29>
| |   `-ParagraphComment 0x5626fbd5c010 <col:5, col:29>
| |     `-TextComment 0x5626fbd5bfe0 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x5626fbcb2f40 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x5626fbd5c1b0 <line:556:4, line:558:4>
| |   `-ParagraphComment 0x5626fbd5c180 <line:556:4, line:558:4>
| |     |-TextComment 0x5626fbd5c0b0 <line:556:4, col:18> Text=" abort function"
| |     |-TextComment 0x5626fbd5c0d0 <line:557:4> Text=" "
| |     |-InlineCommandComment 0x5626fbd5c120 <col:5, col:8> Name="ref" RenderNormal Arg[0]="K-THREAD-002"
| |     `-TextComment 0x5626fbd5c140 <line:558:4> Text=" "
| |-FieldDecl 0x5626fbcb3088 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x5626fbd5c280 <line:613:5, col:19>
| |   `-ParagraphComment 0x5626fbd5c250 <col:5, col:19>
| |     `-TextComment 0x5626fbd5c220 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x5626fbcb3108 parent 0x5626fbafd488 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x5626fbcb3230 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x5626fbd5c350 <line:616:5, col:47>
|     `-ParagraphComment 0x5626fbd5c320 <col:5, col:47>
|       `-TextComment 0x5626fbd5c2f0 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x5626fbcb3378 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x5626fbbf8bf0 'struct k_thread' sugar
|   `-RecordType 0x5626fbbf78f0 'struct k_thread'
|     `-Record 0x5626fbcae0e8 'k_thread'
|-TypedefDecl 0x5626fbcb33f8 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x5626fbbf8c60 'struct k_thread *'
|   `-ElaboratedType 0x5626fbbf8bf0 'struct k_thread' sugar
|     `-RecordType 0x5626fbbf78f0 'struct k_thread'
|       `-Record 0x5626fbcae0e8 'k_thread'
|-EnumDecl 0x5626fbcb3450 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x5626fbcb3550 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-ConstantExpr 0x5626fbcb3538 <col:10> 'int'
| |   `-IntegerLiteral 0x5626fbcb3518 <col:10> 'int' 0
| |-EnumConstantDecl 0x5626fbcb35a0 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x5626fbcb35f0 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x5626fbcb3930 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x5626fbcb38c0 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x5626fbcb3860 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x5626fbcb3820 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x5626fbafd4e0 'void'
| |     |-PointerType 0x5626fbcb36a0 'const struct k_thread *'
| |     | `-QualType 0x5626fbbf8bf1 'const struct k_thread' const
| |     |   `-ElaboratedType 0x5626fbbf8bf0 'struct k_thread' sugar
| |     |     `-RecordType 0x5626fbbf78f0 'struct k_thread'
| |     |       `-Record 0x5626fbcae0e8 'k_thread'
| |     `-PointerType 0x5626fbafdca0 'void *'
| |       `-BuiltinType 0x5626fbafd4e0 'void'
| `-FullComment 0x5626fbd5c510 <line:630:3, line:631:5>
|   |-ParagraphComment 0x5626fbd5c3f0 <line:630:3>
|   | `-TextComment 0x5626fbd5c3c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5626fbd5c410 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x5626fbd5c4d0 <line:631:3, col:5>
|     |-TextComment 0x5626fbd5c450 <col:3> Text=" "
|     |-TextComment 0x5626fbd5c470 <col:4> Text="@"
|     `-TextComment 0x5626fbd5c490 <col:5> Text="{"
|-FunctionDecl 0x5626fbcb3b90 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x5626fbcb39f8 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x5626fbcb3a78 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x5626fbd5cc30 <line:638:3, line:652:14>
|   |-ParagraphComment 0x5626fbd5c5b0 <line:638:3>
|   | `-TextComment 0x5626fbd5c580 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5c5d0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5626fbd5c630 <col:10, col:53>
|   |   `-TextComment 0x5626fbd5c600 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x5626fbd5c6a0 <line:640:3, line:641:46>
|   | |-TextComment 0x5626fbd5c650 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x5626fbd5c670 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x5626fbd5c6f0 <line:643:3>
|   | `-TextComment 0x5626fbd5c6c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5c710 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd5c7c0 <line:643:18, line:644:3>
|   |   |-TextComment 0x5626fbd5c770 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x5626fbd5c790 <line:644:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5c7e0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd5c870 <col:20, col:41>
|   |   `-TextComment 0x5626fbd5c840 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x5626fbd5c8c0 <line:646:3>
|   | `-TextComment 0x5626fbd5c890 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5c8e0 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x5626fbd5c990 <line:646:9, line:648:3>
|   |   |-TextComment 0x5626fbd5c910 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x5626fbd5c930 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x5626fbd5c950 <line:648:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5c9b0 <col:4, line:650:46> Name="note"
|   | `-ParagraphComment 0x5626fbd5cae0 <line:648:9, line:650:46>
|   |   |-TextComment 0x5626fbd5c9e0 <line:648:9, col:23> Text=" This API uses "
|   |   |-InlineCommandComment 0x5626fbd5ca30 <col:24, col:27> Name="ref" RenderNormal Arg[0]="k_spin_lock"
|   |   |-TextComment 0x5626fbd5ca50 <col:40, col:70> Text=" to protect the _kernel.threads"
|   |   |-TextComment 0x5626fbd5ca70 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   |   `-TextComment 0x5626fbd5ca90 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x5626fbd5cb30 <line:652:3>
|   | `-TextComment 0x5626fbd5cb00 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd5cb50 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd5cbb0 <col:11, col:14>
|       `-TextComment 0x5626fbd5cb80 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcb3da0 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x5626fbcb3c78 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x5626fbcb3d08 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x5626fbd5d720 <line:657:3, line:681:72>
|   |-ParagraphComment 0x5626fbd5ccd0 <line:657:3>
|   | `-TextComment 0x5626fbd5cca0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5ccf0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x5626fbd5cd50 <col:10, col:69>
|   |   `-TextComment 0x5626fbd5cd20 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x5626fbd5ce30 <line:659:3, line:660:51>
|   | |-TextComment 0x5626fbd5cd70 <line:659:3, col:44> Text=" This routine works exactly the same like "
|   | |-InlineCommandComment 0x5626fbd5cdd0 <col:45, col:48> Name="ref" RenderNormal Arg[0]="k_thread_foreach"
|   | `-TextComment 0x5626fbd5cdf0 <line:660:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x5626fbd5ce80 <line:662:3>
|   | `-TextComment 0x5626fbd5ce50 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5cea0 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd5cf50 <line:662:18, line:663:3>
|   |   |-TextComment 0x5626fbd5cf00 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x5626fbd5cf20 <line:663:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5cf70 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd5d000 <col:20, col:41>
|   |   `-TextComment 0x5626fbd5cfd0 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x5626fbd5d050 <line:665:3>
|   | `-TextComment 0x5626fbd5d020 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5d070 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x5626fbd5d120 <line:665:9, line:667:3>
|   |   |-TextComment 0x5626fbd5d0a0 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x5626fbd5d0c0 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x5626fbd5d0e0 <line:667:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5d140 <col:4, line:674:3> Name="note"
|   | `-ParagraphComment 0x5626fbd5d3b0 <line:667:9, line:674:3>
|   |   |-TextComment 0x5626fbd5d170 <line:667:9, col:23> Text=" This API uses "
|   |   |-InlineCommandComment 0x5626fbd5d1c0 <col:24, col:27> Name="ref" RenderNormal Arg[0]="k_spin_lock"
|   |   |-TextComment 0x5626fbd5d1e0 <col:40, col:79> Text=" only when accessing the _kernel.threads"
|   |   |-TextComment 0x5626fbd5d200 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   |   |-TextComment 0x5626fbd5d220 <line:669:3, col:38> Text=" If a new task is created when this "
|   |   |-InlineCommandComment 0x5626fbd5d270 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   |   |-TextComment 0x5626fbd5d290 <col:49, col:73> Text=" function is in progress,"
|   |   |-TextComment 0x5626fbd5d2b0 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   |   |-TextComment 0x5626fbd5d2d0 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   |   |-TextComment 0x5626fbd5d2f0 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   |   |-TextComment 0x5626fbd5d310 <line:673:3, col:15> Text=" enumeration."
|   |   `-TextComment 0x5626fbd5d330 <line:674:3> Text=" "
|   `-BlockCommandComment 0x5626fbd5d3d0 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x5626fbd5d6b0 <line:674:9, line:681:72>
|       |-TextComment 0x5626fbd5d400 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x5626fbd5d450 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x5626fbd5d470 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x5626fbd5d4d0 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x5626fbd5d4f0 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x5626fbd5d510 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x5626fbd5d530 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x5626fbd5d580 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x5626fbd5d5a0 <col:67, col:71> Text=" task"
|       |-TextComment 0x5626fbd5d5c0 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x5626fbd5d5e0 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x5626fbd5d600 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x5626fbd5d620 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x5626fbcb4620 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcb3fc0 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5626fbcb4038 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5626fbcb40b0 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbcb4158 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5626fbcb41d8 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x5626fbcb4258 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x5626fbcb42d8 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x5626fbcb4358 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x5626fbcb43d0 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5626fbcb4448 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x5626fbd5e580 <line:746:3, line:778:1>
|   |-ParagraphComment 0x5626fbd5d7c0 <line:746:3>
|   | `-TextComment 0x5626fbd5d790 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5d7e0 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x5626fbd5d840 <col:10, col:26>
|   |   `-TextComment 0x5626fbd5d810 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x5626fbd5d8b0 <line:748:3, col:70>
|   | `-TextComment 0x5626fbd5d880 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x5626fbd5d970 <line:750:3, line:753:11>
|   | |-TextComment 0x5626fbd5d8d0 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x5626fbd5d8f0 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x5626fbd5d910 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x5626fbd5d930 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x5626fbd5da10 <line:755:3, line:757:44>
|   | |-TextComment 0x5626fbd5d990 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x5626fbd5d9b0 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x5626fbd5d9d0 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x5626fbd5dad0 <line:759:3, line:762:13>
|   | |-TextComment 0x5626fbd5da30 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x5626fbd5da50 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x5626fbd5da70 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x5626fbd5da90 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x5626fbd5db20 <line:764:3>
|   | `-TextComment 0x5626fbd5daf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5db40 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd5dbf0 <line:764:21, line:765:3>
|   |   |-TextComment 0x5626fbd5dba0 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x5626fbd5dbc0 <line:765:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5dc10 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd5dcc0 <line:765:16, line:766:3>
|   |   |-TextComment 0x5626fbd5dc70 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x5626fbd5dc90 <line:766:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5dce0 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd5dd90 <line:766:21, line:767:3>
|   |   |-TextComment 0x5626fbd5dd40 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x5626fbd5dd60 <line:767:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5ddb0 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd5de60 <line:767:16, line:768:3>
|   |   |-TextComment 0x5626fbd5de10 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x5626fbd5de30 <line:768:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5de80 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x5626fbd5df30 <line:768:13, line:769:3>
|   |   |-TextComment 0x5626fbd5dee0 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x5626fbd5df00 <line:769:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5df50 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x5626fbd5e000 <line:769:13, line:770:3>
|   |   |-TextComment 0x5626fbd5dfb0 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x5626fbd5dfd0 <line:770:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5e020 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x5626fbd5e0d0 <line:770:13, line:771:3>
|   |   |-TextComment 0x5626fbd5e080 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x5626fbd5e0a0 <line:771:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5e0f0 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x5626fbd5e1a0 <line:771:15, line:772:3>
|   |   |-TextComment 0x5626fbd5e150 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x5626fbd5e170 <line:772:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5e1c0 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x5626fbd5e270 <line:772:18, line:773:3>
|   |   |-TextComment 0x5626fbd5e220 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x5626fbd5e240 <line:773:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5e290 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x5626fbd5e320 <col:16, col:80>
|   |   `-TextComment 0x5626fbd5e2f0 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x5626fbd5e370 <line:775:3>
|   | `-TextComment 0x5626fbd5e340 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5e390 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x5626fbd5e3f0 <col:11, col:28>
|   |   `-TextComment 0x5626fbd5e3c0 <col:11, col:28> Text=" ID of new thread."
|   `-ParagraphComment 0x5626fbd5e4c0 <line:777:3, line:778:1>
|     |-TextComment 0x5626fbd5e410 <line:777:3> Text=" "
|     |-InlineCommandComment 0x5626fbd5e460 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-001"
|     `-TextComment 0x5626fbd5e480 <line:778:1> Text=" "
|-FunctionDecl 0x5626fbcb4ab0 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5626fbcb4748 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5626fbcb47c8 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x5626fbcb4848 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x5626fbcb48c8 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x5626fbd5eb10 <line:787:3, line:794:1>
|   |-ParagraphComment 0x5626fbd5e620 <line:787:3>
|   | `-TextComment 0x5626fbd5e5f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5e640 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x5626fbd5e6a0 <col:10, col:61>
|   |   `-TextComment 0x5626fbd5e670 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x5626fbd5e6f0 <line:789:3>
|   | `-TextComment 0x5626fbd5e6c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5e710 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd5e7c0 <line:789:16, line:790:3>
|   |   |-TextComment 0x5626fbd5e770 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x5626fbd5e790 <line:790:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5e7e0 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd5e890 <line:790:13, line:791:3>
|   |   |-TextComment 0x5626fbd5e840 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x5626fbd5e860 <line:791:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5e8b0 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd5e960 <line:791:13, line:792:3>
|   |   |-TextComment 0x5626fbd5e910 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x5626fbd5e930 <line:792:3> Text=" "
|   `-ParamCommandComment 0x5626fbd5e980 <col:4, line:794:1> [in] implicitly Param="p3" ParamIndex=3
|     `-ParagraphComment 0x5626fbd5eab0 <line:792:13, line:794:1>
|       |-TextComment 0x5626fbd5e9e0 <line:792:13, col:38> Text=" 3rd entry point parameter"
|       |-TextComment 0x5626fbd5ea00 <line:793:3> Text=" "
|       |-InlineCommandComment 0x5626fbd5ea50 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-003"
|       `-TextComment 0x5626fbd5ea70 <line:794:1> Text=" "
|-FunctionDecl 0x5626fbcb5dc0 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x5626fbcb4bf0 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x5626fbcb4c80 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x5626fbcb5f58 <line:833:1, line:835:1>
| | `-BinaryOperator 0x5626fbcb5f10 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x5626fbcb5ea8 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x5626fbcb3088
| |   | `-ImplicitCastExpr 0x5626fbcb5e90 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5626fbcb5e70 <col:2> 'struct k_thread *' lvalue ParmVar 0x5626fbcb4bf0 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x5626fbcb5ef8 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbcb5ed8 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x5626fbcb4c80 'pool' 'struct k_mem_pool *'
| `-FullComment 0x5626fbd5f040 <line:817:3, line:830:1>
|   |-ParagraphComment 0x5626fbd5ebb0 <line:817:3>
|   | `-TextComment 0x5626fbd5eb80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5ebd0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5626fbd5ec30 <col:10, col:51>
|   |   `-TextComment 0x5626fbd5ec00 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x5626fbd5ecd0 <line:819:3, line:821:51>
|   | |-TextComment 0x5626fbd5ec50 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x5626fbd5ec70 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x5626fbd5ec90 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x5626fbd5ed40 <line:823:3, line:824:17>
|   | |-TextComment 0x5626fbd5ecf0 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x5626fbd5ed10 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x5626fbd5ed90 <line:826:3>
|   | `-TextComment 0x5626fbd5ed60 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5edb0 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd5ee90 <line:826:17, line:828:3>
|   |   |-TextComment 0x5626fbd5ee10 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x5626fbd5ee30 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x5626fbd5ee50 <line:828:3> Text=" "
|   `-ParamCommandComment 0x5626fbd5eeb0 <col:4, line:830:1> [in] implicitly Param="pool" ParamIndex=1
|     `-ParagraphComment 0x5626fbd5efe0 <line:828:15, line:830:1>
|       |-TextComment 0x5626fbd5ef10 <line:828:15, col:48> Text=" Memory pool to use for resources."
|       |-TextComment 0x5626fbd5ef30 <line:829:3> Text=" "
|       |-InlineCommandComment 0x5626fbd5ef80 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-005"
|       `-TextComment 0x5626fbd5efa0 <line:830:1> Text=" "
|-FunctionDecl 0x5626fbcb6090 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5626fbcb5f80 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x5626fbd5f500 <line:855:3, line:862:63>
|   |-ParagraphComment 0x5626fbd5f0e0 <line:855:3>
|   | `-TextComment 0x5626fbd5f0b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5f100 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd5f160 <col:10, col:42>
|   |   `-TextComment 0x5626fbd5f130 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x5626fbd5f230 <line:857:3, col:78>
|   | |-TextComment 0x5626fbd5f180 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x5626fbd5f1d0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x5626fbd5f1f0 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x5626fbd5f280 <line:859:3>
|   | `-TextComment 0x5626fbd5f250 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5f2a0 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd5f330 <col:13, col:45>
|   |   `-TextComment 0x5626fbd5f300 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x5626fbd5f380 <line:861:3>
|   | `-TextComment 0x5626fbd5f350 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd5f3a0 <col:4, line:862:63> Name="return"
|     `-ParagraphComment 0x5626fbd5f4a0 <line:861:11, line:862:63>
|       |-TextComment 0x5626fbd5f3d0 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|       |-TextComment 0x5626fbd5f3f0 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|       |-InlineCommandComment 0x5626fbd5f440 <col:45, col:48> Name="ref" RenderNormal Arg[0]="k_wakeup"
|       `-TextComment 0x5626fbd5f460 <col:58, col:63> Text=" call."
|-FunctionDecl 0x5626fbcb6208 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5626fbcb6178 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x5626fbd5f9f0 <line:867:3, line:878:63>
|   |-ParagraphComment 0x5626fbd5f5a0 <line:867:3>
|   | `-TextComment 0x5626fbd5f570 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5f5c0 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x5626fbd5f620 <col:10, col:70>
|   |   `-TextComment 0x5626fbd5f5f0 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x5626fbd5f710 <line:869:3, line:873:71>
|   | |-TextComment 0x5626fbd5f640 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x5626fbd5f660 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x5626fbd5f680 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x5626fbd5f6a0 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x5626fbd5f6c0 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x5626fbd5f760 <line:875:3>
|   | `-TextComment 0x5626fbd5f730 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd5f780 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd5f810 <col:13, col:45>
|   |   `-TextComment 0x5626fbd5f7e0 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x5626fbd5f860 <line:877:3>
|   | `-TextComment 0x5626fbd5f830 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd5f890 <col:4, line:878:63> Name="return"
|     `-ParagraphComment 0x5626fbd5f990 <line:877:11, line:878:63>
|       |-TextComment 0x5626fbd5f8c0 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|       |-TextComment 0x5626fbd5f8e0 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|       |-InlineCommandComment 0x5626fbd5f930 <col:45, col:48> Name="ref" RenderNormal Arg[0]="k_wakeup"
|       `-TextComment 0x5626fbd5f950 <col:58, col:63> Text=" call."
|-FunctionDecl 0x5626fbcb63b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x5626fbcb62e8 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x5626fbd5fd20 <line:883:3, line:888:14>
|   |-ParagraphComment 0x5626fbd5fa90 <line:883:3>
|   | `-TextComment 0x5626fbd5fa60 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5fab0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5626fbd5fb10 <col:10, col:48>
|   |   `-TextComment 0x5626fbd5fae0 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x5626fbd5fc00 <line:885:3, line:886:32>
|   | |-TextComment 0x5626fbd5fb30 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x5626fbd5fb50 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x5626fbd5fba0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x5626fbd5fbc0 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x5626fbd5fc50 <line:888:3>
|   | `-TextComment 0x5626fbd5fc20 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd5fc70 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd5fcd0 <col:11, col:14>
|       `-TextComment 0x5626fbd5fca0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcb6520 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x5626fbd600a0 <line:893:3, line:901:1>
|   |-ParagraphComment 0x5626fbd5fdc0 <line:893:3>
|   | `-TextComment 0x5626fbd5fd90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd5fde0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5626fbd5fe40 <col:10, col:35>
|   |   `-TextComment 0x5626fbd5fe10 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x5626fbd5fee0 <line:895:3, line:897:67>
|   | |-TextComment 0x5626fbd5fe60 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x5626fbd5fe80 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x5626fbd5fea0 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x5626fbd5ff30 <line:899:3>
|   | `-TextComment 0x5626fbd5ff00 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd5ff50 <col:4, line:901:1> Name="return"
|     `-ParagraphComment 0x5626fbd60050 <line:899:11, line:901:1>
|       |-TextComment 0x5626fbd5ff80 <line:899:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd5ffa0 <line:900:3> Text=" "
|       |-InlineCommandComment 0x5626fbd5fff0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-015"
|       `-TextComment 0x5626fbd60010 <line:901:1> Text=" "
|-FunctionDecl 0x5626fbcb6700 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbcb65f8 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd60630 <line:905:3, line:915:1>
|   |-ParagraphComment 0x5626fbd60140 <line:905:3>
|   | `-TextComment 0x5626fbd60110 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd60160 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5626fbd601c0 <col:10, col:36>
|   |   `-TextComment 0x5626fbd60190 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x5626fbd60290 <line:907:3, col:61>
|   | |-TextComment 0x5626fbd601e0 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x5626fbd60230 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5626fbd60250 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x5626fbd60360 <line:909:3, col:69>
|   | |-TextComment 0x5626fbd602b0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5626fbd60300 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5626fbd60320 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x5626fbd603b0 <line:911:3>
|   | `-TextComment 0x5626fbd60380 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd603d0 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd60460 <col:17, col:38>
|   |   `-TextComment 0x5626fbd60430 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x5626fbd604b0 <line:913:3>
|   | `-TextComment 0x5626fbd60480 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd604d0 <col:4, line:915:1> Name="return"
|     `-ParagraphComment 0x5626fbd605d0 <line:913:11, line:915:1>
|       |-TextComment 0x5626fbd60500 <line:913:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd60520 <line:914:3> Text=" "
|       |-InlineCommandComment 0x5626fbd60570 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-014"
|       `-TextComment 0x5626fbd60590 <line:915:1> Text=" "
|-FunctionDecl 0x5626fbcb68d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x5626fbd60940 <line:919:3, line:924:1>
|   |-ParagraphComment 0x5626fbd606d0 <line:919:3>
|   | `-TextComment 0x5626fbd606a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd606f0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5626fbd60750 <col:10, col:46>
|   |   `-TextComment 0x5626fbd60720 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x5626fbd607a0 <line:921:3>
|   | `-TextComment 0x5626fbd60770 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd607c0 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x5626fbd60820 <col:11, col:32>
|   |   `-TextComment 0x5626fbd607f0 <col:11, col:32> Text=" ID of current thread."
|   `-ParagraphComment 0x5626fbd608f0 <line:923:3, line:924:1>
|     |-TextComment 0x5626fbd60840 <line:923:3> Text=" "
|     |-InlineCommandComment 0x5626fbd60890 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-013"
|     `-TextComment 0x5626fbd608b0 <line:924:1> Text=" "
|-FunctionDecl 0x5626fbcb6a38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbcb69a8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd60ec0 <line:928:3, line:941:1>
|   |-ParagraphComment 0x5626fbd609e0 <line:928:3>
|   | `-TextComment 0x5626fbd609b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd60a00 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x5626fbd60a60 <col:10, col:25>
|   |   `-TextComment 0x5626fbd60a30 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x5626fbd60bf0 <line:930:3, line:935:38>
|   | |-TextComment 0x5626fbd60a80 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x5626fbd60ad0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x5626fbd60af0 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x5626fbd60b10 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x5626fbd60b30 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x5626fbd60b50 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x5626fbd60b70 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x5626fbd60b90 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x5626fbd60c40 <line:937:3>
|   | `-TextComment 0x5626fbd60c10 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd60c60 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd60cf0 <col:17, col:39>
|   |   `-TextComment 0x5626fbd60cc0 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x5626fbd60d40 <line:939:3>
|   | `-TextComment 0x5626fbd60d10 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd60d60 <col:4, line:941:1> Name="return"
|     `-ParagraphComment 0x5626fbd60e60 <line:939:11, line:941:1>
|       |-TextComment 0x5626fbd60d90 <line:939:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd60db0 <line:940:3> Text=" "
|       |-InlineCommandComment 0x5626fbd60e00 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-012"
|       `-TextComment 0x5626fbd60e20 <line:941:1> Text=" "
|-FunctionDecl 0x5626fbcb6ba8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbcb6b18 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd61270 <line:946:3, line:954:1>
|   |-ParagraphComment 0x5626fbd60f60 <line:946:3>
|   | `-TextComment 0x5626fbd60f30 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd60f80 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5626fbd60fe0 <col:10, col:34>
|   |   `-TextComment 0x5626fbd60fb0 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x5626fbd61080 <line:948:3, line:950:9>
|   | |-TextComment 0x5626fbd61000 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x5626fbd61020 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x5626fbd61040 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x5626fbd610d0 <line:952:3>
|   | `-TextComment 0x5626fbd610a0 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd610f0 <col:4, line:954:1> [in] implicitly Param="thread" ParamIndex=0
|     `-ParagraphComment 0x5626fbd61220 <line:952:17, line:954:1>
|       |-TextComment 0x5626fbd61150 <line:952:17, col:32> Text=" thread to start"
|       |-TextComment 0x5626fbd61170 <line:953:3> Text=" "
|       |-InlineCommandComment 0x5626fbd611c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-011"
|       `-TextComment 0x5626fbd611e0 <line:954:1> Text=" "
|-RecordDecl 0x5626fbcb6c78 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x5626fbcb6d70 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x5626fbcb6dd0 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x5626fbcb6e38 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x5626fbcb6e98 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x5626fbcb6f00 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x5626fbcb6f68 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x5626fbcb6fd0 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x5626fbcb7038 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x5626fbcb7098 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x5626fbcb70f8 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x5626fbcb71f0 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x5626fbcb7258 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x5626fbcb7458 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbcb7348 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd61760 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x5626fbd61310 <line:1044:3>
|   | `-TextComment 0x5626fbd612e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd61330 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5626fbd61390 <col:10, col:34>
|   |   `-TextComment 0x5626fbd61360 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x5626fbd61430 <line:1046:3, col:39>
|   | |-TextComment 0x5626fbd613b0 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x5626fbd61400 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x5626fbd61480 <line:1048:3>
|   | `-TextComment 0x5626fbd61450 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd614a0 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd61530 <col:17, col:55>
|   |   `-TextComment 0x5626fbd61500 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x5626fbd61580 <line:1050:3>
|   | `-TextComment 0x5626fbd61550 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd615a0 <col:4, line:1052:1> Name="return"
|     `-ParagraphComment 0x5626fbd61700 <line:1050:11, line:1052:1>
|       |-TextComment 0x5626fbd615d0 <line:1050:11, col:23> Text=" Priority of "
|       |-InlineCommandComment 0x5626fbd61620 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|       |-TextComment 0x5626fbd61640 <line:1051:3> Text=" "
|       |-InlineCommandComment 0x5626fbd61690 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-009"
|       `-TextComment 0x5626fbd616b0 <line:1052:1> Text=" "
|-FunctionDecl 0x5626fbcb76d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5626fbcb7538 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5626fbcb75b8 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x5626fbd62120 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x5626fbd61800 <line:1056:3>
|   | `-TextComment 0x5626fbd617d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd61820 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5626fbd618a0 <col:10, col:34>
|   |   `-TextComment 0x5626fbd61850 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x5626fbd61940 <line:1058:3, col:54>
|   | |-TextComment 0x5626fbd618c0 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x5626fbd61910 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x5626fbd61a30 <line:1060:3, line:1061:10>
|   | |-TextComment 0x5626fbd61960 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x5626fbd619b0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5626fbd619d0 <col:74, col:76> Text=" is"
|   | `-TextComment 0x5626fbd619f0 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x5626fbd61b20 <line:1063:3, line:1064:75>
|   | |-TextComment 0x5626fbd61a50 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x5626fbd61a70 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x5626fbd61ac0 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5626fbd61ae0 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x5626fbd61bc0 <line:1066:3, line:1068:41>
|   | |-TextComment 0x5626fbd61b40 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x5626fbd61b60 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x5626fbd61b80 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x5626fbd61c60 <line:1070:3, line:1072:20>
|   | |-TextComment 0x5626fbd61be0 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x5626fbd61c00 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x5626fbd61c20 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x5626fbd61cb0 <line:1074:3>
|   | `-TextComment 0x5626fbd61c80 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd61cd0 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd61d80 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x5626fbd61d30 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x5626fbd61d50 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x5626fbd61da0 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd61e30 <col:15, col:28>
|   |   `-TextComment 0x5626fbd61e00 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x5626fbd61e80 <line:1077:3>
|   | `-TextComment 0x5626fbd61e50 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd61ea0 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x5626fbd61f20 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x5626fbd61ed0 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x5626fbd61ef0 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x5626fbd61f70 <line:1080:3>
|   | `-TextComment 0x5626fbd61f40 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd61f90 <col:4, line:1082:1> Name="return"
|     `-ParagraphComment 0x5626fbd62090 <line:1080:11, line:1082:1>
|       |-TextComment 0x5626fbd61fc0 <line:1080:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd61fe0 <line:1081:3> Text=" "
|       |-InlineCommandComment 0x5626fbd62030 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-008"
|       `-TextComment 0x5626fbd62050 <line:1082:1> Text=" "
|-FunctionDecl 0x5626fbcb7848 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbcb77b8 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd627f0 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x5626fbd621c0 <line:1196:3>
|   | `-TextComment 0x5626fbd62190 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd621e0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5626fbd62240 <col:10, col:27>
|   |   `-TextComment 0x5626fbd62210 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x5626fbd62450 <line:1198:3, line:1204:48>
|   | |-TextComment 0x5626fbd62260 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x5626fbd622b0 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5626fbd622d0 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x5626fbd62320 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5626fbd62340 <col:66, col:69> Text=" are"
|   | |-TextComment 0x5626fbd62360 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x5626fbd62380 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x5626fbd623a0 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x5626fbd623c0 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x5626fbd623e0 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x5626fbd62520 <line:1206:3, col:64>
|   | |-TextComment 0x5626fbd62470 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5626fbd624c0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5626fbd624e0 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x5626fbd62570 <line:1208:3>
|   | `-TextComment 0x5626fbd62540 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd62590 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd62620 <col:17, col:41>
|   |   `-TextComment 0x5626fbd625f0 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x5626fbd62670 <line:1210:3>
|   | `-TextComment 0x5626fbd62640 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd62690 <col:4, line:1212:1> Name="return"
|     `-ParagraphComment 0x5626fbd62790 <line:1210:11, line:1212:1>
|       |-TextComment 0x5626fbd626c0 <line:1210:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd626e0 <line:1211:3> Text=" "
|       |-InlineCommandComment 0x5626fbd62730 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-005"
|       `-TextComment 0x5626fbd62750 <line:1212:1> Text=" "
|-FunctionDecl 0x5626fbcb79b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbcb7928 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd62da0 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x5626fbd62890 <line:1216:3>
|   | `-TextComment 0x5626fbd62860 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd628b0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5626fbd62910 <col:10, col:36>
|   |   `-TextComment 0x5626fbd628e0 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x5626fbd62a00 <line:1218:3, line:1219:50>
|   | |-TextComment 0x5626fbd62930 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x5626fbd62980 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5626fbd629a0 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x5626fbd629c0 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x5626fbd62ad0 <line:1221:3, col:70>
|   | |-TextComment 0x5626fbd62a20 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5626fbd62a70 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5626fbd62a90 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x5626fbd62b20 <line:1223:3>
|   | `-TextComment 0x5626fbd62af0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd62b40 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd62bd0 <col:17, col:40>
|   |   `-TextComment 0x5626fbd62ba0 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x5626fbd62c20 <line:1225:3>
|   | `-TextComment 0x5626fbd62bf0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd62c40 <col:4, line:1227:1> Name="return"
|     `-ParagraphComment 0x5626fbd62d40 <line:1225:11, line:1227:1>
|       |-TextComment 0x5626fbd62c70 <line:1225:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd62c90 <line:1226:3> Text=" "
|       |-InlineCommandComment 0x5626fbd62ce0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-006"
|       `-TextComment 0x5626fbd62d00 <line:1227:1> Text=" "
|-FunctionDecl 0x5626fbcb7c30 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x5626fbcb7a98 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x5626fbcb7b18 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x5626fbd636f0 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x5626fbd62e40 <line:1231:3>
|   | `-TextComment 0x5626fbd62e10 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd62e60 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd62ec0 <col:10, col:44>
|   |   `-TextComment 0x5626fbd62e90 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x5626fbd62f30 <line:1233:3, line:1234:23>
|   | |-TextComment 0x5626fbd62ee0 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x5626fbd62f00 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x5626fbd63120 <line:1236:3, line:1240:74>
|   | |-TextComment 0x5626fbd62f50 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x5626fbd62fa0 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x5626fbd62fc0 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x5626fbd62fe0 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x5626fbd63000 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x5626fbd63020 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x5626fbd63070 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x5626fbd63090 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x5626fbd630b0 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x5626fbd631e0 <line:1242:3, line:1245:32>
|   | |-TextComment 0x5626fbd63140 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x5626fbd63160 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x5626fbd63180 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x5626fbd631a0 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x5626fbd63280 <line:1247:3, line:1249:46>
|   | |-TextComment 0x5626fbd63200 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x5626fbd63220 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x5626fbd63240 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x5626fbd633d0 <line:1251:3, col:65>
|   | |-TextComment 0x5626fbd632a0 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x5626fbd632f0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x5626fbd63310 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x5626fbd63360 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x5626fbd63380 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x5626fbd63420 <line:1253:3>
|   | `-TextComment 0x5626fbd633f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd63440 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd634f0 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x5626fbd634a0 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x5626fbd634c0 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x5626fbd63510 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd635a0 <col:15, col:71>
|   |   `-TextComment 0x5626fbd63570 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x5626fbd635f0 <line:1256:3>
|   | `-TextComment 0x5626fbd635c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd63610 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd63670 <col:11, col:14>
|       `-TextComment 0x5626fbd63640 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcb8f70 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x5626fbd63b30 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x5626fbd63790 <line:1268:3>
|   | `-TextComment 0x5626fbd63760 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd637b0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5626fbd63810 <col:10, col:58>
|   |   `-TextComment 0x5626fbd637e0 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x5626fbd63880 <line:1270:3, line:1271:36>
|   | |-TextComment 0x5626fbd63830 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x5626fbd63850 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x5626fbd638e0 <line:1273:3>
|   | `-TextComment 0x5626fbd638b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd63900 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd63960 <col:9, col:31>
|   |   `-TextComment 0x5626fbd63930 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd639b0 <line:1275:3>
|   | `-TextComment 0x5626fbd63980 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd639d0 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x5626fbd63a50 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x5626fbd63a00 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x5626fbd63a20 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x5626fbd63a70 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x5626fbd63ad0 <col:11, col:37>
|       `-TextComment 0x5626fbd63aa0 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x5626fbcb90d8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x5626fbd64040 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x5626fbd63bd0 <line:1281:3>
|   | `-TextComment 0x5626fbd63ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd63bf0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5626fbd63c50 <col:10, col:63>
|   |   `-TextComment 0x5626fbd63c20 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x5626fbd63cf0 <line:1283:3, line:1285:52>
|   | |-TextComment 0x5626fbd63c70 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x5626fbd63c90 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x5626fbd63cb0 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x5626fbd63d90 <line:1287:3, line:1289:45>
|   | |-TextComment 0x5626fbd63d10 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x5626fbd63d30 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x5626fbd63d50 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x5626fbd63de0 <line:1291:3>
|   | `-TextComment 0x5626fbd63db0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd63e00 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd63e60 <col:9, col:31>
|   |   `-TextComment 0x5626fbd63e30 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd63eb0 <line:1293:3>
|   | `-TextComment 0x5626fbd63e80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd63ed0 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x5626fbd63f50 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x5626fbd63f00 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x5626fbd63f20 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x5626fbd63f70 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5626fbd63fd0 <col:11, col:55>
|       `-TextComment 0x5626fbd63fa0 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x5626fbcb9240 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x5626fbcb9488 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x5626fbcb9368 <line:1311:2, col:31>
| | | `-VarDecl 0x5626fbcb92f0 parent 0x5626fbafd488 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x5626fbcb93e8 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x5626fbcb93d0 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x5626fbcb93b8 <col:9, col:10> 'int' prefix '!' cannot overflow
| |       `-ImplicitCastExpr 0x5626fbcb93a0 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbcb9380 <col:10> 'bool' lvalue Var 0x5626fbcb92f0 'z_sys_post_kernel' 'bool'
| `-FullComment 0x5626fbd64470 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x5626fbd640e0 <line:1299:3>
|   | `-TextComment 0x5626fbd640b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd64100 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5626fbd64160 <col:10, col:64>
|   |   `-TextComment 0x5626fbd64130 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x5626fbd641d0 <line:1301:3, line:1302:62>
|   | |-TextComment 0x5626fbd64180 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x5626fbd641a0 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x5626fbd64220 <line:1304:3>
|   | `-TextComment 0x5626fbd641f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd64240 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd642a0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd64270 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd642f0 <line:1306:3>
|   | `-TextComment 0x5626fbd642c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd64310 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x5626fbd64390 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x5626fbd64340 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x5626fbd64360 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x5626fbd643b0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5626fbd64410 <col:11, col:67>
|       `-TextComment 0x5626fbd643e0 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x5626fbcb9540 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x5626fbd64940 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x5626fbd64510 <line:1326:3>
|   | `-TextComment 0x5626fbd644e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd64530 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5626fbd64590 <col:10, col:29>
|   |   `-TextComment 0x5626fbd64560 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x5626fbd64680 <line:1328:3, line:1332:78>
|   | |-TextComment 0x5626fbd645b0 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x5626fbd645d0 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x5626fbd645f0 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x5626fbd64610 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x5626fbd64630 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x5626fbd646d0 <line:1334:3, col:42>
|   | `-TextComment 0x5626fbd646a0 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x5626fbd64720 <line:1336:3>
|   | `-TextComment 0x5626fbd646f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd64740 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x5626fbd64810 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x5626fbd64770 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x5626fbd64790 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x5626fbd647b0 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x5626fbd647d0 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x5626fbd64860 <line:1341:3>
|   | `-TextComment 0x5626fbd64830 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd64880 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd648e0 <col:11, col:14>
|       `-TextComment 0x5626fbd648b0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcb96a0 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x5626fbd64c20 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x5626fbd649e0 <line:1346:3>
|   | `-TextComment 0x5626fbd649b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd64a00 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5626fbd64a60 <col:10, col:31>
|   |   `-TextComment 0x5626fbd64a30 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x5626fbd64b00 <line:1348:3, line:1350:41>
|   | |-TextComment 0x5626fbd64a80 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x5626fbd64aa0 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x5626fbd64ac0 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x5626fbd64b50 <line:1352:3>
|   | `-TextComment 0x5626fbd64b20 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd64b70 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd64bd0 <col:11, col:14>
|       `-TextComment 0x5626fbd64ba0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcb9810 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x5626fbcb9780 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x5626fbd65190 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x5626fbd64cc0 <line:1357:3>
|   | `-TextComment 0x5626fbd64c90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd64ce0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd64d40 <col:10, col:43>
|   |   `-TextComment 0x5626fbd64d10 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x5626fbd64de0 <line:1359:3, col:71>
|   | |-TextComment 0x5626fbd64d60 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x5626fbd64d80 <col:64> Text="@"
|   | `-TextComment 0x5626fbd64da0 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x5626fbd64e80 <line:1361:3, line:1363:44>
|   | |-TextComment 0x5626fbd64e00 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x5626fbd64e20 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x5626fbd64e40 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x5626fbd64ed0 <line:1365:3>
|   | `-TextComment 0x5626fbd64ea0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd64ef0 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd64f80 <col:16, col:38>
|   |   `-TextComment 0x5626fbd64f50 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x5626fbd64fd0 <line:1367:3>
|   | `-TextComment 0x5626fbd64fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd64ff0 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x5626fbd65050 <col:11, col:14>
|   |   `-TextComment 0x5626fbd65020 <col:11, col:14> Text=" N/A"
|   `-ParagraphComment 0x5626fbd65120 <line:1369:3, line:1370:1>
|     |-TextComment 0x5626fbd65070 <line:1369:3> Text=" "
|     |-InlineCommandComment 0x5626fbd650c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-016"
|     `-TextComment 0x5626fbd650e0 <line:1370:1> Text=" "
|-FunctionDecl 0x5626fbcb99b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x5626fbd654c0 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x5626fbd65230 <line:1374:3>
|   | `-TextComment 0x5626fbd65200 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd65250 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd652b0 <col:10, col:43>
|   |   `-TextComment 0x5626fbd65280 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x5626fbd65300 <line:1376:3, col:63>
|   | `-TextComment 0x5626fbd652d0 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x5626fbd65350 <line:1378:3>
|   | `-TextComment 0x5626fbd65320 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd65370 <col:4, line:1380:1> Name="return"
|     `-ParagraphComment 0x5626fbd65470 <line:1378:11, line:1380:1>
|       |-TextComment 0x5626fbd653a0 <line:1378:11, col:37> Text=" Current custom data value."
|       |-TextComment 0x5626fbd653c0 <line:1379:3> Text=" "
|       |-InlineCommandComment 0x5626fbd65410 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-007"
|       `-TextComment 0x5626fbd65430 <line:1380:1> Text=" "
|-FunctionDecl 0x5626fbcb9c38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x5626fbcb9a98 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5626fbcb9b18 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x5626fbd65b20 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x5626fbd65560 <line:1384:3>
|   | `-TextComment 0x5626fbd65530 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd65580 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5626fbd655e0 <col:10, col:33>
|   |   `-TextComment 0x5626fbd655b0 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x5626fbd65650 <line:1386:3, line:1387:25>
|   | |-TextComment 0x5626fbd65600 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x5626fbd65620 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x5626fbd656a0 <line:1389:3>
|   | `-TextComment 0x5626fbd65670 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd656c0 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd65770 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x5626fbd65720 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x5626fbd65740 <line:1390:3> Text=" "
|   |-ParamCommandComment 0x5626fbd65790 <col:4, line:1391:3> [in] implicitly Param="value" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd65840 <line:1390:16, line:1391:3>
|   |   |-TextComment 0x5626fbd657f0 <line:1390:16, col:27> Text=" Name string"
|   |   `-TextComment 0x5626fbd65810 <line:1391:3> Text=" "
|   |-BlockCommandComment 0x5626fbd65860 <col:4, line:1392:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd658f0 <line:1391:11, line:1392:3>
|   |   |-TextComment 0x5626fbd65890 <line:1391:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd658c0 <line:1392:3> Text=" "
|   |-BlockCommandComment 0x5626fbd65910 <col:4, line:1393:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd65990 <line:1392:11, line:1393:3>
|   |   |-TextComment 0x5626fbd65940 <line:1392:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|   |   `-TextComment 0x5626fbd65960 <line:1393:3> Text=" "
|   |-BlockCommandComment 0x5626fbd659b0 <col:4, line:1394:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd65a30 <line:1393:11, line:1394:3>
|   |   |-TextComment 0x5626fbd659e0 <line:1393:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|   |   `-TextComment 0x5626fbd65a00 <line:1394:3> Text=" "
|   `-BlockCommandComment 0x5626fbd65a50 <col:4, col:39> Name="retval"
|     `-ParagraphComment 0x5626fbd65ab0 <col:11, col:39>
|       `-TextComment 0x5626fbd65a80 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x5626fbcba690 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x5626fbcb9d28 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd65e80 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x5626fbd65bc0 <line:1399:3>
|   | `-TextComment 0x5626fbd65b90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd65be0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x5626fbd65c40 <col:10, col:25>
|   |   `-TextComment 0x5626fbd65c10 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x5626fbd65c90 <line:1401:3, col:27>
|   | `-TextComment 0x5626fbd65c60 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x5626fbd65ce0 <line:1403:3>
|   | `-TextComment 0x5626fbd65cb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd65d00 <col:4, line:1404:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd65db0 <line:1403:20, line:1404:3>
|   |   |-TextComment 0x5626fbd65d60 <line:1403:20, col:29> Text=" Thread ID"
|   |   `-TextComment 0x5626fbd65d80 <line:1404:3> Text=" "
|   `-BlockCommandComment 0x5626fbd65dd0 <col:4, col:60> Name="retval"
|     `-ParagraphComment 0x5626fbd65e30 <col:11, col:60>
|       `-TextComment 0x5626fbd65e00 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x5626fbcba9b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x5626fbcba778 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5626fbcba7f8 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x5626fbcba870 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x5626fbd66530 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x5626fbd65f20 <line:1409:3>
|   | `-TextComment 0x5626fbd65ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd65f40 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5626fbd65fa0 <col:10, col:53>
|   |   `-TextComment 0x5626fbd65f70 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x5626fbd65ff0 <line:1411:3>
|   | `-TextComment 0x5626fbd65fc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd66010 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd660c0 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x5626fbd66070 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x5626fbd66090 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x5626fbd660e0 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd66190 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x5626fbd66140 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x5626fbd66160 <line:1413:3> Text=" "
|   |-ParamCommandComment 0x5626fbd661b0 <col:4, line:1414:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd66260 <line:1413:15, line:1414:3>
|   |   |-TextComment 0x5626fbd66210 <line:1413:15, col:38> Text=" Destination buffer size"
|   |   `-TextComment 0x5626fbd66230 <line:1414:3> Text=" "
|   |-BlockCommandComment 0x5626fbd66280 <col:4, line:1415:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd66300 <line:1414:11, line:1415:3>
|   |   |-TextComment 0x5626fbd662b0 <line:1414:11, col:47> Text=" -ENOSPC Destination buffer too small"
|   |   `-TextComment 0x5626fbd662d0 <line:1415:3> Text=" "
|   |-BlockCommandComment 0x5626fbd66320 <col:4, line:1416:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd663a0 <line:1415:11, line:1416:3>
|   |   |-TextComment 0x5626fbd66350 <line:1415:11, col:38> Text=" -EFAULT Memory access error"
|   |   `-TextComment 0x5626fbd66370 <line:1416:3> Text=" "
|   |-BlockCommandComment 0x5626fbd663c0 <col:4, line:1417:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd66440 <line:1416:11, line:1417:3>
|   |   |-TextComment 0x5626fbd663f0 <line:1416:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|   |   `-TextComment 0x5626fbd66410 <line:1417:3> Text=" "
|   `-BlockCommandComment 0x5626fbd66460 <col:4, col:20> Name="retval"
|     `-ParagraphComment 0x5626fbd664c0 <col:11, col:20>
|       `-TextComment 0x5626fbd66490 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x5626fbcbab40 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x5626fbcbaaa8 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd66890 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x5626fbd665d0 <line:1423:3>
|   | `-TextComment 0x5626fbd665a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd665f0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5626fbd66650 <col:10, col:33>
|   |   `-TextComment 0x5626fbd66620 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x5626fbd666a0 <line:1425:3, col:45>
|   | `-TextComment 0x5626fbd66670 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x5626fbd666f0 <line:1427:3>
|   | `-TextComment 0x5626fbd666c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd66710 <col:4, line:1428:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd667c0 <line:1427:20, line:1428:3>
|   |   |-TextComment 0x5626fbd66770 <line:1427:20, col:29> Text=" Thread ID"
|   |   `-TextComment 0x5626fbd66790 <line:1428:3> Text=" "
|   `-BlockCommandComment 0x5626fbd667e0 <col:4, col:61> Name="retval"
|     `-ParagraphComment 0x5626fbd66840 <col:11, col:61>
|       `-TextComment 0x5626fbd66810 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x5626fbcbadc8 prev 0x5626fbca8ef0 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x5626fbd669e0 <line:1514:3, col:24>
| | `-ParagraphComment 0x5626fbd669b0 <col:3, col:24>
| |   |-TextComment 0x5626fbd66900 <col:3> Text=" "
| |   |-InlineCommandComment 0x5626fbd66950 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5626fbd66970 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5626fbcbae68 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x5626fbcbaec8 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5626fbcbb198 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x5626fbcbb2b0 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x5626fbcbb310 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x5626fbcbb370 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x5626fbcbb3d8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x5626fbcbb5e0 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x5626fbcbb130 'void (*)(struct k_timer *)'
| | `-ParenType 0x5626fbcbb0d0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x5626fbcbb090 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x5626fbafd4e0 'void'
| |     `-PointerType 0x5626fbcbaf90 'struct k_timer *'
| |       `-ElaboratedType 0x5626fbcbaf20 'struct k_timer' sugar
| |         `-RecordType 0x5626fbca8f70 'struct k_timer'
| |           `-Record 0x5626fbcbadc8 'k_timer'
| `-FullComment 0x5626fbd66e70 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x5626fbd66a80 <line:1576:3>
|   | `-TextComment 0x5626fbd66a50 <col:3> Text=" "
|   |-VerbatimLineComment 0x5626fbd66aa0 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x5626fbd66b10 <line:1577:3>
|   | `-TextComment 0x5626fbd66ae0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd66b30 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5626fbd66b90 <col:10, col:37>
|   |   `-TextComment 0x5626fbd66b60 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x5626fbd66c30 <line:1579:3, line:1581:54>
|   | |-TextComment 0x5626fbd66bb0 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x5626fbd66bd0 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x5626fbd66bf0 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x5626fbd66c80 <line:1583:3>
|   | `-TextComment 0x5626fbd66c50 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd66ca0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd66d30 <col:16, col:37>
|   |   `-TextComment 0x5626fbd66d00 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5626fbd66d80 <line:1585:3>
|   | `-TextComment 0x5626fbd66d50 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd66da0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd66e00 <col:11, col:14>
|       `-TextComment 0x5626fbd66dd0 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x5626fbcbd200 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x5626fbcbb130 'void (*)(struct k_timer *)'
| | `-ParenType 0x5626fbcbb0d0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x5626fbcbb090 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x5626fbafd4e0 'void'
| |     `-PointerType 0x5626fbcbaf90 'struct k_timer *'
| |       `-ElaboratedType 0x5626fbcbaf20 'struct k_timer' sugar
| |         `-RecordType 0x5626fbca8f70 'struct k_timer'
| |           `-Record 0x5626fbcbadc8 'k_timer'
| `-FullComment 0x5626fbd67320 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x5626fbd66f10 <line:1590:3>
|   | `-TextComment 0x5626fbd66ee0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5626fbd66f30 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x5626fbd66fa0 <line:1591:3>
|   | `-TextComment 0x5626fbd66f70 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd66fc0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5626fbd67020 <col:10, col:35>
|   |   `-TextComment 0x5626fbd66ff0 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x5626fbd670e0 <line:1593:3, line:1596:24>
|   | |-TextComment 0x5626fbd67040 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x5626fbd67060 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x5626fbd67080 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x5626fbd670a0 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x5626fbd67130 <line:1598:3>
|   | `-TextComment 0x5626fbd67100 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd67150 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd671e0 <col:16, col:37>
|   |   `-TextComment 0x5626fbd671b0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5626fbd67230 <line:1600:3>
|   | `-TextComment 0x5626fbd67200 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd67250 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd672b0 <col:11, col:14>
|       `-TextComment 0x5626fbd67280 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcbd560 <line:1630:1, line:1632:27> line:1630:13 used k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x5626fbcbd2e0 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x5626fbcbd388 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x5626fbcbd428 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x5626fbd67870 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x5626fbd673c0 <line:1620:3>
|   | `-TextComment 0x5626fbd67390 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd673e0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5626fbd67440 <col:10, col:29>
|   |   `-TextComment 0x5626fbd67410 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x5626fbd67490 <line:1622:3, col:60>
|   | `-TextComment 0x5626fbd67460 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x5626fbd674e0 <line:1624:3>
|   | `-TextComment 0x5626fbd674b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd67500 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd675b0 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x5626fbd67560 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5626fbd67580 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x5626fbd675d0 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd67680 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x5626fbd67630 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x5626fbd67650 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x5626fbd676a0 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd67730 <col:18, col:77>
|   |   `-TextComment 0x5626fbd67700 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x5626fbd67780 <line:1628:3>
|   | `-TextComment 0x5626fbd67750 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd677a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd67800 <col:11, col:14>
|       `-TextComment 0x5626fbd677d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcbd670 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x5626fbcbd990 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 used k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcbd760 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x5626fbcbd7d8 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x5626fbcbd850 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x5626fbd67eb0 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x5626fbd67940 <line:1637:3>
|   | `-TextComment 0x5626fbd67910 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd67960 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x5626fbd679c0 <col:10, col:24>
|   |   `-TextComment 0x5626fbd67990 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x5626fbd67a30 <line:1639:3, line:1640:71>
|   | |-TextComment 0x5626fbd679e0 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x5626fbd67a00 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x5626fbd67ad0 <line:1642:3, line:1644:44>
|   | |-TextComment 0x5626fbd67a50 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x5626fbd67a70 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x5626fbd67a90 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x5626fbd67b20 <line:1646:3>
|   | `-TextComment 0x5626fbd67af0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd67b40 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd67bf0 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x5626fbd67ba0 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5626fbd67bc0 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x5626fbd67c10 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd67cc0 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x5626fbd67c70 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x5626fbd67c90 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x5626fbd67ce0 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd67d70 <col:17, col:51>
|   |   `-TextComment 0x5626fbd67d40 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x5626fbd67dc0 <line:1650:3>
|   | `-TextComment 0x5626fbd67d90 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd67de0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd67e40 <col:11, col:14>
|       `-TextComment 0x5626fbd67e10 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcbdb30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbcbdaa0 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x5626fbd68460 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x5626fbd67f50 <line:1656:3>
|   | `-TextComment 0x5626fbd67f20 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd67f70 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5626fbd67fd0 <col:10, col:23>
|   |   `-TextComment 0x5626fbd67fa0 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x5626fbd68040 <line:1658:3, line:1659:43>
|   | |-TextComment 0x5626fbd67ff0 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x5626fbd68010 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x5626fbd680b0 <line:1661:3, line:1662:23>
|   | |-TextComment 0x5626fbd68060 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x5626fbd68080 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x5626fbd68100 <line:1664:3>
|   | `-TextComment 0x5626fbd680d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd68120 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x5626fbd68220 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x5626fbd68150 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x5626fbd68170 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x5626fbd681c0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x5626fbd681e0 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x5626fbd68270 <line:1667:3>
|   | `-TextComment 0x5626fbd68240 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd68290 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd68320 <col:16, col:37>
|   |   `-TextComment 0x5626fbd682f0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5626fbd68370 <line:1669:3>
|   | `-TextComment 0x5626fbd68340 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd68390 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd683f0 <col:11, col:14>
|       `-TextComment 0x5626fbd683c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcbdd40 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbcbdc30 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x5626fbd68870 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x5626fbd68500 <line:1674:3>
|   | `-TextComment 0x5626fbd684d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd68520 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5626fbd68580 <col:10, col:28>
|   |   `-TextComment 0x5626fbd68550 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x5626fbd685f0 <line:1676:3, line:1677:49>
|   | |-TextComment 0x5626fbd685a0 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x5626fbd685c0 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x5626fbd68640 <line:1679:3, col:58>
|   | `-TextComment 0x5626fbd68610 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x5626fbd68690 <line:1681:3>
|   | `-TextComment 0x5626fbd68660 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd686b0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd68740 <col:16, col:37>
|   |   `-TextComment 0x5626fbd68710 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5626fbd68790 <line:1683:3>
|   | `-TextComment 0x5626fbd68760 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd687b0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5626fbd68810 <col:11, col:24>
|       `-TextComment 0x5626fbd687e0 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x5626fbcbded0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbcbde40 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x5626fbd68d50 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x5626fbd68910 <line:1688:3>
|   | `-TextComment 0x5626fbd688e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd68930 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd68990 <col:10, col:49>
|   |   `-TextComment 0x5626fbd68960 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x5626fbd68a50 <line:1690:3, line:1693:73>
|   | |-TextComment 0x5626fbd689b0 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x5626fbd689d0 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x5626fbd689f0 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x5626fbd68a10 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x5626fbd68aa0 <line:1695:3, col:58>
|   | `-TextComment 0x5626fbd68a70 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x5626fbd68b10 <line:1697:3, line:1698:20>
|   | |-TextComment 0x5626fbd68ac0 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x5626fbd68ae0 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x5626fbd68b60 <line:1700:3>
|   | `-TextComment 0x5626fbd68b30 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd68b80 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd68c10 <col:16, col:37>
|   |   `-TextComment 0x5626fbd68be0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5626fbd68c60 <line:1702:3>
|   | `-TextComment 0x5626fbd68c30 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd68c80 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5626fbd68ce0 <col:11, col:24>
|       `-TextComment 0x5626fbd68cb0 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x5626fbcbe0b0 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x5626fbcbdfa0 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x5626fbcbe3d0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbcbe340 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x5626fbd69110 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x5626fbd68df0 <line:1709:3>
|   | `-TextComment 0x5626fbd68dc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd68e10 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5626fbd68e70 <col:10, col:57>
|   |   `-TextComment 0x5626fbd68e40 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x5626fbd68ee0 <line:1711:3, line:1712:68>
|   | |-TextComment 0x5626fbd68e90 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x5626fbd68eb0 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x5626fbd68f30 <line:1714:3>
|   | `-TextComment 0x5626fbd68f00 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd68f50 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd68fe0 <col:16, col:37>
|   |   `-TextComment 0x5626fbd68fb0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5626fbd69030 <line:1716:3>
|   | `-TextComment 0x5626fbd69000 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd69050 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x5626fbd690b0 <col:11, col:44>
|       `-TextComment 0x5626fbd69080 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x5626fbcbe530 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbcbe4a0 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x5626fbcbea68 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x5626fbcbe790 <line:1722:2, col:58>
|   | `-VarDecl 0x5626fbcbe5e8 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x5626fbcbe768 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x5626fbcbe750 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626fbcbe650 <col:22> 's32_t (struct _timeout *)' Function 0x5626fbcbe0b0 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x5626fbcbe6d8 <col:42, col:50> 'struct _timeout *' prefix '&' cannot overflow
|   |       `-MemberExpr 0x5626fbcbe6a8 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x5626fbcbae68
|   |         `-ImplicitCastExpr 0x5626fbcbe690 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5626fbcbe670 <col:43> 'struct k_timer *' lvalue ParmVar 0x5626fbcbe4a0 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x5626fbcbea30 <line:1723:2, col:61>
|     `-ConditionalOperator 0x5626fbcbe9a8 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x5626fbcbe820 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x5626fbcbe800 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x5626fbcbe7e8 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5626fbcbe7a8 <col:10> 'const s32_t':'const int' lvalue Var 0x5626fbcbe5e8 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x5626fbcbe7c8 <col:18> 'int' 0
|       |-CStyleCastExpr 0x5626fbcbe960 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x5626fbcbe8f8 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x5626fbcbe8e0 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5626fbcbe840 <col:30> 'u64_t (u64_t)' Function 0x5626fbc31cf8 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x5626fbcbe938 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x5626fbcbe920 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x5626fbcbe860 <col:52> 'const s32_t':'const int' lvalue Var 0x5626fbcbe5e8 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x5626fbcbe988 <col:61> 'unsigned int' 0
|-FunctionDecl 0x5626fbcbec50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5626fbcbeab0 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x5626fbcbeb30 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x5626fbd69720 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x5626fbd691b0 <line:1727:3>
|   | `-TextComment 0x5626fbd69180 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd691d0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5626fbd69230 <col:10, col:52>
|   |   `-TextComment 0x5626fbd69200 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x5626fbd693a0 <line:1729:3, line:1730:9>
|   | |-TextComment 0x5626fbd69250 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x5626fbd692a0 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x5626fbd692c0 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x5626fbd69310 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x5626fbd69330 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x5626fbd69350 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x5626fbd69410 <line:1732:3, line:1733:73>
|   | |-TextComment 0x5626fbd693c0 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x5626fbd693e0 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x5626fbd69460 <line:1735:3>
|   | `-TextComment 0x5626fbd69430 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd69480 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd69530 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x5626fbd694e0 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5626fbd69500 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x5626fbd69550 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd695e0 <col:20, col:58>
|   |   `-TextComment 0x5626fbd695b0 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x5626fbd69630 <line:1738:3>
|   | `-TextComment 0x5626fbd69600 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd69650 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd696b0 <col:11, col:14>
|       `-TextComment 0x5626fbd69680 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcbee68 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5626fbcbed50 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5626fbcbedd0 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x5626fbcbf008 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x5626fbcbefb8 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x5626fbcbef50 <col:2, col:9> 'void *' lvalue ->user_data 0x5626fbcbb3d8
| |   | `-ImplicitCastExpr 0x5626fbcbef38 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5626fbcbef18 <col:2> 'struct k_timer *' lvalue ParmVar 0x5626fbcbed50 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x5626fbcbefa0 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbcbef80 <col:21> 'void *' lvalue ParmVar 0x5626fbcbedd0 'user_data' 'void *'
| `-FullComment 0x5626fbd69810 <line:1743:3, col:12>
|   `-ParagraphComment 0x5626fbd697e0 <col:3, col:12>
|     |-TextComment 0x5626fbd69790 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd697b0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcbf158 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbcbf048 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x5626fbd69b60 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x5626fbd698b0 <line:1752:3>
|   | `-TextComment 0x5626fbd69880 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd698e0 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x5626fbd69940 <col:10, col:55>
|   |   `-TextComment 0x5626fbd69910 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x5626fbd69990 <line:1754:3>
|   | `-TextComment 0x5626fbd69960 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd699b0 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd69a40 <col:16, col:37>
|   |   `-TextComment 0x5626fbd69a10 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5626fbd69a90 <line:1756:3>
|   | `-TextComment 0x5626fbd69a60 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd69ab0 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x5626fbd69b10 <col:11, col:25>
|       `-TextComment 0x5626fbd69ae0 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x5626fbcbf810 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbcbf228 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x5626fbcbf9d8 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x5626fbcbf938 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x5626fbcbf920 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5626fbcbf8f0 <col:9, col:16> 'void *' lvalue ->user_data 0x5626fbcbb3d8
|         `-ImplicitCastExpr 0x5626fbcbf8d8 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x5626fbcbf8b8 <col:9> 'struct k_timer *' lvalue ParmVar 0x5626fbcbf228 'timer' 'struct k_timer *'
|-FunctionDecl 0x5626fbcbfa88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x5626fbd6a040 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x5626fbd69c00 <line:1773:3>
|   | `-TextComment 0x5626fbd69bd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd69c20 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5626fbd69c80 <col:10, col:28>
|   |   `-TextComment 0x5626fbd69c50 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x5626fbd69cf0 <line:1775:3, line:1776:19>
|   | |-TextComment 0x5626fbd69ca0 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x5626fbd69cc0 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x5626fbd69d40 <line:1778:3>
|   | `-TextComment 0x5626fbd69d10 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd69d60 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x5626fbd69f10 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x5626fbd69d90 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x5626fbd69de0 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x5626fbd69e00 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x5626fbd69e20 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x5626fbd69e40 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x5626fbd69e60 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x5626fbd69eb0 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x5626fbd69f60 <line:1785:3>
|   | `-TextComment 0x5626fbd69f30 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd69f80 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x5626fbd69fe0 <col:11, col:42>
|       `-TextComment 0x5626fbd69fb0 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x5626fbcbfbf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x5626fbcbfd98 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x5626fbcbfd08 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5626fbcbfd18 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x5626fbcbfd58 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x5626fbcbfd40 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     `-IntegerLiteral 0x5626fbcbfd20 <col:16> 'int' 0
| |-DeprecatedAttr 0x5626fbcbfc98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x5626fbd6a320 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x5626fbd6a0e0 <line:1790:3>
|   | `-TextComment 0x5626fbd6a0b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6a100 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5626fbd6a160 <col:10, col:51>
|   |   `-TextComment 0x5626fbd6a130 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x5626fbd6a200 <line:1792:3, line:1794:11>
|   | |-TextComment 0x5626fbd6a180 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x5626fbd6a1a0 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x5626fbd6a1c0 <line:1794:3, col:11> Text=" kconfig."
|   |-ParagraphComment 0x5626fbd6a250 <line:1796:3>
|   | `-TextComment 0x5626fbd6a220 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6a270 <col:4, col:56> Name="retval"
|     `-ParagraphComment 0x5626fbd6a2d0 <col:11, col:56>
|       `-TextComment 0x5626fbd6a2a0 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x5626fbcbfe58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x5626fbcbffa8 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x5626fbcbff68 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x5626fbcbff78 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x5626fbcbfef8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x5626fbd6a520 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x5626fbd6a3c0 <line:1809:3>
|   | `-TextComment 0x5626fbd6a390 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6a3e0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5626fbd6a440 <col:10, col:52>
|   |   `-TextComment 0x5626fbd6a410 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x5626fbd6a4e0 <line:1811:3, line:1813:11>
|     |-TextComment 0x5626fbd6a460 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x5626fbd6a480 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x5626fbd6a4a0 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x5626fbcc0060 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x5626fbcc0228 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x5626fbcc01f0 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x5626fbcc01c8 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbcc0198 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x5626fbcc0180 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5626fbcc0100 <col:16> 's64_t (void)' Function 0x5626fbcbfa88 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x5626fbd6aa90 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x5626fbd6a5c0 <line:1824:3>
|   | `-TextComment 0x5626fbd6a590 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6a5e0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5626fbd6a640 <col:10, col:45>
|   |   `-TextComment 0x5626fbd6a610 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x5626fbd6a6b0 <line:1826:3, line:1827:16>
|   | |-TextComment 0x5626fbd6a660 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x5626fbd6a680 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x5626fbd6a7a0 <line:1829:3, line:1833:38>
|   | |-TextComment 0x5626fbd6a6d0 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x5626fbd6a6f0 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x5626fbd6a710 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x5626fbd6a730 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x5626fbd6a750 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x5626fbd6a7f0 <line:1835:3>
|   | `-TextComment 0x5626fbd6a7c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6a810 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x5626fbd6a960 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x5626fbd6a840 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x5626fbd6a860 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x5626fbd6a880 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x5626fbd6a8a0 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x5626fbd6a8c0 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x5626fbd6a8e0 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x5626fbd6a900 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x5626fbd6a9b0 <line:1842:3>
|   | `-TextComment 0x5626fbd6a980 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6a9d0 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x5626fbd6aa30 <col:11, col:66>
|       `-TextComment 0x5626fbd6aa00 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x5626fbcc03c0 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x5626fbcc02b0 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x5626fbcc0b48 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x5626fbcc0570 <line:1862:2, col:21>
| | | |-VarDecl 0x5626fbcc0478 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x5626fbcc04f0 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x5626fbcc0600 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x5626fbcc0588 <col:2> 's64_t':'long long' lvalue Var 0x5626fbcc0478 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x5626fbcc05e0 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x5626fbcc05c8 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x5626fbcc05a8 <col:11> 's64_t (void)' Function 0x5626fbcbfa88 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x5626fbcc0700 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x5626fbcc0620 <col:2> 's64_t':'long long' lvalue Var 0x5626fbcc04f0 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x5626fbcc06e0 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x5626fbcc06b0 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x5626fbcc0640 <col:10> 's64_t':'long long' lvalue Var 0x5626fbcc0478 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x5626fbcc06c8 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x5626fbcc0698 <col:19, col:20> 's64_t':'long long' lvalue prefix '*' cannot overflow
| | |       `-ImplicitCastExpr 0x5626fbcc0680 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5626fbcc0660 <col:20> 's64_t *' lvalue ParmVar 0x5626fbcc02b0 'reftime' 's64_t *'
| | |-BinaryOperator 0x5626fbcc07a8 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x5626fbcc0758 <col:2, col:3> 's64_t':'long long' lvalue prefix '*' cannot overflow
| | | | `-ImplicitCastExpr 0x5626fbcc0740 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5626fbcc0720 <col:3> 's64_t *' lvalue ParmVar 0x5626fbcc02b0 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x5626fbcc0790 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626fbcc0770 <col:13> 's64_t':'long long' lvalue Var 0x5626fbcc0478 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x5626fbcc0800 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x5626fbcc07e8 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbcc07c8 <col:9> 's64_t':'long long' lvalue Var 0x5626fbcc04f0 'delta' 's64_t':'long long'
| `-FullComment 0x5626fbd6ae70 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x5626fbd6ab30 <line:1850:3>
|   | `-TextComment 0x5626fbd6ab00 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6ab50 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5626fbd6abb0 <col:10, col:27>
|   |   `-TextComment 0x5626fbd6ab80 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x5626fbd6ac20 <line:1852:3, line:1853:50>
|   | |-TextComment 0x5626fbd6abd0 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x5626fbd6abf0 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x5626fbd6ac70 <line:1855:3>
|   | `-TextComment 0x5626fbd6ac40 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6ac90 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6ad40 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x5626fbd6acf0 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x5626fbd6ad10 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x5626fbd6ad90 <line:1858:3>
|   | `-TextComment 0x5626fbd6ad60 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6adb0 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5626fbd6ae10 <col:11, col:24>
|       `-TextComment 0x5626fbd6ade0 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x5626fbcc0ca0 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x5626fbcc0b90 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x5626fbcc0eb8 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x5626fbcc0e80 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x5626fbcc0e58 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5626fbcc0e08 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x5626fbcc0df0 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbcc0d48 <col:16> 's64_t (s64_t *)' Function 0x5626fbcc03c0 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x5626fbcc0e30 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbcc0d68 <col:31> 's64_t *' lvalue ParmVar 0x5626fbcc0b90 'reftime' 's64_t *'
| `-FullComment 0x5626fbd6b310 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x5626fbd6af10 <line:1872:3>
|   | `-TextComment 0x5626fbd6aee0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6af30 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd6af90 <col:10, col:44>
|   |   `-TextComment 0x5626fbd6af60 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x5626fbd6b000 <line:1874:3, line:1875:50>
|   | |-TextComment 0x5626fbd6afb0 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x5626fbd6afd0 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x5626fbd6b0c0 <line:1877:3, line:1880:41>
|   | |-TextComment 0x5626fbd6b020 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x5626fbd6b040 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x5626fbd6b060 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x5626fbd6b080 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x5626fbd6b110 <line:1882:3>
|   | `-TextComment 0x5626fbd6b0e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6b130 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6b1e0 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x5626fbd6b190 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x5626fbd6b1b0 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x5626fbd6b230 <line:1885:3>
|   | `-TextComment 0x5626fbd6b200 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6b250 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5626fbd6b2b0 <col:11, col:24>
|       `-TextComment 0x5626fbd6b280 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x5626fbcc0f68 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x5626fbcc1108 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x5626fbcc1098 <line:1902:2, col:29>
| |   `-CallExpr 0x5626fbcc1078 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x5626fbcc1060 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x5626fbcc1008 <col:9> 'u32_t (void)' Function 0x5626fbc66cb0 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x5626fbd6b5c0 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x5626fbd6b3b0 <line:1893:3>
|   | `-TextComment 0x5626fbd6b380 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6b3d0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5626fbd6b430 <col:10, col:34>
|   |   `-TextComment 0x5626fbd6b400 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x5626fbd6b4a0 <line:1895:3, line:1896:9>
|   | |-TextComment 0x5626fbd6b450 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x5626fbd6b470 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x5626fbd6b4f0 <line:1898:3>
|   | `-TextComment 0x5626fbd6b4c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6b510 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5626fbd6b570 <col:11, col:57>
|       `-TextComment 0x5626fbd6b540 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x5626fbcc1120 prev 0x5626fbc9ec98 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x5626fbd6b6e0 <line:1910:3, col:24>
| | `-ParagraphComment 0x5626fbd6b6b0 <col:3, col:24>
| |   |-TextComment 0x5626fbd6b630 <col:3> Text=" "
| |   |-InlineCommandComment 0x5626fbd6b650 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5626fbd6b670 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5626fbcc11b0 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x5626fbcc1220 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x5626fbcc1270 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x5626fbcc1328 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5626fbcc1430 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x5626fbcc1490 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x5626fbcc1430 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x5626fbcc1328 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x5626fbcc16d8 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x5626fbcc1540 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x5626fbcc15b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x5626fbcc19f0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbcc18e8 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x5626fbd6bab0 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x5626fbd6b780 <line:1952:3>
|   | `-TextComment 0x5626fbd6b750 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6b7a0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5626fbd6b800 <col:10, col:29>
|   |   `-TextComment 0x5626fbd6b7d0 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x5626fbd6b850 <line:1954:3, col:67>
|   | `-TextComment 0x5626fbd6b820 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x5626fbd6b8a0 <line:1956:3>
|   | `-TextComment 0x5626fbd6b870 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6b8f0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6b980 <col:16, col:37>
|   |   `-TextComment 0x5626fbd6b950 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5626fbd6b9d0 <line:1958:3>
|   | `-TextComment 0x5626fbd6b9a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6b9f0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd6ba50 <col:11, col:14>
|       `-TextComment 0x5626fbd6ba20 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcc3480 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbcc33f0 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x5626fbd6c050 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x5626fbd6bb50 <line:1963:3>
|   | `-TextComment 0x5626fbd6bb20 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6bb70 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5626fbd6bbd0 <col:10, col:36>
|   |   `-TextComment 0x5626fbd6bba0 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x5626fbd6bd40 <line:1965:3, line:1969:35>
|   | |-TextComment 0x5626fbd6bbf0 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x5626fbd6bc40 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x5626fbd6bc60 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x5626fbd6bc80 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x5626fbd6bca0 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x5626fbd6bcc0 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x5626fbd6bce0 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x5626fbd6bd90 <line:1971:3>
|   | `-TextComment 0x5626fbd6bd60 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6bdb0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd6be10 <col:9, col:31>
|   |   `-TextComment 0x5626fbd6bde0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd6be60 <line:1973:3>
|   | `-TextComment 0x5626fbd6be30 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6be80 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6bf10 <col:16, col:37>
|   |   `-TextComment 0x5626fbd6bee0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5626fbd6bf60 <line:1975:3>
|   | `-TextComment 0x5626fbd6bf30 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6bf80 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd6bfe0 <col:11, col:14>
|       `-TextComment 0x5626fbd6bfb0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcc3720 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5626fbcc3580 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc3600 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x5626fbd6c670 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x5626fbd6c0f0 <line:1980:3>
|   | `-TextComment 0x5626fbd6c0c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6c110 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd6c170 <col:10, col:50>
|   |   `-TextComment 0x5626fbd6c140 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x5626fbd6c290 <line:1982:3, line:1984:24>
|   | |-TextComment 0x5626fbd6c190 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x5626fbd6c1e0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5626fbd6c200 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x5626fbd6c220 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x5626fbd6c240 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x5626fbd6c2e0 <line:1986:3>
|   | `-TextComment 0x5626fbd6c2b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6c300 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd6c360 <col:9, col:31>
|   |   `-TextComment 0x5626fbd6c330 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd6c3b0 <line:1988:3>
|   | `-TextComment 0x5626fbd6c380 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6c3d0 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6c480 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x5626fbd6c430 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd6c450 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6c4a0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd6c530 <col:15, col:40>
|   |   `-TextComment 0x5626fbd6c500 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5626fbd6c580 <line:1991:3>
|   | `-TextComment 0x5626fbd6c550 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6c5a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd6c600 <col:11, col:14>
|       `-TextComment 0x5626fbd6c5d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcc39c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5626fbcc3820 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc38a0 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x5626fbd6cd60 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x5626fbd6c710 <line:1996:3>
|   | `-TextComment 0x5626fbd6c6e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6c730 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd6c790 <col:10, col:39>
|   |   `-TextComment 0x5626fbd6c760 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x5626fbd6c8d0 <line:1998:3, line:2001:50>
|   | |-TextComment 0x5626fbd6c7b0 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x5626fbd6c800 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5626fbd6c820 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x5626fbd6c840 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x5626fbd6c860 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x5626fbd6c880 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x5626fbd6c920 <line:2003:3>
|   | `-TextComment 0x5626fbd6c8f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6c940 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd6c9a0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd6c970 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd6c9f0 <line:2005:3>
|   | `-TextComment 0x5626fbd6c9c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6ca10 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6cac0 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x5626fbd6ca70 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd6ca90 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6cae0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd6cb70 <col:15, col:40>
|   |   `-TextComment 0x5626fbd6cb40 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5626fbd6cbc0 <line:2008:3>
|   | `-TextComment 0x5626fbd6cb90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6cbe0 <col:4, line:2009:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd6cc60 <line:2008:11, line:2009:3>
|   |   |-TextComment 0x5626fbd6cc10 <line:2008:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd6cc30 <line:2009:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6cc80 <col:4, col:78> Name="retval"
|     `-ParagraphComment 0x5626fbd6cce0 <col:11, col:78>
|       `-TextComment 0x5626fbd6ccb0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x5626fbcc3bd8 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5626fbcc3ac0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc3b40 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x5626fbd6d380 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x5626fbd6ce00 <line:2014:3>
|   | `-TextComment 0x5626fbd6cdd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6ce20 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd6ce80 <col:10, col:40>
|   |   `-TextComment 0x5626fbd6ce50 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x5626fbd6cfa0 <line:2016:3, line:2018:24>
|   | |-TextComment 0x5626fbd6cea0 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x5626fbd6cef0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5626fbd6cf10 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x5626fbd6cf30 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x5626fbd6cf50 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x5626fbd6cff0 <line:2020:3>
|   | `-TextComment 0x5626fbd6cfc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6d010 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd6d070 <col:9, col:31>
|   |   `-TextComment 0x5626fbd6d040 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd6d0c0 <line:2022:3>
|   | `-TextComment 0x5626fbd6d090 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6d0e0 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6d190 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x5626fbd6d140 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd6d160 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6d1b0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd6d240 <col:15, col:40>
|   |   `-TextComment 0x5626fbd6d210 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5626fbd6d290 <line:2025:3>
|   | `-TextComment 0x5626fbd6d260 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6d2b0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd6d310 <col:11, col:14>
|       `-TextComment 0x5626fbd6d2e0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcc3df8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5626fbcc3ce0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc3d60 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x5626fbd6da80 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x5626fbd6d420 <line:2030:3>
|   | `-TextComment 0x5626fbd6d3f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6d440 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd6d4a0 <col:10, col:40>
|   |   `-TextComment 0x5626fbd6d470 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x5626fbd6d5e0 <line:2032:3, line:2035:50>
|   | |-TextComment 0x5626fbd6d4c0 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x5626fbd6d510 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5626fbd6d530 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x5626fbd6d550 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x5626fbd6d570 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x5626fbd6d590 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x5626fbd6d630 <line:2037:3>
|   | `-TextComment 0x5626fbd6d600 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6d650 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd6d6b0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd6d680 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd6d700 <line:2039:3>
|   | `-TextComment 0x5626fbd6d6d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6d720 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6d7d0 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x5626fbd6d780 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd6d7a0 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6d7f0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd6d880 <col:15, col:40>
|   |   `-TextComment 0x5626fbd6d850 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5626fbd6d8d0 <line:2042:3>
|   | `-TextComment 0x5626fbd6d8a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6d900 <col:4, line:2043:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd6d980 <line:2042:11, line:2043:3>
|   |   |-TextComment 0x5626fbd6d930 <line:2042:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd6d950 <line:2043:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6d9a0 <col:4, col:78> Name="retval"
|     `-ParagraphComment 0x5626fbd6da00 <col:11, col:78>
|       `-TextComment 0x5626fbd6d9d0 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x5626fbcc4140 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x5626fbcc3f00 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc3f80 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x5626fbcc4000 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x5626fbd6e180 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x5626fbd6db20 <line:2048:3>
|   | `-TextComment 0x5626fbd6daf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6db40 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd6dba0 <col:10, col:40>
|   |   `-TextComment 0x5626fbd6db70 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x5626fbd6dcc0 <line:2050:3, line:2052:45>
|   | |-TextComment 0x5626fbd6dbc0 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x5626fbd6dc10 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x5626fbd6dc30 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x5626fbd6dc50 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x5626fbd6dc70 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x5626fbd6dd10 <line:2054:3>
|   | `-TextComment 0x5626fbd6dce0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6dd30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd6dd90 <col:9, col:31>
|   |   `-TextComment 0x5626fbd6dd60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd6dde0 <line:2056:3>
|   | `-TextComment 0x5626fbd6ddb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6de00 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6deb0 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x5626fbd6de60 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd6de80 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6ded0 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd6df80 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x5626fbd6df30 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x5626fbd6df50 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6dfa0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd6e030 <col:15, col:40>
|   |   `-TextComment 0x5626fbd6e000 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5626fbd6e080 <line:2060:3>
|   | `-TextComment 0x5626fbd6e050 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6e0a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd6e100 <col:11, col:14>
|       `-TextComment 0x5626fbd6e0d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcc4658 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x5626fbcc4250 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc42d0 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x5626fbcc4350 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x5626fbd6e9a0 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x5626fbd6e220 <line:2065:3>
|   | `-TextComment 0x5626fbd6e1f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6e240 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5626fbd6e2a0 <col:10, col:58>
|   |   `-TextComment 0x5626fbd6e270 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x5626fbd6e3e0 <line:2067:3, line:2070:19>
|   | |-TextComment 0x5626fbd6e2c0 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x5626fbd6e310 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x5626fbd6e330 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x5626fbd6e350 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x5626fbd6e370 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x5626fbd6e390 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x5626fbd6e430 <line:2072:3>
|   | `-TextComment 0x5626fbd6e400 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6e450 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd6e4b0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd6e480 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd6e500 <line:2074:3>
|   | `-TextComment 0x5626fbd6e4d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6e520 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6e5d0 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x5626fbd6e580 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd6e5a0 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6e5f0 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd6e6a0 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x5626fbd6e650 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x5626fbd6e670 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6e6c0 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd6e750 <col:15, col:58>
|   |   `-TextComment 0x5626fbd6e720 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x5626fbd6e7a0 <line:2078:3>
|   | `-TextComment 0x5626fbd6e770 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6e7c0 <col:4, line:2079:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd6e840 <line:2078:11, line:2079:3>
|   |   |-TextComment 0x5626fbd6e7f0 <line:2078:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd6e810 <line:2079:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6e860 <col:4, col:43> Name="retval"
|   | `-ParagraphComment 0x5626fbd6e8c0 <col:11, col:43>
|   |   `-TextComment 0x5626fbd6e890 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x5626fbd6e910 <line:2081:1>
|     `-TextComment 0x5626fbd6e8e0 <col:1> Text=" "
|-FunctionDecl 0x5626fbcc48f8 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x5626fbcc4760 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc47d8 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x5626fbd6f070 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x5626fbd6ea40 <line:2085:3>
|   | `-TextComment 0x5626fbd6ea10 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6ea60 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x5626fbd6eac0 <col:10, col:55>
|   |   `-TextComment 0x5626fbd6ea90 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x5626fbd6ebe0 <line:2087:3, line:2089:67>
|   | |-TextComment 0x5626fbd6eae0 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x5626fbd6eb30 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x5626fbd6eb50 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x5626fbd6eb70 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x5626fbd6eb90 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x5626fbd6ec30 <line:2091:3>
|   | `-TextComment 0x5626fbd6ec00 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6ec50 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd6ecb0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd6ec80 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd6ed00 <line:2093:3>
|   | `-TextComment 0x5626fbd6ecd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6ed20 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6edd0 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x5626fbd6ed80 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd6eda0 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6edf0 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd6ee80 <col:15, col:45>
|   |   `-TextComment 0x5626fbd6ee50 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   |-ParagraphComment 0x5626fbd6eed0 <line:2096:3>
|   | `-TextComment 0x5626fbd6eea0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6eef0 <col:4, line:2097:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd6ef70 <line:2096:11, line:2097:3>
|   |   |-TextComment 0x5626fbd6ef20 <line:2096:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd6ef40 <line:2097:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6ef90 <col:4, col:34> Name="retval"
|     `-ParagraphComment 0x5626fbd6eff0 <col:11, col:34>
|       `-TextComment 0x5626fbd6efc0 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x5626fbcc4b98 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcc4a00 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc4a78 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x5626fbd6f750 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x5626fbd6f110 <line:2102:3>
|   | `-TextComment 0x5626fbd6f0e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6f130 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5626fbd6f190 <col:10, col:38>
|   |   `-TextComment 0x5626fbd6f160 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x5626fbd6f280 <line:2104:3, line:2105:46>
|   | |-TextComment 0x5626fbd6f1b0 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x5626fbd6f200 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5626fbd6f220 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x5626fbd6f240 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x5626fbd6f2d0 <line:2107:3>
|   | `-TextComment 0x5626fbd6f2a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6f2f0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5626fbd6f3d0 <col:9, col:72>
|   |   |-TextComment 0x5626fbd6f320 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5626fbd6f370 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5626fbd6f390 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5626fbd6f420 <line:2109:3>
|   | `-TextComment 0x5626fbd6f3f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6f440 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6f4f0 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x5626fbd6f4a0 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd6f4c0 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6f510 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd6f5f0 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x5626fbd6f570 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x5626fbd6f590 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5626fbd6f5b0 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5626fbd6f640 <line:2114:3>
|   | `-TextComment 0x5626fbd6f610 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6f660 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x5626fbd6f6e0 <line:2114:11, line:2115:48>
|       |-TextComment 0x5626fbd6f690 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x5626fbd6f6b0 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x5626fbcc4e40 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5626fbcc4ca0 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc4d20 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x5626fbcc50e8 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x5626fbcc50a8 <line:2135:2, col:72>
| |   `-CallExpr 0x5626fbcc5078 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x5626fbcc5060 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbcc4ef0 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x5626fbc1a730 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x5626fbcc4f78 <col:36, col:44> 'sys_sflist_t *' prefix '&' cannot overflow
| |     | `-MemberExpr 0x5626fbcc4f48 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5626fbcc11b0
| |     |   `-ImplicitCastExpr 0x5626fbcc4f30 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5626fbcc4f10 <col:37> 'struct k_queue *' lvalue ParmVar 0x5626fbcc4ca0 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x5626fbcc4fd8 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x5626fbcc4fc0 <col:68> 'void *' <LValueToRValue> part_of_explicit_cast
| |         `-DeclRefExpr 0x5626fbcc4f90 <col:68> 'void *' lvalue ParmVar 0x5626fbcc4d20 'data' 'void *'
| `-FullComment 0x5626fbd6fd80 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x5626fbd6f7f0 <line:2120:3>
|   | `-TextComment 0x5626fbd6f7c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6f810 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd6f870 <col:10, col:41>
|   |   `-TextComment 0x5626fbd6f840 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x5626fbd6f9a0 <line:2122:3, line:2124:76>
|   | |-TextComment 0x5626fbd6f890 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x5626fbd6f8e0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5626fbd6f910 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x5626fbd6f930 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x5626fbd6f950 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x5626fbd6f9f0 <line:2126:3>
|   | `-TextComment 0x5626fbd6f9c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6fa10 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x5626fbd6fa70 <col:9, col:30>
|   |   `-TextComment 0x5626fbd6fa40 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x5626fbd6fac0 <line:2128:3>
|   | `-TextComment 0x5626fbd6fa90 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6fae0 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd6fb90 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x5626fbd6fb40 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd6fb60 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x5626fbd6fbb0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd6fc40 <col:15, col:40>
|   |   `-TextComment 0x5626fbd6fc10 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5626fbd6fc90 <line:2131:3>
|   | `-TextComment 0x5626fbd6fc60 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd6fcb0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x5626fbd6fd10 <col:11, col:40>
|       `-TextComment 0x5626fbd6fce0 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x5626fbcc5240 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5626fbcc5128 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbcc51a8 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x5626fbcc5fe8 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x5626fbcc5368 <line:2154:2, col:20>
| | | `-VarDecl 0x5626fbcc5300 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x5626fbcc5e00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x5626fbcc5480 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x5626fbcc5380 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x5626fbcc5300 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x5626fbcc5458 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x5626fbcc5440 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5626fbcc53a0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x5626fbcc5428 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&' cannot overflow
| | | |     `-MemberExpr 0x5626fbcc53f8 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5626fbcc11b0
| | | |       `-ImplicitCastExpr 0x5626fbcc53e0 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x5626fbcc53c0 <col:28> 'struct k_queue *' lvalue ParmVar 0x5626fbcc5128 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x5626fbcc5bb0 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x5626fbcc5540 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x5626fbcc54a0 <col:43> 'sys_sfnode_t *' lvalue Var 0x5626fbcc5300 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x5626fbcc5558 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x5626fbcc5520 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x5626fbcc54f8 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x5626fbcc54c0 <col:23> 'int' 0
| | | |-BinaryOperator 0x5626fbcc5c88 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x5626fbcc5bd0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x5626fbcc5300 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x5626fbcc5c48 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x5626fbcc5c30 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5626fbcc5bf0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5626fbc28708 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x5626fbcc5c70 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5626fbcc5c10 <col:43> 'sys_sfnode_t *' lvalue Var 0x5626fbcc5300 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x5626fbcc5de8 <col:49, line:2160:2>
| | |   `-IfStmt 0x5626fbcc5dd0 <line:2157:3, line:2159:3>
| | |     |-BinaryOperator 0x5626fbcc5d50 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x5626fbcc5d38 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x5626fbcc5ca8 <col:7> 'sys_sfnode_t *' lvalue Var 0x5626fbcc5300 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x5626fbcc5d10 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x5626fbcc5cf8 <col:32> 'void *' <LValueToRValue> part_of_explicit_cast
| | |     |     `-DeclRefExpr 0x5626fbcc5cc8 <col:32> 'void *' lvalue ParmVar 0x5626fbcc51a8 'data' 'void *'
| | |     `-CompoundStmt 0x5626fbcc5db8 <col:38, line:2159:3>
| | |       `-ReturnStmt 0x5626fbcc5da8 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |         `-ImplicitCastExpr 0x5626fbcc5d90 <col:16> 'bool' <IntegralToBoolean>
| | |           `-IntegerLiteral 0x5626fbcc5d70 <col:16> 'int' 0
| | |-CallExpr 0x5626fbcc5f18 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x5626fbcc5f00 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x5626fbcc5e38 <col:2> 'void (struct k_queue *, void *)' Function 0x5626fbcc3720 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x5626fbcc5f48 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x5626fbcc5e58 <col:17> 'struct k_queue *' lvalue ParmVar 0x5626fbcc5128 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x5626fbcc5f60 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626fbcc5e78 <col:24> 'void *' lvalue ParmVar 0x5626fbcc51a8 'data' 'void *'
| | `-ReturnStmt 0x5626fbcc5fb0 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x5626fbcc5f98 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x5626fbcc5f78 <col:16> 'int' 1
| `-FullComment 0x5626fbd703a0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x5626fbd6fe20 <line:2139:3>
|   | `-TextComment 0x5626fbd6fdf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd6fe40 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x5626fbd6fea0 <col:10, col:72>
|   |   `-TextComment 0x5626fbd6fe70 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x5626fbd6ffc0 <line:2141:3, line:2143:78>
|   | |-TextComment 0x5626fbd6fec0 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x5626fbd6ff10 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5626fbd6ff30 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x5626fbd6ff50 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x5626fbd6ff70 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x5626fbd70010 <line:2145:3>
|   | `-TextComment 0x5626fbd6ffe0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd70030 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x5626fbd70090 <col:9, col:30>
|   |   `-TextComment 0x5626fbd70060 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x5626fbd700e0 <line:2147:3>
|   | `-TextComment 0x5626fbd700b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd70100 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd701b0 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x5626fbd70160 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5626fbd70180 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x5626fbd701d0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd70260 <col:15, col:40>
|   |   `-TextComment 0x5626fbd70230 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5626fbd702b0 <line:2150:3>
|   | `-TextComment 0x5626fbd70280 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd702d0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x5626fbd70330 <col:11, col:52>
|       `-TextComment 0x5626fbd70300 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x5626fbcc6158 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbcc6040 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x5626fbd708e0 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x5626fbd70440 <line:2167:3>
|   | `-TextComment 0x5626fbd70410 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd70460 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5626fbd704c0 <col:10, col:56>
|   |   `-TextComment 0x5626fbd70490 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x5626fbd70530 <line:2169:3, line:2170:59>
|   | |-TextComment 0x5626fbd704e0 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x5626fbd70500 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x5626fbd70580 <line:2172:3>
|   | `-TextComment 0x5626fbd70550 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd705a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd70600 <col:9, col:31>
|   |   `-TextComment 0x5626fbd705d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd70650 <line:2174:3>
|   | `-TextComment 0x5626fbd70620 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd70670 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd70700 <col:16, col:37>
|   |   `-TextComment 0x5626fbd706d0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5626fbd70750 <line:2176:3>
|   | `-TextComment 0x5626fbd70720 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd70770 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x5626fbd707f0 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x5626fbd707a0 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x5626fbd707c0 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x5626fbd70810 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x5626fbd70870 <col:11, col:34>
|       `-TextComment 0x5626fbd70840 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x5626fbcc62c0 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbcc6228 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x5626fbcc64c8 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x5626fbcc6488 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x5626fbcc6460 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x5626fbcc6420 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x5626fbcc6408 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5626fbcc6368 <col:14> 'bool (sys_sflist_t *)' Function 0x5626fbc27ea8 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x5626fbcc63f0 <col:34, col:42> 'sys_sflist_t *' prefix '&' cannot overflow
|           `-MemberExpr 0x5626fbcc63c0 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5626fbcc11b0
|             `-ImplicitCastExpr 0x5626fbcc63a8 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x5626fbcc6388 <col:35> 'struct k_queue *' lvalue ParmVar 0x5626fbcc6228 'queue' 'struct k_queue *'
|-FunctionDecl 0x5626fbcc6618 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbcc6508 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x5626fbd70c80 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x5626fbd70980 <line:2187:3>
|   | `-TextComment 0x5626fbd70950 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd709a0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd70a00 <col:10, col:44>
|   |   `-TextComment 0x5626fbd709d0 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x5626fbd70a50 <line:2189:3, col:61>
|   | `-TextComment 0x5626fbd70a20 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x5626fbd70aa0 <line:2191:3>
|   | `-TextComment 0x5626fbd70a70 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd70ac0 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd70b50 <col:16, col:37>
|   |   `-TextComment 0x5626fbd70b20 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5626fbd70ba0 <line:2193:3>
|   | `-TextComment 0x5626fbd70b70 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd70bc0 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x5626fbd70c20 <col:11, col:51>
|       `-TextComment 0x5626fbd70bf0 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x5626fbcc6780 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbcc66e8 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x5626fbcc6a48 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x5626fbcc6a10 <line:2199:2, col:70>
|     `-CallExpr 0x5626fbcc69c8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x5626fbcc69b0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbcc6828 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x5626fbcc16d8 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x5626fbcc6900 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5626fbcc68e8 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5626fbcc6848 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc26db0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x5626fbcc68d0 <col:48, col:56> 'sys_sflist_t *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x5626fbcc68a0 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5626fbcc11b0
|       |     `-ImplicitCastExpr 0x5626fbcc6888 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5626fbcc6868 <col:49> 'struct k_queue *' lvalue ParmVar 0x5626fbcc66e8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5626fbcc69f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x5626fbcc6928 <col:16> 'int' 0
|-FunctionDecl 0x5626fbcc7490 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbcc6a88 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x5626fbd71020 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x5626fbd70d20 <line:2203:3>
|   | `-TextComment 0x5626fbd70cf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd70d40 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd70da0 <col:10, col:44>
|   |   `-TextComment 0x5626fbd70d70 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x5626fbd70df0 <line:2205:3, col:61>
|   | `-TextComment 0x5626fbd70dc0 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x5626fbd70e40 <line:2207:3>
|   | `-TextComment 0x5626fbd70e10 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd70e60 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd70ef0 <col:16, col:37>
|   |   `-TextComment 0x5626fbd70ec0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5626fbd70f40 <line:2209:3>
|   | `-TextComment 0x5626fbd70f10 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd70f60 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x5626fbd70fc0 <col:11, col:51>
|       `-TextComment 0x5626fbd70f90 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x5626fbcc75f8 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbcc7560 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x5626fbcc7888 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x5626fbcc7820 <line:2215:2, col:70>
|     `-CallExpr 0x5626fbcc77d8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x5626fbcc77c0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbcc76a0 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x5626fbcc16d8 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x5626fbcc7778 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5626fbcc7760 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5626fbcc76c0 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5626fbc27000 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x5626fbcc7748 <col:48, col:56> 'sys_sflist_t *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x5626fbcc7718 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5626fbcc11b0
|       |     `-ImplicitCastExpr 0x5626fbcc7700 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5626fbcc76e0 <col:49> 'struct k_queue *' lvalue ParmVar 0x5626fbcc7560 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5626fbcc7808 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x5626fbcc77a0 <col:16> 'int' 0
|-RecordDecl 0x5626fbcc78a0 prev 0x5626fbc9ed48 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x5626fbcc7940 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x5626fbcc7d58 prev 0x5626fbc9edf8 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x5626fbd71140 <line:2523:4, col:7>
| | `-ParagraphComment 0x5626fbd71110 <col:4, col:7>
| |   |-TextComment 0x5626fbd71090 <col:4> Text=" "
| |   |-TextComment 0x5626fbd710b0 <col:5> Text="@"
| |   `-TextComment 0x5626fbd710d0 <col:6, col:7> Text="} "
| `-FieldDecl 0x5626fbcc7df8 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x5626fbcc8038 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x5626fbc44b50 'uintptr_t' sugar
|   |-Typedef 0x5626fbb86178 'uintptr_t'
|   `-BuiltinType 0x5626fbafd640 'unsigned long'
|-RecordDecl 0x5626fbcc8090 prev 0x5626fbc9eea8 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x5626fbcc8120 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5626fbcc8190 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x5626fbcc8280 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x5626fbcc82e0 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x5626fbcc8340 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x5626fbcc83a0 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x5626fbbb9860 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x5626fbbb9638 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x5626fbbb96b0 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x5626fbbb9728 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x5626fbd71730 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x5626fbd711e0 <line:2675:3>
|   | `-TextComment 0x5626fbd711b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd71200 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5626fbd71260 <col:10, col:29>
|   |   `-TextComment 0x5626fbd71230 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x5626fbd712b0 <line:2677:3, col:67>
|   | `-TextComment 0x5626fbd71280 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x5626fbd71300 <line:2679:3>
|   | `-TextComment 0x5626fbd712d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd71320 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd713d0 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x5626fbd71380 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5626fbd713a0 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x5626fbd713f0 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd714a0 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x5626fbd71450 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x5626fbd71470 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x5626fbd714c0 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd71550 <col:22, col:67>
|   |   `-TextComment 0x5626fbd71520 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x5626fbd715a0 <line:2683:3>
|   | `-TextComment 0x5626fbd71570 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd715c0 <col:4, line:2685:1> Name="return"
|     `-ParagraphComment 0x5626fbd716c0 <line:2683:11, line:2685:1>
|       |-TextComment 0x5626fbd715f0 <line:2683:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd71610 <line:2684:3> Text=" "
|       |-InlineCommandComment 0x5626fbd71660 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5626fbd71680 <line:2685:1> Text=" "
|-FunctionDecl 0x5626fbbb9b00 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x5626fbbb9970 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x5626fbbb99e8 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x5626fbd71cc0 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x5626fbd717d0 <line:2691:3>
|   | `-TextComment 0x5626fbd717a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd717f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5626fbd71850 <col:10, col:29>
|   |   `-TextComment 0x5626fbd71820 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x5626fbd71920 <line:2693:3, line:2696:72>
|   | |-TextComment 0x5626fbd71870 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x5626fbd71890 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x5626fbd718b0 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x5626fbd718d0 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x5626fbd71970 <line:2698:3>
|   | `-TextComment 0x5626fbd71940 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd71990 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd71a40 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x5626fbd719f0 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5626fbd71a10 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x5626fbd71a60 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd71af0 <col:22, col:67>
|   |   `-TextComment 0x5626fbd71ac0 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x5626fbd71b40 <line:2701:3>
|   | `-TextComment 0x5626fbd71b10 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd71b60 <col:4, line:2703:1> Name="return"
|     `-ParagraphComment 0x5626fbd71c60 <line:2701:11, line:2703:1>
|       |-TextComment 0x5626fbd71b90 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|       |-TextComment 0x5626fbd71bb0 <line:2702:3> Text=" "
|       |-InlineCommandComment 0x5626fbd71c00 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5626fbd71c20 <line:2703:1> Text=" "
|-FunctionDecl 0x5626fbbb9d18 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x5626fbbb9c00 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x5626fbd721c0 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x5626fbd71d60 <line:2709:3>
|   | `-TextComment 0x5626fbd71d30 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd71d80 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd71de0 <col:10, col:44>
|   |   `-TextComment 0x5626fbd71db0 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x5626fbd71e80 <line:2711:3, line:2713:46>
|   | |-TextComment 0x5626fbd71e00 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x5626fbd71e20 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x5626fbd71e40 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x5626fbd71ed0 <line:2715:3>
|   | `-TextComment 0x5626fbd71ea0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd71ef0 <col:4, line:2716:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd71fa0 <line:2715:16, line:2716:3>
|   |   |-TextComment 0x5626fbd71f50 <line:2715:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5626fbd71f70 <line:2716:3> Text=" "
|   |-BlockCommandComment 0x5626fbd71fc0 <col:4, line:2717:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd72040 <line:2716:11, line:2717:3>
|   |   |-TextComment 0x5626fbd71ff0 <line:2716:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd72010 <line:2717:3> Text=" "
|   `-BlockCommandComment 0x5626fbd72060 <col:4, line:2719:1> Name="retval"
|     `-ParagraphComment 0x5626fbd72160 <line:2717:11, line:2719:1>
|       |-TextComment 0x5626fbd72090 <line:2717:11, col:46> Text=" -EAGAIN when object is still in use"
|       |-TextComment 0x5626fbd720b0 <line:2718:3> Text=" "
|       |-InlineCommandComment 0x5626fbd72100 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5626fbd72120 <line:2719:1> Text=" "
|-FunctionDecl 0x5626fbbb9fa8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x5626fbbb9e10 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x5626fbbb9e88 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x5626fbd72930 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x5626fbd72260 <line:2723:3>
|   | `-TextComment 0x5626fbd72230 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd72280 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd722e0 <col:10, col:39>
|   |   `-TextComment 0x5626fbd722b0 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x5626fbd72400 <line:2725:3, col:55>
|   | |-TextComment 0x5626fbd72300 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x5626fbd72350 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x5626fbd72370 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x5626fbd723c0 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x5626fbd72450 <line:2727:3>
|   | `-TextComment 0x5626fbd72420 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd72470 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd724d0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd724a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd72520 <line:2729:3>
|   | `-TextComment 0x5626fbd724f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd72540 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd725f0 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x5626fbd725a0 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5626fbd725c0 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x5626fbd72610 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd726a0 <col:15, col:44>
|   |   `-TextComment 0x5626fbd72670 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x5626fbd726f0 <line:2732:3>
|   | `-TextComment 0x5626fbd726c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd72710 <col:4, line:2733:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd72790 <line:2732:11, line:2733:3>
|   |   |-TextComment 0x5626fbd72740 <line:2732:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd72760 <line:2733:3> Text=" "
|   `-BlockCommandComment 0x5626fbd727b0 <col:4, line:2735:1> Name="retval"
|     `-ParagraphComment 0x5626fbd728b0 <line:2733:11, line:2735:1>
|       |-TextComment 0x5626fbd727e0 <line:2733:11, col:35> Text=" -ENOMEM if stack is full"
|       |-TextComment 0x5626fbd72800 <line:2734:3> Text=" "
|       |-InlineCommandComment 0x5626fbd72850 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5626fbd72870 <line:2735:1> Text=" "
|-FunctionDecl 0x5626fbbba2e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbbba0b0 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x5626fbbba128 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x5626fbbba1a0 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x5626fbd73320 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x5626fbd729d0 <line:2739:3>
|   | `-TextComment 0x5626fbd729a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd729f0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5626fbd72a50 <col:10, col:38>
|   |   `-TextComment 0x5626fbd72a20 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x5626fbd72ba0 <line:2741:3, line:2742:47>
|   | |-TextComment 0x5626fbd72a70 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x5626fbd72ac0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x5626fbd72ae0 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x5626fbd72b00 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x5626fbd72b50 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x5626fbd72bf0 <line:2744:3>
|   | `-TextComment 0x5626fbd72bc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd72c10 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5626fbd72cf0 <col:9, col:72>
|   |   |-TextComment 0x5626fbd72c40 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5626fbd72c90 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5626fbd72cb0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5626fbd72d40 <line:2746:3>
|   | `-TextComment 0x5626fbd72d10 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd72d60 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd72e10 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x5626fbd72dc0 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5626fbd72de0 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x5626fbd72e30 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd72ee0 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x5626fbd72e90 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x5626fbd72eb0 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x5626fbd72f00 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd72fe0 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x5626fbd72f60 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x5626fbd72f80 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5626fbd72fa0 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5626fbd73030 <line:2752:3>
|   | `-TextComment 0x5626fbd73000 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd73050 <col:4, line:2753:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd730d0 <line:2752:11, line:2753:3>
|   |   |-TextComment 0x5626fbd73080 <line:2752:11, col:39> Text=" 0 Element popped from stack."
|   |   `-TextComment 0x5626fbd730a0 <line:2753:3> Text=" "
|   |-BlockCommandComment 0x5626fbd730f0 <col:4, line:2754:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd73170 <line:2753:11, line:2754:3>
|   |   |-TextComment 0x5626fbd73120 <line:2753:11, col:43> Text=" -EBUSY Returned without waiting."
|   |   `-TextComment 0x5626fbd73140 <line:2754:3> Text=" "
|   `-BlockCommandComment 0x5626fbd73190 <col:4, line:2756:1> Name="retval"
|     `-ParagraphComment 0x5626fbd73290 <line:2754:11, line:2756:1>
|       |-TextComment 0x5626fbd731c0 <line:2754:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5626fbd731e0 <line:2755:3> Text=" "
|       |-InlineCommandComment 0x5626fbd73230 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5626fbd73250 <line:2756:1> Text=" "
|-RecordDecl 0x5626fbbba3f8 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x5626fbd73440 <line:2778:4, col:7>
|   `-ParagraphComment 0x5626fbd73410 <col:4, col:7>
|     |-TextComment 0x5626fbd73390 <col:4> Text=" "
|     |-TextComment 0x5626fbd733b0 <col:5> Text="@"
|     `-TextComment 0x5626fbd733d0 <col:6, col:7> Text="} "
|-RecordDecl 0x5626fbbba4a8 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x5626fbbbbd68 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x5626fbbbbcf0 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x5626fbbbbc90 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x5626fbbbbc50 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x5626fbafd580 'int'
|       |-PointerType 0x5626fbbbbad0 'struct k_poll_event *'
|       | `-ElaboratedType 0x5626fbbbba60 'struct k_poll_event' sugar
|       |   `-RecordType 0x5626fbca9020 'struct k_poll_event'
|       |     `-Record 0x5626fbcf4e38 'k_poll_event'
|       `-TypedefType 0x5626fbb9b850 'u32_t' sugar
|         |-Typedef 0x5626fbb8c5e0 'u32_t'
|         `-BuiltinType 0x5626fbafd620 'unsigned int'
|-RecordDecl 0x5626fbbbbdc0 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x5626fbbbbe78 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x5626fbbbbef0 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x5626fbbbbf78 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x5626fbbbc2a8 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x5626fbbbc240 'void (*)(struct k_work *)'
| | `-ParenType 0x5626fbbbc1e0 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x5626fbbbc1a0 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x5626fbafd4e0 'void'
| |     `-PointerType 0x5626fbbbc0a0 'struct k_work *'
| |       `-ElaboratedType 0x5626fbbbc030 'struct k_work' sugar
| |         `-RecordType 0x5626fbbba480 'struct k_work'
| |           `-Record 0x5626fbbbc5d8 'k_work'
| `-FullComment 0x5626fbd73980 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x5626fbd734e0 <line:2797:3>
|   | `-TextComment 0x5626fbd734b0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5626fbd73500 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x5626fbd73570 <line:2798:3>
|   | `-TextComment 0x5626fbd73540 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd73590 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd735f0 <col:10, col:42>
|   |   `-TextComment 0x5626fbd735c0 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x5626fbd73660 <line:2800:3, line:2801:52>
|   | |-TextComment 0x5626fbd73610 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x5626fbd73630 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x5626fbd736b0 <line:2803:3>
|   | `-TextComment 0x5626fbd73680 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd736d0 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd73760 <col:15, col:40>
|   |   `-TextComment 0x5626fbd73730 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x5626fbd737b0 <line:2805:3>
|   | `-TextComment 0x5626fbd73780 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd737d0 <col:4, line:2807:1> Name="return"
|     `-ParagraphComment 0x5626fbd738d0 <line:2805:11, line:2807:1>
|       |-TextComment 0x5626fbd73800 <line:2805:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd73820 <line:2806:3> Text=" "
|       |-InlineCommandComment 0x5626fbd73870 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5626fbd73890 <line:2807:1> Text=" "
|-RecordDecl 0x5626fbbbc328 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x5626fbd73aa0 <line:2811:3, col:24>
| | `-ParagraphComment 0x5626fbd73a70 <col:3, col:24>
| |   |-TextComment 0x5626fbd739f0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5626fbd73a10 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5626fbd73a30 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5626fbbbc3f8 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x5626fbbbc468 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x5626fbbbc4b8 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x5626fbbbc588 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x5626fbbbc5d8 prev 0x5626fbbba3f8 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x5626fbbbc670 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x5626fbbbc6f8 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x5626fbbbc820 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x5626fbbbc870 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x5626fbbbc938 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x5626fbbbc9a8 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x5626fbbbcbb8 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x5626fbbbcc68 prev 0x5626fbbba4a8 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x5626fbbbcd08 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x5626fbbbcdb8 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x5626fbbbce30 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x5626fbbbce98 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x5626fbbbcef8 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x5626fbbbcf68 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x5626fbbbcfd0 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x5626fbbbd040 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x5626fbbbd2f0 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x5626fbbbd160 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x5626fbbbd1d8 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x5626fbbbd7f8 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x5626fbbbd7b0 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x5626fbbbd3d8 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*' cannot overflow
| |   | `-ImplicitCastExpr 0x5626fbbbd3c0 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5626fbbbd3a0 <col:3> 'struct k_work *' lvalue ParmVar 0x5626fbbbd160 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x5626fbbbd798 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x5626fbbbd770 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x5626fbbbd6a8 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x5626fbbbd470 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x5626fbbbd448 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x5626fbbbd410 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x5626fbbbd700 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x5626fbbbd4d0 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x5626fbbbd1d8 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x5626fbbbd728 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x5626fbbbd530 <col:13> 'int' 0
| `-FullComment 0x5626fbd73fb0 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x5626fbd73b40 <line:2876:3>
|   | `-TextComment 0x5626fbd73b10 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd73b60 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5626fbd73bc0 <col:10, col:33>
|   |   `-TextComment 0x5626fbd73b90 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x5626fbd73c10 <line:2878:3, col:74>
|   | `-TextComment 0x5626fbd73be0 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x5626fbd73c60 <line:2880:3>
|   | `-TextComment 0x5626fbd73c30 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd73c80 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd73d30 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x5626fbd73ce0 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x5626fbd73d00 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x5626fbd73d50 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd73de0 <col:18, col:70>
|   |   `-TextComment 0x5626fbd73db0 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5626fbd73e30 <line:2883:3>
|   | `-TextComment 0x5626fbd73e00 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd73e50 <col:4, line:2885:1> Name="return"
|     `-ParagraphComment 0x5626fbd73f50 <line:2883:11, line:2885:1>
|       |-TextComment 0x5626fbd73e80 <line:2883:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd73ea0 <line:2884:3> Text=" "
|       |-InlineCommandComment 0x5626fbd73ef0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5626fbd73f10 <line:2885:1> Text=" "
|-FunctionDecl 0x5626fbbbd9e0 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x5626fbbbd838 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5626fbbbd8c8 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x5626fbbbe278 <line:2915:1, line:2919:1>
| | `-IfStmt 0x5626fbbbe238 <line:2916:2, line:2918:2>
| |   |-UnaryOperator 0x5626fbbbe0d0 <line:2916:6, col:64> 'int' prefix '!' cannot overflow
| |   | `-CallExpr 0x5626fbbbe088 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x5626fbbbe070 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5626fbbbda90 <col:7> 'bool (atomic_t *, int)' Function 0x5626fbb9c170 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x5626fbbbe0b8 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x5626fbbbdae8 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x5626fbbbc820
| |   |   |   `-ImplicitCastExpr 0x5626fbbbdad0 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x5626fbbbdab0 <col:31> 'struct k_work *' lvalue ParmVar 0x5626fbbbd8c8 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x5626fbbbdff0 <col:44> 'int' EnumConstant 0x5626fbbbc588 'K_WORK_STATE_PENDING' 'int'
| |   `-CompoundStmt 0x5626fbbbe220 <col:67, line:2918:2>
| |     `-CallExpr 0x5626fbbbe1c0 <line:2917:3, col:38> 'void'
| |       |-ImplicitCastExpr 0x5626fbbbe1a8 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbbbe0e8 <col:3> 'void (struct k_queue *, void *)' Function 0x5626fbcc3720 'k_queue_append' 'void (struct k_queue *, void *)'
| |       |-UnaryOperator 0x5626fbbbe170 <col:18, col:27> 'struct k_queue *' prefix '&' cannot overflow
| |       | `-MemberExpr 0x5626fbbbe140 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x5626fbbbc3f8
| |       |   `-ImplicitCastExpr 0x5626fbbbe128 <col:19> 'struct k_work_q *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5626fbbbe108 <col:19> 'struct k_work_q *' lvalue ParmVar 0x5626fbbbd838 'work_q' 'struct k_work_q *'
| |       `-ImplicitCastExpr 0x5626fbbbe208 <col:34> 'void *' <BitCast>
| |         `-ImplicitCastExpr 0x5626fbbbe1f0 <col:34> 'struct k_work *' <LValueToRValue>
| |           `-DeclRefExpr 0x5626fbbbe188 <col:34> 'struct k_work *' lvalue ParmVar 0x5626fbbbd8c8 'work' 'struct k_work *'
| `-FullComment 0x5626fbd74860 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x5626fbd74050 <line:2892:3>
|   | `-TextComment 0x5626fbd74020 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd74070 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5626fbd740d0 <col:10, col:29>
|   |   `-TextComment 0x5626fbd740a0 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x5626fbd742e0 <line:2894:3, line:2899:15>
|   | |-TextComment 0x5626fbd740f0 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x5626fbd74140 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5626fbd74160 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x5626fbd74180 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x5626fbd741d0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x5626fbd741f0 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x5626fbd74210 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x5626fbd74230 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x5626fbd74250 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x5626fbd74270 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x5626fbd74330 <line:2901:3>
|   | `-TextComment 0x5626fbd74300 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd74350 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x5626fbd743d0 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x5626fbd74380 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x5626fbd743a0 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x5626fbd74420 <line:2905:3>
|   | `-TextComment 0x5626fbd743f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd74440 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd744a0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd74470 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd744f0 <line:2907:3>
|   | `-TextComment 0x5626fbd744c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd74510 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd745c0 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x5626fbd74570 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5626fbd74590 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x5626fbd745e0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd74670 <col:15, col:36>
|   |   `-TextComment 0x5626fbd74640 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5626fbd746c0 <line:2910:3>
|   | `-TextComment 0x5626fbd74690 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd746e0 <col:4, line:2912:1> Name="return"
|     `-ParagraphComment 0x5626fbd747e0 <line:2910:11, line:2912:1>
|       |-TextComment 0x5626fbd74710 <line:2910:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd74730 <line:2911:3> Text=" "
|       |-InlineCommandComment 0x5626fbd74780 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5626fbd747a0 <line:2912:1> Text=" "
|-FunctionDecl 0x5626fbbbe468 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x5626fbbbe2b8 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5626fbbbe348 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x5626fbbbeba8 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x5626fbbbe5d0 <line:2945:2, col:18>
| | | `-VarDecl 0x5626fbbbe530 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x5626fbbbe5b8 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x5626fbbbe598 <col:15> 'int' 16
| | |-IfStmt 0x5626fbbbeb20 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-UnaryOperator 0x5626fbbbe6f0 <line:2947:6, col:64> 'int' prefix '!' cannot overflow
| | | | `-CallExpr 0x5626fbbbe6a8 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x5626fbbbe690 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5626fbbbe5e8 <col:7> 'bool (atomic_t *, int)' Function 0x5626fbb9c170 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x5626fbbbe6d8 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x5626fbbbe640 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x5626fbbbc820
| | | |   |   `-ImplicitCastExpr 0x5626fbbbe628 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x5626fbbbe608 <col:31> 'struct k_work *' lvalue ParmVar 0x5626fbbbe348 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x5626fbbbe670 <col:44> 'int' EnumConstant 0x5626fbbbc588 'K_WORK_STATE_PENDING' 'int'
| | | `-CompoundStmt 0x5626fbbbeb00 <col:67, line:2956:2>
| | |   |-BinaryOperator 0x5626fbbbe8c8 <line:2948:3, col:50> 'int' '='
| | |   | |-DeclRefExpr 0x5626fbbbe708 <col:3> 'int' lvalue Var 0x5626fbbbe530 'ret' 'int'
| | |   | `-CallExpr 0x5626fbbbe868 <col:9, col:50> 's32_t':'int'
| | |   |   |-ImplicitCastExpr 0x5626fbbbe850 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | |   |   | `-DeclRefExpr 0x5626fbbbe728 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5626fbcc39c0 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | |   |   |-UnaryOperator 0x5626fbbbe7b0 <col:30, col:39> 'struct k_queue *' prefix '&' cannot overflow
| | |   |   | `-MemberExpr 0x5626fbbbe780 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x5626fbbbc3f8
| | |   |   |   `-ImplicitCastExpr 0x5626fbbbe768 <col:31> 'struct k_work_q *' <LValueToRValue>
| | |   |   |     `-DeclRefExpr 0x5626fbbbe748 <col:31> 'struct k_work_q *' lvalue ParmVar 0x5626fbbbe2b8 'work_q' 'struct k_work_q *'
| | |   |   `-ImplicitCastExpr 0x5626fbbbe8b0 <col:46> 'void *' <BitCast>
| | |   |     `-ImplicitCastExpr 0x5626fbbbe898 <col:46> 'struct k_work *' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x5626fbbbe7c8 <col:46> 'struct k_work *' lvalue ParmVar 0x5626fbbbe348 'work' 'struct k_work *'
| | |   `-IfStmt 0x5626fbbbeae8 <line:2953:3, line:2955:3>
| | |     |-BinaryOperator 0x5626fbbbe940 <line:2953:7, col:14> 'int' '!='
| | |     | |-ImplicitCastExpr 0x5626fbbbe928 <col:7> 'int' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x5626fbbbe8e8 <col:7> 'int' lvalue Var 0x5626fbbbe530 'ret' 'int'
| | |     | `-IntegerLiteral 0x5626fbbbe908 <col:14> 'int' 0
| | |     `-CompoundStmt 0x5626fbbbead0 <col:17, line:2955:3>
| | |       `-CallExpr 0x5626fbbbea88 <line:2954:4, col:54> 'void'
| | |         |-ImplicitCastExpr 0x5626fbbbea70 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x5626fbbbe960 <col:4> 'void (atomic_t *, int)' Function 0x5626fbb9cbc0 'atomic_clear_bit' 'void (atomic_t *, int)'
| | |         |-ImplicitCastExpr 0x5626fbbbeab8 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | |         | `-MemberExpr 0x5626fbbbe9b8 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x5626fbbbc820
| | |         |   `-ImplicitCastExpr 0x5626fbbbe9a0 <col:21> 'struct k_work *' <LValueToRValue>
| | |         |     `-DeclRefExpr 0x5626fbbbe980 <col:21> 'struct k_work *' lvalue ParmVar 0x5626fbbbe348 'work' 'struct k_work *'
| | |         `-DeclRefExpr 0x5626fbbbe9e8 <col:34> 'int' EnumConstant 0x5626fbbbc588 'K_WORK_STATE_PENDING' 'int'
| | `-ReturnStmt 0x5626fbbbeb70 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x5626fbbbeb58 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbbbeb38 <col:9> 'int' lvalue Var 0x5626fbbbe530 'ret' 'int'
| `-FullComment 0x5626fbd750a0 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x5626fbd74900 <line:2922:3>
|   | `-TextComment 0x5626fbd748d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd74920 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5626fbd74980 <col:10, col:53>
|   |   `-TextComment 0x5626fbd74950 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x5626fbd74a70 <line:2924:3, line:2928:71>
|   | |-TextComment 0x5626fbd749a0 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x5626fbd749c0 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x5626fbd749e0 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x5626fbd74a00 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x5626fbd74a20 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x5626fbd74ac0 <line:2930:3, col:61>
|   | `-TextComment 0x5626fbd74a90 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x5626fbd74b10 <line:2932:3>
|   | `-TextComment 0x5626fbd74ae0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd74b30 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd74b90 <col:9, col:31>
|   |   `-TextComment 0x5626fbd74b60 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd74be0 <line:2934:3>
|   | `-TextComment 0x5626fbd74bb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd74c00 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd74cb0 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x5626fbd74c60 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5626fbd74c80 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x5626fbd74cd0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd74d60 <col:15, col:36>
|   |   `-TextComment 0x5626fbd74d30 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5626fbd74db0 <line:2937:3>
|   | `-TextComment 0x5626fbd74d80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd74dd0 <col:4, line:2938:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd74e50 <line:2937:11, line:2938:3>
|   |   |-TextComment 0x5626fbd74e00 <line:2937:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   |   `-TextComment 0x5626fbd74e20 <line:2938:3> Text=" "
|   |-BlockCommandComment 0x5626fbd74e70 <col:4, line:2939:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd74ef0 <line:2938:11, line:2939:3>
|   |   |-TextComment 0x5626fbd74ea0 <line:2938:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   |   `-TextComment 0x5626fbd74ec0 <line:2939:3> Text=" "
|   `-BlockCommandComment 0x5626fbd74f10 <col:4, line:2941:1> Name="retval"
|     `-ParagraphComment 0x5626fbd75010 <line:2939:11, line:2941:1>
|       |-TextComment 0x5626fbd74f40 <line:2939:11, col:20> Text=" 0 Success"
|       |-TextComment 0x5626fbd74f60 <line:2940:3> Text=" "
|       |-InlineCommandComment 0x5626fbd74fb0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5626fbd74fd0 <line:2941:1> Text=" "
|-FunctionDecl 0x5626fbbbed00 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x5626fbbbebf8 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x5626fbbbef68 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x5626fbbbef28 <line:2976:2, col:58>
| |   `-CallExpr 0x5626fbbbeec8 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x5626fbbbeeb0 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbbbeda8 <col:9> 'bool (const atomic_t *, int)' Function 0x5626fbb98ce0 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x5626fbbbef10 <col:25, col:31> 'const atomic_t *' <NoOp>
| |     | `-ImplicitCastExpr 0x5626fbbbeef8 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x5626fbbbee00 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x5626fbbbc820
| |     |     `-ImplicitCastExpr 0x5626fbbbede8 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5626fbbbedc8 <col:25> 'struct k_work *' lvalue ParmVar 0x5626fbbbebf8 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x5626fbbbee30 <col:38> 'int' EnumConstant 0x5626fbbbc588 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x5626fbd75660 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x5626fbd75140 <line:2962:3>
|   | `-TextComment 0x5626fbd75110 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd75160 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd751c0 <col:10, col:42>
|   |   `-TextComment 0x5626fbd75190 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x5626fbd752b0 <line:2964:3, line:2965:9>
|   | |-TextComment 0x5626fbd751e0 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x5626fbd75230 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5626fbd75250 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x5626fbd75270 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x5626fbd75300 <line:2967:3>
|   | `-TextComment 0x5626fbd752d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd75320 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd75380 <col:9, col:31>
|   |   `-TextComment 0x5626fbd75350 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd753d0 <line:2969:3>
|   | `-TextComment 0x5626fbd753a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd753f0 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd75480 <col:15, col:36>
|   |   `-TextComment 0x5626fbd75450 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5626fbd754d0 <line:2971:3>
|   | `-TextComment 0x5626fbd754a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd754f0 <col:4, line:2973:1> Name="return"
|     `-ParagraphComment 0x5626fbd755f0 <line:2971:11, line:2973:1>
|       |-TextComment 0x5626fbd75520 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|       |-TextComment 0x5626fbd75540 <line:2972:3> Text=" "
|       |-InlineCommandComment 0x5626fbd75590 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5626fbd755b0 <line:2973:1> Text=" "
|-FunctionDecl 0x5626fbbbf3e0 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x5626fbbbf120 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5626fbbbf198 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5626fbbbf210 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbbbf290 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x5626fbd75e60 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x5626fbd75700 <line:2980:3>
|   | `-TextComment 0x5626fbd756d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd75720 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5626fbd75780 <col:10, col:28>
|   |   `-TextComment 0x5626fbd75750 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x5626fbd75870 <line:2982:3, line:2983:41>
|   | |-TextComment 0x5626fbd757a0 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x5626fbd757f0 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x5626fbd75810 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x5626fbd75830 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x5626fbd758c0 <line:2985:3>
|   | `-TextComment 0x5626fbd75890 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd758e0 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd759b0 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x5626fbd75960 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5626fbd75980 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x5626fbd759d0 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd75ab0 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x5626fbd75a30 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x5626fbd75a50 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x5626fbd75a70 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x5626fbd75ad0 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd75bd0 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x5626fbd75b30 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x5626fbd75b50 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x5626fbd75b70 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x5626fbd75b90 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x5626fbd75bf0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd75c80 <col:15, col:51>
|   |   `-TextComment 0x5626fbd75c50 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x5626fbd75cd0 <line:2993:3>
|   | `-TextComment 0x5626fbd75ca0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd75cf0 <col:4, line:2995:1> Name="return"
|     `-ParagraphComment 0x5626fbd75df0 <line:2993:11, line:2995:1>
|       |-TextComment 0x5626fbd75d20 <line:2993:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd75d40 <line:2994:3> Text=" "
|       |-InlineCommandComment 0x5626fbd75d90 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5626fbd75db0 <line:2995:1> Text=" "
|-FunctionDecl 0x5626fbbbf708 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x5626fbbbf4f0 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5626fbbbf568 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5626fbbbf5e0 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbbbf660 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x5626fbd76640 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x5626fbd75f00 <line:3001:3>
|   | `-TextComment 0x5626fbd75ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd75f20 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5626fbd75f80 <col:10, col:40>
|   |   `-TextComment 0x5626fbd75f50 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x5626fbd76070 <line:3003:3, line:3007:21>
|   | |-TextComment 0x5626fbd75fa0 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x5626fbd75fc0 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x5626fbd75fe0 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x5626fbd76000 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x5626fbd76020 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x5626fbd760c0 <line:3009:3>
|   | `-TextComment 0x5626fbd76090 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd760e0 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd76190 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x5626fbd76140 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5626fbd76160 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x5626fbd761b0 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd76290 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x5626fbd76210 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x5626fbd76230 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x5626fbd76250 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x5626fbd762b0 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd763b0 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x5626fbd76310 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x5626fbd76330 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x5626fbd76350 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x5626fbd76370 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x5626fbd763d0 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd76460 <col:15, col:51>
|   |   `-TextComment 0x5626fbd76430 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x5626fbd764b0 <line:3017:3>
|   | `-TextComment 0x5626fbd76480 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd764d0 <col:4, line:3019:1> Name="return"
|     `-ParagraphComment 0x5626fbd765d0 <line:3017:11, line:3019:1>
|       |-TextComment 0x5626fbd76500 <line:3017:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd76520 <line:3018:3> Text=" "
|       |-InlineCommandComment 0x5626fbd76570 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5626fbd76590 <line:3019:1> Text=" "
|-FunctionDecl 0x5626fbbbfa60 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x5626fbbbf8c8 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5626fbbbf940 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x5626fbd76b70 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x5626fbd766e0 <line:3025:3>
|   | `-TextComment 0x5626fbd766b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd76700 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5626fbd76760 <col:10, col:41>
|   |   `-TextComment 0x5626fbd76730 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x5626fbd767d0 <line:3027:3, line:3028:17>
|   | |-TextComment 0x5626fbd76780 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x5626fbd767a0 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x5626fbd76820 <line:3030:3>
|   | `-TextComment 0x5626fbd767f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd76840 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd768f0 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x5626fbd768a0 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5626fbd768c0 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x5626fbd76910 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd769a0 <col:18, col:70>
|   |   `-TextComment 0x5626fbd76970 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5626fbd769f0 <line:3033:3>
|   | `-TextComment 0x5626fbd769c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd76a10 <col:4, line:3035:1> Name="return"
|     `-ParagraphComment 0x5626fbd76b10 <line:3033:11, line:3035:1>
|       |-TextComment 0x5626fbd76a40 <line:3033:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd76a60 <line:3034:3> Text=" "
|       |-InlineCommandComment 0x5626fbd76ab0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5626fbd76ad0 <line:3035:1> Text=" "
|-FunctionDecl 0x5626fbbbfda8 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x5626fbbbfb60 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5626fbbbfbf0 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5626fbbbfc68 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x5626fbd777e0 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x5626fbd76c10 <line:3040:3>
|   | `-TextComment 0x5626fbd76be0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd76c30 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5626fbd76c90 <col:10, col:37>
|   |   `-TextComment 0x5626fbd76c60 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x5626fbd76f00 <line:3042:3, line:3046:37>
|   | |-TextComment 0x5626fbd76cb0 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5626fbd76d00 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5626fbd76d20 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x5626fbd76d40 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x5626fbd76d90 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x5626fbd76db0 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x5626fbd76e00 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x5626fbd76e20 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x5626fbd76e40 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x5626fbd76e60 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x5626fbd76e80 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x5626fbd77010 <line:3048:3, line:3053:28>
|   | |-TextComment 0x5626fbd76f20 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x5626fbd76f40 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x5626fbd76f60 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x5626fbd76f80 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x5626fbd76fa0 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x5626fbd76fc0 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x5626fbd77060 <line:3055:3>
|   | `-TextComment 0x5626fbd77030 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd77080 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x5626fbd77100 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x5626fbd770b0 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x5626fbd770d0 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x5626fbd77150 <line:3059:3>
|   | `-TextComment 0x5626fbd77120 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd77170 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd771d0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd771a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd77220 <line:3061:3>
|   | `-TextComment 0x5626fbd771f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd77240 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd772f0 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x5626fbd772a0 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5626fbd772c0 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x5626fbd77310 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd773c0 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x5626fbd77370 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5626fbd77390 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x5626fbd773e0 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd77490 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x5626fbd77440 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x5626fbd77460 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x5626fbd774e0 <line:3066:3>
|   | `-TextComment 0x5626fbd774b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd77500 <col:4, line:3067:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd77580 <line:3066:11, line:3067:3>
|   |   |-TextComment 0x5626fbd77530 <line:3066:11, col:41> Text=" 0 Work item countdown started."
|   |   `-TextComment 0x5626fbd77550 <line:3067:3> Text=" "
|   |-BlockCommandComment 0x5626fbd775a0 <col:4, line:3068:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd77620 <line:3067:11, line:3068:3>
|   |   |-TextComment 0x5626fbd775d0 <line:3067:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5626fbd775f0 <line:3068:3> Text=" "
|   `-BlockCommandComment 0x5626fbd77640 <col:4, line:3070:1> Name="retval"
|     `-ParagraphComment 0x5626fbd77740 <line:3068:11, line:3070:1>
|       |-TextComment 0x5626fbd77670 <line:3068:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|       |-TextComment 0x5626fbd77690 <line:3069:3> Text=" "
|       |-InlineCommandComment 0x5626fbd776e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5626fbd77700 <line:3070:1> Text=" "
|-FunctionDecl 0x5626fbbbffc8 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x5626fbbbfeb0 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x5626fbd77f80 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x5626fbd77880 <line:3076:3>
|   | `-TextComment 0x5626fbd77850 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd778a0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5626fbd77900 <col:10, col:37>
|   |   `-TextComment 0x5626fbd778d0 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x5626fbd77a00 <line:3078:3, line:3080:12>
|   | |-TextComment 0x5626fbd77920 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x5626fbd77980 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x5626fbd779a0 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x5626fbd779c0 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x5626fbd77a50 <line:3082:3>
|   | `-TextComment 0x5626fbd77a20 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd77a70 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd77ad0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd77aa0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd77b20 <line:3084:3>
|   | `-TextComment 0x5626fbd77af0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd77b40 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x5626fbd77bf0 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x5626fbd77b70 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x5626fbd77b90 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x5626fbd77bb0 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x5626fbd77c40 <line:3088:3>
|   | `-TextComment 0x5626fbd77c10 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd77c60 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd77cf0 <col:15, col:44>
|   |   `-TextComment 0x5626fbd77cc0 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x5626fbd77d40 <line:3090:3>
|   | `-TextComment 0x5626fbd77d10 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd77d60 <col:4, line:3091:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd77de0 <line:3090:11, line:3091:3>
|   |   |-TextComment 0x5626fbd77d90 <line:3090:11, col:42> Text=" 0 Work item countdown canceled."
|   |   `-TextComment 0x5626fbd77db0 <line:3091:3> Text=" "
|   `-BlockCommandComment 0x5626fbd77e00 <col:4, line:3093:1> Name="retval"
|     `-ParagraphComment 0x5626fbd77f00 <line:3091:11, line:3093:1>
|       |-TextComment 0x5626fbd77e30 <line:3091:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|       |-TextComment 0x5626fbd77e50 <line:3092:3> Text=" "
|       |-InlineCommandComment 0x5626fbd77ea0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5626fbd77ec0 <line:3093:1> Text=" "
|-FunctionDecl 0x5626fbcdbc30 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x5626fbcdbba0 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x5626fbcdbe38 <line:3119:1, line:3121:1>
| | `-CallExpr 0x5626fbcdbdc8 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x5626fbcdbdb0 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5626fbcdbcd8 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x5626fbbbd9e0 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x5626fbcdbd18 <col:25, col:26> 'struct k_work_q *' prefix '&' cannot overflow
| |   | `-DeclRefExpr 0x5626fbcdbcf8 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5626fbbbd040 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x5626fbcdbdf8 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbcdbd30 <col:40> 'struct k_work *' lvalue ParmVar 0x5626fbcdbba0 'work' 'struct k_work *'
| `-FullComment 0x5626fbd78710 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x5626fbd78020 <line:3097:3>
|   | `-TextComment 0x5626fbd77ff0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd78040 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5626fbd780a0 <col:10, col:53>
|   |   `-TextComment 0x5626fbd78070 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x5626fbd78230 <line:3099:3, line:3104:15>
|   | |-TextComment 0x5626fbd780c0 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x5626fbd78110 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5626fbd78130 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x5626fbd78150 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x5626fbd78170 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x5626fbd78190 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x5626fbd781b0 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x5626fbd781d0 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x5626fbd78280 <line:3106:3>
|   | `-TextComment 0x5626fbd78250 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd782a0 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x5626fbd78350 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x5626fbd782d0 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x5626fbd782f0 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x5626fbd78310 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x5626fbd783a0 <line:3111:3>
|   | `-TextComment 0x5626fbd78370 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd783c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd78420 <col:9, col:31>
|   |   `-TextComment 0x5626fbd783f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd78470 <line:3113:3>
|   | `-TextComment 0x5626fbd78440 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd78490 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd78520 <col:15, col:36>
|   |   `-TextComment 0x5626fbd784f0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5626fbd78570 <line:3115:3>
|   | `-TextComment 0x5626fbd78540 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd78590 <col:4, line:3117:1> Name="return"
|     `-ParagraphComment 0x5626fbd78690 <line:3115:11, line:3117:1>
|       |-TextComment 0x5626fbd785c0 <line:3115:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd785e0 <line:3116:3> Text=" "
|       |-InlineCommandComment 0x5626fbd78630 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5626fbd78650 <line:3117:1> Text=" "
|-FunctionDecl 0x5626fbcdc018 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcdbe78 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5626fbcdbef0 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x5626fbcdc278 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x5626fbcdc240 <line:3159:2, col:66>
| |   `-CallExpr 0x5626fbcdc1d8 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x5626fbcdc1c0 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbcdc0c8 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x5626fbbbfda8 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x5626fbcdc108 <col:40, col:41> 'struct k_work_q *' prefix '&' cannot overflow
| |     | `-DeclRefExpr 0x5626fbcdc0e8 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5626fbbbd040 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x5626fbcdc210 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbcdc120 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x5626fbcdbe78 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x5626fbcdc228 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5626fbcdc140 <col:61> 's32_t':'int' lvalue ParmVar 0x5626fbcdbef0 'delay' 's32_t':'int'
| `-FullComment 0x5626fbd79290 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x5626fbd787b0 <line:3124:3>
|   | `-TextComment 0x5626fbd78780 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd787d0 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x5626fbd78830 <col:10, col:61>
|   |   `-TextComment 0x5626fbd78800 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x5626fbd78a20 <line:3126:3, line:3130:37>
|   | |-TextComment 0x5626fbd78850 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5626fbd788a0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5626fbd788c0 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x5626fbd788e0 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x5626fbd78930 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x5626fbd78950 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x5626fbd78970 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x5626fbd78990 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x5626fbd789b0 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x5626fbd78b60 <line:3132:3, line:3138:72>
|   | |-TextComment 0x5626fbd78a40 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x5626fbd78a60 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x5626fbd78a80 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x5626fbd78aa0 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x5626fbd78ac0 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x5626fbd78ae0 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x5626fbd78b00 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x5626fbd78bb0 <line:3140:3>
|   | `-TextComment 0x5626fbd78b80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd78bd0 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x5626fbd78c80 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x5626fbd78c00 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x5626fbd78c20 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x5626fbd78c40 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x5626fbd78cd0 <line:3145:3>
|   | `-TextComment 0x5626fbd78ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd78cf0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd78d50 <col:9, col:31>
|   |   `-TextComment 0x5626fbd78d20 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd78da0 <line:3147:3>
|   | `-TextComment 0x5626fbd78d70 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd78dc0 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd78e70 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x5626fbd78e20 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5626fbd78e40 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x5626fbd78e90 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd78f40 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x5626fbd78ef0 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x5626fbd78f10 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x5626fbd78f90 <line:3151:3>
|   | `-TextComment 0x5626fbd78f60 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd78fb0 <col:4, line:3152:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd79030 <line:3151:11, line:3152:3>
|   |   |-TextComment 0x5626fbd78fe0 <line:3151:11, col:41> Text=" 0 Work item countdown started."
|   |   `-TextComment 0x5626fbd79000 <line:3152:3> Text=" "
|   |-BlockCommandComment 0x5626fbd79050 <col:4, line:3153:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd790d0 <line:3152:11, line:3153:3>
|   |   |-TextComment 0x5626fbd79080 <line:3152:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5626fbd790a0 <line:3153:3> Text=" "
|   `-BlockCommandComment 0x5626fbd790f0 <col:4, line:3155:1> Name="retval"
|     `-ParagraphComment 0x5626fbd791f0 <line:3153:11, line:3155:1>
|       |-TextComment 0x5626fbd79120 <line:3153:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|       |-TextComment 0x5626fbd79140 <line:3154:3> Text=" "
|       |-InlineCommandComment 0x5626fbd79190 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5626fbd791b0 <line:3155:1> Text=" "
|-FunctionDecl 0x5626fbcdc380 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x5626fbcdc2b8 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x5626fbcdc5d8 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x5626fbcdc598 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x5626fbcdc580 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x5626fbcdc540 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5626fbcdc528 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5626fbcdc428 <col:9> 'u64_t (u64_t)' Function 0x5626fbc31cf8 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x5626fbcdc568 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x5626fbcdc500 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x5626fbcdc4e8 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x5626fbcdc448 <col:31> 's32_t (struct _timeout *)' Function 0x5626fbcbe0b0 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x5626fbcdc4d0 <col:51, col:58> 'struct _timeout *' prefix '&' cannot overflow
| |             `-MemberExpr 0x5626fbcdc4a0 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x5626fbbbc9a8
| |               `-ImplicitCastExpr 0x5626fbcdc488 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x5626fbcdc468 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x5626fbcdc2b8 'work' 'struct k_delayed_work *'
| `-FullComment 0x5626fbd79720 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x5626fbd79330 <line:3163:3>
|   | `-TextComment 0x5626fbd79300 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd79350 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x5626fbd793b0 <col:10, col:66>
|   |   `-TextComment 0x5626fbd79380 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x5626fbd79450 <line:3165:3, line:3167:30>
|   | |-TextComment 0x5626fbd793d0 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x5626fbd793f0 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x5626fbd79410 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x5626fbd794a0 <line:3169:3>
|   | `-TextComment 0x5626fbd79470 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd794c0 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd79550 <col:15, col:37>
|   |   `-TextComment 0x5626fbd79520 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x5626fbd795a0 <line:3171:3>
|   | `-TextComment 0x5626fbd79570 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd795c0 <col:4, line:3173:1> Name="return"
|     `-ParagraphComment 0x5626fbd796c0 <line:3171:11, line:3173:1>
|       |-TextComment 0x5626fbd795f0 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|       |-TextComment 0x5626fbd79610 <line:3172:3> Text=" "
|       |-InlineCommandComment 0x5626fbd79660 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5626fbd79680 <line:3173:1> Text=" "
|-FunctionDecl 0x5626fbcdc850 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x5626fbcdc6b8 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x5626fbcdc730 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x5626fbd79bc0 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x5626fbd797c0 <line:3180:3>
|   | `-TextComment 0x5626fbd79790 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd797e0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd79840 <col:10, col:43>
|   |   `-TextComment 0x5626fbd79810 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x5626fbd798b0 <line:3182:3, line:3183:17>
|   | |-TextComment 0x5626fbd79860 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x5626fbd79880 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x5626fbd79900 <line:3185:3>
|   | `-TextComment 0x5626fbd798d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd79920 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd799e0 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x5626fbd79990 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x5626fbd799b0 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x5626fbd79a00 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd79a90 <col:18, col:70>
|   |   `-TextComment 0x5626fbd79a60 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5626fbd79ae0 <line:3188:3>
|   | `-TextComment 0x5626fbd79ab0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd79b00 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5626fbd79b60 <col:11, col:14>
|       `-TextComment 0x5626fbd79b30 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5626fbcdd298 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x5626fbcdc950 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5626fbcdc9e0 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x5626fbcdca70 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5626fbcdcaf0 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x5626fbcdd120 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x5626fbd7a950 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x5626fbd79c60 <line:3194:3>
|   | `-TextComment 0x5626fbd79c30 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd79c80 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd79ce0 <col:10, col:39>
|   |   `-TextComment 0x5626fbd79cb0 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x5626fbd79f50 <line:3196:3, line:3200:50>
|   | |-TextComment 0x5626fbd79d00 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5626fbd79d50 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5626fbd79d70 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x5626fbd79d90 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x5626fbd79de0 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x5626fbd79e00 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x5626fbd79e50 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x5626fbd79e70 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x5626fbd79e90 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x5626fbd79eb0 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x5626fbd79ed0 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x5626fbd7a040 <line:3202:3, line:3206:70>
|   | |-TextComment 0x5626fbd79f70 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x5626fbd79f90 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x5626fbd79fb0 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x5626fbd79fd0 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x5626fbd79ff0 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x5626fbd7a090 <line:3208:3>
|   | `-TextComment 0x5626fbd7a060 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7a0b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd7a110 <col:9, col:31>
|   |   `-TextComment 0x5626fbd7a0e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd7a160 <line:3210:3>
|   | `-TextComment 0x5626fbd7a130 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7a180 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x5626fbd7a230 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x5626fbd7a1b0 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x5626fbd7a1d0 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x5626fbd7a1f0 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x5626fbd7a280 <line:3215:3>
|   | `-TextComment 0x5626fbd7a250 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7a2a0 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7a350 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x5626fbd7a300 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5626fbd7a320 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7a370 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd7a420 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x5626fbd7a3d0 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5626fbd7a3f0 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7a440 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd7a4f0 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x5626fbd7a4a0 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x5626fbd7a4c0 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7a510 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd7a5c0 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x5626fbd7a570 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5626fbd7a590 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7a5e0 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x5626fbd7a690 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x5626fbd7a640 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x5626fbd7a660 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   |-ParagraphComment 0x5626fbd7a6e0 <line:3223:3>
|   | `-TextComment 0x5626fbd7a6b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7a700 <col:4, line:3224:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7a780 <line:3223:11, line:3224:3>
|   |   |-TextComment 0x5626fbd7a730 <line:3223:11, col:51> Text=" 0 Work item started watching for events."
|   |   `-TextComment 0x5626fbd7a750 <line:3224:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7a7a0 <col:4, line:3225:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7a820 <line:3224:11, line:3225:3>
|   |   |-TextComment 0x5626fbd7a7d0 <line:3224:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5626fbd7a7f0 <line:3225:3> Text=" "
|   `-BlockCommandComment 0x5626fbd7a840 <col:4, col:69> Name="retval"
|     `-ParagraphComment 0x5626fbd7a8a0 <col:11, col:69>
|       `-TextComment 0x5626fbd7a870 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x5626fbcdd688 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcdd3b0 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x5626fbcdd440 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x5626fbcdd4c0 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x5626fbcdd538 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x5626fbcdd978 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x5626fbcdd940 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x5626fbcdd898 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x5626fbcdd880 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626fbcdd748 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x5626fbcdd298 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x5626fbcdd788 <col:37, col:38> 'struct k_work_q *' prefix '&' cannot overflow
| |     | `-DeclRefExpr 0x5626fbcdd768 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5626fbbbd040 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x5626fbcdd8e0 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbcdd7a0 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x5626fbcdd3b0 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x5626fbcdd8f8 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbcdd7c0 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x5626fbcdd440 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x5626fbcdd910 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5626fbcdd7e0 <col:15> 'int' lvalue ParmVar 0x5626fbcdd4c0 'num_events' 'int'
| |     `-ImplicitCastExpr 0x5626fbcdd928 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5626fbcdd800 <col:27> 's32_t':'int' lvalue ParmVar 0x5626fbcdd538 'timeout' 's32_t':'int'
| `-FullComment 0x5626fbd7b560 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x5626fbd7a9f0 <line:3234:3>
|   | `-TextComment 0x5626fbd7a9c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7aa10 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5626fbd7aa70 <col:10, col:63>
|   |   `-TextComment 0x5626fbd7aa40 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x5626fbd7ac60 <line:3236:3, line:3240:50>
|   | |-TextComment 0x5626fbd7aa90 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5626fbd7aae0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5626fbd7ab00 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x5626fbd7ab20 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x5626fbd7ab70 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x5626fbd7ab90 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x5626fbd7abb0 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x5626fbd7abd0 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x5626fbd7abf0 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x5626fbd7ad50 <line:3242:3, line:3246:70>
|   | |-TextComment 0x5626fbd7ac80 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x5626fbd7aca0 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x5626fbd7acc0 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x5626fbd7ace0 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x5626fbd7ad00 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x5626fbd7ada0 <line:3248:3>
|   | `-TextComment 0x5626fbd7ad70 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7adc0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd7ae20 <col:9, col:31>
|   |   `-TextComment 0x5626fbd7adf0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd7ae70 <line:3250:3>
|   | `-TextComment 0x5626fbd7ae40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7ae90 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x5626fbd7af10 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x5626fbd7aec0 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x5626fbd7aee0 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x5626fbd7af60 <line:3254:3>
|   | `-TextComment 0x5626fbd7af30 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7af80 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7b030 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x5626fbd7afe0 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5626fbd7b000 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7b050 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd7b100 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x5626fbd7b0b0 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x5626fbd7b0d0 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7b120 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd7b1d0 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x5626fbd7b180 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5626fbd7b1a0 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7b1f0 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd7b2a0 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x5626fbd7b250 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x5626fbd7b270 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   |-ParagraphComment 0x5626fbd7b2f0 <line:3260:3>
|   | `-TextComment 0x5626fbd7b2c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7b310 <col:4, line:3261:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7b390 <line:3260:11, line:3261:3>
|   |   |-TextComment 0x5626fbd7b340 <line:3260:11, col:51> Text=" 0 Work item started watching for events."
|   |   `-TextComment 0x5626fbd7b360 <line:3261:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7b3b0 <col:4, line:3262:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7b430 <line:3261:11, line:3262:3>
|   |   |-TextComment 0x5626fbd7b3e0 <line:3261:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5626fbd7b400 <line:3262:3> Text=" "
|   `-BlockCommandComment 0x5626fbd7b450 <col:4, col:69> Name="retval"
|     `-ParagraphComment 0x5626fbd7b4b0 <col:11, col:69>
|       `-TextComment 0x5626fbd7b480 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x5626fbcddac8 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x5626fbcdd9b8 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x5626fbd7bb30 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x5626fbd7b600 <line:3274:3>
|   | `-TextComment 0x5626fbd7b5d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7b620 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd7b680 <col:10, col:39>
|   |   `-TextComment 0x5626fbd7b650 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x5626fbd7b770 <line:3276:3, line:3278:14>
|   | |-TextComment 0x5626fbd7b6a0 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x5626fbd7b6f0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x5626fbd7b710 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x5626fbd7b730 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x5626fbd7b7c0 <line:3280:3>
|   | `-TextComment 0x5626fbd7b790 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7b7e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd7b840 <col:9, col:31>
|   |   `-TextComment 0x5626fbd7b810 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd7b890 <line:3282:3>
|   | `-TextComment 0x5626fbd7b860 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7b8b0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7b940 <col:15, col:44>
|   |   `-TextComment 0x5626fbd7b910 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x5626fbd7b9a0 <line:3284:3>
|   | `-TextComment 0x5626fbd7b970 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7b9c0 <col:4, line:3285:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7ba40 <line:3284:11, line:3285:3>
|   |   |-TextComment 0x5626fbd7b9f0 <line:3284:11, col:32> Text=" 0 Work item canceled."
|   |   `-TextComment 0x5626fbd7ba10 <line:3285:3> Text=" "
|   `-BlockCommandComment 0x5626fbd7ba60 <col:4, col:74> Name="retval"
|     `-ParagraphComment 0x5626fbd7bac0 <col:11, col:74>
|       `-TextComment 0x5626fbd7ba90 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x5626fbcddbc8 prev 0x5626fbc9e930 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x5626fbd7bcc0 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x5626fbd7bbf0 <line:3297:3, line:3298:3>
| | | |-TextComment 0x5626fbd7bba0 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x5626fbd7bbc0 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x5626fbd7bc10 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x5626fbd7bc80 <line:3299:1>
| |   `-TextComment 0x5626fbd7bc50 <col:1> Text=" "
| |-FieldDecl 0x5626fbcddc88 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5626fbd7bd90 <line:3301:5, col:22>
| |   `-ParagraphComment 0x5626fbd7bd60 <col:5, col:22>
| |     `-TextComment 0x5626fbd7bd30 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x5626fbcddd30 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x5626fbd7be60 <line:3303:5, col:17>
| |   `-ParagraphComment 0x5626fbd7be30 <col:5, col:17>
| |     `-TextComment 0x5626fbd7be00 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x5626fbcdddb8 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x5626fbd7bf30 <line:3306:5, col:24>
| |   `-ParagraphComment 0x5626fbd7bf00 <col:5, col:24>
| |     `-TextComment 0x5626fbd7bed0 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x5626fbcdde50 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x5626fbd7c000 <line:3309:5, col:30>
|     `-ParagraphComment 0x5626fbd7bfd0 <col:5, col:30>
|       `-TextComment 0x5626fbd7bfa0 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x5626fbcde950 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5626fbcde028 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x5626fbd7c4d0 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x5626fbd7c0a0 <line:3349:3>
|   | `-TextComment 0x5626fbd7c070 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7c0c0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5626fbd7c120 <col:10, col:29>
|   |   `-TextComment 0x5626fbd7c0f0 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x5626fbd7c170 <line:3351:3, col:67>
|   | `-TextComment 0x5626fbd7c140 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x5626fbd7c1c0 <line:3353:3, col:70>
|   | `-TextComment 0x5626fbd7c190 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x5626fbd7c210 <line:3355:3>
|   | `-TextComment 0x5626fbd7c1e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7c230 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7c2c0 <col:16, col:37>
|   |   `-TextComment 0x5626fbd7c290 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x5626fbd7c310 <line:3357:3>
|   | `-TextComment 0x5626fbd7c2e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7c330 <col:4, col:33> Name="retval"
|   | `-ParagraphComment 0x5626fbd7c390 <col:11, col:33>
|   |   `-TextComment 0x5626fbd7c360 <col:11, col:33> Text=" 0 Mutex object created"
|   `-ParagraphComment 0x5626fbd7c460 <line:3359:3, line:3360:1>
|     |-TextComment 0x5626fbd7c3b0 <line:3359:3> Text=" "
|     |-InlineCommandComment 0x5626fbd7c400 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MUTEX-002"
|     `-TextComment 0x5626fbd7c420 <line:3360:1> Text=" "
|-FunctionDecl 0x5626fbcdebe8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcdea50 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x5626fbcdeac8 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x5626fbd7ccd0 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x5626fbd7c570 <line:3365:3>
|   | `-TextComment 0x5626fbd7c540 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7c590 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5626fbd7c5f0 <col:10, col:23>
|   |   `-TextComment 0x5626fbd7c5c0 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x5626fbd7c710 <line:3367:3, line:3369:20>
|   | |-TextComment 0x5626fbd7c610 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x5626fbd7c660 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x5626fbd7c680 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x5626fbd7c6a0 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x5626fbd7c6c0 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x5626fbd7c780 <line:3371:3, line:3372:62>
|   | |-TextComment 0x5626fbd7c730 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x5626fbd7c750 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x5626fbd7c7d0 <line:3374:3>
|   | `-TextComment 0x5626fbd7c7a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7c7f0 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7c8a0 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x5626fbd7c850 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x5626fbd7c870 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7c8c0 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd7c9a0 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x5626fbd7c920 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x5626fbd7c940 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5626fbd7c960 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5626fbd7c9f0 <line:3379:3>
|   | `-TextComment 0x5626fbd7c9c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7ca10 <col:4, line:3380:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7ca90 <line:3379:11, line:3380:3>
|   |   |-TextComment 0x5626fbd7ca40 <line:3379:11, col:26> Text=" 0 Mutex locked."
|   |   `-TextComment 0x5626fbd7ca60 <line:3380:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7cab0 <col:4, line:3381:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7cb30 <line:3380:11, line:3381:3>
|   |   |-TextComment 0x5626fbd7cae0 <line:3380:11, col:43> Text=" -EBUSY Returned without waiting."
|   |   `-TextComment 0x5626fbd7cb00 <line:3381:3> Text=" "
|   `-BlockCommandComment 0x5626fbd7cb50 <col:4, line:3383:1> Name="retval"
|     `-ParagraphComment 0x5626fbd7cc50 <line:3381:11, line:3383:1>
|       |-TextComment 0x5626fbd7cb80 <line:3381:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5626fbd7cba0 <line:3382:3> Text=" "
|       |-InlineCommandComment 0x5626fbd7cbf0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MUTEX-002"
|       `-TextComment 0x5626fbd7cc10 <line:3383:1> Text=" "
|-FunctionDecl 0x5626fbcded88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5626fbcdecf0 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x5626fbd7d3e0 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x5626fbd7cd70 <line:3387:3>
|   | `-TextComment 0x5626fbd7cd40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7cd90 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x5626fbd7cdf0 <col:10, col:25>
|   |   `-TextComment 0x5626fbd7cdc0 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x5626fbd7cee0 <line:3389:3, line:3390:18>
|   | |-TextComment 0x5626fbd7ce10 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x5626fbd7ce60 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x5626fbd7ce80 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x5626fbd7cea0 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x5626fbd7cf80 <line:3392:3, line:3394:10>
|   | |-TextComment 0x5626fbd7cf00 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x5626fbd7cf20 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x5626fbd7cf40 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x5626fbd7cfd0 <line:3396:3>
|   | `-TextComment 0x5626fbd7cfa0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7cff0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7d080 <col:16, col:37>
|   |   `-TextComment 0x5626fbd7d050 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x5626fbd7d0d0 <line:3398:3>
|   | `-TextComment 0x5626fbd7d0a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7d0f0 <col:4, line:3399:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7d170 <line:3398:11, line:3399:3>
|   |   |-TextComment 0x5626fbd7d120 <line:3398:11, col:28> Text=" 0 Mutex unlocked."
|   |   `-TextComment 0x5626fbd7d140 <line:3399:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7d190 <col:4, line:3400:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7d210 <line:3399:11, line:3400:3>
|   |   |-TextComment 0x5626fbd7d1c0 <line:3399:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   |   `-TextComment 0x5626fbd7d1e0 <line:3400:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7d230 <col:4, col:42> Name="retval"
|   | `-ParagraphComment 0x5626fbd7d290 <col:11, col:42>
|   |   `-TextComment 0x5626fbd7d260 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   `-ParagraphComment 0x5626fbd7d360 <line:3402:3, line:3403:1>
|     |-TextComment 0x5626fbd7d2b0 <line:3402:3> Text=" "
|     |-InlineCommandComment 0x5626fbd7d300 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MUTEX-002"
|     `-TextComment 0x5626fbd7d320 <line:3403:1> Text=" "
|-RecordDecl 0x5626fbcdee88 prev 0x5626fbc9e9d8 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x5626fbd7d500 <line:3411:3, col:24>
| | `-ParagraphComment 0x5626fbd7d4d0 <col:3, col:24>
| |   |-TextComment 0x5626fbd7d450 <col:3> Text=" "
| |   |-InlineCommandComment 0x5626fbd7d470 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5626fbd7d490 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5626fbcdef18 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5626fbcdef78 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x5626fbcdefd8 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x5626fbcdf3c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x5626fbcdf188 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x5626fbcdf208 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x5626fbcdf288 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x5626fbd7dbf0 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x5626fbd7d5a0 <line:3446:3>
|   | `-TextComment 0x5626fbd7d570 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7d5c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5626fbd7d620 <col:10, col:33>
|   |   `-TextComment 0x5626fbd7d5f0 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x5626fbd7d670 <line:3448:3, col:71>
|   | `-TextComment 0x5626fbd7d640 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x5626fbd7d6c0 <line:3450:3>
|   | `-TextComment 0x5626fbd7d690 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7d6e0 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7d790 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x5626fbd7d740 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x5626fbd7d760 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7d7b0 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd7d860 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x5626fbd7d810 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x5626fbd7d830 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7d880 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd7d910 <col:16, col:50>
|   |   `-TextComment 0x5626fbd7d8e0 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x5626fbd7d980 <line:3454:3>
|   | `-TextComment 0x5626fbd7d930 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7d9a0 <col:4, line:3455:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7da20 <line:3454:11, line:3455:3>
|   |   |-TextComment 0x5626fbd7d9d0 <line:3454:11, col:43> Text=" 0 Semaphore created successfully"
|   |   `-TextComment 0x5626fbd7d9f0 <line:3455:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7da40 <col:4, col:33> Name="retval"
|   | `-ParagraphComment 0x5626fbd7daa0 <col:11, col:33>
|   |   `-TextComment 0x5626fbd7da70 <col:11, col:33> Text=" -EINVAL Invalid values"
|   `-ParagraphComment 0x5626fbd7db70 <line:3457:3, line:3458:1>
|     |-TextComment 0x5626fbd7dac0 <line:3457:3> Text=" "
|     |-InlineCommandComment 0x5626fbd7db10 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|     `-TextComment 0x5626fbd7db30 <line:3458:1> Text=" "
|-FunctionDecl 0x5626fbcdf668 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcdf4d0 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x5626fbcdf548 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x5626fbd7e450 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x5626fbd7dc90 <line:3463:3>
|   | `-TextComment 0x5626fbd7dc60 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7dcb0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5626fbd7dd10 <col:10, col:27>
|   |   `-TextComment 0x5626fbd7dce0 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x5626fbd7ddb0 <line:3465:3, col:24>
|   | |-TextComment 0x5626fbd7dd30 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x5626fbd7dd80 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x5626fbd7de00 <line:3467:3>
|   | `-TextComment 0x5626fbd7ddd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7de20 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5626fbd7df00 <col:9, col:72>
|   |   |-TextComment 0x5626fbd7de50 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5626fbd7dea0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5626fbd7dec0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5626fbd7df50 <line:3469:3>
|   | `-TextComment 0x5626fbd7df20 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7df70 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7e020 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x5626fbd7dfd0 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x5626fbd7dff0 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7e040 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd7e120 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x5626fbd7e0a0 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x5626fbd7e0c0 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5626fbd7e0e0 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5626fbd7e170 <line:3474:3>
|   | `-TextComment 0x5626fbd7e140 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7e190 <col:4, line:3475:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7e210 <line:3474:11, line:3475:3>
|   |   |-TextComment 0x5626fbd7e1c0 <line:3474:11, col:29> Text=" 0 Semaphore taken."
|   |   `-TextComment 0x5626fbd7e1e0 <line:3475:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7e230 <col:4, line:3476:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd7e2b0 <line:3475:11, line:3476:3>
|   |   |-TextComment 0x5626fbd7e260 <line:3475:11, col:43> Text=" -EBUSY Returned without waiting."
|   |   `-TextComment 0x5626fbd7e280 <line:3476:3> Text=" "
|   `-BlockCommandComment 0x5626fbd7e2d0 <col:4, line:3478:1> Name="retval"
|     `-ParagraphComment 0x5626fbd7e3d0 <line:3476:11, line:3478:1>
|       |-TextComment 0x5626fbd7e300 <line:3476:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5626fbd7e320 <line:3477:3> Text=" "
|       |-InlineCommandComment 0x5626fbd7e370 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5626fbd7e390 <line:3478:1> Text=" "
|-FunctionDecl 0x5626fbcdf880 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5626fbcdf770 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x5626fbd7ea10 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x5626fbd7e4f0 <line:3482:3>
|   | `-TextComment 0x5626fbd7e4c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7e510 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5626fbd7e570 <col:10, col:27>
|   |   `-TextComment 0x5626fbd7e540 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x5626fbd7e660 <line:3484:3, line:3485:19>
|   | |-TextComment 0x5626fbd7e590 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x5626fbd7e5e0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x5626fbd7e600 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x5626fbd7e620 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x5626fbd7e6b0 <line:3487:3>
|   | `-TextComment 0x5626fbd7e680 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7e6d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd7e730 <col:9, col:31>
|   |   `-TextComment 0x5626fbd7e700 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd7e780 <line:3489:3>
|   | `-TextComment 0x5626fbd7e750 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7e7a0 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7e830 <col:14, col:39>
|   |   `-TextComment 0x5626fbd7e800 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x5626fbd7e880 <line:3491:3>
|   | `-TextComment 0x5626fbd7e850 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd7e8a0 <col:4, line:3493:1> Name="return"
|     `-ParagraphComment 0x5626fbd7e9a0 <line:3491:11, line:3493:1>
|       |-TextComment 0x5626fbd7e8d0 <line:3491:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd7e8f0 <line:3492:3> Text=" "
|       |-InlineCommandComment 0x5626fbd7e940 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5626fbd7e960 <line:3493:1> Text=" "
|-FunctionDecl 0x5626fbcdffb0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5626fbcdff20 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x5626fbd7eed0 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x5626fbd7eab0 <line:3497:3>
|   | `-TextComment 0x5626fbd7ea80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7ead0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd7eb30 <col:10, col:44>
|   |   `-TextComment 0x5626fbd7eb00 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x5626fbd7ec00 <line:3499:3, col:49>
|   | |-TextComment 0x5626fbd7eb50 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x5626fbd7eba0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x5626fbd7ebc0 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x5626fbd7ec50 <line:3501:3>
|   | `-TextComment 0x5626fbd7ec20 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7ec70 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7ed00 <col:14, col:39>
|   |   `-TextComment 0x5626fbd7ecd0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x5626fbd7ed50 <line:3503:3>
|   | `-TextComment 0x5626fbd7ed20 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd7ed70 <col:4, line:3505:1> Name="return"
|     `-ParagraphComment 0x5626fbd7ee70 <line:3503:11, line:3505:1>
|       |-TextComment 0x5626fbd7eda0 <line:3503:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd7edc0 <line:3504:3> Text=" "
|       |-InlineCommandComment 0x5626fbd7ee10 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5626fbd7ee30 <line:3505:1> Text=" "
|-FunctionDecl 0x5626fbce0140 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5626fbce00b0 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x5626fbce02b8 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x5626fbce0270 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x5626fbce0220 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x5626fbcdef78
| |   | `-ImplicitCastExpr 0x5626fbce0208 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5626fbce01e8 <col:2> 'struct k_sem *' lvalue ParmVar 0x5626fbce00b0 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x5626fbce0250 <col:15> 'unsigned int' 0
| `-FullComment 0x5626fbd7efc0 <line:3509:3, col:12>
|   `-ParagraphComment 0x5626fbd7ef90 <col:3, col:12>
|     |-TextComment 0x5626fbd7ef40 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd7ef60 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbce0408 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5626fbce02f8 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x5626fbd7f450 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x5626fbd7f060 <line:3517:3>
|   | `-TextComment 0x5626fbd7f030 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd7f080 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5626fbd7f0e0 <col:10, col:34>
|   |   `-TextComment 0x5626fbd7f0b0 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x5626fbd7f180 <line:3519:3, col:47>
|   | |-TextComment 0x5626fbd7f100 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x5626fbd7f150 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x5626fbd7f1d0 <line:3521:3>
|   | `-TextComment 0x5626fbd7f1a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd7f1f0 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd7f280 <col:14, col:39>
|   |   `-TextComment 0x5626fbd7f250 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x5626fbd7f2d0 <line:3523:3>
|   | `-TextComment 0x5626fbd7f2a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd7f2f0 <col:4, line:3525:1> Name="return"
|     `-ParagraphComment 0x5626fbd7f3f0 <line:3523:11, line:3525:1>
|       |-TextComment 0x5626fbd7f320 <line:3523:11, col:35> Text=" Current semaphore count."
|       |-TextComment 0x5626fbd7f340 <line:3524:3> Text=" "
|       |-InlineCommandComment 0x5626fbd7f390 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5626fbd7f3b0 <line:3525:1> Text=" "
|-FunctionDecl 0x5626fbce0598 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5626fbce0500 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x5626fbce0788 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x5626fbce06c0 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x5626fbce06a8 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x5626fbce0678 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x5626fbcdef78
| |       `-ImplicitCastExpr 0x5626fbce0660 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbce0640 <col:9> 'struct k_sem *' lvalue ParmVar 0x5626fbce0500 'sem' 'struct k_sem *'
| `-FullComment 0x5626fbd7f540 <line:3529:3, col:12>
|   `-ParagraphComment 0x5626fbd7f510 <col:3, col:12>
|     |-TextComment 0x5626fbd7f4c0 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd7f4e0 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x5626fbce07a0 prev 0x5626fbc9ea88 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x5626fbd7f690 <line:3563:3, col:33>
| | |-ParagraphComment 0x5626fbd7f5e0 <col:3>
| | | `-TextComment 0x5626fbd7f5b0 <col:3> Text=" "
| | `-BlockCommandComment 0x5626fbd7f600 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x5626fbd7f660 <col:10, col:33>
| |     `-TextComment 0x5626fbd7f630 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x5626fbce0858 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5626fbd7f760 <line:3566:5, col:30>
| |   `-ParagraphComment 0x5626fbd7f730 <col:5, col:30>
| |     `-TextComment 0x5626fbd7f700 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x5626fbce08f8 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x5626fbd7f830 <line:3568:5, col:10>
| |   `-ParagraphComment 0x5626fbd7f800 <col:5, col:10>
| |     `-TextComment 0x5626fbd7f7d0 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x5626fbce0988 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x5626fbd7f900 <line:3570:5, col:18>
| |   `-ParagraphComment 0x5626fbd7f8d0 <col:5, col:18>
| |     `-TextComment 0x5626fbd7f8a0 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x5626fbce0a18 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x5626fbd7f9f0 <line:3572:5, col:32>
| |   `-ParagraphComment 0x5626fbd7f9c0 <col:5, col:32>
| |     `-TextComment 0x5626fbd7f990 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x5626fbce0ab0 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x5626fbd7fac0 <line:3574:5, col:29>
| |   `-ParagraphComment 0x5626fbd7fa90 <col:5, col:29>
| |     `-TextComment 0x5626fbd7fa60 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x5626fbce0b40 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x5626fbd7fb90 <line:3576:5, col:27>
| |   `-ParagraphComment 0x5626fbd7fb60 <col:5, col:27>
| |     `-TextComment 0x5626fbd7fb30 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x5626fbce0bd0 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x5626fbd7fc60 <line:3578:5, col:18>
| |   `-ParagraphComment 0x5626fbd7fc30 <col:5, col:18>
| |     `-TextComment 0x5626fbd7fc00 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x5626fbce0c60 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x5626fbd7fd30 <line:3580:5, col:19>
| |   `-ParagraphComment 0x5626fbd7fd00 <col:5, col:19>
| |     `-TextComment 0x5626fbd7fcd0 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x5626fbce0ce8 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x5626fbd7fe00 <line:3582:5, col:29>
| |   `-ParagraphComment 0x5626fbd7fdd0 <col:5, col:29>
| |     `-TextComment 0x5626fbd7fda0 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x5626fbce0d78 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x5626fbd7fed0 <line:3588:5, col:19>
|     `-ParagraphComment 0x5626fbd7fea0 <col:5, col:19>
|       `-TextComment 0x5626fbd7fe70 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x5626fbce35f0 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x5626fbd80020 <line:3617:3, col:34>
| | |-ParagraphComment 0x5626fbd7ff70 <col:3>
| | | `-TextComment 0x5626fbd7ff40 <col:3> Text=" "
| | `-BlockCommandComment 0x5626fbd7ff90 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x5626fbd7fff0 <col:10, col:34>
| |     `-TextComment 0x5626fbd7ffc0 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x5626fbce36d8 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x5626fbd800f0 <line:3620:5, col:18>
| |   `-ParagraphComment 0x5626fbd800c0 <col:5, col:18>
| |     `-TextComment 0x5626fbd80090 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x5626fbce3768 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x5626fbd801c0 <line:3622:5, col:32>
| |   `-ParagraphComment 0x5626fbd80190 <col:5, col:32>
| |     `-TextComment 0x5626fbd80160 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x5626fbce37f8 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x5626fbd80290 <line:3624:5, col:19>
|     `-ParagraphComment 0x5626fbd80260 <col:5, col:19>
|       `-TextComment 0x5626fbd80230 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x5626fbce3c30 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x5626fbce3978 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbce39f8 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x5626fbce3a70 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbce3ae8 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x5626fbd80ba0 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x5626fbd80330 <line:3658:3>
|   | `-TextComment 0x5626fbd80300 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd80350 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5626fbd803b0 <col:10, col:37>
|   |   `-TextComment 0x5626fbd80380 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x5626fbd80400 <line:3660:3, col:75>
|   | `-TextComment 0x5626fbd803d0 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x5626fbd80640 <line:3662:3, line:3666:32>
|   | |-TextComment 0x5626fbd80420 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x5626fbd80470 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x5626fbd80490 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x5626fbd804b0 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x5626fbd80500 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x5626fbd80520 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x5626fbd80540 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x5626fbd80560 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x5626fbd805b0 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x5626fbd805d0 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x5626fbd80690 <line:3668:3>
|   | `-TextComment 0x5626fbd80660 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd806b0 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd80760 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x5626fbd80710 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x5626fbd80730 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x5626fbd80780 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd80830 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x5626fbd807e0 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x5626fbd80800 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x5626fbd80850 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd80900 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x5626fbd808b0 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x5626fbd808d0 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x5626fbd80920 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd809b0 <col:19, col:65>
|   |   `-TextComment 0x5626fbd80980 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x5626fbd80a00 <line:3673:3>
|   | `-TextComment 0x5626fbd809d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd80a20 <col:4, line:3675:1> Name="return"
|     `-ParagraphComment 0x5626fbd80b20 <line:3673:11, line:3675:1>
|       |-TextComment 0x5626fbd80a50 <line:3673:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd80a70 <line:3674:3> Text=" "
|       |-InlineCommandComment 0x5626fbd80ac0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5626fbd80ae0 <line:3675:1> Text=" "
|-FunctionDecl 0x5626fbce3f78 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x5626fbce3d40 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbce3db8 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbce3e30 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x5626fbd812d0 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x5626fbd80c40 <line:3680:3>
|   | `-TextComment 0x5626fbd80c10 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd80c60 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5626fbd80cc0 <col:10, col:37>
|   |   `-TextComment 0x5626fbd80c90 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x5626fbd80d60 <line:3682:3, line:3684:8>
|   | |-TextComment 0x5626fbd80ce0 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x5626fbd80d00 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x5626fbd80d20 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x5626fbd80e00 <line:3686:3, line:3688:25>
|   | |-TextComment 0x5626fbd80d80 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x5626fbd80da0 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x5626fbd80dc0 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x5626fbd80e50 <line:3690:3>
|   | `-TextComment 0x5626fbd80e20 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd80e70 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd80f20 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x5626fbd80ed0 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5626fbd80ef0 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x5626fbd80f40 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd80ff0 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x5626fbd80fa0 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x5626fbd80fc0 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x5626fbd81010 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd810a0 <col:19, col:65>
|   |   `-TextComment 0x5626fbd81070 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x5626fbd810f0 <line:3694:3>
|   | `-TextComment 0x5626fbd810c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd81110 <col:4, line:3698:1> Name="return"
|     `-ParagraphComment 0x5626fbd81260 <line:3694:11, line:3698:1>
|       |-TextComment 0x5626fbd81140 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|       |-TextComment 0x5626fbd81160 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|       |-TextComment 0x5626fbd81180 <line:3696:3, col:23> Text="	an integer overflow."
|       |-TextComment 0x5626fbd811a0 <line:3697:3> Text=" "
|       |-InlineCommandComment 0x5626fbd811f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5626fbd81210 <line:3698:1> Text=" "
|-FunctionDecl 0x5626fbce4198 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x5626fbce4080 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x5626fbd81710 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x5626fbd81370 <line:3703:3>
|   | `-TextComment 0x5626fbd81340 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd81390 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5626fbd813f0 <col:10, col:46>
|   |   `-TextComment 0x5626fbd813c0 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x5626fbd81440 <line:3705:3, col:49>
|   | `-TextComment 0x5626fbd81410 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x5626fbd81490 <line:3707:3>
|   | `-TextComment 0x5626fbd81460 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd814b0 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd81540 <col:15, col:39>
|   |   `-TextComment 0x5626fbd81510 <col:15, col:39> Text=" message queue to cleanup"
|   |-ParagraphComment 0x5626fbd81590 <line:3709:3>
|   | `-TextComment 0x5626fbd81560 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd815b0 <col:4, line:3710:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd81630 <line:3709:11, line:3710:3>
|   |   |-TextComment 0x5626fbd815e0 <line:3709:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd81600 <line:3710:3> Text=" "
|   `-BlockCommandComment 0x5626fbd81650 <col:4, col:33> Name="retval"
|     `-ParagraphComment 0x5626fbd816b0 <col:11, col:33>
|       `-TextComment 0x5626fbd81680 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x5626fbce44c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbce4290 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbce4310 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5626fbce4388 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x5626fbd81fe0 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x5626fbd817b0 <line:3715:3>
|   | `-TextComment 0x5626fbd81780 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd817d0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd81830 <col:10, col:44>
|   |   `-TextComment 0x5626fbd81800 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x5626fbd818d0 <line:3717:3, col:51>
|   | |-TextComment 0x5626fbd81850 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x5626fbd818a0 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x5626fbd81920 <line:3719:3>
|   | `-TextComment 0x5626fbd818f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd81940 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd819b0 <col:9, col:31>
|   |   `-TextComment 0x5626fbd81970 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd81a00 <line:3721:3>
|   | `-TextComment 0x5626fbd819d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd81a20 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd81ad0 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x5626fbd81a80 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5626fbd81aa0 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x5626fbd81af0 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd81ba0 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x5626fbd81b50 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x5626fbd81b70 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x5626fbd81bc0 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd81ca0 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x5626fbd81c20 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x5626fbd81c40 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5626fbd81c60 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5626fbd81cf0 <line:3727:3>
|   | `-TextComment 0x5626fbd81cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd81d10 <col:4, line:3728:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd81d90 <line:3727:11, line:3728:3>
|   |   |-TextComment 0x5626fbd81d40 <line:3727:11, col:26> Text=" 0 Message sent."
|   |   `-TextComment 0x5626fbd81d60 <line:3728:3> Text=" "
|   |-BlockCommandComment 0x5626fbd81db0 <col:4, line:3729:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd81e30 <line:3728:11, line:3729:3>
|   |   |-TextComment 0x5626fbd81de0 <line:3728:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   |   `-TextComment 0x5626fbd81e00 <line:3729:3> Text=" "
|   `-BlockCommandComment 0x5626fbd81e50 <col:4, line:3731:1> Name="retval"
|     `-ParagraphComment 0x5626fbd81f50 <line:3729:11, line:3731:1>
|       |-TextComment 0x5626fbd81e80 <line:3729:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5626fbd81ea0 <line:3730:3> Text=" "
|       |-InlineCommandComment 0x5626fbd81ef0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5626fbd81f10 <line:3731:1> Text=" "
|-FunctionDecl 0x5626fbce60a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbce5f00 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbce5f80 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5626fbce5ff8 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x5626fbd82970 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x5626fbd82080 <line:3735:3>
|   | `-TextComment 0x5626fbd82050 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd820a0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd82100 <col:10, col:49>
|   |   `-TextComment 0x5626fbd820d0 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x5626fbd821f0 <line:3737:3, line:3738:21>
|   | |-TextComment 0x5626fbd82120 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x5626fbd82170 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x5626fbd82190 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x5626fbd821b0 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x5626fbd82240 <line:3740:3>
|   | `-TextComment 0x5626fbd82210 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd82260 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5626fbd82340 <col:9, col:72>
|   |   |-TextComment 0x5626fbd82290 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5626fbd822e0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5626fbd82300 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5626fbd82390 <line:3742:3>
|   | `-TextComment 0x5626fbd82360 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd823b0 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd82460 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x5626fbd82410 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5626fbd82430 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x5626fbd82480 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd82530 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x5626fbd824e0 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x5626fbd82500 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x5626fbd82550 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd82630 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x5626fbd825b0 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x5626fbd825d0 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5626fbd825f0 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5626fbd82680 <line:3748:3>
|   | `-TextComment 0x5626fbd82650 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd826a0 <col:4, line:3749:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd82720 <line:3748:11, line:3749:3>
|   |   |-TextComment 0x5626fbd826d0 <line:3748:11, col:30> Text=" 0 Message received."
|   |   `-TextComment 0x5626fbd826f0 <line:3749:3> Text=" "
|   |-BlockCommandComment 0x5626fbd82740 <col:4, line:3750:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd827c0 <line:3749:11, line:3750:3>
|   |   |-TextComment 0x5626fbd82770 <line:3749:11, col:44> Text=" -ENOMSG Returned without waiting."
|   |   `-TextComment 0x5626fbd82790 <line:3750:3> Text=" "
|   `-BlockCommandComment 0x5626fbd827e0 <col:4, line:3752:1> Name="retval"
|     `-ParagraphComment 0x5626fbd828e0 <line:3750:11, line:3752:1>
|       |-TextComment 0x5626fbd82810 <line:3750:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5626fbd82830 <line:3751:3> Text=" "
|       |-InlineCommandComment 0x5626fbd82880 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5626fbd828a0 <line:3752:1> Text=" "
|-FunctionDecl 0x5626fbce6358 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x5626fbce61b0 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbce6230 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x5626fbd830b0 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x5626fbd82a10 <line:3756:3>
|   | `-TextComment 0x5626fbd829e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd82a30 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5626fbd82a90 <col:10, col:51>
|   |   `-TextComment 0x5626fbd82a60 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x5626fbd82b80 <line:3758:3, line:3759:57>
|   | |-TextComment 0x5626fbd82ab0 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x5626fbd82b00 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x5626fbd82b20 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x5626fbd82b40 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x5626fbd82bd0 <line:3761:3>
|   | `-TextComment 0x5626fbd82ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd82bf0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5626fbd82c50 <col:9, col:31>
|   |   `-TextComment 0x5626fbd82c20 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5626fbd82ca0 <line:3763:3>
|   | `-TextComment 0x5626fbd82c70 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd82cc0 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd82d70 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x5626fbd82d20 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5626fbd82d40 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x5626fbd82d90 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd82e20 <col:15, col:71>
|   |   `-TextComment 0x5626fbd82df0 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x5626fbd82e70 <line:3766:3>
|   | `-TextComment 0x5626fbd82e40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd82e90 <col:4, line:3767:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd82f10 <line:3766:11, line:3767:3>
|   |   |-TextComment 0x5626fbd82ec0 <line:3766:11, col:26> Text=" 0 Message read."
|   |   `-TextComment 0x5626fbd82ee0 <line:3767:3> Text=" "
|   `-BlockCommandComment 0x5626fbd82f30 <col:4, line:3769:1> Name="retval"
|     `-ParagraphComment 0x5626fbd83030 <line:3767:11, line:3769:1>
|       |-TextComment 0x5626fbd82f60 <line:3767:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|       |-TextComment 0x5626fbd82f80 <line:3768:3> Text=" "
|       |-InlineCommandComment 0x5626fbd82fd0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5626fbd82ff0 <line:3769:1> Text=" "
|-FunctionDecl 0x5626fbce6570 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5626fbce6460 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x5626fbd83540 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x5626fbd83150 <line:3773:3>
|   | `-TextComment 0x5626fbd83120 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd83170 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5626fbd831d0 <col:10, col:32>
|   |   `-TextComment 0x5626fbd831a0 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x5626fbd83270 <line:3775:3, line:3777:61>
|   | |-TextComment 0x5626fbd831f0 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x5626fbd83210 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x5626fbd83230 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x5626fbd832c0 <line:3779:3>
|   | `-TextComment 0x5626fbd83290 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd832e0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd83370 <col:15, col:44>
|   |   `-TextComment 0x5626fbd83340 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5626fbd833c0 <line:3781:3>
|   | `-TextComment 0x5626fbd83390 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd833e0 <col:4, line:3783:1> Name="return"
|     `-ParagraphComment 0x5626fbd834e0 <line:3781:11, line:3783:1>
|       |-TextComment 0x5626fbd83410 <line:3781:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd83430 <line:3782:3> Text=" "
|       |-InlineCommandComment 0x5626fbd83480 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5626fbd834a0 <line:3783:1> Text=" "
|-FunctionDecl 0x5626fbce6780 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5626fbce6670 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x5626fbd839b0 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x5626fbd835e0 <line:3787:3>
|   | `-TextComment 0x5626fbd835b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd83600 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5626fbd83660 <col:10, col:58>
|   |   `-TextComment 0x5626fbd83630 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x5626fbd836d0 <line:3789:3, line:3790:15>
|   | |-TextComment 0x5626fbd83680 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x5626fbd836a0 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x5626fbd83720 <line:3792:3>
|   | `-TextComment 0x5626fbd836f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd83740 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd837d0 <col:15, col:44>
|   |   `-TextComment 0x5626fbd837a0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5626fbd83820 <line:3794:3>
|   | `-TextComment 0x5626fbd837f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd83840 <col:4, line:3796:1> Name="return"
|     `-ParagraphComment 0x5626fbd83940 <line:3794:11, line:3796:1>
|       |-TextComment 0x5626fbd83870 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|       |-TextComment 0x5626fbd83890 <line:3795:3> Text=" "
|       |-InlineCommandComment 0x5626fbd838e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5626fbd83900 <line:3796:1> Text=" "
|-FunctionDecl 0x5626fbce6ad0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x5626fbce6880 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbce69b8 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x5626fbd83ec0 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x5626fbd83a50 <line:3800:3>
|   | `-TextComment 0x5626fbd83a20 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd83a70 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x5626fbd83ad0 <col:10, col:50>
|   |   `-TextComment 0x5626fbd83aa0 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x5626fbd83b20 <line:3802:3, col:77>
|   | `-TextComment 0x5626fbd83af0 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x5626fbd83b70 <line:3804:3>
|   | `-TextComment 0x5626fbd83b40 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd83b90 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd83c40 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x5626fbd83bf0 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5626fbd83c10 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x5626fbd83c60 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd83cf0 <col:16, col:61>
|   |   `-TextComment 0x5626fbd83cc0 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x5626fbd83d40 <line:3807:3>
|   | `-TextComment 0x5626fbd83d10 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd83d60 <col:4, line:3809:1> Name="return"
|     `-ParagraphComment 0x5626fbd83e60 <line:3807:11, line:3809:1>
|       |-TextComment 0x5626fbd83d90 <line:3807:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd83db0 <line:3808:3> Text=" "
|       |-InlineCommandComment 0x5626fbd83e00 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-003"
|       `-TextComment 0x5626fbd83e20 <line:3809:1> Text=" "
|-FunctionDecl 0x5626fbce6c38 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5626fbce6ba8 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5626fbce6e38 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x5626fbce6e00 <line:3816:2, col:32>
|     `-BinaryOperator 0x5626fbce6de0 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x5626fbce6db0 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x5626fbce6d18 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x5626fbce0a18
|       |   `-ImplicitCastExpr 0x5626fbce6d00 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5626fbce6ce0 <col:9> 'struct k_msgq *' lvalue ParmVar 0x5626fbce6ba8 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x5626fbce6dc8 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x5626fbce6d80 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x5626fbce0ce8
|           `-ImplicitCastExpr 0x5626fbce6d68 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x5626fbce6d48 <col:26> 'struct k_msgq *' lvalue ParmVar 0x5626fbce6ba8 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5626fbce74e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5626fbce6e78 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x5626fbd84300 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x5626fbd83f60 <line:3820:3>
|   | `-TextComment 0x5626fbd83f30 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd83f80 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5626fbd83fe0 <col:10, col:56>
|   |   `-TextComment 0x5626fbd83fb0 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x5626fbd84030 <line:3822:3, col:80>
|   | `-TextComment 0x5626fbd84000 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x5626fbd84080 <line:3824:3>
|   | `-TextComment 0x5626fbd84050 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd840a0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd84130 <col:15, col:44>
|   |   `-TextComment 0x5626fbd84100 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5626fbd84180 <line:3826:3>
|   | `-TextComment 0x5626fbd84150 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd841a0 <col:4, line:3828:1> Name="return"
|     `-ParagraphComment 0x5626fbd842a0 <line:3826:11, line:3828:1>
|       |-TextComment 0x5626fbd841d0 <line:3826:11, col:30> Text=" Number of messages."
|       |-TextComment 0x5626fbd841f0 <line:3827:3> Text=" "
|       |-InlineCommandComment 0x5626fbd84240 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5626fbd84260 <line:3828:1> Text=" "
|-FunctionDecl 0x5626fbce7648 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5626fbce75b8 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5626fbce77d8 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x5626fbce7770 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x5626fbce7758 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5626fbce7728 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x5626fbce0ce8
|         `-ImplicitCastExpr 0x5626fbce7710 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x5626fbce76f0 <col:9> 'struct k_msgq *' lvalue ParmVar 0x5626fbce75b8 'msgq' 'struct k_msgq *'
|-RecordDecl 0x5626fbce77f0 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x5626fbd84560 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x5626fbd843a0 <line:3839:3>
| | | `-TextComment 0x5626fbd84370 <col:3> Text=" "
| | |-VerbatimLineComment 0x5626fbd843c0 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x5626fbd84430 <line:3840:3>
| | | `-TextComment 0x5626fbd84400 <col:3> Text=" "
| | |-VerbatimLineComment 0x5626fbd84450 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x5626fbd84510 <line:3841:3, col:5>
| |   |-TextComment 0x5626fbd84490 <col:3> Text=" "
| |   |-TextComment 0x5626fbd844b0 <col:4> Text="@"
| |   `-TextComment 0x5626fbd844d0 <col:5> Text="{"
| |-FieldDecl 0x5626fbce78e0 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-ConstantExpr 0x5626fbce78c8 <col:15> 'int'
| |   `-IntegerLiteral 0x5626fbce7898 <col:15> 'int' 8
| |-FieldDecl 0x5626fbce7978 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-ConstantExpr 0x5626fbce7960 <col:16> 'int'
| |   `-IntegerLiteral 0x5626fbce7930 <col:16> 'int' 4
| `-FieldDecl 0x5626fbce7a10 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-ConstantExpr 0x5626fbce79f8 <col:16> 'int'
|     `-IntegerLiteral 0x5626fbce79c8 <col:16> 'int' 20
|-RecordDecl 0x5626fbce7a60 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x5626fbce7b20 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x5626fbce7bc8 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x5626fbce7ca8 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x5626fbd84710 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x5626fbd84600 <line:3869:3>
| | | `-TextComment 0x5626fbd845d0 <col:3> Text=" "
| | |-BlockCommandComment 0x5626fbd84620 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x5626fbd84680 <col:10, col:35>
| | |   `-TextComment 0x5626fbd84650 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x5626fbd846d0 <line:3871:1>
| |   `-TextComment 0x5626fbd846a0 <col:1> Text=" "
| |-FieldDecl 0x5626fbce7d98 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x5626fbd847e0 <line:3873:5, col:55>
| |   `-ParagraphComment 0x5626fbd847b0 <col:5, col:55>
| |     `-TextComment 0x5626fbd84780 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x5626fbce7e28 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x5626fbd848b0 <line:3875:5, col:32>
| |   `-ParagraphComment 0x5626fbd84880 <col:5, col:32>
| |     `-TextComment 0x5626fbd84850 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x5626fbce7eb8 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x5626fbd84980 <line:3877:5, col:43>
| |   `-ParagraphComment 0x5626fbd84950 <col:5, col:43>
| |     `-TextComment 0x5626fbd84920 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x5626fbce7f50 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x5626fbd84a50 <line:3879:5, col:34>
| |   `-ParagraphComment 0x5626fbd84a20 <col:5, col:34>
| |     `-TextComment 0x5626fbd849f0 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x5626fbce7fe0 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x5626fbd84b20 <line:3881:5, col:55>
| |   `-ParagraphComment 0x5626fbd84af0 <col:5, col:55>
| |     `-TextComment 0x5626fbd84ac0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x5626fbce80b8 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x5626fbd84bf0 <line:3883:5, col:35>
| |   `-ParagraphComment 0x5626fbd84bc0 <col:5, col:35>
| |     `-TextComment 0x5626fbd84b90 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x5626fbce8148 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x5626fbd84cc0 <line:3885:5, col:22>
| |   `-ParagraphComment 0x5626fbd84c90 <col:5, col:22>
| |     `-TextComment 0x5626fbd84c60 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x5626fbce81d8 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x5626fbd84d90 <line:3887:5, col:22>
| |   `-ParagraphComment 0x5626fbd84d60 <col:5, col:22>
| |     `-TextComment 0x5626fbd84d30 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x5626fbce8268 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x5626fbd84e60 <line:3889:5, col:65>
|     `-ParagraphComment 0x5626fbd84e30 <col:5, col:65>
|       `-TextComment 0x5626fbd84e00 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x5626fbce82e8 prev 0x5626fbc9eb38 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x5626fbd85010 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x5626fbd84f00 <line:3897:3>
| | | `-TextComment 0x5626fbd84ed0 <col:3> Text=" "
| | |-BlockCommandComment 0x5626fbd84f20 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x5626fbd84f80 <col:10, col:27>
| | |   `-TextComment 0x5626fbd84f50 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x5626fbd84fd0 <line:3899:1>
| |   `-TextComment 0x5626fbd84fa0 <col:1> Text=" "
| |-FieldDecl 0x5626fbce83a8 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5626fbd850e0 <line:3901:5, col:29>
| |   `-ParagraphComment 0x5626fbd850b0 <col:5, col:29>
| |     `-TextComment 0x5626fbd85080 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x5626fbce8438 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5626fbd851b0 <line:3903:5, col:27>
| |   `-ParagraphComment 0x5626fbd85180 <col:5, col:27>
| |     `-TextComment 0x5626fbd85150 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x5626fbce8910 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x5626fbce8bf0 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x5626fbce8ae8 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x5626fbd855f0 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x5626fbd85250 <line:3942:3>
|   | `-TextComment 0x5626fbd85220 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd85270 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5626fbd852d0 <col:10, col:31>
|   |   `-TextComment 0x5626fbd852a0 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x5626fbd85320 <line:3944:3, col:69>
|   | `-TextComment 0x5626fbd852f0 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x5626fbd85370 <line:3946:3>
|   | `-TextComment 0x5626fbd85340 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd85390 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd85420 <col:15, col:38>
|   |   `-TextComment 0x5626fbd853f0 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x5626fbd85470 <line:3948:3>
|   | `-TextComment 0x5626fbd85440 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd85490 <col:4, line:3950:1> Name="return"
|     `-ParagraphComment 0x5626fbd85590 <line:3948:11, line:3950:1>
|       |-TextComment 0x5626fbd854c0 <line:3948:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd854e0 <line:3949:3> Text=" "
|       |-InlineCommandComment 0x5626fbd85530 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5626fbd85550 <line:3950:1> Text=" "
|-FunctionDecl 0x5626fbce8fe8 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x5626fbce8cf0 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5626fbce8e28 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5626fbce8ea0 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x5626fbd85eb0 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x5626fbd85690 <line:3954:3>
|   | `-TextComment 0x5626fbd85660 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd856b0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5626fbd85710 <col:10, col:57>
|   |   `-TextComment 0x5626fbd856e0 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x5626fbd85830 <line:3956:3, line:3958:55>
|   | |-TextComment 0x5626fbd85730 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x5626fbd85780 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x5626fbd857a0 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x5626fbd857c0 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x5626fbd857e0 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x5626fbd85880 <line:3960:3>
|   | `-TextComment 0x5626fbd85850 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd858a0 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd85950 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x5626fbd85900 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5626fbd85920 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x5626fbd85970 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd85a30 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x5626fbd859e0 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x5626fbd85a00 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x5626fbd85a50 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd85b80 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x5626fbd85ab0 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x5626fbd85ad0 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x5626fbd85af0 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x5626fbd85b10 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x5626fbd85b30 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x5626fbd85bd0 <line:3968:3>
|   | `-TextComment 0x5626fbd85ba0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd85bf0 <col:4, line:3969:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd85c70 <line:3968:11, line:3969:3>
|   |   |-TextComment 0x5626fbd85c20 <line:3968:11, col:26> Text=" 0 Message sent."
|   |   `-TextComment 0x5626fbd85c40 <line:3969:3> Text=" "
|   |-BlockCommandComment 0x5626fbd85c90 <col:4, line:3970:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd85d10 <line:3969:11, line:3970:3>
|   |   |-TextComment 0x5626fbd85cc0 <line:3969:11, col:44> Text=" -ENOMSG Returned without waiting."
|   |   `-TextComment 0x5626fbd85ce0 <line:3970:3> Text=" "
|   `-BlockCommandComment 0x5626fbd85d30 <col:4, line:3972:1> Name="retval"
|     `-ParagraphComment 0x5626fbd85e30 <line:3970:11, line:3972:1>
|       |-TextComment 0x5626fbd85d60 <line:3970:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5626fbd85d80 <line:3971:3> Text=" "
|       |-InlineCommandComment 0x5626fbd85dd0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5626fbd85df0 <line:3972:1> Text=" "
|-FunctionDecl 0x5626fbce9350 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x5626fbce90f0 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5626fbce9180 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5626fbce9210 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x5626fbd86610 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x5626fbd85f50 <line:3977:3>
|   | `-TextComment 0x5626fbd85f20 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd85f70 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5626fbd85fd0 <col:10, col:59>
|   |   `-TextComment 0x5626fbd85fa0 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x5626fbd86190 <line:3979:3, line:3983:29>
|   | |-TextComment 0x5626fbd85ff0 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x5626fbd86040 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x5626fbd86060 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x5626fbd86080 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x5626fbd860a0 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x5626fbd860f0 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x5626fbd86110 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x5626fbd86130 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x5626fbd861e0 <line:3985:3>
|   | `-TextComment 0x5626fbd861b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd86200 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd862b0 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x5626fbd86260 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5626fbd86280 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x5626fbd862d0 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd86380 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x5626fbd86330 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x5626fbd86350 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x5626fbd863a0 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd86430 <col:14, col:64>
|   |   `-TextComment 0x5626fbd86400 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x5626fbd86480 <line:3989:3>
|   | `-TextComment 0x5626fbd86450 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd864a0 <col:4, line:3991:1> Name="return"
|     `-ParagraphComment 0x5626fbd865a0 <line:3989:11, line:3991:1>
|       |-TextComment 0x5626fbd864d0 <line:3989:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd864f0 <line:3990:3> Text=" "
|       |-InlineCommandComment 0x5626fbd86540 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5626fbd86560 <line:3991:1> Text=" "
|-FunctionDecl 0x5626fbce9738 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x5626fbce9460 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5626fbce94f0 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5626fbce9570 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x5626fbce95e8 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x5626fbd86f40 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x5626fbd866b0 <line:3996:3>
|   | `-TextComment 0x5626fbd86680 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd866d0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5626fbd86730 <col:10, col:36>
|   |   `-TextComment 0x5626fbd86700 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x5626fbd86820 <line:3998:3, line:3999:40>
|   | |-TextComment 0x5626fbd86750 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x5626fbd867a0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x5626fbd867c0 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x5626fbd867e0 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x5626fbd86870 <line:4001:3>
|   | `-TextComment 0x5626fbd86840 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd86890 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd86940 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x5626fbd868f0 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5626fbd86910 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x5626fbd86960 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd86a10 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x5626fbd869c0 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x5626fbd869e0 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x5626fbd86a30 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd86b10 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x5626fbd86a90 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x5626fbd86ab0 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x5626fbd86ad0 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x5626fbd86b30 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd86c10 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x5626fbd86b90 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x5626fbd86bb0 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5626fbd86bd0 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5626fbd86c60 <line:4009:3>
|   | `-TextComment 0x5626fbd86c30 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd86c80 <col:4, line:4010:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd86d00 <line:4009:11, line:4010:3>
|   |   |-TextComment 0x5626fbd86cb0 <line:4009:11, col:30> Text=" 0 Message received."
|   |   `-TextComment 0x5626fbd86cd0 <line:4010:3> Text=" "
|   |-BlockCommandComment 0x5626fbd86d20 <col:4, line:4011:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd86da0 <line:4010:11, line:4011:3>
|   |   |-TextComment 0x5626fbd86d50 <line:4010:11, col:44> Text=" -ENOMSG Returned without waiting."
|   |   `-TextComment 0x5626fbd86d70 <line:4011:3> Text=" "
|   `-BlockCommandComment 0x5626fbd86dc0 <col:4, line:4013:1> Name="retval"
|     `-ParagraphComment 0x5626fbd86ec0 <line:4011:11, line:4013:1>
|       |-TextComment 0x5626fbd86df0 <line:4011:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5626fbd86e10 <line:4012:3> Text=" "
|       |-InlineCommandComment 0x5626fbd86e60 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5626fbd86e80 <line:4013:1> Text=" "
|-FunctionDecl 0x5626fbcea130 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x5626fbce9850 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5626fbcea010 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x5626fbd87510 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x5626fbd86fe0 <line:4018:3>
|   | `-TextComment 0x5626fbd86fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd87000 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5626fbd87060 <col:10, col:54>
|   |   `-TextComment 0x5626fbd87030 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x5626fbd870d0 <line:4020:3, line:4021:57>
|   | |-TextComment 0x5626fbd87080 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x5626fbd870a0 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x5626fbd87140 <line:4023:3, line:4024:31>
|   | |-TextComment 0x5626fbd870f0 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x5626fbd87110 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x5626fbd87190 <line:4026:3>
|   | `-TextComment 0x5626fbd87160 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd871b0 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd87260 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x5626fbd87210 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x5626fbd87230 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x5626fbd87280 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd87330 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x5626fbd872e0 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x5626fbd87300 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x5626fbd87380 <line:4030:3>
|   | `-TextComment 0x5626fbd87350 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd873a0 <col:4, line:4032:1> Name="return"
|     `-ParagraphComment 0x5626fbd874a0 <line:4030:11, line:4032:1>
|       |-TextComment 0x5626fbd873d0 <line:4030:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd873f0 <line:4031:3> Text=" "
|       |-InlineCommandComment 0x5626fbd87440 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5626fbd87460 <line:4032:1> Text=" "
|-FunctionDecl 0x5626fbcea588 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x5626fbcea230 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5626fbcea2c0 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5626fbcea3b8 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5626fbcea430 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x5626fbd87fc0 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x5626fbd875b0 <line:4036:3>
|   | `-TextComment 0x5626fbd87580 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd875d0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5626fbd87630 <col:10, col:65>
|   |   `-TextComment 0x5626fbd87600 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x5626fbd87720 <line:4038:3, line:4042:42>
|   | |-TextComment 0x5626fbd87650 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x5626fbd87670 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x5626fbd87690 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x5626fbd876b0 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x5626fbd876d0 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x5626fbd877c0 <line:4044:3, line:4046:33>
|   | |-TextComment 0x5626fbd87740 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x5626fbd87760 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x5626fbd87780 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x5626fbd878b0 <line:4048:3, line:4052:55>
|   | |-TextComment 0x5626fbd877e0 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x5626fbd87800 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x5626fbd87820 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x5626fbd87840 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x5626fbd87860 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x5626fbd87900 <line:4054:3>
|   | `-TextComment 0x5626fbd878d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd87920 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd879e0 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x5626fbd87980 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x5626fbd879a0 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x5626fbd87a00 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd87ab0 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x5626fbd87a60 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x5626fbd87a80 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x5626fbd87ad0 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd87b80 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x5626fbd87b30 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x5626fbd87b50 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x5626fbd87ba0 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd87c80 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x5626fbd87c00 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x5626fbd87c20 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5626fbd87c40 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5626fbd87cd0 <line:4061:3>
|   | `-TextComment 0x5626fbd87ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd87cf0 <col:4, line:4062:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd87d70 <line:4061:11, line:4062:3>
|   |   |-TextComment 0x5626fbd87d20 <line:4061:11, col:28> Text=" 0 Data retrieved."
|   |   `-TextComment 0x5626fbd87d40 <line:4062:3> Text=" "
|   |-BlockCommandComment 0x5626fbd87d90 <col:4, line:4063:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd87e10 <line:4062:11, line:4063:3>
|   |   |-TextComment 0x5626fbd87dc0 <line:4062:11, col:44> Text=" -ENOMEM Returned without waiting."
|   |   `-TextComment 0x5626fbd87de0 <line:4063:3> Text=" "
|   `-BlockCommandComment 0x5626fbd87e30 <col:4, line:4065:1> Name="retval"
|     `-ParagraphComment 0x5626fbd87f30 <line:4063:11, line:4065:1>
|       |-TextComment 0x5626fbd87e60 <line:4063:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5626fbd87e80 <line:4064:3> Text=" "
|       |-InlineCommandComment 0x5626fbd87ed0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5626fbd87ef0 <line:4065:1> Text=" "
|-RecordDecl 0x5626fbcea6d8 prev 0x5626fbc9ebe8 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x5626fbd88090 <line:4078:4, col:19>
| | `-ParagraphComment 0x5626fbd88060 <col:4, col:19>
| |   `-TextComment 0x5626fbd88030 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x5626fbcea770 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x5626fbd88160 <col:38, col:63>
| |   `-ParagraphComment 0x5626fbd88130 <col:38, col:63>
| |     `-TextComment 0x5626fbd88100 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x5626fbcea7f8 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x5626fbd88230 <col:38, col:50>
| |   `-ParagraphComment 0x5626fbd88200 <col:38, col:50>
| |     `-TextComment 0x5626fbd881d0 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x5626fbcea888 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x5626fbd88300 <col:38, col:61>
| |   `-ParagraphComment 0x5626fbd882d0 <col:38, col:61>
| |     `-TextComment 0x5626fbd882a0 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x5626fbcea918 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x5626fbd883d0 <col:38, col:67>
| |   `-ParagraphComment 0x5626fbd883a0 <col:38, col:67>
| |     `-TextComment 0x5626fbd88370 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x5626fbcea9a8 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x5626fbd884a0 <col:38, col:63>
| |   `-ParagraphComment 0x5626fbd88470 <col:38, col:63>
| |     `-TextComment 0x5626fbd88440 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x5626fbceaa48 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x5626fbd88570 <col:31, col:52>
| |   `-ParagraphComment 0x5626fbd88540 <col:31, col:52>
| |     `-TextComment 0x5626fbd88510 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x5626fbceaac8 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x5626fbceab88 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x5626fbd88640 <col:31, col:49>
| | |   `-ParagraphComment 0x5626fbd88610 <col:31, col:49>
| | |     `-TextComment 0x5626fbd885e0 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x5626fbceac18 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x5626fbd88710 <col:31, col:49>
| |     `-ParagraphComment 0x5626fbd886e0 <col:31, col:49>
| |       `-TextComment 0x5626fbd886b0 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x5626fbcead00 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x5626fbcead60 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x5626fbd887e0 <col:26, col:32>
|     `-ParagraphComment 0x5626fbd887b0 <col:26, col:32>
|       `-TextComment 0x5626fbd88780 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x5626fbcec070 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x5626fbceaf98 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbcebeb8 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x5626fbcebf30 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x5626fbd88e20 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x5626fbd88880 <line:4145:3>
|   | `-TextComment 0x5626fbd88850 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd888a0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5626fbd88900 <col:10, col:28>
|   |   `-TextComment 0x5626fbd888d0 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x5626fbd88950 <line:4147:3, col:66>
|   | `-TextComment 0x5626fbd88920 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x5626fbd889a0 <line:4149:3>
|   | `-TextComment 0x5626fbd88970 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd889c0 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd88a70 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x5626fbd88a20 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5626fbd88a40 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x5626fbd88a90 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd88b70 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x5626fbd88af0 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x5626fbd88b10 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x5626fbd88b30 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x5626fbd88b90 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd88c40 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x5626fbd88bf0 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x5626fbd88c10 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x5626fbd88c90 <line:4155:3>
|   | `-TextComment 0x5626fbd88c60 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd88cb0 <col:4, line:4157:1> Name="return"
|     `-ParagraphComment 0x5626fbd88db0 <line:4155:11, line:4157:1>
|       |-TextComment 0x5626fbd88ce0 <line:4155:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd88d00 <line:4156:3> Text=" "
|       |-InlineCommandComment 0x5626fbd88d50 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5626fbd88d70 <line:4157:1> Text=" "
|-FunctionDecl 0x5626fbcec298 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x5626fbcec180 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x5626fbd89320 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x5626fbd88ec0 <line:4161:3>
|   | `-TextComment 0x5626fbd88e90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd88ee0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5626fbd88f40 <col:10, col:43>
|   |   `-TextComment 0x5626fbd88f10 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x5626fbd88fe0 <line:4163:3, line:4165:46>
|   | |-TextComment 0x5626fbd88f60 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x5626fbd88f80 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x5626fbd88fa0 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x5626fbd89030 <line:4167:3>
|   | `-TextComment 0x5626fbd89000 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd89050 <col:4, line:4168:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd89100 <line:4167:15, line:4168:3>
|   |   |-TextComment 0x5626fbd890b0 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5626fbd890d0 <line:4168:3> Text=" "
|   |-BlockCommandComment 0x5626fbd89120 <col:4, line:4169:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd891a0 <line:4168:11, line:4169:3>
|   |   |-TextComment 0x5626fbd89150 <line:4168:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd89170 <line:4169:3> Text=" "
|   `-BlockCommandComment 0x5626fbd891c0 <col:4, line:4171:1> Name="retval"
|     `-ParagraphComment 0x5626fbd892c0 <line:4169:11, line:4171:1>
|       |-TextComment 0x5626fbd891f0 <line:4169:11, col:37> Text=" -EAGAIN nothing to cleanup"
|       |-TextComment 0x5626fbd89210 <line:4170:3> Text=" "
|       |-InlineCommandComment 0x5626fbd89260 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5626fbd89280 <line:4171:1> Text=" "
|-FunctionDecl 0x5626fbcec528 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x5626fbcec390 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbcec408 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x5626fbd89980 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x5626fbd893c0 <line:4175:3>
|   | `-TextComment 0x5626fbd89390 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd893e0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5626fbd89440 <col:10, col:56>
|   |   `-TextComment 0x5626fbd89410 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x5626fbd894e0 <line:4177:3, line:4179:74>
|   | |-TextComment 0x5626fbd89460 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x5626fbd89480 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x5626fbd894a0 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x5626fbd89530 <line:4181:3, col:69>
|   | `-TextComment 0x5626fbd89500 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x5626fbd89580 <line:4183:3>
|   | `-TextComment 0x5626fbd89550 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd895a0 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd89650 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x5626fbd89600 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5626fbd89620 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x5626fbd89670 <col:4, line:4186:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd89750 <line:4184:15, line:4186:3>
|   |   |-TextComment 0x5626fbd896d0 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x5626fbd896f0 <line:4185:3, col:30> Text="             buffer is used."
|   |   `-TextComment 0x5626fbd89710 <line:4186:3> Text=" "
|   |-BlockCommandComment 0x5626fbd89770 <col:4, line:4187:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd897f0 <line:4186:11, line:4187:3>
|   |   |-TextComment 0x5626fbd897a0 <line:4186:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd897c0 <line:4187:3> Text=" "
|   `-BlockCommandComment 0x5626fbd89810 <col:4, line:4189:1> Name="retval"
|     `-ParagraphComment 0x5626fbd89910 <line:4187:11, line:4189:1>
|       |-TextComment 0x5626fbd89840 <line:4187:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|       |-TextComment 0x5626fbd89860 <line:4188:3> Text=" "
|       |-InlineCommandComment 0x5626fbd898b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5626fbd898d0 <line:4189:1> Text=" "
|-FunctionDecl 0x5626fbceca48 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcec630 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbcec6b0 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5626fbcec728 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbcec7d0 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x5626fbcec848 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbcec8c0 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x5626fbd573f0 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x5626fbd568b0 <line:4193:3>
|   | `-TextComment 0x5626fbd56880 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd568d0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5626fbd56930 <col:10, col:31>
|   |   `-TextComment 0x5626fbd56900 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x5626fbd56a50 <line:4195:3, col:66>
|   | |-TextComment 0x5626fbd56950 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x5626fbd569a0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x5626fbd569c0 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x5626fbd56a10 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x5626fbd56aa0 <line:4197:3>
|   | `-TextComment 0x5626fbd56a70 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd56ac0 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd56b70 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x5626fbd56b20 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5626fbd56b40 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x5626fbd56b90 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd56c40 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x5626fbd56bf0 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x5626fbd56c10 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x5626fbd56c60 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd56d10 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x5626fbd56cc0 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x5626fbd56ce0 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x5626fbd56d30 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd56de0 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x5626fbd56d90 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x5626fbd56db0 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x5626fbd56e00 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x5626fbd56eb0 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x5626fbd56e60 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x5626fbd56e80 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x5626fbd56ed0 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x5626fbd56fb0 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x5626fbd56f30 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x5626fbd56f50 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5626fbd56f70 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5626fbd57000 <line:4206:3>
|   | `-TextComment 0x5626fbd56fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd57020 <col:4, line:4207:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd57120 <line:4206:11, line:4207:3>
|   |   |-TextComment 0x5626fbd57050 <line:4206:11, col:22> Text=" 0 At least "
|   |   |-InlineCommandComment 0x5626fbd570a0 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   |   |-TextComment 0x5626fbd570c0 <col:34, col:61> Text=" bytes of data were written."
|   |   `-TextComment 0x5626fbd570e0 <line:4207:3> Text=" "
|   |-BlockCommandComment 0x5626fbd57140 <col:4, line:4208:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd571c0 <line:4207:11, line:4208:3>
|   |   |-TextComment 0x5626fbd57170 <line:4207:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   |   `-TextComment 0x5626fbd57190 <line:4208:3> Text=" "
|   `-BlockCommandComment 0x5626fbd571e0 <col:4, line:4211:1> Name="retval"
|     `-ParagraphComment 0x5626fbd57360 <line:4208:11, line:4211:1>
|       |-TextComment 0x5626fbd57210 <line:4208:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|       |-InlineCommandComment 0x5626fbd57260 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|       |-TextComment 0x5626fbd57280 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|       |-TextComment 0x5626fbd572a0 <line:4210:3> Text=" "
|       |-InlineCommandComment 0x5626fbd572f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5626fbd57310 <line:4211:1> Text=" "
|-FunctionDecl 0x5626fbcedfc0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcecb70 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbcecbf0 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5626fbcecc68 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbcecce0 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x5626fbcecd58 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbcecdd0 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x5626fbd58080 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x5626fbd57490 <line:4217:3>
|   | `-TextComment 0x5626fbd57460 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd574b0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5626fbd57510 <col:10, col:32>
|   |   `-TextComment 0x5626fbd574e0 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x5626fbd57630 <line:4219:3, col:66>
|   | |-TextComment 0x5626fbd57530 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x5626fbd57580 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x5626fbd575a0 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x5626fbd575f0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x5626fbd57680 <line:4221:3>
|   | `-TextComment 0x5626fbd57650 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd576a0 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd57750 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x5626fbd57700 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5626fbd57720 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x5626fbd57770 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd57820 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x5626fbd577d0 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x5626fbd577f0 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x5626fbd57840 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd578f0 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x5626fbd578a0 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x5626fbd578c0 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x5626fbd57910 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd579c0 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x5626fbd57970 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x5626fbd57990 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x5626fbd579e0 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x5626fbd57a90 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x5626fbd57a40 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x5626fbd57a60 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x5626fbd57ab0 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x5626fbd57b90 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x5626fbd57b10 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x5626fbd57b30 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5626fbd57b50 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5626fbd57be0 <line:4230:3>
|   | `-TextComment 0x5626fbd57bb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd57c00 <col:4, line:4231:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd57d00 <line:4230:11, line:4231:3>
|   |   |-TextComment 0x5626fbd57c30 <line:4230:11, col:22> Text=" 0 At least "
|   |   |-InlineCommandComment 0x5626fbd57c80 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   |   |-TextComment 0x5626fbd57ca0 <col:34, col:58> Text=" bytes of data were read."
|   |   `-TextComment 0x5626fbd57cc0 <line:4231:3> Text=" "
|   |-BlockCommandComment 0x5626fbd57d20 <col:4, line:4232:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd57da0 <line:4231:11, line:4232:3>
|   |   |-TextComment 0x5626fbd57d50 <line:4231:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   |   `-TextComment 0x5626fbd57d70 <line:4232:3> Text=" "
|   |-BlockCommandComment 0x5626fbd57dc0 <col:4, line:4233:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd57e40 <line:4232:11, line:4233:3>
|   |   |-TextComment 0x5626fbd57df0 <line:4232:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   |   `-TextComment 0x5626fbd57e10 <line:4233:3> Text=" "
|   `-BlockCommandComment 0x5626fbd57e60 <col:4, line:4236:1> Name="retval"
|     `-ParagraphComment 0x5626fbd57fe0 <line:4233:11, line:4236:1>
|       |-TextComment 0x5626fbd57e90 <line:4233:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|       |-InlineCommandComment 0x5626fbd57ee0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|       |-TextComment 0x5626fbd57f00 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|       |-TextComment 0x5626fbd57f20 <line:4235:3> Text=" "
|       |-InlineCommandComment 0x5626fbd57f70 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5626fbd57f90 <line:4236:1> Text=" "
|-FunctionDecl 0x5626fbcee3c0 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x5626fbcee0e0 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbcee170 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5626fbcee1e8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbcee278 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x5626fbd8daa0 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x5626fbd58120 <line:4242:3>
|   | `-TextComment 0x5626fbd580f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd58140 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5626fbd581a0 <col:10, col:39>
|   |   `-TextComment 0x5626fbd58170 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x5626fbd58390 <line:4244:3, line:4246:79>
|   | |-TextComment 0x5626fbd581c0 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x5626fbd58210 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x5626fbd58230 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x5626fbd58250 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x5626fbd582a0 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x5626fbd582c0 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x5626fbd58310 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x5626fbd58330 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x5626fbd583e0 <line:4248:3>
|   | `-TextComment 0x5626fbd583b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd58400 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd584b0 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x5626fbd58460 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5626fbd58480 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x5626fbd584d0 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd58580 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x5626fbd58530 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x5626fbd58550 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x5626fbd585a0 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd58650 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x5626fbd58600 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x5626fbd58620 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x5626fbd58670 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd58700 <col:14, col:61>
|   |   `-TextComment 0x5626fbd586d0 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x5626fbd58750 <line:4253:3>
|   | `-TextComment 0x5626fbd58720 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd58770 <col:4, line:4255:1> Name="return"
|     `-ParagraphComment 0x5626fbd8da30 <line:4253:11, line:4255:1>
|       |-TextComment 0x5626fbd587a0 <line:4253:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd587c0 <line:4254:3> Text=" "
|       |-InlineCommandComment 0x5626fbd58810 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5626fbd8d9f0 <line:4255:1> Text=" "
|-RecordDecl 0x5626fbcee4d8 prev 0x5626fbc9ef58 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x5626fbd8dbc0 <line:4262:3, col:24>
| | `-ParagraphComment 0x5626fbd8db90 <col:3, col:24>
| |   |-TextComment 0x5626fbd8db10 <col:3> Text=" "
| |   |-InlineCommandComment 0x5626fbd8db30 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5626fbd8db50 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5626fbcee568 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5626fbcee5c8 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x5626fbcee628 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x5626fbcee690 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x5626fbcee6f8 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x5626fbcee758 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x5626fbceebf8 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x5626fbcee938 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x5626fbcee9b8 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x5626fbceea30 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbceeaa8 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x5626fbd8e600 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x5626fbd8dc60 <line:4330:3>
|   | `-TextComment 0x5626fbd8dc30 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8dc80 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5626fbd8dce0 <col:10, col:35>
|   |   `-TextComment 0x5626fbd8dcb0 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x5626fbd8dd30 <line:4332:3, col:53>
|   | `-TextComment 0x5626fbd8dd00 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x5626fbd8dfc0 <line:4334:3, line:4339:51>
|   | |-TextComment 0x5626fbd8dd50 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x5626fbd8dda0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x5626fbd8ddc0 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x5626fbd8dde0 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x5626fbd8de30 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x5626fbd8de50 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x5626fbd8de70 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x5626fbd8de90 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x5626fbd8deb0 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x5626fbd8ded0 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x5626fbd8df20 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x5626fbd8df40 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x5626fbd8e010 <line:4341:3>
|   | `-TextComment 0x5626fbd8dfe0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8e030 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd8e0e0 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x5626fbd8e090 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5626fbd8e0b0 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8e100 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd8e1b0 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x5626fbd8e160 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x5626fbd8e180 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8e1d0 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd8e280 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x5626fbd8e230 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x5626fbd8e250 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8e2a0 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd8e330 <col:21, col:45>
|   |   `-TextComment 0x5626fbd8e300 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x5626fbd8e380 <line:4346:3>
|   | `-TextComment 0x5626fbd8e350 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8e3a0 <col:4, line:4347:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd8e420 <line:4346:11, line:4347:3>
|   |   |-TextComment 0x5626fbd8e3d0 <line:4346:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5626fbd8e3f0 <line:4347:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8e440 <col:4, col:40> Name="retval"
|   | `-ParagraphComment 0x5626fbd8e4a0 <col:11, col:40>
|   |   `-TextComment 0x5626fbd8e470 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   `-ParagraphComment 0x5626fbd8e570 <line:4349:3, line:4350:1>
|     |-TextComment 0x5626fbd8e4c0 <line:4349:3> Text=" "
|     |-InlineCommandComment 0x5626fbd8e510 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|     `-TextComment 0x5626fbd8e530 <line:4350:1> Text=" "
|-FunctionDecl 0x5626fbceff30 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x5626fbceed10 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x5626fbceed90 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x5626fbceee08 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x5626fbd8eeb0 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x5626fbd8e6a0 <line:4355:3>
|   | `-TextComment 0x5626fbd8e670 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8e6c0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5626fbd8e720 <col:10, col:45>
|   |   `-TextComment 0x5626fbd8e6f0 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x5626fbd8e770 <line:4357:3, col:60>
|   | `-TextComment 0x5626fbd8e740 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x5626fbd8e7c0 <line:4359:3>
|   | `-TextComment 0x5626fbd8e790 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8e7e0 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd8e890 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x5626fbd8e840 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5626fbd8e860 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8e8b0 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd8e960 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x5626fbd8e910 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x5626fbd8e930 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8e980 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd8ea60 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x5626fbd8e9e0 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x5626fbd8ea00 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x5626fbd8ea20 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x5626fbd8eab0 <line:4365:3>
|   | `-TextComment 0x5626fbd8ea80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8ead0 <col:4, line:4367:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd8ebd0 <line:4365:11, line:4367:3>
|   |   |-TextComment 0x5626fbd8eb00 <line:4365:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   |   |-InlineCommandComment 0x5626fbd8eb50 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   |   |-TextComment 0x5626fbd8eb70 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   |   `-TextComment 0x5626fbd8eb90 <line:4367:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8ebf0 <col:4, line:4368:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd8ec70 <line:4367:11, line:4368:3>
|   |   |-TextComment 0x5626fbd8ec20 <line:4367:11, col:44> Text=" -ENOMEM Returned without waiting."
|   |   `-TextComment 0x5626fbd8ec40 <line:4368:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8ec90 <col:4, line:4369:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd8ed10 <line:4368:11, line:4369:3>
|   |   |-TextComment 0x5626fbd8ecc0 <line:4368:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   |   `-TextComment 0x5626fbd8ece0 <line:4369:3> Text=" "
|   `-BlockCommandComment 0x5626fbd8ed30 <col:4, line:4371:1> Name="retval"
|     `-ParagraphComment 0x5626fbd8ee30 <line:4369:11, line:4371:1>
|       |-TextComment 0x5626fbd8ed60 <line:4369:11, col:40> Text=" -EINVAL Invalid data supplied"
|       |-TextComment 0x5626fbd8ed80 <line:4370:3> Text=" "
|       |-InlineCommandComment 0x5626fbd8edd0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5626fbd8edf0 <line:4371:1> Text=" "
|-FunctionDecl 0x5626fbcf01e0 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x5626fbcf0040 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x5626fbcf00c0 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x5626fbd8f3e0 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x5626fbd8ef50 <line:4376:3>
|   | `-TextComment 0x5626fbd8ef20 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8ef70 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5626fbd8efd0 <col:10, col:51>
|   |   `-TextComment 0x5626fbd8efa0 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x5626fbd8f040 <line:4378:3, line:4379:26>
|   | |-TextComment 0x5626fbd8eff0 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5626fbd8f010 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x5626fbd8f090 <line:4381:3>
|   | `-TextComment 0x5626fbd8f060 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8f0b0 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd8f160 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x5626fbd8f110 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5626fbd8f130 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8f180 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd8f210 <col:14, col:75>
|   |   `-TextComment 0x5626fbd8f1e0 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x5626fbd8f260 <line:4384:3>
|   | `-TextComment 0x5626fbd8f230 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd8f280 <col:4, line:4386:1> Name="return"
|     `-ParagraphComment 0x5626fbd8f380 <line:4384:11, line:4386:1>
|       |-TextComment 0x5626fbd8f2b0 <line:4384:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd8f2d0 <line:4385:3> Text=" "
|       |-InlineCommandComment 0x5626fbd8f320 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5626fbd8f340 <line:4386:1> Text=" "
|-FunctionDecl 0x5626fbcf03f0 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x5626fbcf02e0 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x5626fbcf0558 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x5626fbcf0518 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x5626fbcf0500 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x5626fbcf04d0 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x5626fbcee758
| |       `-ImplicitCastExpr 0x5626fbcf04b8 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x5626fbcf0498 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x5626fbcf02e0 'slab' 'struct k_mem_slab *'
| `-FullComment 0x5626fbd8f8a0 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x5626fbd8f480 <line:4390:3>
|   | `-TextComment 0x5626fbd8f450 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8f4a0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5626fbd8f500 <col:10, col:57>
|   |   `-TextComment 0x5626fbd8f4d0 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x5626fbd8f5d0 <line:4392:3, line:4393:18>
|   | |-TextComment 0x5626fbd8f520 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x5626fbd8f540 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x5626fbd8f590 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x5626fbd8f620 <line:4395:3>
|   | `-TextComment 0x5626fbd8f5f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8f640 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd8f6d0 <col:15, col:42>
|   |   `-TextComment 0x5626fbd8f6a0 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x5626fbd8f720 <line:4397:3>
|   | `-TextComment 0x5626fbd8f6f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd8f740 <col:4, line:4399:1> Name="return"
|     `-ParagraphComment 0x5626fbd8f840 <line:4397:11, line:4399:1>
|       |-TextComment 0x5626fbd8f770 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|       |-TextComment 0x5626fbd8f790 <line:4398:3> Text=" "
|       |-InlineCommandComment 0x5626fbd8f7e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5626fbd8f800 <line:4399:1> Text=" "
|-FunctionDecl 0x5626fbcf0628 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x5626fbcf0598 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x5626fbcf0858 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x5626fbcf07f0 <line:4418:2, col:34>
| |   `-BinaryOperator 0x5626fbcf07d0 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x5626fbcf07a0 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x5626fbcf0708 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x5626fbcee5c8
| |     |   `-ImplicitCastExpr 0x5626fbcf06f0 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5626fbcf06d0 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x5626fbcf0598 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x5626fbcf07b8 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x5626fbcf0770 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x5626fbcee758
| |         `-ImplicitCastExpr 0x5626fbcf0758 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x5626fbcf0738 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x5626fbcf0598 'slab' 'struct k_mem_slab *'
| `-FullComment 0x5626fbd8fd80 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x5626fbd8f940 <line:4406:3>
|   | `-TextComment 0x5626fbd8f910 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8f960 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5626fbd8f9c0 <col:10, col:59>
|   |   `-TextComment 0x5626fbd8f990 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x5626fbd8fab0 <line:4408:3, line:4409:20>
|   | |-TextComment 0x5626fbd8fa00 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x5626fbd8fa20 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x5626fbd8fa70 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x5626fbd8fb00 <line:4411:3>
|   | `-TextComment 0x5626fbd8fad0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd8fb20 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd8fbb0 <col:15, col:42>
|   |   `-TextComment 0x5626fbd8fb80 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x5626fbd8fc00 <line:4413:3>
|   | `-TextComment 0x5626fbd8fbd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd8fc20 <col:4, line:4415:1> Name="return"
|     `-ParagraphComment 0x5626fbd8fd20 <line:4413:11, line:4415:1>
|       |-TextComment 0x5626fbd8fc50 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|       |-TextComment 0x5626fbd8fc70 <line:4414:3> Text=" "
|       |-InlineCommandComment 0x5626fbd8fcc0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5626fbd8fce0 <line:4415:1> Text=" "
|-RecordDecl 0x5626fbcf0870 prev 0x5626fbc9f008 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x5626fbd8fea0 <line:4424:3, col:24>
| | `-ParagraphComment 0x5626fbd8fe70 <col:3, col:24>
| |   |-TextComment 0x5626fbd8fdf0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5626fbd8fe10 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5626fbd8fe30 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5626fbcf0910 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x5626fbcf0970 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x5626fbcf0df8 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x5626fbcf0b20 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5626fbcf0bb0 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5626fbcf0c28 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbcf0ca0 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x5626fbd907b0 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x5626fbd8ff40 <line:4478:3>
|   | `-TextComment 0x5626fbd8ff10 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd8ff60 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5626fbd8ffc0 <col:10, col:45>
|   |   `-TextComment 0x5626fbd8ff90 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x5626fbd90010 <line:4480:3, col:60>
|   | `-TextComment 0x5626fbd8ffe0 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x5626fbd90060 <line:4482:3>
|   | `-TextComment 0x5626fbd90030 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd90080 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd90130 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x5626fbd900e0 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x5626fbd90100 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x5626fbd90150 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd90200 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x5626fbd901b0 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x5626fbd901d0 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x5626fbd90220 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd902d0 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x5626fbd90280 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x5626fbd902a0 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x5626fbd902f0 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd903d0 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x5626fbd90350 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x5626fbd90370 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x5626fbd90390 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x5626fbd90420 <line:4489:3>
|   | `-TextComment 0x5626fbd903f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd90440 <col:4, line:4491:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd90570 <line:4489:11, line:4491:3>
|   |   |-TextComment 0x5626fbd90470 <line:4489:11, col:35> Text=" 0 Memory allocated. The "
|   |   |-InlineCommandComment 0x5626fbd904c0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   |   |-TextComment 0x5626fbd904e0 <col:43, col:72> Text=" field of the block descriptor"
|   |   |-TextComment 0x5626fbd90500 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   |   `-TextComment 0x5626fbd90520 <line:4491:3> Text=" "
|   |-BlockCommandComment 0x5626fbd90590 <col:4, line:4492:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd90610 <line:4491:11, line:4492:3>
|   |   |-TextComment 0x5626fbd905c0 <line:4491:11, col:44> Text=" -ENOMEM Returned without waiting."
|   |   `-TextComment 0x5626fbd905e0 <line:4492:3> Text=" "
|   `-BlockCommandComment 0x5626fbd90630 <col:4, line:4494:1> Name="retval"
|     `-ParagraphComment 0x5626fbd90730 <line:4492:11, line:4494:1>
|       |-TextComment 0x5626fbd90660 <line:4492:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5626fbd90680 <line:4493:3> Text=" "
|       |-InlineCommandComment 0x5626fbd906d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5626fbd906f0 <line:4494:1> Text=" "
|-FunctionDecl 0x5626fbcf2538 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x5626fbcf23a0 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5626fbcf2418 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x5626fbd90c90 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x5626fbd90850 <line:4499:3>
|   | `-TextComment 0x5626fbd90820 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd90870 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5626fbd908d0 <col:10, col:68>
|   |   `-TextComment 0x5626fbd908a0 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x5626fbd90920 <line:4501:3, col:47>
|   | `-TextComment 0x5626fbd908f0 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x5626fbd90970 <line:4503:3>
|   | `-TextComment 0x5626fbd90940 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd90990 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd90a40 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x5626fbd909f0 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x5626fbd90a10 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x5626fbd90a60 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd90b10 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x5626fbd90ac0 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x5626fbd90ae0 <line:4505:3> Text=" "
|   `-BlockCommandComment 0x5626fbd90b30 <col:4, line:4507:1> Name="return"
|     `-ParagraphComment 0x5626fbd90c30 <line:4505:11, line:4507:1>
|       |-TextComment 0x5626fbd90b60 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|       |-TextComment 0x5626fbd90b80 <line:4506:3> Text=" "
|       |-InlineCommandComment 0x5626fbd90bd0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5626fbd90bf0 <line:4507:1> Text=" "
|-FunctionDecl 0x5626fbcf2750 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x5626fbcf2640 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x5626fbd910f0 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x5626fbd90d30 <line:4511:3>
|   | `-TextComment 0x5626fbd90d00 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd90d50 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5626fbd90db0 <col:10, col:51>
|   |   `-TextComment 0x5626fbd90d80 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x5626fbd90e20 <line:4513:3, line:4514:15>
|   | |-TextComment 0x5626fbd90dd0 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5626fbd90df0 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x5626fbd90e70 <line:4516:3>
|   | `-TextComment 0x5626fbd90e40 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd90e90 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd90f20 <col:16, col:69>
|   |   `-TextComment 0x5626fbd90ef0 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x5626fbd90f70 <line:4518:3>
|   | `-TextComment 0x5626fbd90f40 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd90f90 <col:4, line:4520:1> Name="return"
|     `-ParagraphComment 0x5626fbd91090 <line:4518:11, line:4520:1>
|       |-TextComment 0x5626fbd90fc0 <line:4518:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd90fe0 <line:4519:3> Text=" "
|       |-InlineCommandComment 0x5626fbd91030 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5626fbd91050 <line:4520:1> Text=" "
|-FunctionDecl 0x5626fbcf29c0 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x5626fbcf28b8 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x5626fbd91550 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x5626fbd91190 <line:4524:3>
|   | `-TextComment 0x5626fbd91160 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd911b0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5626fbd91210 <col:10, col:51>
|   |   `-TextComment 0x5626fbd911e0 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x5626fbd91280 <line:4526:3, line:4527:14>
|   | |-TextComment 0x5626fbd91230 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5626fbd91250 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x5626fbd912d0 <line:4529:3>
|   | `-TextComment 0x5626fbd912a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd912f0 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd91380 <col:13, col:37>
|   |   `-TextComment 0x5626fbd91350 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x5626fbd913d0 <line:4531:3>
|   | `-TextComment 0x5626fbd913a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd913f0 <col:4, line:4533:1> Name="return"
|     `-ParagraphComment 0x5626fbd914f0 <line:4531:11, line:4533:1>
|       |-TextComment 0x5626fbd91420 <line:4531:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd91440 <line:4532:3> Text=" "
|       |-InlineCommandComment 0x5626fbd91490 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5626fbd914b0 <line:4533:1> Text=" "
|-FunctionDecl 0x5626fbcf2c18 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x5626fbcf2b08 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x5626fbd919b0 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x5626fbd915f0 <line:4547:3>
|   | `-TextComment 0x5626fbd915c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd91610 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5626fbd91670 <col:10, col:36>
|   |   `-TextComment 0x5626fbd91640 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x5626fbd916e0 <line:4549:3, line:4550:39>
|   | |-TextComment 0x5626fbd91690 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x5626fbd916b0 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x5626fbd91730 <line:4552:3>
|   | `-TextComment 0x5626fbd91700 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd91750 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd917e0 <col:15, col:53>
|   |   `-TextComment 0x5626fbd917b0 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x5626fbd91830 <line:4554:3>
|   | `-TextComment 0x5626fbd91800 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd91850 <col:4, line:4556:1> Name="return"
|     `-ParagraphComment 0x5626fbd91950 <line:4554:11, line:4556:1>
|       |-TextComment 0x5626fbd91880 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|       |-TextComment 0x5626fbd918a0 <line:4555:3> Text=" "
|       |-InlineCommandComment 0x5626fbd918f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-HEAP-001"
|       `-TextComment 0x5626fbd91910 <line:4556:1> Text=" "
|-FunctionDecl 0x5626fbcf2d90 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x5626fbcf2d00 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x5626fbd91f40 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x5626fbd91a80 <line:4560:3>
|   | `-TextComment 0x5626fbd91a50 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd91aa0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd91b00 <col:10, col:42>
|   |   `-TextComment 0x5626fbd91ad0 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x5626fbd91ba0 <line:4562:3, line:4564:23>
|   | |-TextComment 0x5626fbd91b20 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x5626fbd91b40 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x5626fbd91b60 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x5626fbd91c70 <line:4566:3, col:48>
|   | |-TextComment 0x5626fbd91bc0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5626fbd91c10 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x5626fbd91c30 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x5626fbd91cc0 <line:4568:3>
|   | `-TextComment 0x5626fbd91c90 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd91ce0 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd91d70 <col:14, col:53>
|   |   `-TextComment 0x5626fbd91d40 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x5626fbd91dc0 <line:4570:3>
|   | `-TextComment 0x5626fbd91d90 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd91de0 <col:4, line:4572:1> Name="return"
|     `-ParagraphComment 0x5626fbd91ee0 <line:4570:11, line:4572:1>
|       |-TextComment 0x5626fbd91e10 <line:4570:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd91e30 <line:4571:3> Text=" "
|       |-InlineCommandComment 0x5626fbd91e80 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-HEAP-001"
|       `-TextComment 0x5626fbd91ea0 <line:4572:1> Text=" "
|-FunctionDecl 0x5626fbcf3018 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x5626fbcf2e78 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbcf2ef0 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x5626fbd92470 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x5626fbd91fe0 <line:4576:3>
|   | `-TextComment 0x5626fbd91fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd92000 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5626fbd92060 <col:10, col:48>
|   |   `-TextComment 0x5626fbd92030 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x5626fbd920d0 <line:4578:3, line:4579:50>
|   | |-TextComment 0x5626fbd92080 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x5626fbd920a0 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x5626fbd92120 <line:4581:3>
|   | `-TextComment 0x5626fbd920f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd92140 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd921f0 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x5626fbd921a0 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x5626fbd921c0 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x5626fbd92210 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd922a0 <col:15, col:53>
|   |   `-TextComment 0x5626fbd92270 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x5626fbd922f0 <line:4584:3>
|   | `-TextComment 0x5626fbd922c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd92310 <col:4, line:4586:1> Name="return"
|     `-ParagraphComment 0x5626fbd92410 <line:4584:11, line:4586:1>
|       |-TextComment 0x5626fbd92340 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|       |-TextComment 0x5626fbd92360 <line:4585:3> Text=" "
|       |-InlineCommandComment 0x5626fbd923b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-HEAP-001"
|       `-TextComment 0x5626fbd923d0 <line:4586:1> Text=" "
|-EnumDecl 0x5626fbcf30f8 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x5626fbcf31c8 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x5626fbcf3218 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x5626fbcf3268 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x5626fbcf32b8 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x5626fbcf3308 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x5626fbcf4760 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x5626fbcf4828 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x5626fbcf4878 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x5626fbcf48c8 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x5626fbcf4918 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x5626fbcf4968 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x5626fbcf49b8 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x5626fbcf4a38 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x5626fbcf4b40 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-ConstantExpr 0x5626fbcf4b28 <col:28> 'int'
| |   `-IntegerLiteral 0x5626fbcf4b08 <col:28> 'int' 0
| `-EnumConstantDecl 0x5626fbcf4b90 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x5626fbcf4be0 prev 0x5626fbca9048 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x5626fbcf4c98 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x5626fbd92540 <line:4684:5, col:28>
| |   `-ParagraphComment 0x5626fbd92510 <col:5, col:28>
| |     `-TextComment 0x5626fbd924e0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x5626fbcf4d30 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x5626fbd92630 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x5626fbd92600 <line:4688:4, line:4689:24>
| |     |-TextComment 0x5626fbd925b0 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x5626fbd925d0 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x5626fbcf4dc0 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x5626fbd92700 <line:4693:5, col:67>
|     `-ParagraphComment 0x5626fbd926d0 <col:5, col:67>
|       `-TextComment 0x5626fbd926a0 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x5626fbcf4e38 prev 0x5626fbca8f98 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x5626fbd928b0 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x5626fbd927a0 <line:4704:3>
| | | `-TextComment 0x5626fbd92770 <col:3> Text=" "
| | |-BlockCommandComment 0x5626fbd927c0 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x5626fbd92820 <col:10, col:20>
| | |   `-TextComment 0x5626fbd927f0 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x5626fbd92870 <line:4706:1>
| |   `-TextComment 0x5626fbd92840 <col:1> Text=" "
| |-FieldDecl 0x5626fbcf4ef8 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x5626fbd92980 <line:4708:5, col:28>
| |   `-ParagraphComment 0x5626fbd92950 <col:5, col:28>
| |     `-TextComment 0x5626fbd92920 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x5626fbcf5008 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x5626fbd92a50 <line:4711:5, col:28>
| |   `-ParagraphComment 0x5626fbd92a20 <col:5, col:28>
| |     `-TextComment 0x5626fbd929f0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x5626fbcf50d0 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5626fbcf50b8 <col:12> 'int'
| | | `-IntegerLiteral 0x5626fbcf5088 <col:12> 'int' 8
| | `-FullComment 0x5626fbd92b20 <line:4714:5, col:63>
| |   `-ParagraphComment 0x5626fbd92af0 <col:5, col:63>
| |     `-TextComment 0x5626fbd92ac0 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x5626fbcf5190 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5626fbcf5178 <col:13> 'int'
| | | `-DeclRefExpr 0x5626fbcf5148 <col:13> 'int' EnumConstant 0x5626fbcf3308 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x5626fbd92bf0 <line:4717:5, col:67>
| |   `-ParagraphComment 0x5626fbd92bc0 <col:5, col:67>
| |     `-TextComment 0x5626fbd92b90 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x5626fbcf5250 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5626fbcf5238 <col:14> 'int'
| | | `-DeclRefExpr 0x5626fbcf5208 <col:14> 'int' EnumConstant 0x5626fbcf49b8 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x5626fbd92cc0 <line:4720:5, col:69>
| |   `-ParagraphComment 0x5626fbd92c90 <col:5, col:69>
| |     `-TextComment 0x5626fbd92c60 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x5626fbcf5310 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5626fbcf52f8 <col:13> 'int'
| | | `-IntegerLiteral 0x5626fbcf52c8 <col:13> 'int' 1
| | `-FullComment 0x5626fbd92d90 <line:4723:5, col:47>
| |   `-ParagraphComment 0x5626fbd92d60 <col:5, col:47>
| |     `-TextComment 0x5626fbd92d30 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x5626fbcf5550 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5626fbcf5538 <line:4641:2, line:4646:9> 'int'
| | | `-ParenExpr 0x5626fbcf5508 <line:4641:2, line:4646:9> 'int'
| | |   `-BinaryOperator 0x5626fbcf54e8 <line:4641:3, line:4646:8> 'int' '-'
| | |     |-IntegerLiteral 0x5626fbcf5388 <line:4641:3> 'int' 32
| | |     `-ParenExpr 0x5626fbcf54c8 <col:8, line:4646:8> 'int'
| | |       `-BinaryOperator 0x5626fbcf54a8 <line:4641:9, line:4645:11> 'int' '+'
| | |         |-BinaryOperator 0x5626fbcf5468 <line:4641:9, line:4644:11> 'int' '+'
| | |         | |-BinaryOperator 0x5626fbcf5428 <line:4641:9, line:4643:11> 'int' '+'
| | |         | | |-BinaryOperator 0x5626fbcf53e8 <line:4641:9, line:4642:11> 'int' '+'
| | |         | | | |-IntegerLiteral 0x5626fbcf53a8 <line:4641:9> 'int' 0
| | |         | | | `-IntegerLiteral 0x5626fbcf53c8 <line:4642:11> 'int' 8
| | |         | | `-DeclRefExpr 0x5626fbcf5408 <line:4643:11> 'int' EnumConstant 0x5626fbcf3308 '_POLL_NUM_TYPES' 'int'
| | |         | `-DeclRefExpr 0x5626fbcf5448 <line:4644:11> 'int' EnumConstant 0x5626fbcf49b8 '_POLL_NUM_STATES' 'int'
| | |         `-IntegerLiteral 0x5626fbcf5488 <line:4645:11> 'int' 1
| | `-FullComment 0x5626fbd92e60 <line:4726:5, col:32>
| |   `-ParagraphComment 0x5626fbd92e30 <col:5, col:32>
| |     `-TextComment 0x5626fbd92e00 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x5626fbcf55c8 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x5626fbd92f30 <line:4729:5, col:19>
| | | `-ParagraphComment 0x5626fbd92f00 <col:5, col:19>
| | |   `-TextComment 0x5626fbd92ed0 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x5626fbcf5690 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x5626fbcf81b8 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x5626fbcf8230 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x5626fbcf8348 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x5626fbcf83c0 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x5626fbcf8470 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x5626fbcf84d0 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x5626fbcf8470 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5626fbcf5690 'obj' 'void *'
| |-IndirectFieldDecl 0x5626fbcf8528 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x5626fbcf8470 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5626fbcf81b8 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x5626fbcf8580 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x5626fbcf8470 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5626fbcf8230 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x5626fbcf85d8 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x5626fbcf8470 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5626fbcf8348 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x5626fbcf8630 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x5626fbcf8470 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x5626fbcf83c0 'queue' 'struct k_queue *'
|-FunctionDecl 0x5626fbcf8990 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x5626fbcf86d0 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x5626fbcf8748 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5626fbcf87c8 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x5626fbcf8848 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x5626fbd93690 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x5626fbd92fd0 <line:4761:3>
|   | `-TextComment 0x5626fbd92fa0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd92ff0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5626fbd93050 <col:10, col:53>
|   |   `-TextComment 0x5626fbd93020 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x5626fbd930c0 <line:4763:3, line:4764:53>
|   | |-TextComment 0x5626fbd93070 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x5626fbd93090 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x5626fbd93110 <line:4766:3>
|   | `-TextComment 0x5626fbd930e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd93130 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd931e0 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x5626fbd93190 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x5626fbd931b0 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x5626fbd93200 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd93330 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x5626fbd93260 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x5626fbd93280 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x5626fbd932a0 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x5626fbd932c0 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x5626fbd932e0 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x5626fbd93350 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd93400 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x5626fbd933b0 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x5626fbd933d0 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x5626fbd93420 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x5626fbd934b0 <col:14, col:43>
|   |   `-TextComment 0x5626fbd93480 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x5626fbd93500 <line:4774:3>
|   | `-TextComment 0x5626fbd934d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd93520 <col:4, line:4776:1> Name="return"
|     `-ParagraphComment 0x5626fbd93620 <line:4774:11, line:4776:1>
|       |-TextComment 0x5626fbd93550 <line:4774:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd93570 <line:4775:3> Text=" "
|       |-InlineCommandComment 0x5626fbd935c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5626fbd935e0 <line:4776:1> Text=" "
|-FunctionDecl 0x5626fbcf8cd8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5626fbcf8aa0 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5626fbcf8b20 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x5626fbcf8b98 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x5626fbd943b0 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x5626fbd93730 <line:4782:3>
|   | `-TextComment 0x5626fbd93700 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd93750 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5626fbd937b0 <col:10, col:63>
|   |   `-TextComment 0x5626fbd93780 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x5626fbd93850 <line:4784:3, line:4786:61>
|   | |-TextComment 0x5626fbd937d0 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x5626fbd937f0 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x5626fbd93810 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x5626fbd939e0 <line:4788:3, line:4796:68>
|   | |-TextComment 0x5626fbd93870 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x5626fbd93890 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x5626fbd938b0 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x5626fbd938d0 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x5626fbd938f0 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x5626fbd93910 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x5626fbd93930 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x5626fbd93950 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x5626fbd93970 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x5626fbd93aa0 <line:4798:3, line:4800:44>
|   | |-TextComment 0x5626fbd93a20 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x5626fbd93a40 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x5626fbd93a60 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x5626fbd93b10 <line:4802:3, line:4803:41>
|   | |-TextComment 0x5626fbd93ac0 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x5626fbd93ae0 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x5626fbd93b80 <line:4805:3, line:4806:30>
|   | |-TextComment 0x5626fbd93b30 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x5626fbd93b50 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x5626fbd93bd0 <line:4808:3>
|   | `-TextComment 0x5626fbd93ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd93bf0 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd93ca0 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x5626fbd93c50 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x5626fbd93c70 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x5626fbd93cc0 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd93d70 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x5626fbd93d20 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5626fbd93d40 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x5626fbd93d90 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5626fbd93e70 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x5626fbd93df0 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x5626fbd93e10 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5626fbd93e30 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5626fbd93ec0 <line:4814:3>
|   | `-TextComment 0x5626fbd93e90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd93ee0 <col:4, line:4815:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd93f60 <line:4814:11, line:4815:3>
|   |   |-TextComment 0x5626fbd93f10 <line:4814:11, col:42> Text=" 0 One or more events are ready."
|   |   `-TextComment 0x5626fbd93f30 <line:4815:3> Text=" "
|   |-BlockCommandComment 0x5626fbd93f80 <col:4, line:4816:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd94000 <line:4815:11, line:4816:3>
|   |   |-TextComment 0x5626fbd93fb0 <line:4815:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   |   `-TextComment 0x5626fbd93fd0 <line:4816:3> Text=" "
|   |-BlockCommandComment 0x5626fbd94020 <col:4, line:4821:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd94140 <line:4816:11, line:4821:3>
|   |   |-TextComment 0x5626fbd94050 <line:4816:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   |   |-TextComment 0x5626fbd94070 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   |   |-TextComment 0x5626fbd94090 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   |   |-TextComment 0x5626fbd940b0 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   |   |-TextComment 0x5626fbd940d0 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   |   `-TextComment 0x5626fbd940f0 <line:4821:3> Text=" "
|   |-BlockCommandComment 0x5626fbd94160 <col:4, line:4822:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd941e0 <line:4821:11, line:4822:3>
|   |   |-TextComment 0x5626fbd94190 <line:4821:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   |   `-TextComment 0x5626fbd941b0 <line:4822:3> Text=" "
|   `-BlockCommandComment 0x5626fbd94200 <col:4, line:4824:1> Name="retval"
|     `-ParagraphComment 0x5626fbd94300 <line:4822:11, line:4824:1>
|       |-TextComment 0x5626fbd94230 <line:4822:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|       |-TextComment 0x5626fbd94250 <line:4823:3> Text=" "
|       |-InlineCommandComment 0x5626fbd942a0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5626fbd942c0 <line:4824:1> Text=" "
|-FunctionDecl 0x5626fbcf8ef0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5626fbcf8de0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x5626fbd947f0 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x5626fbd94450 <line:4830:3>
|   | `-TextComment 0x5626fbd94420 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd94470 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5626fbd944d0 <col:10, col:42>
|   |   `-TextComment 0x5626fbd944a0 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x5626fbd94520 <line:4832:3, col:71>
|   | `-TextComment 0x5626fbd944f0 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x5626fbd94570 <line:4834:3>
|   | `-TextComment 0x5626fbd94540 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd94590 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd94620 <col:17, col:31>
|   |   `-TextComment 0x5626fbd945f0 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x5626fbd94670 <line:4836:3>
|   | `-TextComment 0x5626fbd94640 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd94690 <col:4, line:4838:1> Name="return"
|     `-ParagraphComment 0x5626fbd94790 <line:4836:11, line:4838:1>
|       |-TextComment 0x5626fbd946c0 <line:4836:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd946e0 <line:4837:3> Text=" "
|       |-InlineCommandComment 0x5626fbd94730 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5626fbd94750 <line:4838:1> Text=" "
|-FunctionDecl 0x5626fbcf9050 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x5626fbcf8fc0 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x5626fbcf9960 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5626fbcf98d0 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5626fbcf9ad8 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x5626fbcf9a90 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x5626fbcf9a40 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x5626fbcf4d30
|     | `-ImplicitCastExpr 0x5626fbcf9a28 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626fbcf9a08 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x5626fbcf98d0 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x5626fbcf9a70 <col:21> 'unsigned int' 0
|-FunctionDecl 0x5626fbcf9d50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x5626fbcf9b18 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5626fbcf9b98 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x5626fbcf9c18 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x5626fbd94d20 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x5626fbd94890 <line:4856:3>
|   | `-TextComment 0x5626fbd94860 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd948b0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5626fbd94910 <col:10, col:68>
|   |   `-TextComment 0x5626fbd948e0 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x5626fbd94960 <line:4858:3>
|   | `-TextComment 0x5626fbd94930 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd94980 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd94a30 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x5626fbd949e0 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x5626fbd94a00 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x5626fbd94a50 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd94b30 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x5626fbd94ab0 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x5626fbd94ad0 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x5626fbd94af0 <line:4861:3> Text=" "
|   `-ParamCommandComment 0x5626fbd94b50 <col:4, line:4865:1> [in] implicitly Param="result" ParamIndex=2
|     `-ParagraphComment 0x5626fbd94cd0 <line:4861:17, line:4865:1>
|       |-TextComment 0x5626fbd94bb0 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|       |-TextComment 0x5626fbd94bd0 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|       |-TextComment 0x5626fbd94bf0 <line:4863:3, col:27> Text="		   value if it was not."
|       |-TextComment 0x5626fbd94c10 <line:4864:3> Text=" "
|       |-InlineCommandComment 0x5626fbd94c60 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5626fbd94c80 <line:4865:1> Text=" "
|-FunctionDecl 0x5626fbcfa008 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x5626fbcf9e60 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5626fbcf9ee0 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x5626fbd955d0 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x5626fbd94dc0 <line:4870:3>
|   | `-TextComment 0x5626fbd94d90 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd94de0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5626fbd94e40 <col:10, col:38>
|   |   `-TextComment 0x5626fbd94e10 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x5626fbd94f60 <line:4872:3, line:4874:57>
|   | |-TextComment 0x5626fbd94e60 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x5626fbd94e80 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x5626fbd94ea0 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x5626fbd94ef0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x5626fbd94f10 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x5626fbd95050 <line:4876:3, line:4880:27>
|   | |-TextComment 0x5626fbd94f80 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x5626fbd94fa0 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x5626fbd94fc0 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x5626fbd94fe0 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x5626fbd95000 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x5626fbd950a0 <line:4882:3>
|   | `-TextComment 0x5626fbd95070 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd950c0 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x5626fbd95170 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x5626fbd950f0 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x5626fbd95110 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x5626fbd95130 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x5626fbd951c0 <line:4886:3>
|   | `-TextComment 0x5626fbd95190 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd951e0 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd95290 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x5626fbd95240 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x5626fbd95260 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x5626fbd952b0 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd95340 <col:17, col:70>
|   |   `-TextComment 0x5626fbd95310 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x5626fbd95390 <line:4889:3>
|   | `-TextComment 0x5626fbd95360 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd953b0 <col:4, line:4890:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd95430 <line:4889:11, line:4890:3>
|   |   |-TextComment 0x5626fbd953e0 <line:4889:11, col:51> Text=" 0 The signal was delivered successfully."
|   |   `-TextComment 0x5626fbd95400 <line:4890:3> Text=" "
|   `-BlockCommandComment 0x5626fbd95450 <col:4, line:4892:1> Name="retval"
|     `-ParagraphComment 0x5626fbd95550 <line:4890:11, line:4892:1>
|       |-TextComment 0x5626fbd95480 <line:4890:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|       |-TextComment 0x5626fbd954a0 <line:4891:3> Text=" "
|       |-InlineCommandComment 0x5626fbd954f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5626fbd95510 <line:4892:1> Text=" "
|-FunctionDecl 0x5626fbcfa290 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x5626fbcfa0f8 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x5626fbcfa170 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x5626fbd956c0 <line:4897:3, col:12>
|   `-ParagraphComment 0x5626fbd95690 <col:3, col:12>
|     |-TextComment 0x5626fbd95640 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd95660 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcfa430 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x5626fbcfa558 <line:4922:1, line:4924:1>
| | `-CallExpr 0x5626fbcfa508 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x5626fbcfa4f0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x5626fbcfa4d0 <col:2> 'void (void)' Function 0x5626fbc67020 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x5626fbd95cc0 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x5626fbd95760 <line:4904:3>
|   | `-TextComment 0x5626fbd95730 <col:3> Text=" "
|   |-VerbatimLineComment 0x5626fbd95780 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x5626fbd957f0 <line:4905:3>
|   | `-TextComment 0x5626fbd957c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5626fbd95810 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x5626fbd958d0 <line:4906:3, col:5>
|   | |-TextComment 0x5626fbd95850 <col:3> Text=" "
|   | |-TextComment 0x5626fbd95870 <col:4> Text="@"
|   | `-TextComment 0x5626fbd95890 <col:5> Text="{"
|   |-ParagraphComment 0x5626fbd95920 <line:4909:3>
|   | `-TextComment 0x5626fbd958f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd95940 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5626fbd959a0 <col:10, col:28>
|   |   `-TextComment 0x5626fbd95970 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x5626fbd959f0 <line:4911:3, col:63>
|   | `-TextComment 0x5626fbd959c0 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x5626fbd95ad0 <line:4913:3, line:4916:59>
|   | |-TextComment 0x5626fbd95a30 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x5626fbd95a50 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x5626fbd95a70 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x5626fbd95a90 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x5626fbd95b20 <line:4918:3>
|   | `-TextComment 0x5626fbd95af0 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd95b40 <col:4, line:4920:1> Name="return"
|     `-ParagraphComment 0x5626fbd95c40 <line:4918:11, line:4920:1>
|       |-TextComment 0x5626fbd95b70 <line:4918:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd95b90 <line:4919:3> Text=" "
|       |-InlineCommandComment 0x5626fbd95be0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-CPU-IDLE-001"
|       `-TextComment 0x5626fbd95c00 <line:4920:1> Text=" "
|-FunctionDecl 0x5626fbcfa618 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x5626fbcfa588 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x5626fbcfa7b8 <line:4938:1, line:4940:1>
| | `-CallExpr 0x5626fbcfa718 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x5626fbcfa700 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5626fbcfa6c0 <col:2> 'void (unsigned int)' Function 0x5626fbc671d0 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x5626fbcfa740 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x5626fbcfa6e0 <col:23> 'unsigned int' lvalue ParmVar 0x5626fbcfa588 'key' 'unsigned int'
| `-FullComment 0x5626fbd96120 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x5626fbd95d60 <line:4927:3>
|   | `-TextComment 0x5626fbd95d30 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd95d80 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd95de0 <col:10, col:49>
|   |   `-TextComment 0x5626fbd95db0 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x5626fbd95e50 <line:4929:3, line:4930:54>
|   | |-TextComment 0x5626fbd95e00 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x5626fbd95e20 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x5626fbd95ea0 <line:4932:3>
|   | `-TextComment 0x5626fbd95e70 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd95ec0 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd95f50 <col:14, col:61>
|   |   `-TextComment 0x5626fbd95f20 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x5626fbd95fa0 <line:4934:3>
|   | `-TextComment 0x5626fbd95f70 <col:3> Text=" "
|   `-BlockCommandComment 0x5626fbd95fc0 <col:4, line:4936:1> Name="return"
|     `-ParagraphComment 0x5626fbd960c0 <line:4934:11, line:4936:1>
|       |-TextComment 0x5626fbd95ff0 <line:4934:11, col:14> Text=" N/A"
|       |-TextComment 0x5626fbd96010 <line:4935:3> Text=" "
|       |-InlineCommandComment 0x5626fbd96060 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-CPU-IDLE-002"
|       `-TextComment 0x5626fbd96080 <line:4936:1> Text=" "
|-FunctionDecl 0x5626fbcfaf78 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x5626fbcfa7e0 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x5626fbd96210 <line:4947:3, col:12>
|   `-ParagraphComment 0x5626fbd961e0 <col:3, col:12>
|     |-TextComment 0x5626fbd96190 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd961b0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcfb400 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x5626fbcfb138 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x5626fbcfb1b8 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x5626fbcfb230 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5626fbcfb2b0 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x5626fbd96300 <line:5006:3, col:12>
|   `-ParagraphComment 0x5626fbd962d0 <col:3, col:12>
|     |-TextComment 0x5626fbd96280 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd962a0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcfb5b0 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x5626fbd963f0 <line:5025:3, col:12>
|   `-ParagraphComment 0x5626fbd963c0 <col:3, col:12>
|     |-TextComment 0x5626fbd96370 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd96390 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcfb730 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x5626fbcfb6a0 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x5626fbd964e0 <line:5029:3, col:12>
|   `-ParagraphComment 0x5626fbd964b0 <col:3, col:12>
|     |-TextComment 0x5626fbd96460 <col:3> Text=" "
|     `-InlineCommandComment 0x5626fbd96480 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5626fbcfba78 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x5626fbcfb968 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x5626fbcfbc08 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x5626fbcfbb98 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x5626fbcfbb70 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x5626fbcfbb58 <col:17> 'k_thread_stack_t *' <LValueToRValue> part_of_explicit_cast
| |       `-DeclRefExpr 0x5626fbcfbb20 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x5626fbcfb968 'sym' 'k_thread_stack_t *'
| `-FullComment 0x5626fbd96900 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x5626fbd96580 <line:5168:3>
|   | `-TextComment 0x5626fbd96550 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd965a0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5626fbd96600 <col:10, col:52>
|   |   `-TextComment 0x5626fbd965d0 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x5626fbd96670 <line:5170:3, line:5171:76>
|   | |-TextComment 0x5626fbd96620 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x5626fbd96640 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x5626fbd966c0 <line:5173:3>
|   | `-TextComment 0x5626fbd96690 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd966e0 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd96790 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x5626fbd96740 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x5626fbd96760 <line:5174:3> Text=" "
|   `-BlockCommandComment 0x5626fbd967b0 <col:4, line:5176:1> Name="return"
|     `-ParagraphComment 0x5626fbd968b0 <line:5174:11, line:5176:1>
|       |-TextComment 0x5626fbd967e0 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|       |-TextComment 0x5626fbd96800 <line:5175:3> Text=" "
|       |-InlineCommandComment 0x5626fbd96850 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-TSTACK-001"
|       `-TextComment 0x5626fbd96870 <line:5176:1> Text=" "
|-RecordDecl 0x5626fbcfbc20 prev 0x5626fbca9178 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x5626fbcfbcd8 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x5626fbd969d0 <line:5208:5, col:39>
| |   `-ParagraphComment 0x5626fbd969a0 <col:5, col:39>
| |     `-TextComment 0x5626fbd96970 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x5626fbcfbd68 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x5626fbd96aa0 <line:5210:5, col:30>
|     `-ParagraphComment 0x5626fbd96a70 <col:5, col:30>
|       `-TextComment 0x5626fbd96a40 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x5626fbcfbde8 prev 0x5626fbca90f8 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x5626fbd96c50 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x5626fbd96b40 <line:5219:3>
| | | `-TextComment 0x5626fbd96b10 <col:3> Text=" "
| | |-BlockCommandComment 0x5626fbd96b60 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x5626fbd96bc0 <col:10, col:23>
| | |   `-TextComment 0x5626fbd96b90 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x5626fbd96c10 <line:5221:1>
| |   `-TextComment 0x5626fbd96be0 <col:1> Text=" "
| |-FieldDecl 0x5626fbcfbea8 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x5626fbd96d20 <line:5227:5, col:14>
| |   `-ParagraphComment 0x5626fbd96cf0 <col:5, col:14>
| |     `-TextComment 0x5626fbd96cc0 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x5626fbcfde80 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x5626fbd96df0 <line:5229:5, col:40>
|     `-ParagraphComment 0x5626fbd96dc0 <col:5, col:40>
|       `-TextComment 0x5626fbd96d90 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x5626fbcfe3c0 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x5626fbcfdfc8 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5626fbcfe040 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5626fbcfe288 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x5626fbd973a0 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x5626fbd96e90 <line:5235:3>
|   | `-TextComment 0x5626fbd96e60 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd96eb0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5626fbd96f10 <col:10, col:37>
|   |   `-TextComment 0x5626fbd96ee0 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x5626fbd96f60 <line:5237:3, col:68>
|   | `-TextComment 0x5626fbd96f30 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x5626fbd96fd0 <line:5239:3, line:5240:25>
|   | |-TextComment 0x5626fbd96f80 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x5626fbd96fa0 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x5626fbd97020 <line:5242:3>
|   | `-TextComment 0x5626fbd96ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd97040 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd970f0 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x5626fbd970a0 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x5626fbd970c0 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x5626fbd97110 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd971c0 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x5626fbd97170 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x5626fbd97190 <line:5244:3> Text=" "
|   `-ParamCommandComment 0x5626fbd971e0 <col:4, line:5247:1> [in] implicitly Param="parts" ParamIndex=2
|     `-ParagraphComment 0x5626fbd97340 <line:5244:16, line:5247:1>
|       |-TextComment 0x5626fbd97240 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|       |-TextComment 0x5626fbd97260 <line:5245:3, col:37> Text="              if num_parts is zero."
|       |-TextComment 0x5626fbd97280 <line:5246:3> Text=" "
|       |-InlineCommandComment 0x5626fbd972d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5626fbd972f0 <line:5247:1> Text=" "
|-FunctionDecl 0x5626fbcfe5e0 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x5626fbcfe4d0 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x5626fbd97700 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x5626fbd97440 <line:5251:3>
|   | `-TextComment 0x5626fbd97410 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd97460 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5626fbd974c0 <col:10, col:34>
|   |   `-TextComment 0x5626fbd97490 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x5626fbd97510 <line:5253:3, col:27>
|   | `-TextComment 0x5626fbd974e0 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x5626fbd97560 <line:5255:3>
|   | `-TextComment 0x5626fbd97530 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd97580 <col:4, line:5257:1> [in] implicitly Param="domain" ParamIndex=0
|     `-ParagraphComment 0x5626fbd976b0 <line:5255:17, line:5257:1>
|       |-TextComment 0x5626fbd975e0 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|       |-TextComment 0x5626fbd97600 <line:5256:3> Text=" "
|       |-InlineCommandComment 0x5626fbd97650 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5626fbd97670 <line:5257:1> Text=" "
|-FunctionDecl 0x5626fbcfe890 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x5626fbcfe6e0 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5626fbcfe770 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x5626fbd97dd0 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x5626fbd977a0 <line:5261:3>
|   | `-TextComment 0x5626fbd97770 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd977c0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5626fbd97820 <col:10, col:54>
|   |   `-TextComment 0x5626fbd977f0 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x5626fbd97890 <line:5263:3, line:5264:29>
|   | |-TextComment 0x5626fbd97840 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x5626fbd97860 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x5626fbd97a90 <line:5266:3, line:5275:28>
|   | |-TextComment 0x5626fbd978b0 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x5626fbd978d0 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x5626fbd978f0 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x5626fbd97910 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x5626fbd97930 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x5626fbd97950 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x5626fbd97970 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x5626fbd97990 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x5626fbd979b0 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x5626fbd979d0 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x5626fbd97b00 <line:5277:3, line:5278:12>
|   | |-TextComment 0x5626fbd97ab0 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x5626fbd97ad0 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x5626fbd97b50 <line:5280:3>
|   | `-TextComment 0x5626fbd97b20 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd97b70 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd97c20 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x5626fbd97bd0 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x5626fbd97bf0 <line:5281:3> Text=" "
|   `-ParamCommandComment 0x5626fbd97c40 <col:4, line:5283:1> [in] implicitly Param="part" ParamIndex=1
|     `-ParagraphComment 0x5626fbd97d70 <line:5281:15, line:5283:1>
|       |-TextComment 0x5626fbd97ca0 <line:5281:15, col:47> Text=" The memory partition to be added"
|       |-TextComment 0x5626fbd97cc0 <line:5282:3> Text=" "
|       |-InlineCommandComment 0x5626fbd97d10 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5626fbd97d30 <line:5283:1> Text=" "
|-FunctionDecl 0x5626fbcfeab8 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x5626fbcfe990 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5626fbcfea20 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x5626fbd98200 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x5626fbd97e70 <line:5288:3>
|   | `-TextComment 0x5626fbd97e40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd97e90 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5626fbd97ef0 <col:10, col:57>
|   |   `-TextComment 0x5626fbd97ec0 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x5626fbd97f40 <line:5290:3, col:50>
|   | `-TextComment 0x5626fbd97f10 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x5626fbd97f90 <line:5292:3>
|   | `-TextComment 0x5626fbd97f60 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd97fb0 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd98060 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x5626fbd98010 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x5626fbd98030 <line:5293:3> Text=" "
|   `-ParamCommandComment 0x5626fbd98080 <col:4, line:5295:1> [in] implicitly Param="part" ParamIndex=1
|     `-ParagraphComment 0x5626fbd981b0 <line:5293:15, line:5295:1>
|       |-TextComment 0x5626fbd980e0 <line:5293:15, col:49> Text=" The memory partition to be removed"
|       |-TextComment 0x5626fbd98100 <line:5294:3> Text=" "
|       |-InlineCommandComment 0x5626fbd98150 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5626fbd98170 <line:5295:1> Text=" "
|-FunctionDecl 0x5626fbcfed50 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x5626fbcfebc0 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5626fbcfec38 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd98670 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x5626fbd982a0 <line:5300:3>
|   | `-TextComment 0x5626fbd98270 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd982c0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5626fbd98320 <col:10, col:44>
|   |   `-TextComment 0x5626fbd982f0 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x5626fbd98370 <line:5302:3, col:37>
|   | `-TextComment 0x5626fbd98340 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x5626fbd983c0 <line:5304:3>
|   | `-TextComment 0x5626fbd98390 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd983e0 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd98490 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x5626fbd98440 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x5626fbd98460 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x5626fbd984b0 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x5626fbd98540 <col:17, col:71>
|   |   `-TextComment 0x5626fbd98510 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   `-ParagraphComment 0x5626fbd98610 <line:5307:3, line:5308:1>
|     |-TextComment 0x5626fbd98560 <line:5307:3> Text=" "
|     |-InlineCommandComment 0x5626fbd985b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|     `-TextComment 0x5626fbd985d0 <line:5308:1> Text=" "
|-FunctionDecl 0x5626fbcff0a0 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x5626fbcff010 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5626fbd989d0 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x5626fbd98710 <line:5313:3>
|   | `-TextComment 0x5626fbd986e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd98730 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5626fbd98790 <col:10, col:49>
|   |   `-TextComment 0x5626fbd98760 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x5626fbd987e0 <line:5315:3, col:42>
|   | `-TextComment 0x5626fbd987b0 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x5626fbd98830 <line:5317:3>
|   | `-TextComment 0x5626fbd98800 <col:3> Text=" "
|   `-ParamCommandComment 0x5626fbd98850 <col:4, line:5319:1> [in] implicitly Param="thread" ParamIndex=0
|     `-ParagraphComment 0x5626fbd98980 <line:5317:17, line:5319:1>
|       |-TextComment 0x5626fbd988b0 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|       |-TextComment 0x5626fbd988d0 <line:5318:3> Text=" "
|       |-InlineCommandComment 0x5626fbd98920 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5626fbd98940 <line:5319:1> Text=" "
|-FunctionDecl 0x5626fbcff2a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x5626fbcff1d0 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x5626fbd99050 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x5626fbd98a70 <line:5337:3>
|   | `-TextComment 0x5626fbd98a40 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd98a90 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x5626fbd98af0 <col:10, col:69>
|   |   `-TextComment 0x5626fbd98ac0 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x5626fbd98b60 <line:5339:3, line:5340:56>
|   | |-TextComment 0x5626fbd98b10 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x5626fbd98b30 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x5626fbd98bb0 <line:5342:3>
|   | `-TextComment 0x5626fbd98b80 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd98bd0 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x5626fbd98c50 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x5626fbd98c00 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x5626fbd98c20 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x5626fbd98ca0 <line:5346:3>
|   | `-TextComment 0x5626fbd98c70 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd98cc0 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x5626fbd98d40 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x5626fbd98cf0 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x5626fbd98d10 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x5626fbd98d90 <line:5350:3>
|   | `-TextComment 0x5626fbd98d60 <col:3> Text=" "
|   |-ParamCommandComment 0x5626fbd98db0 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5626fbd98e40 <col:17, col:30>
|   |   `-TextComment 0x5626fbd98e10 <col:17, col:30> Text=" ID of thread."
|   |-ParagraphComment 0x5626fbd98e90 <line:5352:3>
|   | `-TextComment 0x5626fbd98e60 <col:3> Text=" "
|   |-BlockCommandComment 0x5626fbd98eb0 <col:4, line:5353:3> Name="retval"
|   | `-ParagraphComment 0x5626fbd98f30 <line:5352:11, line:5353:3>
|   |   |-TextComment 0x5626fbd98ee0 <line:5352:11, col:30> Text=" 0       On success."
|   |   `-TextComment 0x5626fbd98f00 <line:5353:3> Text=" "
|   `-BlockCommandComment 0x5626fbd98f50 <col:4, line:5354:74> Name="retval"
|     `-ParagraphComment 0x5626fbd98fd0 <line:5353:11, line:5354:74>
|       |-TextComment 0x5626fbd98f80 <line:5353:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|       `-TextComment 0x5626fbd98fa0 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x5626fbcff818 prev 0x5626fbcb0210 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x5626fbcff6f0 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x5626fbcff780 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x5626fbcffa08 prev 0x5626fbcaa328 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5626fbcff8e0 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x5626fbcff970 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x5626fbcffce8 <line:26:1, line:35:1>
|   |-DoStmt 0x5626fbcffb88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbcffb50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbcffaf0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbcffb68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbcffc88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x5626fbcffc70 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbcffba8 <col:2> 'void (void *, struct k_thread *)' Function 0x5626fbcff818 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x5626fbcffcb8 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbcffbc8 <col:31> 'void *' lvalue ParmVar 0x5626fbcff8e0 'object' 'void *'
|     `-ImplicitCastExpr 0x5626fbcffcd0 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbcffbe8 <col:39> 'struct k_thread *' lvalue ParmVar 0x5626fbcff970 'thread' 'struct k_thread *'
|-FunctionDecl 0x5626fbcffdb0 prev 0x5626fbcb08b0 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x5626fbcffd20 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x5626fbcfff00 prev 0x5626fbcaa6d0 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5626fbcffe70 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x5626fbd048d0 <line:40:1, line:49:1>
|   |-DoStmt 0x5626fbd04818 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd047e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd04780 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd047f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd04890 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x5626fbd04878 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd04838 <col:2> 'void (void *)' Function 0x5626fbcffdb0 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x5626fbd048b8 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd04858 <col:26> 'void *' lvalue ParmVar 0x5626fbcffe70 'object' 'void *'
|-FunctionDecl 0x5626fbd049a8 prev 0x5626fbcaabf8 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x5626fbd04910 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x5626fbd04b08 prev 0x5626fbcaaa98 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5626fbd04a70 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x5626fbd04da8 <line:54:1, line:62:1>
|   |-DoStmt 0x5626fbd04c80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd04c48 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd04be8 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd04c60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd04d98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x5626fbd04d58 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x5626fbd04d40 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd04ca0 <col:9> 'void *(enum k_objects)' Function 0x5626fbd049a8 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x5626fbd04d80 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd04cc0 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x5626fbd04a70 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x5626fbd05320 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x5626fbd04df0 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5626fbd04e68 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5626fbd04ee0 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbd04f58 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5626fbd04fd8 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x5626fbd05058 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x5626fbd050d8 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x5626fbd05158 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x5626fbd051d0 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x5626fbd05248 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x5626fbd059d8 prev 0x5626fbcb4620 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd05438 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5626fbd054b0 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5626fbd05528 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbd055a0 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5626fbd05620 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x5626fbd056a0 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x5626fbd05790 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x5626fbd05810 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x5626fbd05888 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5626fbd05900 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x5626fbd05f08 <line:67:1, line:82:1>
|   |-DoStmt 0x5626fbd05b98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd05b60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd05b00 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd05b78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd05ef8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x5626fbd05d98 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x5626fbd05d80 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd05bb8 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x5626fbd05320 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd05e08 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd05bd8 <col:32> 'struct k_thread *' lvalue ParmVar 0x5626fbd05438 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x5626fbd05e20 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd05bf8 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x5626fbd054b0 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x5626fbd05e38 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd05c18 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x5626fbd05528 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5626fbd05e50 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd05c38 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x5626fbd055a0 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x5626fbd05e68 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd05c58 <col:70> 'void *' lvalue ParmVar 0x5626fbd05620 'p1' 'void *'
|       |-ImplicitCastExpr 0x5626fbd05e80 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd05c78 <col:74> 'void *' lvalue ParmVar 0x5626fbd056a0 'p2' 'void *'
|       |-ImplicitCastExpr 0x5626fbd05e98 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd05c98 <col:78> 'void *' lvalue ParmVar 0x5626fbd05790 'p3' 'void *'
|       |-ImplicitCastExpr 0x5626fbd05eb0 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd05cb8 <col:82> 'int' lvalue ParmVar 0x5626fbd05810 'prio' 'int'
|       |-ImplicitCastExpr 0x5626fbd05ec8 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd05cd8 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbd05888 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5626fbd05ee0 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd05cf8 <col:97> 's32_t':'int' lvalue ParmVar 0x5626fbd05900 'delay' 's32_t':'int'
|-FunctionDecl 0x5626fbd05fc8 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x5626fbd05f38 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x5626fbd06110 prev 0x5626fbcb6090 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5626fbd06080 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x5626fbd063b8 <line:87:1, line:95:1>
|   |-DoStmt 0x5626fbd06288 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd06250 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd061f0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd06268 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd063a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x5626fbd06368 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x5626fbd06350 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd062a8 <col:9> 's32_t (s32_t)' Function 0x5626fbd05fc8 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x5626fbd06390 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd062c8 <col:24> 's32_t':'int' lvalue ParmVar 0x5626fbd06080 'ms' 's32_t':'int'
|-FunctionDecl 0x5626fbd06478 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x5626fbd063e8 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x5626fbd065c0 prev 0x5626fbcb6208 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5626fbd06530 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x5626fbd06828 <line:100:1, line:108:1>
|   |-DoStmt 0x5626fbd06738 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd06700 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd066a0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd06718 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd06818 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x5626fbd067d8 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x5626fbd067c0 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd06758 <col:9> 's32_t (s32_t)' Function 0x5626fbd06478 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x5626fbd06800 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd067a0 <col:25> 's32_t':'int' lvalue ParmVar 0x5626fbd06530 'us' 's32_t':'int'
|-FunctionDecl 0x5626fbd068e8 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x5626fbd06858 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x5626fbd06a30 prev 0x5626fbcb63b0 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x5626fbd069a0 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x5626fbd06c98 <line:113:1, line:122:1>
|   |-DoStmt 0x5626fbd06ba8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd06b70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd06b10 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd06b88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd06c58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x5626fbd06c40 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd06bc8 <col:2> 'void (u32_t)' Function 0x5626fbd068e8 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x5626fbd06c80 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd06be8 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbd069a0 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x5626fbd06cd8 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x5626fbd06d98 prev 0x5626fbcb6520 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x5626fbd06fb8 <line:127:1, line:136:1>
|   |-DoStmt 0x5626fbd06f08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd06ed0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd06e70 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd06ee8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd06f98 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x5626fbd06f80 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x5626fbd06f28 <col:2> 'void ()' Function 0x5626fbd06cd8 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x5626fbd07078 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5626fbd06fe8 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd071c0 prev 0x5626fbcb6700 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbd07130 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5626fbd07458 <line:141:1, line:150:1>
|   |-DoStmt 0x5626fbd07338 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd07300 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd072a0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd07318 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd07418 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x5626fbd07400 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd07358 <col:2> 'void (k_tid_t)' Function 0x5626fbd07078 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5626fbd07440 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd07378 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd07130 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd07500 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x5626fbd075c0 prev 0x5626fbcb68d0 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x5626fbd07828 <line:155:1, line:163:1>
|   |-DoStmt 0x5626fbd07730 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd076f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd07698 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd07710 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd07818 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x5626fbd077f8 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x5626fbd077e0 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5626fbd07750 <col:9> 'k_tid_t ()' Function 0x5626fbd07500 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x5626fbd078e8 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5626fbd07858 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd07a30 prev 0x5626fbcb6a38 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbd079a0 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5626fbd07c60 <line:168:1, line:177:1>
|   |-DoStmt 0x5626fbd07ba8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd07b70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd07b10 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd07b88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd07c20 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x5626fbd07c08 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd07bc8 <col:2> 'void (k_tid_t)' Function 0x5626fbd078e8 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5626fbd07c48 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd07be8 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd079a0 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd07d20 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5626fbd07c90 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd07e68 prev 0x5626fbcb6ba8 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbd07dd8 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5626fbd08098 <line:182:1, line:191:1>
|   |-DoStmt 0x5626fbd07fe0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd07fa8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd07f48 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd07fc0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd08058 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x5626fbd08040 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd08000 <col:2> 'void (k_tid_t)' Function 0x5626fbd07d20 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5626fbd08080 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd08020 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd07dd8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd08160 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x5626fbd080c8 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd082b0 prev 0x5626fbcb7458 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbd08218 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5626fbd08558 <line:196:1, line:204:1>
|   |-DoStmt 0x5626fbd08428 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd083f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd08390 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd08408 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd08548 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x5626fbd08508 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x5626fbd084f0 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd08448 <col:9> 'int (k_tid_t)' Function 0x5626fbd08160 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x5626fbd08530 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd08468 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd08218 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd086a0 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x5626fbd08588 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x5626fbd08608 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x5626fbd088d8 prev 0x5626fbcb76d0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5626fbd087c0 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5626fbd08840 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x5626fbd08bb8 <line:209:1, line:218:1>
|   |-DoStmt 0x5626fbd08a58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd08a20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd089c0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd08a38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd08b58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x5626fbd08b40 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd08a78 <col:2> 'void (k_tid_t, int)' Function 0x5626fbd086a0 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x5626fbd08b88 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbd08a98 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd087c0 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x5626fbd08ba0 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd08ab8 <col:39> 'int' lvalue ParmVar 0x5626fbd08840 'prio' 'int'
|-FunctionDecl 0x5626fbd08d00 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x5626fbd08be8 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x5626fbd08c68 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x5626fbd08ed8 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5626fbd08dc0 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5626fbd08e40 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x5626fbd09150 <line:223:1, line:232:1>
|   |-DoStmt 0x5626fbd09058 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd09020 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd08fc0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd09038 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd090f0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x5626fbd090d8 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd09078 <col:2> 'void (k_tid_t, int)' Function 0x5626fbd08d00 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x5626fbd09120 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbd09098 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd08dc0 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x5626fbd09138 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd090b8 <col:39> 'int' lvalue ParmVar 0x5626fbd08e40 'deadline' 'int'
|-FunctionDecl 0x5626fbd09210 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5626fbd09180 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd09358 prev 0x5626fbcb7848 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbd092c8 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5626fbd09588 <line:237:1, line:246:1>
|   |-DoStmt 0x5626fbd094d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd09498 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd09438 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd094b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd09548 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x5626fbd09530 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd094f0 <col:2> 'void (k_tid_t)' Function 0x5626fbd09210 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5626fbd09570 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd09510 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd092c8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd09648 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5626fbd095b8 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd097d0 prev 0x5626fbcb79b8 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5626fbd09700 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5626fbd09a00 <line:251:1, line:260:1>
|   |-DoStmt 0x5626fbd09948 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd09910 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd098b0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd09928 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd099c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x5626fbd099a8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd09968 <col:2> 'void (k_tid_t)' Function 0x5626fbd09648 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5626fbd099e8 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd09988 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd09700 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5626fbd09a78 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x5626fbd09b40 prev 0x5626fbcb90d8 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x5626fbd09d68 <line:265:1, line:273:1>
|   |-DoStmt 0x5626fbd09cb0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd09c78 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd09c18 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd09c90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd09d58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x5626fbd09d38 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x5626fbd09d20 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5626fbd09cd0 <col:9> 'int ()' Function 0x5626fbd09a78 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x5626fbd09e30 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x5626fbd09da0 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x5626fbd09f80 prev 0x5626fbcb9810 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x5626fbd09ef0 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x5626fbd0a1b0 <line:278:1, line:287:1>
|   |-DoStmt 0x5626fbd0a0f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0a0c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0a060 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0a0d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd0a170 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x5626fbd0a158 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd0a118 <col:2> 'void (void *)' Function 0x5626fbd09e30 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x5626fbd0a198 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd0a138 <col:34> 'void *' lvalue ParmVar 0x5626fbd09ef0 'value' 'void *'
|-FunctionDecl 0x5626fbd0a228 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x5626fbd0a2f0 prev 0x5626fbcb99b8 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x5626fbd0a518 <line:292:1, line:300:1>
|   |-DoStmt 0x5626fbd0a460 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0a428 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0a3c8 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0a440 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0a508 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x5626fbd0a4e8 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x5626fbd0a4d0 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5626fbd0a480 <col:9> 'void *()' Function 0x5626fbd0a228 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x5626fbd0a668 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x5626fbd0a548 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x5626fbd0a5c8 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x5626fbd0a880 prev 0x5626fbcb9c38 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x5626fbd0a728 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5626fbd0a7e0 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x5626fbd0ab68 <line:305:1, line:313:1>
|   |-DoStmt 0x5626fbd0aa00 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0a9c8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0a968 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0a9e0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0ab58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x5626fbd0aaf8 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5626fbd0aae0 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd0aa20 <col:9> 'int (k_tid_t, const char *)' Function 0x5626fbd0a668 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x5626fbd0ab28 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd0aa40 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd0a728 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x5626fbd0ab40 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd0aa60 <col:45> 'const char *' lvalue ParmVar 0x5626fbd0a7e0 'value' 'const char *'
|-FunctionDecl 0x5626fbd0ad38 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x5626fbd0ab98 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5626fbd0ac18 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x5626fbd0ac90 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x5626fbd0afa0 prev 0x5626fbcba9b8 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x5626fbd0ae00 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5626fbd0ae80 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x5626fbd0aef8 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x5626fbd0b2d8 <line:318:1, line:326:1>
|   |-DoStmt 0x5626fbd0b128 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0b0f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0b090 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0b108 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0b2c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x5626fbd0b248 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x5626fbd0b230 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd0b148 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x5626fbd0ad38 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x5626fbd0b280 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd0b168 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5626fbd0ae00 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x5626fbd0b298 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd0b188 <col:46> 'char *' lvalue ParmVar 0x5626fbd0ae80 'buf' 'char *'
|       `-ImplicitCastExpr 0x5626fbd0b2b0 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd0b1a8 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x5626fbd0aef8 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x5626fbd0b4b0 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x5626fbd0b320 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x5626fbd0b398 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x5626fbd0b410 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x5626fbd0b720 prev 0x5626fbcbd990 <line:330:1, line:340:1> line:330:20 used k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd0b590 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5626fbd0b608 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x5626fbd0b680 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x5626fbd0c268 <line:331:1, line:340:1>
|   |-DoStmt 0x5626fbd0c0d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0c098 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0c038 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0c0b0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd0c1e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x5626fbd0c1d0 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd0c0f0 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x5626fbd0b4b0 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x5626fbd0c220 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbd0c110 <col:23> 'struct k_timer *' lvalue ParmVar 0x5626fbd0b590 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x5626fbd0c238 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbd0c130 <col:30> 's32_t':'int' lvalue ParmVar 0x5626fbd0b608 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x5626fbd0c250 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd0c150 <col:40> 's32_t':'int' lvalue ParmVar 0x5626fbd0b680 'period' 's32_t':'int'
|-FunctionDecl 0x5626fbd0c340 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x5626fbd0c2b0 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x5626fbd0c4a0 prev 0x5626fbcbdb30 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbd0c410 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x5626fbd0c708 <line:345:1, line:354:1>
|   |-DoStmt 0x5626fbd0c618 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0c5e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0c580 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0c5f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd0c6c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x5626fbd0c6b0 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd0c638 <col:2> 'void (struct k_timer *)' Function 0x5626fbd0c340 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x5626fbd0c6f0 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd0c658 <col:22> 'struct k_timer *' lvalue ParmVar 0x5626fbd0c410 'timer' 'struct k_timer *'
|-FunctionDecl 0x5626fbd0c7e0 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5626fbd0c750 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x5626fbd0c940 prev 0x5626fbcbdd40 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbd0c8b0 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x5626fbd0cbe8 <line:359:1, line:367:1>
|   |-DoStmt 0x5626fbd0cab8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0ca80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0ca20 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0ca98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0cbd8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x5626fbd0cb98 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5626fbd0cb80 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd0cad8 <col:9> 'u32_t (struct k_timer *)' Function 0x5626fbd0c7e0 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5626fbd0cbc0 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd0caf8 <col:35> 'struct k_timer *' lvalue ParmVar 0x5626fbd0c8b0 'timer' 'struct k_timer *'
|-FunctionDecl 0x5626fbd0ccc0 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5626fbd0cc30 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x5626fbd0ce20 prev 0x5626fbcbded0 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbd0cd90 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x5626fbd0d078 <line:372:1, line:380:1>
|   |-DoStmt 0x5626fbd0cf98 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0cf60 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0cf00 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0cf78 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0d068 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x5626fbd0d028 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5626fbd0d010 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd0cfb8 <col:9> 'u32_t (struct k_timer *)' Function 0x5626fbd0ccc0 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5626fbd0d050 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd0cfd8 <col:36> 'struct k_timer *' lvalue ParmVar 0x5626fbd0cd90 'timer' 'struct k_timer *'
|-FunctionDecl 0x5626fbd0d150 prev 0x5626fbcbe530 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5626fbd0d0c0 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x5626fbd0d2b0 prev 0x5626fbcbe3d0 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbd0d220 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x5626fbd0d4f0 <line:385:1, line:393:1>
|   |-DoStmt 0x5626fbd0d428 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0d3f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0d390 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0d408 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0d4e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x5626fbd0d4a0 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5626fbd0d488 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd0d448 <col:9> 'u32_t (struct k_timer *)' Function 0x5626fbd0d150 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5626fbd0d4c8 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd0d468 <col:38> 'struct k_timer *' lvalue ParmVar 0x5626fbd0d220 'timer' 'struct k_timer *'
|-FunctionDecl 0x5626fbd0d650 prev 0x5626fbcbee68 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x5626fbd0d538 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x5626fbd0d5b8 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x5626fbd0d840 prev 0x5626fbcbec50 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5626fbd0d728 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5626fbd0d7a8 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x5626fbd0db18 <line:398:1, line:407:1>
|   |-DoStmt 0x5626fbd0d9c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0d988 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0d928 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0d9a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd0dab8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x5626fbd0daa0 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd0d9e0 <col:2> 'void (struct k_timer *, void *)' Function 0x5626fbd0d650 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x5626fbd0dae8 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbd0da00 <col:31> 'struct k_timer *' lvalue ParmVar 0x5626fbd0d728 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x5626fbd0db00 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd0da20 <col:38> 'void *' lvalue ParmVar 0x5626fbd0d7a8 'user_data' 'void *'
|-FunctionDecl 0x5626fbd0dbf8 prev 0x5626fbcbf810 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x5626fbd0db60 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x5626fbd0dd60 prev 0x5626fbcbf158 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5626fbd0dcc8 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x5626fbd0e020 <line:412:1, line:420:1>
|   |-DoStmt 0x5626fbd0ded8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0dea0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0de40 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0deb8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0dff8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x5626fbd0dfb8 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x5626fbd0dfa0 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd0def8 <col:9> 'void *(struct k_timer *)' Function 0x5626fbd0dbf8 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x5626fbd0dfe0 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd0df18 <col:38> 'struct k_timer *' lvalue ParmVar 0x5626fbd0dcc8 'timer' 'struct k_timer *'
|-FunctionDecl 0x5626fbd0e0c0 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x5626fbd0e180 prev 0x5626fbcbfa88 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x5626fbd0e3d8 <line:425:1, line:435:1>
|   |-DoStmt 0x5626fbd0e2f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0e2b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0e258 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0e2d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0e3c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x5626fbd0e3a8 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x5626fbd0e390 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5626fbd0e310 <col:9> 's64_t ()' Function 0x5626fbd0e0c0 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x5626fbd0e4b0 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x5626fbd0e420 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x5626fbd0e610 prev 0x5626fbcc19f0 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbd0e580 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x5626fbd0e8a8 <line:440:1, line:449:1>
|   |-DoStmt 0x5626fbd0e788 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0e750 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0e6f0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0e768 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd0e868 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x5626fbd0e850 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd0e7a8 <col:2> 'void (struct k_queue *)' Function 0x5626fbd0e4b0 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x5626fbd0e890 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd0e7c8 <col:22> 'struct k_queue *' lvalue ParmVar 0x5626fbd0e580 'queue' 'struct k_queue *'
|-FunctionDecl 0x5626fbd0e980 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x5626fbd0e8f0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5626fbd0eae0 prev 0x5626fbcc3480 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbd0ea50 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5626fbd0ed10 <line:454:1, line:463:1>
|   |-DoStmt 0x5626fbd0ec58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0ec20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0ebc0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0ec38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd0ecd0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x5626fbd0ecb8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd0ec78 <col:2> 'void (struct k_queue *)' Function 0x5626fbd0e980 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x5626fbd0ecf8 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd0ec98 <col:29> 'struct k_queue *' lvalue ParmVar 0x5626fbd0ea50 'queue' 'struct k_queue *'
|-FunctionDecl 0x5626fbd0ee70 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5626fbd0ed58 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x5626fbd0edd8 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x5626fbd0f0c8 prev 0x5626fbcc39c0 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5626fbd0ef48 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbd0f030 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x5626fbd0f350 <line:468:1, line:476:1>
|   |-DoStmt 0x5626fbd0f248 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0f210 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0f1b0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0f228 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0f340 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x5626fbd0f2e0 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x5626fbd0f2c8 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd0f268 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5626fbd0ee70 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x5626fbd0f310 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd0f288 <col:37> 'struct k_queue *' lvalue ParmVar 0x5626fbd0ef48 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5626fbd0f328 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd0f2a8 <col:44> 'void *' lvalue ParmVar 0x5626fbd0f030 'data' 'void *'
|-FunctionDecl 0x5626fbd0f4b0 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5626fbd0f398 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x5626fbd0f418 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x5626fbd0f6a0 prev 0x5626fbcc3df8 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5626fbd0f588 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbd0f608 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x5626fbd0f928 <line:481:1, line:489:1>
|   |-DoStmt 0x5626fbd0f820 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0f7e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0f788 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0f800 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0f918 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x5626fbd0f8b8 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x5626fbd0f8a0 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd0f840 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5626fbd0f4b0 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x5626fbd0f8e8 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd0f860 <col:38> 'struct k_queue *' lvalue ParmVar 0x5626fbd0f588 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5626fbd0f900 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd0f880 <col:45> 'void *' lvalue ParmVar 0x5626fbd0f608 'data' 'void *'
|-FunctionDecl 0x5626fbd0fa88 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x5626fbd0f970 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x5626fbd0f9e8 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd0fc78 prev 0x5626fbcc4b98 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd0fb60 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5626fbd0fbd8 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd0ff68 <line:494:1, line:502:1>
|   |-DoStmt 0x5626fbd0fdf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd0fdc0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd0fd60 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd0fdd8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd0ff58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x5626fbd0fef8 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x5626fbd0fee0 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd0fe18 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x5626fbd0fa88 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd0ff28 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd0fe38 <col:28> 'struct k_queue *' lvalue ParmVar 0x5626fbd0fb60 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5626fbd0ff40 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd0fe58 <col:35> 's32_t':'int' lvalue ParmVar 0x5626fbd0fbd8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd10070 prev 0x5626fbcc62c0 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x5626fbd0ffb0 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x5626fbd101d8 prev 0x5626fbcc6158 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbd10140 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x5626fbd10478 <line:507:1, line:515:1>
|   |-DoStmt 0x5626fbd10350 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd10318 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd102b8 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd10330 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd10468 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x5626fbd10428 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x5626fbd10410 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd10370 <col:9> 'int (struct k_queue *)' Function 0x5626fbd10070 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x5626fbd10450 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd10390 <col:33> 'struct k_queue *' lvalue ParmVar 0x5626fbd10140 'queue' 'struct k_queue *'
|-FunctionDecl 0x5626fbd10558 prev 0x5626fbcc6780 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x5626fbd104c0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5626fbd106c0 prev 0x5626fbcc6618 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbd10628 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5626fbd10968 <line:520:1, line:528:1>
|   |-DoStmt 0x5626fbd10838 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd10800 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd107a0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd10818 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd10958 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x5626fbd10918 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x5626fbd10900 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd10858 <col:9> 'void *(struct k_queue *)' Function 0x5626fbd10558 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x5626fbd10940 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd10878 <col:34> 'struct k_queue *' lvalue ParmVar 0x5626fbd10628 'queue' 'struct k_queue *'
|-FunctionDecl 0x5626fbd10a48 prev 0x5626fbcc75f8 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x5626fbd109b0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5626fbd10bb0 prev 0x5626fbcc7490 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5626fbd10b18 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5626fbd10df0 <line:533:1, line:541:1>
|   |-DoStmt 0x5626fbd10d28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd10cf0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd10c90 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd10d08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd10de0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x5626fbd10da0 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x5626fbd10d88 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd10d48 <col:9> 'void *(struct k_queue *)' Function 0x5626fbd10a48 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x5626fbd10dc8 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd10d68 <col:34> 'struct k_queue *' lvalue ParmVar 0x5626fbd10b18 'queue' 'struct k_queue *'
|-FunctionDecl 0x5626fbd11128 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x5626fbd10ed8 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x5626fbd10f58 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x5626fbd10fd0 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd113a8 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd11208 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x5626fbd11288 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x5626fbd11300 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd116d8 <line:546:1, line:554:1>
|   |-DoStmt 0x5626fbd11530 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd114f8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd11498 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd11510 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd116c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x5626fbd11648 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x5626fbd11630 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd11550 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x5626fbd11128 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd11680 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd11570 <col:29> 'struct k_futex *' lvalue ParmVar 0x5626fbd11208 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x5626fbd11698 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd11590 <col:36> 'int' lvalue ParmVar 0x5626fbd11288 'expected' 'int'
|       `-ImplicitCastExpr 0x5626fbd116b0 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd115b0 <col:46> 's32_t':'int' lvalue ParmVar 0x5626fbd11300 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd118b8 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x5626fbd11720 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x5626fbd11798 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x5626fbd11aa8 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x5626fbd11990 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x5626fbd11a08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x5626fbd11d98 <line:559:1, line:567:1>
|   |-DoStmt 0x5626fbd11c28 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd11bf0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd11b90 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd11c08 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd11d88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x5626fbd11d28 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x5626fbd11d10 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd11c48 <col:9> 'int (struct k_futex *, bool)' Function 0x5626fbd118b8 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x5626fbd11d58 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd11c68 <col:29> 'struct k_futex *' lvalue ParmVar 0x5626fbd11990 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x5626fbd11d70 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd11c88 <col:36> 'bool' lvalue ParmVar 0x5626fbd11a08 'wake_all' 'bool'
|-FunctionDecl 0x5626fbd11ef0 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x5626fbd11de0 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x5626fbd11e58 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x5626fbd13108 prev 0x5626fbbb9b00 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x5626fbd11fc8 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5626fbd13070 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x5626fbd133f8 <line:572:1, line:580:1>
|   |-DoStmt 0x5626fbd13288 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd13250 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd131f0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd13268 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd133e8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x5626fbd13388 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x5626fbd13370 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd132a8 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x5626fbd11ef0 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x5626fbd133b8 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd132c8 <col:35> 'struct k_stack *' lvalue ParmVar 0x5626fbd11fc8 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x5626fbd133d0 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd132e8 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbd13070 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x5626fbd13558 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x5626fbd13440 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x5626fbd134b8 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x5626fbd13748 prev 0x5626fbbb9fa8 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x5626fbd13630 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5626fbd136a8 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x5626fbd13a38 <line:585:1, line:593:1>
|   |-DoStmt 0x5626fbd138c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd13890 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd13830 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd138a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd13a28 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x5626fbd139c8 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x5626fbd139b0 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd138e8 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x5626fbd13558 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x5626fbd139f8 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd13908 <col:29> 'struct k_stack *' lvalue ParmVar 0x5626fbd13630 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x5626fbd13a10 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd13928 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x5626fbd136a8 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x5626fbd13c18 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x5626fbd13a80 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x5626fbd13af8 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x5626fbd13b70 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd13e90 prev 0x5626fbbba2e8 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd13cf8 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5626fbd13d70 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x5626fbd13de8 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd141e8 <line:598:1, line:606:1>
|   |-DoStmt 0x5626fbd14018 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd13fe0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd13f80 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd13ff8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd141d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x5626fbd14158 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x5626fbd14140 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd14038 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x5626fbd13c18 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd14190 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd14080 <col:28> 'struct k_stack *' lvalue ParmVar 0x5626fbd13cf8 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x5626fbd141a8 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd140a0 <col:35> 'stack_data_t *' lvalue ParmVar 0x5626fbd13d70 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x5626fbd141c0 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd140c0 <col:41> 's32_t':'int' lvalue ParmVar 0x5626fbd13de8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd142c8 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x5626fbd14230 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x5626fbd14430 prev 0x5626fbcde950 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5626fbd14398 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x5626fbd146d8 <line:611:1, line:619:1>
|   |-DoStmt 0x5626fbd145a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd14570 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd14510 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd14588 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd146c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x5626fbd14688 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x5626fbd14670 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd145c8 <col:9> 'int (struct k_mutex *)' Function 0x5626fbd142c8 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x5626fbd146b0 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd145e8 <col:29> 'struct k_mutex *' lvalue ParmVar 0x5626fbd14398 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x5626fbd14838 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x5626fbd14720 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x5626fbd14798 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd14a28 prev 0x5626fbcdebe8 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd14910 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x5626fbd14988 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd14d18 <line:624:1, line:632:1>
|   |-DoStmt 0x5626fbd14ba8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd14b70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd14b10 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd14b88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd14d08 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x5626fbd14ca8 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x5626fbd14c90 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd14bc8 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x5626fbd14838 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd14cd8 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd14be8 <col:29> 'struct k_mutex *' lvalue ParmVar 0x5626fbd14910 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x5626fbd14cf0 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd14c08 <col:36> 's32_t':'int' lvalue ParmVar 0x5626fbd14988 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd14df8 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x5626fbd14d60 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x5626fbd14f60 prev 0x5626fbcded88 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5626fbd14ec8 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x5626fbd151f0 <line:637:1, line:645:1>
|   |-DoStmt 0x5626fbd15128 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd150f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd15090 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd15108 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd151e0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x5626fbd151a0 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x5626fbd15188 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd15148 <col:9> 'int (struct k_mutex *)' Function 0x5626fbd14df8 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x5626fbd151c8 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd15168 <col:31> 'struct k_mutex *' lvalue ParmVar 0x5626fbd14ec8 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x5626fbd153e0 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x5626fbd15238 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x5626fbd152b8 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x5626fbd15338 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x5626fbd15668 prev 0x5626fbcdf3c8 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x5626fbd154c0 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x5626fbd15540 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x5626fbd155c0 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x5626fbd15998 <line:650:1, line:658:1>
|   |-DoStmt 0x5626fbd157f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd157b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd15758 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd157d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd15988 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x5626fbd15908 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x5626fbd158f0 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd15810 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x5626fbd153e0 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x5626fbd15940 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd15830 <col:27> 'struct k_sem *' lvalue ParmVar 0x5626fbd154c0 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x5626fbd15958 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd15850 <col:32> 'unsigned int' lvalue ParmVar 0x5626fbd15540 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x5626fbd15970 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd15870 <col:47> 'unsigned int' lvalue ParmVar 0x5626fbd155c0 'limit' 'unsigned int'
|-FunctionDecl 0x5626fbd15af8 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x5626fbd159e0 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x5626fbd15a58 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd15ce8 prev 0x5626fbcdf668 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd15bd0 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x5626fbd15c48 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd15fd8 <line:663:1, line:671:1>
|   |-DoStmt 0x5626fbd15e68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd15e30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd15dd0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd15e48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd15fc8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x5626fbd15f68 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x5626fbd15f50 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd15e88 <col:9> 'int (struct k_sem *, s32_t)' Function 0x5626fbd15af8 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd15f98 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd15ea8 <col:27> 'struct k_sem *' lvalue ParmVar 0x5626fbd15bd0 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x5626fbd15fb0 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd15ec8 <col:32> 's32_t':'int' lvalue ParmVar 0x5626fbd15c48 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd160b0 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x5626fbd16020 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x5626fbd16210 prev 0x5626fbcdf880 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5626fbd16180 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x5626fbd164a8 <line:676:1, line:685:1>
|   |-DoStmt 0x5626fbd16388 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd16350 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd162f0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd16368 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd16468 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x5626fbd16450 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd163a8 <col:2> 'void (struct k_sem *)' Function 0x5626fbd160b0 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x5626fbd16490 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd163c8 <col:20> 'struct k_sem *' lvalue ParmVar 0x5626fbd16180 'sem' 'struct k_sem *'
|-FunctionDecl 0x5626fbd16580 prev 0x5626fbce0140 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x5626fbd164f0 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x5626fbd166e0 prev 0x5626fbcdffb0 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5626fbd16650 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x5626fbd16910 <line:690:1, line:699:1>
|   |-DoStmt 0x5626fbd16858 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd16820 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd167c0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd16838 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd168d0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x5626fbd168b8 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd16878 <col:2> 'void (struct k_sem *)' Function 0x5626fbd16580 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x5626fbd168f8 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd16898 <col:21> 'struct k_sem *' lvalue ParmVar 0x5626fbd16650 'sem' 'struct k_sem *'
|-FunctionDecl 0x5626fbd169f0 prev 0x5626fbce0598 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x5626fbd16958 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x5626fbd16b58 prev 0x5626fbce0408 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5626fbd16ac0 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x5626fbd16df8 <line:704:1, line:712:1>
|   |-DoStmt 0x5626fbd16cd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd16c98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd16c38 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd16cb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd16de8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x5626fbd16da8 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x5626fbd16d90 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd16cf0 <col:9> 'unsigned int (struct k_sem *)' Function 0x5626fbd169f0 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x5626fbd16dd0 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd16d10 <col:32> 'struct k_sem *' lvalue ParmVar 0x5626fbd16ac0 'sem' 'struct k_sem *'
|-FunctionDecl 0x5626fbd16fd8 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x5626fbd16e40 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbd16eb8 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x5626fbd16f30 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x5626fbd17260 prev 0x5626fbce3f78 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x5626fbd170c8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbd17140 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbd171b8 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x5626fbd17598 <line:717:1, line:725:1>
|   |-DoStmt 0x5626fbd173e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd173b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd17350 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd173c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd17588 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x5626fbd17508 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x5626fbd174f0 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd17408 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x5626fbd16fd8 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x5626fbd17540 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd17428 <col:34> 'struct k_msgq *' lvalue ParmVar 0x5626fbd170c8 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x5626fbd17558 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd17448 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x5626fbd17140 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5626fbd17570 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd17468 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x5626fbd171b8 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x5626fbd17780 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x5626fbd175e0 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbd17660 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x5626fbd176d8 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd17a00 prev 0x5626fbce44c8 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd17860 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbd178e0 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5626fbd17958 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd17d38 <line:730:1, line:738:1>
|   |-DoStmt 0x5626fbd17b88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd17b50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd17af0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd17b68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd17d28 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x5626fbd17ca8 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x5626fbd17c90 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd17ba8 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x5626fbd17780 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd17ce0 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd17bc8 <col:27> 'struct k_msgq *' lvalue ParmVar 0x5626fbd17860 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x5626fbd17cf8 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd17be8 <col:33> 'void *' lvalue ParmVar 0x5626fbd178e0 'data' 'void *'
|       `-ImplicitCastExpr 0x5626fbd17d10 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd17c08 <col:39> 's32_t':'int' lvalue ParmVar 0x5626fbd17958 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd17f20 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x5626fbd17d80 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbd17e00 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x5626fbd17e78 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd181a0 prev 0x5626fbce60a0 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd18000 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbd18080 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5626fbd180f8 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd18470 <line:743:1, line:751:1>
|   |-DoStmt 0x5626fbd18328 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd182f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd18290 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd18308 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd18460 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x5626fbd183e0 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x5626fbd183c8 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd18348 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x5626fbd17f20 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd18418 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd18368 <col:27> 'struct k_msgq *' lvalue ParmVar 0x5626fbd18000 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x5626fbd18430 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd18388 <col:33> 'void *' lvalue ParmVar 0x5626fbd18080 'data' 'void *'
|       `-ImplicitCastExpr 0x5626fbd18448 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd183a8 <col:39> 's32_t':'int' lvalue ParmVar 0x5626fbd180f8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd185d8 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x5626fbd184b8 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x5626fbd18538 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x5626fbd187d0 prev 0x5626fbce6358 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x5626fbd186b0 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbd18730 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x5626fbd18ab8 <line:756:1, line:764:1>
|   |-DoStmt 0x5626fbd18950 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd18918 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd188b8 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd18930 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd18aa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x5626fbd18a48 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x5626fbd18a30 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd18970 <col:9> 'int (struct k_msgq *, void *)' Function 0x5626fbd185d8 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x5626fbd18a78 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd18990 <col:28> 'struct k_msgq *' lvalue ParmVar 0x5626fbd186b0 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x5626fbd18a90 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd189b0 <col:34> 'void *' lvalue ParmVar 0x5626fbd18730 'data' 'void *'
|-FunctionDecl 0x5626fbd18b90 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x5626fbd18b00 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x5626fbd18cf0 prev 0x5626fbce6570 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5626fbd18c60 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5626fbd18f88 <line:769:1, line:778:1>
|   |-DoStmt 0x5626fbd18e68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd18e30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd18dd0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd18e48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd18f48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x5626fbd18f30 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd18e88 <col:2> 'void (struct k_msgq *)' Function 0x5626fbd18b90 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x5626fbd18f70 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd18ea8 <col:22> 'struct k_msgq *' lvalue ParmVar 0x5626fbd18c60 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5626fbd190b0 prev 0x5626fbce6c38 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x5626fbd18fd0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x5626fbd19210 prev 0x5626fbce6780 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5626fbd19180 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5626fbd194b8 <line:783:1, line:791:1>
|   |-DoStmt 0x5626fbd19388 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd19350 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd192f0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd19368 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd194a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x5626fbd19468 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5626fbd19450 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd193a8 <col:9> 'u32_t (struct k_msgq *)' Function 0x5626fbd190b0 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x5626fbd19490 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd193c8 <col:36> 'struct k_msgq *' lvalue ParmVar 0x5626fbd19180 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5626fbd19628 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x5626fbd19500 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x5626fbd19590 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x5626fbd19828 prev 0x5626fbce6ad0 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x5626fbd19700 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5626fbd19790 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x5626fbd19b08 <line:796:1, line:805:1>
|   |-DoStmt 0x5626fbd199a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd19970 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd19910 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd19988 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd19aa8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x5626fbd19a90 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd199c8 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x5626fbd19628 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x5626fbd19ad8 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbd199e8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x5626fbd19700 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x5626fbd19af0 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd19a08 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x5626fbd19790 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x5626fbd19be0 prev 0x5626fbce7648 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x5626fbd19b50 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x5626fbd19d40 prev 0x5626fbce74e8 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5626fbd19cb0 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5626fbd19f80 <line:810:1, line:818:1>
|   |-DoStmt 0x5626fbd19eb8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd19e80 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd19e20 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd19e98 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd19f70 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x5626fbd19f30 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5626fbd19f18 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd19ed8 <col:9> 'u32_t (struct k_msgq *)' Function 0x5626fbd19be0 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x5626fbd19f58 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd19ef8 <col:36> 'struct k_msgq *' lvalue ParmVar 0x5626fbd19cb0 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5626fbd1a0e0 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x5626fbd19fc8 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x5626fbd1a040 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x5626fbd1a2d0 prev 0x5626fbcec528 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x5626fbd1a1b8 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbd1a230 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x5626fbd1a5b8 <line:823:1, line:831:1>
|   |-DoStmt 0x5626fbd1a450 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1a418 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1a3b8 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1a430 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd1a5a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x5626fbd1a548 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x5626fbd1a530 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd1a470 <col:9> 'int (struct k_pipe *, size_t)' Function 0x5626fbd1a0e0 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x5626fbd1a578 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1a490 <col:34> 'struct k_pipe *' lvalue ParmVar 0x5626fbd1a1b8 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x5626fbd1a590 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd1a4b0 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x5626fbd1a230 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x5626fbd1a920 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x5626fbd1a600 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbd1a680 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x5626fbd1a6f8 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbd1a770 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x5626fbd1a7e8 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x5626fbd1a860 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd1ad38 prev 0x5626fbceca48 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd1aa18 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbd1aa98 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5626fbd1ab10 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbd1ab88 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x5626fbd1ac00 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbd1ac78 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd1b160 <line:836:1, line:844:1>
|   |-DoStmt 0x5626fbd1aed8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1aea0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1ae40 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1aeb8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd1b150 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x5626fbd1b058 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x5626fbd1b040 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd1aef8 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x5626fbd1a920 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd1b0c0 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1af18 <col:27> 'struct k_pipe *' lvalue ParmVar 0x5626fbd1aa18 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x5626fbd1b0d8 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1af38 <col:33> 'void *' lvalue ParmVar 0x5626fbd1aa98 'data' 'void *'
|       |-ImplicitCastExpr 0x5626fbd1b0f0 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1af58 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x5626fbd1ab10 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5626fbd1b108 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1af78 <col:55> 'size_t *' lvalue ParmVar 0x5626fbd1ab88 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x5626fbd1b120 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1af98 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x5626fbd1ac00 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5626fbd1b138 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd1afb8 <col:80> 's32_t':'int' lvalue ParmVar 0x5626fbd1ac78 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd1b4c8 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x5626fbd1b1a8 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbd1b228 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x5626fbd1b2a0 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbd1b318 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x5626fbd1b390 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x5626fbd1b408 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd1b8e0 prev 0x5626fbcedfc0 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd1b5c0 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5626fbd1b640 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5626fbd1b6b8 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbd1b730 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x5626fbd1b7a8 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5626fbd1b820 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd1bc88 <line:849:1, line:857:1>
|   |-DoStmt 0x5626fbd1ba80 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1ba48 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1b9e8 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1ba60 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd1bc78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x5626fbd1bb98 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x5626fbd1bb80 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd1baa0 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x5626fbd1b4c8 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd1bbe8 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1bac0 <col:27> 'struct k_pipe *' lvalue ParmVar 0x5626fbd1b5c0 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x5626fbd1bc00 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1bae0 <col:33> 'void *' lvalue ParmVar 0x5626fbd1b640 'data' 'void *'
|       |-ImplicitCastExpr 0x5626fbd1bc18 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1bb00 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x5626fbd1b6b8 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5626fbd1bc30 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1bb20 <col:54> 'size_t *' lvalue ParmVar 0x5626fbd1b730 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x5626fbd1bc48 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1bb40 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x5626fbd1b7a8 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5626fbd1bc60 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd1bb60 <col:76> 's32_t':'int' lvalue ParmVar 0x5626fbd1b820 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd1be70 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x5626fbd1bcd0 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5626fbd1bd50 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x5626fbd1bdc8 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x5626fbd1c0f0 prev 0x5626fbcf8cd8 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5626fbd1bf50 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x5626fbd1bfd0 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x5626fbd1c048 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x5626fbd1c428 <line:862:1, line:870:1>
|   |-DoStmt 0x5626fbd1c278 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1c240 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1c1e0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1c258 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd1c418 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x5626fbd1c398 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5626fbd1c380 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd1c298 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x5626fbd1be70 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x5626fbd1c3d0 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1c2b8 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x5626fbd1bf50 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x5626fbd1c3e8 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1c2d8 <col:31> 'int' lvalue ParmVar 0x5626fbd1bfd0 'num_events' 'int'
|       `-ImplicitCastExpr 0x5626fbd1c400 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd1c2f8 <col:43> 's32_t':'int' lvalue ParmVar 0x5626fbd1c048 'timeout' 's32_t':'int'
|-FunctionDecl 0x5626fbd1c500 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x5626fbd1c470 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x5626fbd1c660 prev 0x5626fbcf8ef0 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5626fbd1c5d0 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5626fbd1c8f8 <line:875:1, line:884:1>
|   |-DoStmt 0x5626fbd1c7d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1c7a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1c740 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1c7b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd1c8b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x5626fbd1c8a0 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd1c7f8 <col:2> 'void (struct k_poll_signal *)' Function 0x5626fbd1c500 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x5626fbd1c8e0 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd1c818 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x5626fbd1c5d0 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x5626fbd1c9d0 prev 0x5626fbcf9960 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x5626fbd1c940 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x5626fbd1cb30 prev 0x5626fbcf9050 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5626fbd1caa0 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5626fbd1cd60 <line:889:1, line:898:1>
|   |-DoStmt 0x5626fbd1cca8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1cc70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1cc10 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1cc88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd1cd20 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x5626fbd1cd08 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd1ccc8 <col:2> 'void (struct k_poll_signal *)' Function 0x5626fbd1c9d0 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x5626fbd1cd48 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd1cce8 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x5626fbd1caa0 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x5626fbd1cf48 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x5626fbd1cda8 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5626fbd1ce28 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x5626fbd1cea8 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x5626fbd1d1f0 prev 0x5626fbcf9d50 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x5626fbd1d028 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5626fbd1d0d0 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x5626fbd1d150 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x5626fbd1d518 <line:903:1, line:912:1>
|   |-DoStmt 0x5626fbd1d378 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1d340 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1d2e0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1d358 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd1d498 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x5626fbd1d480 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd1d398 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x5626fbd1cf48 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x5626fbd1d4d0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbd1d3b8 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x5626fbd1d028 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x5626fbd1d4e8 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbd1d3d8 <col:37> 'unsigned int *' lvalue ParmVar 0x5626fbd1d0d0 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x5626fbd1d500 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd1d3f8 <col:47> 'int *' lvalue ParmVar 0x5626fbd1d150 'result' 'int *'
|-FunctionDecl 0x5626fbd1d680 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x5626fbd1d560 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x5626fbd1d5e0 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x5626fbd1d878 prev 0x5626fbcfa008 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x5626fbd1d758 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5626fbd1d7d8 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x5626fbd1db68 <line:917:1, line:925:1>
|   |-DoStmt 0x5626fbd1d9f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1d9c0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1d960 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1d9d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd1db58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x5626fbd1daf8 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5626fbd1dae0 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd1da18 <col:9> 'int (struct k_poll_signal *, int)' Function 0x5626fbd1d680 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x5626fbd1db28 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x5626fbd1da38 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x5626fbd1d758 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x5626fbd1db40 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd1da58 <col:44> 'int' lvalue ParmVar 0x5626fbd1d7d8 'result' 'int'
|-FunctionDecl 0x5626fbd1dd30 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x5626fbd1dba0 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x5626fbd1dc18 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x5626fbd1df08 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x5626fbd1ddf8 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x5626fbd1de70 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x5626fbd1e1e8 <line:930:1, line:939:1>
|   |-DoStmt 0x5626fbd1e088 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1e050 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1dff0 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1e068 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5626fbd1e188 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x5626fbd1e170 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5626fbd1e0a8 <col:2> 'void (char *, size_t)' Function 0x5626fbd1dd30 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x5626fbd1e1b8 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626fbd1e0c8 <col:19> 'char *' lvalue ParmVar 0x5626fbd1ddf8 'c' 'char *'
|     `-ImplicitCastExpr 0x5626fbd1e1d0 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5626fbd1e0e8 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x5626fbd1de70 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x5626fbd1e2c8 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x5626fbd1e230 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x5626fbd1e430 prev 0x5626fbcff2a8 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x5626fbd1e398 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x5626fbd1e6a8 <line:944:1, line:952:1>
|   |-DoStmt 0x5626fbd1e5a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5626fbd1e570 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5626fbd1e510 <col:2, col:39>
|   | `-IntegerLiteral 0x5626fbd1e588 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5626fbd1e698 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x5626fbd1e658 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x5626fbd1e640 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626fbd1e5c8 <col:9> 'int (struct k_thread *)' Function 0x5626fbd1e2c8 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x5626fbd1e680 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x5626fbd1e5e8 <col:32> 'struct k_thread *' lvalue ParmVar 0x5626fbd1e398 'thread' 'struct k_thread *'
|-FunctionDecl 0x5626fbd1e7c0 </vagrant/apps/plc_led_blink/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x5626fbd1e9a0 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x5626fbd1e898 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x5626fbd1eae8 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x5626fbd1ea58 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x5626fbd1ec28 <line:14:1, col:39> col:6 tfm_gpio_disable_all_outputs 'void (void)'
|-FunctionDecl 0x5626fbd1ede0 <line:15:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5626fbd1ecd8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd1f030 <line:16:1, col:64> col:6 tfm_gpio_set_update_hooks 'void (uint32_t, uint32_t)'
| |-ParmVarDecl 0x5626fbd1ee98 <col:32, col:41> col:41 trigger 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5626fbd1ef10 <col:50, col:59> col:59 apply 'uint32_t':'unsigned int'
|-FunctionDecl 0x5626fbd21060 <line:18:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5626fbd20fd0 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd21190 <line:19:1, col:34> col:10 tfm_gpio_output_enabled 'uint32_t ()'
|-FunctionDecl 0x5626fbd21250 <line:20:1, col:27> col:10 tfm_gpio_dataout 'uint32_t ()'
|-FunctionDecl 0x5626fbd21390 <line:21:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5626fbd21300 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd214d8 <line:22:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5626fbd21448 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd21620 <line:23:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5626fbd21590 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd21768 prev 0x5626fbd1ede0 <line:24:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5626fbd216d8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x5626fbd21810 <line:38:9, line:42:1> line:38:9 struct definition
| |-FieldDecl 0x5626fbd218c8 <line:39:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x5626fbd21928 <line:40:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x5626fbd21a20 <line:41:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x5626fbd21ad0 <line:38:1, line:42:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x5626fbd21a70 'struct gpio_int_config' sugar
|   `-RecordType 0x5626fbd21890 'gpio_int_config'
|     `-Record 0x5626fbd21810 ''
|-FunctionDecl 0x5626fbd21d80 <line:44:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x5626fbd21b50 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x5626fbd21c60 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x5626fbd21ed0 <line:45:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5626fbd21e40 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd21f98 <line:46:1, col:38> col:10 tfm_gpio_interrupts_enabled 'uint32_t ()'
|-FunctionDecl 0x5626fbd22150 <line:47:1, col:57> col:10 tfm_gpio_interrupt_callback_for_pin 'uint32_t (uint8_t)'
| `-ParmVarDecl 0x5626fbd22048 <col:46, col:54> col:54 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x5626fbd22210 </vagrant/apps/plc_led_blink/./include/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x5626fbafd560 'short'
|-TypedefDecl 0x5626fbd22280 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x5626fbafd5e0 'unsigned char'
|-EnumDecl 0x5626fbd222d8 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x5626fbd223e0 <line:26:2, col:6> col:2 R 'int'
| | `-ConstantExpr 0x5626fbd223c8 <col:6> 'int'
| |   `-IntegerLiteral 0x5626fbd223a8 <col:6> 'int' 2
| |-EnumConstantDecl 0x5626fbd22468 <line:27:2, col:6> col:2 G 'int'
| | `-ConstantExpr 0x5626fbd22450 <col:6> 'int'
| |   `-IntegerLiteral 0x5626fbd22430 <col:6> 'int' 3
| `-EnumConstantDecl 0x5626fbd224f0 <line:28:2, col:6> col:2 B 'int'
|   `-ConstantExpr 0x5626fbd224d8 <col:6> 'int'
|     `-IntegerLiteral 0x5626fbd224b8 <col:6> 'int' 4
|-TypedefDecl 0x5626fbd225a0 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x5626fbd22540 'enum LED' sugar
|   `-EnumType 0x5626fbd22380 'LED'
|     `-Enum 0x5626fbd222d8 ''
|-FunctionDecl 0x5626fbd227e0 <line:31:1, col:56> col:6 enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x5626fbd22650 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x5626fbd226c8 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd229b0 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x5626fbd228a0 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd22af0 <line:35:1, col:24> col:6 read_in_table 'void (void)'
|-FunctionDecl 0x5626fbd22c28 <line:37:1, col:26> col:6 write_out_table 'void (void)'
|-FunctionDecl 0x5626fbd22d98 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x5626fbd22d08 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x5626fbd99120 <line:39:4, col:42>
|   `-ParagraphComment 0x5626fbd990f0 <col:4, col:42>
|     `-TextComment 0x5626fbd990c0 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x5626fbd22ee0 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x5626fbd22e50 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd29870 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x5626fbd296b0 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x5626fbd29758 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x5626fbd29a00 <line:47:1, col:26> col:6 read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x5626fbd29930 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5626fbd29bf0 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x5626fbd29ae8 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x5626fbd29d38 <line:51:1, col:23> col:6 LED_off 'void (LED)'
| `-ParmVarDecl 0x5626fbd29ca8 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x5626fbd29f00 <line:53:1, col:24> col:6 read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x5626fbd29df0 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x5626fbd2a150 <line:55:1, col:33> col:6 write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x5626fbd29fb8 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x5626fbd2a030 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x5626fbd2a2a0 <line:57:1, col:29> col:6 read_button 'BOOL (uint8_t)'
| `-ParmVarDecl 0x5626fbd2a210 <col:18, col:26> col:26 pin 'uint8_t':'unsigned char'
|-VarDecl 0x5626fbd2a3d0 </vagrant/apps/plc_led_blink/./include/ladder.h:13:1, col:33> col:16 output_pins 'uint8_t [0]' static cinit
| `-InitListExpr 0x5626fbd2a478 <col:32, col:33> 'uint8_t [0]'
|-FunctionDecl 0x5626fbd2a600 <line:18:1, col:19> col:6 PlcCycle 'void (void)'
| `-FullComment 0x5626fbd991f0 <line:15:4, col:57>
|   `-ParagraphComment 0x5626fbd991c0 <col:4, col:57>
|     `-TextComment 0x5626fbd99190 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x5626fbd2a758 <line:21:1, col:36> col:6 used plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x5626fbd2a6c8 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x5626fbd2a898 <line:24:1, col:19> col:6 used init_plc 'void (void)'
|-FunctionDecl 0x5626fbd2aa90 <line:31:1, col:27> col:6 Read_U_b_Xbutton 'BOOL (void)'
| `-FullComment 0x5626fbd992c0 <line:29:4, col:57>
|   `-ParagraphComment 0x5626fbd99290 <col:4, col:57>
|     `-TextComment 0x5626fbd99260 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x5626fbd2abc8 <line:33:1, col:24> col:6 Read_U_b_Yled 'BOOL (void)'
|-FunctionDecl 0x5626fbd2ad40 <line:35:1, col:27> col:6 Write_U_b_Yled 'void (BOOL)'
| `-ParmVarDecl 0x5626fbd2ac78 <col:21, col:26> col:26 v 'BOOL':'unsigned char'
|-FunctionDecl 0x5626fbd2ae80 <line:37:1, col:23> col:6 Read_U_b_Ytx 'BOOL (void)'
|-FunctionDecl 0x5626fbd2afc0 <line:39:1, col:26> col:6 Write_U_b_Ytx 'void (BOOL)'
| `-ParmVarDecl 0x5626fbd2af30 <col:20, col:25> col:25 v 'BOOL':'unsigned char'
|-VarDecl 0x5626fbd2b088 <./src/main.c:11:1, col:16> col:16 used scan_timer 'struct k_timer':'struct k_timer'
`-FunctionDecl 0x5626fbd2b188 <line:13:1, line:28:1> line:13:6 main 'void (void)'
  `-CompoundStmt 0x5626fbd2b5b8 <col:17, line:28:1>
    |-CallExpr 0x5626fbd2b298 <line:14:2, col:11> 'void'
    | `-ImplicitCastExpr 0x5626fbd2b280 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5626fbd2b260 <col:2> 'void (void)' Function 0x5626fbd2a898 'init_plc' 'void (void)'
    |-CallExpr 0x5626fbd2b428 <line:15:5, col:49> 'void'
    | |-ImplicitCastExpr 0x5626fbd2b410 <col:5> 'void (*)(struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5626fbd2b2b8 <col:5> 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' Function 0x5626fbcbd560 'k_timer_init' 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)'
    | |-UnaryOperator 0x5626fbd2b2f8 <col:18, col:19> 'struct k_timer *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x5626fbd2b2d8 <col:19> 'struct k_timer':'struct k_timer' lvalue Var 0x5626fbd2b088 'scan_timer' 'struct k_timer':'struct k_timer'
    | |-ImplicitCastExpr 0x5626fbd2b460 <col:31> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5626fbd2b310 <col:31> 'void (struct k_timer *)' Function 0x5626fbd2a758 'plc_callback' 'void (struct k_timer *)'
    | `-ImplicitCastExpr 0x5626fbd2b478 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'k_timer_stop_t':'void (*)(struct k_timer *)' <NullToPointer>
    |   `-ParenExpr 0x5626fbd2b390 <col:14, col:24> 'void *'
    |     `-CStyleCastExpr 0x5626fbd2b368 <col:15, col:23> 'void *' <NullToPointer>
    |       `-IntegerLiteral 0x5626fbd2b330 <col:23> 'int' 0
    `-CallExpr 0x5626fbd2b580 <./src/main.c:27:2, col:73> 'void'
      |-ImplicitCastExpr 0x5626fbd2b568 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5626fbd2b490 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x5626fbd0b720 'k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
      |-UnaryOperator 0x5626fbd2b4d0 <col:16, col:17> 'struct k_timer *' prefix '&' cannot overflow
      | `-DeclRefExpr 0x5626fbd2b4b0 <col:17> 'struct k_timer':'struct k_timer' lvalue Var 0x5626fbd2b088 'scan_timer' 'struct k_timer':'struct k_timer'
      |-ParenExpr 0x5626fbd2b508 </vagrant/ext/zephyros/zephyr/include/kernel.h:1461:24, col:27> 'int'
      | `-IntegerLiteral 0x5626fbd2b4e8 <./src/main.c:9:23> 'int' 10
      `-ParenExpr 0x5626fbd2b548 </vagrant/ext/zephyros/zephyr/include/kernel.h:1461:24, col:27> 'int'
        `-IntegerLiteral 0x5626fbd2b528 <./src/main.c:9:23> 'int' 10
TranslationUnitDecl 0x5575d007b488 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5575d007bd28 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5575d007ba20 '__int128'
|-TypedefDecl 0x5575d007bd98 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5575d007ba40 'unsigned __int128'
|-TypedefDecl 0x5575d007c0a0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5575d007be70 'struct __NSConstantString_tag'
|   `-Record 0x5575d007bdf0 '__NSConstantString_tag'
|-TypedefDecl 0x5575d007c148 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5575d007c100 'char *'
|   `-BuiltinType 0x5575d007b520 'char'
|-TypedefDecl 0x5575d00ba7e0 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5575d007c3e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5575d007c220 'struct __va_list_tag'
|     `-Record 0x5575d007c1a0 '__va_list_tag'
|-TypedefDecl 0x5575d00ba8b0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:143:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x5575d007b5a0 'long'
|-TypedefDecl 0x5575d00ba920 <line:209:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x5575d007b640 'unsigned long'
|-TypedefDecl 0x5575d00ba990 <line:321:1, col:24> col:24 wchar_t 'int'
| `-BuiltinType 0x5575d007b580 'int'
|-RecordDecl 0x5575d00ba9e8 <line:415:9, line:426:1> line:415:9 struct definition
| |-FieldDecl 0x5575d00baae8 <line:416:3, col:13> col:13 __max_align_ll 'long long'
| | `-AlignedAttr 0x5575d00bab50 <col:43, col:77> aligned
| |   `-ConstantExpr 0x5575d00bab38 <col:55, col:76> 'unsigned long'
| |     `-UnaryExprOrTypeTraitExpr 0x5575d00baab0 <col:55, col:76> 'unsigned long' __alignof 'long long'
| `-FieldDecl 0x5575d00bac00 <line:417:3, col:15> col:15 __max_align_ld 'long double'
|   `-AlignedAttr 0x5575d00bac68 <col:45, col:81> aligned
|     `-ConstantExpr 0x5575d00bac50 <col:57, col:80> 'unsigned long'
|       `-UnaryExprOrTypeTraitExpr 0x5575d00babc8 <col:57, col:80> 'unsigned long' __alignof 'long double'
|-TypedefDecl 0x5575d00bad30 <line:415:1, line:426:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x5575d00bacd0 'struct max_align_t' sugar
|   `-RecordType 0x5575d00baa70 'max_align_t'
|     `-Record 0x5575d00ba9e8 ''
|-TypedefDecl 0x5575d00badb8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdint.h:40:1, col:24> col:24 int8_t 'signed char'
| `-BuiltinType 0x5575d007b540 'signed char'
|-TypedefDecl 0x5575d00bae28 <line:41:1, col:25> col:25 int16_t 'short'
| `-BuiltinType 0x5575d007b560 'short'
|-TypedefDecl 0x5575d00bae98 <line:42:1, col:25> col:25 int32_t 'int'
| `-BuiltinType 0x5575d007b580 'int'
|-TypedefDecl 0x5575d00baf08 <line:43:1, col:25> col:25 int64_t 'long'
| `-BuiltinType 0x5575d007b5a0 'long'
|-TypedefDecl 0x5575d00baf78 <line:45:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x5575d007b540 'signed char'
|-TypedefDecl 0x5575d00bafe8 <line:46:1, col:29> col:29 int_fast16_t 'short'
| `-BuiltinType 0x5575d007b560 'short'
|-TypedefDecl 0x5575d00bb058 <line:47:1, col:29> col:29 int_fast32_t 'int'
| `-BuiltinType 0x5575d007b580 'int'
|-TypedefDecl 0x5575d00bb0c8 <line:48:1, col:29> col:29 int_fast64_t 'long'
| `-BuiltinType 0x5575d007b5a0 'long'
|-TypedefDecl 0x5575d00bb138 <line:50:1, col:29> col:29 int_least8_t 'signed char'
| `-BuiltinType 0x5575d007b540 'signed char'
|-TypedefDecl 0x5575d00bb1a8 <line:51:1, col:30> col:30 int_least16_t 'short'
| `-BuiltinType 0x5575d007b560 'short'
|-TypedefDecl 0x5575d00bb218 <line:52:1, col:30> col:30 int_least32_t 'int'
| `-BuiltinType 0x5575d007b580 'int'
|-TypedefDecl 0x5575d00bb288 <line:53:1, col:30> col:30 int_least64_t 'long'
| `-BuiltinType 0x5575d007b5a0 'long'
|-TypedefDecl 0x5575d00bb2f8 <line:55:1, col:25> col:25 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x5575d007b5e0 'unsigned char'
|-TypedefDecl 0x5575d00bb368 <line:56:1, col:26> col:26 uint16_t 'unsigned short'
| `-BuiltinType 0x5575d007b600 'unsigned short'
|-TypedefDecl 0x5575d00bb3d8 <line:57:1, col:26> col:26 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x5575d007b620 'unsigned int'
|-TypedefDecl 0x5575d00bb448 <line:58:1, col:26> col:26 uint64_t 'unsigned long'
| `-BuiltinType 0x5575d007b640 'unsigned long'
|-TypedefDecl 0x5575d00bb4b8 <line:60:1, col:29> col:29 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x5575d007b5e0 'unsigned char'
|-TypedefDecl 0x5575d00bb528 <line:61:1, col:30> col:30 uint_fast16_t 'unsigned short'
| `-BuiltinType 0x5575d007b600 'unsigned short'
|-TypedefDecl 0x5575d00bb598 <line:62:1, col:30> col:30 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x5575d007b620 'unsigned int'
|-TypedefDecl 0x5575d00bb608 <line:63:1, col:30> col:30 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x5575d007b640 'unsigned long'
|-TypedefDecl 0x5575d00bb678 <line:65:1, col:30> col:30 uint_least8_t 'unsigned char'
| `-BuiltinType 0x5575d007b5e0 'unsigned char'
|-TypedefDecl 0x5575d00bb6e8 <line:66:1, col:31> col:31 uint_least16_t 'unsigned short'
| `-BuiltinType 0x5575d007b600 'unsigned short'
|-TypedefDecl 0x5575d00bb758 <line:67:1, col:31> col:31 uint_least32_t 'unsigned int'
| `-BuiltinType 0x5575d007b620 'unsigned int'
|-TypedefDecl 0x5575d00ef640 <line:68:1, col:31> col:31 uint_least64_t 'unsigned long'
| `-BuiltinType 0x5575d007b640 'unsigned long'
|-TypedefDecl 0x5575d00ef6b0 <line:70:1, col:26> col:26 intptr_t 'long'
| `-BuiltinType 0x5575d007b5a0 'long'
|-TypedefDecl 0x5575d00ef720 <line:71:1, col:26> col:26 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x5575d007b640 'unsigned long'
|-TypedefDecl 0x5575d00ef790 </vagrant/ext/zephyros/zephyr/include/zephyr/types.h:16:1, col:29> col:29 referenced s8_t 'signed char'
| `-BuiltinType 0x5575d007b540 'signed char'
|-TypedefDecl 0x5575d00ef800 <line:17:1, col:29> col:29 s16_t 'short'
| `-BuiltinType 0x5575d007b560 'short'
|-TypedefDecl 0x5575d00ef870 <line:18:1, col:29> col:29 referenced s32_t 'int'
| `-BuiltinType 0x5575d007b580 'int'
|-TypedefDecl 0x5575d00ef8e0 <line:19:1, col:29> col:29 referenced s64_t 'long long'
| `-BuiltinType 0x5575d007b5c0 'long long'
|-TypedefDecl 0x5575d00ef950 <line:21:1, col:29> col:29 referenced u8_t 'unsigned char'
| `-BuiltinType 0x5575d007b5e0 'unsigned char'
|-TypedefDecl 0x5575d00ef9c0 <line:22:1, col:29> col:29 referenced u16_t 'unsigned short'
| `-BuiltinType 0x5575d007b600 'unsigned short'
|-TypedefDecl 0x5575d00efa30 <line:23:1, col:29> col:29 referenced u32_t 'unsigned int'
| `-BuiltinType 0x5575d007b620 'unsigned int'
|-TypedefDecl 0x5575d00efaa0 <line:24:1, col:29> col:29 referenced u64_t 'unsigned long long'
| `-BuiltinType 0x5575d007b660 'unsigned long long'
|-TypedefDecl 0x5575d00efb10 <line:27:1, col:29> col:29 ulong_t 'unsigned long'
| `-BuiltinType 0x5575d007b640 'unsigned long'
|-TypedefDecl 0x5575d00efcd0 </vagrant/ext/zephyros/zephyr/include/sys/atomic.h:21:1, col:13> col:13 referenced atomic_t 'int'
| `-BuiltinType 0x5575d007b580 'int'
|-TypedefDecl 0x5575d00efd68 <line:22:1, col:18> col:18 referenced atomic_val_t 'atomic_t':'int'
| `-TypedefType 0x5575d00efd30 'atomic_t' sugar
|   |-Typedef 0x5575d00efcd0 'atomic_t'
|   `-BuiltinType 0x5575d007b580 'int'
|-FunctionDecl 0x5575d00f00f8 <line:56:1, line:57:31> line:56:12 atomic_cas 'int (atomic_t *, atomic_val_t, atomic_val_t)' extern
| |-ParmVarDecl 0x5575d00efe90 <col:23, col:33> col:33 target 'atomic_t *'
| |-ParmVarDecl 0x5575d00eff38 <col:41, col:54> col:54 old_value 'atomic_val_t':'int'
| `-ParmVarDecl 0x5575d00effb0 <line:57:9, col:22> col:22 new_value 'atomic_val_t':'int'
|-FunctionDecl 0x5575d00f03d0 <line:79:1, col:68> col:21 atomic_add 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5575d00f0238 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5575d00f02b0 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5575d0111690 <line:101:1, col:68> col:21 atomic_sub 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5575d00f04b8 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5575d00f0530 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5575d0111880 <line:120:1, col:48> col:21 atomic_inc 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5575d0111778 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x5575d01119f8 <line:139:1, col:48> col:21 atomic_dec 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5575d0111968 <col:32, col:42> col:42 target 'atomic_t *'
|-FunctionDecl 0x5575d0111c20 <line:158:1, col:54> col:21 used atomic_get 'atomic_val_t (const atomic_t *)' extern
| `-ParmVarDecl 0x5575d0111b10 <col:32, col:48> col:48 target 'const atomic_t *'
|-FunctionDecl 0x5575d0111e18 <line:185:1, col:68> col:21 atomic_set 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5575d0111d08 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5575d0111d80 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5575d0111f98 <line:205:1, col:50> col:21 atomic_clear 'atomic_val_t (atomic_t *)' extern
| `-ParmVarDecl 0x5575d0111f08 <col:34, col:44> col:44 target 'atomic_t *'
|-FunctionDecl 0x5575d0112188 <line:229:1, col:67> col:21 used atomic_or 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5575d0112078 <col:31, col:41> col:41 target 'atomic_t *'
| `-ParmVarDecl 0x5575d01120f0 <col:49, col:62> col:62 value 'atomic_val_t':'int'
|-FunctionDecl 0x5575d0112388 <line:252:1, col:68> col:21 atomic_xor 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5575d0112278 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5575d01122f0 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5575d0112588 <line:275:1, col:68> col:21 used atomic_and 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5575d0112478 <col:32, col:42> col:42 target 'atomic_t *'
| `-ParmVarDecl 0x5575d01124f0 <col:50, col:63> col:63 value 'atomic_val_t':'int'
|-FunctionDecl 0x5575d01127b0 <line:298:1, col:69> col:21 atomic_nand 'atomic_val_t (atomic_t *, atomic_val_t)' extern
| |-ParmVarDecl 0x5575d01126a0 <col:33, col:43> col:43 target 'atomic_t *'
| `-ParmVarDecl 0x5575d0112718 <col:51, col:64> col:64 value 'atomic_val_t':'int'
|-FunctionDecl 0x5575d0112af0 <line:351:1, line:356:1> line:351:20 used atomic_test_bit 'bool (const atomic_t *, int)' static inline
| |-ParmVarDecl 0x5575d0112958 <col:36, col:52> col:52 used target 'const atomic_t *'
| |-ParmVarDecl 0x5575d01129d8 <col:60, col:64> col:64 used bit 'int'
| |-CompoundStmt 0x5575d0113208 <line:352:1, line:356:1>
| | |-DeclStmt 0x5575d0112ed0 <line:353:2, col:57>
| | | `-VarDecl 0x5575d0112bb0 <col:2, col:56> col:15 used val 'atomic_val_t':'int' cinit
| | |   `-CallExpr 0x5575d0112ea8 <col:21, col:56> 'atomic_val_t':'int'
| | |     |-ImplicitCastExpr 0x5575d0112e90 <col:21> 'atomic_val_t (*)(const atomic_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x5575d0112c18 <col:21> 'atomic_val_t (const atomic_t *)' Function 0x5575d0111c20 'atomic_get' 'atomic_val_t (const atomic_t *)'
| | |     `-ParenExpr 0x5575d0112e08 <line:318:32, col:63> 'const atomic_t *'
| | |       `-BinaryOperator 0x5575d0112de8 <col:33, col:62> 'const atomic_t *' '+'
| | |         |-ImplicitCastExpr 0x5575d0112dd0 <col:33, col:38> 'const atomic_t *' <LValueToRValue>
| | |         | `-ParenExpr 0x5575d0112c58 <col:33, col:38> 'const atomic_t *' lvalue
| | |         |   `-DeclRefExpr 0x5575d0112c38 <line:353:44> 'const atomic_t *' lvalue ParmVar 0x5575d0112958 'target' 'const atomic_t *'
| | |         `-ParenExpr 0x5575d0112db0 <line:318:42, col:62> 'unsigned long'
| | |           `-BinaryOperator 0x5575d0112d90 <col:43, line:316:46> 'unsigned long' '/'
| | |             |-ImplicitCastExpr 0x5575d0112d78 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |             | `-ImplicitCastExpr 0x5575d0112d60 <col:43, col:47> 'int' <LValueToRValue>
| | |             |   `-ParenExpr 0x5575d0112c98 <col:43, col:47> 'int' lvalue
| | |             |     `-DeclRefExpr 0x5575d0112c78 <line:353:52> 'int' lvalue ParmVar 0x5575d01129d8 'bit' 'int'
| | |             `-ParenExpr 0x5575d0112d40 <line:316:21, col:46> 'unsigned long'
| | |               `-BinaryOperator 0x5575d0112d20 <col:22, col:45> 'unsigned long' '*'
| | |                 |-UnaryExprOrTypeTraitExpr 0x5575d0112cc8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |                 `-ImplicitCastExpr 0x5575d0112d08 <col:45> 'unsigned long' <IntegralCast>
| | |                   `-IntegerLiteral 0x5575d0112ce8 <col:45> 'int' 8
| | `-ReturnStmt 0x5575d01131c8 <line:355:2, col:53>
| |   `-ImplicitCastExpr 0x5575d01131b0 <col:9, col:53> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5575d0113190 <col:9, col:53> 'int' '!='
| |       |-ParenExpr 0x5575d0113150 <col:9, col:48> 'int'
| |       | `-BinaryOperator 0x5575d0113130 <col:10, col:47> 'int' '&'
| |       |   |-IntegerLiteral 0x5575d0112ee8 <col:10> 'int' 1
| |       |   `-ParenExpr 0x5575d0113110 <col:14, col:47> 'atomic_val_t':'int'
| |       |     `-BinaryOperator 0x5575d01130f0 <col:15, col:46> 'atomic_val_t':'int' '>>'
| |       |       |-ImplicitCastExpr 0x5575d01130d8 <col:15> 'atomic_val_t':'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x5575d0112f08 <col:15> 'atomic_val_t':'int' lvalue Var 0x5575d0112bb0 'val' 'atomic_val_t':'int'
| |       |       `-ParenExpr 0x5575d01130b8 <col:22, col:46> 'unsigned long'
| |       |         `-BinaryOperator 0x5575d0113098 <col:23, col:45> 'unsigned long' '&'
| |       |           |-ImplicitCastExpr 0x5575d0113080 <col:23> 'unsigned long' <IntegralCast>
| |       |           | `-ImplicitCastExpr 0x5575d0113068 <col:23> 'int' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x5575d0112f28 <col:23> 'int' lvalue ParmVar 0x5575d01129d8 'bit' 'int'
| |       |           `-ParenExpr 0x5575d0113048 <col:29, col:45> 'unsigned long'
| |       |             `-BinaryOperator 0x5575d0113028 <line:316:21, line:355:44> 'unsigned long' '-'
| |       |               |-ParenExpr 0x5575d0112fd0 <line:316:21, col:46> 'unsigned long'
| |       |               | `-BinaryOperator 0x5575d0112fb0 <col:22, col:45> 'unsigned long' '*'
| |       |               |   |-UnaryExprOrTypeTraitExpr 0x5575d0112f58 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |       |               |   `-ImplicitCastExpr 0x5575d0112f98 <col:45> 'unsigned long' <IntegralCast>
| |       |               |     `-IntegerLiteral 0x5575d0112f78 <col:45> 'int' 8
| |       |               `-ImplicitCastExpr 0x5575d0113010 <line:355:44> 'unsigned long' <IntegralCast>
| |       |                 `-IntegerLiteral 0x5575d0112ff0 <col:44> 'int' 1
| |       `-IntegerLiteral 0x5575d0113170 <col:53> 'int' 0
| `-FullComment 0x5575d02aaf00 <line:341:3, line:349:55>
|   |-ParagraphComment 0x5575d02aaa10 <line:341:3>
|   | `-TextComment 0x5575d02aa9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02aaa30 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5575d02aaa90 <col:10, col:32>
|   |   `-TextComment 0x5575d02aaa60 <col:10, col:32> Text=" Atomically test a bit."
|   |-ParagraphComment 0x5575d02aac00 <line:343:3, line:344:66>
|   | |-TextComment 0x5575d02aaab0 <line:343:3, col:41> Text=" This routine tests whether bit number "
|   | |-InlineCommandComment 0x5575d02aab00 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5575d02aab20 <col:48, col:51> Text=" of "
|   | |-InlineCommandComment 0x5575d02aab70 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5575d02aab90 <col:61, col:75> Text=" is set or not."
|   | `-TextComment 0x5575d02aabb0 <line:344:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5575d02aac50 <line:346:3>
|   | `-TextComment 0x5575d02aac20 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02aac70 <col:4, line:347:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5575d02aad20 <line:346:17, line:347:3>
|   |   |-TextComment 0x5575d02aacd0 <line:346:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5575d02aacf0 <line:347:3> Text=" "
|   |-ParamCommandComment 0x5575d02aad40 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5575d02aadd0 <col:14, col:43>
|   |   `-TextComment 0x5575d02aada0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5575d02aae20 <line:349:3>
|   | `-TextComment 0x5575d02aadf0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02aae40 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5575d02aaea0 <col:11, col:55>
|       `-TextComment 0x5575d02aae70 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5575d01133d0 <line:369:1, line:377:1> line:369:20 atomic_test_and_clear_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5575d0113238 <col:46, col:56> col:56 used target 'atomic_t *'
| |-ParmVarDecl 0x5575d01132b8 <col:64, col:68> col:68 used bit 'int'
| |-CompoundStmt 0x5575d0118018 <line:370:1, line:377:1>
| | |-DeclStmt 0x5575d0117ae0 <line:371:2, col:38>
| | | `-VarDecl 0x5575d0113490 <col:2, line:317:66> line:371:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5575d0117ac0 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5575d0117aa0 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5575d01134f8 <col:27> 'int' 1
| | |       `-ParenExpr 0x5575d0117a80 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5575d0117a60 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5575d0117a48 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5575d01135d0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5575d01135b8 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5575d0113598 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5575d0113548 <line:371:34> 'int' lvalue ParmVar 0x5575d01132b8 'bit' 'int'
| | |           `-ParenExpr 0x5575d0117a28 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5575d0117a08 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5575d0113680 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5575d0113660 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5575d0113608 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5575d0113648 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5575d0113628 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5575d01179f0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5575d01179d0 <col:63> 'int' 1
| | |-DeclStmt 0x5575d0117b70 <line:372:2, col:18>
| | | `-VarDecl 0x5575d0117b08 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x5575d0117eb8 <line:374:2, col:50> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x5575d0117b88 <col:2> 'atomic_val_t':'int' lvalue Var 0x5575d0117b08 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x5575d0117e88 <col:8, col:50> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x5575d0117e70 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x5575d0117ba8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5575d0112588 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x5575d0117d98 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x5575d0117d78 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x5575d0117d60 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x5575d0117be8 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x5575d0117bc8 <line:374:31> 'atomic_t *' lvalue ParmVar 0x5575d0113238 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x5575d0117d40 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x5575d0117d20 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x5575d0117d08 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x5575d0117cf0 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x5575d0117c28 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x5575d0117c08 <line:374:39> 'int' lvalue ParmVar 0x5575d01132b8 'bit' 'int'
| | |   |       `-ParenExpr 0x5575d0117cd0 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x5575d0117cb0 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x5575d0117c58 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x5575d0117c98 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x5575d0117c78 <col:45> 'int' 8
| | |   `-UnaryOperator 0x5575d0117df0 <line:374:45, col:46> 'atomic_val_t':'int' prefix '~' cannot overflow
| | |     `-ImplicitCastExpr 0x5575d0117dd8 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x5575d0117db8 <col:46> 'atomic_val_t':'int' lvalue Var 0x5575d0113490 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x5575d0117fe0 <line:376:2, col:25>
| |   `-ImplicitCastExpr 0x5575d0117fc8 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5575d0117fa8 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x5575d0117f68 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x5575d0117f48 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5575d0117f18 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5575d0117ed8 <col:10> 'atomic_val_t':'int' lvalue Var 0x5575d0117b08 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x5575d0117f30 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5575d0117ef8 <col:16> 'atomic_val_t':'int' lvalue Var 0x5575d0113490 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x5575d0117f88 <col:25> 'int' 0
| `-FullComment 0x5575d02ab4b0 <line:359:3, line:367:55>
|   |-ParagraphComment 0x5575d02aafa0 <line:359:3>
|   | `-TextComment 0x5575d02aaf70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02aafc0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d02ab020 <col:10, col:42>
|   |   `-TextComment 0x5575d02aaff0 <col:10, col:42> Text=" Atomically test and clear a bit."
|   |-ParagraphComment 0x5575d02ab190 <line:361:3, line:362:66>
|   | |-TextComment 0x5575d02ab040 <line:361:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x5575d02ab090 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5575d02ab0b0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x5575d02ab100 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5575d02ab120 <col:51, col:76> Text=" and return its old value."
|   | `-TextComment 0x5575d02ab140 <line:362:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5575d02ab1e0 <line:364:3>
|   | `-TextComment 0x5575d02ab1b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ab200 <col:4, line:365:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ab2b0 <line:364:17, line:365:3>
|   |   |-TextComment 0x5575d02ab260 <line:364:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5575d02ab280 <line:365:3> Text=" "
|   |-ParamCommandComment 0x5575d02ab2d0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ab360 <col:14, col:43>
|   |   `-TextComment 0x5575d02ab330 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5575d02ab3d0 <line:367:3>
|   | `-TextComment 0x5575d02ab380 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ab3f0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5575d02ab450 <col:11, col:55>
|       `-TextComment 0x5575d02ab420 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5575d0118170 <line:390:1, line:398:1> line:390:20 used atomic_test_and_set_bit 'bool (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5575d0118058 <col:44, col:54> col:54 used target 'atomic_t *'
| |-ParmVarDecl 0x5575d01180d8 <col:62, col:66> col:66 used bit 'int'
| |-CompoundStmt 0x5575d0118a08 <line:391:1, line:398:1>
| | |-DeclStmt 0x5575d0118520 <line:392:2, col:38>
| | | `-VarDecl 0x5575d0118230 <col:2, line:317:66> line:392:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5575d0118500 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5575d01184e0 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5575d0118298 <col:27> 'int' 1
| | |       `-ParenExpr 0x5575d01184c0 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5575d01184a0 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5575d0118488 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5575d0118340 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5575d0118328 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5575d0118308 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5575d01182b8 <line:392:34> 'int' lvalue ParmVar 0x5575d01180d8 'bit' 'int'
| | |           `-ParenExpr 0x5575d0118468 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5575d0118448 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5575d01183f0 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5575d01183d0 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5575d0118378 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5575d01183b8 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5575d0118398 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5575d0118430 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5575d0118410 <col:63> 'int' 1
| | |-DeclStmt 0x5575d01185b0 <line:393:2, col:18>
| | | `-VarDecl 0x5575d0118548 <col:2, col:15> col:15 used old 'atomic_val_t':'int'
| | |-BinaryOperator 0x5575d0118878 <line:395:2, col:48> 'atomic_val_t':'int' '='
| | | |-DeclRefExpr 0x5575d01185c8 <col:2> 'atomic_val_t':'int' lvalue Var 0x5575d0118548 'old' 'atomic_val_t':'int'
| | | `-CallExpr 0x5575d0118830 <col:8, col:48> 'atomic_val_t':'int'
| | |   |-ImplicitCastExpr 0x5575d0118818 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x5575d01185e8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5575d0112188 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| | |   |-ParenExpr 0x5575d01187d8 <line:318:32, col:63> 'atomic_t *'
| | |   | `-BinaryOperator 0x5575d01187b8 <col:33, col:62> 'atomic_t *' '+'
| | |   |   |-ImplicitCastExpr 0x5575d01187a0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| | |   |   | `-ParenExpr 0x5575d0118628 <col:33, col:38> 'atomic_t *' lvalue
| | |   |   |   `-DeclRefExpr 0x5575d0118608 <line:395:30> 'atomic_t *' lvalue ParmVar 0x5575d0118058 'target' 'atomic_t *'
| | |   |   `-ParenExpr 0x5575d0118780 <line:318:42, col:62> 'unsigned long'
| | |   |     `-BinaryOperator 0x5575d0118760 <col:43, line:316:46> 'unsigned long' '/'
| | |   |       |-ImplicitCastExpr 0x5575d0118748 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| | |   |       | `-ImplicitCastExpr 0x5575d0118730 <col:43, col:47> 'int' <LValueToRValue>
| | |   |       |   `-ParenExpr 0x5575d0118668 <col:43, col:47> 'int' lvalue
| | |   |       |     `-DeclRefExpr 0x5575d0118648 <line:395:38> 'int' lvalue ParmVar 0x5575d01180d8 'bit' 'int'
| | |   |       `-ParenExpr 0x5575d0118710 <line:316:21, col:46> 'unsigned long'
| | |   |         `-BinaryOperator 0x5575d01186f0 <col:22, col:45> 'unsigned long' '*'
| | |   |           |-UnaryExprOrTypeTraitExpr 0x5575d0118698 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |   |           `-ImplicitCastExpr 0x5575d01186d8 <col:45> 'unsigned long' <IntegralCast>
| | |   |             `-IntegerLiteral 0x5575d01186b8 <col:45> 'int' 8
| | |   `-ImplicitCastExpr 0x5575d0118860 <line:395:44> 'atomic_val_t':'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x5575d01187f8 <col:44> 'atomic_val_t':'int' lvalue Var 0x5575d0118230 'mask' 'atomic_val_t':'int'
| | `-ReturnStmt 0x5575d01189a0 <line:397:2, col:25>
| |   `-ImplicitCastExpr 0x5575d0118988 <col:9, col:25> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5575d0118968 <col:9, col:25> 'int' '!='
| |       |-ParenExpr 0x5575d0118928 <col:9, col:20> 'int'
| |       | `-BinaryOperator 0x5575d0118908 <col:10, col:16> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5575d01188d8 <col:10> 'atomic_val_t':'int' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5575d0118898 <col:10> 'atomic_val_t':'int' lvalue Var 0x5575d0118548 'old' 'atomic_val_t':'int'
| |       |   `-ImplicitCastExpr 0x5575d01188f0 <col:16> 'atomic_val_t':'int' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5575d01188b8 <col:16> 'atomic_val_t':'int' lvalue Var 0x5575d0118230 'mask' 'atomic_val_t':'int'
| |       `-IntegerLiteral 0x5575d0118948 <col:25> 'int' 0
| `-FullComment 0x5575d02aba40 <line:380:3, line:388:55>
|   |-ParagraphComment 0x5575d02ab550 <line:380:3>
|   | `-TextComment 0x5575d02ab520 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ab570 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5575d02ab5d0 <col:10, col:31>
|   |   `-TextComment 0x5575d02ab5a0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x5575d02ab740 <line:382:3, line:383:66>
|   | |-TextComment 0x5575d02ab5f0 <line:382:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5575d02ab640 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5575d02ab660 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x5575d02ab6b0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5575d02ab6d0 <col:49, col:74> Text=" and return its old value."
|   | `-TextComment 0x5575d02ab6f0 <line:383:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5575d02ab790 <line:385:3>
|   | `-TextComment 0x5575d02ab760 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ab7b0 <col:4, line:386:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ab860 <line:385:17, line:386:3>
|   |   |-TextComment 0x5575d02ab810 <line:385:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5575d02ab830 <line:386:3> Text=" "
|   |-ParamCommandComment 0x5575d02ab880 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ab910 <col:14, col:43>
|   |   `-TextComment 0x5575d02ab8e0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5575d02ab960 <line:388:3>
|   | `-TextComment 0x5575d02ab930 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ab980 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5575d02ab9e0 <col:11, col:55>
|       `-TextComment 0x5575d02ab9b0 <col:11, col:55> Text=" true if the bit was set, false if it wasn't."
|-FunctionDecl 0x5575d0118be0 <line:411:1, line:416:1> line:411:20 used atomic_clear_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5575d0118a48 <col:37, col:47> col:47 used target 'atomic_t *'
| |-ParmVarDecl 0x5575d0118ac8 <col:55, col:59> col:59 used bit 'int'
| |-CompoundStmt 0x5575d01192b8 <line:412:1, line:416:1>
| | |-DeclStmt 0x5575d0118f90 <line:413:2, col:38>
| | | `-VarDecl 0x5575d0118ca0 <col:2, line:317:66> line:413:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5575d0118f70 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5575d0118f50 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5575d0118d08 <col:27> 'int' 1
| | |       `-ParenExpr 0x5575d0118f30 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5575d0118f10 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5575d0118ef8 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5575d0118db0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5575d0118d98 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5575d0118d78 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5575d0118d28 <line:413:34> 'int' lvalue ParmVar 0x5575d0118ac8 'bit' 'int'
| | |           `-ParenExpr 0x5575d0118ed8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5575d0118eb8 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5575d0118e60 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5575d0118e40 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5575d0118de8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5575d0118e28 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5575d0118e08 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5575d0118ea0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5575d0118e80 <col:63> 'int' 1
| | `-CStyleCastExpr 0x5575d0119260 <line:415:2, col:50> 'void' <ToVoid>
| |   `-CallExpr 0x5575d0119220 <col:8, col:50> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x5575d0119208 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d0118fa8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5575d0112588 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x5575d0119198 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x5575d0119178 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x5575d0119160 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5575d0118fe8 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x5575d0118fc8 <line:415:31> 'atomic_t *' lvalue ParmVar 0x5575d0118a48 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x5575d0119140 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x5575d0119120 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x5575d0119108 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x5575d01190f0 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x5575d0119028 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x5575d0119008 <line:415:39> 'int' lvalue ParmVar 0x5575d0118ac8 'bit' 'int'
| |     |       `-ParenExpr 0x5575d01190d0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x5575d01190b0 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x5575d0119058 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x5575d0119098 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x5575d0119078 <col:45> 'int' 8
| |     `-UnaryOperator 0x5575d01191f0 <line:415:45, col:46> 'atomic_val_t':'int' prefix '~' cannot overflow
| |       `-ImplicitCastExpr 0x5575d01191d8 <col:46> 'atomic_val_t':'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d01191b8 <col:46> 'atomic_val_t':'int' lvalue Var 0x5575d0118ca0 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5575d02abfb0 <line:401:3, line:409:14>
|   |-ParagraphComment 0x5575d02abae0 <line:401:3>
|   | `-TextComment 0x5575d02abab0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02abb00 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5575d02abb60 <col:10, col:33>
|   |   `-TextComment 0x5575d02abb30 <col:10, col:33> Text=" Atomically clear a bit."
|   |-ParagraphComment 0x5575d02abcb0 <line:403:3, line:404:66>
|   | |-TextComment 0x5575d02abb80 <line:403:3, col:31> Text=" Atomically clear bit number "
|   | |-InlineCommandComment 0x5575d02abbd0 <col:32, col:33> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5575d02abbf0 <col:38, col:41> Text=" of "
|   | |-InlineCommandComment 0x5575d02abc40 <col:42, col:43> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x5575d02abc60 <line:404:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5575d02abd00 <line:406:3>
|   | `-TextComment 0x5575d02abcd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02abd20 <col:4, line:407:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5575d02abdd0 <line:406:17, line:407:3>
|   |   |-TextComment 0x5575d02abd80 <line:406:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5575d02abda0 <line:407:3> Text=" "
|   |-ParamCommandComment 0x5575d02abdf0 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5575d02abe80 <col:14, col:43>
|   |   `-TextComment 0x5575d02abe50 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5575d02abed0 <line:409:3>
|   | `-TextComment 0x5575d02abea0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02abef0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02abf50 <col:11, col:14>
|       `-TextComment 0x5575d02abf20 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0119400 <line:429:1, line:434:1> line:429:20 atomic_set_bit 'void (atomic_t *, int)' static inline
| |-ParmVarDecl 0x5575d01192e8 <col:35, col:45> col:45 used target 'atomic_t *'
| |-ParmVarDecl 0x5575d0119368 <col:53, col:57> col:57 used bit 'int'
| |-CompoundStmt 0x5575d0119ad8 <line:430:1, line:434:1>
| | |-DeclStmt 0x5575d01197b0 <line:431:2, col:38>
| | | `-VarDecl 0x5575d01194c0 <col:2, line:317:66> line:431:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5575d0119790 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5575d0119770 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5575d0119528 <col:27> 'int' 1
| | |       `-ParenExpr 0x5575d0119750 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5575d0119730 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5575d0119718 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5575d01195d0 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5575d01195b8 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5575d0119598 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5575d0119548 <line:431:34> 'int' lvalue ParmVar 0x5575d0119368 'bit' 'int'
| | |           `-ParenExpr 0x5575d01196f8 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5575d01196d8 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5575d0119680 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5575d0119660 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5575d0119608 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5575d0119648 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5575d0119628 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5575d01196c0 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5575d01196a0 <col:63> 'int' 1
| | `-CStyleCastExpr 0x5575d0119a80 <line:433:2, col:48> 'void' <ToVoid>
| |   `-CallExpr 0x5575d0119a28 <col:8, col:48> 'atomic_val_t':'int'
| |     |-ImplicitCastExpr 0x5575d0119a10 <col:8> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01197c8 <col:8> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5575d0112188 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |     |-ParenExpr 0x5575d01199b8 <line:318:32, col:63> 'atomic_t *'
| |     | `-BinaryOperator 0x5575d0119998 <col:33, col:62> 'atomic_t *' '+'
| |     |   |-ImplicitCastExpr 0x5575d0119980 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5575d0119808 <col:33, col:38> 'atomic_t *' lvalue
| |     |   |   `-DeclRefExpr 0x5575d01197e8 <line:433:30> 'atomic_t *' lvalue ParmVar 0x5575d01192e8 'target' 'atomic_t *'
| |     |   `-ParenExpr 0x5575d0119960 <line:318:42, col:62> 'unsigned long'
| |     |     `-BinaryOperator 0x5575d0119940 <col:43, line:316:46> 'unsigned long' '/'
| |     |       |-ImplicitCastExpr 0x5575d0119928 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |     |       | `-ImplicitCastExpr 0x5575d0119910 <col:43, col:47> 'int' <LValueToRValue>
| |     |       |   `-ParenExpr 0x5575d0119848 <col:43, col:47> 'int' lvalue
| |     |       |     `-DeclRefExpr 0x5575d0119828 <line:433:38> 'int' lvalue ParmVar 0x5575d0119368 'bit' 'int'
| |     |       `-ParenExpr 0x5575d01198f0 <line:316:21, col:46> 'unsigned long'
| |     |         `-BinaryOperator 0x5575d01198d0 <col:22, col:45> 'unsigned long' '*'
| |     |           |-UnaryExprOrTypeTraitExpr 0x5575d0119878 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |     |           `-ImplicitCastExpr 0x5575d01198b8 <col:45> 'unsigned long' <IntegralCast>
| |     |             `-IntegerLiteral 0x5575d0119898 <col:45> 'int' 8
| |     `-ImplicitCastExpr 0x5575d0119a58 <line:433:44> 'atomic_val_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5575d01199f0 <col:44> 'atomic_val_t':'int' lvalue Var 0x5575d01194c0 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5575d02ac520 <line:419:3, line:427:14>
|   |-ParagraphComment 0x5575d02ac050 <line:419:3>
|   | `-TextComment 0x5575d02ac020 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ac070 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5575d02ac0d0 <col:10, col:31>
|   |   `-TextComment 0x5575d02ac0a0 <col:10, col:31> Text=" Atomically set a bit."
|   |-ParagraphComment 0x5575d02ac220 <line:421:3, line:422:66>
|   | |-TextComment 0x5575d02ac0f0 <line:421:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5575d02ac140 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5575d02ac160 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x5575d02ac1b0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target."
|   | `-TextComment 0x5575d02ac1d0 <line:422:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5575d02ac270 <line:424:3>
|   | `-TextComment 0x5575d02ac240 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ac290 <col:4, line:425:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ac340 <line:424:17, line:425:3>
|   |   |-TextComment 0x5575d02ac2f0 <line:424:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5575d02ac310 <line:425:3> Text=" "
|   |-ParamCommandComment 0x5575d02ac360 <col:4, col:43> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ac3f0 <col:14, col:43>
|   |   `-TextComment 0x5575d02ac3c0 <col:14, col:43> Text=" Bit number (starting from 0)."
|   |-ParagraphComment 0x5575d02ac440 <line:427:3>
|   | `-TextComment 0x5575d02ac410 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ac460 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02ac4c0 <col:11, col:14>
|       `-TextComment 0x5575d02ac490 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0119d40 <line:448:1, line:457:1> line:448:20 atomic_set_bit_to 'void (atomic_t *, int, bool)' static inline
| |-ParmVarDecl 0x5575d0119b08 <col:38, col:48> col:48 used target 'atomic_t *'
| |-ParmVarDecl 0x5575d0119b88 <col:56, col:60> col:60 used bit 'int'
| |-ParmVarDecl 0x5575d0119c00 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/atomic.h:448:70> col:70 used val 'bool'
| |-CompoundStmt 0x5575d011a808 <line:449:1, line:457:1>
| | |-DeclStmt 0x5575d011a0f8 <line:450:2, col:38>
| | | `-VarDecl 0x5575d0119e08 <col:2, line:317:66> line:450:15 used mask 'atomic_val_t':'int' cinit
| | |   `-ParenExpr 0x5575d011a0d8 <line:317:26, col:66> 'int'
| | |     `-BinaryOperator 0x5575d011a0b8 <col:27, col:65> 'int' '<<'
| | |       |-IntegerLiteral 0x5575d0119e70 <col:27> 'int' 1
| | |       `-ParenExpr 0x5575d011a098 <col:32, col:65> 'unsigned long'
| | |         `-BinaryOperator 0x5575d011a078 <col:33, col:64> 'unsigned long' '&'
| | |           |-ImplicitCastExpr 0x5575d011a060 <col:33, col:44> 'unsigned long' <IntegralCast>
| | |           | `-CStyleCastExpr 0x5575d0119f18 <col:33, col:44> 'u32_t':'unsigned int' <IntegralCast>
| | |           |   `-ImplicitCastExpr 0x5575d0119f00 <col:40, col:44> 'int' <LValueToRValue> part_of_explicit_cast
| | |           |     `-ParenExpr 0x5575d0119ee0 <col:40, col:44> 'int' lvalue
| | |           |       `-DeclRefExpr 0x5575d0119e90 <line:450:34> 'int' lvalue ParmVar 0x5575d0119b88 'bit' 'int'
| | |           `-ParenExpr 0x5575d011a040 <line:317:48, col:64> 'unsigned long'
| | |             `-BinaryOperator 0x5575d011a020 <line:316:21, line:317:63> 'unsigned long' '-'
| | |               |-ParenExpr 0x5575d0119fc8 <line:316:21, col:46> 'unsigned long'
| | |               | `-BinaryOperator 0x5575d0119fa8 <col:22, col:45> 'unsigned long' '*'
| | |               |   |-UnaryExprOrTypeTraitExpr 0x5575d0119f50 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| | |               |   `-ImplicitCastExpr 0x5575d0119f90 <col:45> 'unsigned long' <IntegralCast>
| | |               |     `-IntegerLiteral 0x5575d0119f70 <col:45> 'int' 8
| | |               `-ImplicitCastExpr 0x5575d011a008 <line:317:63> 'unsigned long' <IntegralCast>
| | |                 `-IntegerLiteral 0x5575d0119fe8 <col:63> 'int' 1
| | `-IfStmt 0x5575d011a720 <line:452:2, line:456:2> has_else
| |   |-ImplicitCastExpr 0x5575d011a130 <line:452:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x5575d011a110 <col:6> 'bool' lvalue ParmVar 0x5575d0119c00 'val' 'bool'
| |   |-CompoundStmt 0x5575d011a410 <col:11, line:454:2>
| |   | `-CStyleCastExpr 0x5575d011a3e8 <line:453:3, col:49> 'void' <ToVoid>
| |   |   `-CallExpr 0x5575d011a390 <col:9, col:49> 'atomic_val_t':'int'
| |   |     |-ImplicitCastExpr 0x5575d011a378 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5575d011a148 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5575d0112188 'atomic_or' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |   |     |-ParenExpr 0x5575d011a338 <line:318:32, col:63> 'atomic_t *'
| |   |     | `-BinaryOperator 0x5575d011a318 <col:33, col:62> 'atomic_t *' '+'
| |   |     |   |-ImplicitCastExpr 0x5575d011a300 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |   |     |   | `-ParenExpr 0x5575d011a188 <col:33, col:38> 'atomic_t *' lvalue
| |   |     |   |   `-DeclRefExpr 0x5575d011a168 <line:453:31> 'atomic_t *' lvalue ParmVar 0x5575d0119b08 'target' 'atomic_t *'
| |   |     |   `-ParenExpr 0x5575d011a2e0 <line:318:42, col:62> 'unsigned long'
| |   |     |     `-BinaryOperator 0x5575d011a2c0 <col:43, line:316:46> 'unsigned long' '/'
| |   |     |       |-ImplicitCastExpr 0x5575d011a2a8 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |   |     |       | `-ImplicitCastExpr 0x5575d011a290 <col:43, col:47> 'int' <LValueToRValue>
| |   |     |       |   `-ParenExpr 0x5575d011a1c8 <col:43, col:47> 'int' lvalue
| |   |     |       |     `-DeclRefExpr 0x5575d011a1a8 <line:453:39> 'int' lvalue ParmVar 0x5575d0119b88 'bit' 'int'
| |   |     |       `-ParenExpr 0x5575d011a270 <line:316:21, col:46> 'unsigned long'
| |   |     |         `-BinaryOperator 0x5575d011a250 <col:22, col:45> 'unsigned long' '*'
| |   |     |           |-UnaryExprOrTypeTraitExpr 0x5575d011a1f8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |   |     |           `-ImplicitCastExpr 0x5575d011a238 <col:45> 'unsigned long' <IntegralCast>
| |   |     |             `-IntegerLiteral 0x5575d011a218 <col:45> 'int' 8
| |   |     `-ImplicitCastExpr 0x5575d011a3c0 <line:453:45> 'atomic_val_t':'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x5575d011a358 <col:45> 'atomic_val_t':'int' lvalue Var 0x5575d0119e08 'mask' 'atomic_val_t':'int'
| |   `-CompoundStmt 0x5575d011a708 <line:454:9, line:456:2>
| |     `-CStyleCastExpr 0x5575d011a6e0 <line:455:3, col:51> 'void' <ToVoid>
| |       `-CallExpr 0x5575d011a6a0 <col:9, col:51> 'atomic_val_t':'int'
| |         |-ImplicitCastExpr 0x5575d011a688 <col:9> 'atomic_val_t (*)(atomic_t *, atomic_val_t)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x5575d011a428 <col:9> 'atomic_val_t (atomic_t *, atomic_val_t)' Function 0x5575d0112588 'atomic_and' 'atomic_val_t (atomic_t *, atomic_val_t)'
| |         |-ParenExpr 0x5575d011a618 <line:318:32, col:63> 'atomic_t *'
| |         | `-BinaryOperator 0x5575d011a5f8 <col:33, col:62> 'atomic_t *' '+'
| |         |   |-ImplicitCastExpr 0x5575d011a5e0 <col:33, col:38> 'atomic_t *' <LValueToRValue>
| |         |   | `-ParenExpr 0x5575d011a468 <col:33, col:38> 'atomic_t *' lvalue
| |         |   |   `-DeclRefExpr 0x5575d011a448 <line:455:32> 'atomic_t *' lvalue ParmVar 0x5575d0119b08 'target' 'atomic_t *'
| |         |   `-ParenExpr 0x5575d011a5c0 <line:318:42, col:62> 'unsigned long'
| |         |     `-BinaryOperator 0x5575d011a5a0 <col:43, line:316:46> 'unsigned long' '/'
| |         |       |-ImplicitCastExpr 0x5575d011a588 <line:318:43, col:47> 'unsigned long' <IntegralCast>
| |         |       | `-ImplicitCastExpr 0x5575d011a570 <col:43, col:47> 'int' <LValueToRValue>
| |         |       |   `-ParenExpr 0x5575d011a4a8 <col:43, col:47> 'int' lvalue
| |         |       |     `-DeclRefExpr 0x5575d011a488 <line:455:40> 'int' lvalue ParmVar 0x5575d0119b88 'bit' 'int'
| |         |       `-ParenExpr 0x5575d011a550 <line:316:21, col:46> 'unsigned long'
| |         |         `-BinaryOperator 0x5575d011a530 <col:22, col:45> 'unsigned long' '*'
| |         |           |-UnaryExprOrTypeTraitExpr 0x5575d011a4d8 <col:22, col:41> 'unsigned long' sizeof 'atomic_val_t':'int'
| |         |           `-ImplicitCastExpr 0x5575d011a518 <col:45> 'unsigned long' <IntegralCast>
| |         |             `-IntegerLiteral 0x5575d011a4f8 <col:45> 'int' 8
| |         `-UnaryOperator 0x5575d011a670 <line:455:46, col:47> 'atomic_val_t':'int' prefix '~' cannot overflow
| |           `-ImplicitCastExpr 0x5575d011a658 <col:47> 'atomic_val_t':'int' <LValueToRValue>
| |             `-DeclRefExpr 0x5575d011a638 <col:47> 'atomic_val_t':'int' lvalue Var 0x5575d0119e08 'mask' 'atomic_val_t':'int'
| `-FullComment 0x5575d02acbf0 <line:437:3, line:446:14>
|   |-ParagraphComment 0x5575d02ac5c0 <line:437:3>
|   | `-TextComment 0x5575d02ac590 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ac5e0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5575d02ac640 <col:10, col:48>
|   |   `-TextComment 0x5575d02ac610 <col:10, col:48> Text=" Atomically set a bit to a given value."
|   |-ParagraphComment 0x5575d02ac810 <line:439:3, line:440:66>
|   | |-TextComment 0x5575d02ac660 <line:439:3, col:29> Text=" Atomically set bit number "
|   | |-InlineCommandComment 0x5575d02ac6b0 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bit"
|   | |-TextComment 0x5575d02ac6d0 <col:36, col:39> Text=" of "
|   | |-InlineCommandComment 0x5575d02ac720 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="target"
|   | |-TextComment 0x5575d02ac740 <col:49, col:58> Text=" to value "
|   | |-InlineCommandComment 0x5575d02ac790 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="val."
|   | `-TextComment 0x5575d02ac7b0 <line:440:3, col:66> Text=" The target may be a single atomic variable or an array of them."
|   |-ParagraphComment 0x5575d02ac860 <line:442:3>
|   | `-TextComment 0x5575d02ac830 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ac880 <col:4, line:443:3> [in] implicitly Param="target" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ac930 <line:442:17, line:443:3>
|   |   |-TextComment 0x5575d02ac8e0 <line:442:17, col:53> Text=" Address of atomic variable or array."
|   |   `-TextComment 0x5575d02ac900 <line:443:3> Text=" "
|   |-ParamCommandComment 0x5575d02ac950 <col:4, line:444:3> [in] implicitly Param="bit" ParamIndex=1
|   | `-ParagraphComment 0x5575d02aca00 <line:443:14, line:444:3>
|   |   |-TextComment 0x5575d02ac9b0 <line:443:14, col:43> Text=" Bit number (starting from 0)."
|   |   `-TextComment 0x5575d02ac9d0 <line:444:3> Text=" "
|   |-ParamCommandComment 0x5575d02aca20 <col:4, col:38> [in] implicitly Param="val" ParamIndex=2
|   | `-ParagraphComment 0x5575d02acab0 <col:14, col:38>
|   |   `-TextComment 0x5575d02aca80 <col:14, col:38> Text=" true for 1, false for 0."
|   |-ParagraphComment 0x5575d02acb00 <line:446:3>
|   | `-TextComment 0x5575d02acad0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02acb20 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02acb80 <col:11, col:14>
|       `-TextComment 0x5575d02acb50 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d011a910 </vagrant/ext/zephyros/zephyr/include/sys/util.h:113:1, line:116:1> line:113:20 is_power_of_two 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x5575d011a840 <col:36, col:49> col:49 used x 'unsigned int'
| `-CompoundStmt 0x5575d01228c8 <line:114:1, line:116:1>
|   `-ReturnStmt 0x5575d01228b8 <line:115:2, col:42>
|     `-ImplicitCastExpr 0x5575d01228a0 <col:9, col:42> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5575d0122880 <col:9, col:42> 'int' '&&'
|         |-ParenExpr 0x5575d01226d8 <col:9, col:17> 'int'
|         | `-BinaryOperator 0x5575d01226b8 <col:10, col:15> 'int' '!='
|         |   |-ImplicitCastExpr 0x5575d01226a0 <col:10> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x5575d011a9b8 <col:10> 'unsigned int' lvalue ParmVar 0x5575d011a840 'x' 'unsigned int'
|         |   `-IntegerLiteral 0x5575d0122680 <col:15> 'unsigned int' 0
|         `-ParenExpr 0x5575d0122860 <col:22, col:42> 'int'
|           `-BinaryOperator 0x5575d0122840 <col:23, col:40> 'int' '=='
|             |-ParenExpr 0x5575d0122800 <col:23, col:35> 'unsigned int'
|             | `-BinaryOperator 0x5575d01227e0 <col:24, col:34> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x5575d01227c8 <col:24> 'unsigned int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x5575d01226f8 <col:24> 'unsigned int' lvalue ParmVar 0x5575d011a840 'x' 'unsigned int'
|             |   `-ParenExpr 0x5575d01227a8 <col:28, col:34> 'unsigned int'
|             |     `-BinaryOperator 0x5575d0122788 <col:29, col:33> 'unsigned int' '-'
|             |       |-ImplicitCastExpr 0x5575d0122758 <col:29> 'unsigned int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x5575d0122718 <col:29> 'unsigned int' lvalue ParmVar 0x5575d011a840 'x' 'unsigned int'
|             |       `-ImplicitCastExpr 0x5575d0122770 <col:33> 'unsigned int' <IntegralCast>
|             |         `-IntegerLiteral 0x5575d0122738 <col:33> 'int' 1
|             `-IntegerLiteral 0x5575d0122820 <col:40> 'unsigned int' 0
|-FunctionDecl 0x5575d0122ad0 <line:118:1, line:134:1> line:118:21 arithmetic_shift_right 's64_t (s64_t, u8_t)' static inline
| |-ParmVarDecl 0x5575d0122918 <col:44, col:50> col:50 used value 's64_t':'long long'
| |-ParmVarDecl 0x5575d01229b8 <col:57, col:62> col:62 used shift 'u8_t':'unsigned char'
| `-CompoundStmt 0x5575d0123128 <line:119:1, line:134:1>
|   |-DeclStmt 0x5575d0122bf8 <line:120:2, col:16>
|   | `-VarDecl 0x5575d0122b90 <col:2, col:8> col:8 used sign_ext 's64_t':'long long'
|   |-IfStmt 0x5575d0122d00 <line:122:2, line:124:2>
|   | |-BinaryOperator 0x5575d0122c80 <line:122:6, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x5575d0122c68 <col:6> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5575d0122c50 <col:6> 'u8_t':'unsigned char' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5575d0122c10 <col:6> 'u8_t':'unsigned char' lvalue ParmVar 0x5575d01229b8 'shift' 'u8_t':'unsigned char'
|   | | `-IntegerLiteral 0x5575d0122c30 <col:15> 'unsigned int' 0
|   | `-CompoundStmt 0x5575d0122ce8 <col:19, line:124:2>
|   |   `-ReturnStmt 0x5575d0122cd8 <line:123:3, col:10>
|   |     `-ImplicitCastExpr 0x5575d0122cc0 <col:10> 's64_t':'long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x5575d0122ca0 <col:10> 's64_t':'long long' lvalue ParmVar 0x5575d0122918 'value' 's64_t':'long long'
|   |-BinaryOperator 0x5575d0122e28 <line:127:2, col:29> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x5575d0122d18 <col:2> 's64_t':'long long' lvalue Var 0x5575d0122b90 'sign_ext' 's64_t':'long long'
|   | `-BinaryOperator 0x5575d0122e08 <col:13, col:29> 'long long' '&'
|   |   |-ParenExpr 0x5575d0122db0 <col:13, col:25> 's64_t':'long long'
|   |   | `-BinaryOperator 0x5575d0122d90 <col:14, col:23> 's64_t':'long long' '>>'
|   |   |   |-ImplicitCastExpr 0x5575d0122d78 <col:14> 's64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x5575d0122d38 <col:14> 's64_t':'long long' lvalue ParmVar 0x5575d0122918 'value' 's64_t':'long long'
|   |   |   `-IntegerLiteral 0x5575d0122d58 <col:23> 'int' 63
|   |   `-ImplicitCastExpr 0x5575d0122df0 <col:29> 'long long' <IntegralCast>
|   |     `-IntegerLiteral 0x5575d0122dd0 <col:29> 'int' 1
|   |-BinaryOperator 0x5575d0122eb8 <line:130:2, col:14> 's64_t':'long long' '='
|   | |-DeclRefExpr 0x5575d0122e48 <col:2> 's64_t':'long long' lvalue Var 0x5575d0122b90 'sign_ext' 's64_t':'long long'
|   | `-UnaryOperator 0x5575d0122ea0 <col:13, col:14> 's64_t':'long long' prefix '-'
|   |   `-ImplicitCastExpr 0x5575d0122e88 <col:14> 's64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d0122e68 <col:14> 's64_t':'long long' lvalue Var 0x5575d0122b90 'sign_ext' 's64_t':'long long'
|   `-ReturnStmt 0x5575d01230e8 <line:133:2, col:53>
|     `-BinaryOperator 0x5575d01230c8 <col:9, col:53> 'long long' '|'
|       |-ParenExpr 0x5575d0122f80 <col:9, col:24> 's64_t':'long long'
|       | `-BinaryOperator 0x5575d0122f60 <col:10, col:19> 's64_t':'long long' '>>'
|       |   |-ImplicitCastExpr 0x5575d0122f18 <col:10> 's64_t':'long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5575d0122ed8 <col:10> 's64_t':'long long' lvalue ParmVar 0x5575d0122918 'value' 's64_t':'long long'
|       |   `-ImplicitCastExpr 0x5575d0122f48 <col:19> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x5575d0122f30 <col:19> 'u8_t':'unsigned char' <LValueToRValue>
|       |       `-DeclRefExpr 0x5575d0122ef8 <col:19> 'u8_t':'unsigned char' lvalue ParmVar 0x5575d01229b8 'shift' 'u8_t':'unsigned char'
|       `-ParenExpr 0x5575d01230a8 <col:28, col:53> 's64_t':'long long'
|         `-BinaryOperator 0x5575d0123088 <col:29, col:52> 's64_t':'long long' '<<'
|           |-ImplicitCastExpr 0x5575d0123070 <col:29> 's64_t':'long long' <LValueToRValue>
|           | `-DeclRefExpr 0x5575d0122fa0 <col:29> 's64_t':'long long' lvalue Var 0x5575d0122b90 'sign_ext' 's64_t':'long long'
|           `-ParenExpr 0x5575d0123050 <col:41, col:52> 'int'
|             `-BinaryOperator 0x5575d0123030 <col:42, col:47> 'int' '-'
|               |-IntegerLiteral 0x5575d0122fc0 <col:42> 'int' 64
|               `-ImplicitCastExpr 0x5575d0123018 <col:47> 'int' <IntegralCast>
|                 `-ImplicitCastExpr 0x5575d0123000 <col:47> 'u8_t':'unsigned char' <LValueToRValue>
|                   `-DeclRefExpr 0x5575d0122fe0 <col:47> 'u8_t':'unsigned char' lvalue ParmVar 0x5575d01229b8 'shift' 'u8_t':'unsigned char'
|-FunctionDecl 0x5575d0123378 <line:144:1, col:29> col:5 char2hex 'int (char, u8_t *)'
| |-ParmVarDecl 0x5575d0123170 <col:14, col:19> col:19 c 'char'
| |-ParmVarDecl 0x5575d0123250 <col:22, col:28> col:28 x 'u8_t *'
| `-FullComment 0x5575d02ad010 <line:137:3, line:142:63>
|   |-ParagraphComment 0x5575d02acc90 <line:137:3>
|   | `-TextComment 0x5575d02acc60 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02accb0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5575d02acd10 <col:10, col:68>
|   |   `-TextComment 0x5575d02acce0 <col:10, col:68> Text="      Convert a single character into a hexadecimal nibble."
|   |-ParagraphComment 0x5575d02acd60 <line:139:3>
|   | `-TextComment 0x5575d02acd30 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02acd80 <col:4, line:140:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ace30 <line:139:17, line:140:3>
|   |   |-TextComment 0x5575d02acde0 <line:139:17, col:45> Text="     The character to convert"
|   |   `-TextComment 0x5575d02ace00 <line:140:3> Text=" "
|   |-ParamCommandComment 0x5575d02ace50 <col:4, col:69> [in] implicitly Param="x" ParamIndex=1
|   | `-ParagraphComment 0x5575d02acee0 <col:17, col:69>
|   |   `-TextComment 0x5575d02aceb0 <col:17, col:69> Text="     The address of storage for the converted number."
|   |-ParagraphComment 0x5575d02acf30 <line:142:3, col:4>
|   | `-TextComment 0x5575d02acf00 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x5575d02acf50 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x5575d02acfb0 <col:12, col:63>
|       `-TextComment 0x5575d02acf80 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x5575d01236d0 <line:154:1, col:29> col:5 hex2char 'int (u8_t, char *)'
| |-ParmVarDecl 0x5575d0123468 <col:14, col:19> col:19 x 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5575d01234e8 <col:22, col:28> col:28 c 'char *'
| `-FullComment 0x5575d02ae450 <line:147:3, line:152:63>
|   |-ParagraphComment 0x5575d02ad0b0 <line:147:3>
|   | `-TextComment 0x5575d02ad080 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ad0d0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5575d02ad130 <col:10, col:68>
|   |   `-TextComment 0x5575d02ad100 <col:10, col:68> Text="      Convert a single hexadecimal nibble into a character."
|   |-ParagraphComment 0x5575d02ad180 <line:149:3>
|   | `-TextComment 0x5575d02ad150 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ad1a0 <col:4, line:150:3> [in] explicitly Param="c" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ad250 <line:149:17, line:150:3>
|   |   |-TextComment 0x5575d02ad200 <line:149:17, col:42> Text="     The number to convert"
|   |   `-TextComment 0x5575d02ad220 <line:150:3> Text=" "
|   |-ParamCommandComment 0x5575d02ad270 <col:4, col:72> [in] implicitly Param="x" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ad300 <col:17, col:72>
|   |   `-TextComment 0x5575d02ad2d0 <col:17, col:72> Text="     The address of storage for the converted character."
|   |-ParagraphComment 0x5575d02ad350 <line:152:3, col:4>
|   | `-TextComment 0x5575d02ad320 <col:3, col:4> Text="  "
|   `-BlockCommandComment 0x5575d02ad370 <col:5, col:63> Name="return"
|     `-ParagraphComment 0x5575d02ae3f0 <col:12, col:63>
|       `-TextComment 0x5575d02ad3a0 <col:12, col:63> Text=" Zero on success or (negative) error code otherwise."
|-FunctionDecl 0x5575d0123b10 <line:166:1, col:72> col:8 bin2hex 'size_t (const u8_t *, size_t, char *, size_t)'
| |-ParmVarDecl 0x5575d0123850 <col:16, col:28> col:28 buf 'const u8_t *'
| |-ParmVarDecl 0x5575d01238c8 <col:33, col:40> col:40 buflen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0123948 <col:48, col:54> col:54 hex 'char *'
| |-ParmVarDecl 0x5575d01239c0 <col:59, col:66> col:66 hexlen 'size_t':'unsigned long'
| `-FullComment 0x5575d02aea20 <line:157:3, line:164:77>
|   |-ParagraphComment 0x5575d02ae4f0 <line:157:3>
|   | `-TextComment 0x5575d02ae4c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ae510 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5575d02ae570 <col:10, col:65>
|   |   `-TextComment 0x5575d02ae540 <col:10, col:65> Text="      Convert a binary array into string representation."
|   |-ParagraphComment 0x5575d02ae5c0 <line:159:3>
|   | `-TextComment 0x5575d02ae590 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ae5e0 <col:4, line:160:3> [in] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ae690 <line:159:19, line:160:3>
|   |   |-TextComment 0x5575d02ae640 <line:159:19, col:50> Text="     The binary array to convert"
|   |   `-TextComment 0x5575d02ae660 <line:160:3> Text=" "
|   |-ParamCommandComment 0x5575d02ae6b0 <col:4, line:161:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ae760 <line:160:22, line:161:3>
|   |   |-TextComment 0x5575d02ae710 <line:160:22, col:64> Text="  The length of the binary array to convert"
|   |   `-TextComment 0x5575d02ae730 <line:161:3> Text=" "
|   |-ParamCommandComment 0x5575d02ae780 <col:4, line:162:3> [out] explicitly Param="hex" ParamIndex=2
|   | `-ParagraphComment 0x5575d02ae830 <line:161:19, line:162:3>
|   |   |-TextComment 0x5575d02ae7e0 <line:161:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x5575d02ae800 <line:162:3> Text=" "
|   |-ParamCommandComment 0x5575d02ae850 <col:4, col:74> [in] explicitly Param="hexlen" ParamIndex=3
|   | `-ParagraphComment 0x5575d02ae8e0 <col:22, col:74>
|   |   `-TextComment 0x5575d02ae8b0 <col:22, col:74> Text="  Size of the storage area for string representation."
|   |-ParagraphComment 0x5575d02ae930 <line:164:3>
|   | `-TextComment 0x5575d02ae900 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ae950 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x5575d02ae9b0 <col:11, col:77>
|       `-TextComment 0x5575d02ae980 <col:11, col:77> Text="     The length of the converted string, or 0 if an error occurred."
|-FunctionDecl 0x5575d0123ec0 <line:184:1, col:72> col:8 hex2bin 'size_t (const char *, size_t, u8_t *, size_t)'
| |-ParmVarDecl 0x5575d0123c10 <col:16, col:28> col:28 hex 'const char *'
| |-ParmVarDecl 0x5575d0123c88 <col:33, col:40> col:40 hexlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0123d00 <col:48, col:54> col:54 buf 'u8_t *'
| |-ParmVarDecl 0x5575d0123d78 <col:59, col:66> col:66 buflen 'size_t':'unsigned long'
| `-FullComment 0x5575d02aeff0 <line:175:3, line:182:74>
|   |-ParagraphComment 0x5575d02aeac0 <line:175:3>
|   | `-TextComment 0x5575d02aea90 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02aeae0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5575d02aeb40 <col:10, col:64>
|   |   `-TextComment 0x5575d02aeb10 <col:10, col:64> Text="      Convert a hexadecimal string into a binary array."
|   |-ParagraphComment 0x5575d02aeb90 <line:177:3>
|   | `-TextComment 0x5575d02aeb60 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02aebb0 <col:4, line:178:3> [in] explicitly Param="hex" ParamIndex=0
|   | `-ParagraphComment 0x5575d02aec60 <line:177:19, line:178:3>
|   |   |-TextComment 0x5575d02aec10 <line:177:19, col:56> Text="     The hexadecimal string to convert"
|   |   `-TextComment 0x5575d02aec30 <line:178:3> Text=" "
|   |-ParamCommandComment 0x5575d02aec80 <col:4, line:179:3> [in] explicitly Param="hexlen" ParamIndex=1
|   | `-ParagraphComment 0x5575d02aed30 <line:178:22, line:179:3>
|   |   |-TextComment 0x5575d02aece0 <line:178:22, col:71> Text="  The length of the hexadecimal string to convert."
|   |   `-TextComment 0x5575d02aed00 <line:179:3> Text=" "
|   |-ParamCommandComment 0x5575d02aed50 <col:4, line:180:3> [out] explicitly Param="buf" ParamIndex=2
|   | `-ParagraphComment 0x5575d02aee00 <line:179:19, line:180:3>
|   |   |-TextComment 0x5575d02aedb0 <line:179:19, col:64> Text="     Address of where to store the binary data"
|   |   `-TextComment 0x5575d02aedd0 <line:180:3> Text=" "
|   |-ParamCommandComment 0x5575d02aee20 <col:4, col:63> [in] explicitly Param="buflen" ParamIndex=3
|   | `-ParagraphComment 0x5575d02aeeb0 <col:22, col:63>
|   |   `-TextComment 0x5575d02aee80 <col:22, col:63> Text="  Size of the storage area for binary data"
|   |-ParagraphComment 0x5575d02aef00 <line:182:3>
|   | `-TextComment 0x5575d02aeed0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02aef20 <col:4, col:74> Name="return"
|     `-ParagraphComment 0x5575d02aef80 <col:11, col:74>
|       `-TextComment 0x5575d02aef50 <col:11, col:74> Text="     The length of the binary array , or 0 if an error occurred."
|-FunctionDecl 0x5575d01241f0 <line:199:1, col:50> col:6 u8_to_dec 'u8_t (char *, u8_t, u8_t)'
| |-ParmVarDecl 0x5575d0123fc0 <col:16, col:22> col:22 buf 'char *'
| |-ParmVarDecl 0x5575d0124038 <col:27, col:32> col:32 buflen 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5575d01240b0 <col:40, col:45> col:45 value 'u8_t':'unsigned char'
| `-FullComment 0x5575d02af580 <line:187:3, line:197:47>
|   |-ParagraphComment 0x5575d02af090 <line:187:3>
|   | `-TextComment 0x5575d02af060 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02af0b0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5575d02af110 <col:10, col:65>
|   |   `-TextComment 0x5575d02af0e0 <col:10, col:65> Text="      Convert a u8_t into decimal string representation."
|   |-ParagraphComment 0x5575d02af180 <line:189:3, line:190:60>
|   | |-TextComment 0x5575d02af130 <line:189:3, col:65> Text=" Convert a u8_t value into ASCII decimal string representation."
|   | `-TextComment 0x5575d02af150 <line:190:3, col:60> Text=" The string is terminated if there is enough space in buf."
|   |-ParagraphComment 0x5575d02af1d0 <line:192:3>
|   | `-TextComment 0x5575d02af1a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02af1f0 <col:4, line:193:3> [out] explicitly Param="buf" ParamIndex=0
|   | `-ParagraphComment 0x5575d02af2a0 <line:192:19, line:193:3>
|   |   |-TextComment 0x5575d02af250 <line:192:19, col:75> Text="     Address of where to store the string representation."
|   |   `-TextComment 0x5575d02af270 <line:193:3> Text=" "
|   |-ParamCommandComment 0x5575d02af2c0 <col:4, line:194:3> [in] explicitly Param="buflen" ParamIndex=1
|   | `-ParagraphComment 0x5575d02af370 <line:193:22, line:194:3>
|   |   |-TextComment 0x5575d02af320 <line:193:22, col:74> Text="  Size of the storage area for string representation."
|   |   `-TextComment 0x5575d02af340 <line:194:3> Text=" "
|   |-ParamCommandComment 0x5575d02af390 <col:4, col:61> [in] explicitly Param="value" ParamIndex=2
|   | `-ParagraphComment 0x5575d02af420 <col:21, col:61>
|   |   `-TextComment 0x5575d02af3f0 <col:21, col:61> Text="   The value to convert to decimal string"
|   |-ParagraphComment 0x5575d02af470 <line:196:3>
|   | `-TextComment 0x5575d02af440 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02af490 <col:4, line:197:47> Name="return"
|     `-ParagraphComment 0x5575d02af510 <line:196:11, line:197:47>
|       |-TextComment 0x5575d02af4c0 <line:196:11, col:74> Text="     The length of the converted string (excluding terminator if"
|       `-TextComment 0x5575d02af4e0 <line:197:3, col:47> Text="             any), or 0 if an error occurred."
|-RecordDecl 0x5575d01245a8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:31:1, line:40:1> line:31:8 struct _dnode definition
| |-RecordDecl 0x5575d015aa20 <line:32:2, line:35:2> line:32:2 union definition
| | |-FieldDecl 0x5575d015ab98 <line:33:3, col:18> col:18 referenced head 'struct _dnode *'
| | `-FieldDecl 0x5575d015ac10 <line:34:3, col:18> col:18 referenced next 'struct _dnode *'
| |-FieldDecl 0x5575d015acc0 <line:32:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| |-IndirectFieldDecl 0x5575d015ad20 <line:33:18> col:18 implicit head 'struct _dnode *'
| | |-Field 0x5575d015acc0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x5575d015ab98 'head' 'struct _dnode *'
| |-IndirectFieldDecl 0x5575d015ad78 <line:34:18> col:18 implicit next 'struct _dnode *'
| | |-Field 0x5575d015acc0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)'
| | `-Field 0x5575d015ac10 'next' 'struct _dnode *'
| |-RecordDecl 0x5575d015adc0 <line:36:2, line:39:2> line:36:2 union definition
| | |-FieldDecl 0x5575d015ae90 <line:37:3, col:18> col:18 referenced tail 'struct _dnode *'
| | `-FieldDecl 0x5575d015af08 <line:38:3, col:18> col:18 referenced prev 'struct _dnode *'
| |-FieldDecl 0x5575d015afc0 <line:36:2> col:2 implicit referenced 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| |-IndirectFieldDecl 0x5575d015b020 <line:37:18> col:18 implicit tail 'struct _dnode *'
| | |-Field 0x5575d015afc0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
| | `-Field 0x5575d015ae90 'tail' 'struct _dnode *'
| `-IndirectFieldDecl 0x5575d015b078 <line:38:18> col:18 implicit prev 'struct _dnode *'
|   |-Field 0x5575d015afc0 '' 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)'
|   `-Field 0x5575d015af08 'prev' 'struct _dnode *'
|-TypedefDecl 0x5575d015b138 <line:42:1, col:23> col:23 referenced sys_dlist_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x5575d015aad0 'struct _dnode' sugar
|   `-RecordType 0x5575d0124630 'struct _dnode'
|     `-Record 0x5575d01245a8 '_dnode'
|-TypedefDecl 0x5575d015b1b0 <line:43:1, col:23> col:23 referenced sys_dnode_t 'struct _dnode':'struct _dnode'
| `-ElaboratedType 0x5575d015aad0 'struct _dnode' sugar
|   `-RecordType 0x5575d0124630 'struct _dnode'
|     `-Record 0x5575d01245a8 '_dnode'
|-FunctionDecl 0x5575d015b4b0 <line:192:1, line:196:1> line:192:20 sys_dlist_init 'void (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5575d015b3a0 <col:35, col:48> col:48 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5575d015b868 <line:193:1, line:196:1>
| | |-BinaryOperator 0x5575d015b6e0 <line:194:2, col:30> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d015b5d8 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5575d015ab98
| | | | `-MemberExpr 0x5575d015b590 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |   `-ImplicitCastExpr 0x5575d015b578 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d015b558 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5575d015b3a0 'list' 'sys_dlist_t *'
| | | `-CStyleCastExpr 0x5575d015b6b8 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| | |   `-ImplicitCastExpr 0x5575d015b6a0 <col:30> 'sys_dlist_t *' <LValueToRValue> part_of_explicit_cast
| | |     `-DeclRefExpr 0x5575d015b638 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x5575d015b3a0 'list' 'sys_dlist_t *'
| | `-BinaryOperator 0x5575d015b820 <line:195:2, col:30> 'struct _dnode *' '='
| |   |-MemberExpr 0x5575d015b780 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x5575d015ae90
| |   | `-MemberExpr 0x5575d015b738 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| |   |   `-ImplicitCastExpr 0x5575d015b720 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5575d015b700 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5575d015b3a0 'list' 'sys_dlist_t *'
| |   `-CStyleCastExpr 0x5575d015b7f8 <col:15, col:30> 'sys_dnode_t *' <NoOp>
| |     `-ImplicitCastExpr 0x5575d015b7e0 <col:30> 'sys_dlist_t *' <LValueToRValue> part_of_explicit_cast
| |       `-DeclRefExpr 0x5575d015b7b0 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x5575d015b3a0 'list' 'sys_dlist_t *'
| `-FullComment 0x5575d02af8c0 <line:185:3, line:189:14>
|   |-ParagraphComment 0x5575d02af620 <line:185:3>
|   | `-TextComment 0x5575d02af5f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02af640 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02af6a0 <col:10, col:44>
|   |   `-TextComment 0x5575d02af670 <col:10, col:44> Text=" initialize list to its empty state"
|   |-ParagraphComment 0x5575d02af6f0 <line:187:3>
|   | `-TextComment 0x5575d02af6c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02af710 <col:4, col:37> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02af7a0 <col:15, col:37>
|   |   `-TextComment 0x5575d02af770 <col:15, col:37> Text=" the doubly-linked list"
|   |-ParagraphComment 0x5575d02af7f0 <line:189:3>
|   | `-TextComment 0x5575d02af7c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02af810 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02af870 <col:11, col:14>
|       `-TextComment 0x5575d02af840 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d015b960 <line:208:1, line:212:1> line:208:20 used sys_dnode_init 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d015b898 <col:35, col:48> col:48 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d015ec18 <line:209:1, line:212:1>
| | |-BinaryOperator 0x5575d015ea68 <line:210:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d015e9a0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:210:2, col:8> 'struct _dnode *' lvalue .next 0x5575d015ac10
| | | | `-MemberExpr 0x5575d015e958 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |   `-ImplicitCastExpr 0x5575d015e940 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d015e920 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d015b898 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d015ea50 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| | |   `-ParenExpr 0x5575d015ea30 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x5575d015ea08 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5575d015e9d0 <col:23> 'int' 0
| | `-BinaryOperator 0x5575d015ebd0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'struct _dnode *' '='
| |   |-MemberExpr 0x5575d015eb08 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:211:2, col:8> 'struct _dnode *' lvalue .prev 0x5575d015af08
| |   | `-MemberExpr 0x5575d015eac0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| |   |   `-ImplicitCastExpr 0x5575d015eaa8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5575d015ea88 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d015b898 'node' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x5575d015ebb8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     `-ParenExpr 0x5575d015eb98 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x5575d015eb70 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x5575d015eb38 <col:23> 'int' 0
| `-FullComment 0x5575d02afc00 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:201:3, line:205:14>
|   |-ParagraphComment 0x5575d02af960 <line:201:3>
|   | `-TextComment 0x5575d02af930 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02af980 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5575d02af9e0 <col:10, col:57>
|   |   `-TextComment 0x5575d02af9b0 <col:10, col:57> Text=" initialize node to its state when not in a list"
|   |-ParagraphComment 0x5575d02afa30 <line:203:3>
|   | `-TextComment 0x5575d02afa00 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02afa50 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02afae0 <col:15, col:23>
|   |   `-TextComment 0x5575d02afab0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x5575d02afb30 <line:205:3>
|   | `-TextComment 0x5575d02afb00 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02afb50 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02afbb0 <col:11, col:14>
|       `-TextComment 0x5575d02afb80 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d015edc0 <line:222:1, line:225:1> line:222:20 sys_dnode_is_linked 'bool (const sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d015ecb0 <col:40, col:59> col:59 used node 'const sys_dnode_t *'
| |-CompoundStmt 0x5575d015f038 <line:223:1, line:225:1>
| | `-ReturnStmt 0x5575d015f000 <line:224:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ImplicitCastExpr 0x5575d015efe8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5575d015efc8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       |-ImplicitCastExpr 0x5575d015ef98 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:224:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5575d015eee8 <col:9, col:15> 'struct _dnode *const' lvalue .next 0x5575d015ac10
| |       |   `-MemberExpr 0x5575d015eea0 <col:9, col:15> 'const union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| |       |     `-ImplicitCastExpr 0x5575d015ee88 <col:9> 'const sys_dnode_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5575d015ee68 <col:9> 'const sys_dnode_t *' lvalue ParmVar 0x5575d015ecb0 'node' 'const sys_dnode_t *'
| |       `-ImplicitCastExpr 0x5575d015efb0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <BitCast>
| |         `-ParenExpr 0x5575d015ef78 <col:14, col:24> 'void *'
| |           `-CStyleCastExpr 0x5575d015ef50 <col:15, col:23> 'void *' <NullToPointer>
| |             `-IntegerLiteral 0x5575d015ef18 <col:23> 'int' 0
| `-FullComment 0x5575d02aff40 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:215:3, line:219:65>
|   |-ParagraphComment 0x5575d02afca0 <line:215:3>
|   | `-TextComment 0x5575d02afc70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02afcc0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02afd20 <col:10, col:49>
|   |   `-TextComment 0x5575d02afcf0 <col:10, col:49> Text=" check if a node is a member of any list"
|   |-ParagraphComment 0x5575d02afd70 <line:217:3>
|   | `-TextComment 0x5575d02afd40 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02afd90 <col:4, col:23> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02afe20 <col:15, col:23>
|   |   `-TextComment 0x5575d02afdf0 <col:15, col:23> Text=" the node"
|   |-ParagraphComment 0x5575d02afe70 <line:219:3>
|   | `-TextComment 0x5575d02afe40 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02afe90 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x5575d02afef0 <col:11, col:65>
|       `-TextComment 0x5575d02afec0 <col:11, col:65> Text=" true if node is linked into a list, false if it is not"
|-FunctionDecl 0x5575d015f1f0 <line:236:1, line:239:1> line:236:20 sys_dlist_is_head 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d015f060 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d015f0d8 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d015f418 <line:237:1, line:239:1>
| | `-ReturnStmt 0x5575d015f3d8 <line:238:2, col:23>
| |   `-ImplicitCastExpr 0x5575d015f3c0 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5575d015f3a0 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5575d015f370 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5575d015f320 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5575d015ab98
| |       |   `-MemberExpr 0x5575d015f2d8 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| |       |     `-ImplicitCastExpr 0x5575d015f2c0 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5575d015f2a0 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5575d015f060 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5575d015f388 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d015f350 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x5575d015f0d8 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b0360 <line:228:3, line:233:52>
|   |-ParagraphComment 0x5575d02affe0 <line:228:3>
|   | `-TextComment 0x5575d02affb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b0000 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02b0060 <col:10, col:44>
|   |   `-TextComment 0x5575d02b0030 <col:10, col:44> Text=" check if a node is the list's head"
|   |-ParagraphComment 0x5575d02b00b0 <line:230:3>
|   | `-TextComment 0x5575d02b0080 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b00d0 <col:4, line:231:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b0180 <line:230:15, line:231:3>
|   |   |-TextComment 0x5575d02b0130 <line:230:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5575d02b0150 <line:231:3> Text=" "
|   |-ParamCommandComment 0x5575d02b01a0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b0230 <col:15, col:32>
|   |   `-TextComment 0x5575d02b0200 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x5575d02b0280 <line:233:3>
|   | `-TextComment 0x5575d02b0250 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b02a0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x5575d02b0300 <col:11, col:52>
|       `-TextComment 0x5575d02b02d0 <col:11, col:52> Text=" true if node is the head, false otherwise"
|-FunctionDecl 0x5575d015f550 <line:250:1, line:253:1> line:250:20 sys_dlist_is_tail 'bool (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d015f440 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d015f4b8 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d015f778 <line:251:1, line:253:1>
| | `-ReturnStmt 0x5575d015f738 <line:252:2, col:23>
| |   `-ImplicitCastExpr 0x5575d015f720 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5575d015f700 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5575d015f6d0 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5575d015f680 <col:9, col:15> 'struct _dnode *' lvalue .tail 0x5575d015ae90
| |       |   `-MemberExpr 0x5575d015f638 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| |       |     `-ImplicitCastExpr 0x5575d015f620 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5575d015f600 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5575d015f440 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5575d015f6e8 <col:23> 'sys_dnode_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d015f6b0 <col:23> 'sys_dnode_t *' lvalue ParmVar 0x5575d015f4b8 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b17a0 <line:242:3, line:247:52>
|   |-ParagraphComment 0x5575d02b1420 <line:242:3>
|   | `-TextComment 0x5575d02b03d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b1440 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02b14a0 <col:10, col:44>
|   |   `-TextComment 0x5575d02b1470 <col:10, col:44> Text=" check if a node is the list's tail"
|   |-ParagraphComment 0x5575d02b14f0 <line:244:3>
|   | `-TextComment 0x5575d02b14c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b1510 <col:4, line:245:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b15c0 <line:244:15, line:245:3>
|   |   |-TextComment 0x5575d02b1570 <line:244:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5575d02b1590 <line:245:3> Text=" "
|   |-ParamCommandComment 0x5575d02b15e0 <col:4, col:32> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b1670 <col:15, col:32>
|   |   `-TextComment 0x5575d02b1640 <col:15, col:32> Text=" the node to check"
|   |-ParagraphComment 0x5575d02b16c0 <line:247:3>
|   | `-TextComment 0x5575d02b1690 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b16e0 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x5575d02b1740 <col:11, col:52>
|       `-TextComment 0x5575d02b1710 <col:11, col:52> Text=" true if node is the tail, false otherwise"
|-FunctionDecl 0x5575d015fa30 <line:263:1, line:266:1> line:263:20 used sys_dlist_is_empty 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5575d015f7a0 <col:39, col:52> col:52 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5575d015fc48 <line:264:1, line:266:1>
| | `-ReturnStmt 0x5575d015fc10 <line:265:2, col:23>
| |   `-ImplicitCastExpr 0x5575d015fbf8 <col:9, col:23> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5575d015fbd8 <col:9, col:23> 'int' '=='
| |       |-ImplicitCastExpr 0x5575d015fba8 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5575d015fb58 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5575d015ab98
| |       |   `-MemberExpr 0x5575d015fb10 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| |       |     `-ImplicitCastExpr 0x5575d015faf8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5575d015fad8 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5575d015f7a0 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5575d015fbc0 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d015fb88 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x5575d015f7a0 'list' 'sys_dlist_t *'
| `-FullComment 0x5575d02b1ae0 <line:256:3, line:260:41>
|   |-ParagraphComment 0x5575d02b1840 <line:256:3>
|   | `-TextComment 0x5575d02b1810 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b1860 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5575d02b18c0 <col:10, col:36>
|   |   `-TextComment 0x5575d02b1890 <col:10, col:36> Text=" check if the list is empty"
|   |-ParagraphComment 0x5575d02b1910 <line:258:3>
|   | `-TextComment 0x5575d02b18e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b1930 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b19c0 <col:15, col:51>
|   |   `-TextComment 0x5575d02b1990 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5575d02b1a10 <line:260:3>
|   | `-TextComment 0x5575d02b19e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b1a30 <col:4, col:41> Name="return"
|     `-ParagraphComment 0x5575d02b1a90 <col:11, col:41>
|       `-TextComment 0x5575d02b1a60 <col:11, col:41> Text=" true if empty, false otherwise"
|-FunctionDecl 0x5575d015fd00 <line:278:1, line:281:1> line:278:20 sys_dlist_has_multiple_nodes 'bool (sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5575d015fc70 <col:49, col:62> col:62 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5575d015ffa8 <line:279:1, line:281:1>
| | `-ReturnStmt 0x5575d015ff70 <line:280:2, col:29>
| |   `-ImplicitCastExpr 0x5575d015ff58 <col:9, col:29> 'bool' <IntegralToBoolean>
| |     `-BinaryOperator 0x5575d015ff38 <col:9, col:29> 'int' '!='
| |       |-ImplicitCastExpr 0x5575d015ff08 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |       | `-MemberExpr 0x5575d015fe28 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5575d015ab98
| |       |   `-MemberExpr 0x5575d015fde0 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| |       |     `-ImplicitCastExpr 0x5575d015fdc8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |       |       `-DeclRefExpr 0x5575d015fda8 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5575d015fc70 'list' 'sys_dlist_t *'
| |       `-ImplicitCastExpr 0x5575d015ff20 <col:23, col:29> 'struct _dnode *' <LValueToRValue>
| |         `-MemberExpr 0x5575d015fed8 <col:23, col:29> 'struct _dnode *' lvalue .tail 0x5575d015ae90
| |           `-MemberExpr 0x5575d015fe90 <col:23, col:29> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| |             `-ImplicitCastExpr 0x5575d015fe78 <col:23> 'sys_dlist_t *' <LValueToRValue>
| |               `-DeclRefExpr 0x5575d015fe58 <col:23> 'sys_dlist_t *' lvalue ParmVar 0x5575d015fc70 'list' 'sys_dlist_t *'
| `-FullComment 0x5575d02b1e80 <line:269:3, line:275:50>
|   |-ParagraphComment 0x5575d02b1b80 <line:269:3>
|   | `-TextComment 0x5575d02b1b50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b1ba0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5575d02b1c00 <col:10, col:45>
|   |   `-TextComment 0x5575d02b1bd0 <col:10, col:45> Text=" check if more than one node present"
|   |-ParagraphComment 0x5575d02b1c50 <line:271:3, col:62>
|   | `-TextComment 0x5575d02b1c20 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b1ca0 <line:273:3>
|   | `-TextComment 0x5575d02b1c70 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b1cc0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b1d50 <col:15, col:51>
|   |   `-TextComment 0x5575d02b1d20 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5575d02b1da0 <line:275:3>
|   | `-TextComment 0x5575d02b1d70 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b1dc0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x5575d02b1e20 <col:11, col:50>
|       `-TextComment 0x5575d02b1df0 <col:11, col:50> Text=" true if multiple nodes, false otherwise"
|-FunctionDecl 0x5575d01600e0 <line:291:1, line:294:1> line:291:28 used sys_dlist_peek_head 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5575d015ffd0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5575d0160468 <line:292:1, line:294:1>
| | `-ReturnStmt 0x5575d0160430 <line:293:2, col:49>
| |   `-ConditionalOperator 0x5575d0160400 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x5575d01603b8 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x5575d0160248 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x5575d0160230 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x5575d0160188 <col:9> 'bool (sys_dlist_t *)' Function 0x5575d015fa30 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x5575d0160270 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5575d01601a8 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x5575d015ffd0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5575d01603e8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5575d01602e8 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5575d01602c0 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5575d0160288 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01603d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:293:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5575d0160388 <col:43, col:49> 'struct _dnode *' lvalue .head 0x5575d015ab98
| |         `-MemberExpr 0x5575d0160340 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| |           `-ImplicitCastExpr 0x5575d0160328 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5575d0160308 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x5575d015ffd0 'list' 'sys_dlist_t *'
| `-FullComment 0x5575d02b21c0 <line:284:3, line:288:63>
|   |-ParagraphComment 0x5575d02b1f20 <line:284:3>
|   | `-TextComment 0x5575d02b1ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b1f40 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5575d02b1fa0 <col:10, col:54>
|   |   `-TextComment 0x5575d02b1f70 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x5575d02b1ff0 <line:286:3>
|   | `-TextComment 0x5575d02b1fc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b2010 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b20a0 <col:15, col:51>
|   |   `-TextComment 0x5575d02b2070 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5575d02b20f0 <line:288:3>
|   | `-TextComment 0x5575d02b20c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b2110 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x5575d02b2170 <col:11, col:63>
|       `-TextComment 0x5575d02b2140 <col:11, col:63> Text=" a pointer to the head element, NULL if list is empty"
|-FunctionDecl 0x5575d0160520 <line:306:1, line:309:1> line:306:28 sys_dlist_peek_head_not_empty 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5575d0160490 <col:58, col:71> col:71 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5575d01606c8 <line:307:1, line:309:1>
| | `-ReturnStmt 0x5575d0160690 <line:308:2, col:15>
| |   `-ImplicitCastExpr 0x5575d0160678 <col:9, col:15> 'struct _dnode *' <LValueToRValue>
| |     `-MemberExpr 0x5575d0160648 <col:9, col:15> 'struct _dnode *' lvalue .head 0x5575d015ab98
| |       `-MemberExpr 0x5575d0160600 <col:9, col:15> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| |         `-ImplicitCastExpr 0x5575d01605e8 <col:9> 'sys_dlist_t *' <LValueToRValue>
| |           `-DeclRefExpr 0x5575d01605c8 <col:9> 'sys_dlist_t *' lvalue ParmVar 0x5575d0160490 'list' 'sys_dlist_t *'
| `-FullComment 0x5575d02b2560 <line:297:3, line:303:40>
|   |-ParagraphComment 0x5575d02b2260 <line:297:3>
|   | `-TextComment 0x5575d02b2230 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b2280 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5575d02b22e0 <col:10, col:54>
|   |   `-TextComment 0x5575d02b22b0 <col:10, col:54> Text=" get a reference to the head item in the list"
|   |-ParagraphComment 0x5575d02b2330 <line:299:3, col:42>
|   | `-TextComment 0x5575d02b2300 <col:3, col:42> Text=" The list must be known to be non-empty."
|   |-ParagraphComment 0x5575d02b2380 <line:301:3>
|   | `-TextComment 0x5575d02b2350 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b23a0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b2430 <col:15, col:51>
|   |   `-TextComment 0x5575d02b2400 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5575d02b2480 <line:303:3>
|   | `-TextComment 0x5575d02b2450 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b24a0 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x5575d02b2500 <col:11, col:40>
|       `-TextComment 0x5575d02b24d0 <col:11, col:40> Text=" a pointer to the head element"
|-FunctionDecl 0x5575d0160880 <line:322:1, line:326:1> line:322:28 used sys_dlist_peek_next_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d01606f0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d0160768 <line:323:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d0160d48 <line:324:1, line:326:1>
| | `-ReturnStmt 0x5575d0160d10 <line:325:2, col:45>
| |   `-ConditionalOperator 0x5575d0160ce0 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x5575d0160b60 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x5575d0160b40 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x5575d0160a00 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5575d0160930 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5575d0160768 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5575d0160a18 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x5575d01609d0 <col:18, col:24> 'struct _dnode *' lvalue .tail 0x5575d015ae90
| |     |       `-MemberExpr 0x5575d0160988 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| |     |         `-ImplicitCastExpr 0x5575d0160970 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x5575d0160950 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x5575d01606f0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5575d0160cc8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5575d0160be0 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5575d0160bb8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5575d0160b80 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5575d0160cb0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:325:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5575d0160c80 <col:39, col:45> 'struct _dnode *' lvalue .next 0x5575d015ac10
| |         `-MemberExpr 0x5575d0160c38 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| |           `-ImplicitCastExpr 0x5575d0160c20 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5575d0160c00 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x5575d0160768 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b29d0 <line:312:3, line:319:78>
|   |-ParagraphComment 0x5575d02b2600 <line:312:3>
|   | `-TextComment 0x5575d02b25d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b2620 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x5575d02b2680 <col:10, col:72>
|   |   `-TextComment 0x5575d02b2650 <col:10, col:72> Text=" get a reference to the next item in the list, node is not NULL"
|   |-ParagraphComment 0x5575d02b26d0 <line:314:3, col:69>
|   | `-TextComment 0x5575d02b26a0 <col:3, col:69> Text=" Faster than sys_dlist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5575d02b2720 <line:316:3>
|   | `-TextComment 0x5575d02b26f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b2740 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b27f0 <line:316:15, line:317:3>
|   |   |-TextComment 0x5575d02b27a0 <line:316:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5575d02b27c0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x5575d02b2810 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b28a0 <col:15, col:70>
|   |   `-TextComment 0x5575d02b2870 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x5575d02b28f0 <line:319:3>
|   | `-TextComment 0x5575d02b28c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b2910 <col:4, col:78> Name="return"
|     `-ParagraphComment 0x5575d02b2970 <col:11, col:78>
|       `-TextComment 0x5575d02b2940 <col:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|-FunctionDecl 0x5575d0160e80 <line:338:1, line:342:1> line:338:28 used sys_dlist_peek_next 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d0160d70 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d0160de8 <line:339:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d0161278 <line:340:1, line:342:1>
| | `-ReturnStmt 0x5575d0161240 <line:341:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x5575d0161210 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x5575d0161020 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:9, col:22> 'int'
| |     | `-BinaryOperator 0x5575d0161000 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x5575d0160fd0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5575d0160f30 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5575d0160de8 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5575d0160fe8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x5575d0160fb0 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x5575d0160f88 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x5575d0160f50 <col:23> 'int' 0
| |     |-CallExpr 0x5575d0161118 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:341:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x5575d0161100 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x5575d0161040 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x5575d0160880 'sys_dlist_peek_next_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x5575d0161148 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x5575d0161060 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x5575d0160d70 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x5575d0161160 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x5575d0161080 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x5575d0160de8 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x5575d01611f8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x5575d01611d8 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x5575d01611b0 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x5575d0161178 <col:23> 'int' 0
| `-FullComment 0x5575d02b2e10 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:329:3, line:335:68>
|   |-ParagraphComment 0x5575d02b2a70 <line:329:3>
|   | `-TextComment 0x5575d02b2a40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b2a90 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5575d02b2af0 <col:10, col:54>
|   |   `-TextComment 0x5575d02b2ac0 <col:10, col:54> Text=" get a reference to the next item in the list"
|   |-ParagraphComment 0x5575d02b2b40 <line:331:3>
|   | `-TextComment 0x5575d02b2b10 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b2b60 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b2c10 <line:331:15, line:332:3>
|   |   |-TextComment 0x5575d02b2bc0 <line:331:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5575d02b2be0 <line:332:3> Text=" "
|   |-ParamCommandComment 0x5575d02b2c30 <col:4, col:70> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b2cc0 <col:15, col:70>
|   |   `-TextComment 0x5575d02b2c90 <col:15, col:70> Text=" the node from which to get the next element in the list"
|   |-ParagraphComment 0x5575d02b2d10 <line:334:3>
|   | `-TextComment 0x5575d02b2ce0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b2d30 <col:4, line:335:68> Name="return"
|     `-ParagraphComment 0x5575d02b2db0 <line:334:11, line:335:68>
|       |-TextComment 0x5575d02b2d60 <line:334:11, col:78> Text=" a pointer to the next element from a node, NULL if node is the tail"
|       `-TextComment 0x5575d02b2d80 <line:335:3, col:68> Text=" or NULL (when node comes from reading the head of an empty list)."
|-FunctionDecl 0x5575d01613b0 <line:356:1, line:360:1> line:356:28 used sys_dlist_peek_prev_no_check 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d01612a0 <col:57, col:70> col:70 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d0161318 <line:357:8, col:21> col:21 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d0161768 <line:358:1, line:360:1>
| | `-ReturnStmt 0x5575d0161730 <line:359:2, col:45>
| |   `-ConditionalOperator 0x5575d0161700 <col:9, col:45> 'struct _dnode *'
| |     |-ParenExpr 0x5575d0161580 <col:9, col:28> 'int'
| |     | `-BinaryOperator 0x5575d0161560 <col:10, col:24> 'int' '=='
| |     |   |-ImplicitCastExpr 0x5575d0161530 <col:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5575d0161460 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5575d0161318 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5575d0161548 <col:18, col:24> 'struct _dnode *' <LValueToRValue>
| |     |     `-MemberExpr 0x5575d0161500 <col:18, col:24> 'struct _dnode *' lvalue .head 0x5575d015ab98
| |     |       `-MemberExpr 0x5575d01614b8 <col:18, col:24> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| |     |         `-ImplicitCastExpr 0x5575d01614a0 <col:18> 'sys_dlist_t *' <LValueToRValue>
| |     |           `-DeclRefExpr 0x5575d0161480 <col:18> 'sys_dlist_t *' lvalue ParmVar 0x5575d01612a0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5575d01616e8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5575d0161600 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5575d01615d8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5575d01615a0 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01616d0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:359:39, col:45> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5575d01616a0 <col:39, col:45> 'struct _dnode *' lvalue .prev 0x5575d015af08
| |         `-MemberExpr 0x5575d0161658 <col:39, col:45> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| |           `-ImplicitCastExpr 0x5575d0161640 <col:39> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5575d0161620 <col:39> 'sys_dnode_t *' lvalue ParmVar 0x5575d0161318 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b32a0 <line:345:3, line:353:10>
|   |-ParagraphComment 0x5575d02b2eb0 <line:345:3>
|   | `-TextComment 0x5575d02b2e80 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b2ed0 <col:4, col:76> Name="brief"
|   | `-ParagraphComment 0x5575d02b2f30 <col:10, col:76>
|   |   `-TextComment 0x5575d02b2f00 <col:10, col:76> Text=" get a reference to the previous item in the list, node is not NULL"
|   |-ParagraphComment 0x5575d02b2f80 <line:347:3, col:69>
|   | `-TextComment 0x5575d02b2f50 <col:3, col:69> Text=" Faster than sys_dlist_peek_prev() if node is known not to be NULL."
|   |-ParagraphComment 0x5575d02b2fd0 <line:349:3>
|   | `-TextComment 0x5575d02b2fa0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b2ff0 <col:4, line:350:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b30a0 <line:349:15, line:350:3>
|   |   |-TextComment 0x5575d02b3050 <line:349:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5575d02b3070 <line:350:3> Text=" "
|   |-ParamCommandComment 0x5575d02b30c0 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b3150 <col:15, col:74>
|   |   `-TextComment 0x5575d02b3120 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x5575d02b31a0 <line:352:3>
|   | `-TextComment 0x5575d02b3170 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b31c0 <col:4, line:353:10> Name="return"
|     `-ParagraphComment 0x5575d02b3240 <line:352:11, line:353:10>
|       |-TextComment 0x5575d02b31f0 <line:352:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       `-TextComment 0x5575d02b3210 <line:353:3, col:10> Text="	   tail"
|-FunctionDecl 0x5575d01618a0 <line:373:1, line:377:1> line:373:28 sys_dlist_peek_prev 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d0161790 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d0161808 <line:374:13, col:26> col:26 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d0114f98 <line:375:1, line:377:1>
| | `-ReturnStmt 0x5575d0114f58 <line:376:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
| |   `-ConditionalOperator 0x5575d0114f28 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_dnode_t *'
| |     |-ParenExpr 0x5575d0161a40 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:9, col:22> 'int'
| |     | `-BinaryOperator 0x5575d0161a20 <col:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     |   |-ImplicitCastExpr 0x5575d01619f0 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:10> 'sys_dnode_t *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5575d0161950 <col:10> 'sys_dnode_t *' lvalue ParmVar 0x5575d0161808 'node' 'sys_dnode_t *'
| |     |   `-ImplicitCastExpr 0x5575d0161a08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     |     `-ParenExpr 0x5575d01619d0 <col:14, col:24> 'void *'
| |     |       `-CStyleCastExpr 0x5575d01619a8 <col:15, col:23> 'void *' <NullToPointer>
| |     |         `-IntegerLiteral 0x5575d0161970 <col:23> 'int' 0
| |     |-CallExpr 0x5575d0161ad8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:376:26, col:65> 'sys_dnode_t *'
| |     | |-ImplicitCastExpr 0x5575d0161ac0 <col:26> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x5575d0161a60 <col:26> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x5575d01613b0 'sys_dlist_peek_prev_no_check' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     | |-ImplicitCastExpr 0x5575d0161b08 <col:55> 'sys_dlist_t *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x5575d0161a80 <col:55> 'sys_dlist_t *' lvalue ParmVar 0x5575d0161790 'list' 'sys_dlist_t *'
| |     | `-ImplicitCastExpr 0x5575d0161b20 <col:61> 'sys_dnode_t *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x5575d0161aa0 <col:61> 'sys_dnode_t *' lvalue ParmVar 0x5575d0161808 'node' 'sys_dnode_t *'
| |     `-ImplicitCastExpr 0x5575d0114f10 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| |       `-ParenExpr 0x5575d0114ef0 <col:14, col:24> 'void *'
| |         `-CStyleCastExpr 0x5575d0114ec8 <col:15, col:23> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x5575d0114e90 <col:23> 'int' 0
| `-FullComment 0x5575d02b3720 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:363:3, line:370:13>
|   |-ParagraphComment 0x5575d02b3340 <line:363:3>
|   | `-TextComment 0x5575d02b3310 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b3360 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5575d02b33c0 <col:10, col:58>
|   |   `-TextComment 0x5575d02b3390 <col:10, col:58> Text=" get a reference to the previous item in the list"
|   |-ParagraphComment 0x5575d02b3420 <line:365:3>
|   | `-TextComment 0x5575d02b33e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b3440 <col:4, line:366:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b34f0 <line:365:15, line:366:3>
|   |   |-TextComment 0x5575d02b34a0 <line:365:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5575d02b34c0 <line:366:3> Text=" "
|   |-ParamCommandComment 0x5575d02b3510 <col:4, col:74> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b35a0 <col:15, col:74>
|   |   `-TextComment 0x5575d02b3570 <col:15, col:74> Text=" the node from which to get the previous element in the list"
|   |-ParagraphComment 0x5575d02b35f0 <line:368:3>
|   | `-TextComment 0x5575d02b35c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b3610 <col:4, line:370:13> Name="return"
|     `-ParagraphComment 0x5575d02b36c0 <line:368:11, line:370:13>
|       |-TextComment 0x5575d02b3640 <line:368:11, col:77> Text=" a pointer to the previous element from a node, NULL if node is the"
|       |-TextComment 0x5575d02b3660 <line:369:3, col:70> Text=" 	   tail or NULL (when node comes from reading the head of an empty"
|       `-TextComment 0x5575d02b3680 <line:370:3, col:13> Text=" 	   list)."
|-FunctionDecl 0x5575d0115050 <line:387:1, line:390:1> line:387:28 sys_dlist_peek_tail 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5575d0114fc0 <col:48, col:61> col:61 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5575d0115378 <line:388:1, line:390:1>
| | `-ReturnStmt 0x5575d0115338 <line:389:2, col:49>
| |   `-ConditionalOperator 0x5575d0115308 <col:9, col:49> 'struct _dnode *'
| |     |-ImplicitCastExpr 0x5575d01152c0 <col:9, col:32> 'int' <IntegralCast>
| |     | `-CallExpr 0x5575d0115150 <col:9, col:32> 'bool'
| |     |   |-ImplicitCastExpr 0x5575d0115138 <col:9> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x5575d01150f8 <col:9> 'bool (sys_dlist_t *)' Function 0x5575d015fa30 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |     |   `-ImplicitCastExpr 0x5575d0115178 <col:28> 'sys_dlist_t *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5575d0115118 <col:28> 'sys_dlist_t *' lvalue ParmVar 0x5575d0114fc0 'list' 'sys_dlist_t *'
| |     |-ImplicitCastExpr 0x5575d01152f0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'struct _dnode *' <NullToPointer>
| |     | `-ParenExpr 0x5575d01151f0 <col:14, col:24> 'void *'
| |     |   `-CStyleCastExpr 0x5575d01151c8 <col:15, col:23> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5575d0115190 <col:23> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01152d8 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:389:43, col:49> 'struct _dnode *' <LValueToRValue>
| |       `-MemberExpr 0x5575d0115290 <col:43, col:49> 'struct _dnode *' lvalue .tail 0x5575d015ae90
| |         `-MemberExpr 0x5575d0115248 <col:43, col:49> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| |           `-ImplicitCastExpr 0x5575d0115230 <col:43> 'sys_dlist_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5575d0115210 <col:43> 'sys_dlist_t *' lvalue ParmVar 0x5575d0114fc0 'list' 'sys_dlist_t *'
| `-FullComment 0x5575d02b3a60 <line:380:3, line:384:63>
|   |-ParagraphComment 0x5575d02b37c0 <line:380:3>
|   | `-TextComment 0x5575d02b3790 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b37e0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5575d02b3840 <col:10, col:54>
|   |   `-TextComment 0x5575d02b3810 <col:10, col:54> Text=" get a reference to the tail item in the list"
|   |-ParagraphComment 0x5575d02b3890 <line:382:3>
|   | `-TextComment 0x5575d02b3860 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b38b0 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b3940 <col:15, col:51>
|   |   `-TextComment 0x5575d02b3910 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5575d02b3990 <line:384:3>
|   | `-TextComment 0x5575d02b3960 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b39b0 <col:4, col:63> Name="return"
|     `-ParagraphComment 0x5575d02b3a10 <col:11, col:63>
|       `-TextComment 0x5575d02b39e0 <col:11, col:63> Text=" a pointer to the tail element, NULL if list is empty"
|-FunctionDecl 0x5575d0115530 <line:403:1, line:410:1> line:403:20 used sys_dlist_append 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d01153a0 <col:37, col:50> col:50 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d0115418 <col:56, col:69> col:69 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d0115b48 <line:404:1, line:410:1>
| | |-BinaryOperator 0x5575d01156c8 <line:405:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d0115660 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5575d015ac10
| | | | `-MemberExpr 0x5575d0115618 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |   `-ImplicitCastExpr 0x5575d0115600 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d01155e0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d0115418 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d01156b0 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575d0115690 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5575d01153a0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5575d0115860 <line:406:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d0115768 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5575d015af08
| | | | `-MemberExpr 0x5575d0115720 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | | |   `-ImplicitCastExpr 0x5575d0115708 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d01156e8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d0115418 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d0115848 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5575d0115818 <col:15, col:21> 'struct _dnode *' lvalue .tail 0x5575d015ae90
| | |     `-MemberExpr 0x5575d01157d0 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | |       `-ImplicitCastExpr 0x5575d01157b8 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5575d0115798 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5575d01153a0 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5575d01159f8 <line:408:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d0115990 <col:2, col:14> 'struct _dnode *' lvalue .next 0x5575d015ac10
| | | | `-MemberExpr 0x5575d0115948 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |   `-ImplicitCastExpr 0x5575d0115930 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5575d0115900 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x5575d015ae90
| | | |       `-MemberExpr 0x5575d01158b8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | | |         `-ImplicitCastExpr 0x5575d01158a0 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5575d0115880 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5575d01153a0 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x5575d01159e0 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575d01159c0 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5575d0115418 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x5575d0115b00 <line:409:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x5575d0115a98 <col:2, col:8> 'struct _dnode *' lvalue .tail 0x5575d015ae90
| |   | `-MemberExpr 0x5575d0115a50 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| |   |   `-ImplicitCastExpr 0x5575d0115a38 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5575d0115a18 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5575d01153a0 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x5575d0115ae8 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d0115ac8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5575d0115418 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b3ed0 <line:393:3, line:400:14>
|   |-ParagraphComment 0x5575d02b3b00 <line:393:3>
|   | `-TextComment 0x5575d02b3ad0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b3b20 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5575d02b3b80 <col:10, col:34>
|   |   `-TextComment 0x5575d02b3b50 <col:10, col:34> Text=" add node to tail of list"
|   |-ParagraphComment 0x5575d02b3bd0 <line:395:3, col:62>
|   | `-TextComment 0x5575d02b3ba0 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b3c20 <line:397:3>
|   | `-TextComment 0x5575d02b3bf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b3c40 <col:4, line:398:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b3cf0 <line:397:15, line:398:3>
|   |   |-TextComment 0x5575d02b3ca0 <line:397:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5575d02b3cc0 <line:398:3> Text=" "
|   |-ParamCommandComment 0x5575d02b3d10 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b3da0 <col:15, col:36>
|   |   `-TextComment 0x5575d02b3d70 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x5575d02b3df0 <line:400:3>
|   | `-TextComment 0x5575d02b3dc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b3e10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02b3e70 <col:11, col:14>
|       `-TextComment 0x5575d02b3e40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0115c98 <line:423:1, line:430:1> line:423:20 sys_dlist_prepend 'void (sys_dlist_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d0115b88 <col:38, col:51> col:51 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d0115c00 <col:57, col:70> col:70 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d0164768 <line:424:1, line:430:1>
| | |-BinaryOperator 0x5575d0164378 <line:425:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d0115dc8 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5575d015ac10
| | | | `-MemberExpr 0x5575d0115d80 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |   `-ImplicitCastExpr 0x5575d0115d68 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d0115d48 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d0115c00 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d0164360 <col:15, col:21> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5575d0164330 <col:15, col:21> 'struct _dnode *' lvalue .head 0x5575d015ab98
| | |     `-MemberExpr 0x5575d0115e30 <col:15, col:21> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | |       `-ImplicitCastExpr 0x5575d0115e18 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5575d0115df8 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5575d0115b88 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5575d0164480 <line:426:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d0164418 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5575d015af08
| | | | `-MemberExpr 0x5575d01643d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | | |   `-ImplicitCastExpr 0x5575d01643b8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d0164398 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d0115c00 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d0164468 <col:15> 'sys_dlist_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575d0164448 <col:15> 'sys_dlist_t *' lvalue ParmVar 0x5575d0115b88 'list' 'sys_dlist_t *'
| | |-BinaryOperator 0x5575d0164618 <line:428:2, col:21> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d01645b0 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x5575d015af08
| | | | `-MemberExpr 0x5575d0164568 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | | |   `-ImplicitCastExpr 0x5575d0164550 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5575d0164520 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5575d015ab98
| | | |       `-MemberExpr 0x5575d01644d8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |         `-ImplicitCastExpr 0x5575d01644c0 <col:2> 'sys_dlist_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5575d01644a0 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5575d0115b88 'list' 'sys_dlist_t *'
| | | `-ImplicitCastExpr 0x5575d0164600 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575d01645e0 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5575d0115c00 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x5575d0164720 <line:429:2, col:15> 'struct _dnode *' '='
| |   |-MemberExpr 0x5575d01646b8 <col:2, col:8> 'struct _dnode *' lvalue .head 0x5575d015ab98
| |   | `-MemberExpr 0x5575d0164670 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| |   |   `-ImplicitCastExpr 0x5575d0164658 <col:2> 'sys_dlist_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5575d0164638 <col:2> 'sys_dlist_t *' lvalue ParmVar 0x5575d0115b88 'list' 'sys_dlist_t *'
| |   `-ImplicitCastExpr 0x5575d0164708 <col:15> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d01646e8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5575d0115c00 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b4340 <line:413:3, line:420:14>
|   |-ParagraphComment 0x5575d02b3f70 <line:413:3>
|   | `-TextComment 0x5575d02b3f40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b3f90 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5575d02b3ff0 <col:10, col:34>
|   |   `-TextComment 0x5575d02b3fc0 <col:10, col:34> Text=" add node to head of list"
|   |-ParagraphComment 0x5575d02b4040 <line:415:3, col:62>
|   | `-TextComment 0x5575d02b4010 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b4090 <line:417:3>
|   | `-TextComment 0x5575d02b4060 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b40b0 <col:4, line:418:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b4160 <line:417:15, line:418:3>
|   |   |-TextComment 0x5575d02b4110 <line:417:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5575d02b4130 <line:418:3> Text=" "
|   |-ParamCommandComment 0x5575d02b4180 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b4210 <col:15, col:36>
|   |   `-TextComment 0x5575d02b41e0 <col:15, col:36> Text=" the element to append"
|   |-ParagraphComment 0x5575d02b4260 <line:420:3>
|   | `-TextComment 0x5575d02b4230 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b4280 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02b42e0 <col:11, col:14>
|       `-TextComment 0x5575d02b42b0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0164900 <line:440:1, line:446:1> line:440:20 used sys_dlist_insert 'void (sys_dnode_t *, sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d01647a8 <col:37, col:50> col:50 used successor 'sys_dnode_t *'
| |-ParmVarDecl 0x5575d0164820 <col:61, col:74> col:74 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d0164f18 <line:441:1, line:446:1>
| | |-BinaryOperator 0x5575d0164b28 <line:442:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d0164a30 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5575d015af08
| | | | `-MemberExpr 0x5575d01649e8 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | | |   `-ImplicitCastExpr 0x5575d01649d0 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d01649b0 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d0164820 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d0164b10 <col:15, col:26> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5575d0164ae0 <col:15, col:26> 'struct _dnode *' lvalue .prev 0x5575d015af08
| | |     `-MemberExpr 0x5575d0164a98 <col:15, col:26> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | |       `-ImplicitCastExpr 0x5575d0164a80 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5575d0164a60 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5575d01647a8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x5575d0164c30 <line:443:2, col:15> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d0164bc8 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5575d015ac10
| | | | `-MemberExpr 0x5575d0164b80 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |   `-ImplicitCastExpr 0x5575d0164b68 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d0164b48 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d0164820 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d0164c18 <col:15> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575d0164bf8 <col:15> 'sys_dnode_t *' lvalue ParmVar 0x5575d01647a8 'successor' 'sys_dnode_t *'
| | |-BinaryOperator 0x5575d0164dc8 <line:444:2, col:26> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d0164d60 <col:2, col:19> 'struct _dnode *' lvalue .next 0x5575d015ac10
| | | | `-MemberExpr 0x5575d0164d18 <col:2, col:19> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |   `-ImplicitCastExpr 0x5575d0164d00 <col:2, col:13> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5575d0164cd0 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x5575d015af08
| | | |       `-MemberExpr 0x5575d0164c88 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | | |         `-ImplicitCastExpr 0x5575d0164c70 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5575d0164c50 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d01647a8 'successor' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d0164db0 <col:26> 'sys_dnode_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575d0164d90 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x5575d0164820 'node' 'sys_dnode_t *'
| | `-BinaryOperator 0x5575d0164ed0 <line:445:2, col:20> 'struct _dnode *' '='
| |   |-MemberExpr 0x5575d0164e68 <col:2, col:13> 'struct _dnode *' lvalue .prev 0x5575d015af08
| |   | `-MemberExpr 0x5575d0164e20 <col:2, col:13> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| |   |   `-ImplicitCastExpr 0x5575d0164e08 <col:2> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5575d0164de8 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d01647a8 'successor' 'sys_dnode_t *'
| |   `-ImplicitCastExpr 0x5575d0164eb8 <col:20> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d0164e98 <col:20> 'sys_dnode_t *' lvalue ParmVar 0x5575d0164820 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b46d0 <line:433:3, line:438:36>
|   |-ParagraphComment 0x5575d02b43e0 <line:433:3>
|   | `-TextComment 0x5575d02b43b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b4400 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5575d02b4460 <col:10, col:35>
|   |   `-TextComment 0x5575d02b4430 <col:10, col:35> Text=" Insert a node into a list"
|   |-ParagraphComment 0x5575d02b44b0 <line:435:3, col:52>
|   | `-TextComment 0x5575d02b4480 <col:3, col:52> Text=" Insert a node before a specified node in a dlist."
|   |-ParagraphComment 0x5575d02b4500 <line:437:3>
|   | `-TextComment 0x5575d02b44d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b4520 <col:4, line:438:3> [in] implicitly Param="successor" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b45d0 <line:437:20, line:438:3>
|   |   |-TextComment 0x5575d02b4580 <line:437:20, col:69> Text=" the position before which "node" will be inserted"
|   |   `-TextComment 0x5575d02b45a0 <line:438:3> Text=" "
|   `-ParamCommandComment 0x5575d02b45f0 <col:4, col:36> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5575d02b4680 <col:15, col:36>
|       `-TextComment 0x5575d02b4650 <col:15, col:36> Text=" the element to insert"
|-FunctionDecl 0x5575d01694a0 <line:465:1, line:482:1> line:465:20 sys_dlist_insert_at 'void (sys_dlist_t *, sys_dnode_t *, int (*)(sys_dnode_t *, void *), void *)' static inline
| |-ParmVarDecl 0x5575d0164f58 <col:40, col:53> col:53 used list 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d0164fd0 <col:59, col:72> col:72 used node 'sys_dnode_t *'
| |-ParmVarDecl 0x5575d0165288 <line:466:2, col:43> col:8 used cond 'int (*)(sys_dnode_t *, void *)'
| |-ParmVarDecl 0x5575d0169350 <col:46, col:52> col:52 used data 'void *'
| |-CompoundStmt 0x5575d016a038 <line:467:1, line:482:1>
| | `-IfStmt 0x5575d0169fe0 <line:468:2, line:481:2> has_else
| |   |-CallExpr 0x5575d01695b8 <line:468:6, col:29> 'bool'
| |   | |-ImplicitCastExpr 0x5575d01695a0 <col:6> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x5575d0169560 <col:6> 'bool (sys_dlist_t *)' Function 0x5575d015fa30 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| |   | `-ImplicitCastExpr 0x5575d01695e0 <col:25> 'sys_dlist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5575d0169580 <col:25> 'sys_dlist_t *' lvalue ParmVar 0x5575d0164f58 'list' 'sys_dlist_t *'
| |   |-CompoundStmt 0x5575d0169738 <col:32, line:470:2>
| |   | `-CallExpr 0x5575d01696d8 <line:469:3, col:30> 'void'
| |   |   |-ImplicitCastExpr 0x5575d01696c0 <col:3> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5575d01695f8 <col:3> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x5575d0115530 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |   |   |-ImplicitCastExpr 0x5575d0169708 <col:20> 'sys_dlist_t *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x5575d0169618 <col:20> 'sys_dlist_t *' lvalue ParmVar 0x5575d0164f58 'list' 'sys_dlist_t *'
| |   |   `-ImplicitCastExpr 0x5575d0169720 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5575d0169638 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x5575d0164fd0 'node' 'sys_dnode_t *'
| |   `-CompoundStmt 0x5575d0169fb8 <line:470:9, line:481:2>
| |     |-DeclStmt 0x5575d01698c8 <line:471:3, col:47>
| |     | `-VarDecl 0x5575d0169760 <col:3, col:46> col:16 used pos 'sys_dnode_t *' cinit
| |     |   `-CallExpr 0x5575d0169888 <col:22, col:46> 'sys_dnode_t *'
| |     |     |-ImplicitCastExpr 0x5575d0169870 <col:22> 'sys_dnode_t *(*)(sys_dlist_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x5575d01697c8 <col:22> 'sys_dnode_t *(sys_dlist_t *)' Function 0x5575d01600e0 'sys_dlist_peek_head' 'sys_dnode_t *(sys_dlist_t *)'
| |     |     `-ImplicitCastExpr 0x5575d01698b0 <col:42> 'sys_dlist_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5575d01697e8 <col:42> 'sys_dlist_t *' lvalue ParmVar 0x5575d0164f58 'list' 'sys_dlist_t *'
| |     |-WhileStmt 0x5575d0169c78 <line:473:3, line:475:3>
| |     | |-BinaryOperator 0x5575d0169b28 <line:473:10, col:48> 'int' '&&'
| |     | | |-ParenExpr 0x5575d01699d0 <col:10, col:22> 'int'
| |     | | | `-BinaryOperator 0x5575d01699b0 <col:11, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |     | | |   |-ImplicitCastExpr 0x5575d0169980 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:11> 'sys_dnode_t *' <LValueToRValue>
| |     | | |   | `-DeclRefExpr 0x5575d01698e0 <col:11> 'sys_dnode_t *' lvalue Var 0x5575d0169760 'pos' 'sys_dnode_t *'
| |     | | |   `-ImplicitCastExpr 0x5575d0169998 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |     | | |     `-ParenExpr 0x5575d0169960 <col:14, col:24> 'void *'
| |     | | |       `-CStyleCastExpr 0x5575d0169938 <col:15, col:23> 'void *' <NullToPointer>
| |     | | |         `-IntegerLiteral 0x5575d0169900 <col:23> 'int' 0
| |     | | `-ParenExpr 0x5575d0169b08 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:473:27, col:48> 'int'
| |     | |   `-BinaryOperator 0x5575d0169ae8 <col:28, col:47> 'int' '=='
| |     | |     |-CallExpr 0x5575d0169a68 <col:28, col:42> 'int'
| |     | |     | |-ImplicitCastExpr 0x5575d0169a50 <col:28> 'int (*)(sys_dnode_t *, void *)' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x5575d01699f0 <col:28> 'int (*)(sys_dnode_t *, void *)' lvalue ParmVar 0x5575d0165288 'cond' 'int (*)(sys_dnode_t *, void *)'
| |     | |     | |-ImplicitCastExpr 0x5575d0169a98 <col:33> 'sys_dnode_t *' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x5575d0169a10 <col:33> 'sys_dnode_t *' lvalue Var 0x5575d0169760 'pos' 'sys_dnode_t *'
| |     | |     | `-ImplicitCastExpr 0x5575d0169ab0 <col:38> 'void *' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x5575d0169a30 <col:38> 'void *' lvalue ParmVar 0x5575d0169350 'data' 'void *'
| |     | |     `-IntegerLiteral 0x5575d0169ac8 <col:47> 'int' 0
| |     | `-CompoundStmt 0x5575d0169c60 <col:51, line:475:3>
| |     |   `-BinaryOperator 0x5575d0169c40 <line:474:4, col:39> 'sys_dnode_t *' '='
| |     |     |-DeclRefExpr 0x5575d0169b48 <col:4> 'sys_dnode_t *' lvalue Var 0x5575d0169760 'pos' 'sys_dnode_t *'
| |     |     `-CallExpr 0x5575d0169be0 <col:10, col:39> 'sys_dnode_t *'
| |     |       |-ImplicitCastExpr 0x5575d0169bc8 <col:10> 'sys_dnode_t *(*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x5575d0169b68 <col:10> 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)' Function 0x5575d0160e80 'sys_dlist_peek_next' 'sys_dnode_t *(sys_dlist_t *, sys_dnode_t *)'
| |     |       |-ImplicitCastExpr 0x5575d0169c10 <col:30> 'sys_dlist_t *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x5575d0169b88 <col:30> 'sys_dlist_t *' lvalue ParmVar 0x5575d0164f58 'list' 'sys_dlist_t *'
| |     |       `-ImplicitCastExpr 0x5575d0169c28 <col:36> 'sys_dnode_t *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x5575d0169ba8 <col:36> 'sys_dnode_t *' lvalue Var 0x5575d0169760 'pos' 'sys_dnode_t *'
| |     `-IfStmt 0x5575d0169f90 <line:476:3, line:480:3> has_else
| |       |-BinaryOperator 0x5575d0169d60 <line:476:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| |       | |-ImplicitCastExpr 0x5575d0169d30 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:7> 'sys_dnode_t *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5575d0169c90 <col:7> 'sys_dnode_t *' lvalue Var 0x5575d0169760 'pos' 'sys_dnode_t *'
| |       | `-ImplicitCastExpr 0x5575d0169d48 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <BitCast>
| |       |   `-ParenExpr 0x5575d0169d10 <col:14, col:24> 'void *'
| |       |     `-CStyleCastExpr 0x5575d0169ce8 <col:15, col:23> 'void *' <NullToPointer>
| |       |       `-IntegerLiteral 0x5575d0169cb0 <col:23> 'int' 0
| |       |-CompoundStmt 0x5575d0169e88 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:476:20, line:478:3>
| |       | `-CallExpr 0x5575d0169e28 <line:477:4, col:30> 'void'
| |       |   |-ImplicitCastExpr 0x5575d0169e10 <col:4> 'void (*)(sys_dnode_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x5575d0169d80 <col:4> 'void (sys_dnode_t *, sys_dnode_t *)' Function 0x5575d0164900 'sys_dlist_insert' 'void (sys_dnode_t *, sys_dnode_t *)'
| |       |   |-ImplicitCastExpr 0x5575d0169e58 <col:21> 'sys_dnode_t *' <LValueToRValue>
| |       |   | `-DeclRefExpr 0x5575d0169da0 <col:21> 'sys_dnode_t *' lvalue Var 0x5575d0169760 'pos' 'sys_dnode_t *'
| |       |   `-ImplicitCastExpr 0x5575d0169e70 <col:26> 'sys_dnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5575d0169dc0 <col:26> 'sys_dnode_t *' lvalue ParmVar 0x5575d0164fd0 'node' 'sys_dnode_t *'
| |       `-CompoundStmt 0x5575d0169f78 <line:478:10, line:480:3>
| |         `-CallExpr 0x5575d0169f18 <line:479:4, col:31> 'void'
| |           |-ImplicitCastExpr 0x5575d0169f00 <col:4> 'void (*)(sys_dlist_t *, sys_dnode_t *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x5575d0169ea0 <col:4> 'void (sys_dlist_t *, sys_dnode_t *)' Function 0x5575d0115530 'sys_dlist_append' 'void (sys_dlist_t *, sys_dnode_t *)'
| |           |-ImplicitCastExpr 0x5575d0169f48 <col:21> 'sys_dlist_t *' <LValueToRValue>
| |           | `-DeclRefExpr 0x5575d0169ec0 <col:21> 'sys_dlist_t *' lvalue ParmVar 0x5575d0164f58 'list' 'sys_dlist_t *'
| |           `-ImplicitCastExpr 0x5575d0169f60 <col:27> 'sys_dnode_t *' <LValueToRValue>
| |             `-DeclRefExpr 0x5575d0169ee0 <col:27> 'sys_dnode_t *' lvalue ParmVar 0x5575d0164fd0 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b4d90 <line:449:3, line:462:14>
|   |-ParagraphComment 0x5575d02b4770 <line:449:3>
|   | `-TextComment 0x5575d02b4740 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b4790 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5575d02b47f0 <col:10, col:33>
|   |   `-TextComment 0x5575d02b47c0 <col:10, col:33> Text=" insert node at position"
|   |-ParagraphComment 0x5575d02b48b0 <line:451:3, line:454:62>
|   | |-TextComment 0x5575d02b4810 <line:451:3, col:76> Text=" Insert a node in a location depending on a external condition. The cond()"
|   | |-TextComment 0x5575d02b4830 <line:452:3, col:74> Text=" function checks if the node is to be inserted _before_ the current node"
|   | |-TextComment 0x5575d02b4850 <line:453:3, col:31> Text=" against which it is checked."
|   | `-TextComment 0x5575d02b4870 <line:454:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b4900 <line:456:3>
|   | `-TextComment 0x5575d02b48d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b4920 <col:4, line:457:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b49d0 <line:456:15, line:457:3>
|   |   |-TextComment 0x5575d02b4980 <line:456:15, col:51> Text=" the doubly-linked list to operate on"
|   |   `-TextComment 0x5575d02b49a0 <line:457:3> Text=" "
|   |-ParamCommandComment 0x5575d02b49f0 <col:4, line:458:3> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b4aa0 <line:457:15, line:458:3>
|   |   |-TextComment 0x5575d02b4a50 <line:457:15, col:36> Text=" the element to insert"
|   |   `-TextComment 0x5575d02b4a70 <line:458:3> Text=" "
|   |-ParamCommandComment 0x5575d02b4ac0 <col:4, line:460:3> [in] implicitly Param="cond" ParamIndex=2
|   | `-ParagraphComment 0x5575d02b4ba0 <line:458:15, line:460:3>
|   |   |-TextComment 0x5575d02b4b20 <line:458:15, col:76> Text=" a function that determines if the current node is the correct"
|   |   |-TextComment 0x5575d02b4b40 <line:459:3, col:27> Text="             insert point"
|   |   `-TextComment 0x5575d02b4b60 <line:460:3> Text=" "
|   |-ParamCommandComment 0x5575d02b4bc0 <col:4, col:34> [in] implicitly Param="data" ParamIndex=3
|   | `-ParagraphComment 0x5575d02b4c50 <col:15, col:34>
|   |   `-TextComment 0x5575d02b4c20 <col:15, col:34> Text=" parameter to cond()"
|   |-ParagraphComment 0x5575d02b4ca0 <line:462:3>
|   | `-TextComment 0x5575d02b4c70 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b4cc0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02b4d20 <col:11, col:14>
|       `-TextComment 0x5575d02b4cf0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d016a0f0 <line:495:1, line:500:1> line:495:20 used sys_dlist_remove 'void (sys_dnode_t *)' static inline
| |-ParmVarDecl 0x5575d016a060 <col:37, col:50> col:50 used node 'sys_dnode_t *'
| |-CompoundStmt 0x5575d016a958 <line:496:1, line:500:1>
| | |-BinaryOperator 0x5575d016a5e0 <line:497:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d016a2a8 <col:2, col:14> 'struct _dnode *' lvalue .next 0x5575d015ac10
| | | | `-MemberExpr 0x5575d016a260 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |   `-ImplicitCastExpr 0x5575d016a248 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5575d016a218 <col:2, col:8> 'struct _dnode *' lvalue .prev 0x5575d015af08
| | | |       `-MemberExpr 0x5575d016a1d0 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | | |         `-ImplicitCastExpr 0x5575d016a1b8 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5575d016a198 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d016a060 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d016a5c8 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5575d016a598 <col:21, col:27> 'struct _dnode *' lvalue .next 0x5575d015ac10
| | |     `-MemberExpr 0x5575d016a550 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | |       `-ImplicitCastExpr 0x5575d016a2f8 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5575d016a2d8 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5575d016a060 'node' 'sys_dnode_t *'
| | |-BinaryOperator 0x5575d016a808 <line:498:2, col:27> 'struct _dnode *' '='
| | | |-MemberExpr 0x5575d016a710 <col:2, col:14> 'struct _dnode *' lvalue .prev 0x5575d015af08
| | | | `-MemberExpr 0x5575d016a6c8 <col:2, col:14> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | | |   `-ImplicitCastExpr 0x5575d016a6b0 <col:2, col:8> 'struct _dnode *' <LValueToRValue>
| | | |     `-MemberExpr 0x5575d016a680 <col:2, col:8> 'struct _dnode *' lvalue .next 0x5575d015ac10
| | | |       `-MemberExpr 0x5575d016a638 <col:2, col:8> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | | |         `-ImplicitCastExpr 0x5575d016a620 <col:2> 'sys_dnode_t *' <LValueToRValue>
| | | |           `-DeclRefExpr 0x5575d016a600 <col:2> 'sys_dnode_t *' lvalue ParmVar 0x5575d016a060 'node' 'sys_dnode_t *'
| | | `-ImplicitCastExpr 0x5575d016a7f0 <col:21, col:27> 'struct _dnode *' <LValueToRValue>
| | |   `-MemberExpr 0x5575d016a7c0 <col:21, col:27> 'struct _dnode *' lvalue .prev 0x5575d015af08
| | |     `-MemberExpr 0x5575d016a778 <col:21, col:27> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:36:2)' lvalue -> 0x5575d015afc0
| | |       `-ImplicitCastExpr 0x5575d016a760 <col:21> 'sys_dnode_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5575d016a740 <col:21> 'sys_dnode_t *' lvalue ParmVar 0x5575d016a060 'node' 'sys_dnode_t *'
| | `-CallExpr 0x5575d016a8e8 <line:499:2, col:21> 'void'
| |   |-ImplicitCastExpr 0x5575d016a8d0 <col:2> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5575d016a828 <col:2> 'void (sys_dnode_t *)' Function 0x5575d015b960 'sys_dnode_init' 'void (sys_dnode_t *)'
| |   `-ImplicitCastExpr 0x5575d016a910 <col:17> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d016a848 <col:17> 'sys_dnode_t *' lvalue ParmVar 0x5575d016a060 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b5150 <line:485:3, line:492:14>
|   |-ParagraphComment 0x5575d02b4e30 <line:485:3>
|   | `-TextComment 0x5575d02b4e00 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b4e50 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02b4eb0 <col:10, col:44>
|   |   `-TextComment 0x5575d02b4e80 <col:10, col:44> Text=" remove a specific node from a list"
|   |-ParagraphComment 0x5575d02b4f20 <line:487:3, line:488:62>
|   | |-TextComment 0x5575d02b4ed0 <line:487:3, col:71> Text=" The list is implicit from the node. The node must be part of a list."
|   | `-TextComment 0x5575d02b4ef0 <line:488:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b4f70 <line:490:3>
|   | `-TextComment 0x5575d02b4f40 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b4f90 <col:4, col:33> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b5020 <col:15, col:33>
|   |   `-TextComment 0x5575d02b4ff0 <col:15, col:33> Text=" the node to remove"
|   |-ParagraphComment 0x5575d02b5070 <line:492:3>
|   | `-TextComment 0x5575d02b5040 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b5090 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02b50f0 <col:11, col:14>
|       `-TextComment 0x5575d02b50c0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d016aa20 <line:512:1, line:522:1> line:512:28 sys_dlist_get 'sys_dnode_t *(sys_dlist_t *)' static inline
| |-ParmVarDecl 0x5575d016a990 <col:42, col:55> col:55 used list 'sys_dlist_t *'
| |-CompoundStmt 0x5575d016aee8 <line:513:1, line:522:1>
| | |-DeclStmt 0x5575d016abd8 <line:514:2, col:26>
| | | `-VarDecl 0x5575d016aad8 <col:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:514:15 used node 'sys_dnode_t *' cinit
| | |   `-ImplicitCastExpr 0x5575d016abc0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_dnode_t *' <NullToPointer>
| | |     `-ParenExpr 0x5575d016aba0 <col:14, col:24> 'void *'
| | |       `-CStyleCastExpr 0x5575d016ab78 <col:15, col:23> 'void *' <NullToPointer>
| | |         `-IntegerLiteral 0x5575d016ab40 <col:23> 'int' 0
| | |-IfStmt 0x5575d016ae60 </vagrant/ext/zephyros/zephyr/include/sys/dlist.h:516:2, line:519:2>
| | | |-UnaryOperator 0x5575d016ac88 <line:516:6, col:30> 'int' prefix '!' cannot overflow
| | | | `-CallExpr 0x5575d016ac48 <col:7, col:30> 'bool'
| | | |   |-ImplicitCastExpr 0x5575d016ac30 <col:7> 'bool (*)(sys_dlist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5575d016abf0 <col:7> 'bool (sys_dlist_t *)' Function 0x5575d015fa30 'sys_dlist_is_empty' 'bool (sys_dlist_t *)'
| | | |   `-ImplicitCastExpr 0x5575d016ac70 <col:26> 'sys_dlist_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d016ac10 <col:26> 'sys_dlist_t *' lvalue ParmVar 0x5575d016a990 'list' 'sys_dlist_t *'
| | | `-CompoundStmt 0x5575d016ae40 <col:33, line:519:2>
| | |   |-BinaryOperator 0x5575d016ad88 <line:517:3, col:16> 'sys_dnode_t *' '='
| | |   | |-DeclRefExpr 0x5575d016aca0 <col:3> 'sys_dnode_t *' lvalue Var 0x5575d016aad8 'node' 'sys_dnode_t *'
| | |   | `-ImplicitCastExpr 0x5575d016ad70 <col:10, col:16> 'struct _dnode *' <LValueToRValue>
| | |   |   `-MemberExpr 0x5575d016ad40 <col:10, col:16> 'struct _dnode *' lvalue .head 0x5575d015ab98
| | |   |     `-MemberExpr 0x5575d016acf8 <col:10, col:16> 'union _dnode::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/dlist.h:32:2)' lvalue -> 0x5575d015acc0
| | |   |       `-ImplicitCastExpr 0x5575d016ace0 <col:10> 'sys_dlist_t *' <LValueToRValue>
| | |   |         `-DeclRefExpr 0x5575d016acc0 <col:10> 'sys_dlist_t *' lvalue ParmVar 0x5575d016a990 'list' 'sys_dlist_t *'
| | |   `-CallExpr 0x5575d016ae00 <line:518:3, col:24> 'void'
| | |     |-ImplicitCastExpr 0x5575d016ade8 <col:3> 'void (*)(sys_dnode_t *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x5575d016ada8 <col:3> 'void (sys_dnode_t *)' Function 0x5575d016a0f0 'sys_dlist_remove' 'void (sys_dnode_t *)'
| | |     `-ImplicitCastExpr 0x5575d016ae28 <col:20> 'sys_dnode_t *' <LValueToRValue>
| | |       `-DeclRefExpr 0x5575d016adc8 <col:20> 'sys_dnode_t *' lvalue Var 0x5575d016aad8 'node' 'sys_dnode_t *'
| | `-ReturnStmt 0x5575d016aeb0 <line:521:2, col:9>
| |   `-ImplicitCastExpr 0x5575d016ae98 <col:9> 'sys_dnode_t *' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d016ae78 <col:9> 'sys_dnode_t *' lvalue Var 0x5575d016aad8 'node' 'sys_dnode_t *'
| `-FullComment 0x5575d02b5510 <line:503:3, line:509:60>
|   |-ParagraphComment 0x5575d02b51f0 <line:503:3>
|   | `-TextComment 0x5575d02b51c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b5210 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5575d02b5270 <col:10, col:38>
|   |   `-TextComment 0x5575d02b5240 <col:10, col:38> Text=" get the first node in a list"
|   |-ParagraphComment 0x5575d02b52c0 <line:505:3, col:62>
|   | `-TextComment 0x5575d02b5290 <col:3, col:62> Text=" This and other sys_dlist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b5310 <line:507:3>
|   | `-TextComment 0x5575d02b52e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b5330 <col:4, col:51> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b53c0 <col:15, col:51>
|   |   `-TextComment 0x5575d02b5390 <col:15, col:51> Text=" the doubly-linked list to operate on"
|   |-ParagraphComment 0x5575d02b5430 <line:509:3>
|   | `-TextComment 0x5575d02b53e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b5450 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x5575d02b54b0 <col:11, col:60>
|       `-TextComment 0x5575d02b5480 <col:11, col:60> Text=" the first node in the list, NULL if list is empty"
|-RecordDecl 0x5575d016af10 </vagrant/ext/zephyros/zephyr/include/sys/rb.h:48:1, line:50:1> line:48:8 struct rbnode definition
| `-FieldDecl 0x5575d016b158 <line:49:2, col:27> col:17 children 'struct rbnode *[2]'
|-TypedefDecl 0x5575d016b450 <line:74:1, col:65> col:16 referenced rb_lessthan_t 'bool (*)(struct rbnode *, struct rbnode *)'
| |-PointerType 0x5575d016b3e0 'bool (*)(struct rbnode *, struct rbnode *)'
| | `-ParenType 0x5575d016b380 'bool (struct rbnode *, struct rbnode *)' sugar
| |   `-FunctionProtoType 0x5575d016b340 'bool (struct rbnode *, struct rbnode *)' cdecl
| |     |-BuiltinType 0x5575d007b500 'bool'
| |     |-PointerType 0x5575d016b050 'struct rbnode *'
| |     | `-ElaboratedType 0x5575d016afe0 'struct rbnode' sugar
| |     |   `-RecordType 0x5575d016af90 'struct rbnode'
| |     |     `-Record 0x5575d016af10 'rbnode'
| |     `-PointerType 0x5575d016b050 'struct rbnode *'
| |       `-ElaboratedType 0x5575d016afe0 'struct rbnode' sugar
| |         `-RecordType 0x5575d016af90 'struct rbnode'
| |           `-Record 0x5575d016af10 'rbnode'
| `-FullComment 0x5575d02b5870 <line:62:3, line:72:36>
|   |-ParagraphComment 0x5575d02b55b0 <line:62:3>
|   | `-TextComment 0x5575d02b5580 <col:3> Text=" "
|   |-VerbatimLineComment 0x5575d02b55d0 <col:4, col:26> Text=" rb_lessthan_t"
|   |-ParagraphComment 0x5575d02b5640 <line:63:3>
|   | `-TextComment 0x5575d02b5610 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b5660 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5575d02b56c0 <col:10, col:45>
|   |   `-TextComment 0x5575d02b5690 <col:10, col:45> Text=" Red/black tree comparison predicate"
|   |-ParagraphComment 0x5575d02b5730 <line:65:3, line:66:68>
|   | |-TextComment 0x5575d02b56e0 <line:65:3, col:69> Text=" Compares the two nodes and returns true if node A is strictly less"
|   | `-TextComment 0x5575d02b5700 <line:66:3, col:68> Text=" than B according to the tree's sorting criteria, false otherwise."
|   `-ParagraphComment 0x5575d02b5820 <line:68:3, line:72:36>
|     |-TextComment 0x5575d02b5750 <line:68:3, col:70> Text=" Note that during insert, the new node being inserted will always be"
|     |-TextComment 0x5575d02b5770 <line:69:3, col:68> Text=" "A", where "B" is the existing node within the tree against which"
|     |-TextComment 0x5575d02b5790 <line:70:3, col:64> Text=" it is being compared.  This trait can be used (with care!) to"
|     |-TextComment 0x5575d02b57b0 <line:71:3, col:70> Text=" implement "most/least recently added" semantics between nodes which"
|     `-TextComment 0x5575d02b57d0 <line:72:3, col:36> Text=" would otherwise compare as equal."
|-RecordDecl 0x5575d016b4a8 <line:76:1, line:84:1> line:76:8 struct rbtree definition
| |-FieldDecl 0x5575d016f7f0 <line:77:2, col:17> col:17 referenced root 'struct rbnode *'
| |-FieldDecl 0x5575d016f878 <line:78:2, col:16> col:16 lessthan_fn 'rb_lessthan_t':'bool (*)(struct rbnode *, struct rbnode *)'
| `-FieldDecl 0x5575d016f8e0 <line:79:2, col:6> col:6 max_depth 'int'
|-TypedefDecl 0x5575d016fb90 <line:86:1, col:61> col:16 referenced rb_visit_t 'void (*)(struct rbnode *, void *)'
| `-PointerType 0x5575d016fb20 'void (*)(struct rbnode *, void *)'
|   `-ParenType 0x5575d016fac0 'void (struct rbnode *, void *)' sugar
|     `-FunctionProtoType 0x5575d016fa80 'void (struct rbnode *, void *)' cdecl
|       |-BuiltinType 0x5575d007b4e0 'void'
|       |-PointerType 0x5575d016b050 'struct rbnode *'
|       | `-ElaboratedType 0x5575d016afe0 'struct rbnode' sugar
|       |   `-RecordType 0x5575d016af90 'struct rbnode'
|       |     `-Record 0x5575d016af10 'rbnode'
|       `-PointerType 0x5575d007bca0 'void *'
|         `-BuiltinType 0x5575d007b4e0 'void'
|-FunctionDecl 0x5575d016fdc8 <line:88:1, col:56> col:16 z_rb_child 'struct rbnode *(struct rbnode *, int)'
| |-ParmVarDecl 0x5575d016fc10 <col:27, col:42> col:42 node 'struct rbnode *'
| `-ParmVarDecl 0x5575d016fc90 <col:48, col:52> col:52 side 'int'
|-FunctionDecl 0x5575d016ffb8 <line:89:1, col:38> col:5 z_rb_is_black 'int (struct rbnode *)'
| `-ParmVarDecl 0x5575d016fea0 <col:19, col:34> col:34 node 'struct rbnode *'
|-FunctionDecl 0x5575d01702e0 <line:91:1, col:70> col:6 used z_rb_walk 'void (struct rbnode *, rb_visit_t, void *)'
| |-ParmVarDecl 0x5575d0170088 <col:16, col:31> col:31 node 'struct rbnode *'
| |-ParmVarDecl 0x5575d0170128 <col:37, col:48> col:48 visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| `-ParmVarDecl 0x5575d01701a8 <col:58, col:64> col:64 cookie 'void *'
|-FunctionDecl 0x5575d0170618 <line:93:1, col:61> col:16 used z_rb_get_minmax 'struct rbnode *(struct rbtree *, int)'
| |-ParmVarDecl 0x5575d0170468 <col:32, col:47> col:47 tree 'struct rbtree *'
| `-ParmVarDecl 0x5575d01704e8 <col:53, col:57> col:57 side 'int'
|-FunctionDecl 0x5575d0171100 <line:98:1, col:56> col:6 rb_insert 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x5575d0170720 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x5575d0170fe8 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x5575d02b59c0 <line:96:3, col:31>
|   |-ParagraphComment 0x5575d02b5910 <col:3>
|   | `-TextComment 0x5575d02b58e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b5930 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x5575d02b5990 <col:10, col:31>
|       `-TextComment 0x5575d02b5960 <col:10, col:31> Text=" Insert node into tree"
|-FunctionDecl 0x5575d0171328 <line:103:1, col:56> col:6 rb_remove 'void (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x5575d0171200 <col:16, col:31> col:31 tree 'struct rbtree *'
| |-ParmVarDecl 0x5575d0171290 <col:37, col:52> col:52 node 'struct rbnode *'
| `-FullComment 0x5575d02b5b10 <line:101:3, col:31>
|   |-ParagraphComment 0x5575d02b5a60 <col:3>
|   | `-TextComment 0x5575d02b5a30 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b5a80 <col:4, col:31> Name="brief"
|     `-ParagraphComment 0x5575d02b5ae0 <col:10, col:31>
|       `-TextComment 0x5575d02b5ab0 <col:10, col:31> Text=" Remove node from tree"
|-FunctionDecl 0x5575d0171558 <line:108:1, line:111:1> line:108:30 rb_get_min 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x5575d0171430 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x5575d0171758 <line:109:1, line:111:1>
| | `-ReturnStmt 0x5575d0171720 <line:110:2, col:32>
| |   `-CallExpr 0x5575d01716d8 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x5575d01716c0 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d0171600 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x5575d0170618 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x5575d0171708 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d0171620 <col:25> 'struct rbtree *' lvalue ParmVar 0x5575d0171430 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x5575d0171640 <col:31> 'int' 0
| `-FullComment 0x5575d02b5c60 <line:106:3, col:54>
|   |-ParagraphComment 0x5575d02b5bb0 <col:3>
|   | `-TextComment 0x5575d02b5b80 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b5bd0 <col:4, col:54> Name="brief"
|     `-ParagraphComment 0x5575d02b5c30 <col:10, col:54>
|       `-TextComment 0x5575d02b5c00 <col:10, col:54> Text=" Returns the lowest-sorted member of the tree"
|-FunctionDecl 0x5575d0171840 <line:116:1, line:119:1> line:116:30 rb_get_max 'struct rbnode *(struct rbtree *)' static inline
| |-ParmVarDecl 0x5575d0171798 <col:41, col:56> col:56 used tree 'struct rbtree *'
| |-CompoundStmt 0x5575d01719e8 <line:117:1, line:119:1>
| | `-ReturnStmt 0x5575d01719a8 <line:118:2, col:32>
| |   `-CallExpr 0x5575d0171960 <col:9, col:32> 'struct rbnode *'
| |     |-ImplicitCastExpr 0x5575d0171948 <col:9> 'struct rbnode *(*)(struct rbtree *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01718e8 <col:9> 'struct rbnode *(struct rbtree *, int)' Function 0x5575d0170618 'z_rb_get_minmax' 'struct rbnode *(struct rbtree *, int)'
| |     |-ImplicitCastExpr 0x5575d0171990 <col:25> 'struct rbtree *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d0171908 <col:25> 'struct rbtree *' lvalue ParmVar 0x5575d0171798 'tree' 'struct rbtree *'
| |     `-IntegerLiteral 0x5575d0171928 <col:31> 'int' 1
| `-FullComment 0x5575d02b5db0 <line:114:3, col:55>
|   |-ParagraphComment 0x5575d02b5d00 <col:3>
|   | `-TextComment 0x5575d02b5cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b5d20 <col:4, col:55> Name="brief"
|     `-ParagraphComment 0x5575d02b5d80 <col:10, col:55>
|       `-TextComment 0x5575d02b5d50 <col:10, col:55> Text=" Returns the highest-sorted member of the tree"
|-FunctionDecl 0x5575d0171bd0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/rb.h:130:58> col:6 rb_contains 'bool (struct rbtree *, struct rbnode *)'
| |-ParmVarDecl 0x5575d0171a28 <col:18, col:33> col:33 tree 'struct rbtree *'
| |-ParmVarDecl 0x5575d0171ab8 <col:39, col:54> col:54 node 'struct rbnode *'
| `-FullComment 0x5575d02b6000 <line:122:3, line:128:10>
|   |-ParagraphComment 0x5575d02b5e50 <line:122:3>
|   | `-TextComment 0x5575d02b5e20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b5e70 <col:4, col:60> Name="brief"
|   | `-ParagraphComment 0x5575d02b5ed0 <col:10, col:60>
|   |   `-TextComment 0x5575d02b5ea0 <col:10, col:60> Text=" Returns true if the given node is part of the tree"
|   `-ParagraphComment 0x5575d02b5fc0 <line:124:3, line:128:10>
|     |-TextComment 0x5575d02b5ef0 <line:124:3, col:66> Text=" Note that this does not internally dereference the node pointer"
|     |-TextComment 0x5575d02b5f10 <line:125:3, col:69> Text=" (though the tree's lessthan callback might!), it just tests it for"
|     |-TextComment 0x5575d02b5f30 <line:126:3, col:68> Text=" equality with items in the tree.  So it's feasible to use this to"
|     |-TextComment 0x5575d02b5f50 <line:127:3, col:66> Text=" implement a "set" construct by simply testing the pointer value"
|     `-TextComment 0x5575d02b5f70 <line:128:3, col:10> Text=" itself."
|-FunctionDecl 0x5575d0171f00 <line:141:1, line:145:1> line:141:20 rb_walk 'void (struct rbtree *, rb_visit_t, void *)' static inline
| |-ParmVarDecl 0x5575d0171cd0 <col:28, col:43> col:43 used tree 'struct rbtree *'
| |-ParmVarDecl 0x5575d0171d48 <col:49, col:60> col:60 used visit_fn 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |-ParmVarDecl 0x5575d0171dc8 <line:142:7, col:13> col:13 used cookie 'void *'
| |-CompoundStmt 0x5575d01723d8 <line:143:1, line:145:1>
| | `-CallExpr 0x5575d0172358 <line:144:2, col:40> 'void'
| |   |-ImplicitCastExpr 0x5575d0172340 <col:2> 'void (*)(struct rbnode *, rb_visit_t, void *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5575d0172210 <col:2> 'void (struct rbnode *, rb_visit_t, void *)' Function 0x5575d01702e0 'z_rb_walk' 'void (struct rbnode *, rb_visit_t, void *)'
| |   |-ImplicitCastExpr 0x5575d0172390 <col:12, col:18> 'struct rbnode *' <LValueToRValue>
| |   | `-MemberExpr 0x5575d0172268 <col:12, col:18> 'struct rbnode *' lvalue ->root 0x5575d016f7f0
| |   |   `-ImplicitCastExpr 0x5575d0172250 <col:12> 'struct rbtree *' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5575d0172230 <col:12> 'struct rbtree *' lvalue ParmVar 0x5575d0171cd0 'tree' 'struct rbtree *'
| |   |-ImplicitCastExpr 0x5575d01723a8 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' <LValueToRValue>
| |   | `-DeclRefExpr 0x5575d0172298 <col:24> 'rb_visit_t':'void (*)(struct rbnode *, void *)' lvalue ParmVar 0x5575d0171d48 'visit_fn' 'rb_visit_t':'void (*)(struct rbnode *, void *)'
| |   `-ImplicitCastExpr 0x5575d01723c0 <col:34> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d01722b8 <col:34> 'void *' lvalue ParmVar 0x5575d0171dc8 'cookie' 'void *'
| `-FullComment 0x5575d02b6220 <line:134:3, line:139:18>
|   |-ParagraphComment 0x5575d02b60a0 <line:134:3>
|   | `-TextComment 0x5575d02b6070 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b60c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5575d02b6120 <col:10, col:33>
|   |   `-TextComment 0x5575d02b60f0 <col:10, col:33> Text=" Walk/enumerate a rbtree"
|   `-ParagraphComment 0x5575d02b61e0 <line:136:3, line:139:18>
|     |-TextComment 0x5575d02b6140 <line:136:3, col:69> Text=" Very simple recursive enumeration.  Low code size, but requiring a"
|     |-TextComment 0x5575d02b6160 <line:137:3, col:70> Text=" separate function can be clumsy for the user and there is no way to"
|     |-TextComment 0x5575d02b6180 <line:138:3, col:65> Text=" break out of the loop early.  See RB_FOR_EACH for an iterative"
|     `-TextComment 0x5575d02b61a0 <line:139:3, col:18> Text=" implementation."
|-RecordDecl 0x5575d01723f0 <line:148:1, line:152:1> line:148:8 struct _rb_foreach definition
| |-FieldDecl 0x5575d0172528 <line:149:2, col:18> col:18 stack 'struct rbnode **'
| |-FieldDecl 0x5575d0172590 <line:150:2, col:8> col:8 is_left 'char *'
| `-FieldDecl 0x5575d01725f8 <line:151:2, col:6> col:6 top 'int'
|-FunctionDecl 0x5575d01728d8 <line:169:1, col:76> col:16 z_rb_foreach_next 'struct rbnode *(struct rbtree *, struct _rb_foreach *)'
| |-ParmVarDecl 0x5575d0172670 <col:34, col:49> col:49 tree 'struct rbtree *'
| `-ParmVarDecl 0x5575d01727a8 <col:55, col:75> col:75 f 'struct _rb_foreach *'
|-RecordDecl 0x5575d0172a48 </vagrant/ext/zephyros/zephyr/include/sched_priq.h:32:1, col:8> col:8 struct k_thread
|-FunctionDecl 0x5575d0172cc8 <line:34:1, col:50> col:18 z_priq_dumb_best 'struct k_thread *(sys_dlist_t *)'
| `-ParmVarDecl 0x5575d0172b08 <col:35, col:48> col:48 pq 'sys_dlist_t *'
|-FunctionDecl 0x5575d0172f30 <line:35:1, col:65> col:6 z_priq_dumb_remove 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x5575d0172d80 <col:25, col:38> col:38 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x5575d0172e10 <col:42, col:59> col:59 thread 'struct k_thread *'
|-FunctionDecl 0x5575d0173118 <line:36:1, col:62> col:6 z_priq_dumb_add 'void (sys_dlist_t *, struct k_thread *)'
| |-ParmVarDecl 0x5575d0172ff0 <col:22, col:35> col:35 pq 'sys_dlist_t *'
| `-ParmVarDecl 0x5575d0173080 <col:39, col:56> col:56 thread 'struct k_thread *'
|-RecordDecl 0x5575d01743d0 <line:38:1, line:41:1> line:38:8 struct _priq_rb definition
| |-FieldDecl 0x5575d0174498 <line:39:2, col:16> col:16 tree 'struct rbtree':'struct rbtree'
| `-FieldDecl 0x5575d0174500 <line:40:2, col:6> col:6 next_order_key 'int'
|-FunctionDecl 0x5575d0174820 <line:43:1, col:64> col:6 z_priq_rb_add 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x5575d0174678 <col:20, col:37> col:37 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x5575d0174708 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x5575d0174a20 <line:44:1, col:67> col:6 z_priq_rb_remove 'void (struct _priq_rb *, struct k_thread *)'
| |-ParmVarDecl 0x5575d01748f8 <col:23, col:40> col:40 pq 'struct _priq_rb *'
| `-ParmVarDecl 0x5575d0174988 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x5575d0174c18 <line:45:1, col:52> col:18 z_priq_rb_best 'struct k_thread *(struct _priq_rb *)'
| `-ParmVarDecl 0x5575d0174af8 <col:33, col:50> col:50 pq 'struct _priq_rb *'
|-RecordDecl 0x5575d0174cc0 <line:54:1, line:57:1> line:54:8 struct _priq_mq definition
| |-FieldDecl 0x5575d0174ef0 <line:55:2, col:23> col:14 queues 'sys_dlist_t [32]'
| `-FieldDecl 0x5575d0174f58 <line:56:2, col:15> col:15 bitmask 'unsigned int'
|-FunctionDecl 0x5575d0175220 <line:59:1, col:64> col:6 z_priq_mq_add 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x5575d0175078 <col:20, col:37> col:37 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x5575d0175108 <col:41, col:58> col:58 thread 'struct k_thread *'
|-FunctionDecl 0x5575d0175478 <line:60:1, col:67> col:6 z_priq_mq_remove 'void (struct _priq_mq *, struct k_thread *)'
| |-ParmVarDecl 0x5575d01752f8 <col:23, col:40> col:40 pq 'struct _priq_mq *'
| `-ParmVarDecl 0x5575d01753e0 <col:44, col:61> col:61 thread 'struct k_thread *'
|-FunctionDecl 0x5575d0175678 <line:61:1, col:52> col:18 z_priq_mq_best 'struct k_thread *(struct _priq_mq *)'
| `-ParmVarDecl 0x5575d0175550 <col:33, col:50> col:50 pq 'struct _priq_mq *'
|-RecordDecl 0x5575d0175748 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:29:1, line:31:1> line:29:8 struct _snode definition
| `-FieldDecl 0x5575d01758c8 <line:30:2, col:17> col:17 referenced next 'struct _snode *'
|-TypedefDecl 0x5575d0175938 <line:33:1, col:23> col:23 referenced sys_snode_t 'struct _snode':'struct _snode'
| `-ElaboratedType 0x5575d0175800 'struct _snode' sugar
|   `-RecordType 0x5575d01757d0 'struct _snode'
|     `-Record 0x5575d0175748 '_snode'
|-RecordDecl 0x5575d0175990 <line:35:1, line:38:1> line:35:8 struct _slist definition
| |-FieldDecl 0x5575d0175ab0 <line:36:2, col:15> col:15 referenced head 'sys_snode_t *'
| `-FieldDecl 0x5575d0175b10 <line:37:2, col:15> col:15 referenced tail 'sys_snode_t *'
|-TypedefDecl 0x5575d0175bb8 <line:40:1, col:23> col:23 referenced sys_slist_t 'struct _slist':'struct _slist'
| `-ElaboratedType 0x5575d0175b60 'struct _slist' sugar
|   `-RecordType 0x5575d0175a10 'struct _slist'
|     `-Record 0x5575d0175990 '_slist'
|-FunctionDecl 0x5575d0175ee0 <line:190:1, line:194:1> line:190:20 used sys_slist_init 'void (sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d0175dd0 <col:35, col:48> col:48 used list 'sys_slist_t *'
| |-CompoundStmt 0x5575d01761c8 <line:191:1, line:194:1>
| | |-BinaryOperator 0x5575d0176088 <line:192:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| | | |-MemberExpr 0x5575d0175fc0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:192:2, col:8> 'sys_snode_t *' lvalue ->head 0x5575d0175ab0
| | | | `-ImplicitCastExpr 0x5575d0175fa8 <col:2> 'sys_slist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5575d0175f88 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5575d0175dd0 'list' 'sys_slist_t *'
| | | `-ImplicitCastExpr 0x5575d0176070 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| | |   `-ParenExpr 0x5575d0176050 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x5575d0176028 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5575d0175ff0 <col:23> 'int' 0
| | `-BinaryOperator 0x5575d01761a8 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *' '='
| |   |-MemberExpr 0x5575d01760e0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:193:2, col:8> 'sys_snode_t *' lvalue ->tail 0x5575d0175b10
| |   | `-ImplicitCastExpr 0x5575d01760c8 <col:2> 'sys_slist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5575d01760a8 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5575d0175dd0 'list' 'sys_slist_t *'
| |   `-ImplicitCastExpr 0x5575d0176190 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
| |     `-ParenExpr 0x5575d0176170 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x5575d0176148 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x5575d0176110 <col:23> 'int' 0
| `-FullComment 0x5575d02b6480 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:186:3, line:188:50>
|   |-ParagraphComment 0x5575d02b62c0 <line:186:3>
|   | `-TextComment 0x5575d02b6290 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b62e0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5575d02b6340 <col:10, col:27>
|   |   `-TextComment 0x5575d02b6310 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x5575d02b6390 <line:188:3>
|   | `-TextComment 0x5575d02b6360 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d02b63b0 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x5575d02b6440 <col:15, col:50>
|       `-TextComment 0x5575d02b6410 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x5575d0176300 <line:198:1, line:201:1> line:198:28 used z_snode_next_peek 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d01761f8 <col:46, col:59> col:59 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d018b0f8 <line:199:1, line:201:1>
|   `-ReturnStmt 0x5575d018b0e8 <line:200:2, col:15>
|     `-ImplicitCastExpr 0x5575d018b0d0 <col:9, col:15> 'struct _snode *' <LValueToRValue>
|       `-MemberExpr 0x5575d018b0a0 <col:9, col:15> 'struct _snode *' lvalue ->next 0x5575d01758c8
|         `-ImplicitCastExpr 0x5575d01763c8 <col:9> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5575d01763a8 <col:9> 'sys_snode_t *' lvalue ParmVar 0x5575d01761f8 'node' 'sys_snode_t *'
|-FunctionDecl 0x5575d018b2b0 <line:203:1, line:206:1> line:203:20 used z_snode_next_set 'void (sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018b120 <col:37, col:50> col:50 used parent 'sys_snode_t *'
| |-ParmVarDecl 0x5575d018b198 <col:58, col:71> col:71 used child 'sys_snode_t *'
| `-CompoundStmt 0x5575d018b420 <line:204:1, line:206:1>
|   `-BinaryOperator 0x5575d018b400 <line:205:2, col:17> 'struct _snode *' '='
|     |-MemberExpr 0x5575d018b398 <col:2, col:10> 'struct _snode *' lvalue ->next 0x5575d01758c8
|     | `-ImplicitCastExpr 0x5575d018b380 <col:2> 'sys_snode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575d018b360 <col:2> 'sys_snode_t *' lvalue ParmVar 0x5575d018b120 'parent' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x5575d018b3e8 <col:17> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d018b3c8 <col:17> 'sys_snode_t *' lvalue ParmVar 0x5575d018b198 'child' 'sys_snode_t *'
|-FunctionDecl 0x5575d018b5e0 <line:208:1, line:211:1> line:208:20 used z_slist_head_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018b448 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d018b4c0 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d018b750 <line:209:1, line:211:1>
|   `-BinaryOperator 0x5575d018b730 <line:210:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x5575d018b6c8 <col:2, col:8> 'sys_snode_t *' lvalue ->head 0x5575d0175ab0
|     | `-ImplicitCastExpr 0x5575d018b6b0 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575d018b690 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5575d018b448 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x5575d018b718 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d018b6f8 <col:15> 'sys_snode_t *' lvalue ParmVar 0x5575d018b4c0 'node' 'sys_snode_t *'
|-FunctionDecl 0x5575d018b888 <line:213:1, line:216:1> line:213:20 used z_slist_tail_set 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018b778 <col:37, col:50> col:50 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d018b7f0 <col:56, col:69> col:69 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d018ba28 <line:214:1, line:216:1>
|   `-BinaryOperator 0x5575d018b9d8 <line:215:2, col:15> 'sys_snode_t *' '='
|     |-MemberExpr 0x5575d018b970 <col:2, col:8> 'sys_snode_t *' lvalue ->tail 0x5575d0175b10
|     | `-ImplicitCastExpr 0x5575d018b958 <col:2> 'sys_slist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575d018b938 <col:2> 'sys_slist_t *' lvalue ParmVar 0x5575d018b778 'list' 'sys_slist_t *'
|     `-ImplicitCastExpr 0x5575d018b9c0 <col:15> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d018b9a0 <col:15> 'sys_snode_t *' lvalue ParmVar 0x5575d018b7f0 'node' 'sys_snode_t *'
|-FunctionDecl 0x5575d018bb60 <line:225:1, line:228:1> line:225:28 used sys_slist_peek_head 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d018ba50 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x5575d018bcc8 <line:226:1, line:228:1>
| | `-ReturnStmt 0x5575d018bc88 <line:227:2, col:15>
| |   `-ImplicitCastExpr 0x5575d018bc70 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5575d018bc40 <col:9, col:15> 'sys_snode_t *' lvalue ->head 0x5575d0175ab0
| |       `-ImplicitCastExpr 0x5575d018bc28 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d018bc08 <col:9> 'sys_slist_t *' lvalue ParmVar 0x5575d018ba50 'list' 'sys_slist_t *'
| `-FullComment 0x5575d02b67c0 <line:219:3, line:223:68>
|   |-ParagraphComment 0x5575d02b6520 <line:219:3>
|   | `-TextComment 0x5575d02b64f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b6540 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02b65a0 <col:10, col:43>
|   |   `-TextComment 0x5575d02b6570 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x5575d02b65f0 <line:221:3>
|   | `-TextComment 0x5575d02b65c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b6610 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b66a0 <col:15, col:62>
|   |   `-TextComment 0x5575d02b6670 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x5575d02b66f0 <line:223:3>
|   | `-TextComment 0x5575d02b66c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b6710 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x5575d02b6770 <col:11, col:68>
|       `-TextComment 0x5575d02b6740 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x5575d018bd80 <line:237:1, line:240:1> line:237:28 used sys_slist_peek_tail 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d018bcf0 <col:48, col:61> col:61 used list 'sys_slist_t *'
| |-CompoundStmt 0x5575d018bee8 <line:238:1, line:240:1>
| | `-ReturnStmt 0x5575d018bea8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x5575d018be90 <col:9, col:15> 'sys_snode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5575d018be60 <col:9, col:15> 'sys_snode_t *' lvalue ->tail 0x5575d0175b10
| |       `-ImplicitCastExpr 0x5575d018be48 <col:9> 'sys_slist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d018be28 <col:9> 'sys_slist_t *' lvalue ParmVar 0x5575d018bcf0 'list' 'sys_slist_t *'
| `-FullComment 0x5575d02b6b00 <line:231:3, line:235:67>
|   |-ParagraphComment 0x5575d02b6860 <line:231:3>
|   | `-TextComment 0x5575d02b6830 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b6880 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d02b68e0 <col:10, col:42>
|   |   `-TextComment 0x5575d02b68b0 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x5575d02b6930 <line:233:3>
|   | `-TextComment 0x5575d02b6900 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b6950 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b69e0 <col:15, col:61>
|   |   `-TextComment 0x5575d02b69b0 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x5575d02b6a30 <line:235:3>
|   | `-TextComment 0x5575d02b6a00 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b6a50 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5575d02b6ab0 <col:11, col:67>
|       `-TextComment 0x5575d02b6a80 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x5575d018c0b0 <line:253:1, col:56> col:20 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d018bf10 <col:39, col:52> col:52 list 'sys_slist_t *'
| `-FullComment 0x5575d02b6e40 <line:247:3, line:251:57>
|   |-ParagraphComment 0x5575d02b6ba0 <line:247:3>
|   | `-TextComment 0x5575d02b6b70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b6bc0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02b6c20 <col:10, col:41>
|   |   `-TextComment 0x5575d02b6bf0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x5575d02b6c70 <line:249:3>
|   | `-TextComment 0x5575d02b6c40 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b6c90 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b6d20 <col:15, col:44>
|   |   `-TextComment 0x5575d02b6cf0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x5575d02b6d70 <line:251:3>
|   | `-TextComment 0x5575d02b6d40 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b6d90 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5575d02b6df0 <col:11, col:57>
|       `-TextComment 0x5575d02b6dc0 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x5575d018c1f8 prev 0x5575d018c0b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:3:1 used sys_slist_is_empty 'bool (sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d018c168 <line:5:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_slist_t *'
| `-CompoundStmt 0x5575d018c4c8 <line:60:2, line:62:2>
|   `-ReturnStmt 0x5575d018c488 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x5575d018c470 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5575d018c450 <col:10, col:54> 'int'
|         `-BinaryOperator 0x5575d018c430 <<scratch space>:7:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x5575d018c358 <<scratch space>:7:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_snode_t *'
|           | |-ImplicitCastExpr 0x5575d018c340 <<scratch space>:7:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x5575d018c2a0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bb60 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           | `-ImplicitCastExpr 0x5575d018c380 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_slist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x5575d018c2c0 <col:41> 'sys_slist_t *' lvalue ParmVar 0x5575d018c168 'list' 'sys_slist_t *'
|           `-ImplicitCastExpr 0x5575d018c418 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|             `-ParenExpr 0x5575d018c3f8 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x5575d018c3d0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x5575d018c398 <col:23> 'int' 0
|-FunctionDecl 0x5575d018c580 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:266:1, col:74> col:28 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018c4f0 <col:57, col:70> col:70 node 'sys_snode_t *'
| `-FullComment 0x5575d02b71e0 <line:258:3, line:264:55>
|   |-ParagraphComment 0x5575d02b6ee0 <line:258:3>
|   | `-TextComment 0x5575d02b6eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b6f00 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5575d02b6f60 <col:10, col:64>
|   |   `-TextComment 0x5575d02b6f30 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x5575d02b6fb0 <line:260:3, col:69>
|   | `-TextComment 0x5575d02b6f80 <col:3, col:69> Text=" Faster then sys_slist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5575d02b7000 <line:262:3>
|   | `-TextComment 0x5575d02b6fd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b7020 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b70b0 <col:15, col:64>
|   |   `-TextComment 0x5575d02b7080 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5575d02b7100 <line:264:3>
|   | `-TextComment 0x5575d02b70d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b7120 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5575d02b7180 <col:11, col:55>
|       `-TextComment 0x5575d02b7150 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5575d018c6c8 prev 0x5575d018c580 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:11:1 used sys_slist_peek_next_no_check 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018c638 <line:13:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d018c8a8 <line:67:2, line:69:2>
|   `-ReturnStmt 0x5575d018c868 <line:68:3, col:42>
|     `-CallExpr 0x5575d018c828 <<scratch space>:15:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x5575d018c810 <<scratch space>:15:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d018c770 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5575d0176300 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       `-ImplicitCastExpr 0x5575d018c850 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_snode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d018c790 <col:38> 'sys_snode_t *' lvalue ParmVar 0x5575d018c638 'node' 'sys_snode_t *'
|-FunctionDecl 0x5575d018c960 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:277:1, col:65> col:28 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018c8d0 <col:48, col:61> col:61 node 'sys_snode_t *'
| `-FullComment 0x5575d02b8550 <line:271:3, line:275:55>
|   |-ParagraphComment 0x5575d02b7280 <line:271:3>
|   | `-TextComment 0x5575d02b7250 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b72a0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5575d02b7300 <col:10, col:46>
|   |   `-TextComment 0x5575d02b72d0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x5575d02b7350 <line:273:3>
|   | `-TextComment 0x5575d02b7320 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b7370 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b7400 <col:15, col:64>
|   |   `-TextComment 0x5575d02b73d0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5575d02b8480 <line:275:3>
|   | `-TextComment 0x5575d02b8450 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b84a0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5575d02b8500 <col:11, col:55>
|       `-TextComment 0x5575d02b84d0 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5575d018caa8 prev 0x5575d018c960 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:19:1 used sys_slist_peek_next 'sys_snode_t *(sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018ca18 <line:21:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d018cdd8 <line:74:2, line:78:2>
|   `-ReturnStmt 0x5575d018cda0 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x5575d018cd70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_snode_t *'
|       |-BinaryOperator 0x5575d018cc20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x5575d018cbf0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_snode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x5575d018cb50 <col:10> 'sys_snode_t *' lvalue ParmVar 0x5575d018ca18 'node' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x5575d018cc08 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x5575d018cbd0 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5575d018cba8 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5575d018cb70 <col:23> 'int' 0
|       |-CallExpr 0x5575d018cc98 <<scratch space>:23:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_snode_t *'
|       | |-ImplicitCastExpr 0x5575d018cc80 <<scratch space>:23:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5575d018cc40 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5575d018c6c8 'sys_slist_peek_next_no_check' 'sys_snode_t *(sys_snode_t *)'
|       | `-ImplicitCastExpr 0x5575d018ccc0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5575d018cc60 <col:43> 'sys_snode_t *' lvalue ParmVar 0x5575d018ca18 'node' 'sys_snode_t *'
|       `-ImplicitCastExpr 0x5575d018cd58 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|         `-ParenExpr 0x5575d018cd38 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x5575d018cd10 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x5575d018ccd8 <col:23> 'int' 0
|-FunctionDecl 0x5575d018cf10 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:289:1, line:290:27> line:289:20 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018ce00 <col:38, col:51> col:51 list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d018ce78 <line:290:10, col:23> col:23 node 'sys_snode_t *'
| `-FullComment 0x5575d02b88e0 <line:282:3, line:287:47>
|   |-ParagraphComment 0x5575d02b85f0 <line:282:3>
|   | `-TextComment 0x5575d02b85c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b8610 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d02b8670 <col:10, col:42>
|   |   `-TextComment 0x5575d02b8640 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x5575d02b86c0 <line:284:3, col:62>
|   | `-TextComment 0x5575d02b8690 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b8710 <line:286:3>
|   | `-TextComment 0x5575d02b86e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b8730 <col:4, line:287:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b87e0 <line:286:15, line:287:3>
|   |   |-TextComment 0x5575d02b8790 <line:286:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02b87b0 <line:287:3> Text=" "
|   `-ParamCommandComment 0x5575d02b8800 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5575d02b8890 <col:15, col:47>
|       `-TextComment 0x5575d02b8860 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x5575d018ee00 prev 0x5575d018cf10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:25:1 used sys_slist_prepend 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018cfd0 <line:27:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d018d048 <<scratch space>:29:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d018f468 <line:84:2, line:93:2>
|   |-CallExpr 0x5575d018f008 <<scratch space>:31:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x5575d018eff0 <<scratch space>:31:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d018eeb0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5575d018b2b0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5575d018f038 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d018eed0 <col:30> 'sys_snode_t *' lvalue ParmVar 0x5575d018d048 'node' 'sys_snode_t *'
|   | `-CallExpr 0x5575d018ef48 <<scratch space>:33:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5575d018ef30 <<scratch space>:33:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5575d018eef0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bb60 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x5575d018ef70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d018ef10 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5575d018cfd0 'list' 'sys_slist_t *'
|   |-CallExpr 0x5575d018f128 <<scratch space>:35:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x5575d018f110 <<scratch space>:35:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d018f050 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b5e0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5575d018f158 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d018f070 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5575d018cfd0 'list' 'sys_slist_t *'
|   | `-ImplicitCastExpr 0x5575d018f170 <col:36> 'sys_snode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5575d018f090 <col:36> 'sys_snode_t *' lvalue ParmVar 0x5575d018d048 'node' 'sys_snode_t *'
|   `-IfStmt 0x5575d018f428 <line:89:3, line:92:3>
|     |-BinaryOperator 0x5575d018f2b8 <<scratch space>:37:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5575d018f1e0 <<scratch space>:37:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x5575d018f1c8 <<scratch space>:37:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5575d018f188 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bd80 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x5575d018f208 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5575d018f1a8 <col:37> 'sys_slist_t *' lvalue ParmVar 0x5575d018cfd0 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x5575d018f2a0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x5575d018f280 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5575d018f258 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5575d018f220 <col:23> 'int' 0
|     `-CompoundStmt 0x5575d018f410 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|       `-CallExpr 0x5575d018f3c8 <<scratch space>:39:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|         |-ImplicitCastExpr 0x5575d018f3b0 <<scratch space>:39:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575d018f2d8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b888 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x5575d018f3f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5575d018f2f8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5575d018cfd0 'list' 'sys_slist_t *'
|         `-CallExpr 0x5575d018f370 <<scratch space>:41:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_snode_t *'
|           |-ImplicitCastExpr 0x5575d018f358 <<scratch space>:41:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5575d018f318 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bb60 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|           `-ImplicitCastExpr 0x5575d018f398 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_slist_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5575d018f338 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5575d018cfd0 'list' 'sys_slist_t *'
|-FunctionDecl 0x5575d018f5b0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:302:1, line:303:26> line:302:20 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018f4a0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d018f518 <line:303:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5575d02b8c70 <line:295:3, line:300:46>
|   |-ParagraphComment 0x5575d02b8980 <line:295:3>
|   | `-TextComment 0x5575d02b8950 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b89a0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02b8a00 <col:10, col:41>
|   |   `-TextComment 0x5575d02b89d0 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x5575d02b8a50 <line:297:3, col:62>
|   | `-TextComment 0x5575d02b8a20 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b8aa0 <line:299:3>
|   | `-TextComment 0x5575d02b8a70 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b8ac0 <col:4, line:300:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b8b70 <line:299:15, line:300:3>
|   |   |-TextComment 0x5575d02b8b20 <line:299:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02b8b40 <line:300:3> Text=" "
|   `-ParamCommandComment 0x5575d02b8b90 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5575d02b8c20 <col:15, col:46>
|       `-TextComment 0x5575d02b8bf0 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x5575d018f780 prev 0x5575d018f5b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:43:1 used sys_slist_append 'void (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d018f670 <line:45:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d018f6e8 <<scratch space>:47:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d018ff28 <line:99:2, line:111:2>
|   |-CallExpr 0x5575d018f908 <<scratch space>:49:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x5575d018f8f0 <<scratch space>:49:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d018f830 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5575d018b2b0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5575d018f938 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_snode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d018f850 <col:30> 'sys_snode_t *' lvalue ParmVar 0x5575d018f6e8 'node' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x5575d018f950 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |   `-ParenExpr 0x5575d018f8d0 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x5575d018f8a8 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x5575d018f870 <col:23> 'int' 0
|   `-IfStmt 0x5575d018fed8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3> has_else
|     |-BinaryOperator 0x5575d018fa98 <<scratch space>:51:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5575d018f9c0 <<scratch space>:51:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_snode_t *'
|     | | |-ImplicitCastExpr 0x5575d018f9a8 <<scratch space>:51:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5575d018f968 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bd80 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|     | | `-ImplicitCastExpr 0x5575d018f9e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_slist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5575d018f988 <col:37> 'sys_slist_t *' lvalue ParmVar 0x5575d018f670 'list' 'sys_slist_t *'
|     | `-ImplicitCastExpr 0x5575d018fa80 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x5575d018fa60 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5575d018fa38 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5575d018fa00 <col:23> 'int' 0
|     |-CompoundStmt 0x5575d018fc68 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x5575d018fb30 <<scratch space>:53:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x5575d018fb18 <<scratch space>:53:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5575d018fab8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b888 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     | | |-ImplicitCastExpr 0x5575d018fb60 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_slist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5575d018fad8 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5575d018f670 'list' 'sys_slist_t *'
|     | | `-ImplicitCastExpr 0x5575d018fb78 <col:37> 'sys_snode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5575d018faf8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5575d018f6e8 'node' 'sys_snode_t *'
|     | `-CallExpr 0x5575d018fc08 <<scratch space>:55:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x5575d018fbf0 <<scratch space>:55:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5575d018fb90 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b5e0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x5575d018fc38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5575d018fbb0 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5575d018f670 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x5575d018fc50 <col:37> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5575d018fbd0 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5575d018f6e8 'node' 'sys_snode_t *'
|     `-CompoundStmt 0x5575d018feb8 <line:105:10, line:110:3>
|       |-CallExpr 0x5575d018fd78 <<scratch space>:57:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x5575d018fd60 <<scratch space>:57:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5575d018fc88 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5575d018b2b0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|       | |-CallExpr 0x5575d018fd00 <line:59:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x5575d018fce8 <<scratch space>:59:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5575d018fca8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bd80 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|       | | `-ImplicitCastExpr 0x5575d018fd28 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_slist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5575d018fcc8 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5575d018f670 'list' 'sys_slist_t *'
|       | `-ImplicitCastExpr 0x5575d018fda8 <line:108:5> 'sys_snode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5575d018fd40 <col:5> 'sys_snode_t *' lvalue ParmVar 0x5575d018f6e8 'node' 'sys_snode_t *'
|       `-CallExpr 0x5575d018fe58 <<scratch space>:61:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x5575d018fe40 <<scratch space>:61:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575d018fde0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b888 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|         |-ImplicitCastExpr 0x5575d018fe88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_slist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5575d018fe00 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5575d018f670 'list' 'sys_slist_t *'
|         `-ImplicitCastExpr 0x5575d018fea0 <col:37> 'sys_snode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5575d018fe20 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5575d018f6e8 'node' 'sys_snode_t *'
|-FunctionDecl 0x5575d0190190 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:320:1, line:321:29> line:320:20 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5575d018ff58 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d018ffd8 <line:321:7, col:13> col:13 head 'void *'
| |-ParmVarDecl 0x5575d0190058 <col:19, col:25> col:25 tail 'void *'
| `-FullComment 0x5575d02b91d0 <line:308:3, line:318:66>
|   |-ParagraphComment 0x5575d02b8d10 <line:308:3>
|   | `-TextComment 0x5575d02b8ce0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b8d30 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02b8d90 <col:10, col:41>
|   |   `-TextComment 0x5575d02b8d60 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x5575d02b8e80 <line:310:3, line:312:62>
|   | |-TextComment 0x5575d02b8db0 <line:310:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x5575d02b8dd0 <line:311:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x5575d02b8e20 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x5575d02b8e40 <line:312:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b8ed0 <line:314:3, col:48>
|   | `-TextComment 0x5575d02b8ea0 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x5575d02b8f20 <line:316:3>
|   | `-TextComment 0x5575d02b8ef0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b8f40 <col:4, line:317:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b8ff0 <line:316:15, line:317:3>
|   |   |-TextComment 0x5575d02b8fa0 <line:316:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02b8fc0 <line:317:3> Text=" "
|   |-ParamCommandComment 0x5575d02b9010 <col:4, line:318:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b90c0 <line:317:15, line:318:3>
|   |   |-TextComment 0x5575d02b9070 <line:317:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x5575d02b9090 <line:318:3> Text=" "
|   `-ParamCommandComment 0x5575d02b90e0 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x5575d02b9170 <col:15, col:66>
|       `-TextComment 0x5575d02b9140 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x5575d01903f8 prev 0x5575d0190190 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:63:1 used sys_slist_append_list 'void (sys_slist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5575d0190258 <line:65:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d01902d8 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x5575d0190358 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x5575d0190a18 <col:31, line:127:42>
|   |-IfStmt 0x5575d01908b0 <line:118:2, line:125:2> has_else
|   | |-BinaryOperator 0x5575d01905e0 <<scratch space>:67:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x5575d0190508 <<scratch space>:67:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x5575d01904f0 <<scratch space>:67:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5575d01904b0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bd80 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x5575d0190530 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5575d01904d0 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5575d0190258 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x5575d01905c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x5575d01905a8 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5575d0190580 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5575d0190548 <col:23> 'int' 0
|   | |-CompoundStmt 0x5575d0190710 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x5575d01906c8 <<scratch space>:69:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x5575d01906b0 <<scratch space>:69:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5575d0190600 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b5e0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |   |-ImplicitCastExpr 0x5575d01906f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_slist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5575d0190620 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5575d0190258 'list' 'sys_slist_t *'
|   | |   `-CStyleCastExpr 0x5575d0190688 <line:120:6, col:31> 'sys_snode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x5575d0190670 <col:31> 'void *' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x5575d0190640 <col:31> 'void *' lvalue ParmVar 0x5575d01902d8 'head' 'void *'
|   | `-CompoundStmt 0x5575d0190898 <line:121:9, line:125:2>
|   |   `-CallExpr 0x5575d0190868 <<scratch space>:73:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x5575d0190850 <<scratch space>:73:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575d0190728 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5575d018b2b0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |     |-CallExpr 0x5575d01907a0 <line:75:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_snode_t *'
|   |     | |-ImplicitCastExpr 0x5575d0190788 <<scratch space>:75:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5575d0190748 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bd80 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | `-ImplicitCastExpr 0x5575d01907c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_slist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5575d0190768 <col:34> 'sys_slist_t *' lvalue ParmVar 0x5575d0190258 'list' 'sys_slist_t *'
|   |     `-CStyleCastExpr 0x5575d0190828 <line:124:4, col:29> 'sys_snode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x5575d0190810 <col:29> 'void *' <LValueToRValue> part_of_explicit_cast
|   |         `-DeclRefExpr 0x5575d01907e0 <col:29> 'void *' lvalue ParmVar 0x5575d01902d8 'head' 'void *'
|   `-CallExpr 0x5575d01909a0 <<scratch space>:79:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x5575d0190988 <<scratch space>:79:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d01908d8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b888 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x5575d01909d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_slist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d01908f8 <col:29> 'sys_slist_t *' lvalue ParmVar 0x5575d0190258 'list' 'sys_slist_t *'
|     `-CStyleCastExpr 0x5575d0190960 <line:127:10, col:35> 'sys_snode_t *' <BitCast>
|       `-ImplicitCastExpr 0x5575d0190948 <col:35> 'void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5575d0190918 <col:35> 'void *' lvalue ParmVar 0x5575d0190358 'tail' 'void *'
|-FunctionDecl 0x5575d0190be0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:334:1, line:335:34> line:334:20 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d0190a48 <col:42, col:55> col:55 list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d0190ac0 <line:335:7, col:20> col:20 list_to_append 'sys_slist_t *'
| `-FullComment 0x5575d02b9580 <line:326:3, line:332:57>
|   |-ParagraphComment 0x5575d02b9270 <line:326:3>
|   | `-TextComment 0x5575d02b9240 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b9290 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5575d02b92f0 <col:10, col:65>
|   |   `-TextComment 0x5575d02b92c0 <col:10, col:65> Text=" merge two slists, appending the second one to the first"
|   |-ParagraphComment 0x5575d02b9360 <line:328:3, line:329:62>
|   | |-TextComment 0x5575d02b9310 <line:328:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x5575d02b9330 <line:329:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b93b0 <line:331:3>
|   | `-TextComment 0x5575d02b9380 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b93d0 <col:4, line:332:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b9480 <line:331:15, line:332:3>
|   |   |-TextComment 0x5575d02b9430 <line:331:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02b9450 <line:332:3> Text=" "
|   `-ParamCommandComment 0x5575d02b94a0 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x5575d02b9530 <col:25, col:57>
|       `-TextComment 0x5575d02b9500 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x5575d0191e00 prev 0x5575d0190be0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:84:1 sys_slist_merge_slist 'void (sys_slist_t *, sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d0190ca0 <line:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d0190d18 <<scratch space>:88:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_slist_t *'
| `-CompoundStmt 0x5575d0192458 <line:135:2, line:141:2>
|   |-DeclStmt 0x5575d0191fb8 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x5575d0191ec0 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_snode_t *'
|   | `-VarDecl 0x5575d0191f38 <<scratch space>:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_snode_t *'
|   |-BinaryOperator 0x5575d0192088 <line:137:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x5575d0191fd0 <col:3> 'sys_snode_t *' lvalue Var 0x5575d0191ec0 'head' 'sys_snode_t *'
|   | `-CallExpr 0x5575d0192048 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5575d0192030 <<scratch space>:92:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5575d0191ff0 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bb60 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x5575d0192070 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d0192010 <col:40> 'sys_slist_t *' lvalue ParmVar 0x5575d0190d18 'list_to_append' 'sys_slist_t *'
|   |-BinaryOperator 0x5575d0192160 <line:138:3, col:54> 'sys_snode_t *' '='
|   | |-DeclRefExpr 0x5575d01920a8 <col:3> 'sys_snode_t *' lvalue Var 0x5575d0191f38 'tail' 'sys_snode_t *'
|   | `-CallExpr 0x5575d0192120 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5575d0192108 <<scratch space>:94:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5575d01920c8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bd80 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |   `-ImplicitCastExpr 0x5575d0192148 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_slist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d01920e8 <col:40> 'sys_slist_t *' lvalue ParmVar 0x5575d0190d18 'list_to_append' 'sys_slist_t *'
|   |-CallExpr 0x5575d0192278 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x5575d0192260 <<scratch space>:96:1> 'void (*)(sys_slist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d0192180 <col:1> 'void (sys_slist_t *, void *, void *)' Function 0x5575d01903f8 'sys_slist_append_list' 'void (sys_slist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x5575d01922b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d01921a0 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5575d0190ca0 'list' 'sys_slist_t *'
|   | |-ImplicitCastExpr 0x5575d01922e0 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x5575d01922c8 <col:41> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5575d01921c0 <col:41> 'sys_snode_t *' lvalue Var 0x5575d0191ec0 'head' 'sys_snode_t *'
|   | `-ImplicitCastExpr 0x5575d0192310 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x5575d01922f8 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d01921e0 <col:47> 'sys_snode_t *' lvalue Var 0x5575d0191f38 'tail' 'sys_snode_t *'
|   `-CallExpr 0x5575d01923e8 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x5575d01923d0 <<scratch space>:98:1> 'void (*)(sys_slist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0192328 <col:1> 'void (sys_slist_t *)' Function 0x5575d0175ee0 'sys_slist_init' 'void (sys_slist_t *)'
|     `-ImplicitCastExpr 0x5575d0192410 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_slist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0192348 <col:28> 'sys_slist_t *' lvalue ParmVar 0x5575d0190d18 'list_to_append' 'sys_slist_t *'
|-FunctionDecl 0x5575d01926d0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:348:1, line:350:26> line:348:20 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d01924a0 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d0192518 <line:349:9, col:22> col:22 prev 'sys_snode_t *'
| |-ParmVarDecl 0x5575d0192590 <line:350:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5575d02b99f0 <line:340:3, line:346:46>
|   |-ParagraphComment 0x5575d02b9620 <line:340:3>
|   | `-TextComment 0x5575d02b95f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b9640 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02b96a0 <col:10, col:41>
|   |   `-TextComment 0x5575d02b9670 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x5575d02b96f0 <line:342:3, col:62>
|   | `-TextComment 0x5575d02b96c0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b9740 <line:344:3>
|   | `-TextComment 0x5575d02b9710 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b9760 <col:4, line:345:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b9810 <line:344:15, line:345:3>
|   |   |-TextComment 0x5575d02b97c0 <line:344:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02b97e0 <line:345:3> Text=" "
|   |-ParamCommandComment 0x5575d02b9830 <col:4, line:346:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x5575d02b98e0 <line:345:15, line:346:3>
|   |   |-TextComment 0x5575d02b9890 <line:345:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x5575d02b98b0 <line:346:3> Text=" "
|   `-ParamCommandComment 0x5575d02b9900 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5575d02b9990 <col:15, col:46>
|       `-TextComment 0x5575d02b9960 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x5575d0192928 prev 0x5575d01926d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:100:1 sys_slist_insert 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d0192798 <line:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d0192810 <<scratch space>:104:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_snode_t *'
| |-ParmVarDecl 0x5575d0192888 <<scratch space>:106:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d0161df8 <line:148:2, line:158:2>
|   `-IfStmt 0x5575d0161da8 <line:149:3, line:157:3> has_else
|     |-BinaryOperator 0x5575d0192ab0 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x5575d0192a80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_snode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x5575d01929e0 <col:7> 'sys_snode_t *' lvalue ParmVar 0x5575d0192810 'prev' 'sys_snode_t *'
|     | `-ImplicitCastExpr 0x5575d0192a98 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|     |   `-ParenExpr 0x5575d0192a60 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5575d0192a38 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5575d0192a00 <col:23> 'int' 0
|     |-CompoundStmt 0x5575d0192ba8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x5575d0192b48 <<scratch space>:108:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x5575d0192b30 <<scratch space>:108:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5575d0192ad0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018ee00 'sys_slist_prepend' 'void (sys_slist_t *, sys_snode_t *)'
|     |   |-ImplicitCastExpr 0x5575d0192b78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_slist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5575d0192af0 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5575d0192798 'list' 'sys_slist_t *'
|     |   `-ImplicitCastExpr 0x5575d0192b90 <col:38> 'sys_snode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5575d0192b10 <col:38> 'sys_snode_t *' lvalue ParmVar 0x5575d0192888 'node' 'sys_snode_t *'
|     `-IfStmt 0x5575d0161d80 <line:151:10, line:157:3> has_else
|       |-BinaryOperator 0x5575d0192cf0 <<scratch space>:110:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x5575d0192c18 <<scratch space>:110:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_snode_t *'
|       | | |-ImplicitCastExpr 0x5575d0192c00 <<scratch space>:110:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5575d0192bc0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5575d0176300 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|       | | `-ImplicitCastExpr 0x5575d0192c40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_snode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5575d0192be0 <col:42> 'sys_snode_t *' lvalue ParmVar 0x5575d0192810 'prev' 'sys_snode_t *'
|       | `-ImplicitCastExpr 0x5575d0192cd8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|       |   `-ParenExpr 0x5575d0192cb8 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5575d0192c90 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5575d0192c58 <col:23> 'int' 0
|       |-CompoundStmt 0x5575d0192de8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x5575d0192d88 <<scratch space>:112:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x5575d0192d70 <<scratch space>:112:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5575d0192d10 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018f780 'sys_slist_append' 'void (sys_slist_t *, sys_snode_t *)'
|       |   |-ImplicitCastExpr 0x5575d0192db8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_slist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5575d0192d30 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5575d0192798 'list' 'sys_slist_t *'
|       |   `-ImplicitCastExpr 0x5575d0192dd0 <col:37> 'sys_snode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5575d0192d50 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5575d0192888 'node' 'sys_snode_t *'
|       `-CompoundStmt 0x5575d0161d60 <line:153:10, line:157:3>
|         |-CallExpr 0x5575d0161c40 <<scratch space>:114:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x5575d0161c28 <<scratch space>:114:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5575d0161b50 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5575d018b2b0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|         | |-ImplicitCastExpr 0x5575d0161c70 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_snode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x5575d0161b70 <col:31> 'sys_snode_t *' lvalue ParmVar 0x5575d0192888 'node' 'sys_snode_t *'
|         | `-CallExpr 0x5575d0161be8 <<scratch space>:116:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_snode_t *'
|         |   |-ImplicitCastExpr 0x5575d0161bd0 <<scratch space>:116:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x5575d0161b90 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5575d0176300 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|         |   `-ImplicitCastExpr 0x5575d0161c10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_snode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x5575d0161bb0 <col:33> 'sys_snode_t *' lvalue ParmVar 0x5575d0192810 'prev' 'sys_snode_t *'
|         `-CallExpr 0x5575d0161d00 <<scratch space>:118:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x5575d0161ce8 <<scratch space>:118:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5575d0161c88 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5575d018b2b0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|           |-ImplicitCastExpr 0x5575d0161d30 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_snode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x5575d0161ca8 <col:31> 'sys_snode_t *' lvalue ParmVar 0x5575d0192810 'prev' 'sys_snode_t *'
|           `-ImplicitCastExpr 0x5575d0161d48 <col:37> 'sys_snode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5575d0161cc8 <col:37> 'sys_snode_t *' lvalue ParmVar 0x5575d0192888 'node' 'sys_snode_t *'
|-FunctionDecl 0x5575d0161eb0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:364:1, col:69> col:28 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d0161e20 <col:52, col:65> col:65 list 'sys_slist_t *'
| `-FullComment 0x5575d02b9db0 <line:355:3, line:362:50>
|   |-ParagraphComment 0x5575d02b9a90 <line:355:3>
|   | `-TextComment 0x5575d02b9a60 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b9ab0 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5575d02b9b10 <col:10, col:59>
|   |   `-TextComment 0x5575d02b9ae0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5575d02b9b80 <line:357:3, line:358:62>
|   | |-TextComment 0x5575d02b9b30 <line:357:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x5575d02b9b50 <line:358:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b9bd0 <line:360:3>
|   | `-TextComment 0x5575d02b9ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b9bf0 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02b9c80 <col:15, col:46>
|   |   `-TextComment 0x5575d02b9c50 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5575d02b9cd0 <line:362:3>
|   | `-TextComment 0x5575d02b9ca0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02b9cf0 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x5575d02b9d50 <col:11, col:50>
|       `-TextComment 0x5575d02b9d20 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x5575d0161ff8 prev 0x5575d0161eb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:122:1 used sys_slist_get_not_empty 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d0161f68 <line:124:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_slist_t *'
| `-CompoundStmt 0x5575d01625c8 <line:163:2, line:175:2>
|   |-DeclStmt 0x5575d01621b0 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x5575d01620b0 <<scratch space>:126:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_snode_t *' cinit
|   |   `-CallExpr 0x5575d0162170 <<scratch space>:128:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_snode_t *'
|   |     |-ImplicitCastExpr 0x5575d0162158 <<scratch space>:128:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575d0162118 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bb60 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |     `-ImplicitCastExpr 0x5575d0162198 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_slist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5575d0162138 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5575d0161f68 'list' 'sys_slist_t *'
|   |-CallExpr 0x5575d01622b8 <<scratch space>:130:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x5575d01622a0 <<scratch space>:130:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d01621c8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b5e0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |-ImplicitCastExpr 0x5575d01622e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_slist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d01621e8 <col:30> 'sys_slist_t *' lvalue ParmVar 0x5575d0161f68 'list' 'sys_slist_t *'
|   | `-CallExpr 0x5575d0162260 <<scratch space>:132:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_snode_t *'
|   |   |-ImplicitCastExpr 0x5575d0162248 <<scratch space>:132:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5575d0162208 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5575d0176300 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   `-ImplicitCastExpr 0x5575d0162288 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_snode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d0162228 <col:33> 'sys_snode_t *' lvalue Var 0x5575d01620b0 'node' 'sys_snode_t *'
|   |-IfStmt 0x5575d0162540 <line:169:3, line:172:3>
|   | |-BinaryOperator 0x5575d01623d0 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x5575d0162358 <<scratch space>:134:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_snode_t *'
|   | | | |-ImplicitCastExpr 0x5575d0162340 <<scratch space>:134:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5575d0162300 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bd80 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | | | `-ImplicitCastExpr 0x5575d0162380 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_slist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5575d0162320 <col:37> 'sys_slist_t *' lvalue ParmVar 0x5575d0161f68 'list' 'sys_slist_t *'
|   | | `-ImplicitCastExpr 0x5575d01623b8 <col:46> 'sys_snode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5575d0162398 <col:46> 'sys_snode_t *' lvalue Var 0x5575d01620b0 'node' 'sys_snode_t *'
|   | `-CompoundStmt 0x5575d0162528 <col:52, line:172:3>
|   |   `-CallExpr 0x5575d01624e0 <<scratch space>:136:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   |     |-ImplicitCastExpr 0x5575d01624c8 <<scratch space>:136:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575d01623f0 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b888 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |     |-ImplicitCastExpr 0x5575d0162510 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_slist_t *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5575d0162410 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5575d0161f68 'list' 'sys_slist_t *'
|   |     `-CallExpr 0x5575d0162488 <<scratch space>:138:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_snode_t *'
|   |       |-ImplicitCastExpr 0x5575d0162470 <<scratch space>:138:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5575d0162430 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bb60 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   |       `-ImplicitCastExpr 0x5575d01624b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_slist_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5575d0162450 <col:35> 'sys_slist_t *' lvalue ParmVar 0x5575d0161f68 'list' 'sys_slist_t *'
|   `-ReturnStmt 0x5575d0162590 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x5575d0162578 <col:10> 'sys_snode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0162558 <col:10> 'sys_snode_t *' lvalue Var 0x5575d01620b0 'node' 'sys_snode_t *'
|-FunctionDecl 0x5575d0162698 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:377:1, col:59> col:28 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d0162608 <col:42, col:55> col:55 list 'sys_slist_t *'
| `-FullComment 0x5575d02ba150 <line:369:3, line:375:69>
|   |-ParagraphComment 0x5575d02b9e50 <line:369:3>
|   | `-TextComment 0x5575d02b9e20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02b9e70 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5575d02b9ed0 <col:10, col:59>
|   |   `-TextComment 0x5575d02b9ea0 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5575d02b9f20 <line:371:3, col:62>
|   | `-TextComment 0x5575d02b9ef0 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02b9f70 <line:373:3>
|   | `-TextComment 0x5575d02b9f40 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02b9f90 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ba020 <col:15, col:46>
|   |   `-TextComment 0x5575d02b9ff0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5575d02ba070 <line:375:3>
|   | `-TextComment 0x5575d02ba040 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ba090 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5575d02ba0f0 <col:11, col:69>
|       `-TextComment 0x5575d02ba0c0 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x5575d01627e0 prev 0x5575d0162698 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:142:1 sys_slist_get 'sys_snode_t *(sys_slist_t *)' static inline
| |-ParmVarDecl 0x5575d0162750 <line:144:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_slist_t *'
| `-CompoundStmt 0x5575d0162b38 <line:180:2, line:183:2>
|   `-ReturnStmt 0x5575d0162b00 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x5575d0162ad0 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|       |-ImplicitCastExpr 0x5575d0162aa0 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x5575d0162948 <<scratch space>:146:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x5575d0162930 <<scratch space>:146:1> 'bool (*)(sys_slist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5575d0162888 <col:1> 'bool (sys_slist_t *)' Function 0x5575d018c1f8 'sys_slist_is_empty' 'bool (sys_slist_t *)'
|       |   `-ImplicitCastExpr 0x5575d0162970 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_slist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5575d01628a8 <col:39> 'sys_slist_t *' lvalue ParmVar 0x5575d0162750 'list' 'sys_slist_t *'
|       |-ImplicitCastExpr 0x5575d0162ab8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       | `-ParenExpr 0x5575d01629e8 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x5575d01629c0 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x5575d0162988 <col:23> 'int' 0
|       `-CallExpr 0x5575d0162a60 <<scratch space>:148:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_snode_t *'
|         |-ImplicitCastExpr 0x5575d0162a48 <<scratch space>:148:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575d0162a08 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d0161ff8 'sys_slist_get_not_empty' 'sys_snode_t *(sys_slist_t *)'
|         `-ImplicitCastExpr 0x5575d0162a88 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_slist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5575d0162a28 <col:38> 'sys_slist_t *' lvalue ParmVar 0x5575d0162750 'list' 'sys_slist_t *'
|-FunctionDecl 0x5575d0162d00 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:391:1, line:393:26> line:391:20 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d0162b70 <col:37, col:50> col:50 list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d0162be8 <line:392:9, col:22> col:22 prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x5575d0162c60 <line:393:9, col:22> col:22 node 'sys_snode_t *'
| `-FullComment 0x5575d02ba610 <line:382:3, line:389:46>
|   |-ParagraphComment 0x5575d02ba1f0 <line:382:3>
|   | `-TextComment 0x5575d02ba1c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ba210 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5575d02ba270 <col:10, col:23>
|   |   `-TextComment 0x5575d02ba240 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x5575d02ba2c0 <line:384:3, col:62>
|   | `-TextComment 0x5575d02ba290 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02ba310 <line:386:3>
|   | `-TextComment 0x5575d02ba2e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ba330 <col:4, line:387:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ba3e0 <line:386:15, line:387:3>
|   |   |-TextComment 0x5575d02ba390 <line:386:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02ba3b0 <line:387:3> Text=" "
|   |-ParamCommandComment 0x5575d02ba400 <col:4, line:389:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ba500 <line:387:20, line:389:3>
|   |   |-TextComment 0x5575d02ba480 <line:387:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x5575d02ba4a0 <line:388:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x5575d02ba4c0 <line:389:3> Text=" "
|   `-ParamCommandComment 0x5575d02ba520 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5575d02ba5b0 <col:15, col:46>
|       `-TextComment 0x5575d02ba580 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x5575d0162f58 prev 0x5575d0162d00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:150:1 used sys_slist_remove 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d0162dc8 <line:152:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d0162e40 <<scratch space>:154:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_snode_t *'
| |-ParmVarDecl 0x5575d0162eb8 <<scratch space>:156:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d0163988 <line:190:2, line:212:2>
|   |-IfStmt 0x5575d0163800 <line:191:3, line:209:3> has_else
|   | |-BinaryOperator 0x5575d01630e0 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x5575d01630b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5575d0163010 <col:7> 'sys_snode_t *' lvalue ParmVar 0x5575d0162e40 'prev_node' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x5575d01630c8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x5575d0163090 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5575d0163068 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5575d0163030 <col:23> 'int' 0
|   | |-CompoundStmt 0x5575d0163490 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x5575d01631f0 <<scratch space>:158:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x5575d01631d8 <<scratch space>:158:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5575d0163100 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b5e0 'z_slist_head_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | | | |-ImplicitCastExpr 0x5575d0163220 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_slist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5575d0163120 <col:31> 'sys_slist_t *' lvalue ParmVar 0x5575d0162dc8 'list' 'sys_slist_t *'
|   | | | `-CallExpr 0x5575d0163198 <<scratch space>:160:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_snode_t *'
|   | | |   |-ImplicitCastExpr 0x5575d0163180 <<scratch space>:160:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5575d0163140 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5575d0176300 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   | | |   `-ImplicitCastExpr 0x5575d01631c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_snode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5575d0163160 <col:33> 'sys_snode_t *' lvalue ParmVar 0x5575d0162eb8 'node' 'sys_snode_t *'
|   | | `-IfStmt 0x5575d0163478 <line:196:4, line:199:4>
|   | |   |-BinaryOperator 0x5575d0163308 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x5575d0163290 <<scratch space>:162:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_snode_t *'
|   | |   | | |-ImplicitCastExpr 0x5575d0163278 <<scratch space>:162:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x5575d0163238 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bd80 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   | |   | | `-ImplicitCastExpr 0x5575d01632b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_slist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x5575d0163258 <col:38> 'sys_slist_t *' lvalue ParmVar 0x5575d0162dc8 'list' 'sys_slist_t *'
|   | |   | `-ImplicitCastExpr 0x5575d01632f0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x5575d01632d0 <col:47> 'sys_snode_t *' lvalue ParmVar 0x5575d0162eb8 'node' 'sys_snode_t *'
|   | |   `-CompoundStmt 0x5575d0163460 <col:53, line:199:4>
|   | |     `-CallExpr 0x5575d0163418 <<scratch space>:164:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |       |-ImplicitCastExpr 0x5575d0163400 <<scratch space>:164:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5575d0163328 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b888 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   | |       |-ImplicitCastExpr 0x5575d0163448 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_slist_t *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5575d0163348 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5575d0162dc8 'list' 'sys_slist_t *'
|   | |       `-CallExpr 0x5575d01633c0 <<scratch space>:166:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_snode_t *'
|   | |         |-ImplicitCastExpr 0x5575d01633a8 <<scratch space>:166:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x5575d0163368 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bb60 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |         `-ImplicitCastExpr 0x5575d01633e8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_slist_t *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x5575d0163388 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5575d0162dc8 'list' 'sys_slist_t *'
|   | `-CompoundStmt 0x5575d01637e0 <line:200:10, line:209:3>
|   |   |-CallExpr 0x5575d01635a0 <<scratch space>:168:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x5575d0163588 <<scratch space>:168:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5575d01634b0 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5575d018b2b0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|   |   | |-ImplicitCastExpr 0x5575d01635d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_snode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x5575d01634d0 <col:31> 'sys_snode_t *' lvalue ParmVar 0x5575d0162e40 'prev_node' 'sys_snode_t *'
|   |   | `-CallExpr 0x5575d0163548 <<scratch space>:170:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_snode_t *'
|   |   |   |-ImplicitCastExpr 0x5575d0163530 <<scratch space>:170:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x5575d01634f0 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5575d0176300 'z_snode_next_peek' 'sys_snode_t *(sys_snode_t *)'
|   |   |   `-ImplicitCastExpr 0x5575d0163570 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_snode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5575d0163510 <col:33> 'sys_snode_t *' lvalue ParmVar 0x5575d0162eb8 'node' 'sys_snode_t *'
|   |   `-IfStmt 0x5575d01637c8 <line:205:4, line:208:4>
|   |     |-BinaryOperator 0x5575d01636b8 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x5575d0163640 <<scratch space>:172:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_snode_t *'
|   |     | | |-ImplicitCastExpr 0x5575d0163628 <<scratch space>:172:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x5575d01635e8 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bd80 'sys_slist_peek_tail' 'sys_snode_t *(sys_slist_t *)'
|   |     | | `-ImplicitCastExpr 0x5575d0163668 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_slist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5575d0163608 <col:38> 'sys_slist_t *' lvalue ParmVar 0x5575d0162dc8 'list' 'sys_slist_t *'
|   |     | `-ImplicitCastExpr 0x5575d01636a0 <col:47> 'sys_snode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5575d0163680 <col:47> 'sys_snode_t *' lvalue ParmVar 0x5575d0162eb8 'node' 'sys_snode_t *'
|   |     `-CompoundStmt 0x5575d01637b0 <col:53, line:208:4>
|   |       `-CallExpr 0x5575d0163750 <<scratch space>:174:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |         |-ImplicitCastExpr 0x5575d0163738 <<scratch space>:174:1> 'void (*)(sys_slist_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5575d01636d8 <col:1> 'void (sys_slist_t *, sys_snode_t *)' Function 0x5575d018b888 'z_slist_tail_set' 'void (sys_slist_t *, sys_snode_t *)'
|   |         |-ImplicitCastExpr 0x5575d0163780 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_slist_t *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5575d01636f8 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5575d0162dc8 'list' 'sys_slist_t *'
|   |         `-ImplicitCastExpr 0x5575d0163798 <line:207:13> 'sys_snode_t *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5575d0163718 <col:13> 'sys_snode_t *' lvalue ParmVar 0x5575d0162e40 'prev_node' 'sys_snode_t *'
|   `-CallExpr 0x5575d0163900 <<scratch space>:176:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x5575d01638e8 <<scratch space>:176:1> 'void (*)(sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0163828 <col:1> 'void (sys_snode_t *, sys_snode_t *)' Function 0x5575d018b2b0 'z_snode_next_set' 'void (sys_snode_t *, sys_snode_t *)'
|     |-ImplicitCastExpr 0x5575d0163930 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_snode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d0163848 <col:30> 'sys_snode_t *' lvalue ParmVar 0x5575d0162eb8 'node' 'sys_snode_t *'
|     `-ImplicitCastExpr 0x5575d0163948 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|       `-ParenExpr 0x5575d01638c8 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x5575d01638a0 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x5575d0163868 <col:23> 'int' 0
|-FunctionDecl 0x5575d0197df0 </vagrant/ext/zephyros/zephyr/include/sys/slist.h:407:1, line:408:28> line:407:20 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d01639b8 <col:46, col:59> col:59 list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d0163a30 <line:408:11, col:24> col:24 node 'sys_snode_t *'
| `-FullComment 0x5575d02baa80 <line:398:3, line:405:35>
|   |-ParagraphComment 0x5575d02ba6b0 <line:398:3>
|   | `-TextComment 0x5575d02ba680 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ba6d0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02ba730 <col:10, col:44>
|   |   `-TextComment 0x5575d02ba700 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x5575d02ba780 <line:400:3, col:62>
|   | `-TextComment 0x5575d02ba750 <col:3, col:62> Text=" This and other sys_slist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02ba7d0 <line:402:3>
|   | `-TextComment 0x5575d02ba7a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ba7f0 <col:4, line:403:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ba8a0 <line:402:15, line:403:3>
|   |   |-TextComment 0x5575d02ba850 <line:402:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02ba870 <line:403:3> Text=" "
|   |-ParamCommandComment 0x5575d02ba8c0 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ba950 <col:15, col:60>
|   |   `-TextComment 0x5575d02ba920 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x5575d02ba9a0 <line:405:3>
|   | `-TextComment 0x5575d02ba970 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ba9c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02baa20 <col:11, col:35>
|       `-TextComment 0x5575d02ba9f0 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x5575d0197fc0 prev 0x5575d0197df0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:178:1 sys_slist_find_and_remove 'bool (sys_slist_t *, sys_snode_t *)' static inline
| |-ParmVarDecl 0x5575d0197eb0 <line:180:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_slist_t *'
| |-ParmVarDecl 0x5575d0197f28 <<scratch space>:182:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_snode_t *'
| `-CompoundStmt 0x5575d0198898 <line:218:2, line:233:2>
|   |-DeclStmt 0x5575d0198180 <<scratch space>:184:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x5575d0198080 <<scratch space>:184:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_snode_t *' cinit
|   |   `-ImplicitCastExpr 0x5575d0198168 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <NullToPointer>
|   |     `-ParenExpr 0x5575d0198148 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x5575d0198120 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x5575d01980e8 <col:23> 'int' 0
|   |-DeclStmt 0x5575d0198210 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x5575d01981a8 <<scratch space>:186:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_snode_t *'
|   |-ForStmt 0x5575d01987f0 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x5575d01982e0 <line:222:42, line:15:47> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x5575d0198228 <line:222:42> 'sys_snode_t *' lvalue Var 0x5575d01981a8 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x5575d01982a0 <<scratch space>:188:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x5575d0198288 <<scratch space>:188:1> 'sys_snode_t *(*)(sys_slist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5575d0198248 <col:1> 'sys_snode_t *(sys_slist_t *)' Function 0x5575d018bb60 'sys_slist_peek_head' 'sys_snode_t *(sys_slist_t *)'
|   | |   `-ImplicitCastExpr 0x5575d01982c8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_slist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5575d0198268 <col:36> 'sys_slist_t *' lvalue ParmVar 0x5575d0197eb0 'list' 'sys_slist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5575d01983d0 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x5575d01983a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5575d0198300 <col:42> 'sys_snode_t *' lvalue Var 0x5575d01981a8 'test' 'sys_snode_t *'
|   | | `-ImplicitCastExpr 0x5575d01983b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_snode_t *' <BitCast>
|   | |   `-ParenExpr 0x5575d0198380 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5575d0198358 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5575d0198320 <col:23> 'int' 0
|   | |-BinaryOperator 0x5575d01984a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_snode_t *' '='
|   | | |-DeclRefExpr 0x5575d01983f0 <line:222:42> 'sys_snode_t *' lvalue Var 0x5575d01981a8 'test' 'sys_snode_t *'
|   | | `-CallExpr 0x5575d0198468 <<scratch space>:190:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_snode_t *'
|   | |   |-ImplicitCastExpr 0x5575d0198450 <<scratch space>:190:1> 'sys_snode_t *(*)(sys_snode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5575d0198410 <col:1> 'sys_snode_t *(sys_snode_t *)' Function 0x5575d018caa8 'sys_slist_peek_next' 'sys_snode_t *(sys_snode_t *)'
|   | |   `-ImplicitCastExpr 0x5575d0198490 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_snode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5575d0198430 <col:42> 'sys_snode_t *' lvalue Var 0x5575d01981a8 'test' 'sys_snode_t *'
|   | `-CompoundStmt 0x5575d01987d0 <col:48, line:230:3>
|   |   |-IfStmt 0x5575d0198740 <line:223:4, line:227:4>
|   |   | |-BinaryOperator 0x5575d0198538 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x5575d0198508 <col:8> 'sys_snode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x5575d01984c8 <col:8> 'sys_snode_t *' lvalue Var 0x5575d01981a8 'test' 'sys_snode_t *'
|   |   | | `-ImplicitCastExpr 0x5575d0198520 <col:16> 'sys_snode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5575d01984e8 <col:16> 'sys_snode_t *' lvalue ParmVar 0x5575d0197f28 'node' 'sys_snode_t *'
|   |   | `-CompoundStmt 0x5575d0198720 <col:22, line:227:4>
|   |   |   |-CallExpr 0x5575d0198658 <<scratch space>:192:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   |   | |-ImplicitCastExpr 0x5575d0198640 <<scratch space>:192:1> 'void (*)(sys_slist_t *, sys_snode_t *, sys_snode_t *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x5575d0198558 <col:1> 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)' Function 0x5575d0162f58 'sys_slist_remove' 'void (sys_slist_t *, sys_snode_t *, sys_snode_t *)'
|   |   |   | |-ImplicitCastExpr 0x5575d0198690 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_slist_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5575d0198578 <col:32> 'sys_slist_t *' lvalue ParmVar 0x5575d0197eb0 'list' 'sys_slist_t *'
|   |   |   | |-ImplicitCastExpr 0x5575d01986a8 <col:38> 'sys_snode_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5575d0198598 <col:38> 'sys_snode_t *' lvalue Var 0x5575d0198080 'prev' 'sys_snode_t *'
|   |   |   | `-ImplicitCastExpr 0x5575d01986c0 <line:225:11> 'sys_snode_t *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5575d01985b8 <col:11> 'sys_snode_t *' lvalue ParmVar 0x5575d0197f28 'node' 'sys_snode_t *'
|   |   |   `-ReturnStmt 0x5575d0198710 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   |     `-ImplicitCastExpr 0x5575d01986f8 <col:16> 'bool' <IntegralToBoolean>
|   |   |       `-IntegerLiteral 0x5575d01986d8 <col:16> 'int' 1
|   |   `-BinaryOperator 0x5575d01987b0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_snode_t *' '='
|   |     |-DeclRefExpr 0x5575d0198758 <col:4> 'sys_snode_t *' lvalue Var 0x5575d0198080 'prev' 'sys_snode_t *'
|   |     `-ImplicitCastExpr 0x5575d0198798 <col:11> 'sys_snode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5575d0198778 <col:11> 'sys_snode_t *' lvalue Var 0x5575d01981a8 'test' 'sys_snode_t *'
|   `-ReturnStmt 0x5575d0198860 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x5575d0198848 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x5575d0198828 <col:16> 'int' 0
|-TypedefDecl 0x5575d0198908 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:29:1, col:15> col:15 referenced unative_t 'u64_t':'unsigned long long'
| `-TypedefType 0x5575d01988d0 'u64_t' sugar
|   |-Typedef 0x5575d00efaa0 'u64_t'
|   `-BuiltinType 0x5575d007b660 'unsigned long long'
|-RecordDecl 0x5575d0198960 <line:34:1, line:36:1> line:34:8 struct _sfnode definition
| `-FieldDecl 0x5575d0198a48 <line:35:2, col:12> col:12 referenced next_and_flags 'unative_t':'unsigned long long'
|-TypedefDecl 0x5575d0198af8 <line:38:1, col:24> col:24 referenced sys_sfnode_t 'struct _sfnode':'struct _sfnode'
| `-ElaboratedType 0x5575d0198aa0 'struct _sfnode' sugar
|   `-RecordType 0x5575d01989e0 'struct _sfnode'
|     `-Record 0x5575d0198960 '_sfnode'
|-RecordDecl 0x5575d0198b50 <line:40:1, line:43:1> line:40:8 struct _sflist definition
| |-FieldDecl 0x5575d0198ca0 <line:41:2, col:16> col:16 referenced head 'sys_sfnode_t *'
| `-FieldDecl 0x5575d0198d00 <line:42:2, col:16> col:16 referenced tail 'sys_sfnode_t *'
|-TypedefDecl 0x5575d019f5b0 <line:45:1, col:24> col:24 referenced sys_sflist_t 'struct _sflist':'struct _sflist'
| `-ElaboratedType 0x5575d0198d50 'struct _sflist' sugar
|   `-RecordType 0x5575d0198bd0 'struct _sflist'
|     `-Record 0x5575d0198b50 '_sflist'
|-FunctionDecl 0x5575d019f8e0 <line:196:1, line:200:1> line:196:20 used sys_sflist_init 'void (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d019f7d0 <col:36, col:50> col:50 used list 'sys_sflist_t *'
| |-CompoundStmt 0x5575d019fbc8 <line:197:1, line:200:1>
| | |-BinaryOperator 0x5575d019fa88 <line:198:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| | | |-MemberExpr 0x5575d019f9c0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:198:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x5575d0198ca0
| | | | `-ImplicitCastExpr 0x5575d019f9a8 <col:2> 'sys_sflist_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5575d019f988 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5575d019f7d0 'list' 'sys_sflist_t *'
| | | `-ImplicitCastExpr 0x5575d019fa70 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| | |   `-ParenExpr 0x5575d019fa50 <col:14, col:24> 'void *'
| | |     `-CStyleCastExpr 0x5575d019fa28 <col:15, col:23> 'void *' <NullToPointer>
| | |       `-IntegerLiteral 0x5575d019f9f0 <col:23> 'int' 0
| | `-BinaryOperator 0x5575d019fba8 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *' '='
| |   |-MemberExpr 0x5575d019fae0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:199:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x5575d0198d00
| |   | `-ImplicitCastExpr 0x5575d019fac8 <col:2> 'sys_sflist_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5575d019faa8 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5575d019f7d0 'list' 'sys_sflist_t *'
| |   `-ImplicitCastExpr 0x5575d019fb90 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
| |     `-ParenExpr 0x5575d019fb70 <col:14, col:24> 'void *'
| |       `-CStyleCastExpr 0x5575d019fb48 <col:15, col:23> 'void *' <NullToPointer>
| |         `-IntegerLiteral 0x5575d019fb10 <col:23> 'int' 0
| `-FullComment 0x5575d02bace0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:192:3, line:194:50>
|   |-ParagraphComment 0x5575d02bab20 <line:192:3>
|   | `-TextComment 0x5575d02baaf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bab40 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5575d02baba0 <col:10, col:27>
|   |   `-TextComment 0x5575d02bab70 <col:10, col:27> Text=" Initialize a list"
|   |-ParagraphComment 0x5575d02babf0 <line:194:3>
|   | `-TextComment 0x5575d02babc0 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d02bac10 <col:4, col:50> [in] implicitly Param="list" ParamIndex=0
|     `-ParagraphComment 0x5575d02baca0 <col:15, col:50>
|       `-TextComment 0x5575d02bac70 <col:15, col:50> Text=" A pointer on the list to initialize"
|-FunctionDecl 0x5575d019fd00 <line:205:1, line:208:1> line:205:29 used z_sfnode_next_peek 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d019fbf8 <col:48, col:62> col:62 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d019ff20 <line:206:1, line:208:1>
|   `-ReturnStmt 0x5575d019ff10 <line:207:2, col:71>
|     `-CStyleCastExpr 0x5575d019fee8 <col:9, col:71> 'sys_sfnode_t *' <IntegralToPointer>
|       `-ParenExpr 0x5575d019fec8 <col:25, col:71> 'unsigned long long'
|         `-BinaryOperator 0x5575d019fe78 <col:26, line:203:31> 'unsigned long long' '&'
|           |-ImplicitCastExpr 0x5575d019fe48 <line:207:26, col:32> 'unative_t':'unsigned long long' <LValueToRValue>
|           | `-MemberExpr 0x5575d019fde0 <col:26, col:32> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5575d0198a48
|           |   `-ImplicitCastExpr 0x5575d019fdc8 <col:26> 'sys_sfnode_t *' <LValueToRValue>
|           |     `-DeclRefExpr 0x5575d019fda8 <col:26> 'sys_sfnode_t *' lvalue ParmVar 0x5575d019fbf8 'node' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x5575d019fe60 <col:49, line:203:31> 'unsigned long long' <IntegralCast>
|             `-UnaryOperator 0x5575d019fe30 <line:207:49, line:203:31> 'unsigned long' prefix '~' cannot overflow
|               `-IntegerLiteral 0x5575d019fe10 <col:31> 'unsigned long' 3
|-FunctionDecl 0x5575d01a0050 <line:210:1, col:59> col:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| `-ParmVarDecl 0x5575d019ff48 <col:41, col:55> col:55 node 'sys_sfnode_t *'
|-FunctionDecl 0x5575d01a02a0 <line:212:1, line:218:1> line:212:20 used z_sfnode_next_set 'void (sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a0108 <col:38, col:52> col:52 used parent 'sys_sfnode_t *'
| |-ParmVarDecl 0x5575d01a0180 <line:213:12, col:26> col:26 used child 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d01a0658 <line:214:1, line:218:1>
|   |-DeclStmt 0x5575d01a04c8 <line:215:2, col:47>
|   | `-VarDecl 0x5575d01a0360 <col:2, col:46> col:7 used cur_flags 'u8_t':'unsigned char' cinit
|   |   `-CallExpr 0x5575d01a0488 <col:19, col:46> 'u8_t':'unsigned char'
|   |     |-ImplicitCastExpr 0x5575d01a0470 <col:19> 'u8_t (*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575d01a03c8 <col:19> 'u8_t (sys_sfnode_t *)' Function 0x5575d01a0050 'sys_sfnode_flags_get' 'u8_t (sys_sfnode_t *)'
|   |     `-ImplicitCastExpr 0x5575d01a04b0 <col:40> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5575d01a03e8 <col:40> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a0108 'parent' 'sys_sfnode_t *'
|   `-BinaryOperator 0x5575d01a0638 <line:217:2, col:50> 'unative_t':'unsigned long long' '='
|     |-MemberExpr 0x5575d01a0518 <col:2, col:10> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5575d0198a48
|     | `-ImplicitCastExpr 0x5575d01a0500 <col:2> 'sys_sfnode_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575d01a04e0 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a0108 'parent' 'sys_sfnode_t *'
|     `-BinaryOperator 0x5575d01a0618 <col:27, col:50> 'unsigned long long' '|'
|       |-ImplicitCastExpr 0x5575d01a0600 <col:27> 'unsigned long long' <IntegralCast>
|       | `-ImplicitCastExpr 0x5575d01a05e8 <col:27> 'u8_t':'unsigned char' <LValueToRValue>
|       |   `-DeclRefExpr 0x5575d01a0548 <col:27> 'u8_t':'unsigned char' lvalue Var 0x5575d01a0360 'cur_flags' 'u8_t':'unsigned char'
|       `-CStyleCastExpr 0x5575d01a05c0 <col:39, col:50> 'unative_t':'unsigned long long' <PointerToIntegral>
|         `-ImplicitCastExpr 0x5575d01a0598 <col:50> 'sys_sfnode_t *' <LValueToRValue> part_of_explicit_cast
|           `-DeclRefExpr 0x5575d01a0568 <col:50> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a0180 'child' 'sys_sfnode_t *'
|-FunctionDecl 0x5575d01a0820 <line:220:1, line:223:1> line:220:20 used z_sflist_head_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a0688 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a0700 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d01a0990 <line:221:1, line:223:1>
|   `-BinaryOperator 0x5575d01a0970 <line:222:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x5575d01a0908 <col:2, col:8> 'sys_sfnode_t *' lvalue ->head 0x5575d0198ca0
|     | `-ImplicitCastExpr 0x5575d01a08f0 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575d01a08d0 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a0688 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x5575d01a0958 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d01a0938 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a0700 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5575d01a0ac8 <line:225:1, line:228:1> line:225:20 used z_sflist_tail_set 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a09b8 <col:38, col:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a0a30 <col:58, col:72> col:72 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d01a0c68 <line:226:1, line:228:1>
|   `-BinaryOperator 0x5575d01a0c18 <line:227:2, col:15> 'sys_sfnode_t *' '='
|     |-MemberExpr 0x5575d01a0bb0 <col:2, col:8> 'sys_sfnode_t *' lvalue ->tail 0x5575d0198d00
|     | `-ImplicitCastExpr 0x5575d01a0b98 <col:2> 'sys_sflist_t *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575d01a0b78 <col:2> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a09b8 'list' 'sys_sflist_t *'
|     `-ImplicitCastExpr 0x5575d01a0c00 <col:15> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d01a0be0 <col:15> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a0a30 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5575d01a0da0 <line:237:1, line:240:1> line:237:29 used sys_sflist_peek_head 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d01a0c90 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x5575d01a0f08 <line:238:1, line:240:1>
| | `-ReturnStmt 0x5575d01a0ec8 <line:239:2, col:15>
| |   `-ImplicitCastExpr 0x5575d01a0eb0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5575d01a0e80 <col:9, col:15> 'sys_sfnode_t *' lvalue ->head 0x5575d0198ca0
| |       `-ImplicitCastExpr 0x5575d01a0e68 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d01a0e48 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a0c90 'list' 'sys_sflist_t *'
| `-FullComment 0x5575d02bb020 <line:231:3, line:235:68>
|   |-ParagraphComment 0x5575d02bad80 <line:231:3>
|   | `-TextComment 0x5575d02bad50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bada0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02bae00 <col:10, col:43>
|   |   `-TextComment 0x5575d02badd0 <col:10, col:43> Text=" Peek the first node from the list"
|   |-ParagraphComment 0x5575d02bae50 <line:233:3>
|   | `-TextComment 0x5575d02bae20 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bae70 <col:4, col:62> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02baf00 <col:15, col:62>
|   |   `-TextComment 0x5575d02baed0 <col:15, col:62> Text=" A point on the list to peek the first node from"
|   |-ParagraphComment 0x5575d02baf50 <line:235:3>
|   | `-TextComment 0x5575d02baf20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02baf70 <col:4, col:68> Name="return"
|     `-ParagraphComment 0x5575d02bafd0 <col:11, col:68>
|       `-TextComment 0x5575d02bafa0 <col:11, col:68> Text=" A pointer on the first node of the list (or NULL if none)"
|-FunctionDecl 0x5575d01a0fc0 <line:249:1, line:252:1> line:249:29 used sys_sflist_peek_tail 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d01a0f30 <col:50, col:64> col:64 used list 'sys_sflist_t *'
| |-CompoundStmt 0x5575d01a1128 <line:250:1, line:252:1>
| | `-ReturnStmt 0x5575d01a10e8 <line:251:2, col:15>
| |   `-ImplicitCastExpr 0x5575d01a10d0 <col:9, col:15> 'sys_sfnode_t *' <LValueToRValue>
| |     `-MemberExpr 0x5575d01a10a0 <col:9, col:15> 'sys_sfnode_t *' lvalue ->tail 0x5575d0198d00
| |       `-ImplicitCastExpr 0x5575d01a1088 <col:9> 'sys_sflist_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d01a1068 <col:9> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a0f30 'list' 'sys_sflist_t *'
| `-FullComment 0x5575d02bb360 <line:243:3, line:247:67>
|   |-ParagraphComment 0x5575d02bb0c0 <line:243:3>
|   | `-TextComment 0x5575d02bb090 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bb0e0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d02bb140 <col:10, col:42>
|   |   `-TextComment 0x5575d02bb110 <col:10, col:42> Text=" Peek the last node from the list"
|   |-ParagraphComment 0x5575d02bb190 <line:245:3>
|   | `-TextComment 0x5575d02bb160 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bb1b0 <col:4, col:61> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bb240 <col:15, col:61>
|   |   `-TextComment 0x5575d02bb210 <col:15, col:61> Text=" A point on the list to peek the last node from"
|   |-ParagraphComment 0x5575d02bb290 <line:247:3>
|   | `-TextComment 0x5575d02bb260 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02bb2b0 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5575d02bb310 <col:11, col:67>
|       `-TextComment 0x5575d02bb2e0 <col:11, col:67> Text=" A pointer on the last node of the list (or NULL if none)"
|-FunctionDecl 0x5575d01a11e0 prev 0x5575d01a0050 <line:264:1, line:267:1> line:264:20 used sys_sfnode_flags_get 'u8_t (sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a1150 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-CompoundStmt 0x5575d01a13b8 <line:265:1, line:267:1>
| | `-ReturnStmt 0x5575d01a1378 <line:266:2, line:203:31>
| |   `-ImplicitCastExpr 0x5575d01a1360 <line:266:9, line:203:31> 'u8_t':'unsigned char' <IntegralCast>
| |     `-BinaryOperator 0x5575d01a1340 <line:266:9, line:203:31> 'unsigned long long' '&'
| |       |-ImplicitCastExpr 0x5575d01a1310 <line:266:9, col:15> 'unative_t':'unsigned long long' <LValueToRValue>
| |       | `-MemberExpr 0x5575d01a12c0 <col:9, col:15> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5575d0198a48
| |       |   `-ImplicitCastExpr 0x5575d01a12a8 <col:9> 'sys_sfnode_t *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5575d01a1288 <col:9> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a1150 'node' 'sys_sfnode_t *'
| |       `-ImplicitCastExpr 0x5575d01a1328 <line:203:31> 'unsigned long long' <IntegralCast>
| |         `-IntegerLiteral 0x5575d01a12f0 <col:31> 'unsigned long' 3
| `-FullComment 0x5575d02bb670 <line:259:3, line:262:60>
|   |-ParagraphComment 0x5575d02bb400 <line:259:3>
|   | `-TextComment 0x5575d02bb3d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bb420 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5575d02bb480 <col:10, col:51>
|   |   `-TextComment 0x5575d02bb450 <col:10, col:51> Text=" Fetch flags value for a particular sfnode"
|   |-ParagraphComment 0x5575d02bb4d0 <line:261:3>
|   | `-TextComment 0x5575d02bb4a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bb4f0 <col:4, line:262:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bb5a0 <line:261:15, line:262:3>
|   |   |-TextComment 0x5575d02bb550 <line:261:15, col:56> Text=" A pointer to the node to fetch flags from"
|   |   `-TextComment 0x5575d02bb570 <line:262:3> Text=" "
|   `-BlockCommandComment 0x5575d02bb5c0 <col:4, col:60> Name="return"
|     `-ParagraphComment 0x5575d02bb620 <col:11, col:60>
|       `-TextComment 0x5575d02bb5f0 <col:11, col:60> Text=" The value of flags, which will be between 0 and 3"
|-FunctionDecl 0x5575d01a15d0 <line:282:1, line:286:1> line:282:20 sys_sfnode_init 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x5575d01a13e0 <col:36, col:50> col:50 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5575d01a1458 <col:56, col:61> col:61 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x5575d01a1798 <line:283:1, line:286:1>
| | |-CompoundStmt 0x5575d01a1680 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5575d01a1690 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:284:70>
| | `-BinaryOperator 0x5575d01a1750 <line:285:2, col:25> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x5575d01a16d0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5575d0198a48
| |   | `-ImplicitCastExpr 0x5575d01a16b8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5575d01a1698 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a13e0 'node' 'sys_sfnode_t *'
| |   `-ImplicitCastExpr 0x5575d01a1738 <col:25> 'unative_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x5575d01a1720 <col:25> 'u8_t':'unsigned char' <LValueToRValue>
| |       `-DeclRefExpr 0x5575d01a1700 <col:25> 'u8_t':'unsigned char' lvalue ParmVar 0x5575d01a1458 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x5575d02bbad0 <line:270:3, line:280:62>
|   |-ParagraphComment 0x5575d02bb710 <line:270:3>
|   | `-TextComment 0x5575d02bb6e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bb730 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5575d02bb790 <col:10, col:35>
|   |   `-TextComment 0x5575d02bb760 <col:10, col:35> Text=" Initialize an sflist node"
|   |-ParagraphComment 0x5575d02bb830 <line:272:3, line:274:64>
|   | |-TextComment 0x5575d02bb7b0 <line:272:3, col:79> Text=" Set an initial flags value for this slist node, which can be a value between"
|   | |-TextComment 0x5575d02bb7d0 <line:273:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x5575d02bb7f0 <line:274:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x5575d02bb8a0 <line:276:3, line:277:61>
|   | |-TextComment 0x5575d02bb850 <line:276:3, col:73> Text=" This is ever so slightly faster than sys_sfnode_flags_set() and should"
|   | `-TextComment 0x5575d02bb870 <line:277:3, col:61> Text=" only be used on a node that hasn't been added to any list."
|   |-ParagraphComment 0x5575d02bb8f0 <line:279:3>
|   | `-TextComment 0x5575d02bb8c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bb910 <col:4, line:280:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bb9c0 <line:279:15, line:280:3>
|   |   |-TextComment 0x5575d02bb970 <line:279:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x5575d02bb990 <line:280:3> Text=" "
|   `-ParamCommandComment 0x5575d02bb9e0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x5575d02bba70 <col:16, col:62>
|       `-TextComment 0x5575d02bba40 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x5575d01a18e0 <line:298:1, line:302:1> line:298:20 sys_sfnode_flags_set 'void (sys_sfnode_t *, u8_t)' static inline
| |-ParmVarDecl 0x5575d01a17d0 <col:41, col:55> col:55 used node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5575d01a1848 <col:61, col:66> col:66 used flags 'u8_t':'unsigned char'
| |-CompoundStmt 0x5575d01a1c38 <line:299:1, line:302:1>
| | |-CompoundStmt 0x5575d01a1990 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5575d01a19a0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:300:70>
| | `-BinaryOperator 0x5575d01a1bf0 <line:301:2, col:65> 'unative_t':'unsigned long long' '='
| |   |-MemberExpr 0x5575d01a19e0 <col:2, col:8> 'unative_t':'unsigned long long' lvalue ->next_and_flags 0x5575d0198a48
| |   | `-ImplicitCastExpr 0x5575d01a19c8 <col:2> 'sys_sfnode_t *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5575d01a19a8 <col:2> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a17d0 'node' 'sys_sfnode_t *'
| |   `-BinaryOperator 0x5575d01a1bd0 <col:25, col:65> 'unsigned long long' '|'
| |     |-CStyleCastExpr 0x5575d01a1b58 <col:25, col:61> 'unative_t':'unsigned long long' <PointerToIntegral>
| |     | `-ParenExpr 0x5575d01a1b38 <col:36, col:61> 'sys_sfnode_t *'
| |     |   `-CallExpr 0x5575d01a1ac8 <col:37, col:60> 'sys_sfnode_t *'
| |     |     |-ImplicitCastExpr 0x5575d01a1ab0 <col:37> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x5575d01a1a10 <col:37> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d019fd00 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
| |     |     `-ImplicitCastExpr 0x5575d01a1af0 <col:56> 'sys_sfnode_t *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5575d01a1a30 <col:56> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a17d0 'node' 'sys_sfnode_t *'
| |     `-ImplicitCastExpr 0x5575d01a1bb8 <col:65> 'unsigned long long' <IntegralCast>
| |       `-ImplicitCastExpr 0x5575d01a1ba0 <col:65> 'u8_t':'unsigned char' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d01a1b80 <col:65> 'u8_t':'unsigned char' lvalue ParmVar 0x5575d01a1848 'flags' 'u8_t':'unsigned char'
| `-FullComment 0x5575d02bbeb0 <line:289:3, line:296:62>
|   |-ParagraphComment 0x5575d02bbb70 <line:289:3>
|   | `-TextComment 0x5575d02bbb40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bbb90 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02bbbf0 <col:10, col:44>
|   |   `-TextComment 0x5575d02bbbc0 <col:10, col:44> Text=" Set flags value for an sflist node"
|   |-ParagraphComment 0x5575d02bbc90 <line:291:3, line:293:64>
|   | |-TextComment 0x5575d02bbc10 <line:291:3, col:70> Text=" Set a flags value for this slist node, which can be a value between"
|   | |-TextComment 0x5575d02bbc30 <line:292:3, col:69> Text=" 0 and 3. These flags will persist even if the node is moved around"
|   | `-TextComment 0x5575d02bbc50 <line:293:3, col:64> Text=" within a list, removed, or transplanted to a different slist."
|   |-ParagraphComment 0x5575d02bbce0 <line:295:3>
|   | `-TextComment 0x5575d02bbcb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bbd00 <col:4, line:296:3> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bbdb0 <line:295:15, line:296:3>
|   |   |-TextComment 0x5575d02bbd60 <line:295:15, col:56> Text=" A pointer to the node to set the flags on"
|   |   `-TextComment 0x5575d02bbd80 <line:296:3> Text=" "
|   `-ParamCommandComment 0x5575d02bbdd0 <col:4, col:62> [in] implicitly Param="flags" ParamIndex=1
|     `-ParagraphComment 0x5575d02bbe60 <col:16, col:62>
|       `-TextComment 0x5575d02bbe30 <col:16, col:62> Text=" A value between 0 and 3 to set the flags value"
|-FunctionDecl 0x5575d01a1d80 <line:315:1, col:58> col:20 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d01a1c70 <col:40, col:54> col:54 list 'sys_sflist_t *'
| `-FullComment 0x5575d02bc1f0 <line:309:3, line:313:57>
|   |-ParagraphComment 0x5575d02bbf50 <line:309:3>
|   | `-TextComment 0x5575d02bbf20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bbf70 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02bbfd0 <col:10, col:41>
|   |   `-TextComment 0x5575d02bbfa0 <col:10, col:41> Text=" Test if the given list is empty"
|   |-ParagraphComment 0x5575d02bc020 <line:311:3>
|   | `-TextComment 0x5575d02bbff0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bc040 <col:4, col:44> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bc0d0 <col:15, col:44>
|   |   `-TextComment 0x5575d02bc0a0 <col:15, col:44> Text=" A pointer on the list to test"
|   |-ParagraphComment 0x5575d02bc120 <line:313:3>
|   | `-TextComment 0x5575d02bc0f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02bc140 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5575d02bc1a0 <col:11, col:57>
|       `-TextComment 0x5575d02bc170 <col:11, col:57> Text=" a boolean, true if it's empty, false otherwise"
|-FunctionDecl 0x5575d01a1ec8 prev 0x5575d01a1d80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:58:2, line:62:2> <scratch space>:194:1 used sys_sflist_is_empty 'bool (sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d01a1e38 <line:196:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:59:54> col:54 used list 'sys_sflist_t *'
| `-CompoundStmt 0x5575d01a2198 <line:60:2, line:62:2>
|   `-ReturnStmt 0x5575d01a2158 <line:61:3, col:54>
|     `-ImplicitCastExpr 0x5575d01a2140 <col:10, col:54> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5575d01a2120 <col:10, col:54> 'int'
|         `-BinaryOperator 0x5575d01a2100 <<scratch space>:198:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|           |-CallExpr 0x5575d01a2028 <<scratch space>:198:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:45> 'sys_sfnode_t *'
|           | |-ImplicitCastExpr 0x5575d01a2010 <<scratch space>:198:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x5575d01a1f70 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           | `-ImplicitCastExpr 0x5575d01a2050 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:61:41> 'sys_sflist_t *' <LValueToRValue>
|           |   `-DeclRefExpr 0x5575d01a1f90 <col:41> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a1e38 'list' 'sys_sflist_t *'
|           `-ImplicitCastExpr 0x5575d01a20e8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|             `-ParenExpr 0x5575d01a20c8 <col:14, col:24> 'void *'
|               `-CStyleCastExpr 0x5575d01a20a0 <col:15, col:23> 'void *' <NullToPointer>
|                 `-IntegerLiteral 0x5575d01a2068 <col:23> 'int' 0
|-FunctionDecl 0x5575d01a2250 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:328:1, col:77> col:29 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a21c0 <col:59, col:73> col:73 node 'sys_sfnode_t *'
| `-FullComment 0x5575d02bd5b0 <line:320:3, line:326:55>
|   |-ParagraphComment 0x5575d02bc290 <line:320:3>
|   | `-TextComment 0x5575d02bc260 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bc2b0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5575d02bc310 <col:10, col:64>
|   |   `-TextComment 0x5575d02bc2e0 <col:10, col:64> Text=" Peek the next node from current node, node is not NULL"
|   |-ParagraphComment 0x5575d02bc360 <line:322:3, col:70>
|   | `-TextComment 0x5575d02bc330 <col:3, col:70> Text=" Faster then sys_sflist_peek_next() if node is known not to be NULL."
|   |-ParagraphComment 0x5575d02bc3b0 <line:324:3>
|   | `-TextComment 0x5575d02bc380 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bc3d0 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bd480 <col:15, col:64>
|   |   `-TextComment 0x5575d02bc430 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5575d02bd4d0 <line:326:3>
|   | `-TextComment 0x5575d02bd4a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02bd4f0 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5575d02bd550 <col:11, col:55>
|       `-TextComment 0x5575d02bd520 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5575d01a2398 prev 0x5575d01a2250 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:65:2, line:69:2> <scratch space>:202:1 used sys_sflist_peek_next_no_check 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a2308 <line:204:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:66:64> col:64 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d01a2518 <line:67:2, line:69:2>
|   `-ReturnStmt 0x5575d01a24d8 <line:68:3, col:42>
|     `-CallExpr 0x5575d01a2498 <<scratch space>:206:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x5575d01a2480 <<scratch space>:206:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d01a2440 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d019fd00 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       `-ImplicitCastExpr 0x5575d01a24c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:68:38> 'sys_sfnode_t *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d01a2460 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a2308 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5575d01a25e0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:339:1, col:68> col:29 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a2540 <col:50, col:64> col:64 node 'sys_sfnode_t *'
| `-FullComment 0x5575d02bd8f0 <line:333:3, line:337:55>
|   |-ParagraphComment 0x5575d02bd650 <line:333:3>
|   | `-TextComment 0x5575d02bd620 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bd670 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5575d02bd6d0 <col:10, col:46>
|   |   `-TextComment 0x5575d02bd6a0 <col:10, col:46> Text=" Peek the next node from current node"
|   |-ParagraphComment 0x5575d02bd720 <line:335:3>
|   | `-TextComment 0x5575d02bd6f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bd740 <col:4, col:64> [in] implicitly Param="node" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bd7d0 <col:15, col:64>
|   |   `-TextComment 0x5575d02bd7a0 <col:15, col:64> Text=" A pointer on the node where to peek the next node"
|   |-ParagraphComment 0x5575d02bd820 <line:337:3>
|   | `-TextComment 0x5575d02bd7f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02bd840 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5575d02bd8a0 <col:11, col:55>
|       `-TextComment 0x5575d02bd870 <col:11, col:55> Text=" a pointer on the next node (or NULL if none)"
|-FunctionDecl 0x5575d01a2728 prev 0x5575d01a25e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:72:2, line:78:2> <scratch space>:210:1 used sys_sflist_peek_next 'sys_sfnode_t *(sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a2698 <line:212:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:73:55> col:55 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d01a2a58 <line:74:2, line:78:2>
|   `-ReturnStmt 0x5575d01a2a20 <line:75:3, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ConditionalOperator 0x5575d01a29f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'sys_sfnode_t *'
|       |-BinaryOperator 0x5575d01a28a0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|       | |-ImplicitCastExpr 0x5575d01a2870 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:75:10> 'sys_sfnode_t *' <LValueToRValue>
|       | | `-DeclRefExpr 0x5575d01a27d0 <col:10> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a2698 'node' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x5575d01a2888 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x5575d01a2850 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5575d01a2828 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5575d01a27f0 <col:23> 'int' 0
|       |-CallExpr 0x5575d01a2918 <<scratch space>:214:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:47> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5575d01a2900 <<scratch space>:214:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5575d01a28c0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d01a2398 'sys_sflist_peek_next_no_check' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | `-ImplicitCastExpr 0x5575d01a2940 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:76:43> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5575d01a28e0 <col:43> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a2698 'node' 'sys_sfnode_t *'
|       `-ImplicitCastExpr 0x5575d01a29d8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|         `-ParenExpr 0x5575d01a29b8 <col:14, col:24> 'void *'
|           `-CStyleCastExpr 0x5575d01a2990 <col:15, col:23> 'void *' <NullToPointer>
|             `-IntegerLiteral 0x5575d01a2958 <col:23> 'int' 0
|-FunctionDecl 0x5575d01a2b90 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:351:1, line:352:29> line:351:20 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a2a80 <col:39, col:53> col:53 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a2af8 <line:352:11, col:25> col:25 node 'sys_sfnode_t *'
| `-FullComment 0x5575d02bdc80 <line:344:3, line:349:47>
|   |-ParagraphComment 0x5575d02bd990 <line:344:3>
|   | `-TextComment 0x5575d02bd960 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bd9b0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d02bda10 <col:10, col:42>
|   |   `-TextComment 0x5575d02bd9e0 <col:10, col:42> Text=" Prepend a node to the given list"
|   |-ParagraphComment 0x5575d02bda60 <line:346:3, col:63>
|   | `-TextComment 0x5575d02bda30 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02bdab0 <line:348:3>
|   | `-TextComment 0x5575d02bda80 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bdad0 <col:4, line:349:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bdb80 <line:348:15, line:349:3>
|   |   |-TextComment 0x5575d02bdb30 <line:348:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02bdb50 <line:349:3> Text=" "
|   `-ParamCommandComment 0x5575d02bdba0 <col:4, col:47> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5575d02bdc30 <col:15, col:47>
|       `-TextComment 0x5575d02bdc00 <col:15, col:47> Text=" A pointer on the node to prepend"
|-FunctionDecl 0x5575d01a2d60 prev 0x5575d01a2b90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:81:2, line:93:2> <scratch space>:216:1 used sys_sflist_prepend 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a2c50 <line:218:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:82:53> col:53 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a2cc8 <<scratch space>:220:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:83:32> col:32 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d01a33c8 <line:84:2, line:93:2>
|   |-CallExpr 0x5575d01a2f68 <<scratch space>:222:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:41> 'void'
|   | |-ImplicitCastExpr 0x5575d01a2f50 <<scratch space>:222:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d01a2e10 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5575d01a02a0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5575d01a2f98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:85:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d01a2e30 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a2cc8 'node' 'sys_sfnode_t *'
|   | `-CallExpr 0x5575d01a2ea8 <<scratch space>:224:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:40> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5575d01a2e90 <<scratch space>:224:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5575d01a2e50 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x5575d01a2ed0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:86:36> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d01a2e70 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a2c50 'list' 'sys_sflist_t *'
|   |-CallExpr 0x5575d01a3088 <<scratch space>:226:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:40> 'void'
|   | |-ImplicitCastExpr 0x5575d01a3070 <<scratch space>:226:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d01a2fb0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0820 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5575d01a30b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:87:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d01a2fd0 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a2c50 'list' 'sys_sflist_t *'
|   | `-ImplicitCastExpr 0x5575d01a30d0 <col:36> 'sys_sfnode_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5575d01a2ff0 <col:36> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a2cc8 'node' 'sys_sfnode_t *'
|   `-IfStmt 0x5575d01a3388 <line:89:3, line:92:3>
|     |-BinaryOperator 0x5575d01a3218 <<scratch space>:228:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5575d01a3140 <<scratch space>:228:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x5575d01a3128 <<scratch space>:228:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5575d01a30e8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x5575d01a3168 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5575d01a3108 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a2c50 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x5575d01a3200 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x5575d01a31e0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5575d01a31b8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5575d01a3180 <col:23> 'int' 0
|     `-CompoundStmt 0x5575d01a3370 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:89:52, line:92:3>
|       `-CallExpr 0x5575d01a3328 <<scratch space>:230:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:41> 'void'
|         |-ImplicitCastExpr 0x5575d01a3310 <<scratch space>:230:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575d01a3238 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0ac8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x5575d01a3358 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:90:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5575d01a3258 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a2c50 'list' 'sys_sflist_t *'
|         `-CallExpr 0x5575d01a32d0 <<scratch space>:232:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:40> 'sys_sfnode_t *'
|           |-ImplicitCastExpr 0x5575d01a32b8 <<scratch space>:232:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5575d01a3278 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|           `-ImplicitCastExpr 0x5575d01a32f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:91:36> 'sys_sflist_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5575d01a3298 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a2c50 'list' 'sys_sflist_t *'
|-FunctionDecl 0x5575d01a3510 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:364:1, line:365:28> line:364:20 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a3400 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a3478 <line:365:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x5575d02be010 <line:357:3, line:362:46>
|   |-ParagraphComment 0x5575d02bdd20 <line:357:3>
|   | `-TextComment 0x5575d02bdcf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bdd40 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02bdda0 <col:10, col:41>
|   |   `-TextComment 0x5575d02bdd70 <col:10, col:41> Text=" Append a node to the given list"
|   |-ParagraphComment 0x5575d02bddf0 <line:359:3, col:63>
|   | `-TextComment 0x5575d02bddc0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02bde40 <line:361:3>
|   | `-TextComment 0x5575d02bde10 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bde60 <col:4, line:362:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bdf10 <line:361:15, line:362:3>
|   |   |-TextComment 0x5575d02bdec0 <line:361:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02bdee0 <line:362:3> Text=" "
|   `-ParamCommandComment 0x5575d02bdf30 <col:4, col:46> [in] implicitly Param="node" ParamIndex=1
|     `-ParagraphComment 0x5575d02bdfc0 <col:15, col:46>
|       `-TextComment 0x5575d02bdf90 <col:15, col:46> Text=" A pointer on the node to append"
|-FunctionDecl 0x5575d01a3700 prev 0x5575d01a3510 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:96:2, line:111:2> <scratch space>:234:1 used sys_sflist_append 'void (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a35f0 <line:236:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:97:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a3668 <<scratch space>:238:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:98:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d01a3e88 <line:99:2, line:111:2>
|   |-CallExpr 0x5575d01a3888 <<scratch space>:240:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:40> 'void'
|   | |-ImplicitCastExpr 0x5575d01a3870 <<scratch space>:240:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d01a37b0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5575d01a02a0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5575d01a38b8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:100:30> 'sys_sfnode_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d01a37d0 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a3668 'node' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x5575d01a38d0 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |   `-ParenExpr 0x5575d01a3850 <col:14, col:24> 'void *'
|   |     `-CStyleCastExpr 0x5575d01a3828 <col:15, col:23> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x5575d01a37f0 <col:23> 'int' 0
|   `-IfStmt 0x5575d01a3e38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:3, line:110:3> has_else
|     |-BinaryOperator 0x5575d01a3a18 <<scratch space>:242:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-CallExpr 0x5575d01a3940 <<scratch space>:242:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:41> 'sys_sfnode_t *'
|     | | |-ImplicitCastExpr 0x5575d01a3928 <<scratch space>:242:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5575d01a38e8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|     | | `-ImplicitCastExpr 0x5575d01a3968 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:37> 'sys_sflist_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5575d01a3908 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a35f0 'list' 'sys_sflist_t *'
|     | `-ImplicitCastExpr 0x5575d01a3a00 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x5575d01a39e0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5575d01a39b8 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5575d01a3980 <col:23> 'int' 0
|     |-CompoundStmt 0x5575d01a3be8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:102:52, line:105:3>
|     | |-CallExpr 0x5575d01a3ab0 <<scratch space>:244:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:41> 'void'
|     | | |-ImplicitCastExpr 0x5575d01a3a98 <<scratch space>:244:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5575d01a3a38 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0ac8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     | | |-ImplicitCastExpr 0x5575d01a3ae0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:103:31> 'sys_sflist_t *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5575d01a3a58 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a35f0 'list' 'sys_sflist_t *'
|     | | `-ImplicitCastExpr 0x5575d01a3af8 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5575d01a3a78 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a3668 'node' 'sys_sfnode_t *'
|     | `-CallExpr 0x5575d01a3b88 <<scratch space>:246:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:41> 'void'
|     |   |-ImplicitCastExpr 0x5575d01a3b70 <<scratch space>:246:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5575d01a3b10 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0820 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x5575d01a3bb8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:104:31> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5575d01a3b30 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a35f0 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x5575d01a3bd0 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5575d01a3b50 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a3668 'node' 'sys_sfnode_t *'
|     `-CompoundStmt 0x5575d01a3e18 <line:105:10, line:110:3>
|       |-CallExpr 0x5575d01a3cf8 <<scratch space>:248:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:108:9> 'void'
|       | |-ImplicitCastExpr 0x5575d01a3ce0 <<scratch space>:248:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5575d01a3c08 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5575d01a02a0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|       | |-CallExpr 0x5575d01a3c80 <line:250:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:39> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x5575d01a3c68 <<scratch space>:250:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5575d01a3c28 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | | `-ImplicitCastExpr 0x5575d01a3ca8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:107:35> 'sys_sflist_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5575d01a3c48 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a35f0 'list' 'sys_sflist_t *'
|       | `-ImplicitCastExpr 0x5575d01a3d28 <line:108:5> 'sys_sfnode_t *' <LValueToRValue>
|       |   `-DeclRefExpr 0x5575d01a3cc0 <col:5> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a3668 'node' 'sys_sfnode_t *'
|       `-CallExpr 0x5575d01a3db8 <<scratch space>:252:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:41> 'void'
|         |-ImplicitCastExpr 0x5575d01a3da0 <<scratch space>:252:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575d01a3d40 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0ac8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|         |-ImplicitCastExpr 0x5575d01a3de8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:109:31> 'sys_sflist_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x5575d01a3d60 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a35f0 'list' 'sys_sflist_t *'
|         `-ImplicitCastExpr 0x5575d01a3e00 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5575d01a3d80 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a3668 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5575d01a40f0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:382:1, line:383:30> line:382:20 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5575d01a3eb8 <col:43, col:57> col:57 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a3f38 <line:383:8, col:14> col:14 head 'void *'
| |-ParmVarDecl 0x5575d01a3fb8 <col:20, col:26> col:26 tail 'void *'
| `-FullComment 0x5575d02be570 <line:370:3, line:380:66>
|   |-ParagraphComment 0x5575d02be0b0 <line:370:3>
|   | `-TextComment 0x5575d02be080 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02be0d0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02be130 <col:10, col:41>
|   |   `-TextComment 0x5575d02be100 <col:10, col:41> Text=" Append a list to the given list"
|   |-ParagraphComment 0x5575d02be220 <line:372:3, line:374:63>
|   | |-TextComment 0x5575d02be150 <line:372:3, col:78> Text=" Append a singly-linked, NULL-terminated list consisting of nodes containing"
|   | |-TextComment 0x5575d02be170 <line:373:3, col:67> Text=" the pointer to the next node as the first element of a node, to "
|   | |-InlineCommandComment 0x5575d02be1c0 <col:68, col:69> Name="a" RenderEmphasized Arg[0]="list."
|   | `-TextComment 0x5575d02be1e0 <line:374:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02be270 <line:376:3, col:48>
|   | `-TextComment 0x5575d02be240 <col:3, col:48> Text=" FIXME: Why are the element parameters void *?"
|   |-ParagraphComment 0x5575d02be2c0 <line:378:3>
|   | `-TextComment 0x5575d02be290 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02be2e0 <col:4, line:379:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02be390 <line:378:15, line:379:3>
|   |   |-TextComment 0x5575d02be340 <line:378:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02be360 <line:379:3> Text=" "
|   |-ParamCommandComment 0x5575d02be3b0 <col:4, line:380:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5575d02be460 <line:379:15, line:380:3>
|   |   |-TextComment 0x5575d02be410 <line:379:15, col:67> Text=" A pointer to the first element of the list to append"
|   |   `-TextComment 0x5575d02be430 <line:380:3> Text=" "
|   `-ParamCommandComment 0x5575d02be480 <col:4, col:66> [in] implicitly Param="tail" ParamIndex=2
|     `-ParagraphComment 0x5575d02be510 <col:15, col:66>
|       `-TextComment 0x5575d02be4e0 <col:15, col:66> Text=" A pointer to the last element of the list to append"
|-FunctionDecl 0x5575d01a4358 prev 0x5575d01a40f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:114:2, line:127:42> <scratch space>:254:1 used sys_sflist_append_list 'void (sys_sflist_t *, void *, void *)' static inline
| |-ParmVarDecl 0x5575d01a41b8 <line:256:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:115:57> col:57 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a4238 <line:116:6, col:12> col:12 used head 'void *'
| |-ParmVarDecl 0x5575d01a42b8 <col:18, col:24> col:24 used tail 'void *'
| `-CompoundStmt 0x5575d01a4988 <col:31, line:127:42>
|   |-IfStmt 0x5575d01a4828 <line:118:2, line:125:2> has_else
|   | |-BinaryOperator 0x5575d01a4540 <<scratch space>:258:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-CallExpr 0x5575d01a4468 <<scratch space>:258:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:40> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x5575d01a4450 <<scratch space>:258:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5575d01a4410 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x5575d01a4490 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:36> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5575d01a4430 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a41b8 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x5575d01a4528 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x5575d01a4508 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5575d01a44e0 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5575d01a44a8 <col:23> 'int' 0
|   | |-CompoundStmt 0x5575d01a4688 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:118:51, line:121:2>
|   | | `-CallExpr 0x5575d01a4640 <<scratch space>:260:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:120:35> 'void'
|   | |   |-ImplicitCastExpr 0x5575d01a4628 <<scratch space>:260:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5575d01a4560 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0820 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |   |-ImplicitCastExpr 0x5575d01a4670 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:119:30> 'sys_sflist_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5575d01a4580 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a41b8 'list' 'sys_sflist_t *'
|   | |   `-CStyleCastExpr 0x5575d01a4600 <line:120:6, col:31> 'sys_sfnode_t *' <BitCast>
|   | |     `-ImplicitCastExpr 0x5575d01a45d0 <col:31> 'void *' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x5575d01a45a0 <col:31> 'void *' lvalue ParmVar 0x5575d01a4238 'head' 'void *'
|   | `-CompoundStmt 0x5575d01a4810 <line:121:9, line:125:2>
|   |   `-CallExpr 0x5575d01a47e0 <<scratch space>:264:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:124:33> 'void'
|   |     |-ImplicitCastExpr 0x5575d01a47c8 <<scratch space>:264:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575d01a46a0 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5575d01a02a0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |     |-CallExpr 0x5575d01a4718 <line:266:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:38> 'sys_sfnode_t *'
|   |     | |-ImplicitCastExpr 0x5575d01a4700 <<scratch space>:266:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5575d01a46c0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | `-ImplicitCastExpr 0x5575d01a4740 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:123:34> 'sys_sflist_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5575d01a46e0 <col:34> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a41b8 'list' 'sys_sflist_t *'
|   |     `-CStyleCastExpr 0x5575d01a47a0 <line:124:4, col:29> 'sys_sfnode_t *' <BitCast>
|   |       `-ImplicitCastExpr 0x5575d01a4788 <col:29> 'void *' <LValueToRValue> part_of_explicit_cast
|   |         `-DeclRefExpr 0x5575d01a4758 <col:29> 'void *' lvalue ParmVar 0x5575d01a4238 'head' 'void *'
|   `-CallExpr 0x5575d01a4918 <<scratch space>:270:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:127:39> 'void'
|     |-ImplicitCastExpr 0x5575d01a4900 <<scratch space>:270:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d01a4850 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0ac8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x5575d01a4948 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:126:29> 'sys_sflist_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d01a4870 <col:29> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a41b8 'list' 'sys_sflist_t *'
|     `-CStyleCastExpr 0x5575d01a48d8 <line:127:10, col:35> 'sys_sfnode_t *' <BitCast>
|       `-ImplicitCastExpr 0x5575d01a48c0 <col:35> 'void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5575d01a4890 <col:35> 'void *' lvalue ParmVar 0x5575d01a42b8 'tail' 'void *'
|-FunctionDecl 0x5575d01a4b50 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:396:1, line:397:37> line:396:20 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d01a49b8 <col:44, col:58> col:58 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a4a30 <line:397:9, col:23> col:23 list_to_append 'sys_sflist_t *'
| `-FullComment 0x5575d02be920 <line:388:3, line:394:57>
|   |-ParagraphComment 0x5575d02be610 <line:388:3>
|   | `-TextComment 0x5575d02be5e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02be630 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x5575d02be690 <col:10, col:66>
|   |   `-TextComment 0x5575d02be660 <col:10, col:66> Text=" merge two sflists, appending the second one to the first"
|   |-ParagraphComment 0x5575d02be700 <line:390:3, line:391:63>
|   | |-TextComment 0x5575d02be6b0 <line:390:3, col:64> Text=" When the operation is completed, the appending list is empty."
|   | `-TextComment 0x5575d02be6d0 <line:391:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02be750 <line:393:3>
|   | `-TextComment 0x5575d02be720 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02be770 <col:4, line:394:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02be820 <line:393:15, line:394:3>
|   |   |-TextComment 0x5575d02be7d0 <line:393:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02be7f0 <line:394:3> Text=" "
|   `-ParamCommandComment 0x5575d02be840 <col:4, col:57> [in] implicitly Param="list_to_append" ParamIndex=1
|     `-ParagraphComment 0x5575d02be8d0 <col:25, col:57>
|       `-TextComment 0x5575d02be8a0 <col:25, col:57> Text=" A pointer to the list to append."
|-FunctionDecl 0x5575d01a4d20 prev 0x5575d01a4b50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:131:2, line:141:2> <scratch space>:275:1 sys_sflist_merge_sflist 'void (sys_sflist_t *, sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d01a4c10 <line:277:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:133:28> col:28 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a4c88 <<scratch space>:279:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:134:28> col:28 used list_to_append 'sys_sflist_t *'
| `-CompoundStmt 0x5575d01a5378 <line:135:2, line:141:2>
|   |-DeclStmt 0x5575d01a4ed8 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:37>
|   | |-VarDecl 0x5575d01a4de0 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:26> col:26 used head 'sys_sfnode_t *'
|   | `-VarDecl 0x5575d01a4e58 <<scratch space>:281:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:136:33> col:33 used tail 'sys_sfnode_t *'
|   |-BinaryOperator 0x5575d01a4fa8 <line:137:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x5575d01a4ef0 <col:3> 'sys_sfnode_t *' lvalue Var 0x5575d01a4de0 'head' 'sys_sfnode_t *'
|   | `-CallExpr 0x5575d01a4f68 <<scratch space>:2:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5575d01a4f50 <<scratch space>:2:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5575d01a4f10 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x5575d01a4f90 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:137:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d01a4f30 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a4c88 'list_to_append' 'sys_sflist_t *'
|   |-BinaryOperator 0x5575d01a5080 <line:138:3, col:54> 'sys_sfnode_t *' '='
|   | |-DeclRefExpr 0x5575d01a4fc8 <col:3> 'sys_sfnode_t *' lvalue Var 0x5575d01a4e58 'tail' 'sys_sfnode_t *'
|   | `-CallExpr 0x5575d01a5040 <<scratch space>:4:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:54> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5575d01a5028 <<scratch space>:4:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5575d01a4fe8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |   `-ImplicitCastExpr 0x5575d01a5068 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:138:40> 'sys_sflist_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d01a5008 <col:40> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a4c88 'list_to_append' 'sys_sflist_t *'
|   |-CallExpr 0x5575d01a5198 <<scratch space>:6:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:51> 'void'
|   | |-ImplicitCastExpr 0x5575d01a5180 <<scratch space>:6:1> 'void (*)(sys_sflist_t *, void *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d01a50a0 <col:1> 'void (sys_sflist_t *, void *, void *)' Function 0x5575d01a4358 'sys_sflist_append_list' 'void (sys_sflist_t *, void *, void *)'
|   | |-ImplicitCastExpr 0x5575d01a51d0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:139:35> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d01a50c0 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a4c10 'list' 'sys_sflist_t *'
|   | |-ImplicitCastExpr 0x5575d01a5200 <col:41> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x5575d01a51e8 <col:41> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5575d01a50e0 <col:41> 'sys_sfnode_t *' lvalue Var 0x5575d01a4de0 'head' 'sys_sfnode_t *'
|   | `-ImplicitCastExpr 0x5575d01a5230 <col:47> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x5575d01a5218 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d01a5100 <col:47> 'sys_sfnode_t *' lvalue Var 0x5575d01a4e58 'tail' 'sys_sfnode_t *'
|   `-CallExpr 0x5575d01a5308 <<scratch space>:8:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:42> 'void'
|     |-ImplicitCastExpr 0x5575d01a52f0 <<scratch space>:8:1> 'void (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d01a5248 <col:1> 'void (sys_sflist_t *)' Function 0x5575d019f8e0 'sys_sflist_init' 'void (sys_sflist_t *)'
|     `-ImplicitCastExpr 0x5575d01a5330 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:140:28> 'sys_sflist_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d01a5268 <col:28> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a4c88 'list_to_append' 'sys_sflist_t *'
|-FunctionDecl 0x5575d01a6630 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:410:1, line:412:28> line:410:20 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a53c0 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a5438 <line:411:10, col:24> col:24 prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x5575d01a54b0 <line:412:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x5575d02bed90 <line:402:3, line:408:46>
|   |-ParagraphComment 0x5575d02be9c0 <line:402:3>
|   | `-TextComment 0x5575d02be990 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02be9e0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02bea40 <col:10, col:41>
|   |   `-TextComment 0x5575d02bea10 <col:10, col:41> Text=" Insert a node to the given list"
|   |-ParagraphComment 0x5575d02bea90 <line:404:3, col:63>
|   | `-TextComment 0x5575d02bea60 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02beae0 <line:406:3>
|   | `-TextComment 0x5575d02beab0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02beb00 <col:4, line:407:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bebb0 <line:406:15, line:407:3>
|   |   |-TextComment 0x5575d02beb60 <line:406:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02beb80 <line:407:3> Text=" "
|   |-ParamCommandComment 0x5575d02bebd0 <col:4, line:408:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x5575d02bec80 <line:407:15, line:408:3>
|   |   |-TextComment 0x5575d02bec30 <line:407:15, col:45> Text=" A pointer on the previous node"
|   |   `-TextComment 0x5575d02bec50 <line:408:3> Text=" "
|   `-ParamCommandComment 0x5575d02beca0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5575d02bed30 <col:15, col:46>
|       `-TextComment 0x5575d02bed00 <col:15, col:46> Text=" A pointer on the node to insert"
|-FunctionDecl 0x5575d01a6888 prev 0x5575d01a6630 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:144:2, line:158:2> <scratch space>:10:1 sys_sflist_insert 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01a66f8 <line:12:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:145:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01a6770 <<scratch space>:14:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:146:31> col:31 used prev 'sys_sfnode_t *'
| |-ParmVarDecl 0x5575d01a67e8 <<scratch space>:16:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:147:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d01a7008 <line:148:2, line:158:2>
|   `-IfStmt 0x5575d01a6fb8 <line:149:3, line:157:3> has_else
|     |-BinaryOperator 0x5575d01a6a10 <line:149:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|     | |-ImplicitCastExpr 0x5575d01a69e0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:7> 'sys_sfnode_t *' <LValueToRValue>
|     | | `-DeclRefExpr 0x5575d01a6940 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a6770 'prev' 'sys_sfnode_t *'
|     | `-ImplicitCastExpr 0x5575d01a69f8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|     |   `-ParenExpr 0x5575d01a69c0 <col:14, col:24> 'void *'
|     |     `-CStyleCastExpr 0x5575d01a6998 <col:15, col:23> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x5575d01a6960 <col:23> 'int' 0
|     |-CompoundStmt 0x5575d01a6b08 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:149:21, line:151:3>
|     | `-CallExpr 0x5575d01a6aa8 <<scratch space>:18:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:42> 'void'
|     |   |-ImplicitCastExpr 0x5575d01a6a90 <<scratch space>:18:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5575d01a6a30 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a2d60 'sys_sflist_prepend' 'void (sys_sflist_t *, sys_sfnode_t *)'
|     |   |-ImplicitCastExpr 0x5575d01a6ad8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:150:32> 'sys_sflist_t *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5575d01a6a50 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a66f8 'list' 'sys_sflist_t *'
|     |   `-ImplicitCastExpr 0x5575d01a6af0 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|     |     `-DeclRefExpr 0x5575d01a6a70 <col:38> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a67e8 'node' 'sys_sfnode_t *'
|     `-IfStmt 0x5575d01a6f90 <line:151:10, line:157:3> has_else
|       |-BinaryOperator 0x5575d01a6c50 <<scratch space>:20:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|       | |-CallExpr 0x5575d01a6b78 <<scratch space>:20:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:46> 'sys_sfnode_t *'
|       | | |-ImplicitCastExpr 0x5575d01a6b60 <<scratch space>:20:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5575d01a6b20 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d019fd00 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|       | | `-ImplicitCastExpr 0x5575d01a6ba0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:42> 'sys_sfnode_t *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5575d01a6b40 <col:42> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a6770 'prev' 'sys_sfnode_t *'
|       | `-ImplicitCastExpr 0x5575d01a6c38 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|       |   `-ParenExpr 0x5575d01a6c18 <col:14, col:24> 'void *'
|       |     `-CStyleCastExpr 0x5575d01a6bf0 <col:15, col:23> 'void *' <NullToPointer>
|       |       `-IntegerLiteral 0x5575d01a6bb8 <col:23> 'int' 0
|       |-CompoundStmt 0x5575d01a6d48 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:151:57, line:153:3>
|       | `-CallExpr 0x5575d01a6ce8 <<scratch space>:22:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:41> 'void'
|       |   |-ImplicitCastExpr 0x5575d01a6cd0 <<scratch space>:22:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5575d01a6c70 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a3700 'sys_sflist_append' 'void (sys_sflist_t *, sys_sfnode_t *)'
|       |   |-ImplicitCastExpr 0x5575d01a6d18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:152:31> 'sys_sflist_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5575d01a6c90 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a66f8 'list' 'sys_sflist_t *'
|       |   `-ImplicitCastExpr 0x5575d01a6d30 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5575d01a6cb0 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a67e8 'node' 'sys_sfnode_t *'
|       `-CompoundStmt 0x5575d01a6f70 <line:153:10, line:157:3>
|         |-CallExpr 0x5575d01a6e50 <<scratch space>:24:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:38> 'void'
|         | |-ImplicitCastExpr 0x5575d01a6e38 <<scratch space>:24:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5575d01a6d60 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5575d01a02a0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|         | |-ImplicitCastExpr 0x5575d01a6e80 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:154:31> 'sys_sfnode_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x5575d01a6d80 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a67e8 'node' 'sys_sfnode_t *'
|         | `-CallExpr 0x5575d01a6df8 <<scratch space>:26:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:37> 'sys_sfnode_t *'
|         |   |-ImplicitCastExpr 0x5575d01a6de0 <<scratch space>:26:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x5575d01a6da0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d019fd00 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|         |   `-ImplicitCastExpr 0x5575d01a6e20 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:155:33> 'sys_sfnode_t *' <LValueToRValue>
|         |     `-DeclRefExpr 0x5575d01a6dc0 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a6770 'prev' 'sys_sfnode_t *'
|         `-CallExpr 0x5575d01a6f10 <<scratch space>:28:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:41> 'void'
|           |-ImplicitCastExpr 0x5575d01a6ef8 <<scratch space>:28:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5575d01a6e98 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5575d01a02a0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|           |-ImplicitCastExpr 0x5575d01a6f40 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:156:31> 'sys_sfnode_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x5575d01a6eb8 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a6770 'prev' 'sys_sfnode_t *'
|           `-ImplicitCastExpr 0x5575d01a6f58 <col:37> 'sys_sfnode_t *' <LValueToRValue>
|             `-DeclRefExpr 0x5575d01a6ed8 <col:37> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01a67e8 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5575d01a70c0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:426:1, col:72> col:29 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d01a7030 <col:54, col:68> col:68 list 'sys_sflist_t *'
| `-FullComment 0x5575d02bf150 <line:417:3, line:424:50>
|   |-ParagraphComment 0x5575d02bee30 <line:417:3>
|   | `-TextComment 0x5575d02bee00 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bee50 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5575d02beeb0 <col:10, col:59>
|   |   `-TextComment 0x5575d02bee80 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5575d02bef20 <line:419:3, line:420:63>
|   | |-TextComment 0x5575d02beed0 <line:419:3, col:38> Text=" List must be known to be non-empty."
|   | `-TextComment 0x5575d02beef0 <line:420:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02bef70 <line:422:3>
|   | `-TextComment 0x5575d02bef40 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bef90 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bf020 <col:15, col:46>
|   |   `-TextComment 0x5575d02beff0 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5575d02bf070 <line:424:3>
|   | `-TextComment 0x5575d02bf040 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02bf090 <col:4, col:50> Name="return"
|     `-ParagraphComment 0x5575d02bf0f0 <col:11, col:50>
|       `-TextComment 0x5575d02bf0c0 <col:11, col:50> Text=" A pointer to the first node of the list"
|-FunctionDecl 0x5575d01a7208 prev 0x5575d01a70c0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:161:2, line:175:2> <scratch space>:32:1 used sys_sflist_get_not_empty 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d01a7178 <line:34:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:162:59> col:59 used list 'sys_sflist_t *'
| `-CompoundStmt 0x5575d0192fc8 <line:163:2, line:175:2>
|   |-DeclStmt 0x5575d01a73c0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:40>
|   | `-VarDecl 0x5575d01a72c0 <<scratch space>:36:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> line:164:26 used node 'sys_sfnode_t *' cinit
|   |   `-CallExpr 0x5575d01a7380 <<scratch space>:38:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:39> 'sys_sfnode_t *'
|   |     |-ImplicitCastExpr 0x5575d01a7368 <<scratch space>:38:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575d01a7328 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     `-ImplicitCastExpr 0x5575d01a73a8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:165:35> 'sys_sflist_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5575d01a7348 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a7178 'list' 'sys_sflist_t *'
|   |-CallExpr 0x5575d01a74c8 <<scratch space>:40:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:38> 'void'
|   | |-ImplicitCastExpr 0x5575d01a74b0 <<scratch space>:40:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d01a73d8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0820 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |-ImplicitCastExpr 0x5575d01a74f8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:167:30> 'sys_sflist_t *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5575d01a73f8 <col:30> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a7178 'list' 'sys_sflist_t *'
|   | `-CallExpr 0x5575d01a7470 <<scratch space>:42:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:37> 'sys_sfnode_t *'
|   |   |-ImplicitCastExpr 0x5575d01a7458 <<scratch space>:42:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5575d01a7418 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d019fd00 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   `-ImplicitCastExpr 0x5575d01a7498 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:168:33> 'sys_sfnode_t *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575d01a7438 <col:33> 'sys_sfnode_t *' lvalue Var 0x5575d01a72c0 'node' 'sys_sfnode_t *'
|   |-IfStmt 0x5575d0192f40 <line:169:3, line:172:3>
|   | |-BinaryOperator 0x5575d01a75e0 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:46> 'int' '=='
|   | | |-CallExpr 0x5575d01a7568 <<scratch space>:44:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:41> 'sys_sfnode_t *'
|   | | | |-ImplicitCastExpr 0x5575d01a7550 <<scratch space>:44:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5575d01a7510 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | | | `-ImplicitCastExpr 0x5575d01a7590 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:169:37> 'sys_sflist_t *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5575d01a7530 <col:37> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a7178 'list' 'sys_sflist_t *'
|   | | `-ImplicitCastExpr 0x5575d01a75c8 <col:46> 'sys_sfnode_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5575d01a75a8 <col:46> 'sys_sfnode_t *' lvalue Var 0x5575d01a72c0 'node' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x5575d0192f28 <col:52, line:172:3>
|   |   `-CallExpr 0x5575d0192ee0 <<scratch space>:46:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:40> 'void'
|   |     |-ImplicitCastExpr 0x5575d0192ec8 <<scratch space>:46:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575d01a7600 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0ac8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |     |-ImplicitCastExpr 0x5575d0192f10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:170:31> 'sys_sflist_t *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5575d0192e10 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a7178 'list' 'sys_sflist_t *'
|   |     `-CallExpr 0x5575d0192e88 <<scratch space>:48:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:39> 'sys_sfnode_t *'
|   |       |-ImplicitCastExpr 0x5575d0192e70 <<scratch space>:48:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5575d0192e30 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   |       `-ImplicitCastExpr 0x5575d0192eb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:171:35> 'sys_sflist_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5575d0192e50 <col:35> 'sys_sflist_t *' lvalue ParmVar 0x5575d01a7178 'list' 'sys_sflist_t *'
|   `-ReturnStmt 0x5575d0192f90 <line:174:3, col:10>
|     `-ImplicitCastExpr 0x5575d0192f78 <col:10> 'sys_sfnode_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0192f58 <col:10> 'sys_sfnode_t *' lvalue Var 0x5575d01a72c0 'node' 'sys_sfnode_t *'
|-FunctionDecl 0x5575d0193098 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:439:1, col:62> col:29 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d0193008 <col:44, col:58> col:58 list 'sys_sflist_t *'
| `-FullComment 0x5575d02bf500 <line:431:3, line:437:69>
|   |-ParagraphComment 0x5575d02bf1f0 <line:431:3>
|   | `-TextComment 0x5575d02bf1c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bf210 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5575d02bf270 <col:10, col:59>
|   |   `-TextComment 0x5575d02bf240 <col:10, col:59> Text=" Fetch and remove the first node of the given list"
|   |-ParagraphComment 0x5575d02bf2c0 <line:433:3, col:63>
|   | `-TextComment 0x5575d02bf290 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02bf310 <line:435:3>
|   | `-TextComment 0x5575d02bf2e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bf330 <col:4, col:46> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bf3c0 <col:15, col:46>
|   |   `-TextComment 0x5575d02bf390 <col:15, col:46> Text=" A pointer on the list to affect"
|   |-ParagraphComment 0x5575d02bf410 <line:437:3>
|   | `-TextComment 0x5575d02bf3e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02bf430 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5575d02bf4a0 <col:11, col:69>
|       `-TextComment 0x5575d02bf460 <col:11, col:69> Text=" A pointer to the first node of the list (or NULL if empty)"
|-FunctionDecl 0x5575d01931e0 prev 0x5575d0193098 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:178:2, line:183:2> <scratch space>:52:1 sys_sflist_get 'sys_sfnode_t *(sys_sflist_t *)' static inline
| |-ParmVarDecl 0x5575d0193150 <line:54:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:179:49> col:49 used list 'sys_sflist_t *'
| `-CompoundStmt 0x5575d0193538 <line:180:2, line:183:2>
|   `-ReturnStmt 0x5575d0193500 <line:181:3, line:182:42>
|     `-ConditionalOperator 0x5575d01934d0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|       |-ImplicitCastExpr 0x5575d01934a0 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'int' <IntegralCast>
|       | `-CallExpr 0x5575d0193348 <<scratch space>:56:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:43> 'bool'
|       |   |-ImplicitCastExpr 0x5575d0193330 <<scratch space>:56:1> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5575d0193288 <col:1> 'bool (sys_sflist_t *)' Function 0x5575d01a1ec8 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|       |   `-ImplicitCastExpr 0x5575d0193370 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:181:39> 'sys_sflist_t *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5575d01932a8 <col:39> 'sys_sflist_t *' lvalue ParmVar 0x5575d0193150 'list' 'sys_sflist_t *'
|       |-ImplicitCastExpr 0x5575d01934b8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       | `-ParenExpr 0x5575d01933e8 <col:14, col:24> 'void *'
|       |   `-CStyleCastExpr 0x5575d01933c0 <col:15, col:23> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x5575d0193388 <col:23> 'int' 0
|       `-CallExpr 0x5575d0193460 <<scratch space>:58:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:42> 'sys_sfnode_t *'
|         |-ImplicitCastExpr 0x5575d0193448 <<scratch space>:58:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575d0193408 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a7208 'sys_sflist_get_not_empty' 'sys_sfnode_t *(sys_sflist_t *)'
|         `-ImplicitCastExpr 0x5575d0193488 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:182:38> 'sys_sflist_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5575d0193428 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x5575d0193150 'list' 'sys_sflist_t *'
|-FunctionDecl 0x5575d01936f0 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:453:1, line:455:28> line:453:20 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d0193560 <col:38, col:52> col:52 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d01935d8 <line:454:10, col:24> col:24 prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5575d0193650 <line:455:10, col:24> col:24 node 'sys_sfnode_t *'
| `-FullComment 0x5575d02bf9a0 <line:444:3, line:451:46>
|   |-ParagraphComment 0x5575d02bf5a0 <line:444:3>
|   | `-TextComment 0x5575d02bf570 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bf5c0 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5575d02bf620 <col:10, col:23>
|   |   `-TextComment 0x5575d02bf5f0 <col:10, col:23> Text=" Remove a node"
|   |-ParagraphComment 0x5575d02bf670 <line:446:3, col:63>
|   | `-TextComment 0x5575d02bf640 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02bf6c0 <line:448:3>
|   | `-TextComment 0x5575d02bf690 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bf6e0 <col:4, line:449:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bf790 <line:448:15, line:449:3>
|   |   |-TextComment 0x5575d02bf740 <line:448:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02bf760 <line:449:3> Text=" "
|   |-ParamCommandComment 0x5575d02bf7b0 <col:4, line:451:3> [in] implicitly Param="prev_node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02bf890 <line:449:20, line:451:3>
|   |   |-TextComment 0x5575d02bf810 <line:449:20, col:50> Text=" A pointer on the previous node"
|   |   |-TextComment 0x5575d02bf830 <line:450:3, col:64> Text="        (can be NULL, which means the node is the list's head)"
|   |   `-TextComment 0x5575d02bf850 <line:451:3> Text=" "
|   `-ParamCommandComment 0x5575d02bf8b0 <col:4, col:46> [in] implicitly Param="node" ParamIndex=2
|     `-ParagraphComment 0x5575d02bf940 <col:15, col:46>
|       `-TextComment 0x5575d02bf910 <col:15, col:46> Text=" A pointer on the node to remove"
|-FunctionDecl 0x5575d0193948 prev 0x5575d01936f0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:186:2, line:212:2> <scratch space>:60:1 used sys_sflist_remove 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01937b8 <line:62:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:187:52> col:52 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d0193830 <<scratch space>:64:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:188:31> col:31 used prev_node 'sys_sfnode_t *'
| |-ParmVarDecl 0x5575d01938a8 <<scratch space>:66:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:189:31> col:31 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d0194398 <line:190:2, line:212:2>
|   |-IfStmt 0x5575d0194208 <line:191:3, line:209:3> has_else
|   | |-BinaryOperator 0x5575d0193ad0 <line:191:7, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '=='
|   | | |-ImplicitCastExpr 0x5575d0193aa0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:7> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5575d0193a00 <col:7> 'sys_sfnode_t *' lvalue ParmVar 0x5575d0193830 'prev_node' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x5575d0193ab8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x5575d0193a80 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5575d0193a58 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5575d0193a20 <col:23> 'int' 0
|   | |-CompoundStmt 0x5575d0193e98 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:191:26, line:200:3>
|   | | |-CallExpr 0x5575d0193be0 <<scratch space>:68:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:38> 'void'
|   | | | |-ImplicitCastExpr 0x5575d0193bc8 <<scratch space>:68:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5575d0193af0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0820 'z_sflist_head_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | | | |-ImplicitCastExpr 0x5575d0193c10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:192:31> 'sys_sflist_t *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5575d0193b10 <col:31> 'sys_sflist_t *' lvalue ParmVar 0x5575d01937b8 'list' 'sys_sflist_t *'
|   | | | `-CallExpr 0x5575d0193b88 <<scratch space>:70:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:37> 'sys_sfnode_t *'
|   | | |   |-ImplicitCastExpr 0x5575d0193b70 <<scratch space>:70:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5575d0193b30 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d019fd00 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | | |   `-ImplicitCastExpr 0x5575d0193bb0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:193:33> 'sys_sfnode_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5575d0193b50 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01938a8 'node' 'sys_sfnode_t *'
|   | | `-IfStmt 0x5575d0193e80 <line:196:4, line:199:4>
|   | |   |-BinaryOperator 0x5575d0193cf8 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:47> 'int' '=='
|   | |   | |-CallExpr 0x5575d0193c80 <<scratch space>:72:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:42> 'sys_sfnode_t *'
|   | |   | | |-ImplicitCastExpr 0x5575d0193c68 <<scratch space>:72:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x5575d0193c28 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   | | `-ImplicitCastExpr 0x5575d0193ca8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:196:38> 'sys_sflist_t *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x5575d0193c48 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x5575d01937b8 'list' 'sys_sflist_t *'
|   | |   | `-ImplicitCastExpr 0x5575d0193ce0 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x5575d0193cc0 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01938a8 'node' 'sys_sfnode_t *'
|   | |   `-CompoundStmt 0x5575d0193e68 <col:53, line:199:4>
|   | |     `-CallExpr 0x5575d0193e20 <<scratch space>:74:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:41> 'void'
|   | |       |-ImplicitCastExpr 0x5575d0193df0 <<scratch space>:74:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5575d0193d18 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0ac8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   | |       |-ImplicitCastExpr 0x5575d0193e50 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:197:32> 'sys_sflist_t *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5575d0193d38 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5575d01937b8 'list' 'sys_sflist_t *'
|   | |       `-CallExpr 0x5575d0193db0 <<scratch space>:76:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:40> 'sys_sfnode_t *'
|   | |         |-ImplicitCastExpr 0x5575d0193d98 <<scratch space>:76:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x5575d0193d58 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |         `-ImplicitCastExpr 0x5575d0193dd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:198:36> 'sys_sflist_t *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x5575d0193d78 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5575d01937b8 'list' 'sys_sflist_t *'
|   | `-CompoundStmt 0x5575d01941e8 <line:200:10, line:209:3>
|   |   |-CallExpr 0x5575d0193fa8 <<scratch space>:78:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:38> 'void'
|   |   | |-ImplicitCastExpr 0x5575d0193f90 <<scratch space>:78:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5575d0193eb8 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5575d01a02a0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|   |   | |-ImplicitCastExpr 0x5575d0193fd8 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:201:31> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x5575d0193ed8 <col:31> 'sys_sfnode_t *' lvalue ParmVar 0x5575d0193830 'prev_node' 'sys_sfnode_t *'
|   |   | `-CallExpr 0x5575d0193f50 <<scratch space>:80:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:37> 'sys_sfnode_t *'
|   |   |   |-ImplicitCastExpr 0x5575d0193f38 <<scratch space>:80:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x5575d0193ef8 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d019fd00 'z_sfnode_next_peek' 'sys_sfnode_t *(sys_sfnode_t *)'
|   |   |   `-ImplicitCastExpr 0x5575d0193f78 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:202:33> 'sys_sfnode_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5575d0193f18 <col:33> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01938a8 'node' 'sys_sfnode_t *'
|   |   `-IfStmt 0x5575d01941d0 <line:205:4, line:208:4>
|   |     |-BinaryOperator 0x5575d01940c0 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:47> 'int' '=='
|   |     | |-CallExpr 0x5575d0194048 <<scratch space>:82:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:42> 'sys_sfnode_t *'
|   |     | | |-ImplicitCastExpr 0x5575d0194030 <<scratch space>:82:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x5575d0193ff0 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|   |     | | `-ImplicitCastExpr 0x5575d0194070 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:205:38> 'sys_sflist_t *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5575d0194010 <col:38> 'sys_sflist_t *' lvalue ParmVar 0x5575d01937b8 'list' 'sys_sflist_t *'
|   |     | `-ImplicitCastExpr 0x5575d01940a8 <col:47> 'sys_sfnode_t *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5575d0194088 <col:47> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01938a8 'node' 'sys_sfnode_t *'
|   |     `-CompoundStmt 0x5575d01941b8 <col:53, line:208:4>
|   |       `-CallExpr 0x5575d0194158 <<scratch space>:84:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:207:22> 'void'
|   |         |-ImplicitCastExpr 0x5575d0194140 <<scratch space>:84:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5575d01940e0 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d01a0ac8 'z_sflist_tail_set' 'void (sys_sflist_t *, sys_sfnode_t *)'
|   |         |-ImplicitCastExpr 0x5575d0194188 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:206:32> 'sys_sflist_t *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5575d0194100 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5575d01937b8 'list' 'sys_sflist_t *'
|   |         `-ImplicitCastExpr 0x5575d01941a0 <line:207:13> 'sys_sfnode_t *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5575d0194120 <col:13> 'sys_sfnode_t *' lvalue ParmVar 0x5575d0193830 'prev_node' 'sys_sfnode_t *'
|   `-CallExpr 0x5575d0194308 <<scratch space>:86:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:40> 'void'
|     |-ImplicitCastExpr 0x5575d01942f0 <<scratch space>:86:1> 'void (*)(sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0194230 <col:1> 'void (sys_sfnode_t *, sys_sfnode_t *)' Function 0x5575d01a02a0 'z_sfnode_next_set' 'void (sys_sfnode_t *, sys_sfnode_t *)'
|     |-ImplicitCastExpr 0x5575d0194338 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:211:30> 'sys_sfnode_t *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d0194250 <col:30> 'sys_sfnode_t *' lvalue ParmVar 0x5575d01938a8 'node' 'sys_sfnode_t *'
|     `-ImplicitCastExpr 0x5575d0194350 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|       `-ParenExpr 0x5575d01942d0 <col:14, col:24> 'void *'
|         `-CStyleCastExpr 0x5575d01942a8 <col:15, col:23> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x5575d0194270 <col:23> 'int' 0
|-FunctionDecl 0x5575d0194560 </vagrant/ext/zephyros/zephyr/include/sys/sflist.h:469:1, line:470:30> line:469:20 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d01943c8 <col:47, col:61> col:61 list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d0194440 <line:470:12, col:26> col:26 node 'sys_sfnode_t *'
| `-FullComment 0x5575d02bfe10 <line:460:3, line:467:35>
|   |-ParagraphComment 0x5575d02bfa40 <line:460:3>
|   | `-TextComment 0x5575d02bfa10 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bfa60 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02bfac0 <col:10, col:44>
|   |   `-TextComment 0x5575d02bfa90 <col:10, col:44> Text=" Find and remove a node from a list"
|   |-ParagraphComment 0x5575d02bfb10 <line:462:3, col:63>
|   | `-TextComment 0x5575d02bfae0 <col:3, col:63> Text=" This and other sys_sflist_*() functions are not thread safe."
|   |-ParagraphComment 0x5575d02bfb60 <line:464:3>
|   | `-TextComment 0x5575d02bfb30 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02bfb80 <col:4, line:465:3> [in] implicitly Param="list" ParamIndex=0
|   | `-ParagraphComment 0x5575d02bfc30 <line:464:15, line:465:3>
|   |   |-TextComment 0x5575d02bfbe0 <line:464:15, col:46> Text=" A pointer on the list to affect"
|   |   `-TextComment 0x5575d02bfc00 <line:465:3> Text=" "
|   |-ParamCommandComment 0x5575d02bfc50 <col:4, col:60> [in] implicitly Param="node" ParamIndex=1
|   | `-ParagraphComment 0x5575d02bfce0 <col:15, col:60>
|   |   `-TextComment 0x5575d02bfcb0 <col:15, col:60> Text=" A pointer on the node to remove from the list"
|   |-ParagraphComment 0x5575d02bfd30 <line:467:3>
|   | `-TextComment 0x5575d02bfd00 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02bfd50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02bfdb0 <col:11, col:35>
|       `-TextComment 0x5575d02bfd80 <col:11, col:35> Text=" true if node was removed"
|-FunctionDecl 0x5575d0194730 prev 0x5575d0194560 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:215:2, line:233:2> <scratch space>:88:1 used sys_sflist_find_and_remove 'bool (sys_sflist_t *, sys_sfnode_t *)' static inline
| |-ParmVarDecl 0x5575d0194620 <line:90:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:216:61> col:61 used list 'sys_sflist_t *'
| |-ParmVarDecl 0x5575d0194698 <<scratch space>:92:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:217:33> col:33 used node 'sys_sfnode_t *'
| `-CompoundStmt 0x5575d0194ff8 <line:218:2, line:233:2>
|   |-DeclStmt 0x5575d01948f0 <<scratch space>:94:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:37>
|   | `-VarDecl 0x5575d01947f0 <<scratch space>:94:1, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:219:26 used prev 'sys_sfnode_t *' cinit
|   |   `-ImplicitCastExpr 0x5575d01948d8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <NullToPointer>
|   |     `-ParenExpr 0x5575d01948b8 <col:14, col:24> 'void *'
|   |       `-CStyleCastExpr 0x5575d0194890 <col:15, col:23> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x5575d0194858 <col:23> 'int' 0
|   |-DeclStmt 0x5575d0194980 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:30>
|   | `-VarDecl 0x5575d0194918 <<scratch space>:96:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:220:26> col:26 used test 'sys_sfnode_t *'
|   |-ForStmt 0x5575d0194f78 <line:15:2, line:230:3>
|   | |-BinaryOperator 0x5575d0194a50 <line:222:42, line:15:47> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x5575d0194998 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x5575d0194918 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x5575d0194a10 <<scratch space>:98:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x5575d01949f8 <<scratch space>:98:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5575d01949b8 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|   | |   `-ImplicitCastExpr 0x5575d0194a38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:36> 'sys_sflist_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5575d01949d8 <col:36> 'sys_sflist_t *' lvalue ParmVar 0x5575d0194620 'list' 'sys_sflist_t *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5575d0194b40 <col:42, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x5575d0194b10 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5575d0194a70 <col:42> 'sys_sfnode_t *' lvalue Var 0x5575d0194918 'test' 'sys_sfnode_t *'
|   | | `-ImplicitCastExpr 0x5575d0194b28 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
|   | |   `-ParenExpr 0x5575d0194af0 <col:14, col:24> 'void *'
|   | |     `-CStyleCastExpr 0x5575d0194ac8 <col:15, col:23> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5575d0194a90 <col:23> 'int' 0
|   | |-BinaryOperator 0x5575d0194c18 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42, line:16:48> 'sys_sfnode_t *' '='
|   | | |-DeclRefExpr 0x5575d0194b60 <line:222:42> 'sys_sfnode_t *' lvalue Var 0x5575d0194918 'test' 'sys_sfnode_t *'
|   | | `-CallExpr 0x5575d0194bd8 <<scratch space>:100:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
|   | |   |-ImplicitCastExpr 0x5575d0194bc0 <<scratch space>:100:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5575d0194b80 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d01a2728 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
|   | |   `-ImplicitCastExpr 0x5575d0194c00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:222:42> 'sys_sfnode_t *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5575d0194ba0 <col:42> 'sys_sfnode_t *' lvalue Var 0x5575d0194918 'test' 'sys_sfnode_t *'
|   | `-CompoundStmt 0x5575d0194f58 <col:48, line:230:3>
|   |   |-IfStmt 0x5575d0194ec8 <line:223:4, line:227:4>
|   |   | |-BinaryOperator 0x5575d0194ca8 <line:223:8, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x5575d0194c78 <col:8> 'sys_sfnode_t *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x5575d0194c38 <col:8> 'sys_sfnode_t *' lvalue Var 0x5575d0194918 'test' 'sys_sfnode_t *'
|   |   | | `-ImplicitCastExpr 0x5575d0194c90 <col:16> 'sys_sfnode_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5575d0194c58 <col:16> 'sys_sfnode_t *' lvalue ParmVar 0x5575d0194698 'node' 'sys_sfnode_t *'
|   |   | `-CompoundStmt 0x5575d0194ea8 <col:22, line:227:4>
|   |   |   |-CallExpr 0x5575d0194dc8 <<scratch space>:102:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:225:15> 'void'
|   |   |   | |-ImplicitCastExpr 0x5575d0194db0 <<scratch space>:102:1> 'void (*)(sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x5575d0194cc8 <col:1> 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)' Function 0x5575d0193948 'sys_sflist_remove' 'void (sys_sflist_t *, sys_sfnode_t *, sys_sfnode_t *)'
|   |   |   | |-ImplicitCastExpr 0x5575d0194e00 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:224:32> 'sys_sflist_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5575d0194ce8 <col:32> 'sys_sflist_t *' lvalue ParmVar 0x5575d0194620 'list' 'sys_sflist_t *'
|   |   |   | |-ImplicitCastExpr 0x5575d0194e30 <col:38> 'sys_sfnode_t *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5575d0194d08 <col:38> 'sys_sfnode_t *' lvalue Var 0x5575d01947f0 'prev' 'sys_sfnode_t *'
|   |   |   | `-ImplicitCastExpr 0x5575d0194e48 <line:225:11> 'sys_sfnode_t *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5575d0194d28 <col:11> 'sys_sfnode_t *' lvalue ParmVar 0x5575d0194698 'node' 'sys_sfnode_t *'
|   |   |   `-ReturnStmt 0x5575d0194e98 <line:226:5, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
|   |   |     `-ImplicitCastExpr 0x5575d0194e80 <col:16> 'bool' <IntegralToBoolean>
|   |   |       `-IntegerLiteral 0x5575d0194e60 <col:16> 'int' 1
|   |   `-BinaryOperator 0x5575d0194f38 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:229:4, col:11> 'sys_sfnode_t *' '='
|   |     |-DeclRefExpr 0x5575d0194ee0 <col:4> 'sys_sfnode_t *' lvalue Var 0x5575d01947f0 'prev' 'sys_sfnode_t *'
|   |     `-ImplicitCastExpr 0x5575d0194f20 <col:11> 'sys_sfnode_t *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5575d0194f00 <col:11> 'sys_sfnode_t *' lvalue Var 0x5575d0194918 'test' 'sys_sfnode_t *'
|   `-ReturnStmt 0x5575d0194fe8 <line:232:3, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
|     `-ImplicitCastExpr 0x5575d0194fd0 <col:16> 'bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x5575d0194fb0 <col:16> 'int' 0
|-RecordDecl 0x5575d0195028 </vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:18:1, line:24:1> line:18:8 struct sys_mem_pool_lvl definition
| |-RecordDecl 0x5575d01950d8 <line:19:2, line:22:2> line:19:2 union definition
| | |-FieldDecl 0x5575d0195200 <line:20:3, col:10> col:10 bits_p 'u32_t *'
| | `-FieldDecl 0x5575d0195390 <line:21:3, col:31> col:9 bits 'u32_t [2]'
| |-FieldDecl 0x5575d0195440 <line:19:2> col:2 implicit 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| |-IndirectFieldDecl 0x5575d01954a0 <line:20:10> col:10 implicit bits_p 'u32_t *'
| | |-Field 0x5575d0195440 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x5575d0195200 'bits_p' 'u32_t *'
| |-IndirectFieldDecl 0x5575d01954f8 <line:21:9> col:9 implicit bits 'u32_t [2]'
| | |-Field 0x5575d0195440 '' 'union sys_mem_pool_lvl::(anonymous at /vagrant/ext/zephyros/zephyr/include/sys/mempool_base.h:19:2)'
| | `-Field 0x5575d0195390 'bits' 'u32_t [2]'
| `-FieldDecl 0x5575d0195550 <line:23:2, col:14> col:14 free_list 'sys_dlist_t':'struct _dnode'
|-RecordDecl 0x5575d01955f8 <line:29:1, line:37:1> line:29:8 struct sys_mem_pool_base definition
| |-FieldDecl 0x5575d01956c0 <line:30:2, col:8> col:8 buf 'void *'
| |-FieldDecl 0x5575d0195720 <line:31:2, col:9> col:9 max_sz 'size_t':'unsigned long'
| |-FieldDecl 0x5575d01957a8 <line:32:2, col:8> col:8 n_max 'u16_t':'unsigned short'
| |-FieldDecl 0x5575d0195808 <line:33:2, col:7> col:7 n_levels 'u8_t':'unsigned char'
| |-FieldDecl 0x5575d0195898 <line:34:2, col:7> col:7 max_inline_level 's8_t':'signed char'
| |-FieldDecl 0x5575d01959b8 <line:35:2, col:27> col:27 levels 'struct sys_mem_pool_lvl *'
| `-FieldDecl 0x5575d0195a18 <line:36:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x5575d0195c40 <line:98:1, col:58> col:6 z_sys_mem_pool_base_init 'void (struct sys_mem_pool_base *)'
| `-ParmVarDecl 0x5575d0195b38 <col:31, col:57> col:57 p 'struct sys_mem_pool_base *'
|-FunctionDecl 0x5575d01b6ca8 <line:100:1, line:101:55> line:100:5 z_sys_mem_pool_block_alloc 'int (struct sys_mem_pool_base *, size_t, u32_t *, u32_t *, void **)'
| |-ParmVarDecl 0x5575d0195d10 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x5575d0195d88 <col:61, col:68> col:68 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d01b6a10 <line:101:10, col:17> col:17 level_p 'u32_t *'
| |-ParmVarDecl 0x5575d01b6a88 <col:26, col:33> col:33 block_p 'u32_t *'
| `-ParmVarDecl 0x5575d01b6b38 <col:42, col:49> col:49 data_p 'void **'
|-FunctionDecl 0x5575d01b6fc0 <line:103:1, line:104:21> line:103:6 z_sys_mem_pool_block_free 'void (struct sys_mem_pool_base *, u32_t, u32_t)'
| |-ParmVarDecl 0x5575d01b6d98 <col:32, col:58> col:58 p 'struct sys_mem_pool_base *'
| |-ParmVarDecl 0x5575d01b6e10 <col:61, col:67> col:67 level 'u32_t':'unsigned int'
| `-ParmVarDecl 0x5575d01b6e88 <line:104:10, col:16> col:16 block 'u32_t':'unsigned int'
|-RecordDecl 0x5575d01b7078 </vagrant/ext/zephyros/zephyr/include/kernel_structs.h:83:1, line:96:1> line:83:8 struct _ready_q definition
| `-FieldDecl 0x5575d01b7150 <line:86:2, col:19> col:19 cache 'struct k_thread *'
|-TypedefDecl 0x5575d01b71f8 <line:98:1, col:25> col:25 _ready_q_t 'struct _ready_q':'struct _ready_q'
| `-ElaboratedType 0x5575d01b71a0 'struct _ready_q' sugar
|   `-RecordType 0x5575d01b7100 'struct _ready_q'
|     `-Record 0x5575d01b7078 '_ready_q'
|-RecordDecl 0x5575d01b7250 <line:100:1, line:134:1> line:100:8 struct _cpu definition
| |-FieldDecl 0x5575d01b7308 <line:102:2, col:8> col:8 nested 'u32_t':'unsigned int'
| |-FieldDecl 0x5575d01b7370 <line:105:2, col:8> col:8 irq_stack 'char *'
| |-FieldDecl 0x5575d01b73e8 <line:108:2, col:19> col:19 current 'struct k_thread *'
| |-FieldDecl 0x5575d01b7460 <line:111:2, col:19> col:19 idle_thread 'struct k_thread *'
| `-FieldDecl 0x5575d01b74c0 <line:128:2, col:7> col:7 id 'u8_t':'unsigned char'
|-TypedefDecl 0x5575d01b7568 <line:136:1, col:21> col:21 _cpu_t 'struct _cpu':'struct _cpu'
| `-ElaboratedType 0x5575d01b7510 'struct _cpu' sugar
|   `-RecordType 0x5575d01b72d0 'struct _cpu'
|     `-Record 0x5575d01b7250 '_cpu'
|-RecordDecl 0x5575d01b75c0 <line:138:1, line:191:1> line:138:8 struct z_kernel definition
| |-RecordDecl 0x5575d01b7668 <line:143:2, line:157:2> line:143:2 invalid union definition
| | |-FieldDecl 0x5575d01b7760 <line:144:3, col:15> col:15 invalid cpus 'struct _cpu':'struct _cpu'
| | |-RecordDecl 0x5575d01b77b0 <line:146:3, line:155:3> line:146:3 struct definition
| | | |-FieldDecl 0x5575d01b7868 <line:148:4, col:10> col:10 nested 'u32_t':'unsigned int'
| | | |-FieldDecl 0x5575d01b78d0 <line:151:4, col:10> col:10 irq_stack 'char *'
| | | `-FieldDecl 0x5575d01b7948 <line:154:4, col:21> col:21 current 'struct k_thread *'
| | |-FieldDecl 0x5575d01ba940 <line:146:3> col:3 implicit 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | |-IndirectFieldDecl 0x5575d01ba9a0 <line:148:10> col:10 implicit nested 'u32_t':'unsigned int'
| | | |-Field 0x5575d01ba940 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x5575d01b7868 'nested' 'u32_t':'unsigned int'
| | |-IndirectFieldDecl 0x5575d01ba9f8 <line:151:10> col:10 implicit irq_stack 'char *'
| | | |-Field 0x5575d01ba940 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| | | `-Field 0x5575d01b78d0 'irq_stack' 'char *'
| | `-IndirectFieldDecl 0x5575d01baa50 <line:154:21> col:21 implicit current 'struct k_thread *'
| |   |-Field 0x5575d01ba940 '' 'struct z_kernel::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel_structs.h:146:3)'
| |   `-Field 0x5575d01b7948 'current' 'struct k_thread *'
| `-FieldDecl 0x5575d01bab28 <line:172:2, col:18> col:18 ready_q 'struct _ready_q':'struct _ready_q'
|-TypedefDecl 0x5575d01bac28 <line:193:1, col:25> col:25 _kernel_t 'struct z_kernel':'struct z_kernel'
| `-ElaboratedType 0x5575d01babd0 'struct z_kernel' sugar
|   `-RecordType 0x5575d01b7640 'struct z_kernel'
|     `-Record 0x5575d01b75c0 'z_kernel'
|-VarDecl 0x5575d01baca0 <line:195:1, col:24> col:24 _kernel 'struct z_kernel':'struct z_kernel' extern
|-FunctionDecl 0x5575d01bae60 </vagrant/ext/zephyros/zephyr/include/kernel_version.h:47:1, col:41> col:14 sys_kernel_version_get 'u32_t (void)' extern
| `-FullComment 0x5575d02c00c0 <line:40:3, line:45:25>
|   |-ParagraphComment 0x5575d02bfeb0 <line:40:3>
|   | `-TextComment 0x5575d02bfe80 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02bfed0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5575d02bff30 <col:10, col:56>
|   |   `-TextComment 0x5575d02bff00 <col:10, col:56> Text=" Return the kernel version of the present build"
|   |-ParagraphComment 0x5575d02bffa0 <line:42:3, line:43:27>
|   | |-TextComment 0x5575d02bff50 <line:42:3, col:76> Text=" The kernel version is a four-byte value, whose format is described in the"
|   | `-TextComment 0x5575d02bff70 <line:43:3, col:27> Text=" file "kernel_version.h"."
|   |-ParagraphComment 0x5575d02bfff0 <line:45:3>
|   | `-TextComment 0x5575d02bffc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c0010 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x5575d02c0070 <col:11, col:25>
|       `-TextComment 0x5575d02c0040 <col:11, col:25> Text=" kernel version"
|-FunctionDecl 0x5575d01bb050 </vagrant/ext/zephyros/zephyr/include/random/rand32.h:45:1, col:33> col:14 sys_rand32_get 'u32_t (void)' extern
| `-FullComment 0x5575d02c0410 <line:37:3, line:43:31>
|   |-ParagraphComment 0x5575d02c0160 <line:37:3>
|   | `-TextComment 0x5575d02c0130 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c0180 <col:4, line:38:20> Name="brief"
|   | `-ParagraphComment 0x5575d02c0200 <line:37:10, line:38:20>
|   |   |-TextComment 0x5575d02c01b0 <line:37:10, col:63> Text=" Return a 32-bit random value that should pass general"
|   |   `-TextComment 0x5575d02c01d0 <line:38:3, col:20> Text=" randomness tests."
|   |-ParagraphComment 0x5575d02c0250 <line:40:3>
|   | `-TextComment 0x5575d02c0220 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c0270 <col:4, line:41:23> Name="note"
|   | `-ParagraphComment 0x5575d02c02f0 <line:40:9, line:41:23>
|   |   |-TextComment 0x5575d02c02a0 <line:40:9, col:68> Text=" The random value returned is not a cryptographically secure"
|   |   `-TextComment 0x5575d02c02c0 <line:41:3, col:23> Text=" random number value."
|   |-ParagraphComment 0x5575d02c0340 <line:43:3>
|   | `-TextComment 0x5575d02c0310 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c0360 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x5575d02c03c0 <col:11, col:31>
|       `-TextComment 0x5575d02c0390 <col:11, col:31> Text=" 32-bit random value."
|-FunctionDecl 0x5575d01bb2c0 <line:57:1, col:47> col:13 sys_rand_get 'void (void *, size_t)' extern
| |-ParmVarDecl 0x5575d01bb130 <col:26, col:32> col:32 dst 'void *'
| |-ParmVarDecl 0x5575d01bb1a8 <col:37, col:44> col:44 len 'size_t':'unsigned long'
| `-FullComment 0x5575d02c08c0 <line:47:3, line:56:1>
|   |-ParagraphComment 0x5575d02c04b0 <line:47:3>
|   | `-TextComment 0x5575d02c0480 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c04d0 <col:4, line:48:33> Name="brief"
|   | `-ParagraphComment 0x5575d02c0550 <line:47:10, line:48:33>
|   |   |-TextComment 0x5575d02c0500 <line:47:10, col:73> Text=" Fill the destination buffer with random data values that should"
|   |   `-TextComment 0x5575d02c0520 <line:48:3, col:33> Text=" pass general randomness tests."
|   |-ParagraphComment 0x5575d02c05a0 <line:50:3>
|   | `-TextComment 0x5575d02c0570 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c05c0 <col:4, line:51:31> Name="note"
|   | `-ParagraphComment 0x5575d02c0640 <line:50:9, line:51:31>
|   |   |-TextComment 0x5575d02c05f0 <line:50:9, col:72> Text=" The random values returned are not considered cryptographically"
|   |   `-TextComment 0x5575d02c0610 <line:51:3, col:31> Text=" secure random number values."
|   |-ParagraphComment 0x5575d02c0690 <line:53:3>
|   | `-TextComment 0x5575d02c0660 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02c06b0 <col:4, line:54:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x5575d02c0760 <line:53:20, line:54:3>
|   |   |-TextComment 0x5575d02c0710 <line:53:20, col:64> Text=" destination buffer to fill with random data."
|   |   `-TextComment 0x5575d02c0730 <line:54:3> Text=" "
|   |-ParamCommandComment 0x5575d02c0780 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x5575d02c0810 <col:14, col:45>
|   |   `-TextComment 0x5575d02c07e0 <col:14, col:45> Text=" size of the destination buffer."
|   `-ParagraphComment 0x5575d02c0860 <line:56:1>
|     `-TextComment 0x5575d02c0830 <col:1> Text=" "
|-FunctionDecl 0x5575d01bb548 <line:72:1, col:48> col:12 sys_csrand_get 'int (void *, size_t)' extern
| |-ParmVarDecl 0x5575d01bb3b0 <col:27, col:33> col:33 dst 'void *'
| |-ParmVarDecl 0x5575d01bb428 <col:38, col:45> col:45 len 'size_t':'unsigned long'
| `-FullComment 0x5575d02c0e50 <line:60:3, line:71:1>
|   |-ParagraphComment 0x5575d02c0960 <line:60:3>
|   | `-TextComment 0x5575d02c0930 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c0980 <col:4, line:61:22> Name="brief"
|   | `-ParagraphComment 0x5575d02c0a00 <line:60:10, line:61:22>
|   |   |-TextComment 0x5575d02c09b0 <line:60:10, col:67> Text=" Fill the destination buffer with cryptographically secure"
|   |   `-TextComment 0x5575d02c09d0 <line:61:3, col:22> Text=" random data values."
|   |-ParagraphComment 0x5575d02c0a50 <line:63:3>
|   | `-TextComment 0x5575d02c0a20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c0a70 <col:4, line:64:42> Name="note"
|   | `-ParagraphComment 0x5575d02c0af0 <line:63:9, line:64:42>
|   |   |-TextComment 0x5575d02c0aa0 <line:63:9, col:75> Text=" If the random values requested do not need to be cryptographically"
|   |   `-TextComment 0x5575d02c0ac0 <line:64:3, col:42> Text=" secure then use sys_rand_get() instead."
|   |-ParagraphComment 0x5575d02c0b40 <line:66:3>
|   | `-TextComment 0x5575d02c0b10 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02c0b60 <col:4, line:67:3> [out] explicitly Param="dst" ParamIndex=0
|   | `-ParagraphComment 0x5575d02c0c10 <line:66:20, line:67:3>
|   |   |-TextComment 0x5575d02c0bc0 <line:66:20, col:47> Text=" destination buffer to fill."
|   |   `-TextComment 0x5575d02c0be0 <line:67:3> Text=" "
|   |-ParamCommandComment 0x5575d02c0c30 <col:4, col:45> [in] implicitly Param="len" ParamIndex=1
|   | `-ParagraphComment 0x5575d02c0cc0 <col:14, col:45>
|   |   `-TextComment 0x5575d02c0c90 <col:14, col:45> Text=" size of the destination buffer."
|   |-ParagraphComment 0x5575d02c0d10 <line:69:3>
|   | `-TextComment 0x5575d02c0ce0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c0d30 <col:4, col:53> Name="return"
|   | `-ParagraphComment 0x5575d02c0d90 <col:11, col:53>
|   |   `-TextComment 0x5575d02c0d60 <col:11, col:53> Text=" 0 if success, -EIO if entropy reseed error"
|   `-ParagraphComment 0x5575d02c0de0 <line:71:1>
|     `-TextComment 0x5575d02c0db0 <col:1> Text=" "
|-TypedefDecl 0x5575d01d9b88 </vagrant/ext/zephyros/zephyr/include/syscall.h:85:1, line:88:17> line:85:21 _k_syscall_handler_t 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| |-PointerType 0x5575d01d9af0 'uintptr_t (*)(uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)'
| | `-ParenType 0x5575d01d9a90 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' sugar
| |   `-FunctionProtoType 0x5575d01d9a20 'uintptr_t (uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *)' cdecl
| |     |-TypedefType 0x5575d01bb660 'uintptr_t' sugar
| |     | |-Typedef 0x5575d00ef720 'uintptr_t'
| |     | `-BuiltinType 0x5575d007b640 'unsigned long'
| |     |-TypedefType 0x5575d01bb660 'uintptr_t' sugar
| |     | |-Typedef 0x5575d00ef720 'uintptr_t'
| |     | `-BuiltinType 0x5575d007b640 'unsigned long'
| |     |-TypedefType 0x5575d01bb660 'uintptr_t' sugar
| |     | |-Typedef 0x5575d00ef720 'uintptr_t'
| |     | `-BuiltinType 0x5575d007b640 'unsigned long'
| |     |-TypedefType 0x5575d01bb660 'uintptr_t' sugar
| |     | |-Typedef 0x5575d00ef720 'uintptr_t'
| |     | `-BuiltinType 0x5575d007b640 'unsigned long'
| |     |-TypedefType 0x5575d01bb660 'uintptr_t' sugar
| |     | |-Typedef 0x5575d00ef720 'uintptr_t'
| |     | `-BuiltinType 0x5575d007b640 'unsigned long'
| |     |-TypedefType 0x5575d01bb660 'uintptr_t' sugar
| |     | |-Typedef 0x5575d00ef720 'uintptr_t'
| |     | `-BuiltinType 0x5575d007b640 'unsigned long'
| |     |-TypedefType 0x5575d01bb660 'uintptr_t' sugar
| |     | |-Typedef 0x5575d00ef720 'uintptr_t'
| |     | `-BuiltinType 0x5575d007b640 'unsigned long'
| |     `-PointerType 0x5575d007bca0 'void *'
| |       `-BuiltinType 0x5575d007b4e0 'void'
| `-FullComment 0x5575d02c1af0 <line:50:3, line:84:1>
|   |-ParagraphComment 0x5575d02c0ef0 <line:50:3>
|   | `-TextComment 0x5575d02c0ec0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5575d02c0f10 <col:4, col:33> Text=" _k_syscall_handler_t"
|   |-ParagraphComment 0x5575d02c0f80 <line:51:3>
|   | `-TextComment 0x5575d02c0f50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c0fa0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02c1000 <col:10, col:43>
|   |   `-TextComment 0x5575d02c0fd0 <col:10, col:43> Text=" System call handler function type"
|   |-ParagraphComment 0x5575d02c1070 <line:53:3, line:54:67>
|   | |-TextComment 0x5575d02c1020 <line:53:3, col:70> Text=" These are kernel-side skeleton functions for system calls. They are"
|   | `-TextComment 0x5575d02c1040 <line:54:3, col:67> Text=" necessary to sanitize the arguments passed into the system call:"
|   |-ParagraphComment 0x5575d02c1250 <line:56:3, line:66:41>
|   | |-TextComment 0x5575d02c1090 <line:56:3, col:78> Text=" - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()"
|   | |-TextComment 0x5575d02c10b0 <line:57:3, col:79> Text=" - Any memory buffers passed in are checked to ensure that the calling thread"
|   | |-TextComment 0x5575d02c10d0 <line:58:3, col:32> Text="   actually has access to them"
|   | |-TextComment 0x5575d02c10f0 <line:59:3, col:69> Text=" - Many kernel calls do no sanity checking of parameters other than"
|   | |-TextComment 0x5575d02c1110 <line:60:3, col:69> Text="   assertions. The handler must check all of these conditions using"
|   | |-TextComment 0x5575d02c1130 <line:61:3, col:22> Text="   _SYSCALL_ASSERT()"
|   | |-TextComment 0x5575d02c1150 <line:62:3, col:78> Text=" - If the system call has more than 6 arguments, then arg6 will be a pointer"
|   | |-TextComment 0x5575d02c1170 <line:63:3, col:74> Text="   to some struct containing arguments 6+. The struct itself needs to be"
|   | |-TextComment 0x5575d02c1190 <line:64:3, col:78> Text="   validated like any other buffer passed in from userspace, and its members"
|   | |-TextComment 0x5575d02c11b0 <line:65:3, col:70> Text="   individually validated (if necessary) and then passed to the real"
|   | `-TextComment 0x5575d02c11d0 <line:66:3, col:41> Text="   implementation like normal arguments"
|   |-ParagraphComment 0x5575d02c12c0 <line:68:3, line:69:70>
|   | |-TextComment 0x5575d02c1270 <line:68:3, col:75> Text=" Even if the system call implementation has no return value, these always"
|   | `-TextComment 0x5575d02c1290 <line:69:3, col:70> Text=" return something, even 0, to prevent register leakage to userspace."
|   |-ParagraphComment 0x5575d02c1310 <line:71:3, col:80>
|   | `-TextComment 0x5575d02c12e0 <col:3, col:80> Text=" Once everything has been validated, the real implementation will be executed."
|   |-ParagraphComment 0x5575d02c1360 <line:73:3>
|   | `-TextComment 0x5575d02c1330 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02c1380 <col:4, line:74:3> [in] implicitly Param="arg1" ParamIndex=0
|   | `-ParagraphComment 0x5575d02c1430 <line:73:15, line:74:3>
|   |   |-TextComment 0x5575d02c13e0 <line:73:15, col:37> Text=" system call argument 1"
|   |   `-TextComment 0x5575d02c1400 <line:74:3> Text=" "
|   |-ParamCommandComment 0x5575d02c1450 <col:4, line:75:3> [in] implicitly Param="arg2" ParamIndex=1
|   | `-ParagraphComment 0x5575d02c1510 <line:74:15, line:75:3>
|   |   |-TextComment 0x5575d02c14c0 <line:74:15, col:37> Text=" system call argument 2"
|   |   `-TextComment 0x5575d02c14e0 <line:75:3> Text=" "
|   |-ParamCommandComment 0x5575d02c1530 <col:4, line:76:3> [in] implicitly Param="arg3" ParamIndex=2
|   | `-ParagraphComment 0x5575d02c15e0 <line:75:15, line:76:3>
|   |   |-TextComment 0x5575d02c1590 <line:75:15, col:37> Text=" system call argument 3"
|   |   `-TextComment 0x5575d02c15b0 <line:76:3> Text=" "
|   |-ParamCommandComment 0x5575d02c1600 <col:4, line:77:3> [in] implicitly Param="arg4" ParamIndex=3
|   | `-ParagraphComment 0x5575d02c16b0 <line:76:15, line:77:3>
|   |   |-TextComment 0x5575d02c1660 <line:76:15, col:37> Text=" system call argument 4"
|   |   `-TextComment 0x5575d02c1680 <line:77:3> Text=" "
|   |-ParamCommandComment 0x5575d02c16d0 <col:4, line:78:3> [in] implicitly Param="arg5" ParamIndex=4
|   | `-ParagraphComment 0x5575d02c1780 <line:77:15, line:78:3>
|   |   |-TextComment 0x5575d02c1730 <line:77:15, col:37> Text=" system call argument 5"
|   |   `-TextComment 0x5575d02c1750 <line:78:3> Text=" "
|   |-ParamCommandComment 0x5575d02c17a0 <col:4, line:79:3> [in] implicitly Param="arg6" ParamIndex=5
|   | `-ParagraphComment 0x5575d02c1850 <line:78:15, line:79:3>
|   |   |-TextComment 0x5575d02c1800 <line:78:15, col:37> Text=" system call argument 6"
|   |   `-TextComment 0x5575d02c1820 <line:79:3> Text=" "
|   |-ParamCommandComment 0x5575d02c1870 <col:4, line:81:3> [in] implicitly Param="ssf" ParamIndex=6
|   | `-ParagraphComment 0x5575d02c1950 <line:79:14, line:81:3>
|   |   |-TextComment 0x5575d02c18d0 <line:79:14, col:75> Text=" System call stack frame pointer. Used to generate kernel oops"
|   |   |-TextComment 0x5575d02c18f0 <line:80:3, col:70> Text="            via _arch_syscall_oops_at(). Contents are arch-specific."
|   |   `-TextComment 0x5575d02c1910 <line:81:3> Text=" "
|   |-BlockCommandComment 0x5575d02c1970 <col:4, line:82:22> Name="return"
|   | `-ParagraphComment 0x5575d02c19f0 <line:81:11, line:82:22>
|   |   |-TextComment 0x5575d02c19a0 <line:81:11, col:75> Text=" system call return value, or 0 if the system call implementation"
|   |   `-TextComment 0x5575d02c19c0 <line:82:3, col:22> Text="         return void"
|   `-ParagraphComment 0x5575d02c1a40 <line:84:1>
|     `-TextComment 0x5575d02c1a10 <col:1> Text=" "
|-FunctionDecl 0x5575d01d9cb0 <line:93:1, line:106:1> line:93:27 z_syscall_trap 'bool (void)' static inline
| |-CompoundStmt 0x5575d01d9ee8 <line:94:1, line:106:1>
| | |-DeclStmt 0x5575d01d9e58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/syscall.h:95:18>
| | | `-VarDecl 0x5575d01d9db8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, line:15:16> /vagrant/ext/zephyros/zephyr/include/syscall.h:95:7 used ret 'bool' cinit
| | |   `-ImplicitCastExpr 0x5575d01d9e40 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
| | |     `-IntegerLiteral 0x5575d01d9e20 <col:16> 'int' 0
| | `-ReturnStmt 0x5575d01d9ea8 </vagrant/ext/zephyros/zephyr/include/syscall.h:105:2, col:9>
| |   `-ImplicitCastExpr 0x5575d01d9e90 <col:9> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d01d9e70 <col:9> 'bool' lvalue Var 0x5575d01d9db8 'ret' 'bool'
| `-AlwaysInlineAttr 0x5575d01d9d50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5575d01d9fa0 </vagrant/ext/zephyros/zephyr/include/syscall.h:113:1, line:120:1> line:113:20 _is_user_context 'bool (void)' static inline
| |-CompoundStmt 0x5575d01da088 <line:114:1, line:120:1>
| | `-ReturnStmt 0x5575d01da078 <line:118:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-ImplicitCastExpr 0x5575d01da060 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x5575d01da040 <col:16> 'int' 0
| `-FullComment 0x5575d02c1ca0 </vagrant/ext/zephyros/zephyr/include/syscall.h:109:3, line:111:69>
|   |-ParagraphComment 0x5575d02c1b90 <line:109:3, col:53>
|   | `-TextComment 0x5575d02c1b60 <col:3, col:53> Text=" Indicate whether the CPU is currently in user mode"
|   |-ParagraphComment 0x5575d02c1be0 <line:111:3>
|   | `-TextComment 0x5575d02c1bb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c1c00 <col:4, col:69> Name="return"
|     `-ParagraphComment 0x5575d02c1c60 <col:11, col:69>
|       `-TextComment 0x5575d02c1c30 <col:11, col:69> Text=" true if the CPU is currently running with user permissions"
|-TypedefDecl 0x5575d01da0d8 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h:40:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x5575d01da0a0 '__builtin_va_list' sugar
|   |-Typedef 0x5575d00ba7e0 '__builtin_va_list'
|   `-ConstantArrayType 0x5575d007c3e0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x5575d007c220 'struct __va_list_tag'
|       `-Record 0x5575d007c1a0 '__va_list_tag'
|-TypedefDecl 0x5575d01da168 <line:99:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x5575d01da130 '__gnuc_va_list' sugar
|   |-Typedef 0x5575d01da0d8 '__gnuc_va_list'
|   `-TypedefType 0x5575d01da0a0 '__builtin_va_list' sugar
|     |-Typedef 0x5575d00ba7e0 '__builtin_va_list'
|     `-ConstantArrayType 0x5575d007c3e0 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x5575d007c220 'struct __va_list_tag'
|         `-Record 0x5575d007c1a0 '__va_list_tag'
|-FunctionDecl 0x5575d01da328 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:51:1, line:54:1> line:51:40 used printk 'void (const char *, ...)' static inline
| |-ParmVarDecl 0x5575d01da250 <col:47, col:59> col:59 used fmt 'const char *'
| |-CompoundStmt 0x5575d01da4e8 <line:52:1, line:54:1>
| | `-CStyleCastExpr 0x5575d01da4c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5575d01da4a8 <col:29, col:31> 'const char *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5575d01da488 <col:29, col:31> 'const char *' lvalue
| |       `-DeclRefExpr 0x5575d01da438 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:53:13> 'const char *' lvalue ParmVar 0x5575d01da250 'fmt' 'const char *'
| `-FormatAttr 0x5575d01da3d0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 2
|-FunctionDecl 0x5575d01da790 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:56:1, line:60:1> line:56:40 vprintk 'void (const char *, struct __va_list_tag *)' static inline
| |-ParmVarDecl 0x5575d01da568 <col:48, col:60> col:60 used fmt 'const char *'
| |-ParmVarDecl 0x5575d01da678 <col:65, col:73> col:73 used ap 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x5575d01e2570 <line:57:1, line:60:1>
| | |-CStyleCastExpr 0x5575d01e2498 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5575d01e2480 <col:29, col:31> 'const char *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5575d01e2460 <col:29, col:31> 'const char *' lvalue
| | |     `-DeclRefExpr 0x5575d01e2410 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:58:13> 'const char *' lvalue ParmVar 0x5575d01da568 'fmt' 'const char *'
| | `-CStyleCastExpr 0x5575d01e2548 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5575d01e2530 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5575d01e2510 <col:29, col:31> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue
| |       `-DeclRefExpr 0x5575d01e24c0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:59:13> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x5575d01da678 'ap' 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5575d01da840 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 1 0
|-FunctionDecl 0x5575d01e2840 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:63:1, line:64:26> line:63:32 snprintk 'int (char *, size_t, const char *, ...)' extern
| |-ParmVarDecl 0x5575d01e25f8 <col:41, col:47> col:47 str 'char *'
| |-ParmVarDecl 0x5575d01e2670 <col:52, col:59> col:59 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d01e26f0 <line:64:6, col:18> col:18 fmt 'const char *'
| `-FormatAttr 0x5575d01e28f8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 4
|-FunctionDecl 0x5575d01e2c88 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:65:1, line:66:35> line:65:32 vsnprintk 'int (char *, size_t, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5575d01e29c8 <col:42, col:48> col:48 str 'char *'
| |-ParmVarDecl 0x5575d01e2a40 <col:53, col:60> col:60 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d01e2ac0 <line:66:8, col:20> col:20 fmt 'const char *'
| |-ParmVarDecl 0x5575d01e2b38 <col:25, col:33> col:33 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5575d01e2d48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-FunctionDecl 0x5575d01e32e0 </vagrant/ext/zephyros/zephyr/include/sys/printk.h:68:1, line:69:34> line:68:33 z_vprintk 'void (int (*)(int, void *), void *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5575d01e3018 <col:43, col:68> col:49 out 'int (*)(int, void *)'
| |-ParmVarDecl 0x5575d01e3098 <col:71, col:77> col:77 ctx 'void *'
| |-ParmVarDecl 0x5575d01e3118 <line:69:7, col:19> col:19 fmt 'const char *'
| |-ParmVarDecl 0x5575d01e3190 <col:24, col:32> col:32 ap 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5575d01e33a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:175:46, col:66> printf 3 0
|-RecordDecl 0x5575d01e4178 prev 0x5575d0172a48 </vagrant/ext/zephyros/zephyr/include/sys/arch_interface.h:41:1, col:8> col:8 struct k_thread
|-RecordDecl 0x5575d01e41f8 <line:42:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x5575d01e42a8 <line:44:9, col:16> col:16 struct _k_thread_stack_element
|-TypedefDecl 0x5575d01e43c0 <col:1, col:40> col:40 referenced k_thread_stack_t 'struct _k_thread_stack_element':'struct _k_thread_stack_element'
| `-ElaboratedType 0x5575d01e4360 'struct _k_thread_stack_element' sugar
|   `-RecordType 0x5575d01e4330 'struct _k_thread_stack_element'
|     `-Record 0x5575d0228d50 '_k_thread_stack_element'
|-TypedefDecl 0x5575d01e46d8 <line:46:1, col:62> col:16 referenced k_thread_entry_t 'void (*)(void *, void *, void *)'
| `-PointerType 0x5575d01e4660 'void (*)(void *, void *, void *)'
|   `-ParenType 0x5575d01e4600 'void (void *, void *, void *)' sugar
|     `-FunctionProtoType 0x5575d01e45b0 'void (void *, void *, void *)' cdecl
|       |-BuiltinType 0x5575d007b4e0 'void'
|       |-PointerType 0x5575d007bca0 'void *'
|       | `-BuiltinType 0x5575d007b4e0 'void'
|       |-PointerType 0x5575d007bca0 'void *'
|       | `-BuiltinType 0x5575d007b4e0 'void'
|       `-PointerType 0x5575d007bca0 'void *'
|         `-BuiltinType 0x5575d007b4e0 'void'
|-FunctionDecl 0x5575d01e4820 <line:59:1, col:45> col:21 used arch_k_cycle_get_32 'u32_t (void)' static inline
| `-FullComment 0x5575d02c1e50 <line:55:3, line:57:24>
|   |-ParagraphComment 0x5575d02c1d40 <line:55:3, col:70>
|   | `-TextComment 0x5575d02c1d10 <col:3, col:70> Text=" Obtain the current cycle count, in units that are hardware-specific"
|   |-ParagraphComment 0x5575d02c1d90 <line:57:3>
|   | `-TextComment 0x5575d02c1d60 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c1db0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x5575d02c1e10 <col:8, col:24>
|       `-TextComment 0x5575d02c1de0 <col:8, col:24> Text=" k_cycle_get_32()"
|-FunctionDecl 0x5575d01e4b90 <line:132:1, col:24> col:6 used arch_cpu_idle 'void (void)'
| `-FullComment 0x5575d02c21d0 <line:120:3, line:130:20>
|   |-ParagraphComment 0x5575d02c1ef0 <line:120:3>
|   | `-TextComment 0x5575d02c1ec0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c1f10 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5575d02c1f70 <col:10, col:33>
|   |   `-TextComment 0x5575d02c1f40 <col:10, col:33> Text=" Power save idle routine"
|   |-ParagraphComment 0x5575d02c2010 <line:122:3, line:124:47>
|   | |-TextComment 0x5575d02c1f90 <line:122:3, col:74> Text=" This function will be called by the kernel idle loop or possibly within"
|   | |-TextComment 0x5575d02c1fb0 <line:123:3, col:68> Text=" an implementation of z_sys_power_save_idle in the kernel when the"
|   | `-TextComment 0x5575d02c1fd0 <line:124:3, col:47> Text=" '_sys_power_save_flag' variable is non-zero."
|   |-ParagraphComment 0x5575d02c20b0 <line:126:3, line:128:35>
|   | |-TextComment 0x5575d02c2030 <line:126:3, col:72> Text=" Architectures that do not implement power management instructions may"
|   | |-TextComment 0x5575d02c2050 <line:127:3, col:69> Text=" immediately return, otherwise a power-saving instruction should be"
|   | `-TextComment 0x5575d02c2070 <line:128:3, col:35> Text=" issued to wait for an interrupt."
|   |-ParagraphComment 0x5575d02c2100 <line:130:3>
|   | `-TextComment 0x5575d02c20d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c2120 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5575d02c2180 <col:8, col:20>
|       `-TextComment 0x5575d02c2150 <col:8, col:20> Text=" k_cpu_idle()"
|-FunctionDecl 0x5575d01e4d40 <line:152:1, col:43> col:6 used arch_cpu_atomic_idle 'void (unsigned int)'
| |-ParmVarDecl 0x5575d01e4c70 <col:27, col:40> col:40 key 'unsigned int'
| `-FullComment 0x5575d02c26e0 <line:135:3, line:150:76>
|   |-ParagraphComment 0x5575d02c2270 <line:135:3>
|   | `-TextComment 0x5575d02c2240 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c2290 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x5575d02c22f0 <col:10, col:66>
|   |   `-TextComment 0x5575d02c22c0 <col:10, col:66> Text=" Atomically re-enable interrupts and enter low power mode"
|   |-ParagraphComment 0x5575d02c2340 <line:137:3, col:62>
|   | `-TextComment 0x5575d02c2310 <col:3, col:62> Text=" The requirements for arch_cpu_atomic_idle() are as follows:"
|   |-ParagraphComment 0x5575d02c2430 <line:139:3, line:143:44>
|   | |-TextComment 0x5575d02c2360 <line:139:3, col:67> Text=" -# Enabling interrupts and entering a low-power mode needs to be"
|   | |-TextComment 0x5575d02c2380 <line:140:3, col:73> Text="    atomic, i.e. there should be no period of time where interrupts are"
|   | |-TextComment 0x5575d02c23a0 <line:141:3, col:77> Text="    enabled before the processor enters a low-power mode.  See the comments"
|   | |-TextComment 0x5575d02c23c0 <line:142:3, col:62> Text="    in k_lifo_get(), for example, of the race condition that"
|   | `-TextComment 0x5575d02c23e0 <line:143:3, col:44> Text="    occurs if this requirement is not met."
|   |-ParagraphComment 0x5575d02c24a0 <line:145:3, line:146:65>
|   | |-TextComment 0x5575d02c2450 <line:145:3, col:74> Text=" -# After waking up from the low-power mode, the interrupt lockout state"
|   | `-TextComment 0x5575d02c2470 <line:146:3, col:65> Text="    must be restored as indicated in the 'key' input parameter."
|   |-ParagraphComment 0x5575d02c24f0 <line:148:3>
|   | `-TextComment 0x5575d02c24c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c2510 <col:4, col:27> Name="see"
|   | `-ParagraphComment 0x5575d02c2570 <col:8, col:27>
|   |   `-TextComment 0x5575d02c2540 <col:8, col:27> Text=" k_cpu_atomic_idle()"
|   |-ParagraphComment 0x5575d02c25c0 <line:150:3>
|   | `-TextComment 0x5575d02c2590 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d02c25e0 <col:4, col:76> [in] implicitly Param="key" ParamIndex=0
|     `-ParagraphComment 0x5575d02c2670 <col:14, col:76>
|       `-TextComment 0x5575d02c2640 <col:14, col:76> Text=" Lockout key returned by previous invocation of arch_irq_lock()"
|-TypedefDecl 0x5575d01e5048 <line:167:1, col:57> col:30 referenced arch_cpustart_t 'void (*)(void *) __attribute__((noreturn))'
| |-PointerType 0x5575d01e4fe0 'void (*)(void *) __attribute__((noreturn))'
| | `-ParenType 0x5575d01e4f80 'void (void *) __attribute__((noreturn))' sugar
| |   `-FunctionProtoType 0x5575d01e4f40 'void (void *) __attribute__((noreturn))' noreturn cdecl
| |     |-BuiltinType 0x5575d007b4e0 'void'
| |     `-PointerType 0x5575d007bca0 'void *'
| |       `-BuiltinType 0x5575d007b4e0 'void'
| `-FullComment 0x5575d02c28c0 <line:163:3, line:165:52>
|   |-ParagraphComment 0x5575d02c2780 <line:163:3, col:25>
|   | `-TextComment 0x5575d02c2750 <col:3, col:25> Text=" Per-cpu entry function"
|   |-ParagraphComment 0x5575d02c27d0 <line:165:3>
|   | `-TextComment 0x5575d02c27a0 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d02c27f0 <col:4, col:52> [in] implicitly Param="context"
|     `-ParagraphComment 0x5575d02c2880 <col:18, col:52>
|       `-TextComment 0x5575d02c2850 <col:18, col:52> Text=" parameter, implementation specific"
|-FunctionDecl 0x5575d01e6e10 <line:189:1, line:190:36> line:189:6 arch_start_cpu 'void (int, k_thread_stack_t *, int, arch_cpustart_t, void *)'
| |-ParmVarDecl 0x5575d01e69f0 <col:21, col:25> col:25 cpu_num 'int'
| |-ParmVarDecl 0x5575d01e6b00 <col:34, col:52> col:52 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5575d01e6b80 <col:59, col:63> col:63 sz 'int'
| |-ParmVarDecl 0x5575d01e6c28 <line:190:7, col:23> col:23 fn 'arch_cpustart_t':'void (*)(void *) __attribute__((noreturn))'
| |-ParmVarDecl 0x5575d01e6ca8 <col:27, col:33> col:33 arg 'void *'
| `-FullComment 0x5575d02c3040 <line:170:3, line:187:51>
|   |-ParagraphComment 0x5575d02c2960 <line:170:3>
|   | `-TextComment 0x5575d02c2930 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02c2980 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5575d02c29e0 <col:10, col:53>
|   |   `-TextComment 0x5575d02c29b0 <col:10, col:53> Text=" Start a numbered CPU on a MP-capable system"
|   |-ParagraphComment 0x5575d02c2ad0 <line:172:3, line:176:68>
|   | |-TextComment 0x5575d02c2a00 <line:172:3, col:77> Text=" This starts and initializes a specific CPU.  The main thread on startup is"
|   | |-TextComment 0x5575d02c2a20 <line:173:3, col:78> Text=" running on CPU zero, other processors are numbered sequentially.  On return"
|   | |-TextComment 0x5575d02c2a40 <line:174:3, col:78> Text=" from this function, the CPU is known to have begun operating and will enter"
|   | |-TextComment 0x5575d02c2a60 <line:175:3, col:79> Text=" the provided function.  Its interrupts will be initialized but disabled such"
|   | `-TextComment 0x5575d02c2a80 <line:176:3, col:68> Text=" that irq_unlock() with the provided key will work to enable them."
|   |-ParagraphComment 0x5575d02c2b90 <line:178:3, line:181:41>
|   | |-TextComment 0x5575d02c2af0 <line:178:3, col:67> Text=" Normally, in SMP mode this function will be called by the kernel"
|   | |-TextComment 0x5575d02c2b10 <line:179:3, col:79> Text=" initialization and should not be used as a user API.  But it is defined here"
|   | |-TextComment 0x5575d02c2b30 <line:180:3, col:76> Text=" for special-purpose apps which want Zephyr running on one core and to use"
|   | `-TextComment 0x5575d02c2b50 <line:181:3, col:41> Text=" others for design-specific processing."
|   |-ParagraphComment 0x5575d02c2be0 <line:183:3>
|   | `-TextComment 0x5575d02c2bb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02c2c00 <col:4, line:184:3> [in] implicitly Param="cpu_num" ParamIndex=0
|   | `-ParagraphComment 0x5575d02c2cb0 <line:183:18, line:184:3>
|   |   |-TextComment 0x5575d02c2c60 <line:183:18, col:43> Text=" Integer number of the CPU"
|   |   `-TextComment 0x5575d02c2c80 <line:184:3> Text=" "
|   |-ParamCommandComment 0x5575d02c2cd0 <col:4, line:185:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5575d02c2d80 <line:184:16, line:185:3>
|   |   |-TextComment 0x5575d02c2d30 <line:184:16, col:40> Text=" Stack memory for the CPU"
|   |   `-TextComment 0x5575d02c2d50 <line:185:3> Text=" "
|   |-ParamCommandComment 0x5575d02c2da0 <col:4, line:186:3> [in] implicitly Param="sz" ParamIndex=2
|   | `-ParagraphComment 0x5575d02c2e50 <line:185:13, line:186:3>
|   |   |-TextComment 0x5575d02c2e00 <line:185:13, col:40> Text=" Stack buffer size, in bytes"
|   |   `-TextComment 0x5575d02c2e20 <line:186:3> Text=" "
|   |-ParamCommandComment 0x5575d02c2e70 <col:4, line:187:3> [in] implicitly Param="fn" ParamIndex=3
|   | `-ParagraphComment 0x5575d02c2f20 <line:186:13, line:187:3>
|   |   |-TextComment 0x5575d02c2ed0 <line:186:13, col:50> Text=" Function to begin running on the CPU."
|   |   `-TextComment 0x5575d02c2ef0 <line:187:3> Text=" "
|   `-ParamCommandComment 0x5575d02c2f40 <col:4, col:51> [in] implicitly Param="arg" ParamIndex=4
|     `-ParagraphComment 0x5575d02c2fd0 <col:14, col:51>
|       `-TextComment 0x5575d02c2fa0 <col:14, col:51> Text=" Untyped argument to be passed to "fn""
|-FunctionDecl 0x5575d01e7008 <line:204:1, col:46> col:28 used arch_irq_lock 'unsigned int (void)' static inline
| `-FullComment 0x5575d02c31f0 <line:200:3, line:202:18>
|   |-ParagraphComment 0x5575d02c30e0 <line:200:3, col:37>
|   | `-TextComment 0x5575d02c30b0 <col:3, col:37> Text=" Lock interrupts on the current CPU"
|   |-ParagraphComment 0x5575d02c3130 <line:202:3>
|   | `-TextComment 0x5575d02c3100 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c3150 <col:4, col:18> Name="see"
|     `-ParagraphComment 0x5575d02c31b0 <col:8, col:18>
|       `-TextComment 0x5575d02c3180 <col:8, col:18> Text=" irq_lock()"
|-FunctionDecl 0x5575d01e7180 <line:211:1, col:52> col:20 used arch_irq_unlock 'void (unsigned int)' static inline
| |-ParmVarDecl 0x5575d01e70f0 <col:36, col:49> col:49 key 'unsigned int'
| `-FullComment 0x5575d02c33a0 <line:207:3, line:209:20>
|   |-ParagraphComment 0x5575d02c3290 <line:207:3, col:39>
|   | `-TextComment 0x5575d02c3260 <col:3, col:39> Text=" Unlock interrupts on the current CPU"
|   |-ParagraphComment 0x5575d02c32e0 <line:209:3>
|   | `-TextComment 0x5575d02c32b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c3300 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5575d02c3360 <col:8, col:20>
|       `-TextComment 0x5575d02c3330 <col:8, col:20> Text=" irq_unlock()"
|-FunctionDecl 0x5575d01e7300 <line:220:1, col:54> col:20 arch_irq_unlocked 'bool (unsigned int)' static inline
| |-ParmVarDecl 0x5575d01e7270 <col:38, col:51> col:51 key 'unsigned int'
| `-FullComment 0x5575d02c4670 <line:214:3, line:218:39>
|   |-ParagraphComment 0x5575d02c3440 <line:214:3, col:68>
|   | `-TextComment 0x5575d02c3410 <col:3, col:68> Text=" Test if calling arch_irq_unlock() with this key would unlock irqs"
|   |-ParagraphComment 0x5575d02c44c0 <line:216:3>
|   | `-TextComment 0x5575d02c3460 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02c44e0 <col:4, line:217:3> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x5575d02c4590 <line:216:14, line:217:3>
|   |   |-TextComment 0x5575d02c4540 <line:216:14, col:47> Text=" value returned by arch_irq_lock()"
|   |   `-TextComment 0x5575d02c4560 <line:217:3> Text=" "
|   `-BlockCommandComment 0x5575d02c45b0 <col:4, line:218:39> Name="return"
|     `-ParagraphComment 0x5575d02c4630 <line:217:11, line:218:39>
|       |-TextComment 0x5575d02c45e0 <line:217:11, col:72> Text=" true if interrupts were unlocked prior to the arch_irq_lock()"
|       `-TextComment 0x5575d02c4600 <line:218:3, col:39> Text=" call that produced the key argument."
|-FunctionDecl 0x5575d01e7480 <line:227:1, col:39> col:6 arch_irq_disable 'void (unsigned int)'
| |-ParmVarDecl 0x5575d01e73f0 <col:23, col:36> col:36 irq 'unsigned int'
| `-FullComment 0x5575d02c4820 <line:223:3, line:225:21>
|   |-ParagraphComment 0x5575d02c4710 <line:223:3, col:39>
|   | `-TextComment 0x5575d02c46e0 <col:3, col:39> Text=" Disable the specified interrupt line"
|   |-ParagraphComment 0x5575d02c4760 <line:225:3>
|   | `-TextComment 0x5575d02c4730 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c4780 <col:4, col:21> Name="see"
|     `-ParagraphComment 0x5575d02c47e0 <col:8, col:21>
|       `-TextComment 0x5575d02c47b0 <col:8, col:21> Text=" irq_disable()"
|-FunctionDecl 0x5575d01e7600 <line:234:1, col:38> col:6 arch_irq_enable 'void (unsigned int)'
| |-ParmVarDecl 0x5575d01e7570 <col:22, col:35> col:35 irq 'unsigned int'
| `-FullComment 0x5575d02c49d0 <line:230:3, line:232:20>
|   |-ParagraphComment 0x5575d02c48c0 <line:230:3, col:38>
|   | `-TextComment 0x5575d02c4890 <col:3, col:38> Text=" Enable the specified interrupt line"
|   |-ParagraphComment 0x5575d02c4910 <line:232:3>
|   | `-TextComment 0x5575d02c48e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c4930 <col:4, col:20> Name="see"
|     `-ParagraphComment 0x5575d02c4990 <col:8, col:20>
|       `-TextComment 0x5575d02c4960 <col:8, col:20> Text=" irq_enable()"
|-FunctionDecl 0x5575d01e77c8 <line:241:1, col:41> col:5 arch_irq_is_enabled 'int (unsigned int)'
| |-ParmVarDecl 0x5575d01e76f0 <col:25, col:38> col:38 irq 'unsigned int'
| `-FullComment 0x5575d02c4b80 <line:237:3, line:239:24>
|   |-ParagraphComment 0x5575d02c4a70 <line:237:3, col:39>
|   | `-TextComment 0x5575d02c4a40 <col:3, col:39> Text=" Test if an interrupt line is enabled"
|   |-ParagraphComment 0x5575d02c4ac0 <line:239:3>
|   | `-TextComment 0x5575d02c4a90 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c4ae0 <col:4, col:24> Name="see"
|     `-ParagraphComment 0x5575d02c4b40 <col:8, col:24>
|       `-TextComment 0x5575d02c4b10 <col:8, col:24> Text=" irq_is_enabled()"
|-FunctionDecl 0x5575d01e7fe8 <line:254:1, line:256:37> line:254:5 used arch_irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |-ParmVarDecl 0x5575d01e78b0 <col:30, col:43> col:43 irq 'unsigned int'
| |-ParmVarDecl 0x5575d01e7930 <col:48, col:61> col:61 priority 'unsigned int'
| |-ParmVarDecl 0x5575d01e7d78 <line:255:9, col:40> col:16 routine 'void (*)(void *)'
| |-ParmVarDecl 0x5575d01e7df8 <line:256:9, col:15> col:15 parameter 'void *'
| |-ParmVarDecl 0x5575d01e7e70 <col:26, col:32> col:32 flags 'u32_t':'unsigned int'
| `-FullComment 0x5575d02c51a0 <line:244:3, line:252:48>
|   |-ParagraphComment 0x5575d02c4c20 <line:244:3, col:53>
|   | `-TextComment 0x5575d02c4bf0 <col:3, col:53> Text=" Arch-specific hook to install a dynamic interrupt."
|   |-ParagraphComment 0x5575d02c4c70 <line:246:3>
|   | `-TextComment 0x5575d02c4c40 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02c4c90 <col:4, line:247:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x5575d02c4d40 <line:246:14, line:247:3>
|   |   |-TextComment 0x5575d02c4cf0 <line:246:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x5575d02c4d10 <line:247:3> Text=" "
|   |-ParamCommandComment 0x5575d02c4d60 <col:4, line:248:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x5575d02c4e10 <line:247:19, line:248:3>
|   |   |-TextComment 0x5575d02c4dc0 <line:247:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x5575d02c4de0 <line:248:3> Text=" "
|   |-ParamCommandComment 0x5575d02c4e30 <col:4, line:249:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x5575d02c4ee0 <line:248:18, line:249:3>
|   |   |-TextComment 0x5575d02c4e90 <line:248:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x5575d02c4eb0 <line:249:3> Text=" "
|   |-ParamCommandComment 0x5575d02c4f00 <col:4, line:250:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x5575d02c4fb0 <line:249:20, line:250:3>
|   |   |-TextComment 0x5575d02c4f60 <line:249:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x5575d02c4f80 <line:250:3> Text=" "
|   |-ParamCommandComment 0x5575d02c4fd0 <col:4, col:52> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x5575d02c5060 <col:16, col:52>
|   |   `-TextComment 0x5575d02c5030 <col:16, col:52> Text=" Arch-specific IRQ configuration flag"
|   |-ParagraphComment 0x5575d02c50b0 <line:252:3>
|   | `-TextComment 0x5575d02c5080 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c50d0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x5575d02c5130 <col:11, col:48>
|       `-TextComment 0x5575d02c5100 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x5575d01e8418 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:27:1, line:34:1> line:27:19 used sys_clock_hw_cycles_per_sec 'int (void)' static inline
| `-CompoundStmt 0x5575d01e84c8 <line:28:1, line:34:1>
|-FunctionDecl 0x5575d01e8950 <line:55:1, line:105:1> line:55:28 used z_tmcvt 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' static inline
| |-ParmVarDecl 0x5575d01e84e8 <col:36, col:42> col:42 used t 'u64_t':'unsigned long long'
| |-ParmVarDecl 0x5575d01e8560 <col:45, col:51> col:51 used from_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5575d01e85d8 <col:60, col:66> col:66 used to_hz 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5575d01e8650 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:13> col:13 used const_hz 'bool'
| |-ParmVarDecl 0x5575d01e86c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:56:28> col:28 used result32 'bool'
| |-ParmVarDecl 0x5575d01e8740 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:13> col:13 used round_up 'bool'
| |-ParmVarDecl 0x5575d01e87b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:57:28> col:28 used round_off 'bool'
| |-CompoundStmt 0x5575d01ef878 <line:58:1, line:105:1>
| | |-DeclStmt 0x5575d01ebad0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:48>
| | | `-VarDecl 0x5575d01e8a90 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:60:47> line:59:7 used mul_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x5575d01ebab8 <col:19, line:60:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x5575d01eba98 <line:59:19, line:60:47> 'int' '&&'
| | |       |-BinaryOperator 0x5575d01e8bf8 <line:59:19, line:60:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x5575d01e8be0 <line:59:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x5575d01e8bc8 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x5575d01e8af8 <col:19> 'bool' lvalue ParmVar 0x5575d01e8650 'const_hz' 'bool'
| | |       | `-ParenExpr 0x5575d01e8ba8 <line:60:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x5575d01e8b88 <col:4, col:12> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x5575d01e8b58 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x5575d01e8b18 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x5575d01e8b70 <col:12> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x5575d01e8b38 <col:12> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x5575d01eba78 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x5575d01eba58 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x5575d01eba00 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x5575d01eb9e0 <col:26, col:34> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x5575d01eb9b0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x5575d01e8c18 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x5575d01eb9c8 <col:34> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x5575d01eb990 <col:34> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x5575d01eba40 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x5575d01eba20 <col:46> 'int' 0
| | |-DeclStmt 0x5575d01ebde0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:48>
| | | `-VarDecl 0x5575d01ebaf8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/sys/time_units.h:62:47> line:61:7 used div_ratio 'bool' cinit
| | |   `-ImplicitCastExpr 0x5575d01ebdc8 <col:19, line:62:47> 'bool' <IntegralToBoolean>
| | |     `-BinaryOperator 0x5575d01ebda8 <line:61:19, line:62:47> 'int' '&&'
| | |       |-BinaryOperator 0x5575d01ebc60 <line:61:19, line:62:19> 'int' '&&'
| | |       | |-ImplicitCastExpr 0x5575d01ebc48 <line:61:19> 'int' <IntegralCast>
| | |       | | `-ImplicitCastExpr 0x5575d01ebc30 <col:19> 'bool' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x5575d01ebb60 <col:19> 'bool' lvalue ParmVar 0x5575d01e8650 'const_hz' 'bool'
| | |       | `-ParenExpr 0x5575d01ebc10 <line:62:3, col:19> 'int'
| | |       |   `-BinaryOperator 0x5575d01ebbf0 <col:4, col:14> 'int' '>'
| | |       |     |-ImplicitCastExpr 0x5575d01ebbc0 <col:4> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |     | `-DeclRefExpr 0x5575d01ebb80 <col:4> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| | |       |     `-ImplicitCastExpr 0x5575d01ebbd8 <col:14> 'u32_t':'unsigned int' <LValueToRValue>
| | |       |       `-DeclRefExpr 0x5575d01ebba0 <col:14> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| | |       `-ParenExpr 0x5575d01ebd88 <col:24, col:47> 'int'
| | |         `-BinaryOperator 0x5575d01ebd68 <col:25, col:46> 'int' '=='
| | |           |-ParenExpr 0x5575d01ebd10 <col:25, col:41> 'unsigned int'
| | |           | `-BinaryOperator 0x5575d01ebcf0 <col:26, col:36> 'unsigned int' '%'
| | |           |   |-ImplicitCastExpr 0x5575d01ebcc0 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |   | `-DeclRefExpr 0x5575d01ebc80 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| | |           |   `-ImplicitCastExpr 0x5575d01ebcd8 <col:36> 'u32_t':'unsigned int' <LValueToRValue>
| | |           |     `-DeclRefExpr 0x5575d01ebca0 <col:36> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| | |           `-ImplicitCastExpr 0x5575d01ebd50 <col:46> 'unsigned int' <IntegralCast>
| | |             `-IntegerLiteral 0x5575d01ebd30 <col:46> 'int' 0
| | |-IfStmt 0x5575d01ec010 <line:64:2, line:66:2>
| | | |-BinaryOperator 0x5575d01ebe68 <line:64:6, col:17> 'int' '=='
| | | | |-ImplicitCastExpr 0x5575d01ebe38 <col:6> 'u32_t':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x5575d01ebdf8 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| | | | `-ImplicitCastExpr 0x5575d01ebe50 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5575d01ebe18 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| | | `-CompoundStmt 0x5575d01ebff8 <col:24, line:66:2>
| | |   `-ReturnStmt 0x5575d01ebfe8 <line:65:3, col:34>
| | |     `-ConditionalOperator 0x5575d01ebfb8 <col:10, col:34> 'unsigned long long'
| | |       |-ImplicitCastExpr 0x5575d01ebf70 <col:10> 'int' <IntegralCast>
| | |       | `-ImplicitCastExpr 0x5575d01ebf58 <col:10> 'bool' <LValueToRValue>
| | |       |   `-DeclRefExpr 0x5575d01ebe88 <col:10> 'bool' lvalue ParmVar 0x5575d01e86c8 'result32' 'bool'
| | |       |-ImplicitCastExpr 0x5575d01ebfa0 <col:21, col:30> 'unsigned long long' <IntegralCast>
| | |       | `-ParenExpr 0x5575d01ebf18 <col:21, col:30> 'u32_t':'unsigned int'
| | |       |   `-CStyleCastExpr 0x5575d01ebef0 <col:22, col:29> 'u32_t':'unsigned int' <IntegralCast>
| | |       |     `-ImplicitCastExpr 0x5575d01ebed8 <col:29> 'u64_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
| | |       |       `-DeclRefExpr 0x5575d01ebea8 <col:29> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01e84e8 't' 'u64_t':'unsigned long long'
| | |       `-ImplicitCastExpr 0x5575d01ebf88 <col:34> 'u64_t':'unsigned long long' <LValueToRValue>
| | |         `-DeclRefExpr 0x5575d01ebf38 <col:34> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01e84e8 't' 'u64_t':'unsigned long long'
| | |-DeclStmt 0x5575d01ec0d8 <line:68:2, col:15>
| | | `-VarDecl 0x5575d01ec038 <col:2, col:14> col:8 used off 'u64_t':'unsigned long long' cinit
| | |   `-ImplicitCastExpr 0x5575d01ec0c0 <col:14> 'u64_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x5575d01ec0a0 <col:14> 'int' 0
| | |-IfStmt 0x5575d01ec608 <line:70:2, line:78:2>
| | | |-UnaryOperator 0x5575d01ec128 <line:70:6, col:7> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x5575d01ec110 <col:7> 'bool' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5575d01ec0f0 <col:7> 'bool' lvalue Var 0x5575d01e8a90 'mul_ratio' 'bool'
| | | `-CompoundStmt 0x5575d01ec5e8 <col:18, line:78:2>
| | |   |-DeclStmt 0x5575d01ec320 <line:71:3, col:59>
| | |   | `-VarDecl 0x5575d01ec150 <col:3, col:52> col:9 used rdivisor 'u32_t':'unsigned int' cinit
| | |   |   `-ConditionalOperator 0x5575d01ec2f0 <col:20, col:52> 'unsigned int'
| | |   |     |-ImplicitCastExpr 0x5575d01ec2c0 <col:20> 'int' <IntegralCast>
| | |   |     | `-ImplicitCastExpr 0x5575d01ec2a8 <col:20> 'bool' <LValueToRValue>
| | |   |     |   `-DeclRefExpr 0x5575d01ec1b8 <col:20> 'bool' lvalue Var 0x5575d01ebaf8 'div_ratio' 'bool'
| | |   |     |-ParenExpr 0x5575d01ec268 <col:32, col:48> 'unsigned int'
| | |   |     | `-BinaryOperator 0x5575d01ec248 <col:33, col:43> 'unsigned int' '/'
| | |   |     |   |-ImplicitCastExpr 0x5575d01ec218 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| | |   |     |   | `-DeclRefExpr 0x5575d01ec1d8 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| | |   |     |   `-ImplicitCastExpr 0x5575d01ec230 <col:43> 'u32_t':'unsigned int' <LValueToRValue>
| | |   |     |     `-DeclRefExpr 0x5575d01ec1f8 <col:43> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| | |   |     `-ImplicitCastExpr 0x5575d01ec2d8 <col:52> 'u32_t':'unsigned int' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x5575d01ec288 <col:52> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| | |   `-IfStmt 0x5575d01ec5c0 <line:73:3, line:77:3> has_else
| | |     |-ImplicitCastExpr 0x5575d01ec358 <line:73:7> 'bool' <LValueToRValue>
| | |     | `-DeclRefExpr 0x5575d01ec338 <col:7> 'bool' lvalue ParmVar 0x5575d01e8740 'round_up' 'bool'
| | |     |-CompoundStmt 0x5575d01ec458 <col:17, line:75:3>
| | |     | `-BinaryOperator 0x5575d01ec438 <line:74:4, col:21> 'u64_t':'unsigned long long' '='
| | |     |   |-DeclRefExpr 0x5575d01ec370 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x5575d01ec038 'off' 'u64_t':'unsigned long long'
| | |     |   `-ImplicitCastExpr 0x5575d01ec420 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | |     |     `-BinaryOperator 0x5575d01ec400 <col:10, col:21> 'unsigned int' '-'
| | |     |       |-ImplicitCastExpr 0x5575d01ec3d0 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | |     |       | `-DeclRefExpr 0x5575d01ec390 <col:10> 'u32_t':'unsigned int' lvalue Var 0x5575d01ec150 'rdivisor' 'u32_t':'unsigned int'
| | |     |       `-ImplicitCastExpr 0x5575d01ec3e8 <col:21> 'unsigned int' <IntegralCast>
| | |     |         `-IntegerLiteral 0x5575d01ec3b0 <col:21> 'int' 1
| | |     `-IfStmt 0x5575d01ec5a8 <line:75:10, line:77:3>
| | |       |-ImplicitCastExpr 0x5575d01ec490 <line:75:14> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0x5575d01ec470 <col:14> 'bool' lvalue ParmVar 0x5575d01e87b8 'round_off' 'bool'
| | |       `-CompoundStmt 0x5575d01ec590 <col:25, line:77:3>
| | |         `-BinaryOperator 0x5575d01ec570 <line:76:4, col:21> 'u64_t':'unsigned long long' '='
| | |           |-DeclRefExpr 0x5575d01ec4a8 <col:4> 'u64_t':'unsigned long long' lvalue Var 0x5575d01ec038 'off' 'u64_t':'unsigned long long'
| | |           `-ImplicitCastExpr 0x5575d01ec558 <col:10, col:21> 'u64_t':'unsigned long long' <IntegralCast>
| | |             `-BinaryOperator 0x5575d01ec538 <col:10, col:21> 'unsigned int' '/'
| | |               |-ImplicitCastExpr 0x5575d01ec508 <col:10> 'u32_t':'unsigned int' <LValueToRValue>
| | |               | `-DeclRefExpr 0x5575d01ec4c8 <col:10> 'u32_t':'unsigned int' lvalue Var 0x5575d01ec150 'rdivisor' 'u32_t':'unsigned int'
| | |               `-ImplicitCastExpr 0x5575d01ec520 <col:21> 'unsigned int' <IntegralCast>
| | |                 `-IntegerLiteral 0x5575d01ec4e8 <col:21> 'int' 2
| | `-IfStmt 0x5575d01ef828 <line:85:2, line:104:2> has_else
| |   |-ImplicitCastExpr 0x5575d01ec640 <line:85:6> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x5575d01ec620 <col:6> 'bool' lvalue Var 0x5575d01ebaf8 'div_ratio' 'bool'
| |   |-CompoundStmt 0x5575d01eefd0 <col:17, line:92:2>
| |   | |-CompoundAssignOperator 0x5575d01ec6b0 <line:86:3, col:8> 'u64_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| |   | | |-DeclRefExpr 0x5575d01ec658 <col:3> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01e84e8 't' 'u64_t':'unsigned long long'
| |   | | `-ImplicitCastExpr 0x5575d01ec698 <col:8> 'u64_t':'unsigned long long' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x5575d01ec678 <col:8> 'u64_t':'unsigned long long' lvalue Var 0x5575d01ec038 'off' 'u64_t':'unsigned long long'
| |   | `-IfStmt 0x5575d01eefa8 <line:87:3, line:91:3> has_else
| |   |   |-ImplicitCastExpr 0x5575d01ec700 <line:87:7> 'bool' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x5575d01ec6e0 <col:7> 'bool' lvalue ParmVar 0x5575d01e86c8 'result32' 'bool'
| |   |   |-CompoundStmt 0x5575d01ec8a0 <col:17, line:89:3>
| |   |   | `-ReturnStmt 0x5575d01ec890 <line:88:4, col:40>
| |   |   |   `-ImplicitCastExpr 0x5575d01ec878 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |   |   |     `-BinaryOperator 0x5575d01ec858 <col:11, col:40> 'unsigned int' '/'
| |   |   |       |-ParenExpr 0x5575d01ec788 <col:11, col:20> 'u32_t':'unsigned int'
| |   |   |       | `-CStyleCastExpr 0x5575d01ec760 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |   |   |       |   `-ImplicitCastExpr 0x5575d01ec748 <col:19> 'u64_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
| |   |   |       |     `-DeclRefExpr 0x5575d01ec718 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01e84e8 't' 'u64_t':'unsigned long long'
| |   |   |       `-ParenExpr 0x5575d01ec838 <col:24, col:40> 'unsigned int'
| |   |   |         `-BinaryOperator 0x5575d01ec818 <col:25, col:35> 'unsigned int' '/'
| |   |   |           |-ImplicitCastExpr 0x5575d01ec7e8 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |           | `-DeclRefExpr 0x5575d01ec7a8 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| |   |   |           `-ImplicitCastExpr 0x5575d01ec800 <col:35> 'u32_t':'unsigned int' <LValueToRValue>
| |   |   |             `-DeclRefExpr 0x5575d01ec7c8 <col:35> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| |   |   `-CompoundStmt 0x5575d01eef90 <line:89:10, line:91:3>
| |   |     `-ReturnStmt 0x5575d01eef80 <line:90:4, col:31>
| |   |       `-BinaryOperator 0x5575d01eef60 <col:11, col:31> 'unsigned long long' '/'
| |   |         |-ImplicitCastExpr 0x5575d01eef30 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |   |         | `-DeclRefExpr 0x5575d01ec8b8 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01e84e8 't' 'u64_t':'unsigned long long'
| |   |         `-ImplicitCastExpr 0x5575d01eef48 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |   |           `-ParenExpr 0x5575d01ec968 <col:15, col:31> 'unsigned int'
| |   |             `-BinaryOperator 0x5575d01ec948 <col:16, col:26> 'unsigned int' '/'
| |   |               |-ImplicitCastExpr 0x5575d01ec918 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |   |               | `-DeclRefExpr 0x5575d01ec8d8 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| |   |               `-ImplicitCastExpr 0x5575d01ec930 <col:26> 'u32_t':'unsigned int' <LValueToRValue>
| |   |                 `-DeclRefExpr 0x5575d01ec8f8 <col:26> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| |   `-IfStmt 0x5575d01ef800 <line:92:9, line:104:2> has_else
| |     |-ImplicitCastExpr 0x5575d01ef010 <line:92:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01eeff0 <col:13> 'bool' lvalue Var 0x5575d01e8a90 'mul_ratio' 'bool'
| |     |-CompoundStmt 0x5575d01ef370 <col:24, line:98:2>
| |     | `-IfStmt 0x5575d01ef348 <line:93:3, line:97:3> has_else
| |     |   |-ImplicitCastExpr 0x5575d01ef048 <line:93:7> 'bool' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5575d01ef028 <col:7> 'bool' lvalue ParmVar 0x5575d01e86c8 'result32' 'bool'
| |     |   |-CompoundStmt 0x5575d01ef1e8 <col:17, line:95:3>
| |     |   | `-ReturnStmt 0x5575d01ef1d8 <line:94:4, col:40>
| |     |   |   `-ImplicitCastExpr 0x5575d01ef1c0 <col:11, col:40> 'u64_t':'unsigned long long' <IntegralCast>
| |     |   |     `-BinaryOperator 0x5575d01ef1a0 <col:11, col:40> 'unsigned int' '*'
| |     |   |       |-ParenExpr 0x5575d01ef0d0 <col:11, col:20> 'u32_t':'unsigned int'
| |     |   |       | `-CStyleCastExpr 0x5575d01ef0a8 <col:12, col:19> 'u32_t':'unsigned int' <IntegralCast>
| |     |   |       |   `-ImplicitCastExpr 0x5575d01ef090 <col:19> 'u64_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
| |     |   |       |     `-DeclRefExpr 0x5575d01ef060 <col:19> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01e84e8 't' 'u64_t':'unsigned long long'
| |     |   |       `-ParenExpr 0x5575d01ef180 <col:24, col:40> 'unsigned int'
| |     |   |         `-BinaryOperator 0x5575d01ef160 <col:25, col:33> 'unsigned int' '/'
| |     |   |           |-ImplicitCastExpr 0x5575d01ef130 <col:25> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |           | `-DeclRefExpr 0x5575d01ef0f0 <col:25> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| |     |   |           `-ImplicitCastExpr 0x5575d01ef148 <col:33> 'u32_t':'unsigned int' <LValueToRValue>
| |     |   |             `-DeclRefExpr 0x5575d01ef110 <col:33> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| |     |   `-CompoundStmt 0x5575d01ef330 <line:95:10, line:97:3>
| |     |     `-ReturnStmt 0x5575d01ef320 <line:96:4, col:31>
| |     |       `-BinaryOperator 0x5575d01ef300 <col:11, col:31> 'unsigned long long' '*'
| |     |         |-ImplicitCastExpr 0x5575d01ef2d0 <col:11> 'u64_t':'unsigned long long' <LValueToRValue>
| |     |         | `-DeclRefExpr 0x5575d01ef200 <col:11> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01e84e8 't' 'u64_t':'unsigned long long'
| |     |         `-ImplicitCastExpr 0x5575d01ef2e8 <col:15, col:31> 'unsigned long long' <IntegralCast>
| |     |           `-ParenExpr 0x5575d01ef2b0 <col:15, col:31> 'unsigned int'
| |     |             `-BinaryOperator 0x5575d01ef290 <col:16, col:24> 'unsigned int' '/'
| |     |               |-ImplicitCastExpr 0x5575d01ef260 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |     |               | `-DeclRefExpr 0x5575d01ef220 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| |     |               `-ImplicitCastExpr 0x5575d01ef278 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |     |                 `-DeclRefExpr 0x5575d01ef240 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| |     `-CompoundStmt 0x5575d01ef7e8 <line:98:9, line:104:2>
| |       `-IfStmt 0x5575d01ef7c0 <line:99:3, line:103:3> has_else
| |         |-ImplicitCastExpr 0x5575d01ef3a8 <line:99:7> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0x5575d01ef388 <col:7> 'bool' lvalue ParmVar 0x5575d01e86c8 'result32' 'bool'
| |         |-CompoundStmt 0x5575d01ef5f0 <col:17, line:101:3>
| |         | `-ReturnStmt 0x5575d01ef5e0 <line:100:4, col:46>
| |         |   `-ImplicitCastExpr 0x5575d01ef5c8 <col:11, col:46> 'u64_t':'unsigned long long' <IntegralCast>
| |         |     `-CStyleCastExpr 0x5575d01ef5a0 <col:11, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |         |       `-ParenExpr 0x5575d01ef580 <col:18, col:46> 'unsigned long long'
| |         |         `-BinaryOperator 0x5575d01ef530 <col:19, col:39> 'unsigned long long' '/'
| |         |           |-ParenExpr 0x5575d01ef4c0 <col:19, col:35> 'unsigned long long'
| |         |           | `-BinaryOperator 0x5575d01ef4a0 <col:20, col:32> 'unsigned long long' '+'
| |         |           |   |-BinaryOperator 0x5575d01ef448 <col:20, col:24> 'unsigned long long' '*'
| |         |           |   | |-ImplicitCastExpr 0x5575d01ef400 <col:20> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |   | | `-DeclRefExpr 0x5575d01ef3c0 <col:20> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01e84e8 't' 'u64_t':'unsigned long long'
| |         |           |   | `-ImplicitCastExpr 0x5575d01ef430 <col:24> 'unsigned long long' <IntegralCast>
| |         |           |   |   `-ImplicitCastExpr 0x5575d01ef418 <col:24> 'u32_t':'unsigned int' <LValueToRValue>
| |         |           |   |     `-DeclRefExpr 0x5575d01ef3e0 <col:24> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| |         |           |   `-ImplicitCastExpr 0x5575d01ef488 <col:32> 'u64_t':'unsigned long long' <LValueToRValue>
| |         |           |     `-DeclRefExpr 0x5575d01ef468 <col:32> 'u64_t':'unsigned long long' lvalue Var 0x5575d01ec038 'off' 'u64_t':'unsigned long long'
| |         |           `-ImplicitCastExpr 0x5575d01ef518 <col:39> 'unsigned long long' <IntegralCast>
| |         |             `-ImplicitCastExpr 0x5575d01ef500 <col:39> 'u32_t':'unsigned int' <LValueToRValue>
| |         |               `-DeclRefExpr 0x5575d01ef4e0 <col:39> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| |         `-CompoundStmt 0x5575d01ef7a8 <line:101:10, line:103:3>
| |           `-ReturnStmt 0x5575d01ef798 <line:102:4, col:31>
| |             `-BinaryOperator 0x5575d01ef778 <col:11, col:31> 'unsigned long long' '/'
| |               |-ParenExpr 0x5575d01ef708 <col:11, col:27> 'unsigned long long'
| |               | `-BinaryOperator 0x5575d01ef6e8 <col:12, col:24> 'unsigned long long' '+'
| |               |   |-BinaryOperator 0x5575d01ef690 <col:12, col:16> 'unsigned long long' '*'
| |               |   | |-ImplicitCastExpr 0x5575d01ef648 <col:12> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |   | | `-DeclRefExpr 0x5575d01ef608 <col:12> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01e84e8 't' 'u64_t':'unsigned long long'
| |               |   | `-ImplicitCastExpr 0x5575d01ef678 <col:16> 'unsigned long long' <IntegralCast>
| |               |   |   `-ImplicitCastExpr 0x5575d01ef660 <col:16> 'u32_t':'unsigned int' <LValueToRValue>
| |               |   |     `-DeclRefExpr 0x5575d01ef628 <col:16> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e85d8 'to_hz' 'u32_t':'unsigned int'
| |               |   `-ImplicitCastExpr 0x5575d01ef6d0 <col:24> 'u64_t':'unsigned long long' <LValueToRValue>
| |               |     `-DeclRefExpr 0x5575d01ef6b0 <col:24> 'u64_t':'unsigned long long' lvalue Var 0x5575d01ec038 'off' 'u64_t':'unsigned long long'
| |               `-ImplicitCastExpr 0x5575d01ef760 <col:31> 'unsigned long long' <IntegralCast>
| |                 `-ImplicitCastExpr 0x5575d01ef748 <col:31> 'u32_t':'unsigned int' <LValueToRValue>
| |                   `-DeclRefExpr 0x5575d01ef728 <col:31> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01e8560 'from_hz' 'u32_t':'unsigned int'
| `-AlwaysInlineAttr 0x5575d01e8a28 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5575d01ef9d0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:190:1, line:194:1> line:190:21 k_ms_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01ef8c8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01efe08 <line:191:1, line:194:1>
| | `-ReturnStmt 0x5575d01efdc8 <line:193:2, col:65>
| |   `-ImplicitCastExpr 0x5575d01efdb0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01efc98 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01efc80 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01efa78 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01efd08 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01efcf0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01efa98 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01ef8c8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01efd20 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01efab8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5575d01efd38 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01efb48 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01efb30 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01efad8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01efd50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01efba0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01efb88 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01efb68 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01efd68 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01efbc0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01efd80 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01efbe0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01efd98 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01efc00 <col:16> 'int' 0
| `-FullComment 0x5575d02c5480 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:182:4, line:188:35>
|   |-ParagraphComment 0x5575d02c5240 <line:182:4>
|   | `-TextComment 0x5575d02c5210 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c5260 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c52c0 <col:11, col:50>
|   |   `-TextComment 0x5575d02c5290 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c5360 <line:184:3, line:186:44>
|   | |-TextComment 0x5575d02c52e0 <line:184:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5575d02c5300 <line:185:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c5320 <line:186:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c53b0 <line:188:3>
|   | `-TextComment 0x5575d02c5380 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c53d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c5430 <col:11, col:35>
|       `-TextComment 0x5575d02c5400 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f0f78 <line:204:1, line:208:1> line:204:21 k_ms_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01efe30 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f12e8 <line:205:1, line:208:1>
| | `-ReturnStmt 0x5575d01f12a8 <line:207:2, col:66>
| |   `-CallExpr 0x5575d01f11a8 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f1190 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01f1020 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01f1200 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01f1040 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01efe30 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f1218 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01f1060 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5575d01f1230 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01f10b8 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01f10a0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01f1080 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01f1248 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01f1110 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01f10f8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01f10d8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f1260 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f1130 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f1278 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f1150 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01f1290 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01f1170 <col:16> 'int' 0
| `-FullComment 0x5575d02c5760 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:196:4, line:202:35>
|   |-ParagraphComment 0x5575d02c5520 <line:196:4>
|   | `-TextComment 0x5575d02c54f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c5540 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c55a0 <col:11, col:50>
|   |   `-TextComment 0x5575d02c5570 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c5640 <line:198:3, line:200:44>
|   | |-TextComment 0x5575d02c55c0 <line:198:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5575d02c55e0 <line:199:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c5600 <line:200:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c5690 <line:202:3>
|   | `-TextComment 0x5575d02c5660 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c56b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c5710 <col:11, col:35>
|       `-TextComment 0x5575d02c56e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f13a0 <line:218:1, line:222:1> line:218:21 k_ms_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f1310 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f1738 <line:219:1, line:222:1>
| | `-ReturnStmt 0x5575d01f1700 <line:221:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01f16e8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01f15d0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01f15b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01f1448 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01f1640 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01f1628 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01f1468 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01f1310 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01f1658 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01f1488 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5575d01f1670 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01f14e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01f14c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01f14a8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01f1688 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01f1538 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01f1520 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01f1500 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01f16a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f1558 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01f16b8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f1578 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01f16d0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01f1598 <col:16> 'int' 1
| `-FullComment 0x5575d02c5a40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:210:4, line:216:35>
|   |-ParagraphComment 0x5575d02c5800 <line:210:4>
|   | `-TextComment 0x5575d02c57d0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c5820 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c5880 <col:11, col:50>
|   |   `-TextComment 0x5575d02c5850 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c5920 <line:212:3, line:214:37>
|   | |-TextComment 0x5575d02c58a0 <line:212:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5575d02c58c0 <line:213:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c58e0 <line:214:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02c5970 <line:216:3>
|   | `-TextComment 0x5575d02c5940 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c5990 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c59f0 <col:11, col:35>
|       `-TextComment 0x5575d02c59c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f17f0 <line:232:1, line:236:1> line:232:21 k_ms_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f1760 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f1b58 <line:233:1, line:236:1>
| | `-ReturnStmt 0x5575d01f1b20 <line:235:2, col:65>
| |   `-CallExpr 0x5575d01f1a20 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f1a08 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01f1898 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01f1a78 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01f18b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01f1760 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f1a90 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01f18d8 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5575d01f1aa8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01f1930 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01f1918 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01f18f8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01f1ac0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01f1988 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01f1970 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01f1950 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f1ad8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f19a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f1af0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f19c8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01f1b08 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01f19e8 <col:16> 'int' 1
| `-FullComment 0x5575d02c5d20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:224:4, line:230:35>
|   |-ParagraphComment 0x5575d02c5ae0 <line:224:4>
|   | `-TextComment 0x5575d02c5ab0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c5b00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c5b60 <col:11, col:50>
|   |   `-TextComment 0x5575d02c5b30 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c5c00 <line:226:3, line:228:37>
|   | |-TextComment 0x5575d02c5b80 <line:226:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5575d02c5ba0 <line:227:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c5bc0 <line:228:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02c5c50 <line:230:3>
|   | `-TextComment 0x5575d02c5c20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c5c70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c5cd0 <col:11, col:35>
|       `-TextComment 0x5575d02c5ca0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f1c10 <line:246:1, line:250:1> line:246:21 k_ms_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f1b80 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f1fc8 <line:247:1, line:250:1>
| | `-ReturnStmt 0x5575d01f1f90 <line:249:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01f1f78 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01f1e40 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01f1e28 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01f1cb8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01f1eb0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01f1e98 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01f1cd8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01f1b80 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01f1ec8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01f1cf8 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5575d01f1ee0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01f1d50 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01f1d38 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01f1d18 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01f1ef8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01f1da8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01f1d90 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01f1d70 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01f1f10 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f1dc8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01f1f28 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f1de8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5575d01f1f60 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01f1e08 <col:16> 'int' 0
| `-FullComment 0x5575d02c6000 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:238:4, line:244:35>
|   |-ParagraphComment 0x5575d02c5dc0 <line:238:4>
|   | `-TextComment 0x5575d02c5d90 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c5de0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c5e40 <col:11, col:50>
|   |   `-TextComment 0x5575d02c5e10 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c5ee0 <line:240:3, line:242:45>
|   | |-TextComment 0x5575d02c5e60 <line:240:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5575d02c5e80 <line:241:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c5ea0 <line:242:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02c5f30 <line:244:3>
|   | `-TextComment 0x5575d02c5f00 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c5f50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c5fb0 <col:11, col:35>
|       `-TextComment 0x5575d02c5f80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f2080 <line:260:1, line:264:1> line:260:21 k_ms_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f1ff0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f23e8 <line:261:1, line:264:1>
| | `-ReturnStmt 0x5575d01f23b0 <line:263:2, col:65>
| |   `-CallExpr 0x5575d01f22b0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f2298 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01f2128 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01f2308 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01f2148 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01f1ff0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f2320 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01f2168 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5575d01f2338 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01f21c0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01f21a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01f2188 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01f2350 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01f2218 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01f2200 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01f21e0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f2368 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f2238 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f2380 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f2258 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5575d01f2398 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01f2278 <col:16> 'int' 0
| `-FullComment 0x5575d02c62e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:252:4, line:258:35>
|   |-ParagraphComment 0x5575d02c60a0 <line:252:4>
|   | `-TextComment 0x5575d02c6070 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c60c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c6120 <col:11, col:50>
|   |   `-TextComment 0x5575d02c60f0 <col:11, col:50> Text=" Convert milliseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c61c0 <line:254:3, line:256:45>
|   | |-TextComment 0x5575d02c6140 <line:254:3, col:59> Text=" Converts time values in milliseconds to hardware cycles."
|   | |-TextComment 0x5575d02c6160 <line:255:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c6180 <line:256:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02c6210 <line:258:3>
|   | `-TextComment 0x5575d02c61e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c6230 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c6290 <col:11, col:35>
|       `-TextComment 0x5575d02c6260 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f24a0 <line:274:1, line:278:1> line:274:21 k_ms_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f2410 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f26d8 <line:275:1, line:278:1>
| `-FullComment 0x5575d02c65d0 <line:266:4, line:272:35>
|   |-ParagraphComment 0x5575d02c6380 <line:266:4>
|   | `-TextComment 0x5575d02c6350 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c63a0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c6400 <col:11, col:40>
|   |   `-TextComment 0x5575d02c63d0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5575d02c64a0 <line:268:3, line:270:44>
|   | |-TextComment 0x5575d02c6420 <line:268:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5575d02c6440 <line:269:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c6460 <line:270:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c6500 <line:272:3>
|   | `-TextComment 0x5575d02c64d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c6520 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c6580 <col:11, col:35>
|       `-TextComment 0x5575d02c6550 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f2788 <line:288:1, line:292:1> line:288:21 k_ms_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f26f8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f29b8 <line:289:1, line:292:1>
| `-FullComment 0x5575d02c68b0 <line:280:4, line:286:35>
|   |-ParagraphComment 0x5575d02c6670 <line:280:4>
|   | `-TextComment 0x5575d02c6640 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c6690 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c66f0 <col:11, col:40>
|   |   `-TextComment 0x5575d02c66c0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5575d02c6790 <line:282:3, line:284:44>
|   | |-TextComment 0x5575d02c6710 <line:282:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5575d02c6730 <line:283:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c6750 <line:284:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c67e0 <line:286:3>
|   | `-TextComment 0x5575d02c67b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c6800 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c6860 <col:11, col:35>
|       `-TextComment 0x5575d02c6830 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f2a68 <line:302:1, line:306:1> line:302:21 k_ms_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f29d8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f2c98 <line:303:1, line:306:1>
| `-FullComment 0x5575d02c6b90 <line:294:4, line:300:35>
|   |-ParagraphComment 0x5575d02c6950 <line:294:4>
|   | `-TextComment 0x5575d02c6920 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c6970 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c69d0 <col:11, col:40>
|   |   `-TextComment 0x5575d02c69a0 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5575d02c6a70 <line:296:3, line:298:37>
|   | |-TextComment 0x5575d02c69f0 <line:296:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5575d02c6a10 <line:297:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c6a30 <line:298:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02c6ac0 <line:300:3>
|   | `-TextComment 0x5575d02c6a90 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c6ae0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c6b40 <col:11, col:35>
|       `-TextComment 0x5575d02c6b10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f2d48 <line:316:1, line:320:1> line:316:21 k_ms_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f2cb8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f3a18 <line:317:1, line:320:1>
| `-FullComment 0x5575d02c6e70 <line:308:4, line:314:35>
|   |-ParagraphComment 0x5575d02c6c30 <line:308:4>
|   | `-TextComment 0x5575d02c6c00 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c6c50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c6cb0 <col:11, col:40>
|   |   `-TextComment 0x5575d02c6c80 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5575d02c6d50 <line:310:3, line:312:37>
|   | |-TextComment 0x5575d02c6cd0 <line:310:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5575d02c6cf0 <line:311:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c6d10 <line:312:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02c6da0 <line:314:3>
|   | `-TextComment 0x5575d02c6d70 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c6dc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c6e20 <col:11, col:35>
|       `-TextComment 0x5575d02c6df0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f3ac8 <line:330:1, line:334:1> line:330:21 k_ms_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f3a38 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f3cf8 <line:331:1, line:334:1>
| `-FullComment 0x5575d02c7150 <line:322:4, line:328:35>
|   |-ParagraphComment 0x5575d02c6f10 <line:322:4>
|   | `-TextComment 0x5575d02c6ee0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c6f30 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c6f90 <col:11, col:40>
|   |   `-TextComment 0x5575d02c6f60 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5575d02c7030 <line:324:3, line:326:45>
|   | |-TextComment 0x5575d02c6fb0 <line:324:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5575d02c6fd0 <line:325:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c6ff0 <line:326:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02c7080 <line:328:3>
|   | `-TextComment 0x5575d02c7050 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c70a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c7100 <col:11, col:35>
|       `-TextComment 0x5575d02c70d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f3da8 <line:344:1, line:348:1> line:344:21 k_ms_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f3d18 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f3fd8 <line:345:1, line:348:1>
| `-FullComment 0x5575d02c7430 <line:336:4, line:342:35>
|   |-ParagraphComment 0x5575d02c71f0 <line:336:4>
|   | `-TextComment 0x5575d02c71c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c7210 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c7270 <col:11, col:40>
|   |   `-TextComment 0x5575d02c7240 <col:11, col:40> Text=" Convert milliseconds to ticks"
|   |-ParagraphComment 0x5575d02c7310 <line:338:3, line:340:45>
|   | |-TextComment 0x5575d02c7290 <line:338:3, col:49> Text=" Converts time values in milliseconds to ticks."
|   | |-TextComment 0x5575d02c72b0 <line:339:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c72d0 <line:340:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02c7360 <line:342:3>
|   | `-TextComment 0x5575d02c7330 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c7380 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c73e0 <col:11, col:35>
|       `-TextComment 0x5575d02c73b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f4088 <line:358:1, line:362:1> line:358:21 k_us_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f3ff8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f4428 <line:359:1, line:362:1>
| | `-ReturnStmt 0x5575d01f43e8 <line:361:2, col:65>
| |   `-ImplicitCastExpr 0x5575d01f43d0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01f42b8 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01f42a0 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01f4130 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01f4328 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01f4310 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01f4150 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01f3ff8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01f4340 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01f4170 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5575d01f4358 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01f41c8 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01f41b0 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01f4190 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01f4370 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01f4220 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01f4208 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01f41e8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01f4388 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f4240 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01f43a0 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f4260 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01f43b8 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01f4280 <col:16> 'int' 0
| `-FullComment 0x5575d02c7710 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:350:4, line:356:35>
|   |-ParagraphComment 0x5575d02c74d0 <line:350:4>
|   | `-TextComment 0x5575d02c74a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c74f0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c7550 <col:11, col:50>
|   |   `-TextComment 0x5575d02c7520 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c75f0 <line:352:3, line:354:44>
|   | |-TextComment 0x5575d02c7570 <line:352:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5575d02c7590 <line:353:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c75b0 <line:354:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c7640 <line:356:3>
|   | `-TextComment 0x5575d02c7610 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c7660 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c76c0 <col:11, col:35>
|       `-TextComment 0x5575d02c7690 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f44e0 <line:372:1, line:376:1> line:372:21 k_us_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f4450 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f4848 <line:373:1, line:376:1>
| | `-ReturnStmt 0x5575d01f4810 <line:375:2, col:66>
| |   `-CallExpr 0x5575d01f4710 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f46f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01f4588 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01f4768 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01f45a8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01f4450 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f4780 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01f45c8 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5575d01f4798 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01f4620 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01f4608 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01f45e8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01f47b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01f4678 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01f4660 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01f4640 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f47c8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f4698 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f47e0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f46b8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01f47f8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01f46d8 <col:16> 'int' 0
| `-FullComment 0x5575d02c79f0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:364:4, line:370:35>
|   |-ParagraphComment 0x5575d02c77b0 <line:364:4>
|   | `-TextComment 0x5575d02c7780 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c77d0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c7830 <col:11, col:50>
|   |   `-TextComment 0x5575d02c7800 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c78d0 <line:366:3, line:368:44>
|   | |-TextComment 0x5575d02c7850 <line:366:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5575d02c7870 <line:367:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c7890 <line:368:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c7920 <line:370:3>
|   | `-TextComment 0x5575d02c78f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c7940 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c79a0 <col:11, col:35>
|       `-TextComment 0x5575d02c7970 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f4900 <line:386:1, line:390:1> line:386:21 k_us_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f4870 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f4cb8 <line:387:1, line:390:1>
| | `-ReturnStmt 0x5575d01f4c78 <line:389:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01f4c60 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01f4b48 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01f4b30 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01f49a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01f4bb8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01f4ba0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01f49c8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01f4870 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01f4bd0 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01f4a00 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5575d01f4be8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01f4a58 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01f4a40 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01f4a20 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01f4c00 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01f4ab0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01f4a98 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01f4a78 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01f4c18 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f4ad0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01f4c30 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f4af0 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01f4c48 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01f4b10 <col:16> 'int' 1
| `-FullComment 0x5575d02c7cd0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:378:4, line:384:35>
|   |-ParagraphComment 0x5575d02c7a90 <line:378:4>
|   | `-TextComment 0x5575d02c7a60 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c7ab0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c7b10 <col:11, col:50>
|   |   `-TextComment 0x5575d02c7ae0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c7bb0 <line:380:3, line:382:37>
|   | |-TextComment 0x5575d02c7b30 <line:380:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5575d02c7b50 <line:381:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c7b70 <line:382:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02c7c00 <line:384:3>
|   | `-TextComment 0x5575d02c7bd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c7c20 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c7c80 <col:11, col:35>
|       `-TextComment 0x5575d02c7c50 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f4d70 <line:400:1, line:404:1> line:400:21 k_us_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f4ce0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f50d8 <line:401:1, line:404:1>
| | `-ReturnStmt 0x5575d01f50a0 <line:403:2, col:65>
| |   `-CallExpr 0x5575d01f4fa0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f4f88 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01f4e18 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01f4ff8 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01f4e38 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01f4ce0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f5010 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01f4e58 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5575d01f5028 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01f4eb0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01f4e98 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01f4e78 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01f5040 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01f4f08 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01f4ef0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01f4ed0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f5058 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f4f28 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f5070 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f4f48 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01f5088 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01f4f68 <col:16> 'int' 1
| `-FullComment 0x5575d02c7fb0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:392:4, line:398:35>
|   |-ParagraphComment 0x5575d02c7d70 <line:392:4>
|   | `-TextComment 0x5575d02c7d40 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c7d90 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c7df0 <col:11, col:50>
|   |   `-TextComment 0x5575d02c7dc0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c7e90 <line:394:3, line:396:37>
|   | |-TextComment 0x5575d02c7e10 <line:394:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5575d02c7e30 <line:395:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c7e50 <line:396:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02c7ee0 <line:398:3>
|   | `-TextComment 0x5575d02c7eb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c7f00 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c7f60 <col:11, col:35>
|       `-TextComment 0x5575d02c7f30 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f5190 <line:414:1, line:418:1> line:414:21 k_us_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f5100 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f5528 <line:415:1, line:418:1>
| | `-ReturnStmt 0x5575d01f54f0 <line:417:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01f54d8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01f53c0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01f53a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01f5238 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01f5430 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01f5418 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01f5258 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01f5100 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01f5448 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01f5278 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5575d01f5460 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01f52d0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01f52b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01f5298 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01f5478 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01f5328 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01f5310 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01f52f0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01f5490 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f5348 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01f54a8 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f5368 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5575d01f54c0 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01f5388 <col:16> 'int' 0
| `-FullComment 0x5575d02c8290 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:406:4, line:412:35>
|   |-ParagraphComment 0x5575d02c8050 <line:406:4>
|   | `-TextComment 0x5575d02c8020 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c8070 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c80d0 <col:11, col:50>
|   |   `-TextComment 0x5575d02c80a0 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c8170 <line:408:3, line:410:45>
|   | |-TextComment 0x5575d02c80f0 <line:408:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5575d02c8110 <line:409:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c8130 <line:410:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02c81c0 <line:412:3>
|   | `-TextComment 0x5575d02c8190 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c81e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c8240 <col:11, col:35>
|       `-TextComment 0x5575d02c8210 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f55e0 <line:428:1, line:432:1> line:428:21 k_us_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f5550 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f5948 <line:429:1, line:432:1>
| | `-ReturnStmt 0x5575d01f5910 <line:431:2, col:65>
| |   `-CallExpr 0x5575d01f5810 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f57f8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01f5688 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01f5868 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01f56a8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01f5550 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f5880 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01f56c8 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5575d01f5898 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01f5720 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01f5708 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01f56e8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01f58b0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01f5778 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01f5760 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01f5740 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f58c8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f5798 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f58e0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f57b8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5575d01f58f8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01f57d8 <col:16> 'int' 0
| `-FullComment 0x5575d02c8590 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:420:4, line:426:35>
|   |-ParagraphComment 0x5575d02c8330 <line:420:4>
|   | `-TextComment 0x5575d02c8300 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c8350 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02c83b0 <col:11, col:50>
|   |   `-TextComment 0x5575d02c8380 <col:11, col:50> Text=" Convert microseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c8450 <line:422:3, line:424:45>
|   | |-TextComment 0x5575d02c83d0 <line:422:3, col:59> Text=" Converts time values in microseconds to hardware cycles."
|   | |-TextComment 0x5575d02c83f0 <line:423:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c8410 <line:424:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02c84a0 <line:426:3>
|   | `-TextComment 0x5575d02c8470 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c84e0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c8540 <col:11, col:35>
|       `-TextComment 0x5575d02c8510 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f5a10 <line:442:1, line:446:1> line:442:21 k_us_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f5970 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f5c48 <line:443:1, line:446:1>
| `-FullComment 0x5575d02c8870 <line:434:4, line:440:35>
|   |-ParagraphComment 0x5575d02c8630 <line:434:4>
|   | `-TextComment 0x5575d02c8600 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c8650 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c86b0 <col:11, col:40>
|   |   `-TextComment 0x5575d02c8680 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5575d02c8750 <line:436:3, line:438:44>
|   | |-TextComment 0x5575d02c86d0 <line:436:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5575d02c86f0 <line:437:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c8710 <line:438:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c87a0 <line:440:3>
|   | `-TextComment 0x5575d02c8770 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c87c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c8820 <col:11, col:35>
|       `-TextComment 0x5575d02c87f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f5cf8 <line:456:1, line:460:1> line:456:21 k_us_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f5c68 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f5f28 <line:457:1, line:460:1>
| `-FullComment 0x5575d02c8b50 <line:448:4, line:454:35>
|   |-ParagraphComment 0x5575d02c8910 <line:448:4>
|   | `-TextComment 0x5575d02c88e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c8930 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c8990 <col:11, col:40>
|   |   `-TextComment 0x5575d02c8960 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5575d02c8a30 <line:450:3, line:452:44>
|   | |-TextComment 0x5575d02c89b0 <line:450:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5575d02c89d0 <line:451:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c89f0 <line:452:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c8a80 <line:454:3>
|   | `-TextComment 0x5575d02c8a50 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c8aa0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c8b00 <col:11, col:35>
|       `-TextComment 0x5575d02c8ad0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f5fd8 <line:470:1, line:474:1> line:470:21 k_us_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f5f48 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f6208 <line:471:1, line:474:1>
| `-FullComment 0x5575d02c8e30 <line:462:4, line:468:35>
|   |-ParagraphComment 0x5575d02c8bf0 <line:462:4>
|   | `-TextComment 0x5575d02c8bc0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c8c10 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c8c70 <col:11, col:40>
|   |   `-TextComment 0x5575d02c8c40 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5575d02c8d10 <line:464:3, line:466:37>
|   | |-TextComment 0x5575d02c8c90 <line:464:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5575d02c8cb0 <line:465:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c8cd0 <line:466:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02c8d60 <line:468:3>
|   | `-TextComment 0x5575d02c8d30 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c8d80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c8de0 <col:11, col:35>
|       `-TextComment 0x5575d02c8db0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f62b8 <line:484:1, line:488:1> line:484:21 k_us_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f6228 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f64e8 <line:485:1, line:488:1>
| `-FullComment 0x5575d02c9110 <line:476:4, line:482:35>
|   |-ParagraphComment 0x5575d02c8ed0 <line:476:4>
|   | `-TextComment 0x5575d02c8ea0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c8ef0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c8f50 <col:11, col:40>
|   |   `-TextComment 0x5575d02c8f20 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5575d02c8ff0 <line:478:3, line:480:37>
|   | |-TextComment 0x5575d02c8f70 <line:478:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5575d02c8f90 <line:479:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c8fb0 <line:480:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02c9040 <line:482:3>
|   | `-TextComment 0x5575d02c9010 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c9060 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c90c0 <col:11, col:35>
|       `-TextComment 0x5575d02c9090 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f6598 <line:498:1, line:502:1> line:498:21 k_us_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f6508 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f67c8 <line:499:1, line:502:1>
| `-FullComment 0x5575d02c93f0 <line:490:4, line:496:35>
|   |-ParagraphComment 0x5575d02c91b0 <line:490:4>
|   | `-TextComment 0x5575d02c9180 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c91d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c9230 <col:11, col:40>
|   |   `-TextComment 0x5575d02c9200 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5575d02c92d0 <line:492:3, line:494:45>
|   | |-TextComment 0x5575d02c9250 <line:492:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5575d02c9270 <line:493:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c9290 <line:494:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02c9320 <line:496:3>
|   | `-TextComment 0x5575d02c92f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c9340 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c93a0 <col:11, col:35>
|       `-TextComment 0x5575d02c9370 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f6878 <line:512:1, line:516:1> line:512:21 k_us_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f67e8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f6e78 <line:513:1, line:516:1>
| `-FullComment 0x5575d02c96d0 <line:504:4, line:510:35>
|   |-ParagraphComment 0x5575d02c9490 <line:504:4>
|   | `-TextComment 0x5575d02c9460 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c94b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02c9510 <col:11, col:40>
|   |   `-TextComment 0x5575d02c94e0 <col:11, col:40> Text=" Convert microseconds to ticks"
|   |-ParagraphComment 0x5575d02c95b0 <line:506:3, line:508:45>
|   | |-TextComment 0x5575d02c9530 <line:506:3, col:49> Text=" Converts time values in microseconds to ticks."
|   | |-TextComment 0x5575d02c9550 <line:507:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c9570 <line:508:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02c9600 <line:510:3>
|   | `-TextComment 0x5575d02c95d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c9620 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c9680 <col:11, col:35>
|       `-TextComment 0x5575d02c9650 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f6f28 <line:526:1, line:530:1> line:526:21 k_ns_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f6e98 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f72c8 <line:527:1, line:530:1>
| | `-ReturnStmt 0x5575d01f7288 <line:529:2, col:65>
| |   `-ImplicitCastExpr 0x5575d01f7270 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01f7158 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01f7140 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01f6fd0 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01f71c8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01f71b0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01f6ff0 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01f6e98 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01f71e0 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01f7010 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5575d01f71f8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01f7068 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01f7050 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01f7030 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01f7210 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01f70c0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01f70a8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01f7088 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01f7228 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f70e0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01f7240 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f7100 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01f7258 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01f7120 <col:16> 'int' 0
| `-FullComment 0x5575d02c99b0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:518:4, line:524:35>
|   |-ParagraphComment 0x5575d02c9770 <line:518:4>
|   | `-TextComment 0x5575d02c9740 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c9790 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02c97f0 <col:11, col:49>
|   |   `-TextComment 0x5575d02c97c0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c9890 <line:520:3, line:522:44>
|   | |-TextComment 0x5575d02c9810 <line:520:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5575d02c9830 <line:521:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c9850 <line:522:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c98e0 <line:524:3>
|   | `-TextComment 0x5575d02c98b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c9900 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c9960 <col:11, col:35>
|       `-TextComment 0x5575d02c9930 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f7380 <line:540:1, line:544:1> line:540:21 k_ns_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f72f0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f76e8 <line:541:1, line:544:1>
| | `-ReturnStmt 0x5575d01f76b0 <line:543:2, col:66>
| |   `-CallExpr 0x5575d01f75b0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f7598 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01f7428 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01f7608 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01f7448 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01f72f0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f7620 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01f7468 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5575d01f7638 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01f74c0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01f74a8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01f7488 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01f7650 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01f7518 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01f7500 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01f74e0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f7668 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f7538 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f7680 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f7558 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01f7698 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01f7578 <col:16> 'int' 0
| `-FullComment 0x5575d02c9c90 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:532:4, line:538:35>
|   |-ParagraphComment 0x5575d02c9a50 <line:532:4>
|   | `-TextComment 0x5575d02c9a20 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c9a70 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02c9ad0 <col:11, col:49>
|   |   `-TextComment 0x5575d02c9aa0 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c9b70 <line:534:3, line:536:44>
|   | |-TextComment 0x5575d02c9af0 <line:534:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5575d02c9b10 <line:535:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02c9b30 <line:536:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02c9bc0 <line:538:3>
|   | `-TextComment 0x5575d02c9b90 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c9be0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c9c40 <col:11, col:35>
|       `-TextComment 0x5575d02c9c10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f77a0 <line:554:1, line:558:1> line:554:21 k_ns_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f7710 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f7b38 <line:555:1, line:558:1>
| | `-ReturnStmt 0x5575d01f7b00 <line:557:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01f7ae8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01f79d0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01f79b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01f7848 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01f7a40 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01f7a28 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01f7868 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01f7710 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01f7a58 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01f7888 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5575d01f7a70 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01f78e0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01f78c8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01f78a8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01f7a88 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01f7938 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01f7920 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01f7900 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01f7aa0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f7958 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01f7ab8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f7978 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01f7ad0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01f7998 <col:16> 'int' 1
| `-FullComment 0x5575d02c9f70 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:546:4, line:552:35>
|   |-ParagraphComment 0x5575d02c9d30 <line:546:4>
|   | `-TextComment 0x5575d02c9d00 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02c9d50 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02c9db0 <col:11, col:49>
|   |   `-TextComment 0x5575d02c9d80 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02c9e50 <line:548:3, line:550:37>
|   | |-TextComment 0x5575d02c9dd0 <line:548:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5575d02c9df0 <line:549:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02c9e10 <line:550:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02c9ea0 <line:552:3>
|   | `-TextComment 0x5575d02c9e70 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02c9ec0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02c9f20 <col:11, col:35>
|       `-TextComment 0x5575d02c9ef0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f7bf0 <line:568:1, line:572:1> line:568:21 k_ns_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f7b60 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f7f88 <line:569:1, line:572:1>
| | `-ReturnStmt 0x5575d01f7f48 <line:571:2, col:65>
| |   `-CallExpr 0x5575d01f7e48 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f7e30 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01f7c98 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01f7ea0 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01f7cb8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01f7b60 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f7eb8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01f7cd8 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5575d01f7ed0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01f7d30 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01f7d18 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01f7cf8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01f7ee8 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01f7d88 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01f7d70 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01f7d50 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f7f00 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f7da8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f7f18 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f7df0 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01f7f30 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01f7e10 <col:16> 'int' 1
| `-FullComment 0x5575d02ca250 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:560:4, line:566:35>
|   |-ParagraphComment 0x5575d02ca010 <line:560:4>
|   | `-TextComment 0x5575d02c9fe0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02ca030 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02ca090 <col:11, col:49>
|   |   `-TextComment 0x5575d02ca060 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02ca130 <line:562:3, line:564:37>
|   | |-TextComment 0x5575d02ca0b0 <line:562:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5575d02ca0d0 <line:563:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02ca0f0 <line:564:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02ca180 <line:566:3>
|   | `-TextComment 0x5575d02ca150 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ca1a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02ca200 <col:11, col:35>
|       `-TextComment 0x5575d02ca1d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f8040 <line:582:1, line:586:1> line:582:21 k_ns_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f7fb0 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f83d8 <line:583:1, line:586:1>
| | `-ReturnStmt 0x5575d01f83a0 <line:585:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01f8388 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01f8270 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01f8258 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01f80e8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01f82e0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01f82c8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01f8108 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01f7fb0 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01f82f8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01f8128 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5575d01f8310 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01f8180 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01f8168 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01f8148 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01f8328 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01f81d8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01f81c0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01f81a0 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01f8340 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f81f8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01f8358 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01f8218 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5575d01f8370 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01f8238 <col:16> 'int' 0
| `-FullComment 0x5575d02ca540 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:574:4, line:580:35>
|   |-ParagraphComment 0x5575d02ca2f0 <line:574:4>
|   | `-TextComment 0x5575d02ca2c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02ca310 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02ca370 <col:11, col:49>
|   |   `-TextComment 0x5575d02ca340 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02ca410 <line:576:3, line:578:45>
|   | |-TextComment 0x5575d02ca390 <line:576:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5575d02ca3b0 <line:577:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02ca3d0 <line:578:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02ca460 <line:580:3>
|   | `-TextComment 0x5575d02ca430 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ca480 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02ca4f0 <col:11, col:35>
|       `-TextComment 0x5575d02ca4b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f8490 <line:596:1, line:600:1> line:596:21 k_ns_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f8400 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f87f8 <line:597:1, line:600:1>
| | `-ReturnStmt 0x5575d01f87c0 <line:599:2, col:65>
| |   `-CallExpr 0x5575d01f86c0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f86a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01f8538 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01f8718 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01f8558 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01f8400 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01f8730 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01f8578 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5575d01f8748 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01f85d0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01f85b8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01f8598 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01f8760 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01f8628 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01f8610 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01f85f0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f8778 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f8648 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01f8790 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01f8668 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5575d01f87a8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01f8688 <col:16> 'int' 0
| `-FullComment 0x5575d02ca820 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:588:4, line:594:35>
|   |-ParagraphComment 0x5575d02ca5e0 <line:588:4>
|   | `-TextComment 0x5575d02ca5b0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02ca600 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02ca660 <col:11, col:49>
|   |   `-TextComment 0x5575d02ca630 <col:11, col:49> Text=" Convert nanoseconds to hardware cycles"
|   |-ParagraphComment 0x5575d02ca700 <line:590:3, line:592:45>
|   | |-TextComment 0x5575d02ca680 <line:590:3, col:58> Text=" Converts time values in nanoseconds to hardware cycles."
|   | |-TextComment 0x5575d02ca6a0 <line:591:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02ca6c0 <line:592:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02ca750 <line:594:3>
|   | `-TextComment 0x5575d02ca720 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ca770 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02ca7d0 <col:11, col:35>
|       `-TextComment 0x5575d02ca7a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f88b0 <line:610:1, line:614:1> line:610:21 k_ns_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01f8820 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01f8ae8 <line:611:1, line:614:1>
| `-FullComment 0x5575d02cab00 <line:602:4, line:608:35>
|   |-ParagraphComment 0x5575d02ca8c0 <line:602:4>
|   | `-TextComment 0x5575d02ca890 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02ca8e0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02ca940 <col:11, col:39>
|   |   `-TextComment 0x5575d02ca910 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5575d02ca9e0 <line:604:3, line:606:44>
|   | |-TextComment 0x5575d02ca960 <line:604:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5575d02ca980 <line:605:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02ca9a0 <line:606:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02caa30 <line:608:3>
|   | `-TextComment 0x5575d02caa00 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02caa50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02caab0 <col:11, col:35>
|       `-TextComment 0x5575d02caa80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01f8b98 <line:624:1, line:628:1> line:624:21 k_ns_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01f8b08 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01f8dc8 <line:625:1, line:628:1>
| `-FullComment 0x5575d02cade0 <line:616:4, line:622:35>
|   |-ParagraphComment 0x5575d02caba0 <line:616:4>
|   | `-TextComment 0x5575d02cab70 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cabc0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02cac20 <col:11, col:39>
|   |   `-TextComment 0x5575d02cabf0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5575d02cacc0 <line:618:3, line:620:44>
|   | |-TextComment 0x5575d02cac40 <line:618:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5575d02cac60 <line:619:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cac80 <line:620:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02cad10 <line:622:3>
|   | `-TextComment 0x5575d02cace0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cad30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cad90 <col:11, col:35>
|       `-TextComment 0x5575d02cad60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a77d0 <line:638:1, line:642:1> line:638:21 k_ns_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01a7740 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01a7a08 <line:639:1, line:642:1>
| `-FullComment 0x5575d02cb0c0 <line:630:4, line:636:35>
|   |-ParagraphComment 0x5575d02cae80 <line:630:4>
|   | `-TextComment 0x5575d02cae50 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02caea0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02caf00 <col:11, col:39>
|   |   `-TextComment 0x5575d02caed0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5575d02cafa0 <line:632:3, line:634:37>
|   | |-TextComment 0x5575d02caf20 <line:632:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5575d02caf40 <line:633:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02caf60 <line:634:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02caff0 <line:636:3>
|   | `-TextComment 0x5575d02cafc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cb010 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cb070 <col:11, col:35>
|       `-TextComment 0x5575d02cb040 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a7ab8 <line:652:1, line:656:1> line:652:21 k_ns_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01a7a28 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01a7ce8 <line:653:1, line:656:1>
| `-FullComment 0x5575d02cb3a0 <line:644:4, line:650:35>
|   |-ParagraphComment 0x5575d02cb160 <line:644:4>
|   | `-TextComment 0x5575d02cb130 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cb180 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02cb1e0 <col:11, col:39>
|   |   `-TextComment 0x5575d02cb1b0 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5575d02cb280 <line:646:3, line:648:37>
|   | |-TextComment 0x5575d02cb200 <line:646:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5575d02cb220 <line:647:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cb240 <line:648:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02cb2d0 <line:650:3>
|   | `-TextComment 0x5575d02cb2a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cb2f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cb350 <col:11, col:35>
|       `-TextComment 0x5575d02cb320 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a7d98 <line:666:1, line:670:1> line:666:21 k_ns_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01a7d08 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01a7f48 <line:667:1, line:670:1>
| `-FullComment 0x5575d02cb680 <line:658:4, line:664:35>
|   |-ParagraphComment 0x5575d02cb440 <line:658:4>
|   | `-TextComment 0x5575d02cb410 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cb460 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02cb4c0 <col:11, col:39>
|   |   `-TextComment 0x5575d02cb490 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5575d02cb560 <line:660:3, line:662:45>
|   | |-TextComment 0x5575d02cb4e0 <line:660:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5575d02cb500 <line:661:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cb520 <line:662:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02cb5b0 <line:664:3>
|   | `-TextComment 0x5575d02cb580 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cb5d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cb630 <col:11, col:35>
|       `-TextComment 0x5575d02cb600 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a7ff8 <line:680:1, line:684:1> line:680:21 k_ns_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01a7f68 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01a81a8 <line:681:1, line:684:1>
| `-FullComment 0x5575d02cb960 <line:672:4, line:678:35>
|   |-ParagraphComment 0x5575d02cb720 <line:672:4>
|   | `-TextComment 0x5575d02cb6f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cb740 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02cb7a0 <col:11, col:39>
|   |   `-TextComment 0x5575d02cb770 <col:11, col:39> Text=" Convert nanoseconds to ticks"
|   |-ParagraphComment 0x5575d02cb840 <line:674:3, line:676:45>
|   | |-TextComment 0x5575d02cb7c0 <line:674:3, col:48> Text=" Converts time values in nanoseconds to ticks."
|   | |-TextComment 0x5575d02cb7e0 <line:675:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cb800 <line:676:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02cb890 <line:678:3>
|   | `-TextComment 0x5575d02cb860 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cb8b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cb910 <col:11, col:35>
|       `-TextComment 0x5575d02cb8e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a8258 <line:694:1, line:698:1> line:694:21 k_cyc_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01a81c8 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01a85f8 <line:695:1, line:698:1>
| | `-ReturnStmt 0x5575d01a85b8 <line:697:2, col:65>
| |   `-ImplicitCastExpr 0x5575d01a85a0 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01a8488 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01a8470 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01a8300 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01a84f8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01a84e0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01a8320 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01a81c8 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01a8510 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01a8378 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01a8360 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01a8340 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01a8528 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01a8398 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5575d01a8540 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01a83f0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01a83d8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01a83b8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01a8558 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01a8410 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01a8570 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01a8430 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01a8588 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01a8450 <col:16> 'int' 0
| `-FullComment 0x5575d02cbc40 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:686:4, line:692:35>
|   |-ParagraphComment 0x5575d02cba00 <line:686:4>
|   | `-TextComment 0x5575d02cb9d0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cba20 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cba80 <col:11, col:50>
|   |   `-TextComment 0x5575d02cba50 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5575d02cbb20 <line:688:3, line:690:44>
|   | |-TextComment 0x5575d02cbaa0 <line:688:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5575d02cbac0 <line:689:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cbae0 <line:690:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02cbb70 <line:692:3>
|   | `-TextComment 0x5575d02cbb40 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cbb90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cbbf0 <col:11, col:35>
|       `-TextComment 0x5575d02cbbc0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a8790 <line:708:1, line:712:1> line:708:21 k_cyc_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01a8620 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01a8af8 <line:709:1, line:712:1>
| | `-ReturnStmt 0x5575d01a8ac0 <line:711:2, col:66>
| |   `-CallExpr 0x5575d01a89c0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01a89a8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01a8838 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01a8a18 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01a8858 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01a8620 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01a8a30 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01a88b0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01a8898 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01a8878 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01a8a48 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01a88d0 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5575d01a8a60 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01a8928 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01a8910 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01a88f0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01a8a78 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01a8948 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01a8a90 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01a8968 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01a8aa8 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01a8988 <col:16> 'int' 0
| `-FullComment 0x5575d02cbf20 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:700:4, line:706:35>
|   |-ParagraphComment 0x5575d02cbce0 <line:700:4>
|   | `-TextComment 0x5575d02cbcb0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cbd00 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cbd60 <col:11, col:50>
|   |   `-TextComment 0x5575d02cbd30 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5575d02cbe00 <line:702:3, line:704:44>
|   | |-TextComment 0x5575d02cbd80 <line:702:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5575d02cbda0 <line:703:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cbdc0 <line:704:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02cbe50 <line:706:3>
|   | `-TextComment 0x5575d02cbe20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cbe70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cbed0 <col:11, col:35>
|       `-TextComment 0x5575d02cbea0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a8bb0 <line:722:1, line:726:1> line:722:21 k_cyc_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01a8b20 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01a8f48 <line:723:1, line:726:1>
| | `-ReturnStmt 0x5575d01a8f10 <line:725:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01a8ef8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01a8de0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01a8dc8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01a8c58 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01a8e50 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01a8e38 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01a8c78 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01a8b20 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01a8e68 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01a8cd0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01a8cb8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01a8c98 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01a8e80 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01a8cf0 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5575d01a8e98 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01a8d48 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01a8d30 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01a8d10 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01a8eb0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01a8d68 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01a8ec8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01a8d88 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01a8ee0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01a8da8 <col:16> 'int' 1
| `-FullComment 0x5575d02cc200 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:714:4, line:720:35>
|   |-ParagraphComment 0x5575d02cbfc0 <line:714:4>
|   | `-TextComment 0x5575d02cbf90 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cbfe0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cc040 <col:11, col:50>
|   |   `-TextComment 0x5575d02cc010 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5575d02cc0e0 <line:716:3, line:718:37>
|   | |-TextComment 0x5575d02cc060 <line:716:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5575d02cc080 <line:717:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cc0a0 <line:718:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02cc130 <line:720:3>
|   | `-TextComment 0x5575d02cc100 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cc150 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cc1b0 <col:11, col:35>
|       `-TextComment 0x5575d02cc180 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a9000 <line:736:1, line:740:1> line:736:21 k_cyc_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01a8f70 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01a9368 <line:737:1, line:740:1>
| | `-ReturnStmt 0x5575d01a9330 <line:739:2, col:65>
| |   `-CallExpr 0x5575d01a9230 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01a9218 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01a90a8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01a9288 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01a90c8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01a8f70 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01a92a0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01a9120 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01a9108 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01a90e8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01a92b8 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01a9140 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5575d01a92d0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01a9198 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01a9180 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01a9160 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01a92e8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01a91b8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01a9300 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01a91d8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01a9318 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01a91f8 <col:16> 'int' 1
| `-FullComment 0x5575d02cc500 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:728:4, line:734:35>
|   |-ParagraphComment 0x5575d02cc2a0 <line:728:4>
|   | `-TextComment 0x5575d02cc270 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cc2c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cc320 <col:11, col:50>
|   |   `-TextComment 0x5575d02cc2f0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5575d02cc3c0 <line:730:3, line:732:37>
|   | |-TextComment 0x5575d02cc340 <line:730:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5575d02cc360 <line:731:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cc380 <line:732:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02cc410 <line:734:3>
|   | `-TextComment 0x5575d02cc3e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cc430 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cc490 <col:11, col:35>
|       `-TextComment 0x5575d02cc460 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a9420 <line:750:1, line:754:1> line:750:21 k_cyc_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01a9390 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01a97c8 <line:751:1, line:754:1>
| | `-ReturnStmt 0x5575d01a9780 <line:753:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01a9768 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01a9650 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01a9638 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01a94c8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01a96c0 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01a96a8 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01a94e8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01a9390 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01a96d8 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01a9540 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01a9528 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01a9508 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01a96f0 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01a9560 <col:17> 'int' 1000
| |       |-ImplicitCastExpr 0x5575d01a9708 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01a95b8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01a95a0 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01a9580 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01a9720 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01a95d8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01a9738 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01a95f8 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5575d01a9750 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01a9618 <col:16> 'int' 0
| `-FullComment 0x5575d02cc7e0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:742:4, line:748:35>
|   |-ParagraphComment 0x5575d02cc5a0 <line:742:4>
|   | `-TextComment 0x5575d02cc570 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cc5c0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cc620 <col:11, col:50>
|   |   `-TextComment 0x5575d02cc5f0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5575d02cc6c0 <line:744:3, line:746:45>
|   | |-TextComment 0x5575d02cc640 <line:744:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5575d02cc660 <line:745:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cc680 <line:746:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02cc710 <line:748:3>
|   | `-TextComment 0x5575d02cc6e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cc730 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cc790 <col:11, col:35>
|       `-TextComment 0x5575d02cc760 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a9880 <line:764:1, line:768:1> line:764:21 k_cyc_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01a97f0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01a9be8 <line:765:1, line:768:1>
| | `-ReturnStmt 0x5575d01a9bb0 <line:767:2, col:65>
| |   `-CallExpr 0x5575d01a9ab0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01a9a98 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01a9928 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01a9b08 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01a9948 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01a97f0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01a9b20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01a99a0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01a9988 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01a9968 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01a9b38 <line:175:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01a99c0 <col:17> 'int' 1000
| |     |-ImplicitCastExpr 0x5575d01a9b50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01a9a18 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01a9a00 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01a99e0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01a9b68 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01a9a38 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01a9b80 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01a9a58 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5575d01a9b98 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01a9a78 <col:16> 'int' 0
| `-FullComment 0x5575d02ccac0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:756:4, line:762:35>
|   |-ParagraphComment 0x5575d02cc880 <line:756:4>
|   | `-TextComment 0x5575d02cc850 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cc8a0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cc900 <col:11, col:50>
|   |   `-TextComment 0x5575d02cc8d0 <col:11, col:50> Text=" Convert hardware cycles to milliseconds"
|   |-ParagraphComment 0x5575d02cc9a0 <line:758:3, line:760:45>
|   | |-TextComment 0x5575d02cc920 <line:758:3, col:59> Text=" Converts time values in hardware cycles to milliseconds."
|   | |-TextComment 0x5575d02cc940 <line:759:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cc960 <line:760:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02cc9f0 <line:762:3>
|   | `-TextComment 0x5575d02cc9c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cca10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cca70 <col:11, col:35>
|       `-TextComment 0x5575d02cca40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01a9ca0 <line:778:1, line:782:1> line:778:21 k_cyc_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01a9c10 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01aa038 <line:779:1, line:782:1>
| | `-ReturnStmt 0x5575d01aa000 <line:781:2, col:65>
| |   `-ImplicitCastExpr 0x5575d01a9fe8 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01a9ed0 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01a9eb8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01a9d48 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01a9f40 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01a9f28 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01a9d68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01a9c10 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01a9f58 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01a9dc0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01a9da8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01a9d88 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01a9f70 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01a9de0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5575d01a9f88 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01a9e38 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01a9e20 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01a9e00 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01a9fa0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01a9e58 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01a9fb8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01a9e78 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01a9fd0 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01a9e98 <col:16> 'int' 0
| `-FullComment 0x5575d02ccda0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:770:4, line:776:35>
|   |-ParagraphComment 0x5575d02ccb60 <line:770:4>
|   | `-TextComment 0x5575d02ccb30 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02ccb80 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02ccbe0 <col:11, col:50>
|   |   `-TextComment 0x5575d02ccbb0 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5575d02ccc80 <line:772:3, line:774:44>
|   | |-TextComment 0x5575d02ccc00 <line:772:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5575d02ccc20 <line:773:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02ccc40 <line:774:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02cccd0 <line:776:3>
|   | `-TextComment 0x5575d02ccca0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cccf0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02ccd50 <col:11, col:35>
|       `-TextComment 0x5575d02ccd20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01aa0f0 <line:792:1, line:796:1> line:792:21 k_cyc_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01aa060 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01aa458 <line:793:1, line:796:1>
| | `-ReturnStmt 0x5575d01aa420 <line:795:2, col:66>
| |   `-CallExpr 0x5575d01aa320 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01aa308 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01aa198 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01aa378 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01aa1b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01aa060 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01aa390 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01aa210 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01aa1f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01aa1d8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01aa3a8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01aa230 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5575d01aa3c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01aa288 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01aa270 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01aa250 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01aa3d8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01aa2a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01aa3f0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01aa2c8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01aa408 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01aa2e8 <col:16> 'int' 0
| `-FullComment 0x5575d02cd080 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:784:4, line:790:35>
|   |-ParagraphComment 0x5575d02cce40 <line:784:4>
|   | `-TextComment 0x5575d02cce10 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cce60 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02ccec0 <col:11, col:50>
|   |   `-TextComment 0x5575d02cce90 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5575d02ccf60 <line:786:3, line:788:44>
|   | |-TextComment 0x5575d02ccee0 <line:786:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5575d02ccf00 <line:787:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02ccf20 <line:788:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02ccfb0 <line:790:3>
|   | `-TextComment 0x5575d02ccf80 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ccfd0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cd030 <col:11, col:35>
|       `-TextComment 0x5575d02cd000 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01aa510 <line:806:1, line:810:1> line:806:21 k_cyc_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01aa480 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01aa8c8 <line:807:1, line:810:1>
| | `-ReturnStmt 0x5575d01aa888 <line:809:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01aa870 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01aa740 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01aa728 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01aa5b8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01aa7c8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01aa7b0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01aa5d8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01aa480 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01aa7e0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01aa630 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01aa618 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01aa5f8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01aa7f8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01aa650 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5575d01aa810 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01aa6a8 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01aa690 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01aa670 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01aa828 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01aa6c8 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01aa840 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01aa6e8 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01aa858 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01aa708 <col:16> 'int' 1
| `-FullComment 0x5575d02cd360 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:798:4, line:804:35>
|   |-ParagraphComment 0x5575d02cd120 <line:798:4>
|   | `-TextComment 0x5575d02cd0f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cd140 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cd1a0 <col:11, col:50>
|   |   `-TextComment 0x5575d02cd170 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5575d02cd240 <line:800:3, line:802:37>
|   | |-TextComment 0x5575d02cd1c0 <line:800:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5575d02cd1e0 <line:801:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cd200 <line:802:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02cd290 <line:804:3>
|   | `-TextComment 0x5575d02cd260 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cd2b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cd310 <col:11, col:35>
|       `-TextComment 0x5575d02cd2e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01aa980 <line:820:1, line:824:1> line:820:21 k_cyc_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01aa8f0 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01aace8 <line:821:1, line:824:1>
| | `-ReturnStmt 0x5575d01aacb0 <line:823:2, col:65>
| |   `-CallExpr 0x5575d01aabb0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01aab98 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01aaa28 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01aac08 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01aaa48 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01aa8f0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01aac20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01aaaa0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01aaa88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01aaa68 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01aac38 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01aaac0 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5575d01aac50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01aab18 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01aab00 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01aaae0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01aac68 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01aab38 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01aac80 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01aab58 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01aac98 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01aab78 <col:16> 'int' 1
| `-FullComment 0x5575d02cd640 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:812:4, line:818:35>
|   |-ParagraphComment 0x5575d02cd400 <line:812:4>
|   | `-TextComment 0x5575d02cd3d0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cd420 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cd480 <col:11, col:50>
|   |   `-TextComment 0x5575d02cd450 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5575d02cd520 <line:814:3, line:816:37>
|   | |-TextComment 0x5575d02cd4a0 <line:814:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5575d02cd4c0 <line:815:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cd4e0 <line:816:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02cd570 <line:818:3>
|   | `-TextComment 0x5575d02cd540 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cd590 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cd5f0 <col:11, col:35>
|       `-TextComment 0x5575d02cd5c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01aada0 <line:834:1, line:838:1> line:834:21 k_cyc_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01aad10 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01ab138 <line:835:1, line:838:1>
| | `-ReturnStmt 0x5575d01ab100 <line:837:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01ab0e8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01aafd0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01aafb8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01aae48 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01ab040 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01ab028 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01aae68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01aad10 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01ab058 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01aaec0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01aaea8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01aae88 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01ab070 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01aaee0 <col:17> 'int' 1000000
| |       |-ImplicitCastExpr 0x5575d01ab088 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01aaf38 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01aaf20 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01aaf00 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01ab0a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01aaf58 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01ab0b8 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01aaf78 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5575d01ab0d0 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01aaf98 <col:16> 'int' 0
| `-FullComment 0x5575d02cd920 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:826:4, line:832:35>
|   |-ParagraphComment 0x5575d02cd6e0 <line:826:4>
|   | `-TextComment 0x5575d02cd6b0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cd700 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cd760 <col:11, col:50>
|   |   `-TextComment 0x5575d02cd730 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5575d02cd800 <line:828:3, line:830:45>
|   | |-TextComment 0x5575d02cd780 <line:828:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5575d02cd7a0 <line:829:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cd7c0 <line:830:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02cd850 <line:832:3>
|   | `-TextComment 0x5575d02cd820 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cd870 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cd8d0 <col:11, col:35>
|       `-TextComment 0x5575d02cd8a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ab1f0 <line:848:1, line:852:1> line:848:21 k_cyc_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01ab160 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01ab558 <line:849:1, line:852:1>
| | `-ReturnStmt 0x5575d01ab520 <line:851:2, col:65>
| |   `-CallExpr 0x5575d01ab420 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01ab408 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01ab298 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01ab478 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01ab2b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01ab160 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01ab490 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01ab310 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01ab2f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01ab2d8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01ab4a8 <line:176:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01ab330 <col:17> 'int' 1000000
| |     |-ImplicitCastExpr 0x5575d01ab4c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01ab388 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01ab370 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01ab350 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01ab4d8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01ab3a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01ab4f0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01ab3c8 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5575d01ab508 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01ab3e8 <col:16> 'int' 0
| `-FullComment 0x5575d02cdc00 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:840:4, line:846:35>
|   |-ParagraphComment 0x5575d02cd9c0 <line:840:4>
|   | `-TextComment 0x5575d02cd990 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cd9e0 <col:5, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02cda40 <col:11, col:50>
|   |   `-TextComment 0x5575d02cda10 <col:11, col:50> Text=" Convert hardware cycles to microseconds"
|   |-ParagraphComment 0x5575d02cdae0 <line:842:3, line:844:45>
|   | |-TextComment 0x5575d02cda60 <line:842:3, col:59> Text=" Converts time values in hardware cycles to microseconds."
|   | |-TextComment 0x5575d02cda80 <line:843:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cdaa0 <line:844:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02cdb30 <line:846:3>
|   | `-TextComment 0x5575d02cdb00 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cdb50 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cdbb0 <col:11, col:35>
|       `-TextComment 0x5575d02cdb80 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ab610 <line:862:1, line:866:1> line:862:21 k_cyc_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01ab580 <col:41, col:47> col:47 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01ab9c8 <line:863:1, line:866:1>
| | `-ReturnStmt 0x5575d01ab988 <line:865:2, col:65>
| |   `-ImplicitCastExpr 0x5575d01ab970 <col:9, col:65> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01ab858 <col:9, col:65> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01ab840 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01ab6b8 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01ab8c8 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01ab8b0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01ab6d8 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01ab580 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01ab8e0 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01ab730 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01ab718 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01ab6f8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01ab8f8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01ab750 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5575d01ab910 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01ab7c0 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01ab790 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01ab770 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01ab928 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01ab7e0 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01ab940 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01ab800 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01ab958 <col:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01ab820 <col:16> 'int' 0
| `-FullComment 0x5575d02cdee0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:854:4, line:860:35>
|   |-ParagraphComment 0x5575d02cdca0 <line:854:4>
|   | `-TextComment 0x5575d02cdc70 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cdcc0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02cdd20 <col:11, col:49>
|   |   `-TextComment 0x5575d02cdcf0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5575d02cddc0 <line:856:3, line:858:44>
|   | |-TextComment 0x5575d02cdd40 <line:856:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5575d02cdd60 <line:857:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cdd80 <line:858:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02cde10 <line:860:3>
|   | `-TextComment 0x5575d02cdde0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cde30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cde90 <col:11, col:35>
|       `-TextComment 0x5575d02cde60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01aba80 <line:876:1, line:880:1> line:876:21 k_cyc_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01ab9f0 <col:41, col:47> col:47 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01abde8 <line:877:1, line:880:1>
| | `-ReturnStmt 0x5575d01abdb0 <line:879:2, col:66>
| |   `-CallExpr 0x5575d01abcb0 <col:9, col:66> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01abc98 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01abb28 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01abd08 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01abb48 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01ab9f0 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01abd20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01abba0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01abb88 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01abb68 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01abd38 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01abbc0 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5575d01abd50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01abc18 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01abc00 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01abbe0 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01abd68 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01abc38 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01abd80 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01abc58 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01abd98 <col:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01abc78 <col:16> 'int' 0
| `-FullComment 0x5575d02ce1c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:868:4, line:874:35>
|   |-ParagraphComment 0x5575d02cdf80 <line:868:4>
|   | `-TextComment 0x5575d02cdf50 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cdfa0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02ce000 <col:11, col:49>
|   |   `-TextComment 0x5575d02cdfd0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5575d02ce0a0 <line:870:3, line:872:44>
|   | |-TextComment 0x5575d02ce020 <line:870:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5575d02ce040 <line:871:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02ce060 <line:872:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02ce0f0 <line:874:3>
|   | `-TextComment 0x5575d02ce0c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ce110 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02ce170 <col:11, col:35>
|       `-TextComment 0x5575d02ce140 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01abea0 <line:890:1, line:894:1> line:890:21 k_cyc_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01abe10 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01ac238 <line:891:1, line:894:1>
| | `-ReturnStmt 0x5575d01ac200 <line:893:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01ac1e8 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01ac0d0 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01ac0b8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01abf48 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01ac140 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01ac128 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01abf68 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01abe10 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01ac158 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01abfc0 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01abfa8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01abf88 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01ac170 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01abfe0 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5575d01ac188 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01ac038 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01ac020 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01ac000 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01ac1a0 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01ac058 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01ac1b8 <line:15:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01ac078 <col:16> 'int' 0
| |       `-ImplicitCastExpr 0x5575d01ac1d0 <line:14:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01ac098 <col:16> 'int' 1
| `-FullComment 0x5575d02ce4a0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:882:4, line:888:35>
|   |-ParagraphComment 0x5575d02ce260 <line:882:4>
|   | `-TextComment 0x5575d02ce230 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02ce280 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02ce2e0 <col:11, col:49>
|   |   `-TextComment 0x5575d02ce2b0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5575d02ce380 <line:884:3, line:886:37>
|   | |-TextComment 0x5575d02ce300 <line:884:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5575d02ce320 <line:885:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02ce340 <line:886:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02ce3d0 <line:888:3>
|   | `-TextComment 0x5575d02ce3a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ce3f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02ce450 <col:11, col:35>
|       `-TextComment 0x5575d02ce420 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ac2f0 <line:904:1, line:908:1> line:904:21 k_cyc_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01ac260 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01ac658 <line:905:1, line:908:1>
| | `-ReturnStmt 0x5575d01ac620 <line:907:2, col:65>
| |   `-CallExpr 0x5575d01ac520 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01ac508 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01ac398 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01ac578 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01ac3b8 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01ac260 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01ac590 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01ac410 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01ac3f8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01ac3d8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01ac5a8 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01ac430 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5575d01ac5c0 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01ac488 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01ac470 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01ac450 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01ac5d8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01ac4a8 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01ac5f0 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01ac4c8 <col:16> 'int' 0
| |     `-ImplicitCastExpr 0x5575d01ac608 <line:14:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01ac4e8 <col:16> 'int' 1
| `-FullComment 0x5575d02ce7c0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:896:4, line:902:35>
|   |-ParagraphComment 0x5575d02ce580 <line:896:4>
|   | `-TextComment 0x5575d02ce550 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02ce5a0 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02ce600 <col:11, col:49>
|   |   `-TextComment 0x5575d02ce5d0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5575d02ce6a0 <line:898:3, line:900:37>
|   | |-TextComment 0x5575d02ce620 <line:898:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5575d02ce640 <line:899:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02ce660 <line:900:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02ce6f0 <line:902:3>
|   | `-TextComment 0x5575d02ce6c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ce710 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02ce770 <col:11, col:35>
|       `-TextComment 0x5575d02ce740 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ac710 <line:918:1, line:922:1> line:918:21 k_cyc_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01ac680 <col:40, col:46> col:46 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01acb08 <line:919:1, line:922:1>
| | `-ReturnStmt 0x5575d01acac8 <line:921:2, col:64>
| |   `-ImplicitCastExpr 0x5575d01acab0 <col:9, col:64> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d01ac998 <col:9, col:64> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d01ac980 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d01ac810 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |       |-ImplicitCastExpr 0x5575d01aca08 <col:17> 'u64_t':'unsigned long long' <IntegralCast>
| |       | `-ImplicitCastExpr 0x5575d01ac9f0 <col:17> 'u32_t':'unsigned int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5575d01ac830 <col:17> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d01ac680 't' 'u32_t':'unsigned int'
| |       |-ImplicitCastExpr 0x5575d01aca20 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-CallExpr 0x5575d01ac888 <col:18, col:46> 'int'
| |       |   `-ImplicitCastExpr 0x5575d01ac870 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |       |     `-DeclRefExpr 0x5575d01ac850 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |       |-ImplicitCastExpr 0x5575d01aca38 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |       | `-IntegerLiteral 0x5575d01ac8a8 <col:17> 'int' 1000000000
| |       |-ImplicitCastExpr 0x5575d01aca50 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |       | `-ParenExpr 0x5575d01ac900 <col:16, col:73> 'int'
| |       |   `-UnaryOperator 0x5575d01ac8e8 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |       |     `-IntegerLiteral 0x5575d01ac8c8 <col:16> 'int' 0
| |       |-ImplicitCastExpr 0x5575d01aca68 <line:14:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01ac920 <col:16> 'int' 1
| |       |-ImplicitCastExpr 0x5575d01aca80 <col:16> 'bool' <IntegralToBoolean>
| |       | `-IntegerLiteral 0x5575d01ac940 <col:16> 'int' 1
| |       `-ImplicitCastExpr 0x5575d01aca98 <line:15:16> 'bool' <IntegralToBoolean>
| |         `-IntegerLiteral 0x5575d01ac960 <col:16> 'int' 0
| `-FullComment 0x5575d02ceaa0 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:910:4, line:916:35>
|   |-ParagraphComment 0x5575d02ce860 <line:910:4>
|   | `-TextComment 0x5575d02ce830 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02ce880 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02ce8e0 <col:11, col:49>
|   |   `-TextComment 0x5575d02ce8b0 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5575d02ce980 <line:912:3, line:914:45>
|   | |-TextComment 0x5575d02ce900 <line:912:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5575d02ce920 <line:913:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02ce940 <line:914:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02ce9d0 <line:916:3>
|   | `-TextComment 0x5575d02ce9a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ce9f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cea50 <col:11, col:35>
|       `-TextComment 0x5575d02cea20 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01acbc0 <line:932:1, line:936:1> line:932:21 k_cyc_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01acb30 <col:40, col:46> col:46 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01acf28 <line:933:1, line:936:1>
| | `-ReturnStmt 0x5575d01acef0 <line:935:2, col:65>
| |   `-CallExpr 0x5575d01acdf0 <col:9, col:65> 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01acdd8 <col:9> 'u64_t (*)(u64_t, u32_t, u32_t, bool, bool, bool, bool)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d01acc68 <col:9> 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)' Function 0x5575d01e8950 'z_tmcvt' 'u64_t (u64_t, u32_t, u32_t, bool, bool, bool, bool)'
| |     |-ImplicitCastExpr 0x5575d01ace48 <col:17> 'u64_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d01acc88 <col:17> 'u64_t':'unsigned long long' lvalue ParmVar 0x5575d01acb30 't' 'u64_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x5575d01ace60 <line:178:18, col:46> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-CallExpr 0x5575d01acce0 <col:18, col:46> 'int'
| |     |   `-ImplicitCastExpr 0x5575d01accc8 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
| |     |     `-DeclRefExpr 0x5575d01acca8 <col:18> 'int (void)' Function 0x5575d01e8418 'sys_clock_hw_cycles_per_sec' 'int (void)'
| |     |-ImplicitCastExpr 0x5575d01ace78 <line:177:17> 'u32_t':'unsigned int' <IntegralCast>
| |     | `-IntegerLiteral 0x5575d01acd00 <col:17> 'int' 1000000000
| |     |-ImplicitCastExpr 0x5575d01ace90 <line:180:16, col:73> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5575d01acd58 <col:16, col:73> 'int'
| |     |   `-UnaryOperator 0x5575d01acd40 <col:17, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     |     `-IntegerLiteral 0x5575d01acd20 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01acea8 <col:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01acd78 <col:16> 'int' 0
| |     |-ImplicitCastExpr 0x5575d01acec0 <line:14:16> 'bool' <IntegralToBoolean>
| |     | `-IntegerLiteral 0x5575d01acd98 <col:16> 'int' 1
| |     `-ImplicitCastExpr 0x5575d01aced8 <line:15:16> 'bool' <IntegralToBoolean>
| |       `-IntegerLiteral 0x5575d01acdb8 <col:16> 'int' 0
| `-FullComment 0x5575d02ced80 </vagrant/ext/zephyros/zephyr/include/sys/time_units.h:924:4, line:930:35>
|   |-ParagraphComment 0x5575d02ceb40 <line:924:4>
|   | `-TextComment 0x5575d02ceb10 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02ceb60 <col:5, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02cebc0 <col:11, col:49>
|   |   `-TextComment 0x5575d02ceb90 <col:11, col:49> Text=" Convert hardware cycles to nanoseconds"
|   |-ParagraphComment 0x5575d02cec60 <line:926:3, line:928:45>
|   | |-TextComment 0x5575d02cebe0 <line:926:3, col:58> Text=" Converts time values in hardware cycles to nanoseconds."
|   | |-TextComment 0x5575d02cec00 <line:927:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cec20 <line:928:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02cecb0 <line:930:3>
|   | `-TextComment 0x5575d02cec80 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cecd0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02ced30 <col:11, col:35>
|       `-TextComment 0x5575d02ced00 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01acfe0 <line:946:1, line:950:1> line:946:21 k_cyc_to_ticks_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01acf50 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01ad208 <line:947:1, line:950:1>
| `-FullComment 0x5575d02cf060 <line:938:4, line:944:35>
|   |-ParagraphComment 0x5575d02cee20 <line:938:4>
|   | `-TextComment 0x5575d02cedf0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cee40 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02ceea0 <col:11, col:43>
|   |   `-TextComment 0x5575d02cee70 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5575d02cef40 <line:940:3, line:942:44>
|   | |-TextComment 0x5575d02ceec0 <line:940:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5575d02ceee0 <line:941:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cef00 <line:942:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02cef90 <line:944:3>
|   | `-TextComment 0x5575d02cef60 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cefb0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cf010 <col:11, col:35>
|       `-TextComment 0x5575d02cefe0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ad2b8 <line:960:1, line:964:1> line:960:21 k_cyc_to_ticks_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01ad228 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01ad4d8 <line:961:1, line:964:1>
| `-FullComment 0x5575d02cf340 <line:952:4, line:958:35>
|   |-ParagraphComment 0x5575d02cf100 <line:952:4>
|   | `-TextComment 0x5575d02cf0d0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cf120 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02cf180 <col:11, col:43>
|   |   `-TextComment 0x5575d02cf150 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5575d02cf220 <line:954:3, line:956:44>
|   | |-TextComment 0x5575d02cf1a0 <line:954:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5575d02cf1c0 <line:955:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cf1e0 <line:956:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02cf270 <line:958:3>
|   | `-TextComment 0x5575d02cf240 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cf290 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cf2f0 <col:11, col:35>
|       `-TextComment 0x5575d02cf2c0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ad588 <line:974:1, line:978:1> line:974:21 k_cyc_to_ticks_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01ad4f8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01ad7a8 <line:975:1, line:978:1>
| `-FullComment 0x5575d02cf620 <line:966:4, line:972:35>
|   |-ParagraphComment 0x5575d02cf3e0 <line:966:4>
|   | `-TextComment 0x5575d02cf3b0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cf400 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02cf460 <col:11, col:43>
|   |   `-TextComment 0x5575d02cf430 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5575d02cf500 <line:968:3, line:970:37>
|   | |-TextComment 0x5575d02cf480 <line:968:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5575d02cf4a0 <line:969:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cf4c0 <line:970:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02cf550 <line:972:3>
|   | `-TextComment 0x5575d02cf520 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cf570 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cf5d0 <col:11, col:35>
|       `-TextComment 0x5575d02cf5a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ad9f0 <line:988:1, line:992:1> line:988:21 k_cyc_to_ticks_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01ad960 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01adc18 <line:989:1, line:992:1>
| `-FullComment 0x5575d02cf900 <line:980:4, line:986:35>
|   |-ParagraphComment 0x5575d02cf6c0 <line:980:4>
|   | `-TextComment 0x5575d02cf690 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cf6e0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02cf740 <col:11, col:43>
|   |   `-TextComment 0x5575d02cf710 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5575d02cf7e0 <line:982:3, line:984:37>
|   | |-TextComment 0x5575d02cf760 <line:982:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5575d02cf780 <line:983:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cf7a0 <line:984:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02cf830 <line:986:3>
|   | `-TextComment 0x5575d02cf800 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cf850 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cf8b0 <col:11, col:35>
|       `-TextComment 0x5575d02cf880 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01adcc8 <line:1002:1, line:1006:1> line:1002:21 k_cyc_to_ticks_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01adc38 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01adee8 <line:1003:1, line:1006:1>
| `-FullComment 0x5575d02cfbe0 <line:994:4, line:1000:35>
|   |-ParagraphComment 0x5575d02cf9a0 <line:994:4>
|   | `-TextComment 0x5575d02cf970 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cf9c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02cfa20 <col:11, col:43>
|   |   `-TextComment 0x5575d02cf9f0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5575d02cfac0 <line:996:3, line:998:45>
|   | |-TextComment 0x5575d02cfa40 <line:996:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5575d02cfa60 <line:997:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02cfa80 <line:998:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02cfb10 <line:1000:3>
|   | `-TextComment 0x5575d02cfae0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cfb30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cfb90 <col:11, col:35>
|       `-TextComment 0x5575d02cfb60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01adf98 <line:1016:1, line:1020:1> line:1016:21 k_cyc_to_ticks_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01adf08 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01ae1b8 <line:1017:1, line:1020:1>
| `-FullComment 0x5575d02cfec0 <line:1008:4, line:1014:35>
|   |-ParagraphComment 0x5575d02cfc80 <line:1008:4>
|   | `-TextComment 0x5575d02cfc50 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cfca0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02cfd00 <col:11, col:43>
|   |   `-TextComment 0x5575d02cfcd0 <col:11, col:43> Text=" Convert hardware cycles to ticks"
|   |-ParagraphComment 0x5575d02cfda0 <line:1010:3, line:1012:45>
|   | |-TextComment 0x5575d02cfd20 <line:1010:3, col:52> Text=" Converts time values in hardware cycles to ticks."
|   | |-TextComment 0x5575d02cfd40 <line:1011:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02cfd60 <line:1012:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02cfdf0 <line:1014:3>
|   | `-TextComment 0x5575d02cfdc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02cfe10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02cfe70 <col:11, col:35>
|       `-TextComment 0x5575d02cfe40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ae268 <line:1030:1, line:1034:1> line:1030:21 k_ticks_to_ms_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01ae1d8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01ae418 <line:1031:1, line:1034:1>
| `-FullComment 0x5575d02d01a0 <line:1022:4, line:1028:35>
|   |-ParagraphComment 0x5575d02cff60 <line:1022:4>
|   | `-TextComment 0x5575d02cff30 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02cff80 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02cffe0 <col:11, col:40>
|   |   `-TextComment 0x5575d02cffb0 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5575d02d0080 <line:1024:3, line:1026:44>
|   | |-TextComment 0x5575d02d0000 <line:1024:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5575d02d0020 <line:1025:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d0040 <line:1026:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02d00d0 <line:1028:3>
|   | `-TextComment 0x5575d02d00a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d00f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d0150 <col:11, col:35>
|       `-TextComment 0x5575d02d0120 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ae4c8 <line:1044:1, line:1048:1> line:1044:21 used k_ticks_to_ms_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01ae438 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01ae678 <line:1045:1, line:1048:1>
| `-FullComment 0x5575d02d0480 <line:1036:4, line:1042:35>
|   |-ParagraphComment 0x5575d02d0240 <line:1036:4>
|   | `-TextComment 0x5575d02d0210 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d0260 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d02c0 <col:11, col:40>
|   |   `-TextComment 0x5575d02d0290 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5575d02d0360 <line:1038:3, line:1040:44>
|   | |-TextComment 0x5575d02d02e0 <line:1038:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5575d02d0300 <line:1039:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d0320 <line:1040:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02d03b0 <line:1042:3>
|   | `-TextComment 0x5575d02d0380 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d03d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d0430 <col:11, col:35>
|       `-TextComment 0x5575d02d0400 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01ae728 <line:1058:1, line:1062:1> line:1058:21 k_ticks_to_ms_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01ae698 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01ae8d8 <line:1059:1, line:1062:1>
| `-FullComment 0x5575d02d0770 <line:1050:4, line:1056:35>
|   |-ParagraphComment 0x5575d02d0530 <line:1050:4>
|   | `-TextComment 0x5575d02d04f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d0550 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d05b0 <col:11, col:40>
|   |   `-TextComment 0x5575d02d0580 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5575d02d0650 <line:1052:3, line:1054:37>
|   | |-TextComment 0x5575d02d05d0 <line:1052:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5575d02d05f0 <line:1053:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d0610 <line:1054:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02d06a0 <line:1056:3>
|   | `-TextComment 0x5575d02d0670 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d06c0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d0720 <col:11, col:35>
|       `-TextComment 0x5575d02d06f0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01afb28 <line:1072:1, line:1076:1> line:1072:21 k_ticks_to_ms_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01ae8f8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01afcd8 <line:1073:1, line:1076:1>
| `-FullComment 0x5575d02d0a50 <line:1064:4, line:1070:35>
|   |-ParagraphComment 0x5575d02d0810 <line:1064:4>
|   | `-TextComment 0x5575d02d07e0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d0830 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d0890 <col:11, col:40>
|   |   `-TextComment 0x5575d02d0860 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5575d02d0930 <line:1066:3, line:1068:37>
|   | |-TextComment 0x5575d02d08b0 <line:1066:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5575d02d08d0 <line:1067:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d08f0 <line:1068:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02d0980 <line:1070:3>
|   | `-TextComment 0x5575d02d0950 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d09a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d0a00 <col:11, col:35>
|       `-TextComment 0x5575d02d09d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01afd88 <line:1086:1, line:1090:1> line:1086:21 k_ticks_to_ms_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01afcf8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01aff38 <line:1087:1, line:1090:1>
| `-FullComment 0x5575d02d0d30 <line:1078:4, line:1084:35>
|   |-ParagraphComment 0x5575d02d0af0 <line:1078:4>
|   | `-TextComment 0x5575d02d0ac0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d0b10 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d0b70 <col:11, col:40>
|   |   `-TextComment 0x5575d02d0b40 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5575d02d0c10 <line:1080:3, line:1082:45>
|   | |-TextComment 0x5575d02d0b90 <line:1080:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5575d02d0bb0 <line:1081:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d0bd0 <line:1082:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02d0c60 <line:1084:3>
|   | `-TextComment 0x5575d02d0c30 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d0c80 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d0ce0 <col:11, col:35>
|       `-TextComment 0x5575d02d0cb0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01affe8 <line:1100:1, line:1104:1> line:1100:21 k_ticks_to_ms_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01aff58 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01b0198 <line:1101:1, line:1104:1>
| `-FullComment 0x5575d02d1010 <line:1092:4, line:1098:35>
|   |-ParagraphComment 0x5575d02d0dd0 <line:1092:4>
|   | `-TextComment 0x5575d02d0da0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d0df0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d0e50 <col:11, col:40>
|   |   `-TextComment 0x5575d02d0e20 <col:11, col:40> Text=" Convert ticks to milliseconds"
|   |-ParagraphComment 0x5575d02d0ef0 <line:1094:3, line:1096:45>
|   | |-TextComment 0x5575d02d0e70 <line:1094:3, col:49> Text=" Converts time values in ticks to milliseconds."
|   | |-TextComment 0x5575d02d0e90 <line:1095:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d0eb0 <line:1096:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02d0f40 <line:1098:3>
|   | `-TextComment 0x5575d02d0f10 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d0f60 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d0fc0 <col:11, col:35>
|       `-TextComment 0x5575d02d0f90 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01b0248 <line:1114:1, line:1118:1> line:1114:21 k_ticks_to_us_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01b01b8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01b03f8 <line:1115:1, line:1118:1>
| `-FullComment 0x5575d02d12f0 <line:1106:4, line:1112:35>
|   |-ParagraphComment 0x5575d02d10b0 <line:1106:4>
|   | `-TextComment 0x5575d02d1080 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d10d0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d1130 <col:11, col:40>
|   |   `-TextComment 0x5575d02d1100 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5575d02d11d0 <line:1108:3, line:1110:44>
|   | |-TextComment 0x5575d02d1150 <line:1108:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5575d02d1170 <line:1109:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d1190 <line:1110:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02d1220 <line:1112:3>
|   | `-TextComment 0x5575d02d11f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d1240 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d12a0 <col:11, col:35>
|       `-TextComment 0x5575d02d1270 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01b04a8 <line:1128:1, line:1132:1> line:1128:21 k_ticks_to_us_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01b0418 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d01b0658 <line:1129:1, line:1132:1>
| `-FullComment 0x5575d02d15d0 <line:1120:4, line:1126:35>
|   |-ParagraphComment 0x5575d02d1390 <line:1120:4>
|   | `-TextComment 0x5575d02d1360 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d13b0 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d1410 <col:11, col:40>
|   |   `-TextComment 0x5575d02d13e0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5575d02d14b0 <line:1122:3, line:1124:44>
|   | |-TextComment 0x5575d02d1430 <line:1122:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5575d02d1450 <line:1123:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d1470 <line:1124:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02d1500 <line:1126:3>
|   | `-TextComment 0x5575d02d14d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d1520 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d1580 <col:11, col:35>
|       `-TextComment 0x5575d02d1550 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01b0708 <line:1142:1, line:1146:1> line:1142:21 k_ticks_to_us_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d01b0678 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d01b08b8 <line:1143:1, line:1146:1>
| `-FullComment 0x5575d02d18b0 <line:1134:4, line:1140:35>
|   |-ParagraphComment 0x5575d02d1670 <line:1134:4>
|   | `-TextComment 0x5575d02d1640 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d1690 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d16f0 <col:11, col:40>
|   |   `-TextComment 0x5575d02d16c0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5575d02d1790 <line:1136:3, line:1138:37>
|   | |-TextComment 0x5575d02d1710 <line:1136:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5575d02d1730 <line:1137:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d1750 <line:1138:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02d17e0 <line:1140:3>
|   | `-TextComment 0x5575d02d17b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d1800 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d1860 <col:11, col:35>
|       `-TextComment 0x5575d02d1830 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d01b0968 <line:1156:1, line:1160:1> line:1156:21 k_ticks_to_us_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d01b08d8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d020ce08 <line:1157:1, line:1160:1>
| `-FullComment 0x5575d02d1b90 <line:1148:4, line:1154:35>
|   |-ParagraphComment 0x5575d02d1950 <line:1148:4>
|   | `-TextComment 0x5575d02d1920 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d1970 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d19d0 <col:11, col:40>
|   |   `-TextComment 0x5575d02d19a0 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5575d02d1a70 <line:1150:3, line:1152:37>
|   | |-TextComment 0x5575d02d19f0 <line:1150:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5575d02d1a10 <line:1151:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d1a30 <line:1152:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02d1ac0 <line:1154:3>
|   | `-TextComment 0x5575d02d1a90 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d1ae0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d1b40 <col:11, col:35>
|       `-TextComment 0x5575d02d1b10 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020ceb8 <line:1170:1, line:1174:1> line:1170:21 k_ticks_to_us_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d020ce28 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d020d068 <line:1171:1, line:1174:1>
| `-FullComment 0x5575d02d1e70 <line:1162:4, line:1168:35>
|   |-ParagraphComment 0x5575d02d1c30 <line:1162:4>
|   | `-TextComment 0x5575d02d1c00 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d1c50 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d1cb0 <col:11, col:40>
|   |   `-TextComment 0x5575d02d1c80 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5575d02d1d50 <line:1164:3, line:1166:45>
|   | |-TextComment 0x5575d02d1cd0 <line:1164:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5575d02d1cf0 <line:1165:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d1d10 <line:1166:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02d1da0 <line:1168:3>
|   | `-TextComment 0x5575d02d1d70 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d1dc0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d1e20 <col:11, col:35>
|       `-TextComment 0x5575d02d1df0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020d118 <line:1184:1, line:1188:1> line:1184:21 k_ticks_to_us_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d020d088 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d020d2c8 <line:1185:1, line:1188:1>
| `-FullComment 0x5575d02d2150 <line:1176:4, line:1182:35>
|   |-ParagraphComment 0x5575d02d1f10 <line:1176:4>
|   | `-TextComment 0x5575d02d1ee0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d1f30 <col:5, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02d1f90 <col:11, col:40>
|   |   `-TextComment 0x5575d02d1f60 <col:11, col:40> Text=" Convert ticks to microseconds"
|   |-ParagraphComment 0x5575d02d2030 <line:1178:3, line:1180:45>
|   | |-TextComment 0x5575d02d1fb0 <line:1178:3, col:49> Text=" Converts time values in ticks to microseconds."
|   | |-TextComment 0x5575d02d1fd0 <line:1179:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d1ff0 <line:1180:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02d2080 <line:1182:3>
|   | `-TextComment 0x5575d02d2050 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d20a0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d2100 <col:11, col:35>
|       `-TextComment 0x5575d02d20d0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020d378 <line:1198:1, line:1202:1> line:1198:21 k_ticks_to_ns_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d020d2e8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d020d528 <line:1199:1, line:1202:1>
| `-FullComment 0x5575d02d2430 <line:1190:4, line:1196:35>
|   |-ParagraphComment 0x5575d02d21f0 <line:1190:4>
|   | `-TextComment 0x5575d02d21c0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d2210 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02d2270 <col:11, col:39>
|   |   `-TextComment 0x5575d02d2240 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5575d02d2310 <line:1192:3, line:1194:44>
|   | |-TextComment 0x5575d02d2290 <line:1192:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5575d02d22b0 <line:1193:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d22d0 <line:1194:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02d2360 <line:1196:3>
|   | `-TextComment 0x5575d02d2330 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d2380 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d23e0 <col:11, col:35>
|       `-TextComment 0x5575d02d23b0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020d5d8 <line:1212:1, line:1216:1> line:1212:21 k_ticks_to_ns_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d020d548 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d020d788 <line:1213:1, line:1216:1>
| `-FullComment 0x5575d02d2720 <line:1204:4, line:1210:35>
|   |-ParagraphComment 0x5575d02d24d0 <line:1204:4>
|   | `-TextComment 0x5575d02d24a0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d24f0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02d2560 <col:11, col:39>
|   |   `-TextComment 0x5575d02d2530 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5575d02d2600 <line:1206:3, line:1208:44>
|   | |-TextComment 0x5575d02d2580 <line:1206:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5575d02d25a0 <line:1207:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d25c0 <line:1208:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02d2650 <line:1210:3>
|   | `-TextComment 0x5575d02d2620 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d2670 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d26d0 <col:11, col:35>
|       `-TextComment 0x5575d02d26a0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020d838 <line:1226:1, line:1230:1> line:1226:21 k_ticks_to_ns_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d020d7a8 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d020d9e8 <line:1227:1, line:1230:1>
| `-FullComment 0x5575d02d2a00 <line:1218:4, line:1224:35>
|   |-ParagraphComment 0x5575d02d27c0 <line:1218:4>
|   | `-TextComment 0x5575d02d2790 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d27e0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02d2840 <col:11, col:39>
|   |   `-TextComment 0x5575d02d2810 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5575d02d28e0 <line:1220:3, line:1222:37>
|   | |-TextComment 0x5575d02d2860 <line:1220:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5575d02d2880 <line:1221:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d28a0 <line:1222:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02d2930 <line:1224:3>
|   | `-TextComment 0x5575d02d2900 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d2950 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d29b0 <col:11, col:35>
|       `-TextComment 0x5575d02d2980 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020da98 <line:1240:1, line:1244:1> line:1240:21 k_ticks_to_ns_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d020da08 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d020dc48 <line:1241:1, line:1244:1>
| `-FullComment 0x5575d02d2ce0 <line:1232:4, line:1238:35>
|   |-ParagraphComment 0x5575d02d2aa0 <line:1232:4>
|   | `-TextComment 0x5575d02d2a70 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d2ac0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02d2b20 <col:11, col:39>
|   |   `-TextComment 0x5575d02d2af0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5575d02d2bc0 <line:1234:3, line:1236:37>
|   | |-TextComment 0x5575d02d2b40 <line:1234:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5575d02d2b60 <line:1235:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d2b80 <line:1236:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02d2c10 <line:1238:3>
|   | `-TextComment 0x5575d02d2be0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d2c30 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d2c90 <col:11, col:35>
|       `-TextComment 0x5575d02d2c60 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020dcf8 <line:1254:1, line:1258:1> line:1254:21 k_ticks_to_ns_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d020dc68 <col:42, col:48> col:48 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d020deb8 <line:1255:1, line:1258:1>
| `-FullComment 0x5575d02d2fc0 <line:1246:4, line:1252:35>
|   |-ParagraphComment 0x5575d02d2d80 <line:1246:4>
|   | `-TextComment 0x5575d02d2d50 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d2da0 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02d2e00 <col:11, col:39>
|   |   `-TextComment 0x5575d02d2dd0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5575d02d2ea0 <line:1248:3, line:1250:45>
|   | |-TextComment 0x5575d02d2e20 <line:1248:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5575d02d2e40 <line:1249:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d2e60 <line:1250:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02d2ef0 <line:1252:3>
|   | `-TextComment 0x5575d02d2ec0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d2f10 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d2f70 <col:11, col:35>
|       `-TextComment 0x5575d02d2f40 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020df68 <line:1268:1, line:1272:1> line:1268:21 k_ticks_to_ns_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d020ded8 <col:42, col:48> col:48 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d020e118 <line:1269:1, line:1272:1>
| `-FullComment 0x5575d02d32a0 <line:1260:4, line:1266:35>
|   |-ParagraphComment 0x5575d02d3060 <line:1260:4>
|   | `-TextComment 0x5575d02d3030 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d3080 <col:5, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02d30e0 <col:11, col:39>
|   |   `-TextComment 0x5575d02d30b0 <col:11, col:39> Text=" Convert ticks to nanoseconds"
|   |-ParagraphComment 0x5575d02d3180 <line:1262:3, line:1264:45>
|   | |-TextComment 0x5575d02d3100 <line:1262:3, col:48> Text=" Converts time values in ticks to nanoseconds."
|   | |-TextComment 0x5575d02d3120 <line:1263:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d3140 <line:1264:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02d31d0 <line:1266:3>
|   | `-TextComment 0x5575d02d31a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d31f0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d3250 <col:11, col:35>
|       `-TextComment 0x5575d02d3220 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020e1c8 <line:1282:1, line:1286:1> line:1282:21 k_ticks_to_cyc_floor32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d020e138 <col:44, col:50> col:50 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d020e3e8 <line:1283:1, line:1286:1>
| `-FullComment 0x5575d02d3580 <line:1274:4, line:1280:35>
|   |-ParagraphComment 0x5575d02d3340 <line:1274:4>
|   | `-TextComment 0x5575d02d3310 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d3360 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02d33c0 <col:11, col:43>
|   |   `-TextComment 0x5575d02d3390 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5575d02d3460 <line:1276:3, line:1278:44>
|   | |-TextComment 0x5575d02d33e0 <line:1276:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5575d02d3400 <line:1277:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d3420 <line:1278:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02d34b0 <line:1280:3>
|   | `-TextComment 0x5575d02d3480 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d34d0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d3530 <col:11, col:35>
|       `-TextComment 0x5575d02d3500 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020e498 <line:1296:1, line:1300:1> line:1296:21 k_ticks_to_cyc_floor64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d020e408 <col:44, col:50> col:50 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d020e6b8 <line:1297:1, line:1300:1>
| `-FullComment 0x5575d02d3860 <line:1288:4, line:1294:35>
|   |-ParagraphComment 0x5575d02d3620 <line:1288:4>
|   | `-TextComment 0x5575d02d35f0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d3640 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02d36a0 <col:11, col:43>
|   |   `-TextComment 0x5575d02d3670 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5575d02d3740 <line:1290:3, line:1292:44>
|   | |-TextComment 0x5575d02d36c0 <line:1290:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5575d02d36e0 <line:1291:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d3700 <line:1292:3, col:44> Text=" Truncates to the next lowest output unit."
|   |-ParagraphComment 0x5575d02d3790 <line:1294:3>
|   | `-TextComment 0x5575d02d3760 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d37b0 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d3810 <col:11, col:35>
|       `-TextComment 0x5575d02d37e0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020e768 <line:1310:1, line:1314:1> line:1310:21 k_ticks_to_cyc_near32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d020e6d8 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d020e988 <line:1311:1, line:1314:1>
| `-FullComment 0x5575d02d3b40 <line:1302:4, line:1308:35>
|   |-ParagraphComment 0x5575d02d3900 <line:1302:4>
|   | `-TextComment 0x5575d02d38d0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d3920 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02d3980 <col:11, col:43>
|   |   `-TextComment 0x5575d02d3950 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5575d02d3a20 <line:1304:3, line:1306:37>
|   | |-TextComment 0x5575d02d39a0 <line:1304:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5575d02d39c0 <line:1305:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d39e0 <line:1306:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02d3a70 <line:1308:3>
|   | `-TextComment 0x5575d02d3a40 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d3a90 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d3af0 <col:11, col:35>
|       `-TextComment 0x5575d02d3ac0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020ea38 <line:1324:1, line:1328:1> line:1324:21 k_ticks_to_cyc_near64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d020e9a8 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d020ec58 <line:1325:1, line:1328:1>
| `-FullComment 0x5575d02d3e20 <line:1316:4, line:1322:35>
|   |-ParagraphComment 0x5575d02d3be0 <line:1316:4>
|   | `-TextComment 0x5575d02d3bb0 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d3c00 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02d3c60 <col:11, col:43>
|   |   `-TextComment 0x5575d02d3c30 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5575d02d3d00 <line:1318:3, line:1320:37>
|   | |-TextComment 0x5575d02d3c80 <line:1318:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5575d02d3ca0 <line:1319:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d3cc0 <line:1320:3, col:37> Text=" Rounds to the nearest output unit."
|   |-ParagraphComment 0x5575d02d3d50 <line:1322:3>
|   | `-TextComment 0x5575d02d3d20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d3d70 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d3dd0 <col:11, col:35>
|       `-TextComment 0x5575d02d3da0 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020ed08 <line:1338:1, line:1342:1> line:1338:21 k_ticks_to_cyc_ceil32 'u32_t (u32_t)' static inline
| |-ParmVarDecl 0x5575d020ec78 <col:43, col:49> col:49 used t 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d020ef38 <line:1339:1, line:1342:1>
| `-FullComment 0x5575d02d4100 <line:1330:4, line:1336:35>
|   |-ParagraphComment 0x5575d02d3ec0 <line:1330:4>
|   | `-TextComment 0x5575d02d3e90 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d3ee0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02d3f40 <col:11, col:43>
|   |   `-TextComment 0x5575d02d3f10 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5575d02d3fe0 <line:1332:3, line:1334:45>
|   | |-TextComment 0x5575d02d3f60 <line:1332:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5575d02d3f80 <line:1333:3, col:39> Text=" Computes result in 32 bit precision."
|   | `-TextComment 0x5575d02d3fa0 <line:1334:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02d4030 <line:1336:3>
|   | `-TextComment 0x5575d02d4000 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d4050 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d40b0 <col:11, col:35>
|       `-TextComment 0x5575d02d4080 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020efe8 <line:1352:1, line:1356:1> line:1352:21 k_ticks_to_cyc_ceil64 'u64_t (u64_t)' static inline
| |-ParmVarDecl 0x5575d020ef58 <col:43, col:49> col:49 used t 'u64_t':'unsigned long long'
| |-CompoundStmt 0x5575d020f268 <line:1353:1, line:1356:1>
| `-FullComment 0x5575d02d43e0 <line:1344:4, line:1350:35>
|   |-ParagraphComment 0x5575d02d41a0 <line:1344:4>
|   | `-TextComment 0x5575d02d4170 <col:4> Text=" "
|   |-BlockCommandComment 0x5575d02d41c0 <col:5, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02d4220 <col:11, col:43>
|   |   `-TextComment 0x5575d02d41f0 <col:11, col:43> Text=" Convert ticks to hardware cycles"
|   |-ParagraphComment 0x5575d02d42c0 <line:1346:3, line:1348:45>
|   | |-TextComment 0x5575d02d4240 <line:1346:3, col:52> Text=" Converts time values in ticks to hardware cycles."
|   | |-TextComment 0x5575d02d4260 <line:1347:3, col:39> Text=" Computes result in 64 bit precision."
|   | `-TextComment 0x5575d02d4280 <line:1348:3, col:45> Text=" Rounds up to the next highest output unit."
|   |-ParagraphComment 0x5575d02d4310 <line:1350:3>
|   | `-TextComment 0x5575d02d42e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d4330 <col:4, col:35> Name="return"
|     `-ParagraphComment 0x5575d02d4390 <col:11, col:35>
|       `-TextComment 0x5575d02d4360 <col:11, col:35> Text=" The converted time value"
|-FunctionDecl 0x5575d020f310 </vagrant/ext/zephyros/zephyr/include/sys_clock.h:117:1, col:25> col:7 z_tick_get_32 'u32_t (void)'
| `-FullComment 0x5575d02d66a0 <line:112:3, line:116:1>
|   |-ParagraphComment 0x5575d02d4480 <line:112:3>
|   | `-TextComment 0x5575d02d4450 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d44a0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5575d02d4500 <col:10, col:64>
|   |   `-TextComment 0x5575d02d44d0 <col:10, col:64> Text=" Return the lower part of the current system tick count"
|   |-ParagraphComment 0x5575d02d6580 <line:114:3>
|   | `-TextComment 0x5575d02d6550 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d65a0 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x5575d02d6600 <col:11, col:40>
|   |   `-TextComment 0x5575d02d65d0 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x5575d02d6650 <line:116:1>
|     `-TextComment 0x5575d02d6620 <col:1> Text=" "
|-FunctionDecl 0x5575d020f4d0 <line:126:1, col:22> col:7 z_tick_get 's64_t (void)'
| `-FullComment 0x5575d02d6930 <line:121:3, line:125:1>
|   |-ParagraphComment 0x5575d02d6740 <line:121:3>
|   | `-TextComment 0x5575d02d6710 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d6760 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5575d02d67c0 <col:10, col:46>
|   |   `-TextComment 0x5575d02d6790 <col:10, col:46> Text=" Return the current system tick count"
|   |-ParagraphComment 0x5575d02d6810 <line:123:3>
|   | `-TextComment 0x5575d02d67e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d6830 <col:4, col:40> Name="return"
|   | `-ParagraphComment 0x5575d02d6890 <col:11, col:40>
|   |   `-TextComment 0x5575d02d6860 <col:11, col:40> Text=" the current system tick count"
|   `-ParagraphComment 0x5575d02d68e0 <line:125:1>
|     `-TextComment 0x5575d02d68b0 <col:1> Text=" "
|-RecordDecl 0x5575d020f570 <line:135:1, col:8> col:8 struct _timeout
|-TypedefDecl 0x5575d020f898 <line:136:1, col:51> col:16 referenced _timeout_func_t 'void (*)(struct _timeout *)'
| `-PointerType 0x5575d020f830 'void (*)(struct _timeout *)'
|   `-ParenType 0x5575d020f7d0 'void (struct _timeout *)' sugar
|     `-FunctionProtoType 0x5575d020f790 'void (struct _timeout *)' cdecl
|       |-BuiltinType 0x5575d007b4e0 'void'
|       `-PointerType 0x5575d020f690 'struct _timeout *'
|         `-ElaboratedType 0x5575d020f620 'struct _timeout' sugar
|           `-RecordType 0x5575d020f5f0 'struct _timeout'
|             `-Record 0x5575d020f8f0 '_timeout'
|-RecordDecl 0x5575d020f8f0 prev 0x5575d020f570 <line:138:1, line:142:1> line:138:8 struct _timeout definition
| |-FieldDecl 0x5575d020f980 <line:139:2, col:14> col:14 node 'sys_dnode_t':'struct _dnode'
| |-FieldDecl 0x5575d020fa08 <line:140:2, col:8> col:8 dticks 's32_t':'int'
| `-FieldDecl 0x5575d020fa98 <line:141:2, col:18> col:18 fn '_timeout_func_t':'void (*)(struct _timeout *)'
|-RecordDecl 0x5575d020fae8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:25:1, line:27:1> line:25:8 struct k_spinlock_key definition
| `-FieldDecl 0x5575d020fbb0 <line:26:2, col:6> col:6 referenced key 'int'
|-TypedefDecl 0x5575d020fc58 <line:29:1, col:31> col:31 referenced k_spinlock_key_t 'struct k_spinlock_key':'struct k_spinlock_key'
| `-ElaboratedType 0x5575d020fc00 'struct k_spinlock_key' sugar
|   `-RecordType 0x5575d020fb70 'struct k_spinlock_key'
|     `-Record 0x5575d020fae8 'k_spinlock_key'
|-RecordDecl 0x5575d020fcb0 <line:31:1, line:60:1> line:31:8 struct k_spinlock definition
|-FunctionDecl 0x5575d02127c0 <line:62:1, line:86:1> line:62:39 k_spin_lock 'k_spinlock_key_t (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x5575d02126b8 <col:51, col:70> col:70 used l 'struct k_spinlock *'
| |-CompoundStmt 0x5575d0212bb0 <line:63:1, line:86:1>
| | |-CStyleCastExpr 0x5575d0212948 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5575d0212930 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5575d0212910 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x5575d02128c0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:64:13> 'struct k_spinlock *' lvalue ParmVar 0x5575d02126b8 'l' 'struct k_spinlock *'
| | |-DeclStmt 0x5575d02129e8 <line:65:2, col:20>
| | | `-VarDecl 0x5575d0212980 <col:2, col:19> col:19 used k 'k_spinlock_key_t':'struct k_spinlock_key' nrvo
| | |-BinaryOperator 0x5575d0212af0 <line:71:2, col:24> 'int' '='
| | | |-MemberExpr 0x5575d0212a20 <col:2, col:4> 'int' lvalue .key 0x5575d020fbb0
| | | | `-DeclRefExpr 0x5575d0212a00 <col:2> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x5575d0212980 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| | | `-ImplicitCastExpr 0x5575d0212ad8 <col:10, col:24> 'int' <IntegralCast>
| | |   `-CallExpr 0x5575d0212ab8 <col:10, col:24> 'unsigned int'
| | |     `-ImplicitCastExpr 0x5575d0212aa0 <col:10> 'unsigned int (*)(void)' <FunctionToPointerDecay>
| | |       `-DeclRefExpr 0x5575d0212a50 <col:10> 'unsigned int (void)' Function 0x5575d01e7008 'arch_irq_lock' 'unsigned int (void)'
| | `-ReturnStmt 0x5575d0212b98 <line:85:2, col:9>
| |   `-ImplicitCastExpr 0x5575d0212b80 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d0212b60 <col:9> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue Var 0x5575d0212980 'k' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x5575d0212868 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5575d0212da0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:88:1, line:107:1> line:88:27 k_spin_unlock 'void (struct k_spinlock *, k_spinlock_key_t)' static inline
| |-ParmVarDecl 0x5575d0212c08 <col:41, col:60> col:60 used l 'struct k_spinlock *'
| |-ParmVarDecl 0x5575d0212c80 <line:89:6, col:23> col:23 used key 'k_spinlock_key_t':'struct k_spinlock_key'
| |-CompoundStmt 0x5575d0213070 <line:90:1, line:107:1>
| | |-CStyleCastExpr 0x5575d0212f30 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5575d0212f18 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5575d0212ef8 <col:29, col:31> 'struct k_spinlock *' lvalue
| | |     `-DeclRefExpr 0x5575d0212ea8 </vagrant/ext/zephyros/zephyr/include/spinlock.h:91:13> 'struct k_spinlock *' lvalue ParmVar 0x5575d0212c08 'l' 'struct k_spinlock *'
| | `-CallExpr 0x5575d0213018 <line:106:2, col:25> 'void'
| |   |-ImplicitCastExpr 0x5575d0213000 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5575d0212f58 <col:2> 'void (unsigned int)' Function 0x5575d01e7180 'arch_irq_unlock' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x5575d0213058 <col:18, col:22> 'unsigned int' <IntegralCast>
| |     `-ImplicitCastExpr 0x5575d0213040 <col:18, col:22> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5575d0212f98 <col:18, col:22> 'int' lvalue .key 0x5575d020fbb0
| |         `-DeclRefExpr 0x5575d0212f78 <col:18> 'k_spinlock_key_t':'struct k_spinlock_key' lvalue ParmVar 0x5575d0212c80 'key' 'k_spinlock_key_t':'struct k_spinlock_key'
| `-AlwaysInlineAttr 0x5575d0212e50 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-FunctionDecl 0x5575d02131c0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:112:1, line:121:1> line:112:27 k_spin_release 'void (struct k_spinlock *)' static inline
| |-ParmVarDecl 0x5575d02130b8 <col:42, col:61> col:61 used l 'struct k_spinlock *'
| |-CompoundStmt 0x5575d02133c8 <line:113:1, line:121:1>
| | `-CStyleCastExpr 0x5575d0213348 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5575d0213330 <col:29, col:31> 'struct k_spinlock *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5575d0213310 <col:29, col:31> 'struct k_spinlock *' lvalue
| |       `-DeclRefExpr 0x5575d02132c0 </vagrant/ext/zephyros/zephyr/include/spinlock.h:114:13> 'struct k_spinlock *' lvalue ParmVar 0x5575d02130b8 'l' 'struct k_spinlock *'
| `-AlwaysInlineAttr 0x5575d0213268 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:109:49> always_inline
|-EnumDecl 0x5575d02133e0 </vagrant/ext/zephyros/zephyr/include/fatal.h:23:1, line:42:1> line:23:6 k_fatal_error_reason
| |-FullComment 0x5575d02d6b90 <line:18:3, line:20:5>
| | |-ParagraphComment 0x5575d02d69d0 <line:18:3>
| | | `-TextComment 0x5575d02d69a0 <col:3> Text=" "
| | |-VerbatimLineComment 0x5575d02d69f0 <col:4, col:41> Text=" fatal_apis Fatal error APIs"
| | |-ParagraphComment 0x5575d02d6a60 <line:19:3>
| | | `-TextComment 0x5575d02d6a30 <col:3> Text=" "
| | |-VerbatimLineComment 0x5575d02d6a80 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x5575d02d6b40 <line:20:3, col:5>
| |   |-TextComment 0x5575d02d6ac0 <col:3> Text=" "
| |   |-TextComment 0x5575d02d6ae0 <col:4> Text="@"
| |   `-TextComment 0x5575d02d6b00 <col:5> Text="{"
| |-EnumConstantDecl 0x5575d02134d8 <line:25:2> col:2 K_ERR_CPU_EXCEPTION 'int'
| | `-FullComment 0x5575d02d6c60 <line:24:5, col:55>
| |   `-ParagraphComment 0x5575d02d6c30 <col:5, col:55>
| |     `-TextComment 0x5575d02d6c00 <col:5, col:55> Text=" Generic CPU exception, not covered by other codes "
| |-EnumConstantDecl 0x5575d0213558 <line:28:2> col:2 K_ERR_SPURIOUS_IRQ 'int'
| | `-FullComment 0x5575d02d6d30 <line:27:5, col:34>
| |   `-ParagraphComment 0x5575d02d6d00 <col:5, col:34>
| |     `-TextComment 0x5575d02d6cd0 <col:5, col:34> Text=" Unhandled hardware interrupt "
| |-EnumConstantDecl 0x5575d02135d8 <line:31:2> col:2 K_ERR_STACK_CHK_FAIL 'int'
| | `-FullComment 0x5575d02d6e00 <line:30:5, col:50>
| |   `-ParagraphComment 0x5575d02d6dd0 <col:5, col:50>
| |     `-TextComment 0x5575d02d6da0 <col:5, col:50> Text=" Faulting context overflowed its stack buffer "
| |-EnumConstantDecl 0x5575d02147d0 <line:34:2> col:2 K_ERR_KERNEL_OOPS 'int'
| | `-FullComment 0x5575d02d6ed0 <line:33:5, col:38>
| |   `-ParagraphComment 0x5575d02d6ea0 <col:5, col:38>
| |     `-TextComment 0x5575d02d6e70 <col:5, col:38> Text=" Moderate severity software error "
| `-EnumConstantDecl 0x5575d0214848 <line:37:2> col:2 K_ERR_KERNEL_PANIC 'int'
|   `-FullComment 0x5575d02d6fa0 <line:36:5, col:34>
|     `-ParagraphComment 0x5575d02d6f70 <col:5, col:34>
|       `-TextComment 0x5575d02d6f40 <col:5, col:34> Text=" High severity software error "
|-FunctionDecl 0x5575d02149b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:86:26, /vagrant/ext/zephyros/zephyr/include/fatal.h:52:52> col:20 k_fatal_halt 'void (unsigned int) __attribute__((noreturn))'
| |-ParmVarDecl 0x5575d02148e0 <col:33, col:46> col:46 reason 'unsigned int'
| `-FullComment 0x5575d02d7280 <line:45:3, line:50:44>
|   |-ParagraphComment 0x5575d02d7040 <line:45:3>
|   | `-TextComment 0x5575d02d7010 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d7060 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d02d70c0 <col:10, col:42>
|   |   `-TextComment 0x5575d02d7090 <col:10, col:42> Text=" Halt the system on a fatal error"
|   |-ParagraphComment 0x5575d02d7130 <line:47:3, line:48:76>
|   | |-TextComment 0x5575d02d70e0 <line:47:3, col:72> Text=" Invokes architecture-specific code to power off or halt the system in"
|   | `-TextComment 0x5575d02d7100 <line:48:3, col:76> Text=" a low power state. Lacking that, lock interrupts and sit in an idle loop."
|   |-ParagraphComment 0x5575d02d7180 <line:50:3>
|   | `-TextComment 0x5575d02d7150 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d02d71a0 <col:4, col:44> [in] implicitly Param="reason" ParamIndex=0
|     `-ParagraphComment 0x5575d02d7230 <col:17, col:44>
|       `-TextComment 0x5575d02d7200 <col:17, col:44> Text=" Fatal exception reason code"
|-FunctionDecl 0x5575d0214c00 <line:83:1, col:76> col:6 invalid k_sys_fatal_error_handler 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x5575d0214aa0 <col:32, col:45> col:45 reason 'unsigned int'
| |-ParmVarDecl 0x5575d0214b20 <col:53, col:73> col:73 invalid esf 'const int *'
| `-FullComment 0x5575d02d7960 <line:55:3, line:81:71>
|   |-ParagraphComment 0x5575d02d7320 <line:55:3>
|   | `-TextComment 0x5575d02d72f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d7340 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5575d02d73a0 <col:10, col:36>
|   |   `-TextComment 0x5575d02d7370 <col:10, col:36> Text=" Fatal error policy handler"
|   |-ParagraphComment 0x5575d02d7410 <line:57:3, line:58:67>
|   | |-TextComment 0x5575d02d73c0 <line:57:3, col:73> Text=" This function is not invoked by application code, but is declared as a"
|   | `-TextComment 0x5575d02d73e0 <line:58:3, col:67> Text=" weak symbol so that applications may introduce their own policy."
|   |-ParagraphComment 0x5575d02d74b0 <line:60:3, line:62:71>
|   | |-TextComment 0x5575d02d7430 <line:60:3, col:63> Text=" The default implementation of this function halts the system"
|   | |-TextComment 0x5575d02d7450 <line:61:3, col:66> Text=" unconditionally. Depending on architecture support, this may be"
|   | `-TextComment 0x5575d02d7470 <line:62:3, col:71> Text=" a simple infinite loop, power off the hardware, or exit an emulator."
|   |-ParagraphComment 0x5575d02d7520 <line:64:3, line:65:11>
|   | |-TextComment 0x5575d02d74d0 <line:64:3, col:72> Text=" If this function returns, then the currently executing thread will be"
|   | `-TextComment 0x5575d02d74f0 <line:65:3, col:11> Text=" aborted."
|   |-ParagraphComment 0x5575d02d7570 <line:67:3, col:42>
|   | `-TextComment 0x5575d02d7540 <col:3, col:42> Text=" A few notes for custom implementations:"
|   |-ParagraphComment 0x5575d02d7700 <line:69:3, line:77:23>
|   | |-TextComment 0x5575d02d7590 <line:69:3, col:74> Text=" - If the error is determined to be unrecoverable, LOG_PANIC() should be"
|   | |-TextComment 0x5575d02d75b0 <line:70:3, col:50> Text="   invoked to flush any pending logging buffers."
|   | |-TextComment 0x5575d02d75d0 <line:71:3, col:76> Text=" - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel"
|   | |-TextComment 0x5575d02d75f0 <line:72:3, col:76> Text="   itself, and should not be considered recoverable. There is an assertion"
|   | |-TextComment 0x5575d02d7610 <line:73:3, col:40> Text="   in z_fatal_error() to enforce this."
|   | |-TextComment 0x5575d02d7630 <line:74:3, col:76> Text=" - Even outside of a kernel panic, unless the fault occurred in user mode,"
|   | |-TextComment 0x5575d02d7650 <line:75:3, col:73> Text="   the kernel itself may be in an inconsistent state, with API calls to"
|   | |-TextComment 0x5575d02d7670 <line:76:3, col:72> Text="   kernel objects possibly exhibiting undefined behavior or triggering"
|   | `-TextComment 0x5575d02d7690 <line:77:3, col:23> Text="   another exception."
|   |-ParagraphComment 0x5575d02d7750 <line:79:3>
|   | `-TextComment 0x5575d02d7720 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d7770 <col:4, line:80:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d7820 <line:79:17, line:80:3>
|   |   |-TextComment 0x5575d02d77d0 <line:79:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x5575d02d77f0 <line:80:3> Text=" "
|   `-ParamCommandComment 0x5575d02d7840 <col:4, line:81:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x5575d02d78f0 <line:80:14, line:81:71>
|       |-TextComment 0x5575d02d78a0 <line:80:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x5575d02d78c0 <line:81:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x5575d0214e08 <line:99:1, col:64> col:6 invalid z_fatal_error 'void (unsigned int, const int *)'
| |-ParmVarDecl 0x5575d0214cf0 <col:20, col:33> col:33 reason 'unsigned int'
| |-ParmVarDecl 0x5575d0214d70 <col:41, col:61> col:61 invalid esf 'const int *'
| `-FullComment 0x5575d02d7d50 <line:86:3, line:97:71>
|   |-ParagraphComment 0x5575d02d7a00 <line:86:3, col:50>
|   | `-TextComment 0x5575d02d79d0 <col:3, col:50> Text=" Called by architecture code upon a fatal error."
|   |-ParagraphComment 0x5575d02d7aa0 <line:88:3, line:90:31>
|   | |-TextComment 0x5575d02d7a20 <line:88:3, col:76> Text=" This function dumps out architecture-agnostic information about the error"
|   | |-TextComment 0x5575d02d7a40 <line:89:3, col:61> Text=" and then makes a policy decision on what to do by invoking"
|   | `-TextComment 0x5575d02d7a60 <line:90:3, col:31> Text=" k_sys_fatal_error_handler()."
|   |-ParagraphComment 0x5575d02d7b10 <line:92:3, line:93:24>
|   | |-TextComment 0x5575d02d7ac0 <line:92:3, col:71> Text=" On architectures where k_thread_abort() never returns, this function"
|   | `-TextComment 0x5575d02d7ae0 <line:93:3, col:24> Text=" never returns either."
|   |-ParagraphComment 0x5575d02d7b60 <line:95:3>
|   | `-TextComment 0x5575d02d7b30 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d7b80 <col:4, line:96:3> [in] implicitly Param="reason" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d7c30 <line:95:17, line:96:3>
|   |   |-TextComment 0x5575d02d7be0 <line:95:17, col:47> Text=" The reason for the fatal error"
|   |   `-TextComment 0x5575d02d7c00 <line:96:3> Text=" "
|   `-ParamCommandComment 0x5575d02d7c50 <col:4, line:97:71> [in] implicitly Param="esf" ParamIndex=1
|     `-ParagraphComment 0x5575d02d7d00 <line:96:14, line:97:71>
|       |-TextComment 0x5575d02d7cb0 <line:96:14, col:74> Text=" Exception context, with details and partial or full register"
|       `-TextComment 0x5575d02d7cd0 <line:97:3, col:71> Text="            state when the error occurred. May in some cases be NULL."
|-FunctionDecl 0x5575d0215310 </vagrant/ext/zephyros/zephyr/include/irq.h:66:1, line:73:1> line:67:1 irq_connect_dynamic 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' static inline
| |-ParmVarDecl 0x5575d0214fc0 <col:21, col:34> col:34 used irq 'unsigned int'
| |-ParmVarDecl 0x5575d0215040 <col:39, col:52> col:52 used priority 'unsigned int'
| |-ParmVarDecl 0x5575d0215160 <line:68:7, col:38> col:14 used routine 'void (*)(void *)'
| |-ParmVarDecl 0x5575d02151e0 <col:41, col:47> col:47 used parameter 'void *'
| |-ParmVarDecl 0x5575d0215258 <line:69:7, col:13> col:13 used flags 'u32_t':'unsigned int'
| |-CompoundStmt 0x5575d021a8d8 <line:70:1, line:73:1>
| | `-ReturnStmt 0x5575d02155d8 <line:71:2, line:72:11>
| |   `-CallExpr 0x5575d0215518 <line:71:9, line:72:11> 'int'
| |     |-ImplicitCastExpr 0x5575d0215500 <line:71:9> 'int (*)(unsigned int, unsigned int, void (*)(void *), void *, u32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d02153d8 <col:9> 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)' Function 0x5575d01e7fe8 'arch_irq_connect_dynamic' 'int (unsigned int, unsigned int, void (*)(void *), void *, u32_t)'
| |     |-ImplicitCastExpr 0x5575d0215560 <col:34> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d02153f8 <col:34> 'unsigned int' lvalue ParmVar 0x5575d0214fc0 'irq' 'unsigned int'
| |     |-ImplicitCastExpr 0x5575d0215578 <col:39> 'unsigned int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d0215418 <col:39> 'unsigned int' lvalue ParmVar 0x5575d0215040 'priority' 'unsigned int'
| |     |-ImplicitCastExpr 0x5575d0215590 <col:49> 'void (*)(void *)' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d0215438 <col:49> 'void (*)(void *)' lvalue ParmVar 0x5575d0215160 'routine' 'void (*)(void *)'
| |     |-ImplicitCastExpr 0x5575d02155a8 <col:58> 'void *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d0215458 <col:58> 'void *' lvalue ParmVar 0x5575d02151e0 'parameter' 'void *'
| |     `-ImplicitCastExpr 0x5575d02155c0 <line:72:6> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x5575d0215478 <col:6> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d0215258 'flags' 'u32_t':'unsigned int'
| `-FullComment 0x5575d02d83c0 <line:54:3, line:64:48>
|   |-ParagraphComment 0x5575d02d7df0 <line:54:3, col:33>
|   | `-TextComment 0x5575d02d7dc0 <col:3, col:33> Text=" Configure a dynamic interrupt."
|   |-ParagraphComment 0x5575d02d7e40 <line:56:3, col:80>
|   | `-TextComment 0x5575d02d7e10 <col:3, col:80> Text=" Use this instead of IRQ_CONNECT() if arguments cannot be known at build time."
|   |-ParagraphComment 0x5575d02d7e90 <line:58:3>
|   | `-TextComment 0x5575d02d7e60 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d7eb0 <col:4, line:59:3> [in] implicitly Param="irq" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d7f60 <line:58:14, line:59:3>
|   |   |-TextComment 0x5575d02d7f10 <line:58:14, col:29> Text=" IRQ line number"
|   |   `-TextComment 0x5575d02d7f30 <line:59:3> Text=" "
|   |-ParamCommandComment 0x5575d02d7f80 <col:4, line:60:3> [in] implicitly Param="priority" ParamIndex=1
|   | `-ParagraphComment 0x5575d02d8030 <line:59:19, line:60:3>
|   |   |-TextComment 0x5575d02d7fe0 <line:59:19, col:37> Text=" Interrupt priority"
|   |   `-TextComment 0x5575d02d8000 <line:60:3> Text=" "
|   |-ParamCommandComment 0x5575d02d8050 <col:4, line:61:3> [in] implicitly Param="routine" ParamIndex=2
|   | `-ParagraphComment 0x5575d02d8100 <line:60:18, line:61:3>
|   |   |-TextComment 0x5575d02d80b0 <line:60:18, col:43> Text=" Interrupt service routine"
|   |   `-TextComment 0x5575d02d80d0 <line:61:3> Text=" "
|   |-ParamCommandComment 0x5575d02d8120 <col:4, line:62:3> [in] implicitly Param="parameter" ParamIndex=3
|   | `-ParagraphComment 0x5575d02d81d0 <line:61:20, line:62:3>
|   |   |-TextComment 0x5575d02d8180 <line:61:20, col:33> Text=" ISR parameter"
|   |   `-TextComment 0x5575d02d81a0 <line:62:3> Text=" "
|   |-ParamCommandComment 0x5575d02d81f0 <col:4, col:53> [in] implicitly Param="flags" ParamIndex=4
|   | `-ParagraphComment 0x5575d02d8280 <col:16, col:53>
|   |   `-TextComment 0x5575d02d8250 <col:16, col:53> Text=" Arch-specific IRQ configuration flags"
|   |-ParagraphComment 0x5575d02d82d0 <line:64:3>
|   | `-TextComment 0x5575d02d82a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d82f0 <col:4, col:48> Name="return"
|     `-ParagraphComment 0x5575d02d8350 <col:11, col:48>
|       `-TextComment 0x5575d02d8320 <col:11, col:48> Text=" The vector assigned to this interrupt"
|-FunctionDecl 0x5575d021a9c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/sys/errno_private.h:28:28> col:16 z_errno 'int *(void)' static inline
| `-FullComment 0x5575d02d8600 <line:21:3, line:26:59>
|   |-ParagraphComment 0x5575d02d8460 <line:21:3, col:57>
|   | `-TextComment 0x5575d02d8430 <col:3, col:57> Text=" return a pointer to a memory location containing errno"
|   |-ParagraphComment 0x5575d02d84d0 <line:23:3, line:24:52>
|   | |-TextComment 0x5575d02d8480 <line:23:3, col:69> Text=" errno is thread-specific, and can't just be a global. This pointer"
|   | `-TextComment 0x5575d02d84a0 <line:24:3, col:52> Text=" is guaranteed to be read/writable from user mode."
|   |-ParagraphComment 0x5575d02d8520 <line:26:3>
|   | `-TextComment 0x5575d02d84f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d8560 <col:4, col:59> Name="return"
|     `-ParagraphComment 0x5575d02d85c0 <col:11, col:59>
|       `-TextComment 0x5575d02d8590 <col:11, col:59> Text=" Memory location of errno data for current thread"
|-FunctionDecl 0x5575d021aac8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:24:1, col:29> col:14 used z_impl_z_errno 'int *()' extern
|-FunctionDecl 0x5575d021ab90 prev 0x5575d021a9c8 <line:25:1, line:34:1> line:25:21 z_errno 'int *(void)' static inline
| `-CompoundStmt 0x5575d021ae78 <line:26:1, line:34:1>
|   |-DoStmt 0x5575d021ad88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d021ad50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d021acf0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d021ad68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d021ae38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/errno_private.h:33:2, col:24>
|     `-CallExpr 0x5575d021ae18 <col:9, col:24> 'int *'
|       `-ImplicitCastExpr 0x5575d021ae00 <col:9> 'int *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5575d021ada8 <col:9> 'int *()' Function 0x5575d021aac8 'z_impl_z_errno' 'int *()'
|-RecordDecl 0x5575d021ae98 </vagrant/ext/zephyros/zephyr/include/kernel.h:91:9, line:93:1> line:91:9 struct definition
| `-FieldDecl 0x5575d021af58 <line:92:2, col:14> col:14 waitq 'sys_dlist_t':'struct _dnode'
|-TypedefDecl 0x5575d021b010 <line:91:1, line:93:3> col:3 referenced _wait_q_t 'struct _wait_q_t':'_wait_q_t'
| `-ElaboratedType 0x5575d021afb0 'struct _wait_q_t' sugar
|   `-RecordType 0x5575d021af20 '_wait_q_t'
|     `-Record 0x5575d021ae98 ''
|-RecordDecl 0x5575d021b080 prev 0x5575d01e4178 <line:120:1, col:8> col:8 struct k_thread
|-RecordDecl 0x5575d021b100 <line:121:1, col:8> col:8 struct k_mutex
|-RecordDecl 0x5575d021b1a8 <line:122:1, col:8> col:8 struct k_sem
|-RecordDecl 0x5575d021b258 <line:123:1, col:8> col:8 struct k_msgq
|-RecordDecl 0x5575d021b308 <line:124:1, col:8> col:8 struct k_mbox
|-RecordDecl 0x5575d021b3b8 <line:125:1, col:8> col:8 struct k_pipe
|-RecordDecl 0x5575d021b468 <line:126:1, col:8> col:8 struct k_queue
|-RecordDecl 0x5575d021b518 <line:127:1, col:8> col:8 struct k_fifo
|-RecordDecl 0x5575d021b5c8 <line:128:1, col:8> col:8 struct k_lifo
|-RecordDecl 0x5575d021b678 <line:129:1, col:8> col:8 struct k_stack
|-RecordDecl 0x5575d021b728 <line:130:1, col:8> col:8 struct k_mem_slab
|-RecordDecl 0x5575d021b7d8 <line:131:1, col:8> col:8 struct k_mem_pool
|-RecordDecl 0x5575d0226bf8 <line:132:1, col:8> col:8 struct k_timer
|-RecordDecl 0x5575d0226ca8 <line:133:1, col:8> col:8 struct k_poll_event
|-RecordDecl 0x5575d0226d58 <line:134:1, col:8> col:8 struct k_poll_signal
|-RecordDecl 0x5575d0226e08 prev 0x5575d01e41f8 <line:135:1, col:8> col:8 struct k_mem_domain
|-RecordDecl 0x5575d0226e88 <line:136:1, col:8> col:8 struct k_mem_partition
|-RecordDecl 0x5575d0226f38 <line:137:1, col:8> col:8 struct k_futex
|-EnumDecl 0x5575d0227018 <line:146:1, line:160:1> line:146:6 k_objects
| |-FullComment 0x5575d02d8800 <line:140:3, line:144:33>
| | |-ParagraphComment 0x5575d02d86a0 <line:140:3>
| | | `-TextComment 0x5575d02d8670 <col:3> Text=" "
| | |-BlockCommandComment 0x5575d02d86c0 <col:4, col:29> Name="brief"
| | | `-ParagraphComment 0x5575d02d8720 <col:10, col:29>
| | |   `-TextComment 0x5575d02d86f0 <col:10, col:29> Text=" Kernel Object Types"
| | `-ParagraphComment 0x5575d02d87c0 <line:142:3, line:144:33>
| |   |-TextComment 0x5575d02d8740 <line:142:3, col:77> Text=" This enumeration needs to be kept in sync with the lists of kernel objects"
| |   |-TextComment 0x5575d02d8760 <line:143:3, col:79> Text=" and subsystems in scripts/gen_kobject_list.py, as well as the otype_to_str()"
| |   `-TextComment 0x5575d02d8780 <line:144:3, col:33> Text=" function in kernel/userspace.c"
| |-EnumConstantDecl 0x5575d02270e8 <line:147:2> col:2 K_OBJ_ANY 'int'
| |-EnumConstantDecl 0x5575d0227168 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/kobj-types-enum.h:2:1> col:1 K_OBJ_MEM_SLAB 'int'
| |-EnumConstantDecl 0x5575d02271b8 <line:3:1> col:1 K_OBJ_MSGQ 'int'
| |-EnumConstantDecl 0x5575d0227208 <line:4:1> col:1 K_OBJ_MUTEX 'int'
| |-EnumConstantDecl 0x5575d0227258 <line:5:1> col:1 K_OBJ_PIPE 'int'
| |-EnumConstantDecl 0x5575d02272a8 <line:6:1> col:1 K_OBJ_QUEUE 'int'
| |-EnumConstantDecl 0x5575d02272f8 <line:7:1> col:1 K_OBJ_POLL_SIGNAL 'int'
| |-EnumConstantDecl 0x5575d0227348 <line:8:1> col:1 K_OBJ_SEM 'int'
| |-EnumConstantDecl 0x5575d0227398 <line:9:1> col:1 K_OBJ_STACK 'int'
| |-EnumConstantDecl 0x5575d02273e8 <line:10:1> col:1 K_OBJ_THREAD 'int'
| |-EnumConstantDecl 0x5575d0227438 <line:11:1> col:1 K_OBJ_TIMER 'int'
| |-EnumConstantDecl 0x5575d0227488 <line:12:1> col:1 K_OBJ__THREAD_STACK_ELEMENT 'int'
| |-EnumConstantDecl 0x5575d02274d8 <line:13:1> col:1 K_OBJ_SYS_MUTEX 'int'
| |-EnumConstantDecl 0x5575d0227528 <line:14:1> col:1 K_OBJ_FUTEX 'int'
| |-EnumConstantDecl 0x5575d0227578 <line:16:1> col:1 K_OBJ_DRIVER_ADC 'int'
| |-EnumConstantDecl 0x5575d02275c8 <line:17:1> col:1 K_OBJ_DRIVER_AIO_CMP 'int'
| |-EnumConstantDecl 0x5575d0227618 <line:18:1> col:1 K_OBJ_DRIVER_COUNTER 'int'
| |-EnumConstantDecl 0x5575d0227668 <line:19:1> col:1 K_OBJ_DRIVER_CRYPTO 'int'
| |-EnumConstantDecl 0x5575d02276b8 <line:20:1> col:1 K_OBJ_DRIVER_DMA 'int'
| |-EnumConstantDecl 0x5575d0227708 <line:21:1> col:1 K_OBJ_DRIVER_FLASH 'int'
| |-EnumConstantDecl 0x5575d0227758 <line:22:1> col:1 K_OBJ_DRIVER_GPIO 'int'
| |-EnumConstantDecl 0x5575d02277a8 <line:23:1> col:1 K_OBJ_DRIVER_I2C 'int'
| |-EnumConstantDecl 0x5575d02277f8 <line:24:1> col:1 K_OBJ_DRIVER_I2S 'int'
| |-EnumConstantDecl 0x5575d0227848 <line:25:1> col:1 K_OBJ_DRIVER_IPM 'int'
| |-EnumConstantDecl 0x5575d0227898 <line:26:1> col:1 K_OBJ_DRIVER_LED 'int'
| |-EnumConstantDecl 0x5575d02278e8 <line:27:1> col:1 K_OBJ_DRIVER_PINMUX 'int'
| |-EnumConstantDecl 0x5575d0227938 <line:28:1> col:1 K_OBJ_DRIVER_PWM 'int'
| |-EnumConstantDecl 0x5575d0227988 <line:29:1> col:1 K_OBJ_DRIVER_ENTROPY 'int'
| |-EnumConstantDecl 0x5575d02279d8 <line:30:1> col:1 K_OBJ_DRIVER_SENSOR 'int'
| |-EnumConstantDecl 0x5575d0227a28 <line:31:1> col:1 K_OBJ_DRIVER_SPI 'int'
| |-EnumConstantDecl 0x5575d0227a78 <line:32:1> col:1 K_OBJ_DRIVER_UART 'int'
| |-EnumConstantDecl 0x5575d0227ac8 <line:33:1> col:1 K_OBJ_DRIVER_CAN 'int'
| |-EnumConstantDecl 0x5575d0227b18 <line:34:1> col:1 K_OBJ_DRIVER_PTP_CLOCK 'int'
| |-EnumConstantDecl 0x5575d0227b68 <line:35:1> col:1 K_OBJ_DRIVER_EEPROM 'int'
| |-EnumConstantDecl 0x5575d022d970 <line:36:1> col:1 K_OBJ_DRIVER_WDT 'int'
| |-EnumConstantDecl 0x5575d022d9c0 <line:37:1> col:1 K_OBJ_DRIVER_SAMPLE 'int'
| `-EnumConstantDecl 0x5575d022da38 </vagrant/ext/zephyros/zephyr/include/kernel.h:159:2> col:2 K_OBJ_LAST 'int'
|   `-FullComment 0x5575d02d8920 <line:156:5, col:13>
|     `-ParagraphComment 0x5575d02d88f0 <col:5, col:13>
|       |-TextComment 0x5575d02d8870 <col:5> Text=" "
|       `-InlineCommandComment 0x5575d02d88c0 <col:6, col:13> Name="endcond" RenderNormal
|-FunctionDecl 0x5575d022db90 <line:229:1, line:232:1> line:229:20 z_object_init 'void (void *)' static inline
| |-ParmVarDecl 0x5575d022db00 <col:34, col:40> col:40 used obj 'void *'
| |-CompoundStmt 0x5575d022dd18 <line:230:1, line:232:1>
| | `-CStyleCastExpr 0x5575d022dcc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5575d022dca8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5575d022dc88 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5575d022dc38 </vagrant/ext/zephyros/zephyr/include/kernel.h:231:13> 'void *' lvalue ParmVar 0x5575d022db00 'obj' 'void *'
| `-FullComment 0x5575d02d8a40 <line:227:3, col:12>
|   `-ParagraphComment 0x5575d02d8a10 <col:3, col:12>
|     |-TextComment 0x5575d02d8990 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d02d89e0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d022def0 <line:237:1, line:242:1> line:237:20 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5575d022dd48 <col:49, col:55> col:55 used object 'void *'
| |-ParmVarDecl 0x5575d022ddd8 <line:238:13, col:30> col:30 used thread 'struct k_thread *'
| |-CompoundStmt 0x5575d022e128 <line:239:1, line:242:1>
| | |-CStyleCastExpr 0x5575d022e028 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5575d022e010 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5575d022dff0 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x5575d022dfa0 </vagrant/ext/zephyros/zephyr/include/kernel.h:240:13> 'void *' lvalue ParmVar 0x5575d022dd48 'object' 'void *'
| | `-CStyleCastExpr 0x5575d022e0d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5575d022e0c0 <col:29, col:31> 'struct k_thread *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5575d022e0a0 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x5575d022e050 </vagrant/ext/zephyros/zephyr/include/kernel.h:241:13> 'struct k_thread *' lvalue ParmVar 0x5575d022ddd8 'thread' 'struct k_thread *'
| `-FullComment 0x5575d02d8b30 <line:235:3, col:12>
|   `-ParagraphComment 0x5575d02d8b00 <col:3, col:12>
|     |-TextComment 0x5575d02d8ab0 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d02d8ad0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d022e288 <line:247:1, line:252:1> line:247:20 k_object_access_revoke 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5575d022e160 <col:43, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x5575d022e1f0 <line:248:8, col:25> col:25 used thread 'struct k_thread *'
| |-CompoundStmt 0x5575d022e4c8 <line:249:1, line:252:1>
| | |-CStyleCastExpr 0x5575d022e3c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| | | `-ImplicitCastExpr 0x5575d022e3a8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| | |   `-ParenExpr 0x5575d022e388 <col:29, col:31> 'void *' lvalue
| | |     `-DeclRefExpr 0x5575d022e338 </vagrant/ext/zephyros/zephyr/include/kernel.h:250:13> 'void *' lvalue ParmVar 0x5575d022e160 'object' 'void *'
| | `-CStyleCastExpr 0x5575d022e470 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5575d022e458 <col:29, col:31> 'struct k_thread *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5575d022e438 <col:29, col:31> 'struct k_thread *' lvalue
| |       `-DeclRefExpr 0x5575d022e3e8 </vagrant/ext/zephyros/zephyr/include/kernel.h:251:13> 'struct k_thread *' lvalue ParmVar 0x5575d022e1f0 'thread' 'struct k_thread *'
| `-FullComment 0x5575d02d8c20 <line:245:3, col:12>
|   `-ParagraphComment 0x5575d02d8bf0 <col:3, col:12>
|     |-TextComment 0x5575d02d8ba0 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d02d8bc0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d022e590 <line:257:1, line:260:1> line:257:20 used z_impl_k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5575d022e500 <col:44, col:50> col:50 used object 'void *'
| |-CompoundStmt 0x5575d022e6e8 <line:258:1, line:260:1>
| | `-CStyleCastExpr 0x5575d022e6c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5575d022e6a8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5575d022e688 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5575d022e638 </vagrant/ext/zephyros/zephyr/include/kernel.h:259:13> 'void *' lvalue ParmVar 0x5575d022e500 'object' 'void *'
| `-FullComment 0x5575d02d8d10 <line:255:3, col:12>
|   `-ParagraphComment 0x5575d02d8ce0 <col:3, col:12>
|     |-TextComment 0x5575d02d8c90 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d02d8cb0 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d022e7a8 <line:262:1, line:265:1> line:262:20 k_object_access_all_grant 'void (void *)' static inline
| |-ParmVarDecl 0x5575d022e718 <col:46, col:52> col:52 used object 'void *'
| `-CompoundStmt 0x5575d022e928 <line:263:1, line:265:1>
|   `-CStyleCastExpr 0x5575d022e8d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|     `-ImplicitCastExpr 0x5575d022e8c0 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
|       `-ParenExpr 0x5575d022e8a0 <col:29, col:31> 'void *' lvalue
|         `-DeclRefExpr 0x5575d022e850 </vagrant/ext/zephyros/zephyr/include/kernel.h:264:13> 'void *' lvalue ParmVar 0x5575d022e718 'object' 'void *'
|-FunctionDecl 0x5575d0228008 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:279:75> col:16 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5575d0227ee0 <col:38, col:44> col:44 object 'void *'
| |-ParmVarDecl 0x5575d0227f70 <col:52, col:69> col:69 thread 'struct k_thread *'
| `-FullComment 0x5575d02d9070 <line:270:3, line:277:53>
|   |-ParagraphComment 0x5575d02d8db0 <line:270:3, col:43>
|   | `-TextComment 0x5575d02d8d80 <col:3, col:43> Text=" Grant a thread access to a kernel object"
|   |-ParagraphComment 0x5575d02d8e50 <line:272:3, line:274:67>
|   | |-TextComment 0x5575d02d8dd0 <line:272:3, col:72> Text=" The thread will be granted access to the object if the caller is from"
|   | |-TextComment 0x5575d02d8df0 <line:273:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x5575d02d8e10 <line:274:3, col:67> Text=" on both the object and the thread whose access is being granted."
|   |-ParagraphComment 0x5575d02d8ea0 <line:276:3>
|   | `-TextComment 0x5575d02d8e70 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d8ec0 <col:4, line:277:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d8f70 <line:276:17, line:277:3>
|   |   |-TextComment 0x5575d02d8f20 <line:276:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x5575d02d8f40 <line:277:3> Text=" "
|   `-ParamCommandComment 0x5575d02d8f90 <col:4, col:53> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x5575d02d9020 <col:17, col:53>
|       `-TextComment 0x5575d02d8ff0 <col:17, col:53> Text=" Thread to grant access to the object"
|-FunctionDecl 0x5575d0228228 prev 0x5575d022e288 <line:291:1, col:66> col:6 k_object_access_revoke 'void (void *, struct k_thread *)'
| |-ParmVarDecl 0x5575d0228100 <col:29, col:35> col:35 object 'void *'
| |-ParmVarDecl 0x5575d0228190 <col:43, col:60> col:60 thread 'struct k_thread *'
| `-FullComment 0x5575d02d93d0 <line:282:3, line:289:54>
|   |-ParagraphComment 0x5575d02d9110 <line:282:3, col:46>
|   | `-TextComment 0x5575d02d90e0 <col:3, col:46> Text=" Revoke a thread's access to a kernel object"
|   |-ParagraphComment 0x5575d02d91b0 <line:284:3, line:286:67>
|   | |-TextComment 0x5575d02d9130 <line:284:3, col:66> Text=" The thread will lose access to the object if the caller is from"
|   | |-TextComment 0x5575d02d9150 <line:285:3, col:71> Text=" supervisor mode, or the caller is from user mode AND has permissions"
|   | `-TextComment 0x5575d02d9170 <line:286:3, col:67> Text=" on both the object and the thread whose access is being revoked."
|   |-ParagraphComment 0x5575d02d9200 <line:288:3>
|   | `-TextComment 0x5575d02d91d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d9220 <col:4, line:289:3> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d92d0 <line:288:17, line:289:3>
|   |   |-TextComment 0x5575d02d9280 <line:288:17, col:41> Text=" Address of kernel object"
|   |   `-TextComment 0x5575d02d92a0 <line:289:3> Text=" "
|   `-ParamCommandComment 0x5575d02d92f0 <col:4, col:54> [in] implicitly Param="thread" ParamIndex=1
|     `-ParagraphComment 0x5575d02d9380 <col:17, col:54>
|       `-TextComment 0x5575d02d9350 <col:17, col:54> Text=" Thread to remove access to the object"
|-FunctionDecl 0x5575d02283b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:302:45> col:16 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5575d0228320 <col:33, col:39> col:39 object 'void *'
| `-FullComment 0x5575d02d9700 <line:294:3, line:301:1>
|   |-ParagraphComment 0x5575d02d9470 <line:294:3>
|   | `-TextComment 0x5575d02d9440 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d9490 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5575d02d94f0 <col:10, col:27>
|   |   `-TextComment 0x5575d02d94c0 <col:10, col:27> Text=" Release an object"
|   |-ParagraphComment 0x5575d02d9560 <line:296:3, line:297:72>
|   | |-TextComment 0x5575d02d9510 <line:296:3, col:64> Text=" Allows user threads to drop their own permission on an object"
|   | `-TextComment 0x5575d02d9530 <line:297:3, col:72> Text=" Their permissions are automatically cleared when a thread terminates."
|   |-ParagraphComment 0x5575d02d95b0 <line:299:3>
|   | `-TextComment 0x5575d02d9580 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d95d0 <col:4, col:42> [in] implicitly Param="object" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d9660 <col:17, col:42>
|   |   `-TextComment 0x5575d02d9630 <col:17, col:42> Text=" The object to be released"
|   `-ParagraphComment 0x5575d02d96b0 <line:301:1>
|     `-TextComment 0x5575d02d9680 <col:1> Text=" "
|-FunctionDecl 0x5575d0228530 prev 0x5575d022e7a8 <line:321:1, col:44> col:6 k_object_access_all_grant 'void (void *)'
| |-ParmVarDecl 0x5575d02284a0 <col:32, col:38> col:38 object 'void *'
| `-FullComment 0x5575d02d9ac0 <line:305:3, line:319:41>
|   |-ParagraphComment 0x5575d02d97a0 <line:305:3, col:59>
|   | `-TextComment 0x5575d02d9770 <col:3, col:59> Text=" Grant all present and future threads access to an object"
|   |-ParagraphComment 0x5575d02d9860 <line:307:3, line:310:59>
|   | |-TextComment 0x5575d02d97c0 <line:307:3, col:77> Text=" If the caller is from supervisor mode, or the caller is from user mode and"
|   | |-TextComment 0x5575d02d97e0 <line:308:3, col:72> Text=" have sufficient permissions on the object, then that object will have"
|   | |-TextComment 0x5575d02d9800 <line:309:3, col:76> Text=" permissions granted to it for *all* current and future threads running in"
|   | `-TextComment 0x5575d02d9820 <line:310:3, col:59> Text=" the system, effectively becoming a public kernel object."
|   |-ParagraphComment 0x5575d02d9900 <line:312:3, line:314:43>
|   | |-TextComment 0x5575d02d9880 <line:312:3, col:79> Text=" Use of this API should be avoided on systems that are running untrusted code"
|   | |-TextComment 0x5575d02d98a0 <line:313:3, col:76> Text=" as it is possible for such code to derive the addresses of kernel objects"
|   | `-TextComment 0x5575d02d98c0 <line:314:3, col:43> Text=" and perform unwanted operations on them."
|   |-ParagraphComment 0x5575d02d9970 <line:316:3, line:317:25>
|   | |-TextComment 0x5575d02d9920 <line:316:3, col:75> Text=" It is not possible to revoke permissions on public objects; once public,"
|   | `-TextComment 0x5575d02d9940 <line:317:3, col:25> Text=" any thread may use it."
|   |-ParagraphComment 0x5575d02d99c0 <line:319:3>
|   | `-TextComment 0x5575d02d9990 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d02d99e0 <col:4, col:41> [in] implicitly Param="object" ParamIndex=0
|     `-ParagraphComment 0x5575d02d9a70 <col:17, col:41>
|       `-TextComment 0x5575d02d9a40 <col:17, col:41> Text=" Address of kernel object"
|-FunctionDecl 0x5575d0228778 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:337:52> col:17 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5575d0228668 <col:32, col:47> col:47 otype 'enum k_objects':'enum k_objects'
| `-FullComment 0x5575d02d9e80 <line:324:3, line:335:12>
|   |-ParagraphComment 0x5575d02d9b60 <line:324:3, col:48>
|   | `-TextComment 0x5575d02d9b30 <col:3, col:48> Text=" Allocate a kernel object of a designated type"
|   |-ParagraphComment 0x5575d02d9c20 <line:326:3, line:329:78>
|   | |-TextComment 0x5575d02d9b80 <line:326:3, col:74> Text=" This will instantiate at runtime a kernel object of the specified type,"
|   | |-TextComment 0x5575d02d9ba0 <line:327:3, col:77> Text=" returning a pointer to it. The object will be returned in an uninitialized"
|   | |-TextComment 0x5575d02d9bc0 <line:328:3, col:76> Text=" state, with the calling thread being granted permission on it. The memory"
|   | `-TextComment 0x5575d02d9be0 <line:329:3, col:78> Text=" for the object will be allocated out of the calling thread's resource pool."
|   |-ParagraphComment 0x5575d02d9c70 <line:331:3, col:59>
|   | `-TextComment 0x5575d02d9c40 <col:3, col:59> Text=" Currently, allocation of thread stacks is not supported."
|   |-ParagraphComment 0x5575d02d9cc0 <line:333:3>
|   | `-TextComment 0x5575d02d9c90 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d9ce0 <col:4, line:334:3> [in] implicitly Param="otype" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d9d90 <line:333:16, line:334:3>
|   |   |-TextComment 0x5575d02d9d40 <line:333:16, col:44> Text=" Requested kernel object type"
|   |   `-TextComment 0x5575d02d9d60 <line:334:3> Text=" "
|   `-BlockCommandComment 0x5575d02d9db0 <col:4, line:335:12> Name="return"
|     `-ParagraphComment 0x5575d02d9e30 <line:334:11, line:335:12>
|       |-TextComment 0x5575d02d9de0 <line:334:11, col:77> Text=" A pointer to the allocated kernel object, or NULL if memory wasn't"
|       `-TextComment 0x5575d02d9e00 <line:335:3, col:12> Text=" available"
|-FunctionDecl 0x5575d02288d8 <line:352:1, line:357:1> line:352:21 used z_impl_k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5575d0228840 <col:43, col:58> col:58 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x5575d0228ae8 <line:353:1, line:357:1>
|   |-CStyleCastExpr 0x5575d0228a08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
|   | `-ImplicitCastExpr 0x5575d02289f0 <col:29, col:31> 'enum k_objects':'enum k_objects' <LValueToRValue> part_of_explicit_cast
|   |   `-ParenExpr 0x5575d02289d0 <col:29, col:31> 'enum k_objects':'enum k_objects' lvalue
|   |     `-DeclRefExpr 0x5575d0228980 </vagrant/ext/zephyros/zephyr/include/kernel.h:354:13> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x5575d0228840 'otype' 'enum k_objects':'enum k_objects'
|   `-ReturnStmt 0x5575d0228ab0 <line:356:2, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24>
|     `-ParenExpr 0x5575d0228a90 <col:14, col:24> 'void *'
|       `-CStyleCastExpr 0x5575d0228a68 <col:15, col:23> 'void *' <NullToPointer>
|         `-IntegerLiteral 0x5575d0228a30 <col:23> 'int' 0
|-FunctionDecl 0x5575d0228bb0 </vagrant/ext/zephyros/zephyr/include/kernel.h:363:1, line:366:1> line:363:20 k_obj_free 'void (void *)' static inline
| |-ParmVarDecl 0x5575d0228b20 <col:31, col:37> col:37 used obj 'void *'
| |-CompoundStmt 0x5575d0228d38 <line:364:1, line:366:1>
| | `-CStyleCastExpr 0x5575d0228ce0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:181:23, col:31> 'void' <ToVoid>
| |   `-ImplicitCastExpr 0x5575d0228cc8 <col:29, col:31> 'void *' <LValueToRValue> part_of_explicit_cast
| |     `-ParenExpr 0x5575d0228ca8 <col:29, col:31> 'void *' lvalue
| |       `-DeclRefExpr 0x5575d0228c58 </vagrant/ext/zephyros/zephyr/include/kernel.h:365:13> 'void *' lvalue ParmVar 0x5575d0228b20 'obj' 'void *'
| `-FullComment 0x5575d02da0e0 <line:359:3, line:362:1>
|   |-ParagraphComment 0x5575d02d9f20 <line:359:3>
|   | `-TextComment 0x5575d02d9ef0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d9f40 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x5575d02d9fa0 <col:10, col:24>
|   |   `-TextComment 0x5575d02d9f70 <col:10, col:24> Text=" Free an object"
|   |-ParagraphComment 0x5575d02d9ff0 <line:361:3>
|   | `-TextComment 0x5575d02d9fc0 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d02da010 <col:4, line:362:1> [in] implicitly Param="obj" ParamIndex=0
|     `-ParagraphComment 0x5575d02da0a0 <col:1>
|       `-TextComment 0x5575d02da070 <col:1> Text=" "
|-RecordDecl 0x5575d0228d50 prev 0x5575d01e42a8 <line:387:1, line:389:1> line:387:17 struct _k_thread_stack_element definition
| |-PackedAttr 0x5575d0228dd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:168:40>
| `-FieldDecl 0x5575d0228e38 </vagrant/ext/zephyros/zephyr/include/kernel.h:388:2, col:7> col:7 data 'char'
|-RecordDecl 0x5575d022b028 <line:427:1, line:503:1> line:427:8 struct _thread_base definition
| |-RecordDecl 0x5575d022b0d8 <line:430:2, line:433:2> line:430:2 union definition
| | |-FieldDecl 0x5575d022b198 <line:431:3, col:15> col:15 qnode_dlist 'sys_dnode_t':'struct _dnode'
| | `-FieldDecl 0x5575d022b208 <line:432:3, col:17> col:17 qnode_rb 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x5575d022b2c0 <line:430:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| |-IndirectFieldDecl 0x5575d022b320 <line:431:15> col:15 implicit qnode_dlist 'sys_dnode_t':'struct _dnode'
| | |-Field 0x5575d022b2c0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x5575d022b198 'qnode_dlist' 'sys_dnode_t':'struct _dnode'
| |-IndirectFieldDecl 0x5575d022b378 <line:432:17> col:17 implicit qnode_rb 'struct rbnode':'struct rbnode'
| | |-Field 0x5575d022b2c0 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:430:2)'
| | `-Field 0x5575d022b208 'qnode_rb' 'struct rbnode':'struct rbnode'
| |-FieldDecl 0x5575d022b460 <line:438:2, col:13> col:13 pended_on '_wait_q_t *'
| |-FieldDecl 0x5575d022b4c0 <line:441:2, col:7> col:7 user_options 'u8_t':'unsigned char'
| |-FieldDecl 0x5575d022b520 <line:444:2, col:7> col:7 thread_state 'u8_t':'unsigned char'
| |-RecordDecl 0x5575d022b570 <line:460:2, line:471:2> line:460:2 union definition
| | |-RecordDecl 0x5575d022b618 <line:461:3, line:469:3> line:461:3 struct definition
| | | |-FieldDecl 0x5575d022b6d8 <line:466:4, col:9> col:9 prio 's8_t':'signed char'
| | | `-FieldDecl 0x5575d022b738 <line:467:4, col:9> col:9 sched_locked 'u8_t':'unsigned char'
| | |-FieldDecl 0x5575d022b7f0 <line:461:3> col:3 implicit 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | |-IndirectFieldDecl 0x5575d022b850 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | | |-Field 0x5575d022b7f0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x5575d022b6d8 'prio' 's8_t':'signed char'
| | |-IndirectFieldDecl 0x5575d022b8a8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | | |-Field 0x5575d022b7f0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | | `-Field 0x5575d022b738 'sched_locked' 'u8_t':'unsigned char'
| | `-FieldDecl 0x5575d022b900 <line:470:3, col:9> col:9 preempt 'u16_t':'unsigned short'
| |-FieldDecl 0x5575d022ba10 <line:460:2> col:2 implicit 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| |-IndirectFieldDecl 0x5575d022ba78 <line:466:9> col:9 implicit prio 's8_t':'signed char'
| | |-Field 0x5575d022ba10 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x5575d022b7f0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x5575d022b6d8 'prio' 's8_t':'signed char'
| |-IndirectFieldDecl 0x5575d022bad8 <line:467:9> col:9 implicit sched_locked 'u8_t':'unsigned char'
| | |-Field 0x5575d022ba10 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | |-Field 0x5575d022b7f0 '' 'struct _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:461:3)'
| | `-Field 0x5575d022b738 'sched_locked' 'u8_t':'unsigned char'
| |-IndirectFieldDecl 0x5575d022bb30 <line:470:9> col:9 implicit preempt 'u16_t':'unsigned short'
| | |-Field 0x5575d022ba10 '' 'union _thread_base::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:460:2)'
| | `-Field 0x5575d022b900 'preempt' 'u16_t':'unsigned short'
| |-FieldDecl 0x5575d022bb88 <line:477:2, col:8> col:8 order_key 'u32_t':'unsigned int'
| `-FieldDecl 0x5575d022bbf0 <line:497:2, col:8> col:8 swap_data 'void *'
|-TypedefDecl 0x5575d022bd48 <line:505:1, col:29> col:29 _thread_base_t 'struct _thread_base':'struct _thread_base'
| `-ElaboratedType 0x5575d022bcf0 'struct _thread_base' sugar
|   `-RecordType 0x5575d022b0b0 'struct _thread_base'
|     `-Record 0x5575d022b028 '_thread_base'
|-RecordDecl 0x5575d022bdc8 prev 0x5575d021b080 <line:545:1, line:618:1> line:545:8 invalid struct k_thread definition
| |-FullComment 0x5575d02da250 <line:542:3, line:543:19>
| | |-ParagraphComment 0x5575d02da180 <line:542:3>
| | | `-TextComment 0x5575d02da150 <col:3> Text=" "
| | |-VerbatimLineComment 0x5575d02da1a0 <col:4, col:24> Text=" thread_apis"
| | `-ParagraphComment 0x5575d02da210 <line:543:3, col:19>
| |   `-TextComment 0x5575d02da1e0 <col:3, col:19> Text=" Thread Structure"
| |-FieldDecl 0x5575d022be68 <line:547:2, col:22> col:22 base 'struct _thread_base':'struct _thread_base'
| |-RecordDecl 0x5575d022bee8 parent 0x5575d007b488 <line:550:2, col:9> col:9 struct _callee_saved
| |-FieldDecl 0x5575d02309e0 <col:2, col:23> col:23 invalid callee_saved 'struct _callee_saved':'struct _callee_saved'
| | `-FullComment 0x5575d02da320 <line:549:5, col:59>
| |   `-ParagraphComment 0x5575d02da2f0 <col:5, col:59>
| |     `-TextComment 0x5575d02da2c0 <col:5, col:59> Text=" defined by the architecture, but all archs need these "
| |-FieldDecl 0x5575d0230a70 <line:553:2, col:8> col:8 init_data 'void *'
| | `-FullComment 0x5575d02da3f0 <line:552:5, col:29>
| |   `-ParagraphComment 0x5575d02da3c0 <col:5, col:29>
| |     `-TextComment 0x5575d02da390 <col:5, col:29> Text=" static thread init data "
| |-FieldDecl 0x5575d0230c20 <line:559:2, col:23> col:9 fn_abort 'void (*)(void)'
| | `-FullComment 0x5575d02da570 <line:556:4, line:558:4>
| |   `-ParagraphComment 0x5575d02da530 <line:556:4, line:558:4>
| |     |-TextComment 0x5575d02da460 <line:556:4, col:18> Text=" abort function"
| |     |-TextComment 0x5575d02da480 <line:557:4> Text=" "
| |     |-InlineCommandComment 0x5575d02da4d0 <col:5, col:8> Name="ref" RenderNormal Arg[0]="K-THREAD-002"
| |     `-TextComment 0x5575d02da4f0 <line:558:4> Text=" "
| |-FieldDecl 0x5575d0230d68 <line:614:2, col:21> col:21 referenced resource_pool 'struct k_mem_pool *'
| | `-FullComment 0x5575d02da640 <line:613:5, col:19>
| |   `-ParagraphComment 0x5575d02da610 <col:5, col:19>
| |     `-TextComment 0x5575d02da5e0 <col:5, col:19> Text=" resource pool "
| |-RecordDecl 0x5575d0230de8 parent 0x5575d007b488 <line:617:2, col:9> col:9 struct _thread_arch
| `-FieldDecl 0x5575d0230f10 <col:2, col:22> col:22 invalid arch 'struct _thread_arch':'struct _thread_arch'
|   `-FullComment 0x5575d02da710 <line:616:5, col:47>
|     `-ParagraphComment 0x5575d02da6e0 <col:5, col:47>
|       `-TextComment 0x5575d02da6b0 <col:5, col:47> Text=" arch-specifics: must always be at the end "
|-TypedefDecl 0x5575d0231058 <line:620:1, col:25> col:25 _thread_t 'struct k_thread':'struct k_thread'
| `-ElaboratedType 0x5575d0172b70 'struct k_thread' sugar
|   `-RecordType 0x5575d0172ad0 'struct k_thread'
|     `-Record 0x5575d022bdc8 'k_thread'
|-TypedefDecl 0x5575d02310d8 <line:621:1, col:26> col:26 referenced k_tid_t 'struct k_thread *'
| `-PointerType 0x5575d0172be0 'struct k_thread *'
|   `-ElaboratedType 0x5575d0172b70 'struct k_thread' sugar
|     `-RecordType 0x5575d0172ad0 'struct k_thread'
|       `-Record 0x5575d022bdc8 'k_thread'
|-EnumDecl 0x5575d0231130 <line:623:1, line:627:1> line:623:6 execution_context_types
| |-EnumConstantDecl 0x5575d0231230 <line:624:2, col:10> col:2 K_ISR 'int'
| | `-ConstantExpr 0x5575d0231218 <col:10> 'int'
| |   `-IntegerLiteral 0x5575d02311f8 <col:10> 'int' 0
| |-EnumConstantDecl 0x5575d0231280 <line:625:2> col:2 K_COOP_THREAD 'int'
| `-EnumConstantDecl 0x5575d02312d0 <line:626:2> col:2 K_PREEMPT_THREAD 'int'
|-TypedefDecl 0x5575d0231610 <line:634:1, line:635:23> line:634:16 referenced k_thread_user_cb_t 'void (*)(const struct k_thread *, void *)'
| |-PointerType 0x5575d02315a0 'void (*)(const struct k_thread *, void *)'
| | `-ParenType 0x5575d0231540 'void (const struct k_thread *, void *)' sugar
| |   `-FunctionProtoType 0x5575d0231500 'void (const struct k_thread *, void *)' cdecl
| |     |-BuiltinType 0x5575d007b4e0 'void'
| |     |-PointerType 0x5575d0231380 'const struct k_thread *'
| |     | `-QualType 0x5575d0172b71 'const struct k_thread' const
| |     |   `-ElaboratedType 0x5575d0172b70 'struct k_thread' sugar
| |     |     `-RecordType 0x5575d0172ad0 'struct k_thread'
| |     |       `-Record 0x5575d022bdc8 'k_thread'
| |     `-PointerType 0x5575d007bca0 'void *'
| |       `-BuiltinType 0x5575d007b4e0 'void'
| `-FullComment 0x5575d02da8d0 <line:630:3, line:631:5>
|   |-ParagraphComment 0x5575d02da7b0 <line:630:3>
|   | `-TextComment 0x5575d02da780 <col:3> Text=" "
|   |-VerbatimLineComment 0x5575d02da7d0 <col:4, col:27> Text=" thread_apis"
|   `-ParagraphComment 0x5575d02da890 <line:631:3, col:5>
|     |-TextComment 0x5575d02da810 <col:3> Text=" "
|     |-TextComment 0x5575d02da830 <col:4> Text="@"
|     `-TextComment 0x5575d02da850 <col:5> Text="{"
|-FunctionDecl 0x5575d0231870 <line:654:1, col:73> col:13 k_thread_foreach 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x5575d02316d8 <col:30, col:49> col:49 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x5575d0231758 <col:58, col:64> col:64 user_data 'void *'
| `-FullComment 0x5575d02daff0 <line:638:3, line:652:14>
|   |-ParagraphComment 0x5575d02da970 <line:638:3>
|   | `-TextComment 0x5575d02da940 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02da990 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5575d02da9f0 <col:10, col:53>
|   |   `-TextComment 0x5575d02da9c0 <col:10, col:53> Text=" Iterate over all the threads in the system."
|   |-ParagraphComment 0x5575d02daa60 <line:640:3, line:641:46>
|   | |-TextComment 0x5575d02daa10 <line:640:3, col:63> Text=" This routine iterates over all the threads in the system and"
|   | `-TextComment 0x5575d02daa30 <line:641:3, col:46> Text=" calls the user_cb function for each thread."
|   |-ParagraphComment 0x5575d02daab0 <line:643:3>
|   | `-TextComment 0x5575d02daa80 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02daad0 <col:4, line:644:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x5575d02dab80 <line:643:18, line:644:3>
|   |   |-TextComment 0x5575d02dab30 <line:643:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x5575d02dab50 <line:644:3> Text=" "
|   |-ParamCommandComment 0x5575d02daba0 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02dac30 <col:20, col:41>
|   |   `-TextComment 0x5575d02dac00 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x5575d02dac80 <line:646:3>
|   | `-TextComment 0x5575d02dac50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02daca0 <col:4, line:648:3> Name="note"
|   | `-ParagraphComment 0x5575d02dad50 <line:646:9, line:648:3>
|   |   |-TextComment 0x5575d02dacd0 <line:646:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x5575d02dacf0 <line:647:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x5575d02dad10 <line:648:3> Text=" "
|   |-BlockCommandComment 0x5575d02dad70 <col:4, line:650:46> Name="note"
|   | `-ParagraphComment 0x5575d02daea0 <line:648:9, line:650:46>
|   |   |-TextComment 0x5575d02dada0 <line:648:9, col:23> Text=" This API uses "
|   |   |-InlineCommandComment 0x5575d02dadf0 <col:24, col:27> Name="ref" RenderNormal Arg[0]="k_spin_lock"
|   |   |-TextComment 0x5575d02dae10 <col:40, col:70> Text=" to protect the _kernel.threads"
|   |   |-TextComment 0x5575d02dae30 <line:649:3, col:72> Text=" list which means creation of new threads and terminations of existing"
|   |   `-TextComment 0x5575d02dae50 <line:650:3, col:46> Text=" threads are blocked until this API returns."
|   |-ParagraphComment 0x5575d02daef0 <line:652:3>
|   | `-TextComment 0x5575d02daec0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02daf10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02daf70 <col:11, col:14>
|       `-TextComment 0x5575d02daf40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0231a80 <line:683:1, line:684:45> line:683:13 k_thread_foreach_unlocked 'void (k_thread_user_cb_t, void *)' extern
| |-ParmVarDecl 0x5575d0231958 <line:684:2, col:21> col:21 user_cb 'k_thread_user_cb_t':'void (*)(const struct k_thread *, void *)'
| |-ParmVarDecl 0x5575d02319e8 <col:30, col:36> col:36 user_data 'void *'
| `-FullComment 0x5575d02dbae0 <line:657:3, line:681:72>
|   |-ParagraphComment 0x5575d02db090 <line:657:3>
|   | `-TextComment 0x5575d02db060 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02db0b0 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x5575d02db110 <col:10, col:69>
|   |   `-TextComment 0x5575d02db0e0 <col:10, col:69> Text=" Iterate over all the threads in the system without locking."
|   |-ParagraphComment 0x5575d02db1f0 <line:659:3, line:660:51>
|   | |-TextComment 0x5575d02db130 <line:659:3, col:44> Text=" This routine works exactly the same like "
|   | |-InlineCommandComment 0x5575d02db190 <col:45, col:48> Name="ref" RenderNormal Arg[0]="k_thread_foreach"
|   | `-TextComment 0x5575d02db1b0 <line:660:3, col:51> Text=" but unlocks interrupts when user_cb is executed."
|   |-ParagraphComment 0x5575d02db240 <line:662:3>
|   | `-TextComment 0x5575d02db210 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02db260 <col:4, line:663:3> [in] implicitly Param="user_cb" ParamIndex=0
|   | `-ParagraphComment 0x5575d02db310 <line:662:18, line:663:3>
|   |   |-TextComment 0x5575d02db2c0 <line:662:18, col:56> Text=" Pointer to the user callback function."
|   |   `-TextComment 0x5575d02db2e0 <line:663:3> Text=" "
|   |-ParamCommandComment 0x5575d02db330 <col:4, col:41> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02db3c0 <col:20, col:41>
|   |   `-TextComment 0x5575d02db390 <col:20, col:41> Text=" Pointer to user data."
|   |-ParagraphComment 0x5575d02db410 <line:665:3>
|   | `-TextComment 0x5575d02db3e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02db430 <col:4, line:667:3> Name="note"
|   | `-ParagraphComment 0x5575d02db4e0 <line:665:9, line:667:3>
|   |   |-TextComment 0x5575d02db460 <line:665:9, col:60> Text=" CONFIG_THREAD_MONITOR must be set for this function"
|   |   |-TextComment 0x5575d02db480 <line:666:3, col:19> Text=" to be effective."
|   |   `-TextComment 0x5575d02db4a0 <line:667:3> Text=" "
|   |-BlockCommandComment 0x5575d02db500 <col:4, line:674:3> Name="note"
|   | `-ParagraphComment 0x5575d02db770 <line:667:9, line:674:3>
|   |   |-TextComment 0x5575d02db530 <line:667:9, col:23> Text=" This API uses "
|   |   |-InlineCommandComment 0x5575d02db580 <col:24, col:27> Name="ref" RenderNormal Arg[0]="k_spin_lock"
|   |   |-TextComment 0x5575d02db5a0 <col:40, col:79> Text=" only when accessing the _kernel.threads"
|   |   |-TextComment 0x5575d02db5c0 <line:668:3, col:74> Text=" queue elements. It unlocks it during user callback function processing."
|   |   |-TextComment 0x5575d02db5e0 <line:669:3, col:38> Text=" If a new task is created when this "
|   |   |-InlineCommandComment 0x5575d02db630 <col:39, col:40> Name="c" RenderMonospaced Arg[0]="foreach"
|   |   |-TextComment 0x5575d02db650 <col:49, col:73> Text=" function is in progress,"
|   |   |-TextComment 0x5575d02db670 <line:670:3, col:63> Text=" the added new task would not be included in the enumeration."
|   |   |-TextComment 0x5575d02db690 <line:671:3, col:75> Text=" If a task is aborted during this enumeration, there would be a race here"
|   |   |-TextComment 0x5575d02db6b0 <line:672:3, col:77> Text=" and there is a possibility that this aborted task would be included in the"
|   |   |-TextComment 0x5575d02db6d0 <line:673:3, col:15> Text=" enumeration."
|   |   `-TextComment 0x5575d02db6f0 <line:674:3> Text=" "
|   `-BlockCommandComment 0x5575d02db790 <col:4, line:681:72> Name="note"
|     `-ParagraphComment 0x5575d02dba70 <line:674:9, line:681:72>
|       |-TextComment 0x5575d02db7c0 <line:674:9, col:63> Text=" If the task is aborted and the memory occupied by its "
|       |-InlineCommandComment 0x5575d02db810 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="k_thread"
|       |-TextComment 0x5575d02db830 <line:675:3, col:33> Text=" structure is reused when this "
|       |-InlineCommandComment 0x5575d02db890 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="k_thread_foreach_unlocked"
|       |-TextComment 0x5575d02db8b0 <col:62, col:76> Text=" is in progress"
|       |-TextComment 0x5575d02db8d0 <line:676:3, col:52> Text=" it might even lead to the system behave unstable."
|       |-TextComment 0x5575d02db8f0 <line:677:3, col:59> Text=" This function may never return, as it would follow some "
|       |-InlineCommandComment 0x5575d02db940 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="next"
|       |-TextComment 0x5575d02db960 <col:67, col:71> Text=" task"
|       |-TextComment 0x5575d02db980 <line:678:3, col:73> Text=" pointers treating given pointer as a pointer to the k_thread structure"
|       |-TextComment 0x5575d02db9a0 <line:679:3, col:45> Text=" while it is something different right now."
|       |-TextComment 0x5575d02db9c0 <line:680:3, col:77> Text=" Do not reuse the memory that was occupied by k_thread structure of aborted"
|       `-TextComment 0x5575d02db9e0 <line:681:3, col:72> Text=" task if it was aborted after this function was called in any context."
|-FunctionDecl 0x5575d0232300 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:784:43> line:779:19 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x5575d0231ca0 <col:35, col:52> col:52 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5575d0231d18 <line:780:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5575d0231d90 <line:781:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0231e38 <line:782:7, col:24> col:24 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5575d0231eb8 <line:783:7, col:13> col:13 p1 'void *'
| |-ParmVarDecl 0x5575d0231f38 <col:17, col:23> col:23 p2 'void *'
| |-ParmVarDecl 0x5575d0231fb8 <col:27, col:33> col:33 p3 'void *'
| |-ParmVarDecl 0x5575d0232038 <line:784:7, col:11> col:11 prio 'int'
| |-ParmVarDecl 0x5575d02320b0 <col:17, col:23> col:23 options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5575d0232128 <col:32, col:38> col:38 delay 's32_t':'int'
| `-FullComment 0x5575d02dc940 <line:746:3, line:778:1>
|   |-ParagraphComment 0x5575d02dbb80 <line:746:3>
|   | `-TextComment 0x5575d02dbb50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02dbba0 <col:4, col:26> Name="brief"
|   | `-ParagraphComment 0x5575d02dbc00 <col:10, col:26>
|   |   `-TextComment 0x5575d02dbbd0 <col:10, col:26> Text=" Create a thread."
|   |-ParagraphComment 0x5575d02dbc50 <line:748:3, col:70>
|   | `-TextComment 0x5575d02dbc20 <col:3, col:70> Text=" This routine initializes a thread, then schedules it for execution."
|   |-ParagraphComment 0x5575d02dbd10 <line:750:3, line:753:11>
|   | |-TextComment 0x5575d02dbc70 <line:750:3, col:78> Text=" The new thread may be scheduled for immediate execution or a delayed start."
|   | |-TextComment 0x5575d02dbc90 <line:751:3, col:71> Text=" If the newly spawned thread does not have a delayed start the kernel"
|   | |-TextComment 0x5575d02dbcb0 <line:752:3, col:70> Text=" scheduler may preempt the current thread to allow the new thread to"
|   | `-TextComment 0x5575d02dbcd0 <line:753:3, col:11> Text=" execute."
|   |-ParagraphComment 0x5575d02dbdb0 <line:755:3, line:757:44>
|   | |-TextComment 0x5575d02dbd30 <line:755:3, col:73> Text=" Thread options are architecture-specific, and can include K_ESSENTIAL,"
|   | |-TextComment 0x5575d02dbd50 <line:756:3, col:77> Text=" K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating"
|   | `-TextComment 0x5575d02dbd70 <line:757:3, col:44> Text=" them using "|" (the logical OR operator)."
|   |-ParagraphComment 0x5575d02dbe70 <line:759:3, line:762:13>
|   | |-TextComment 0x5575d02dbdd0 <line:759:3, col:79> Text=" Historically, users often would use the beginning of the stack memory region"
|   | |-TextComment 0x5575d02dbdf0 <line:760:3, col:75> Text=" to store the struct k_thread data, although corruption will occur if the"
|   | |-TextComment 0x5575d02dbe10 <line:761:3, col:80> Text=" stack overflows this region and stack protection features may not detect this"
|   | `-TextComment 0x5575d02dbe30 <line:762:3, col:13> Text=" situation."
|   |-ParagraphComment 0x5575d02dbec0 <line:764:3>
|   | `-TextComment 0x5575d02dbe90 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02dbee0 <col:4, line:765:3> [in] implicitly Param="new_thread" ParamIndex=0
|   | `-ParagraphComment 0x5575d02dbf90 <line:764:21, line:765:3>
|   |   |-TextComment 0x5575d02dbf40 <line:764:21, col:61> Text=" Pointer to uninitialized struct k_thread"
|   |   `-TextComment 0x5575d02dbf60 <line:765:3> Text=" "
|   |-ParamCommandComment 0x5575d02dbfb0 <col:4, line:766:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5575d02dc060 <line:765:16, line:766:3>
|   |   |-TextComment 0x5575d02dc010 <line:765:16, col:43> Text=" Pointer to the stack space."
|   |   `-TextComment 0x5575d02dc030 <line:766:3> Text=" "
|   |-ParamCommandComment 0x5575d02dc080 <col:4, line:767:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x5575d02dc130 <line:766:21, line:767:3>
|   |   |-TextComment 0x5575d02dc0e0 <line:766:21, col:41> Text=" Stack size in bytes."
|   |   `-TextComment 0x5575d02dc100 <line:767:3> Text=" "
|   |-ParamCommandComment 0x5575d02dc150 <col:4, line:768:3> [in] implicitly Param="entry" ParamIndex=3
|   | `-ParagraphComment 0x5575d02dc200 <line:767:16, line:768:3>
|   |   |-TextComment 0x5575d02dc1b0 <line:767:16, col:38> Text=" Thread entry function."
|   |   `-TextComment 0x5575d02dc1d0 <line:768:3> Text=" "
|   |-ParamCommandComment 0x5575d02dc220 <col:4, line:769:3> [in] implicitly Param="p1" ParamIndex=4
|   | `-ParagraphComment 0x5575d02dc2d0 <line:768:13, line:769:3>
|   |   |-TextComment 0x5575d02dc280 <line:768:13, col:39> Text=" 1st entry point parameter."
|   |   `-TextComment 0x5575d02dc2a0 <line:769:3> Text=" "
|   |-ParamCommandComment 0x5575d02dc2f0 <col:4, line:770:3> [in] implicitly Param="p2" ParamIndex=5
|   | `-ParagraphComment 0x5575d02dc3a0 <line:769:13, line:770:3>
|   |   |-TextComment 0x5575d02dc350 <line:769:13, col:39> Text=" 2nd entry point parameter."
|   |   `-TextComment 0x5575d02dc370 <line:770:3> Text=" "
|   |-ParamCommandComment 0x5575d02dc3c0 <col:4, line:771:3> [in] implicitly Param="p3" ParamIndex=6
|   | `-ParagraphComment 0x5575d02dc470 <line:770:13, line:771:3>
|   |   |-TextComment 0x5575d02dc420 <line:770:13, col:39> Text=" 3rd entry point parameter."
|   |   `-TextComment 0x5575d02dc440 <line:771:3> Text=" "
|   |-ParamCommandComment 0x5575d02dc490 <col:4, line:772:3> [in] implicitly Param="prio" ParamIndex=7
|   | `-ParagraphComment 0x5575d02dc540 <line:771:15, line:772:3>
|   |   |-TextComment 0x5575d02dc4f0 <line:771:15, col:31> Text=" Thread priority."
|   |   `-TextComment 0x5575d02dc510 <line:772:3> Text=" "
|   |-ParamCommandComment 0x5575d02dc580 <col:4, line:773:3> [in] implicitly Param="options" ParamIndex=8
|   | `-ParagraphComment 0x5575d02dc630 <line:772:18, line:773:3>
|   |   |-TextComment 0x5575d02dc5e0 <line:772:18, col:33> Text=" Thread options."
|   |   `-TextComment 0x5575d02dc600 <line:773:3> Text=" "
|   |-ParamCommandComment 0x5575d02dc650 <col:4, col:80> [in] implicitly Param="delay" ParamIndex=9
|   | `-ParagraphComment 0x5575d02dc6e0 <col:16, col:80>
|   |   `-TextComment 0x5575d02dc6b0 <col:16, col:80> Text=" Scheduling delay (in milliseconds), or K_NO_WAIT (for no delay)."
|   |-ParagraphComment 0x5575d02dc730 <line:775:3>
|   | `-TextComment 0x5575d02dc700 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02dc750 <col:4, col:28> Name="return"
|   | `-ParagraphComment 0x5575d02dc7b0 <col:11, col:28>
|   |   `-TextComment 0x5575d02dc780 <col:11, col:28> Text=" ID of new thread."
|   `-ParagraphComment 0x5575d02dc880 <line:777:3, line:778:1>
|     |-TextComment 0x5575d02dc7d0 <line:777:3> Text=" "
|     |-InlineCommandComment 0x5575d02dc820 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-001"
|     `-TextComment 0x5575d02dc840 <line:778:1> Text=" "
|-FunctionDecl 0x5575d0232790 <line:795:1, line:797:18> line:795:27 k_thread_user_mode_enter 'void (k_thread_entry_t, void *, void *, void *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5575d0232428 <col:52, col:69> col:69 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5575d02324a8 <line:796:10, col:16> col:16 p1 'void *'
| |-ParmVarDecl 0x5575d0232528 <col:20, col:26> col:26 p2 'void *'
| |-ParmVarDecl 0x5575d02325a8 <line:797:10, col:16> col:16 p3 'void *'
| `-FullComment 0x5575d02dced0 <line:787:3, line:794:1>
|   |-ParagraphComment 0x5575d02dc9e0 <line:787:3>
|   | `-TextComment 0x5575d02dc9b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02dca00 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x5575d02dca60 <col:10, col:61>
|   |   `-TextComment 0x5575d02dca30 <col:10, col:61> Text=" Drop a thread's privileges permanently to user mode"
|   |-ParagraphComment 0x5575d02dcab0 <line:789:3>
|   | `-TextComment 0x5575d02dca80 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02dcad0 <col:4, line:790:3> [in] implicitly Param="entry" ParamIndex=0
|   | `-ParagraphComment 0x5575d02dcb80 <line:789:16, line:790:3>
|   |   |-TextComment 0x5575d02dcb30 <line:789:16, col:48> Text=" Function to start executing from"
|   |   `-TextComment 0x5575d02dcb50 <line:790:3> Text=" "
|   |-ParamCommandComment 0x5575d02dcba0 <col:4, line:791:3> [in] implicitly Param="p1" ParamIndex=1
|   | `-ParagraphComment 0x5575d02dcc50 <line:790:13, line:791:3>
|   |   |-TextComment 0x5575d02dcc00 <line:790:13, col:38> Text=" 1st entry point parameter"
|   |   `-TextComment 0x5575d02dcc20 <line:791:3> Text=" "
|   |-ParamCommandComment 0x5575d02dcc70 <col:4, line:792:3> [in] implicitly Param="p2" ParamIndex=2
|   | `-ParagraphComment 0x5575d02dcd20 <line:791:13, line:792:3>
|   |   |-TextComment 0x5575d02dccd0 <line:791:13, col:38> Text=" 2nd entry point parameter"
|   |   `-TextComment 0x5575d02dccf0 <line:792:3> Text=" "
|   `-ParamCommandComment 0x5575d02dcd40 <col:4, line:794:1> [in] implicitly Param="p3" ParamIndex=3
|     `-ParagraphComment 0x5575d02dce70 <line:792:13, line:794:1>
|       |-TextComment 0x5575d02dcda0 <line:792:13, col:38> Text=" 3rd entry point parameter"
|       |-TextComment 0x5575d02dcdc0 <line:793:3> Text=" "
|       |-InlineCommandComment 0x5575d02dce10 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-003"
|       `-TextComment 0x5575d02dce30 <line:794:1> Text=" "
|-FunctionDecl 0x5575d0233aa0 <line:831:1, line:835:1> line:831:20 k_thread_resource_pool_assign 'void (struct k_thread *, struct k_mem_pool *)' static inline
| |-ParmVarDecl 0x5575d02328d0 <col:50, col:67> col:67 used thread 'struct k_thread *'
| |-ParmVarDecl 0x5575d0232960 <line:832:8, col:27> col:27 used pool 'struct k_mem_pool *'
| |-CompoundStmt 0x5575d0233c38 <line:833:1, line:835:1>
| | `-BinaryOperator 0x5575d0233bf0 <line:834:2, col:26> 'struct k_mem_pool *' '='
| |   |-MemberExpr 0x5575d0233b88 <col:2, col:10> 'struct k_mem_pool *' lvalue ->resource_pool 0x5575d0230d68
| |   | `-ImplicitCastExpr 0x5575d0233b70 <col:2> 'struct k_thread *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5575d0233b50 <col:2> 'struct k_thread *' lvalue ParmVar 0x5575d02328d0 'thread' 'struct k_thread *'
| |   `-ImplicitCastExpr 0x5575d0233bd8 <col:26> 'struct k_mem_pool *' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d0233bb8 <col:26> 'struct k_mem_pool *' lvalue ParmVar 0x5575d0232960 'pool' 'struct k_mem_pool *'
| `-FullComment 0x5575d02dd400 <line:817:3, line:830:1>
|   |-ParagraphComment 0x5575d02dcf70 <line:817:3>
|   | `-TextComment 0x5575d02dcf40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02dcf90 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5575d02dcff0 <col:10, col:51>
|   |   `-TextComment 0x5575d02dcfc0 <col:10, col:51> Text=" Assign a resource memory pool to a thread"
|   |-ParagraphComment 0x5575d02dd090 <line:819:3, line:821:51>
|   | |-TextComment 0x5575d02dd010 <line:819:3, col:73> Text=" By default, threads have no resource pool assigned unless their parent"
|   | |-TextComment 0x5575d02dd030 <line:820:3, col:70> Text=" thread has a resource pool, in which case it is inherited. Multiple"
|   | `-TextComment 0x5575d02dd050 <line:821:3, col:51> Text=" threads may be assigned to the same memory pool."
|   |-ParagraphComment 0x5575d02dd100 <line:823:3, line:824:17>
|   | |-TextComment 0x5575d02dd0b0 <line:823:3, col:74> Text=" Changing a thread's resource pool will not migrate allocations from the"
|   | `-TextComment 0x5575d02dd0d0 <line:824:3, col:17> Text=" previous pool."
|   |-ParagraphComment 0x5575d02dd150 <line:826:3>
|   | `-TextComment 0x5575d02dd120 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02dd170 <col:4, line:828:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5575d02dd250 <line:826:17, line:828:3>
|   |   |-TextComment 0x5575d02dd1d0 <line:826:17, col:77> Text=" Target thread to assign a memory pool for resource requests,"
|   |   |-TextComment 0x5575d02dd1f0 <line:827:3, col:75> Text="               or NULL if the thread should no longer have a memory pool."
|   |   `-TextComment 0x5575d02dd210 <line:828:3> Text=" "
|   `-ParamCommandComment 0x5575d02dd270 <col:4, line:830:1> [in] implicitly Param="pool" ParamIndex=1
|     `-ParagraphComment 0x5575d02dd3a0 <line:828:15, line:830:1>
|       |-TextComment 0x5575d02dd2d0 <line:828:15, col:48> Text=" Memory pool to use for resources."
|       |-TextComment 0x5575d02dd2f0 <line:829:3> Text=" "
|       |-InlineCommandComment 0x5575d02dd340 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-005"
|       `-TextComment 0x5575d02dd360 <line:830:1> Text=" "
|-FunctionDecl 0x5575d0233d70 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:864:33> col:17 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5575d0233c60 <col:25, col:31> col:31 ms 's32_t':'int'
| `-FullComment 0x5575d02dd8c0 <line:855:3, line:862:63>
|   |-ParagraphComment 0x5575d02dd4a0 <line:855:3>
|   | `-TextComment 0x5575d02dd470 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02dd4c0 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d02dd520 <col:10, col:42>
|   |   `-TextComment 0x5575d02dd4f0 <col:10, col:42> Text=" Put the current thread to sleep."
|   |-ParagraphComment 0x5575d02dd5f0 <line:857:3, col:78>
|   | |-TextComment 0x5575d02dd540 <col:3, col:53> Text=" This routine puts the current thread to sleep for "
|   | |-InlineCommandComment 0x5575d02dd590 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="duration"
|   | `-TextComment 0x5575d02dd5b0 <col:65, col:78> Text=" milliseconds."
|   |-ParagraphComment 0x5575d02dd640 <line:859:3>
|   | `-TextComment 0x5575d02dd610 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02dd660 <col:4, col:45> [in] implicitly Param="ms" ParamIndex=0
|   | `-ParagraphComment 0x5575d02dd6f0 <col:13, col:45>
|   |   `-TextComment 0x5575d02dd6c0 <col:13, col:45> Text=" Number of milliseconds to sleep."
|   |-ParagraphComment 0x5575d02dd740 <line:861:3>
|   | `-TextComment 0x5575d02dd710 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02dd760 <col:4, line:862:63> Name="return"
|     `-ParagraphComment 0x5575d02dd860 <line:861:11, line:862:63>
|       |-TextComment 0x5575d02dd790 <line:861:11, col:79> Text=" Zero if the requested time has elapsed or the number of milliseconds"
|       |-TextComment 0x5575d02dd7b0 <line:862:3, col:44> Text=" left to sleep, if thread was woken up by "
|       |-InlineCommandComment 0x5575d02dd800 <col:45, col:48> Name="ref" RenderNormal Arg[0]="k_wakeup"
|       `-TextComment 0x5575d02dd820 <col:58, col:63> Text=" call."
|-FunctionDecl 0x5575d0233ee8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:880:34> col:17 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5575d0233e58 <col:26, col:32> col:32 us 's32_t':'int'
| `-FullComment 0x5575d02ddda0 <line:867:3, line:878:63>
|   |-ParagraphComment 0x5575d02dd960 <line:867:3>
|   | `-TextComment 0x5575d02dd930 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02dd980 <col:4, col:70> Name="brief"
|   | `-ParagraphComment 0x5575d02dd9e0 <col:10, col:70>
|   |   `-TextComment 0x5575d02dd9b0 <col:10, col:70> Text=" Put the current thread to sleep with microsecond resolution."
|   |-ParagraphComment 0x5575d02ddad0 <line:869:3, line:873:71>
|   | |-TextComment 0x5575d02dda00 <line:869:3, col:71> Text=" This function is unlikely to work as expected without kernel tuning."
|   | |-TextComment 0x5575d02dda20 <line:870:3, col:71> Text=" In particular, because the lower bound on the duration of a sleep is"
|   | |-TextComment 0x5575d02dda40 <line:871:3, col:74> Text=" the duration of a tick, CONFIG_SYS_CLOCK_TICKS_PER_SEC must be adjusted"
|   | |-TextComment 0x5575d02dda60 <line:872:3, col:73> Text=" to achieve the resolution desired. The implications of doing this must"
|   | `-TextComment 0x5575d02dda80 <line:873:3, col:71> Text=" be understood before attempting to use k_usleep(). Use with caution."
|   |-ParagraphComment 0x5575d02ddb20 <line:875:3>
|   | `-TextComment 0x5575d02ddaf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ddb40 <col:4, col:45> [in] implicitly Param="us" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ddbd0 <col:13, col:45>
|   |   `-TextComment 0x5575d02ddba0 <col:13, col:45> Text=" Number of microseconds to sleep."
|   |-ParagraphComment 0x5575d02ddc20 <line:877:3>
|   | `-TextComment 0x5575d02ddbf0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ddc40 <col:4, line:878:63> Name="return"
|     `-ParagraphComment 0x5575d02ddd40 <line:877:11, line:878:63>
|       |-TextComment 0x5575d02ddc70 <line:877:11, col:79> Text=" Zero if the requested time has elapsed or the number of microseconds"
|       |-TextComment 0x5575d02ddc90 <line:878:3, col:44> Text=" left to sleep, if thread was woken up by "
|       |-InlineCommandComment 0x5575d02ddce0 <col:45, col:48> Name="ref" RenderNormal Arg[0]="k_wakeup"
|       `-TextComment 0x5575d02ddd00 <col:58, col:63> Text=" call."
|-FunctionDecl 0x5575d0234090 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:890:46> col:16 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x5575d0233fc8 <col:28, col:34> col:34 usec_to_wait 'u32_t':'unsigned int'
| `-FullComment 0x5575d02de0d0 <line:883:3, line:888:14>
|   |-ParagraphComment 0x5575d02dde40 <line:883:3>
|   | `-TextComment 0x5575d02dde10 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02dde60 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5575d02ddec0 <col:10, col:48>
|   |   `-TextComment 0x5575d02dde90 <col:10, col:48> Text=" Cause the current thread to busy wait."
|   |-ParagraphComment 0x5575d02ddfb0 <line:885:3, line:886:32>
|   | |-TextComment 0x5575d02ddee0 <line:885:3, col:76> Text=" This routine causes the current thread to execute a "do nothing" loop for"
|   | |-TextComment 0x5575d02ddf00 <line:886:3> Text=" "
|   | |-InlineCommandComment 0x5575d02ddf50 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="usec_to_wait"
|   | `-TextComment 0x5575d02ddf70 <col:19, col:32> Text=" microseconds."
|   |-ParagraphComment 0x5575d02de000 <line:888:3>
|   | `-TextComment 0x5575d02ddfd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02de020 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02de080 <col:11, col:14>
|       `-TextComment 0x5575d02de050 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0234200 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:902:28> col:16 k_yield 'void (void)' static inline
| `-FullComment 0x5575d02de450 <line:893:3, line:901:1>
|   |-ParagraphComment 0x5575d02de170 <line:893:3>
|   | `-TextComment 0x5575d02de140 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02de190 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5575d02de1f0 <col:10, col:35>
|   |   `-TextComment 0x5575d02de1c0 <col:10, col:35> Text=" Yield the current thread."
|   |-ParagraphComment 0x5575d02de290 <line:895:3, line:897:67>
|   | |-TextComment 0x5575d02de210 <line:895:3, col:71> Text=" This routine causes the current thread to yield execution to another"
|   | |-TextComment 0x5575d02de230 <line:896:3, col:77> Text=" thread of the same or higher priority. If there are no other ready threads"
|   | `-TextComment 0x5575d02de250 <line:897:3, col:67> Text=" of the same or higher priority, the routine returns immediately."
|   |-ParagraphComment 0x5575d02de2e0 <line:899:3>
|   | `-TextComment 0x5575d02de2b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02de300 <col:4, line:901:1> Name="return"
|     `-ParagraphComment 0x5575d02de400 <line:899:11, line:901:1>
|       |-TextComment 0x5575d02de330 <line:899:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02de350 <line:900:3> Text=" "
|       |-InlineCommandComment 0x5575d02de3a0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-015"
|       `-TextComment 0x5575d02de3c0 <line:901:1> Text=" "
|-FunctionDecl 0x5575d02343e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:916:39> col:16 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d02342d8 <col:25, col:33> col:33 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d02dea00 <line:905:3, line:915:1>
|   |-ParagraphComment 0x5575d02de4f0 <line:905:3>
|   | `-TextComment 0x5575d02de4c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02de510 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5575d02de590 <col:10, col:36>
|   |   `-TextComment 0x5575d02de540 <col:10, col:36> Text=" Wake up a sleeping thread."
|   |-ParagraphComment 0x5575d02de660 <line:907:3, col:61>
|   | |-TextComment 0x5575d02de5b0 <col:3, col:37> Text=" This routine prematurely wakes up "
|   | |-InlineCommandComment 0x5575d02de600 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5575d02de620 <col:47, col:61> Text=" from sleeping."
|   |-ParagraphComment 0x5575d02de730 <line:909:3, col:69>
|   | |-TextComment 0x5575d02de680 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5575d02de6d0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5575d02de6f0 <col:16, col:69> Text=" is not currently sleeping, the routine has no effect."
|   |-ParagraphComment 0x5575d02de780 <line:911:3>
|   | `-TextComment 0x5575d02de750 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02de7a0 <col:4, col:38> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5575d02de830 <col:17, col:38>
|   |   `-TextComment 0x5575d02de800 <col:17, col:38> Text=" ID of thread to wake."
|   |-ParagraphComment 0x5575d02de880 <line:913:3>
|   | `-TextComment 0x5575d02de850 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02de8a0 <col:4, line:915:1> Name="return"
|     `-ParagraphComment 0x5575d02de9a0 <line:913:11, line:915:1>
|       |-TextComment 0x5575d02de8d0 <line:913:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02de8f0 <line:914:3> Text=" "
|       |-InlineCommandComment 0x5575d02de940 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-014"
|       `-TextComment 0x5575d02de960 <line:915:1> Text=" "
|-FunctionDecl 0x5575d02345b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:925:37> col:19 k_current_get 'k_tid_t (void)' static inline
| `-FullComment 0x5575d02ded10 <line:919:3, line:924:1>
|   |-ParagraphComment 0x5575d02deaa0 <line:919:3>
|   | `-TextComment 0x5575d02dea70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02deac0 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5575d02deb20 <col:10, col:46>
|   |   `-TextComment 0x5575d02deaf0 <col:10, col:46> Text=" Get thread ID of the current thread."
|   |-ParagraphComment 0x5575d02deb70 <line:921:3>
|   | `-TextComment 0x5575d02deb40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02deb90 <col:4, col:32> Name="return"
|   | `-ParagraphComment 0x5575d02debf0 <col:11, col:32>
|   |   `-TextComment 0x5575d02debc0 <col:11, col:32> Text=" ID of current thread."
|   `-ParagraphComment 0x5575d02decc0 <line:923:3, line:924:1>
|     |-TextComment 0x5575d02dec10 <line:923:3> Text=" "
|     |-InlineCommandComment 0x5575d02dec60 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-013"
|     `-TextComment 0x5575d02dec80 <line:924:1> Text=" "
|-FunctionDecl 0x5575d0234718 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:942:45> col:16 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d0234688 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d02df290 <line:928:3, line:941:1>
|   |-ParagraphComment 0x5575d02dedb0 <line:928:3>
|   | `-TextComment 0x5575d02ded80 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02dedd0 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x5575d02dee30 <col:10, col:25>
|   |   `-TextComment 0x5575d02dee00 <col:10, col:25> Text=" Abort a thread."
|   |-ParagraphComment 0x5575d02defc0 <line:930:3, line:935:38>
|   | |-TextComment 0x5575d02dee50 <line:930:3, col:47> Text=" This routine permanently stops execution of "
|   | |-InlineCommandComment 0x5575d02deea0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="thread."
|   | |-TextComment 0x5575d02deec0 <col:58, col:77> Text=" The thread is taken"
|   | |-TextComment 0x5575d02deee0 <line:931:3, col:73> Text=" off all kernel queues it is part of (i.e. the ready queue, the timeout"
|   | |-TextComment 0x5575d02def00 <line:932:3, col:75> Text=" queue, or a kernel object wait queue). However, any kernel resources the"
|   | |-TextComment 0x5575d02def20 <line:933:3, col:72> Text=" thread might currently own (such as mutexes or memory blocks) are not"
|   | |-TextComment 0x5575d02def40 <line:934:3, col:77> Text=" released. It is the responsibility of the caller of this routine to ensure"
|   | `-TextComment 0x5575d02def60 <line:935:3, col:38> Text=" all necessary cleanup is performed."
|   |-ParagraphComment 0x5575d02df010 <line:937:3>
|   | `-TextComment 0x5575d02defe0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02df030 <col:4, col:39> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5575d02df0c0 <col:17, col:39>
|   |   `-TextComment 0x5575d02df090 <col:17, col:39> Text=" ID of thread to abort."
|   |-ParagraphComment 0x5575d02df110 <line:939:3>
|   | `-TextComment 0x5575d02df0e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02df130 <col:4, line:941:1> Name="return"
|     `-ParagraphComment 0x5575d02df230 <line:939:11, line:941:1>
|       |-TextComment 0x5575d02df160 <line:939:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02df180 <line:940:3> Text=" "
|       |-InlineCommandComment 0x5575d02df1d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-012"
|       `-TextComment 0x5575d02df1f0 <line:941:1> Text=" "
|-FunctionDecl 0x5575d0234888 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:955:45> col:16 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d02347f8 <col:31, col:39> col:39 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d02df640 <line:946:3, line:954:1>
|   |-ParagraphComment 0x5575d02df330 <line:946:3>
|   | `-TextComment 0x5575d02df300 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02df350 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5575d02df3b0 <col:10, col:34>
|   |   `-TextComment 0x5575d02df380 <col:10, col:34> Text=" Start an inactive thread"
|   |-ParagraphComment 0x5575d02df450 <line:948:3, line:950:9>
|   | |-TextComment 0x5575d02df3d0 <line:948:3, col:73> Text=" If a thread was created with K_FOREVER in the delay parameter, it will"
|   | |-TextComment 0x5575d02df3f0 <line:949:3, col:69> Text=" not be added to the scheduling queue until this function is called"
|   | `-TextComment 0x5575d02df410 <line:950:3, col:9> Text=" on it."
|   |-ParagraphComment 0x5575d02df4a0 <line:952:3>
|   | `-TextComment 0x5575d02df470 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d02df4c0 <col:4, line:954:1> [in] implicitly Param="thread" ParamIndex=0
|     `-ParagraphComment 0x5575d02df5f0 <line:952:17, line:954:1>
|       |-TextComment 0x5575d02df520 <line:952:17, col:32> Text=" thread to start"
|       |-TextComment 0x5575d02df540 <line:953:3> Text=" "
|       |-InlineCommandComment 0x5575d02df590 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-011"
|       `-TextComment 0x5575d02df5b0 <line:954:1> Text=" "
|-RecordDecl 0x5575d0234958 <line:964:1, line:977:1> line:964:8 struct _static_thread_data definition
| |-FieldDecl 0x5575d0234a50 <line:965:2, col:19> col:19 init_thread 'struct k_thread *'
| |-FieldDecl 0x5575d0234ab0 <line:966:2, col:20> col:20 init_stack 'k_thread_stack_t *'
| |-FieldDecl 0x5575d0234b18 <line:967:2, col:15> col:15 init_stack_size 'unsigned int'
| |-FieldDecl 0x5575d0234b78 <line:968:2, col:19> col:19 init_entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-FieldDecl 0x5575d0234be0 <line:969:2, col:8> col:8 init_p1 'void *'
| |-FieldDecl 0x5575d0234c48 <line:970:2, col:8> col:8 init_p2 'void *'
| |-FieldDecl 0x5575d0234cb0 <line:971:2, col:8> col:8 init_p3 'void *'
| |-FieldDecl 0x5575d0234d18 <line:972:2, col:6> col:6 init_prio 'int'
| |-FieldDecl 0x5575d0234d78 <line:973:2, col:8> col:8 init_options 'u32_t':'unsigned int'
| |-FieldDecl 0x5575d0234dd8 <line:974:2, col:8> col:8 init_delay 's32_t':'int'
| |-FieldDecl 0x5575d0234ed0 <line:975:2, col:25> col:9 init_abort 'void (*)(void)'
| `-FieldDecl 0x5575d0234f38 <line:976:2, col:14> col:14 init_name 'const char *'
|-FunctionDecl 0x5575d0235138 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1053:51> col:15 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d0235028 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d02dfb30 <line:1044:3, line:1052:1>
|   |-ParagraphComment 0x5575d02df6e0 <line:1044:3>
|   | `-TextComment 0x5575d02df6b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02df700 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5575d02df760 <col:10, col:34>
|   |   `-TextComment 0x5575d02df730 <col:10, col:34> Text=" Get a thread's priority."
|   |-ParagraphComment 0x5575d02df800 <line:1046:3, col:39>
|   | |-TextComment 0x5575d02df780 <col:3, col:37> Text=" This routine gets the priority of "
|   | `-InlineCommandComment 0x5575d02df7d0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x5575d02df850 <line:1048:3>
|   | `-TextComment 0x5575d02df820 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02df870 <col:4, col:55> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5575d02df900 <col:17, col:55>
|   |   `-TextComment 0x5575d02df8d0 <col:17, col:55> Text=" ID of thread whose priority is needed."
|   |-ParagraphComment 0x5575d02df950 <line:1050:3>
|   | `-TextComment 0x5575d02df920 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02df970 <col:4, line:1052:1> Name="return"
|     `-ParagraphComment 0x5575d02dfad0 <line:1050:11, line:1052:1>
|       |-TextComment 0x5575d02df9a0 <line:1050:11, col:23> Text=" Priority of "
|       |-InlineCommandComment 0x5575d02df9f0 <col:24, col:25> Name="a" RenderEmphasized Arg[0]="thread."
|       |-TextComment 0x5575d02dfa10 <line:1051:3> Text=" "
|       |-InlineCommandComment 0x5575d02dfa60 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-009"
|       `-TextComment 0x5575d02dfa80 <line:1052:1> Text=" "
|-FunctionDecl 0x5575d02353b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1083:62> col:16 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5575d0235218 <col:38, col:46> col:46 thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5575d0235298 <col:54, col:58> col:58 prio 'int'
| `-FullComment 0x5575d02e04d0 <line:1056:3, line:1082:1>
|   |-ParagraphComment 0x5575d02dfbd0 <line:1056:3>
|   | `-TextComment 0x5575d02dfba0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02dfbf0 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5575d02dfc50 <col:10, col:34>
|   |   `-TextComment 0x5575d02dfc20 <col:10, col:34> Text=" Set a thread's priority."
|   |-ParagraphComment 0x5575d02dfcf0 <line:1058:3, col:54>
|   | |-TextComment 0x5575d02dfc70 <col:3, col:52> Text=" This routine immediately changes the priority of "
|   | `-InlineCommandComment 0x5575d02dfcc0 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread."
|   |-ParagraphComment 0x5575d02dfde0 <line:1060:3, line:1061:10>
|   | |-TextComment 0x5575d02dfd10 <line:1060:3, col:64> Text=" Rescheduling can occur immediately depending on the priority "
|   | |-InlineCommandComment 0x5575d02dfd60 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5575d02dfd80 <col:74, col:76> Text=" is"
|   | `-TextComment 0x5575d02dfda0 <line:1061:3, col:10> Text=" set to:"
|   |-ParagraphComment 0x5575d02dfed0 <line:1063:3, line:1064:75>
|   | |-TextComment 0x5575d02dfe00 <line:1063:3, col:71> Text=" - If its priority is raised above the priority of the caller of this"
|   | |-TextComment 0x5575d02dfe20 <line:1064:3, col:44> Text=" function, and the caller is preemptible, "
|   | |-InlineCommandComment 0x5575d02dfe70 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5575d02dfe90 <col:54, col:75> Text=" will be scheduled in."
|   |-ParagraphComment 0x5575d02dff70 <line:1066:3, line:1068:41>
|   | |-TextComment 0x5575d02dfef0 <line:1066:3, col:75> Text=" - If the caller operates on itself, it lowers its priority below that of"
|   | |-TextComment 0x5575d02dff10 <line:1067:3, col:76> Text=" other threads in the system, and the caller is preemptible, the thread of"
|   | `-TextComment 0x5575d02dff30 <line:1068:3, col:41> Text=" highest priority will be scheduled in."
|   |-ParagraphComment 0x5575d02e0010 <line:1070:3, line:1072:20>
|   | |-TextComment 0x5575d02dff90 <line:1070:3, col:74> Text=" Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to"
|   | |-TextComment 0x5575d02dffb0 <line:1071:3, col:76> Text=" CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the"
|   | `-TextComment 0x5575d02dffd0 <line:1072:3, col:20> Text=" highest priority."
|   |-ParagraphComment 0x5575d02e0060 <line:1074:3>
|   | `-TextComment 0x5575d02e0030 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e0080 <col:4, line:1075:3> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e0130 <line:1074:17, line:1075:3>
|   |   |-TextComment 0x5575d02e00e0 <line:1074:17, col:58> Text=" ID of thread whose priority is to be set."
|   |   `-TextComment 0x5575d02e0100 <line:1075:3> Text=" "
|   |-ParamCommandComment 0x5575d02e0150 <col:4, col:28> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x5575d02e01e0 <col:15, col:28>
|   |   `-TextComment 0x5575d02e01b0 <col:15, col:28> Text=" New priority."
|   |-ParagraphComment 0x5575d02e0230 <line:1077:3>
|   | `-TextComment 0x5575d02e0200 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e0250 <col:4, line:1078:57> Name="warning"
|   | `-ParagraphComment 0x5575d02e02d0 <line:1077:12, line:1078:57>
|   |   |-TextComment 0x5575d02e0280 <line:1077:12, col:73> Text=" Changing the priority of a thread currently involved in mutex"
|   |   `-TextComment 0x5575d02e02a0 <line:1078:3, col:57> Text=" priority inheritance may result in undefined behavior."
|   |-ParagraphComment 0x5575d02e0320 <line:1080:3>
|   | `-TextComment 0x5575d02e02f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e0340 <col:4, line:1082:1> Name="return"
|     `-ParagraphComment 0x5575d02e0440 <line:1080:11, line:1082:1>
|       |-TextComment 0x5575d02e0370 <line:1080:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02e0390 <line:1081:3> Text=" "
|       |-InlineCommandComment 0x5575d02e03e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-008"
|       `-TextComment 0x5575d02e0400 <line:1082:1> Text=" "
|-FunctionDecl 0x5575d0235528 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1213:47> col:16 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d0235498 <col:33, col:41> col:41 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d02e0bb0 <line:1196:3, line:1212:1>
|   |-ParagraphComment 0x5575d02e0570 <line:1196:3>
|   | `-TextComment 0x5575d02e0540 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e05a0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5575d02e0600 <col:10, col:27>
|   |   `-TextComment 0x5575d02e05d0 <col:10, col:27> Text=" Suspend a thread."
|   |-ParagraphComment 0x5575d02e0810 <line:1198:3, line:1204:48>
|   | |-TextComment 0x5575d02e0620 <line:1198:3, col:58> Text=" This routine prevents the kernel scheduler from making "
|   | |-InlineCommandComment 0x5575d02e0670 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5575d02e0690 <line:1199:3, col:56> Text=" the current thread. All other internal operations on "
|   | |-InlineCommandComment 0x5575d02e06e0 <col:57, col:58> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5575d02e0700 <col:66, col:69> Text=" are"
|   | |-TextComment 0x5575d02e0720 <line:1200:3, col:68> Text=" still performed; for example, kernel objects it is waiting on are"
|   | |-TextComment 0x5575d02e0740 <line:1201:3, col:55> Text=" still handed to it.  Note that any existing timeouts"
|   | |-TextComment 0x5575d02e0760 <line:1202:3, col:66> Text=" (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)"
|   | |-TextComment 0x5575d02e0780 <line:1203:3, col:62> Text=" will be canceled.  On resume, the thread will begin running"
|   | `-TextComment 0x5575d02e07a0 <line:1204:3, col:48> Text=" immediately and return from the blocked call."
|   |-ParagraphComment 0x5575d02e08e0 <line:1206:3, col:64>
|   | |-TextComment 0x5575d02e0830 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5575d02e0880 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5575d02e08a0 <col:16, col:64> Text=" is already suspended, the routine has no effect."
|   |-ParagraphComment 0x5575d02e0930 <line:1208:3>
|   | `-TextComment 0x5575d02e0900 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e0950 <col:4, col:41> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e09e0 <col:17, col:41>
|   |   `-TextComment 0x5575d02e09b0 <col:17, col:41> Text=" ID of thread to suspend."
|   |-ParagraphComment 0x5575d02e0a30 <line:1210:3>
|   | `-TextComment 0x5575d02e0a00 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e0a50 <col:4, line:1212:1> Name="return"
|     `-ParagraphComment 0x5575d02e0b50 <line:1210:11, line:1212:1>
|       |-TextComment 0x5575d02e0a80 <line:1210:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02e0aa0 <line:1211:3> Text=" "
|       |-InlineCommandComment 0x5575d02e0af0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-005"
|       `-TextComment 0x5575d02e0b10 <line:1212:1> Text=" "
|-FunctionDecl 0x5575d0235698 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1228:46> col:16 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d0235608 <col:32, col:40> col:40 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d02e1160 <line:1216:3, line:1227:1>
|   |-ParagraphComment 0x5575d02e0c50 <line:1216:3>
|   | `-TextComment 0x5575d02e0c20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e0c70 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5575d02e0cd0 <col:10, col:36>
|   |   `-TextComment 0x5575d02e0ca0 <col:10, col:36> Text=" Resume a suspended thread."
|   |-ParagraphComment 0x5575d02e0dc0 <line:1218:3, line:1219:50>
|   | |-TextComment 0x5575d02e0cf0 <line:1218:3, col:52> Text=" This routine allows the kernel scheduler to make "
|   | |-InlineCommandComment 0x5575d02e0d40 <col:53, col:54> Name="a" RenderEmphasized Arg[0]="thread"
|   | |-TextComment 0x5575d02e0d60 <col:62, col:73> Text=" the current"
|   | `-TextComment 0x5575d02e0d80 <line:1219:3, col:50> Text=" thread, when it is next eligible for that role."
|   |-ParagraphComment 0x5575d02e0e90 <line:1221:3, col:70>
|   | |-TextComment 0x5575d02e0de0 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5575d02e0e30 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="thread"
|   | `-TextComment 0x5575d02e0e50 <col:16, col:70> Text=" is not currently suspended, the routine has no effect."
|   |-ParagraphComment 0x5575d02e0ee0 <line:1223:3>
|   | `-TextComment 0x5575d02e0eb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e0f00 <col:4, col:40> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e0f90 <col:17, col:40>
|   |   `-TextComment 0x5575d02e0f60 <col:17, col:40> Text=" ID of thread to resume."
|   |-ParagraphComment 0x5575d02e0fe0 <line:1225:3>
|   | `-TextComment 0x5575d02e0fb0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e1000 <col:4, line:1227:1> Name="return"
|     `-ParagraphComment 0x5575d02e1100 <line:1225:11, line:1227:1>
|       |-TextComment 0x5575d02e1030 <line:1225:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02e1050 <line:1226:3> Text=" "
|       |-InlineCommandComment 0x5575d02e10a0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-006"
|       `-TextComment 0x5575d02e10c0 <line:1227:1> Text=" "
|-FunctionDecl 0x5575d0235910 <line:1258:1, col:57> col:13 k_sched_time_slice_set 'void (s32_t, int)' extern
| |-ParmVarDecl 0x5575d0235778 <col:36, col:42> col:42 slice 's32_t':'int'
| |-ParmVarDecl 0x5575d02357f8 <col:49, col:53> col:53 prio 'int'
| `-FullComment 0x5575d02e1ab0 <line:1231:3, line:1256:14>
|   |-ParagraphComment 0x5575d02e1200 <line:1231:3>
|   | `-TextComment 0x5575d02e11d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e1220 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02e1280 <col:10, col:44>
|   |   `-TextComment 0x5575d02e1250 <col:10, col:44> Text=" Set time-slicing period and scope."
|   |-ParagraphComment 0x5575d02e12f0 <line:1233:3, line:1234:23>
|   | |-TextComment 0x5575d02e12a0 <line:1233:3, col:72> Text=" This routine specifies how the scheduler will perform time slicing of"
|   | `-TextComment 0x5575d02e12c0 <line:1234:3, col:23> Text=" preemptible threads."
|   |-ParagraphComment 0x5575d02e14e0 <line:1236:3, line:1240:74>
|   | |-TextComment 0x5575d02e1310 <line:1236:3, col:27> Text=" To enable time slicing, "
|   | |-InlineCommandComment 0x5575d02e1360 <col:28, col:29> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x5575d02e1380 <col:36, col:67> Text=" must be non-zero. The scheduler"
|   | |-TextComment 0x5575d02e13a0 <line:1237:3, col:69> Text=" ensures that no thread runs for more than the specified time limit"
|   | |-TextComment 0x5575d02e13c0 <line:1238:3, col:71> Text=" before other threads of that priority are given a chance to execute."
|   | |-TextComment 0x5575d02e13e0 <line:1239:3, col:44> Text=" Any thread whose priority is higher than "
|   | |-InlineCommandComment 0x5575d02e1430 <col:45, col:46> Name="a" RenderEmphasized Arg[0]="prio"
|   | |-TextComment 0x5575d02e1450 <col:52, col:72> Text=" is exempted, and may"
|   | `-TextComment 0x5575d02e1470 <line:1240:3, col:74> Text=" execute as long as desired without being preempted due to time slicing."
|   |-ParagraphComment 0x5575d02e15a0 <line:1242:3, line:1245:32>
|   | |-TextComment 0x5575d02e1500 <line:1242:3, col:80> Text=" Time slicing only limits the maximum amount of time a thread may continuously"
|   | |-TextComment 0x5575d02e1520 <line:1243:3, col:74> Text=" execute. Once the scheduler selects a thread for execution, there is no"
|   | |-TextComment 0x5575d02e1540 <line:1244:3, col:79> Text=" minimum guaranteed time the thread will execute before threads of greater or"
|   | `-TextComment 0x5575d02e1560 <line:1245:3, col:32> Text=" equal priority are scheduled."
|   |-ParagraphComment 0x5575d02e1640 <line:1247:3, line:1249:46>
|   | |-TextComment 0x5575d02e15c0 <line:1247:3, col:68> Text=" When the current thread is the only one of that priority eligible"
|   | |-TextComment 0x5575d02e15e0 <line:1248:3, col:71> Text=" for execution, this routine has no effect; the thread is immediately"
|   | `-TextComment 0x5575d02e1600 <line:1249:3, col:46> Text=" rescheduled after the slice period expires."
|   |-ParagraphComment 0x5575d02e1790 <line:1251:3, col:65>
|   | |-TextComment 0x5575d02e1660 <col:3, col:36> Text=" To disable timeslicing, set both "
|   | |-InlineCommandComment 0x5575d02e16b0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="slice"
|   | |-TextComment 0x5575d02e16d0 <col:45, col:49> Text=" and "
|   | |-InlineCommandComment 0x5575d02e1720 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="prio"
|   | `-TextComment 0x5575d02e1740 <col:57, col:65> Text=" to zero."
|   |-ParagraphComment 0x5575d02e17e0 <line:1253:3>
|   | `-TextComment 0x5575d02e17b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e1800 <col:4, line:1254:3> [in] implicitly Param="slice" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e18b0 <line:1253:16, line:1254:3>
|   |   |-TextComment 0x5575d02e1860 <line:1253:16, col:60> Text=" Maximum time slice length (in milliseconds)."
|   |   `-TextComment 0x5575d02e1880 <line:1254:3> Text=" "
|   |-ParamCommandComment 0x5575d02e18d0 <col:4, col:71> [in] implicitly Param="prio" ParamIndex=1
|   | `-ParagraphComment 0x5575d02e1960 <col:15, col:71>
|   |   `-TextComment 0x5575d02e1930 <col:15, col:71> Text=" Highest thread priority level eligible for time slicing."
|   |-ParagraphComment 0x5575d02e19b0 <line:1256:3>
|   | `-TextComment 0x5575d02e1980 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e19d0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02e1a30 <col:11, col:14>
|       `-TextComment 0x5575d02e1a00 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0236c50 <line:1278:1, col:29> col:13 k_is_in_isr 'bool (void)' extern
| `-FullComment 0x5575d02e1ee0 <line:1268:3, line:1276:37>
|   |-ParagraphComment 0x5575d02e1b50 <line:1268:3>
|   | `-TextComment 0x5575d02e1b20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e1b70 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5575d02e1bd0 <col:10, col:58>
|   |   `-TextComment 0x5575d02e1ba0 <col:10, col:58> Text=" Determine if code is running at interrupt level."
|   |-ParagraphComment 0x5575d02e1c40 <line:1270:3, line:1271:36>
|   | |-TextComment 0x5575d02e1bf0 <line:1270:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x5575d02e1c10 <line:1271:3, col:36> Text=" whether it is a thread or an ISR."
|   |-ParagraphComment 0x5575d02e1c90 <line:1273:3>
|   | `-TextComment 0x5575d02e1c60 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e1cb0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02e1d10 <col:9, col:31>
|   |   `-TextComment 0x5575d02e1ce0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02e1d60 <line:1275:3>
|   | `-TextComment 0x5575d02e1d30 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e1d80 <col:4, line:1276:3> Name="return"
|   | `-ParagraphComment 0x5575d02e1e00 <line:1275:11, line:1276:3>
|   |   |-TextComment 0x5575d02e1db0 <line:1275:11, col:40> Text=" false if invoked by a thread."
|   |   `-TextComment 0x5575d02e1dd0 <line:1276:3> Text=" "
|   `-BlockCommandComment 0x5575d02e1e20 <col:4, col:37> Name="return"
|     `-ParagraphComment 0x5575d02e1e80 <col:11, col:37>
|       `-TextComment 0x5575d02e1e50 <col:11, col:37> Text=" true if invoked by an ISR."
|-FunctionDecl 0x5575d0236db8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1296:39> col:15 k_is_preempt_thread 'int (void)' static inline
| `-FullComment 0x5575d02e23f0 <line:1281:3, line:1294:55>
|   |-ParagraphComment 0x5575d02e1f80 <line:1281:3>
|   | `-TextComment 0x5575d02e1f50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e1fa0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5575d02e2000 <col:10, col:63>
|   |   `-TextComment 0x5575d02e1fd0 <col:10, col:63> Text=" Determine if code is running in a preemptible thread."
|   |-ParagraphComment 0x5575d02e20a0 <line:1283:3, line:1285:52>
|   | |-TextComment 0x5575d02e2020 <line:1283:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | |-TextComment 0x5575d02e2040 <line:1284:3, col:78> Text=" whether it can be preempted by another thread. The routine returns a 'true'"
|   | `-TextComment 0x5575d02e2060 <line:1285:3, col:52> Text=" value if all of the following conditions are met:"
|   |-ParagraphComment 0x5575d02e2140 <line:1287:3, line:1289:45>
|   | |-TextComment 0x5575d02e20c0 <line:1287:3, col:49> Text=" - The code is running in a thread, not at ISR."
|   | |-TextComment 0x5575d02e20e0 <line:1288:3, col:55> Text=" - The thread's priority is in the preemptible range."
|   | `-TextComment 0x5575d02e2100 <line:1289:3, col:45> Text=" - The thread has not locked the scheduler."
|   |-ParagraphComment 0x5575d02e2190 <line:1291:3>
|   | `-TextComment 0x5575d02e2160 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e21b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02e2210 <col:9, col:31>
|   |   `-TextComment 0x5575d02e21e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02e2260 <line:1293:3>
|   | `-TextComment 0x5575d02e2230 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e2280 <col:4, line:1294:3> Name="return"
|   | `-ParagraphComment 0x5575d02e2300 <line:1293:11, line:1294:3>
|   |   |-TextComment 0x5575d02e22b0 <line:1293:11, col:61> Text=" 0 if invoked by an ISR or by a cooperative thread."
|   |   `-TextComment 0x5575d02e22d0 <line:1294:3> Text=" "
|   `-BlockCommandComment 0x5575d02e2320 <col:4, col:55> Name="return"
|     `-ParagraphComment 0x5575d02e2380 <col:11, col:55>
|       `-TextComment 0x5575d02e2350 <col:11, col:55> Text=" Non-zero if invoked by a preemptible thread."
|-FunctionDecl 0x5575d0236f20 <line:1309:1, line:1314:1> line:1309:20 k_is_pre_kernel 'bool (void)' static inline
| |-CompoundStmt 0x5575d0237168 <line:1310:1, line:1314:1>
| | |-DeclStmt 0x5575d0237048 <line:1311:2, col:31>
| | | `-VarDecl 0x5575d0236fd0 parent 0x5575d007b488 <col:2, col:14> col:14 used z_sys_post_kernel 'bool' extern
| | `-ReturnStmt 0x5575d02370c8 <line:1313:2, col:10>
| |   `-ImplicitCastExpr 0x5575d02370b0 <col:9, col:10> 'bool' <IntegralToBoolean>
| |     `-UnaryOperator 0x5575d0237098 <col:9, col:10> 'int' prefix '!' cannot overflow
| |       `-ImplicitCastExpr 0x5575d0237080 <col:10> 'bool' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d0237060 <col:10> 'bool' lvalue Var 0x5575d0236fd0 'z_sys_post_kernel' 'bool'
| `-FullComment 0x5575d02e3230 <line:1299:3, line:1307:67>
|   |-ParagraphComment 0x5575d02e2490 <line:1299:3>
|   | `-TextComment 0x5575d02e2460 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e24b0 <col:4, col:64> Name="brief"
|   | `-ParagraphComment 0x5575d02e2510 <col:10, col:64>
|   |   `-TextComment 0x5575d02e24e0 <col:10, col:64> Text=" Test whether startup is in the before-main-task phase."
|   |-ParagraphComment 0x5575d02e2580 <line:1301:3, line:1302:62>
|   | |-TextComment 0x5575d02e2530 <line:1301:3, col:72> Text=" This routine allows the caller to customize its actions, depending on"
|   | `-TextComment 0x5575d02e2550 <line:1302:3, col:62> Text=" whether it being invoked before the kernel is fully active."
|   |-ParagraphComment 0x5575d02e2fe0 <line:1304:3>
|   | `-TextComment 0x5575d02e2fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e3000 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02e3060 <col:9, col:31>
|   |   `-TextComment 0x5575d02e3030 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02e30b0 <line:1306:3>
|   | `-TextComment 0x5575d02e3080 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e30d0 <col:4, line:1307:3> Name="return"
|   | `-ParagraphComment 0x5575d02e3150 <line:1306:11, line:1307:3>
|   |   |-TextComment 0x5575d02e3100 <line:1306:11, col:60> Text=" true if invoked before post-kernel initialization"
|   |   `-TextComment 0x5575d02e3120 <line:1307:3> Text=" "
|   `-BlockCommandComment 0x5575d02e3170 <col:4, col:67> Name="return"
|     `-ParagraphComment 0x5575d02e31d0 <col:11, col:67>
|       `-TextComment 0x5575d02e31a0 <col:11, col:67> Text=" false if invoked during/after post-kernel initialization"
|-FunctionDecl 0x5575d0237220 <line:1343:1, col:30> col:13 k_sched_lock 'void (void)' extern
| `-FullComment 0x5575d02e3700 <line:1326:3, line:1341:14>
|   |-ParagraphComment 0x5575d02e32d0 <line:1326:3>
|   | `-TextComment 0x5575d02e32a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e32f0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5575d02e3350 <col:10, col:29>
|   |   `-TextComment 0x5575d02e3320 <col:10, col:29> Text=" Lock the scheduler."
|   |-ParagraphComment 0x5575d02e3440 <line:1328:3, line:1332:78>
|   | |-TextComment 0x5575d02e3370 <line:1328:3, col:75> Text=" This routine prevents the current thread from being preempted by another"
|   | |-TextComment 0x5575d02e3390 <line:1329:3, col:75> Text=" thread by instructing the scheduler to treat it as a cooperative thread."
|   | |-TextComment 0x5575d02e33b0 <line:1330:3, col:74> Text=" If the thread subsequently performs an operation that makes it unready,"
|   | |-TextComment 0x5575d02e33d0 <line:1331:3, col:72> Text=" it will be context switched out in the normal manner. When the thread"
|   | `-TextComment 0x5575d02e33f0 <line:1332:3, col:78> Text=" again becomes the current thread, its non-preemptible status is maintained."
|   |-ParagraphComment 0x5575d02e3490 <line:1334:3, col:42>
|   | `-TextComment 0x5575d02e3460 <col:3, col:42> Text=" This routine can be called recursively."
|   |-ParagraphComment 0x5575d02e34e0 <line:1336:3>
|   | `-TextComment 0x5575d02e34b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e3500 <col:4, line:1339:68> Name="note"
|   | `-ParagraphComment 0x5575d02e35d0 <line:1336:9, line:1339:68>
|   |   |-TextComment 0x5575d02e3530 <line:1336:9, col:68> Text=" k_sched_lock() and k_sched_unlock() should normally be used"
|   |   |-TextComment 0x5575d02e3550 <line:1337:3, col:72> Text=" when the operation being performed can be safely interrupted by ISRs."
|   |   |-TextComment 0x5575d02e3570 <line:1338:3, col:70> Text=" However, if the amount of processing involved is very small, better"
|   |   `-TextComment 0x5575d02e3590 <line:1339:3, col:68> Text=" performance may be obtained by using irq_lock() and irq_unlock()."
|   |-ParagraphComment 0x5575d02e3620 <line:1341:3>
|   | `-TextComment 0x5575d02e35f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e3640 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02e36a0 <col:11, col:14>
|       `-TextComment 0x5575d02e3670 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0237380 <line:1354:1, col:32> col:13 k_sched_unlock 'void (void)' extern
| `-FullComment 0x5575d02e39e0 <line:1346:3, line:1352:14>
|   |-ParagraphComment 0x5575d02e37a0 <line:1346:3>
|   | `-TextComment 0x5575d02e3770 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e37c0 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5575d02e3820 <col:10, col:31>
|   |   `-TextComment 0x5575d02e37f0 <col:10, col:31> Text=" Unlock the scheduler."
|   |-ParagraphComment 0x5575d02e38c0 <line:1348:3, line:1350:41>
|   | |-TextComment 0x5575d02e3840 <line:1348:3, col:73> Text=" This routine reverses the effect of a previous call to k_sched_lock()."
|   | |-TextComment 0x5575d02e3860 <line:1349:3, col:77> Text=" A thread must call the routine once for each time it called k_sched_lock()"
|   | `-TextComment 0x5575d02e3880 <line:1350:3, col:41> Text=" before the thread becomes preemptible."
|   |-ParagraphComment 0x5575d02e3910 <line:1352:3>
|   | `-TextComment 0x5575d02e38e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e3930 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02e3990 <col:11, col:14>
|       `-TextComment 0x5575d02e3960 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d02374f0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1371:52> col:16 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x5575d0237460 <col:41, col:47> col:47 value 'void *'
| `-FullComment 0x5575d02e3f50 <line:1357:3, line:1370:1>
|   |-ParagraphComment 0x5575d02e3a80 <line:1357:3>
|   | `-TextComment 0x5575d02e3a50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e3aa0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02e3b00 <col:10, col:43>
|   |   `-TextComment 0x5575d02e3ad0 <col:10, col:43> Text=" Set current thread's custom data."
|   |-ParagraphComment 0x5575d02e3ba0 <line:1359:3, col:71>
|   | |-TextComment 0x5575d02e3b20 <col:3, col:63> Text=" This routine sets the custom data for the current thread to "
|   | |-TextComment 0x5575d02e3b40 <col:64> Text="@"
|   | `-TextComment 0x5575d02e3b60 <col:65, col:71> Text=" value."
|   |-ParagraphComment 0x5575d02e3c40 <line:1361:3, line:1363:44>
|   | |-TextComment 0x5575d02e3bc0 <line:1361:3, col:72> Text=" Custom data is not used by the kernel itself, and is freely available"
|   | |-TextComment 0x5575d02e3be0 <line:1362:3, col:68> Text=" for a thread to use as it sees fit. It can be used as a framework"
|   | `-TextComment 0x5575d02e3c00 <line:1363:3, col:44> Text=" upon which to build thread-local storage."
|   |-ParagraphComment 0x5575d02e3c90 <line:1365:3>
|   | `-TextComment 0x5575d02e3c60 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e3cb0 <col:4, col:38> [in] implicitly Param="value" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e3d40 <col:16, col:38>
|   |   `-TextComment 0x5575d02e3d10 <col:16, col:38> Text=" New custom data value."
|   |-ParagraphComment 0x5575d02e3d90 <line:1367:3>
|   | `-TextComment 0x5575d02e3d60 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e3db0 <col:4, col:14> Name="return"
|   | `-ParagraphComment 0x5575d02e3e10 <col:11, col:14>
|   |   `-TextComment 0x5575d02e3de0 <col:11, col:14> Text=" N/A"
|   `-ParagraphComment 0x5575d02e3ee0 <line:1369:3, line:1370:1>
|     |-TextComment 0x5575d02e3e30 <line:1369:3> Text=" "
|     |-InlineCommandComment 0x5575d02e3e80 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-016"
|     `-TextComment 0x5575d02e3ea0 <line:1370:1> Text=" "
|-FunctionDecl 0x5575d0237698 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1381:46> col:17 k_thread_custom_data_get 'void *(void)' static inline
| `-FullComment 0x5575d02e4280 <line:1374:3, line:1380:1>
|   |-ParagraphComment 0x5575d02e3ff0 <line:1374:3>
|   | `-TextComment 0x5575d02e3fc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e4010 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02e4070 <col:10, col:43>
|   |   `-TextComment 0x5575d02e4040 <col:10, col:43> Text=" Get current thread's custom data."
|   |-ParagraphComment 0x5575d02e40c0 <line:1376:3, col:63>
|   | `-TextComment 0x5575d02e4090 <col:3, col:63> Text=" This routine returns the custom data for the current thread."
|   |-ParagraphComment 0x5575d02e4110 <line:1378:3>
|   | `-TextComment 0x5575d02e40e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e4130 <col:4, line:1380:1> Name="return"
|     `-ParagraphComment 0x5575d02e4230 <line:1378:11, line:1380:1>
|       |-TextComment 0x5575d02e4160 <line:1378:11, col:37> Text=" Current custom data value."
|       |-TextComment 0x5575d02e4180 <line:1379:3> Text=" "
|       |-InlineCommandComment 0x5575d02e41d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-THREAD-007"
|       `-TextComment 0x5575d02e41f0 <line:1380:1> Text=" "
|-FunctionDecl 0x5575d0237918 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1396:69> col:15 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x5575d0237778 <col:33, col:41> col:41 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5575d02377f8 <col:52, col:64> col:64 value 'const char *'
| `-FullComment 0x5575d02e48d0 <line:1384:3, line:1394:39>
|   |-ParagraphComment 0x5575d02e4320 <line:1384:3>
|   | `-TextComment 0x5575d02e42f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e4340 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5575d02e43a0 <col:10, col:33>
|   |   `-TextComment 0x5575d02e4370 <col:10, col:33> Text=" Set current thread name"
|   |-ParagraphComment 0x5575d02e4410 <line:1386:3, line:1387:25>
|   | |-TextComment 0x5575d02e43c0 <line:1386:3, col:75> Text=" Set the name of the thread to be used when THREAD_MONITOR is enabled for"
|   | `-TextComment 0x5575d02e43e0 <line:1387:3, col:25> Text=" tracing and debugging."
|   |-ParagraphComment 0x5575d02e4460 <line:1389:3>
|   | `-TextComment 0x5575d02e4430 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e4480 <col:4, line:1390:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e4530 <line:1389:20, line:1390:3>
|   |   |-TextComment 0x5575d02e44e0 <line:1389:20, col:73> Text=" Thread to set name, or NULL to set the current thread"
|   |   `-TextComment 0x5575d02e4500 <line:1390:3> Text=" "
|   |-ParamCommandComment 0x5575d02e4550 <col:4, line:1391:3> [in] implicitly Param="value" ParamIndex=1
|   | `-ParagraphComment 0x5575d02e4600 <line:1390:16, line:1391:3>
|   |   |-TextComment 0x5575d02e45b0 <line:1390:16, col:27> Text=" Name string"
|   |   `-TextComment 0x5575d02e45d0 <line:1391:3> Text=" "
|   |-BlockCommandComment 0x5575d02e4620 <col:4, line:1392:3> Name="retval"
|   | `-ParagraphComment 0x5575d02e46a0 <line:1391:11, line:1392:3>
|   |   |-TextComment 0x5575d02e4650 <line:1391:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d02e4670 <line:1392:3> Text=" "
|   |-BlockCommandComment 0x5575d02e46c0 <col:4, line:1393:3> Name="retval"
|   | `-ParagraphComment 0x5575d02e4740 <line:1392:11, line:1393:3>
|   |   |-TextComment 0x5575d02e46f0 <line:1392:11, col:59> Text=" -EFAULT Memory access error with supplied string"
|   |   `-TextComment 0x5575d02e4710 <line:1393:3> Text=" "
|   |-BlockCommandComment 0x5575d02e4760 <col:4, line:1394:3> Name="retval"
|   | `-ParagraphComment 0x5575d02e47e0 <line:1393:11, line:1394:3>
|   |   |-TextComment 0x5575d02e4790 <line:1393:11, col:63> Text=" -ENOSYS Thread name configuration option not enabled"
|   |   `-TextComment 0x5575d02e47b0 <line:1394:3> Text=" "
|   `-BlockCommandComment 0x5575d02e4800 <col:4, col:39> Name="retval"
|     `-ParagraphComment 0x5575d02e4860 <col:11, col:39>
|       `-TextComment 0x5575d02e4830 <col:11, col:39> Text=" -EINVAL Thread name too long"
|-FunctionDecl 0x5575d0238370 <line:1406:1, col:48> col:13 k_thread_name_get 'const char *(k_tid_t)'
| |-ParmVarDecl 0x5575d0237a08 <col:31, col:39> col:39 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d02e4c30 <line:1399:3, line:1404:60>
|   |-ParagraphComment 0x5575d02e4970 <line:1399:3>
|   | `-TextComment 0x5575d02e4940 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e4990 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x5575d02e49f0 <col:10, col:25>
|   |   `-TextComment 0x5575d02e49c0 <col:10, col:25> Text=" Get thread name"
|   |-ParagraphComment 0x5575d02e4a40 <line:1401:3, col:27>
|   | `-TextComment 0x5575d02e4a10 <col:3, col:27> Text=" Get the name of a thread"
|   |-ParagraphComment 0x5575d02e4a90 <line:1403:3>
|   | `-TextComment 0x5575d02e4a60 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e4ab0 <col:4, line:1404:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e4b60 <line:1403:20, line:1404:3>
|   |   |-TextComment 0x5575d02e4b10 <line:1403:20, col:29> Text=" Thread ID"
|   |   `-TextComment 0x5575d02e4b30 <line:1404:3> Text=" "
|   `-BlockCommandComment 0x5575d02e4b80 <col:4, col:60> Name="retval"
|     `-ParagraphComment 0x5575d02e4be0 <col:11, col:60>
|       `-TextComment 0x5575d02e4bb0 <col:11, col:60> Text=" Thread name, or NULL if configuration not enabled"
|-FunctionDecl 0x5575d0238698 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1420:17> line:1419:15 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x5575d0238458 <col:34, col:42> col:42 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5575d02384d8 <col:53, col:59> col:59 buf 'char *'
| |-ParmVarDecl 0x5575d0238550 <line:1420:6, col:13> col:13 size 'size_t':'unsigned long'
| `-FullComment 0x5575d02e5300 <line:1409:3, line:1417:20>
|   |-ParagraphComment 0x5575d02e4cd0 <line:1409:3>
|   | `-TextComment 0x5575d02e4ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e4cf0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5575d02e4d50 <col:10, col:53>
|   |   `-TextComment 0x5575d02e4d20 <col:10, col:53> Text=" Copy the thread name into a supplied buffer"
|   |-ParagraphComment 0x5575d02e4da0 <line:1411:3>
|   | `-TextComment 0x5575d02e4d70 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e4dc0 <col:4, line:1412:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e4e70 <line:1411:20, line:1412:3>
|   |   |-TextComment 0x5575d02e4e20 <line:1411:20, col:53> Text=" Thread to obtain name information"
|   |   `-TextComment 0x5575d02e4e40 <line:1412:3> Text=" "
|   |-ParamCommandComment 0x5575d02e4e90 <col:4, line:1413:3> [in] implicitly Param="buf" ParamIndex=1
|   | `-ParagraphComment 0x5575d02e4f40 <line:1412:14, line:1413:3>
|   |   |-TextComment 0x5575d02e4ef0 <line:1412:14, col:32> Text=" Destination buffer"
|   |   `-TextComment 0x5575d02e4f10 <line:1413:3> Text=" "
|   |-ParamCommandComment 0x5575d02e4f60 <col:4, line:1414:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5575d02e5030 <line:1413:15, line:1414:3>
|   |   |-TextComment 0x5575d02e4fe0 <line:1413:15, col:38> Text=" Destination buffer size"
|   |   `-TextComment 0x5575d02e5000 <line:1414:3> Text=" "
|   |-BlockCommandComment 0x5575d02e5050 <col:4, line:1415:3> Name="retval"
|   | `-ParagraphComment 0x5575d02e50d0 <line:1414:11, line:1415:3>
|   |   |-TextComment 0x5575d02e5080 <line:1414:11, col:47> Text=" -ENOSPC Destination buffer too small"
|   |   `-TextComment 0x5575d02e50a0 <line:1415:3> Text=" "
|   |-BlockCommandComment 0x5575d02e50f0 <col:4, line:1416:3> Name="retval"
|   | `-ParagraphComment 0x5575d02e5170 <line:1415:11, line:1416:3>
|   |   |-TextComment 0x5575d02e5120 <line:1415:11, col:38> Text=" -EFAULT Memory access error"
|   |   `-TextComment 0x5575d02e5140 <line:1416:3> Text=" "
|   |-BlockCommandComment 0x5575d02e5190 <col:4, line:1417:3> Name="retval"
|   | `-ParagraphComment 0x5575d02e5210 <line:1416:11, line:1417:3>
|   |   |-TextComment 0x5575d02e51c0 <line:1416:11, col:50> Text=" -ENOSYS Thread name feature not enabled"
|   |   `-TextComment 0x5575d02e51e0 <line:1417:3> Text=" "
|   `-BlockCommandComment 0x5575d02e5230 <col:4, col:20> Name="retval"
|     `-ParagraphComment 0x5575d02e5290 <col:11, col:20>
|       `-TextComment 0x5575d02e5260 <col:11, col:20> Text=" 0 Success"
|-FunctionDecl 0x5575d0238820 <line:1430:1, col:49> col:13 k_thread_state_str 'const char *(k_tid_t)'
| |-ParmVarDecl 0x5575d0238788 <col:32, col:40> col:40 thread_id 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d02e5660 <line:1423:3, line:1428:61>
|   |-ParagraphComment 0x5575d02e53a0 <line:1423:3>
|   | `-TextComment 0x5575d02e5370 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e53c0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5575d02e5420 <col:10, col:33>
|   |   `-TextComment 0x5575d02e53f0 <col:10, col:33> Text=" Get thread state string"
|   |-ParagraphComment 0x5575d02e5470 <line:1425:3, col:45>
|   | `-TextComment 0x5575d02e5440 <col:3, col:45> Text=" Get the human friendly thread state string"
|   |-ParagraphComment 0x5575d02e54c0 <line:1427:3>
|   | `-TextComment 0x5575d02e5490 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e54e0 <col:4, line:1428:3> [in] implicitly Param="thread_id" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e5590 <line:1427:20, line:1428:3>
|   |   |-TextComment 0x5575d02e5540 <line:1427:20, col:29> Text=" Thread ID"
|   |   `-TextComment 0x5575d02e5560 <line:1428:3> Text=" "
|   `-BlockCommandComment 0x5575d02e55b0 <col:4, col:61> Name="retval"
|     `-ParagraphComment 0x5575d02e5610 <col:11, col:61>
|       `-TextComment 0x5575d02e55e0 <col:11, col:61> Text=" Thread state string, empty if no state flag is set"
|-RecordDecl 0x5575d0238aa8 prev 0x5575d0226bf8 <line:1517:1, line:1545:1> line:1517:8 struct k_timer definition
| |-FullComment 0x5575d02e57b0 <line:1514:3, col:24>
| | `-ParagraphComment 0x5575d02e5780 <col:3, col:24>
| |   |-TextComment 0x5575d02e56d0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5575d02e5720 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5575d02e5740 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5575d0238b48 <line:1523:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| |-FieldDecl 0x5575d0238ba8 <line:1526:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5575d0238e78 <line:1529:2, col:41> col:9 expiry_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x5575d0238f90 <line:1532:2, col:39> col:9 stop_fn 'void (*)(struct k_timer *)'
| |-FieldDecl 0x5575d0238ff0 <line:1535:2, col:8> col:8 period 's32_t':'int'
| |-FieldDecl 0x5575d0239050 <line:1538:2, col:8> col:8 status 'u32_t':'unsigned int'
| `-FieldDecl 0x5575d02390b8 <line:1541:2, col:8> col:8 referenced user_data 'void *'
|-TypedefDecl 0x5575d02392c0 <line:1587:1, col:55> col:16 referenced k_timer_expiry_t 'void (*)(struct k_timer *)'
| |-PointerType 0x5575d0238e10 'void (*)(struct k_timer *)'
| | `-ParenType 0x5575d0238db0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x5575d0238d70 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x5575d007b4e0 'void'
| |     `-PointerType 0x5575d0238c70 'struct k_timer *'
| |       `-ElaboratedType 0x5575d0238c00 'struct k_timer' sugar
| |         `-RecordType 0x5575d0226c80 'struct k_timer'
| |           `-Record 0x5575d0238aa8 'k_timer'
| `-FullComment 0x5575d02e5c40 <line:1576:3, line:1585:14>
|   |-ParagraphComment 0x5575d02e5850 <line:1576:3>
|   | `-TextComment 0x5575d02e5820 <col:3> Text=" "
|   |-VerbatimLineComment 0x5575d02e5870 <col:4, col:29> Text=" k_timer_expiry_t"
|   |-ParagraphComment 0x5575d02e58e0 <line:1577:3>
|   | `-TextComment 0x5575d02e58b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e5900 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5575d02e5960 <col:10, col:37>
|   |   `-TextComment 0x5575d02e5930 <col:10, col:37> Text=" Timer expiry function type."
|   |-ParagraphComment 0x5575d02e5a00 <line:1579:3, line:1581:54>
|   | |-TextComment 0x5575d02e5980 <line:1579:3, col:78> Text=" A timer's expiry function is executed by the system clock interrupt handler"
|   | |-TextComment 0x5575d02e59a0 <line:1580:3, col:76> Text=" each time the timer expires. The expiry function is optional, and is only"
|   | `-TextComment 0x5575d02e59c0 <line:1581:3, col:54> Text=" invoked if the timer has been initialized with one."
|   |-ParagraphComment 0x5575d02e5a50 <line:1583:3>
|   | `-TextComment 0x5575d02e5a20 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e5a70 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e5b00 <col:16, col:37>
|   |   `-TextComment 0x5575d02e5ad0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5575d02e5b50 <line:1585:3>
|   | `-TextComment 0x5575d02e5b20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e5b70 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02e5bd0 <col:11, col:14>
|       `-TextComment 0x5575d02e5ba0 <col:11, col:14> Text=" N/A"
|-TypedefDecl 0x5575d023aee0 <line:1602:1, col:53> col:16 referenced k_timer_stop_t 'void (*)(struct k_timer *)'
| |-PointerType 0x5575d0238e10 'void (*)(struct k_timer *)'
| | `-ParenType 0x5575d0238db0 'void (struct k_timer *)' sugar
| |   `-FunctionProtoType 0x5575d0238d70 'void (struct k_timer *)' cdecl
| |     |-BuiltinType 0x5575d007b4e0 'void'
| |     `-PointerType 0x5575d0238c70 'struct k_timer *'
| |       `-ElaboratedType 0x5575d0238c00 'struct k_timer' sugar
| |         `-RecordType 0x5575d0226c80 'struct k_timer'
| |           `-Record 0x5575d0238aa8 'k_timer'
| `-FullComment 0x5575d02e60f0 <line:1590:3, line:1600:14>
|   |-ParagraphComment 0x5575d02e5ce0 <line:1590:3>
|   | `-TextComment 0x5575d02e5cb0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5575d02e5d00 <col:4, col:27> Text=" k_timer_stop_t"
|   |-ParagraphComment 0x5575d02e5d70 <line:1591:3>
|   | `-TextComment 0x5575d02e5d40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e5d90 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5575d02e5df0 <col:10, col:35>
|   |   `-TextComment 0x5575d02e5dc0 <col:10, col:35> Text=" Timer stop function type."
|   |-ParagraphComment 0x5575d02e5eb0 <line:1593:3, line:1596:24>
|   | |-TextComment 0x5575d02e5e10 <line:1593:3, col:75> Text=" A timer's stop function is executed if the timer is stopped prematurely."
|   | |-TextComment 0x5575d02e5e30 <line:1594:3, col:71> Text=" The function runs in the context of the thread that stops the timer."
|   | |-TextComment 0x5575d02e5e50 <line:1595:3, col:75> Text=" The stop function is optional, and is only invoked if the timer has been"
|   | `-TextComment 0x5575d02e5e70 <line:1596:3, col:24> Text=" initialized with one."
|   |-ParagraphComment 0x5575d02e5f00 <line:1598:3>
|   | `-TextComment 0x5575d02e5ed0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e5f20 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e5fb0 <col:16, col:37>
|   |   `-TextComment 0x5575d02e5f80 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5575d02e6000 <line:1600:3>
|   | `-TextComment 0x5575d02e5fd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e6020 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02e6080 <col:11, col:14>
|       `-TextComment 0x5575d02e6050 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d023b240 <line:1630:1, line:1632:27> line:1630:13 k_timer_init 'void (struct k_timer *, k_timer_expiry_t, k_timer_stop_t)' extern
| |-ParmVarDecl 0x5575d023afc0 <col:26, col:42> col:42 timer 'struct k_timer *'
| |-ParmVarDecl 0x5575d023b068 <line:1631:5, col:22> col:22 expiry_fn 'k_timer_expiry_t':'void (*)(struct k_timer *)'
| |-ParmVarDecl 0x5575d023b108 <line:1632:5, col:20> col:20 stop_fn 'k_timer_stop_t':'void (*)(struct k_timer *)'
| `-FullComment 0x5575d02e6640 <line:1620:3, line:1628:14>
|   |-ParagraphComment 0x5575d02e6190 <line:1620:3>
|   | `-TextComment 0x5575d02e6160 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e61b0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5575d02e6210 <col:10, col:29>
|   |   `-TextComment 0x5575d02e61e0 <col:10, col:29> Text=" Initialize a timer."
|   |-ParagraphComment 0x5575d02e6260 <line:1622:3, col:60>
|   | `-TextComment 0x5575d02e6230 <col:3, col:60> Text=" This routine initializes a timer, prior to its first use."
|   |-ParagraphComment 0x5575d02e62b0 <line:1624:3>
|   | `-TextComment 0x5575d02e6280 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e62d0 <col:4, line:1625:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e6380 <line:1624:16, line:1625:3>
|   |   |-TextComment 0x5575d02e6330 <line:1624:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5575d02e6350 <line:1625:3> Text=" "
|   |-ParamCommandComment 0x5575d02e63a0 <col:4, line:1626:3> [in] implicitly Param="expiry_fn" ParamIndex=1
|   | `-ParagraphComment 0x5575d02e6450 <line:1625:20, line:1626:3>
|   |   |-TextComment 0x5575d02e6400 <line:1625:20, col:67> Text=" Function to invoke each time the timer expires."
|   |   `-TextComment 0x5575d02e6420 <line:1626:3> Text=" "
|   |-ParamCommandComment 0x5575d02e6470 <col:4, col:77> [in] implicitly Param="stop_fn" ParamIndex=2
|   | `-ParagraphComment 0x5575d02e6500 <col:18, col:77>
|   |   `-TextComment 0x5575d02e64d0 <col:18, col:77> Text="   Function to invoke if the timer is stopped while running."
|   |-ParagraphComment 0x5575d02e6550 <line:1628:3>
|   | `-TextComment 0x5575d02e6520 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e6570 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02e65d0 <col:11, col:14>
|       `-TextComment 0x5575d02e65a0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d023b350 <line:1634:1, col:30> col:13 k_trigger_update 'void ()' extern
|-FunctionDecl 0x5575d023b670 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1653:37> line:1652:16 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x5575d023b440 <col:30, col:46> col:46 timer 'struct k_timer *'
| |-ParmVarDecl 0x5575d023b4b8 <line:1653:9, col:15> col:15 duration 's32_t':'int'
| |-ParmVarDecl 0x5575d023b530 <col:25, col:31> col:31 period 's32_t':'int'
| `-FullComment 0x5575d02e6c50 <line:1637:3, line:1650:14>
|   |-ParagraphComment 0x5575d02e66e0 <line:1637:3>
|   | `-TextComment 0x5575d02e66b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e6700 <col:4, col:24> Name="brief"
|   | `-ParagraphComment 0x5575d02e6760 <col:10, col:24>
|   |   `-TextComment 0x5575d02e6730 <col:10, col:24> Text=" Start a timer."
|   |-ParagraphComment 0x5575d02e67d0 <line:1639:3, line:1640:71>
|   | |-TextComment 0x5575d02e6780 <line:1639:3, col:72> Text=" This routine starts a timer, and resets its status to zero. The timer"
|   | `-TextComment 0x5575d02e67a0 <line:1640:3, col:71> Text=" begins counting down using the specified duration and period values."
|   |-ParagraphComment 0x5575d02e6870 <line:1642:3, line:1644:44>
|   | |-TextComment 0x5575d02e67f0 <line:1642:3, col:68> Text=" Attempting to start a timer that is already running is permitted."
|   | |-TextComment 0x5575d02e6810 <line:1643:3, col:73> Text=" The timer's status is reset to zero and the timer begins counting down"
|   | `-TextComment 0x5575d02e6830 <line:1644:3, col:44> Text=" using the new duration and period values."
|   |-ParagraphComment 0x5575d02e68c0 <line:1646:3>
|   | `-TextComment 0x5575d02e6890 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e68e0 <col:4, line:1647:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e6990 <line:1646:16, line:1647:3>
|   |   |-TextComment 0x5575d02e6940 <line:1646:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5575d02e6960 <line:1647:3> Text=" "
|   |-ParamCommandComment 0x5575d02e69b0 <col:4, line:1648:3> [in] implicitly Param="duration" ParamIndex=1
|   | `-ParagraphComment 0x5575d02e6a60 <line:1647:19, line:1648:3>
|   |   |-TextComment 0x5575d02e6a10 <line:1647:19, col:61> Text="  Initial timer duration (in milliseconds)."
|   |   `-TextComment 0x5575d02e6a30 <line:1648:3> Text=" "
|   |-ParamCommandComment 0x5575d02e6a80 <col:4, col:51> [in] implicitly Param="period" ParamIndex=2
|   | `-ParagraphComment 0x5575d02e6b10 <col:17, col:51>
|   |   `-TextComment 0x5575d02e6ae0 <col:17, col:51> Text="    Timer period (in milliseconds)."
|   |-ParagraphComment 0x5575d02e6b60 <line:1650:3>
|   | `-TextComment 0x5575d02e6b30 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e6b80 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02e6be0 <col:11, col:14>
|       `-TextComment 0x5575d02e6bb0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d023b810 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1671:50> col:16 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d023b780 <col:29, col:45> col:45 timer 'struct k_timer *'
| `-FullComment 0x5575d02e7210 <line:1656:3, line:1669:14>
|   |-ParagraphComment 0x5575d02e6cf0 <line:1656:3>
|   | `-TextComment 0x5575d02e6cc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e6d10 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5575d02e6d70 <col:10, col:23>
|   |   `-TextComment 0x5575d02e6d40 <col:10, col:23> Text=" Stop a timer."
|   |-ParagraphComment 0x5575d02e6de0 <line:1658:3, line:1659:43>
|   | |-TextComment 0x5575d02e6d90 <line:1658:3, col:77> Text=" This routine stops a running timer prematurely. The timer's stop function,"
|   | `-TextComment 0x5575d02e6db0 <line:1659:3, col:43> Text=" if one exists, is invoked by the caller."
|   |-ParagraphComment 0x5575d02e6e50 <line:1661:3, line:1662:23>
|   | |-TextComment 0x5575d02e6e00 <line:1661:3, col:74> Text=" Attempting to stop a timer that is not running is permitted, but has no"
|   | `-TextComment 0x5575d02e6e20 <line:1662:3, col:23> Text=" effect on the timer."
|   |-ParagraphComment 0x5575d02e6ea0 <line:1664:3>
|   | `-TextComment 0x5575d02e6e70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e6ec0 <col:4, line:1665:48> Name="note"
|   | `-ParagraphComment 0x5575d02e6fd0 <line:1664:9, line:1665:48>
|   |   |-TextComment 0x5575d02e6ef0 <line:1664:9, col:78> Text=" Can be called by ISRs.  The stop handler has to be callable from ISRs"
|   |   |-TextComment 0x5575d02e6f10 <line:1665:3, col:6> Text=" if "
|   |   |-InlineCommandComment 0x5575d02e6f60 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="k_timer_stop"
|   |   `-TextComment 0x5575d02e6f80 <col:22, col:48> Text=" is to be called from ISRs."
|   |-ParagraphComment 0x5575d02e7020 <line:1667:3>
|   | `-TextComment 0x5575d02e6ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e7040 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e70d0 <col:16, col:37>
|   |   `-TextComment 0x5575d02e70a0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5575d02e7120 <line:1669:3>
|   | `-TextComment 0x5575d02e70f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e7140 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02e71a0 <col:11, col:14>
|       `-TextComment 0x5575d02e7170 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d023ba20 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1685:57> col:17 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d023b910 <col:36, col:52> col:52 timer 'struct k_timer *'
| `-FullComment 0x5575d02e7620 <line:1674:3, line:1683:24>
|   |-ParagraphComment 0x5575d02e72b0 <line:1674:3>
|   | `-TextComment 0x5575d02e7280 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e72d0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5575d02e7330 <col:10, col:28>
|   |   `-TextComment 0x5575d02e7300 <col:10, col:28> Text=" Read timer status."
|   |-ParagraphComment 0x5575d02e73a0 <line:1676:3, line:1677:49>
|   | |-TextComment 0x5575d02e7350 <line:1676:3, col:77> Text=" This routine reads the timer's status, which indicates the number of times"
|   | `-TextComment 0x5575d02e7370 <line:1677:3, col:49> Text=" it has expired since its status was last read."
|   |-ParagraphComment 0x5575d02e73f0 <line:1679:3, col:58>
|   | `-TextComment 0x5575d02e73c0 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x5575d02e7440 <line:1681:3>
|   | `-TextComment 0x5575d02e7410 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e7460 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e74f0 <col:16, col:37>
|   |   `-TextComment 0x5575d02e74c0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5575d02e7540 <line:1683:3>
|   | `-TextComment 0x5575d02e7510 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e7560 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5575d02e75c0 <col:11, col:24>
|       `-TextComment 0x5575d02e7590 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x5575d023bbb0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1704:58> col:17 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d023bb20 <col:37, col:53> col:53 timer 'struct k_timer *'
| `-FullComment 0x5575d02e7b00 <line:1688:3, line:1702:24>
|   |-ParagraphComment 0x5575d02e76c0 <line:1688:3>
|   | `-TextComment 0x5575d02e7690 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e76e0 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d02e7740 <col:10, col:49>
|   |   `-TextComment 0x5575d02e7710 <col:10, col:49> Text=" Synchronize thread to timer expiration."
|   |-ParagraphComment 0x5575d02e7800 <line:1690:3, line:1693:73>
|   | |-TextComment 0x5575d02e7760 <line:1690:3, col:78> Text=" This routine blocks the calling thread until the timer's status is non-zero"
|   | |-TextComment 0x5575d02e7780 <line:1691:3, col:76> Text=" (indicating that it has expired at least once since it was last examined)"
|   | |-TextComment 0x5575d02e77a0 <line:1692:3, col:68> Text=" or the timer is stopped. If the timer status is already non-zero,"
|   | `-TextComment 0x5575d02e77c0 <line:1693:3, col:73> Text=" or the timer is already stopped, the caller continues without waiting."
|   |-ParagraphComment 0x5575d02e7850 <line:1695:3, col:58>
|   | `-TextComment 0x5575d02e7820 <col:3, col:58> Text=" Calling this routine resets the timer's status to zero."
|   |-ParagraphComment 0x5575d02e78c0 <line:1697:3, line:1698:20>
|   | |-TextComment 0x5575d02e7870 <line:1697:3, col:74> Text=" This routine must not be used by interrupt handlers, since they are not"
|   | `-TextComment 0x5575d02e7890 <line:1698:3, col:20> Text=" allowed to block."
|   |-ParagraphComment 0x5575d02e7910 <line:1700:3>
|   | `-TextComment 0x5575d02e78e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e7930 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e79c0 <col:16, col:37>
|   |   `-TextComment 0x5575d02e7990 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5575d02e7a10 <line:1702:3>
|   | `-TextComment 0x5575d02e79e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e7a30 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5575d02e7a90 <col:11, col:24>
|       `-TextComment 0x5575d02e7a60 <col:11, col:24> Text=" Timer status."
|-FunctionDecl 0x5575d023bd90 <line:1706:1, col:58> col:14 used z_timeout_remaining 's32_t (struct _timeout *)' extern
| `-ParmVarDecl 0x5575d023bc80 <col:34, col:51> col:51 timeout 'struct _timeout *'
|-FunctionDecl 0x5575d023c0b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1718:60> col:17 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d023c020 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x5575d02e7ec0 <line:1709:3, line:1716:44>
|   |-ParagraphComment 0x5575d02e7ba0 <line:1709:3>
|   | `-TextComment 0x5575d02e7b70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e7bc0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5575d02e7c20 <col:10, col:57>
|   |   `-TextComment 0x5575d02e7bf0 <col:10, col:57> Text=" Get time remaining before a timer next expires."
|   |-ParagraphComment 0x5575d02e7c90 <line:1711:3, line:1712:68>
|   | |-TextComment 0x5575d02e7c40 <line:1711:3, col:74> Text=" This routine computes the (approximate) time remaining before a running"
|   | `-TextComment 0x5575d02e7c60 <line:1712:3, col:68> Text=" timer next expires. If the timer is not running, it returns zero."
|   |-ParagraphComment 0x5575d02e7ce0 <line:1714:3>
|   | `-TextComment 0x5575d02e7cb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e7d00 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e7d90 <col:16, col:37>
|   |   `-TextComment 0x5575d02e7d60 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5575d02e7de0 <line:1716:3>
|   | `-TextComment 0x5575d02e7db0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e7e00 <col:4, col:44> Name="return"
|     `-ParagraphComment 0x5575d02e7e60 <col:11, col:44>
|       `-TextComment 0x5575d02e7e30 <col:11, col:44> Text=" Remaining time (in milliseconds)."
|-FunctionDecl 0x5575d023c210 <line:1720:1, line:1724:1> line:1720:21 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d023c180 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x5575d023c748 <line:1721:1, line:1724:1>
|   |-DeclStmt 0x5575d023c470 <line:1722:2, col:58>
|   | `-VarDecl 0x5575d023c2c8 <col:2, col:57> col:14 used ticks 'const s32_t':'const int' cinit
|   |   `-CallExpr 0x5575d023c448 <col:22, col:57> 's32_t':'int'
|   |     |-ImplicitCastExpr 0x5575d023c430 <col:22> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575d023c330 <col:22> 's32_t (struct _timeout *)' Function 0x5575d023bd90 'z_timeout_remaining' 's32_t (struct _timeout *)'
|   |     `-UnaryOperator 0x5575d023c3b8 <col:42, col:50> 'struct _timeout *' prefix '&' cannot overflow
|   |       `-MemberExpr 0x5575d023c388 <col:43, col:50> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x5575d0238b48
|   |         `-ImplicitCastExpr 0x5575d023c370 <col:43> 'struct k_timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5575d023c350 <col:43> 'struct k_timer *' lvalue ParmVar 0x5575d023c180 'timer' 'struct k_timer *'
|   `-ReturnStmt 0x5575d023c710 <line:1723:2, col:61>
|     `-ConditionalOperator 0x5575d023c688 <col:9, col:61> 'unsigned int'
|       |-ParenExpr 0x5575d023c500 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x5575d023c4e0 <col:10, col:18> 'int' '>'
|       |   |-ImplicitCastExpr 0x5575d023c4c8 <col:10> 's32_t':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5575d023c488 <col:10> 'const s32_t':'const int' lvalue Var 0x5575d023c2c8 'ticks' 'const s32_t':'const int'
|       |   `-IntegerLiteral 0x5575d023c4a8 <col:18> 'int' 0
|       |-CStyleCastExpr 0x5575d023c640 <col:23, col:57> 'u32_t':'unsigned int' <IntegralCast>
|       | `-CallExpr 0x5575d023c5d8 <col:30, col:57> 'u64_t':'unsigned long long'
|       |   |-ImplicitCastExpr 0x5575d023c5c0 <col:30> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5575d023c520 <col:30> 'u64_t (u64_t)' Function 0x5575d01ae4c8 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
|       |   `-ImplicitCastExpr 0x5575d023c618 <col:52> 'u64_t':'unsigned long long' <IntegralCast>
|       |     `-ImplicitCastExpr 0x5575d023c600 <col:52> 's32_t':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x5575d023c540 <col:52> 'const s32_t':'const int' lvalue Var 0x5575d023c2c8 'ticks' 'const s32_t':'const int'
|       `-IntegerLiteral 0x5575d023c668 <col:61> 'unsigned int' 0
|-FunctionDecl 0x5575d023c930 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1740:76> col:16 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5575d023c790 <col:38, col:54> col:54 timer 'struct k_timer *'
| |-ParmVarDecl 0x5575d023c810 <col:61, col:67> col:67 user_data 'void *'
| `-FullComment 0x5575d02e84d0 <line:1727:3, line:1738:14>
|   |-ParagraphComment 0x5575d02e7f60 <line:1727:3>
|   | `-TextComment 0x5575d02e7f30 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e7f80 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5575d02e7fe0 <col:10, col:52>
|   |   `-TextComment 0x5575d02e7fb0 <col:10, col:52> Text=" Associate user-specific data with a timer."
|   |-ParagraphComment 0x5575d02e8150 <line:1729:3, line:1730:9>
|   | |-TextComment 0x5575d02e8000 <line:1729:3, col:28> Text=" This routine records the "
|   | |-InlineCommandComment 0x5575d02e8050 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="user_data"
|   | |-TextComment 0x5575d02e8070 <col:41, col:50> Text=" with the "
|   | |-InlineCommandComment 0x5575d02e80c0 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="timer,"
|   | |-TextComment 0x5575d02e80e0 <col:60, col:75> Text=" to be retrieved"
|   | `-TextComment 0x5575d02e8100 <line:1730:3, col:9> Text=" later."
|   |-ParagraphComment 0x5575d02e81c0 <line:1732:3, line:1733:73>
|   | |-TextComment 0x5575d02e8170 <line:1732:3, col:78> Text=" It can be used e.g. in a timer handler shared across multiple subsystems to"
|   | `-TextComment 0x5575d02e8190 <line:1733:3, col:73> Text=" retrieve data specific to the subsystem this timer is associated with."
|   |-ParagraphComment 0x5575d02e8210 <line:1735:3>
|   | `-TextComment 0x5575d02e81e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e8230 <col:4, line:1736:3> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e82e0 <line:1735:16, line:1736:3>
|   |   |-TextComment 0x5575d02e8290 <line:1735:16, col:37> Text="     Address of timer."
|   |   `-TextComment 0x5575d02e82b0 <line:1736:3> Text=" "
|   |-ParamCommandComment 0x5575d02e8300 <col:4, col:58> [in] implicitly Param="user_data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02e8390 <col:20, col:58>
|   |   `-TextComment 0x5575d02e8360 <col:20, col:58> Text=" User data to associate with the timer."
|   |-ParagraphComment 0x5575d02e83e0 <line:1738:3>
|   | `-TextComment 0x5575d02e83b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e8400 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02e8460 <col:11, col:14>
|       `-TextComment 0x5575d02e8430 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d023cb48 <line:1745:1, line:1749:1> line:1745:20 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5575d023ca30 <col:49, col:65> col:65 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5575d023cab0 <line:1746:13, col:19> col:19 used user_data 'void *'
| |-CompoundStmt 0x5575d023cce8 <line:1747:1, line:1749:1>
| | `-BinaryOperator 0x5575d023cc98 <line:1748:2, col:21> 'void *' '='
| |   |-MemberExpr 0x5575d023cc30 <col:2, col:9> 'void *' lvalue ->user_data 0x5575d02390b8
| |   | `-ImplicitCastExpr 0x5575d023cc18 <col:2> 'struct k_timer *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5575d023cbf8 <col:2> 'struct k_timer *' lvalue ParmVar 0x5575d023ca30 'timer' 'struct k_timer *'
| |   `-ImplicitCastExpr 0x5575d023cc80 <col:21> 'void *' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d023cc60 <col:21> 'void *' lvalue ParmVar 0x5575d023cab0 'user_data' 'void *'
| `-FullComment 0x5575d02e85c0 <line:1743:3, col:12>
|   `-ParagraphComment 0x5575d02e8590 <col:3, col:12>
|     |-TextComment 0x5575d02e8540 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d02e8560 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d023ce38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1758:60> col:17 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d023cd28 <col:39, col:55> col:55 timer 'struct k_timer *'
| `-FullComment 0x5575d02e8900 <line:1752:3, line:1756:25>
|   |-ParagraphComment 0x5575d02e8660 <line:1752:3>
|   | `-TextComment 0x5575d02e8630 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e8680 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x5575d02e86e0 <col:10, col:55>
|   |   `-TextComment 0x5575d02e86b0 <col:10, col:55> Text=" Retrieve the user-specific data from a timer."
|   |-ParagraphComment 0x5575d02e8730 <line:1754:3>
|   | `-TextComment 0x5575d02e8700 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e8750 <col:4, col:37> [in] implicitly Param="timer" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e87e0 <col:16, col:37>
|   |   `-TextComment 0x5575d02e87b0 <col:16, col:37> Text="     Address of timer."
|   |-ParagraphComment 0x5575d02e8830 <line:1756:3>
|   | `-TextComment 0x5575d02e8800 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e8850 <col:4, col:25> Name="return"
|     `-ParagraphComment 0x5575d02e88b0 <col:11, col:25>
|       `-TextComment 0x5575d02e8880 <col:11, col:25> Text=" The user data."
|-FunctionDecl 0x5575d023d4f0 <line:1760:1, line:1763:1> line:1760:21 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d023cf08 <col:50, col:66> col:66 used timer 'struct k_timer *'
| `-CompoundStmt 0x5575d023d6b8 <line:1761:1, line:1763:1>
|   `-ReturnStmt 0x5575d023d618 <line:1762:2, col:16>
|     `-ImplicitCastExpr 0x5575d023d600 <col:9, col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5575d023d5d0 <col:9, col:16> 'void *' lvalue ->user_data 0x5575d02390b8
|         `-ImplicitCastExpr 0x5575d023d5b8 <col:9> 'struct k_timer *' <LValueToRValue>
|           `-DeclRefExpr 0x5575d023d598 <col:9> 'struct k_timer *' lvalue ParmVar 0x5575d023cf08 'timer' 'struct k_timer *'
|-FunctionDecl 0x5575d023d768 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1787:34> col:17 used k_uptime_get 's64_t (void)' static inline
| `-FullComment 0x5575d02e8de0 <line:1773:3, line:1785:42>
|   |-ParagraphComment 0x5575d02e89a0 <line:1773:3>
|   | `-TextComment 0x5575d02e8970 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e89c0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5575d02e8a20 <col:10, col:28>
|   |   `-TextComment 0x5575d02e89f0 <col:10, col:28> Text=" Get system uptime."
|   |-ParagraphComment 0x5575d02e8a90 <line:1775:3, line:1776:19>
|   | |-TextComment 0x5575d02e8a40 <line:1775:3, col:65> Text=" This routine returns the elapsed time since the system booted,"
|   | `-TextComment 0x5575d02e8a60 <line:1776:3, col:19> Text=" in milliseconds."
|   |-ParagraphComment 0x5575d02e8ae0 <line:1778:3>
|   | `-TextComment 0x5575d02e8ab0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e8b00 <col:4, line:1783:13> Name="note"
|   | `-ParagraphComment 0x5575d02e8cb0 <line:1779:3, line:1783:13>
|   |   |-TextComment 0x5575d02e8b30 <line:1779:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x5575d02e8b80 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x5575d02e8ba0 <line:1780:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x5575d02e8bc0 <line:1781:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x5575d02e8be0 <line:1782:3, col:61> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option."
|   |   |-TextComment 0x5575d02e8c00 <line:1783:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x5575d02e8c50 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x5575d02e8d00 <line:1785:3>
|   | `-TextComment 0x5575d02e8cd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e8d20 <col:4, col:42> Name="return"
|     `-ParagraphComment 0x5575d02e8d80 <col:11, col:42>
|       `-TextComment 0x5575d02e8d50 <col:11, col:42> Text=" Current uptime in milliseconds."
|-FunctionDecl 0x5575d023d8d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1805:1> line:1799:32 k_enable_sys_clock_always_on 'int (void)' static inline
| |-CompoundStmt 0x5575d023da78 <line:1800:1, line:1805:1>
| | |-CompoundStmt 0x5575d023d9e8 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | |-NullStmt 0x5575d023d9f8 </vagrant/ext/zephyros/zephyr/include/kernel.h:1802:57>
| | `-ReturnStmt 0x5575d023da38 <line:1804:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| |   `-UnaryOperator 0x5575d023da20 </vagrant/ext/zephyros/zephyr/include/kernel.h:1804:9, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' prefix '!' cannot overflow
| |     `-IntegerLiteral 0x5575d023da00 <col:16> 'int' 0
| |-DeprecatedAttr 0x5575d023d978 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x5575d02e90e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1790:3, line:1796:56>
|   |-ParagraphComment 0x5575d02e8e80 <line:1790:3>
|   | `-TextComment 0x5575d02e8e50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e8ea0 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5575d02e8f00 <col:10, col:51>
|   |   `-TextComment 0x5575d02e8ed0 <col:10, col:51> Text=" Enable clock always on in tickless kernel"
|   |-ParagraphComment 0x5575d02e8fa0 <line:1792:3, line:1794:11>
|   | |-TextComment 0x5575d02e8f20 <line:1792:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|   | |-TextComment 0x5575d02e8f40 <line:1793:3, col:66> Text=" functionality has been migrated to the SYSTEM_CLOCK_SLOPPY_IDLE"
|   | `-TextComment 0x5575d02e8f60 <line:1794:3, col:11> Text=" kconfig."
|   |-ParagraphComment 0x5575d02e9010 <line:1796:3>
|   | `-TextComment 0x5575d02e8fe0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e9030 <col:4, col:56> Name="retval"
|     `-ParagraphComment 0x5575d02e9090 <col:11, col:56>
|       `-TextComment 0x5575d02e9060 <col:11, col:56> Text=" prev_status Previous status of always on flag"
|-FunctionDecl 0x5575d023db38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:22, /vagrant/ext/zephyros/zephyr/include/kernel.h:1820:1> line:1816:33 k_disable_sys_clock_always_on 'void (void)' static inline
| |-CompoundStmt 0x5575d023dc88 <line:1817:1, line:1820:1>
| | |-CompoundStmt 0x5575d023dc48 </vagrant/ext/zephyros/zephyr/include/sys/__assert.h:116:34, col:36>
| | `-NullStmt 0x5575d023dc58 </vagrant/ext/zephyros/zephyr/include/kernel.h:1819:57>
| |-DeprecatedAttr 0x5575d023dbd8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:179:37> "" ""
| `-FullComment 0x5575d02e92e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:1809:3, line:1813:11>
|   |-ParagraphComment 0x5575d02e9180 <line:1809:3>
|   | `-TextComment 0x5575d02e9150 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e91a0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5575d02e9200 <col:10, col:52>
|   |   `-TextComment 0x5575d02e91d0 <col:10, col:52> Text=" Disable clock always on in tickless kernel"
|   `-ParagraphComment 0x5575d02e92a0 <line:1811:3, line:1813:11>
|     |-TextComment 0x5575d02e9220 <line:1811:3, col:68> Text=" Deprecated.  This does nothing (it was always just a hint).  This"
|     |-TextComment 0x5575d02e9240 <line:1812:3, col:63> Text=" functionality has been migrated to the SYS_CLOCK_SLOPPY_IDLE"
|     `-TextComment 0x5575d02e9260 <line:1813:3, col:11> Text=" kconfig."
|-FunctionDecl 0x5575d023dd40 <line:1844:1, line:1847:1> line:1844:21 k_uptime_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x5575d023df08 <line:1845:1, line:1847:1>
| | `-ReturnStmt 0x5575d023ded0 <line:1846:2, col:29>
| |   `-CStyleCastExpr 0x5575d023dea8 <col:9, col:29> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d023de78 <col:16, col:29> 's64_t':'long long'
| |       `-ImplicitCastExpr 0x5575d023de60 <col:16> 's64_t (*)(void)' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5575d023dde0 <col:16> 's64_t (void)' Function 0x5575d023d768 'k_uptime_get' 's64_t (void)'
| `-FullComment 0x5575d02e9850 <line:1824:3, line:1842:66>
|   |-ParagraphComment 0x5575d02e9380 <line:1824:3>
|   | `-TextComment 0x5575d02e9350 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e93a0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5575d02e9400 <col:10, col:45>
|   |   `-TextComment 0x5575d02e93d0 <col:10, col:45> Text=" Get system uptime (32-bit version)."
|   |-ParagraphComment 0x5575d02e9470 <line:1826:3, line:1827:16>
|   | |-TextComment 0x5575d02e9420 <line:1826:3, col:65> Text=" This routine returns the lower 32 bits of the system uptime in"
|   | `-TextComment 0x5575d02e9440 <line:1827:3, col:16> Text=" milliseconds."
|   |-ParagraphComment 0x5575d02e9560 <line:1829:3, line:1833:38>
|   | |-TextComment 0x5575d02e9490 <line:1829:3, col:67> Text=" Because correct conversion requires full precision of the system"
|   | |-TextComment 0x5575d02e94b0 <line:1830:3, col:69> Text=" clock there is no benefit to using this over k_uptime_get() unless"
|   | |-TextComment 0x5575d02e94d0 <line:1831:3, col:69> Text=" you know the application will never run long enough for the system"
|   | |-TextComment 0x5575d02e94f0 <line:1832:3, col:68> Text=" clock to approach 2^32 ticks.  Calls to this function may involve"
|   | `-TextComment 0x5575d02e9510 <line:1833:3, col:38> Text=" interrupt blocking and 64-bit math."
|   |-ParagraphComment 0x5575d02e95b0 <line:1835:3>
|   | `-TextComment 0x5575d02e9580 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e95d0 <col:4, line:1840:13> Name="note"
|   | `-ParagraphComment 0x5575d02e9720 <line:1836:3, line:1840:13>
|   |   |-TextComment 0x5575d02e9600 <line:1836:3, col:6> Text="    "
|   |   |-InlineCommandComment 0x5575d02e9620 <col:7, col:10> Name="rst" RenderNormal
|   |   |-TextComment 0x5575d02e9640 <line:1837:3, col:63> Text="    While this function returns time in milliseconds, it does"
|   |   |-TextComment 0x5575d02e9660 <line:1838:3, col:78> Text="    not mean it has millisecond resolution. The actual resolution depends on"
|   |   |-TextComment 0x5575d02e9680 <line:1839:3, col:60> Text="    :option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` config option"
|   |   |-TextComment 0x5575d02e96a0 <line:1840:3, col:6> Text="    "
|   |   `-InlineCommandComment 0x5575d02e96c0 <col:7, col:13> Name="endrst" RenderNormal
|   |-ParagraphComment 0x5575d02e9770 <line:1842:3>
|   | `-TextComment 0x5575d02e9740 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e9790 <col:4, col:66> Name="return"
|     `-ParagraphComment 0x5575d02e97f0 <col:11, col:66>
|       `-TextComment 0x5575d02e97c0 <col:11, col:66> Text=" The low 32 bits of the current uptime, in milliseconds."
|-FunctionDecl 0x5575d023e0a0 <line:1860:1, line:1869:1> line:1860:21 used k_uptime_delta 's64_t (s64_t *)' static inline
| |-ParmVarDecl 0x5575d023df90 <col:36, col:43> col:43 used reftime 's64_t *'
| |-CompoundStmt 0x5575d023f838 <line:1861:1, line:1869:1>
| | |-DeclStmt 0x5575d023e250 <line:1862:2, col:21>
| | | |-VarDecl 0x5575d023e158 <col:2, col:8> col:8 used uptime 's64_t':'long long'
| | | `-VarDecl 0x5575d023e1d0 <col:2, col:16> col:16 used delta 's64_t':'long long'
| | |-BinaryOperator 0x5575d023e2e0 <line:1864:2, col:24> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x5575d023e268 <col:2> 's64_t':'long long' lvalue Var 0x5575d023e158 'uptime' 's64_t':'long long'
| | | `-CallExpr 0x5575d023e2c0 <col:11, col:24> 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x5575d023e2a8 <col:11> 's64_t (*)(void)' <FunctionToPointerDecay>
| | |     `-DeclRefExpr 0x5575d023e288 <col:11> 's64_t (void)' Function 0x5575d023d768 'k_uptime_get' 's64_t (void)'
| | |-BinaryOperator 0x5575d023e3e0 <line:1865:2, col:20> 's64_t':'long long' '='
| | | |-DeclRefExpr 0x5575d023e300 <col:2> 's64_t':'long long' lvalue Var 0x5575d023e1d0 'delta' 's64_t':'long long'
| | | `-BinaryOperator 0x5575d023e3c0 <col:10, col:20> 'long long' '-'
| | |   |-ImplicitCastExpr 0x5575d023e390 <col:10> 's64_t':'long long' <LValueToRValue>
| | |   | `-DeclRefExpr 0x5575d023e320 <col:10> 's64_t':'long long' lvalue Var 0x5575d023e158 'uptime' 's64_t':'long long'
| | |   `-ImplicitCastExpr 0x5575d023e3a8 <col:19, col:20> 's64_t':'long long' <LValueToRValue>
| | |     `-UnaryOperator 0x5575d023e378 <col:19, col:20> 's64_t':'long long' lvalue prefix '*' cannot overflow
| | |       `-ImplicitCastExpr 0x5575d023e360 <col:20> 's64_t *' <LValueToRValue>
| | |         `-DeclRefExpr 0x5575d023e340 <col:20> 's64_t *' lvalue ParmVar 0x5575d023df90 'reftime' 's64_t *'
| | |-BinaryOperator 0x5575d023e488 <line:1866:2, col:13> 's64_t':'long long' '='
| | | |-UnaryOperator 0x5575d023e438 <col:2, col:3> 's64_t':'long long' lvalue prefix '*' cannot overflow
| | | | `-ImplicitCastExpr 0x5575d023e420 <col:3> 's64_t *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5575d023e400 <col:3> 's64_t *' lvalue ParmVar 0x5575d023df90 'reftime' 's64_t *'
| | | `-ImplicitCastExpr 0x5575d023e470 <col:13> 's64_t':'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575d023e450 <col:13> 's64_t':'long long' lvalue Var 0x5575d023e158 'uptime' 's64_t':'long long'
| | `-ReturnStmt 0x5575d023e4e0 <line:1868:2, col:9>
| |   `-ImplicitCastExpr 0x5575d023e4c8 <col:9> 's64_t':'long long' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d023e4a8 <col:9> 's64_t':'long long' lvalue Var 0x5575d023e1d0 'delta' 's64_t':'long long'
| `-FullComment 0x5575d02e9c30 <line:1850:3, line:1858:24>
|   |-ParagraphComment 0x5575d02e98f0 <line:1850:3>
|   | `-TextComment 0x5575d02e98c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e9910 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5575d02e9970 <col:10, col:27>
|   |   `-TextComment 0x5575d02e9940 <col:10, col:27> Text=" Get elapsed time."
|   |-ParagraphComment 0x5575d02e99e0 <line:1852:3, line:1853:50>
|   | |-TextComment 0x5575d02e9990 <line:1852:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x5575d02e99b0 <line:1853:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x5575d02e9a30 <line:1855:3>
|   | `-TextComment 0x5575d02e9a00 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e9a50 <col:4, line:1856:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e9b00 <line:1855:18, line:1856:37>
|   |   |-TextComment 0x5575d02e9ab0 <line:1855:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x5575d02e9ad0 <line:1856:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x5575d02e9b50 <line:1858:3>
|   | `-TextComment 0x5575d02e9b20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02e9b70 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5575d02e9bd0 <col:11, col:24>
|       `-TextComment 0x5575d02e9ba0 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x5575d023f990 <line:1887:1, line:1890:1> line:1887:21 k_uptime_delta_32 'u32_t (s64_t *)' static inline
| |-ParmVarDecl 0x5575d023f880 <col:39, col:46> col:46 used reftime 's64_t *'
| |-CompoundStmt 0x5575d023fba8 <line:1888:1, line:1890:1>
| | `-ReturnStmt 0x5575d023fb70 <line:1889:2, col:38>
| |   `-CStyleCastExpr 0x5575d023fb48 <col:9, col:38> 'u32_t':'unsigned int' <IntegralCast>
| |     `-CallExpr 0x5575d023faf8 <col:16, col:38> 's64_t':'long long'
| |       |-ImplicitCastExpr 0x5575d023fae0 <col:16> 's64_t (*)(s64_t *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d023fa38 <col:16> 's64_t (s64_t *)' Function 0x5575d023e0a0 'k_uptime_delta' 's64_t (s64_t *)'
| |       `-ImplicitCastExpr 0x5575d023fb20 <col:31> 's64_t *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d023fa58 <col:31> 's64_t *' lvalue ParmVar 0x5575d023f880 'reftime' 's64_t *'
| `-FullComment 0x5575d02ea0d0 <line:1872:3, line:1885:24>
|   |-ParagraphComment 0x5575d02e9cd0 <line:1872:3>
|   | `-TextComment 0x5575d02e9ca0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02e9cf0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02e9d50 <col:10, col:44>
|   |   `-TextComment 0x5575d02e9d20 <col:10, col:44> Text=" Get elapsed time (32-bit version)."
|   |-ParagraphComment 0x5575d02e9dc0 <line:1874:3, line:1875:50>
|   | |-TextComment 0x5575d02e9d70 <line:1874:3, col:75> Text=" This routine computes the elapsed time between the current system uptime"
|   | `-TextComment 0x5575d02e9d90 <line:1875:3, col:50> Text=" and an earlier reference time, in milliseconds."
|   |-ParagraphComment 0x5575d02e9e80 <line:1877:3, line:1880:41>
|   | |-TextComment 0x5575d02e9de0 <line:1877:3, col:78> Text=" This routine can be more efficient than k_uptime_delta(), as it reduces the"
|   | |-TextComment 0x5575d02e9e00 <line:1878:3, col:73> Text=" need for interrupt locking and 64-bit math. However, the 32-bit result"
|   | |-TextComment 0x5575d02e9e20 <line:1879:3, col:72> Text=" cannot hold an elapsed time larger than approximately 50 days, so the"
|   | `-TextComment 0x5575d02e9e40 <line:1880:3, col:41> Text=" caller must handle possible rollovers."
|   |-ParagraphComment 0x5575d02e9ed0 <line:1882:3>
|   | `-TextComment 0x5575d02e9ea0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02e9ef0 <col:4, line:1883:37> [in] implicitly Param="reftime" ParamIndex=0
|   | `-ParagraphComment 0x5575d02e9fa0 <line:1882:18, line:1883:37>
|   |   |-TextComment 0x5575d02e9f50 <line:1882:18, col:78> Text=" Pointer to a reference time, which is updated to the current"
|   |   `-TextComment 0x5575d02e9f70 <line:1883:3, col:37> Text="                uptime upon return."
|   |-ParagraphComment 0x5575d02e9ff0 <line:1885:3>
|   | `-TextComment 0x5575d02e9fc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ea010 <col:4, col:24> Name="return"
|     `-ParagraphComment 0x5575d02ea070 <col:11, col:24>
|       `-TextComment 0x5575d02ea040 <col:11, col:24> Text=" Elapsed time."
|-FunctionDecl 0x5575d023fc58 <line:1900:1, line:1903:1> line:1900:21 k_cycle_get_32 'u32_t (void)' static inline
| |-CompoundStmt 0x5575d023fdf8 <line:1901:1, line:1903:1>
| | `-ReturnStmt 0x5575d023fd88 <line:1902:2, col:29>
| |   `-CallExpr 0x5575d023fd68 <col:9, col:29> 'u32_t':'unsigned int'
| |     `-ImplicitCastExpr 0x5575d023fd50 <col:9> 'u32_t (*)(void)' <FunctionToPointerDecay>
| |       `-DeclRefExpr 0x5575d023fcf8 <col:9> 'u32_t (void)' Function 0x5575d01e4820 'arch_k_cycle_get_32' 'u32_t (void)'
| `-FullComment 0x5575d02ea380 <line:1893:3, line:1898:57>
|   |-ParagraphComment 0x5575d02ea170 <line:1893:3>
|   | `-TextComment 0x5575d02ea140 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ea190 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5575d02ea1f0 <col:10, col:34>
|   |   `-TextComment 0x5575d02ea1c0 <col:10, col:34> Text=" Read the hardware clock."
|   |-ParagraphComment 0x5575d02ea260 <line:1895:3, line:1896:9>
|   | |-TextComment 0x5575d02ea210 <line:1895:3, col:78> Text=" This routine returns the current time, as measured by the system's hardware"
|   | `-TextComment 0x5575d02ea230 <line:1896:3, col:9> Text=" clock."
|   |-ParagraphComment 0x5575d02ea2b0 <line:1898:3>
|   | `-TextComment 0x5575d02ea280 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ea2d0 <col:4, col:57> Name="return"
|     `-ParagraphComment 0x5575d02ea330 <col:11, col:57>
|       `-TextComment 0x5575d02ea300 <col:11, col:57> Text=" Current hardware clock up-counter (in cycles)."
|-RecordDecl 0x5575d023fe10 prev 0x5575d021b468 <line:1913:1, line:1924:1> line:1913:8 struct k_queue definition
| |-FullComment 0x5575d02ea4a0 <line:1910:3, col:24>
| | `-ParagraphComment 0x5575d02ea470 <col:3, col:24>
| |   |-TextComment 0x5575d02ea3f0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5575d02ea410 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5575d02ea430 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5575d023fea0 <line:1914:2, col:15> col:15 referenced data_q 'sys_sflist_t':'struct _sflist'
| |-FieldDecl 0x5575d023ff10 <line:1915:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-RecordDecl 0x5575d023ff60 <line:1916:2, line:1920:2> line:1916:2 union definition
| | `-FieldDecl 0x5575d0240018 <line:1917:3, col:13> col:13 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5575d0240120 <line:1916:2> col:2 implicit 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
| `-IndirectFieldDecl 0x5575d0240180 <line:1917:13> col:13 implicit wait_q '_wait_q_t':'_wait_q_t'
|   |-Field 0x5575d0240120 '' 'union k_queue::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:1916:2)'
|   `-Field 0x5575d0240018 'wait_q' '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x5575d02403c8 <line:1939:1, col:67> col:14 used z_queue_node_peek 'void *(sys_sfnode_t *, bool)' extern
| |-ParmVarDecl 0x5575d0240230 <col:32, col:46> col:46 node 'sys_sfnode_t *'
| `-ParmVarDecl 0x5575d02402a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/include/kernel.h:1939:57> col:57 needs_free 'bool'
|-FunctionDecl 0x5575d02406e0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1960:50> col:16 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d02405d8 <col:29, col:45> col:45 queue 'struct k_queue *'
| `-FullComment 0x5575d02ea840 <line:1952:3, line:1958:14>
|   |-ParagraphComment 0x5575d02ea540 <line:1952:3>
|   | `-TextComment 0x5575d02ea510 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ea560 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5575d02ea5c0 <col:10, col:29>
|   |   `-TextComment 0x5575d02ea590 <col:10, col:29> Text=" Initialize a queue."
|   |-ParagraphComment 0x5575d02ea610 <line:1954:3, col:67>
|   | `-TextComment 0x5575d02ea5e0 <col:3, col:67> Text=" This routine initializes a queue object, prior to its first use."
|   |-ParagraphComment 0x5575d02ea660 <line:1956:3>
|   | `-TextComment 0x5575d02ea630 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ea680 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ea710 <col:16, col:37>
|   |   `-TextComment 0x5575d02ea6e0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5575d02ea760 <line:1958:3>
|   | `-TextComment 0x5575d02ea730 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ea780 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02ea7e0 <col:11, col:14>
|       `-TextComment 0x5575d02ea7b0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0241160 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:1977:57> col:16 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d02410d0 <col:36, col:52> col:52 queue 'struct k_queue *'
| `-FullComment 0x5575d02eade0 <line:1963:3, line:1975:14>
|   |-ParagraphComment 0x5575d02ea8e0 <line:1963:3>
|   | `-TextComment 0x5575d02ea8b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ea900 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5575d02ea960 <col:10, col:36>
|   |   `-TextComment 0x5575d02ea930 <col:10, col:36> Text=" Cancel waiting on a queue."
|   |-ParagraphComment 0x5575d02eaad0 <line:1965:3, line:1969:35>
|   | |-TextComment 0x5575d02ea980 <line:1965:3, col:47> Text=" This routine causes first thread pending on "
|   | |-InlineCommandComment 0x5575d02ea9d0 <col:48, col:49> Name="a" RenderEmphasized Arg[0]="queue,"
|   | |-TextComment 0x5575d02ea9f0 <col:57, col:67> Text=" if any, to"
|   | |-TextComment 0x5575d02eaa10 <line:1966:3, col:74> Text=" return from k_queue_get() call with NULL value (as if timeout expired)."
|   | |-TextComment 0x5575d02eaa30 <line:1967:3, col:67> Text=" If the queue is being waited on by k_poll(), it will return with"
|   | |-TextComment 0x5575d02eaa50 <line:1968:3, col:69> Text=" -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent"
|   | `-TextComment 0x5575d02eaa70 <line:1969:3, col:35> Text=" k_queue_get() will return NULL)."
|   |-ParagraphComment 0x5575d02eab20 <line:1971:3>
|   | `-TextComment 0x5575d02eaaf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02eab40 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02eaba0 <col:9, col:31>
|   |   `-TextComment 0x5575d02eab70 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02eabf0 <line:1973:3>
|   | `-TextComment 0x5575d02eabc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02eac10 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02eaca0 <col:16, col:37>
|   |   `-TextComment 0x5575d02eac70 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5575d02eacf0 <line:1975:3>
|   | `-TextComment 0x5575d02eacc0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ead10 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02ead70 <col:11, col:14>
|       `-TextComment 0x5575d02ead40 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0241400 <line:1993:1, col:61> col:13 used k_queue_append 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5575d0241260 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d02412e0 <col:51, col:57> col:57 data 'void *'
| `-FullComment 0x5575d02eb420 <line:1980:3, line:1991:14>
|   |-ParagraphComment 0x5575d02eae80 <line:1980:3>
|   | `-TextComment 0x5575d02eae50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02eaea0 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d02eaf00 <col:10, col:50>
|   |   `-TextComment 0x5575d02eaed0 <col:10, col:50> Text=" Append an element to the end of a queue."
|   |-ParagraphComment 0x5575d02eb040 <line:1982:3, line:1984:24>
|   | |-TextComment 0x5575d02eaf20 <line:1982:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x5575d02eaf70 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5575d02eaf90 <col:49, col:74> Text=" A queue data item must be"
|   | |-TextComment 0x5575d02eafb0 <line:1983:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x5575d02eaff0 <line:1984:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x5575d02eb090 <line:1986:3>
|   | `-TextComment 0x5575d02eb060 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02eb0b0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02eb110 <col:9, col:31>
|   |   `-TextComment 0x5575d02eb0e0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02eb160 <line:1988:3>
|   | `-TextComment 0x5575d02eb130 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02eb180 <col:4, line:1989:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02eb230 <line:1988:16, line:1989:3>
|   |   |-TextComment 0x5575d02eb1e0 <line:1988:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02eb200 <line:1989:3> Text=" "
|   |-ParamCommandComment 0x5575d02eb250 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02eb2e0 <col:15, col:40>
|   |   `-TextComment 0x5575d02eb2b0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5575d02eb330 <line:1991:3>
|   | `-TextComment 0x5575d02eb300 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02eb350 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02eb3b0 <col:11, col:14>
|       `-TextComment 0x5575d02eb380 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d02416a0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2011:71> col:17 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5575d0241500 <col:38, col:54> col:54 queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d0241580 <col:61, col:67> col:67 data 'void *'
| `-FullComment 0x5575d02ebb10 <line:1996:3, line:2009:78>
|   |-ParagraphComment 0x5575d02eb4c0 <line:1996:3>
|   | `-TextComment 0x5575d02eb490 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02eb4e0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02eb540 <col:10, col:39>
|   |   `-TextComment 0x5575d02eb510 <col:10, col:39> Text=" Append an element to a queue."
|   |-ParagraphComment 0x5575d02eb680 <line:1998:3, line:2001:50>
|   | |-TextComment 0x5575d02eb560 <line:1998:3, col:39> Text=" This routine appends a data item to "
|   | |-InlineCommandComment 0x5575d02eb5b0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5575d02eb5d0 <col:49, col:76> Text=" There is an implicit memory"
|   | |-TextComment 0x5575d02eb5f0 <line:1999:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x5575d02eb610 <line:2000:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x5575d02eb630 <line:2001:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x5575d02eb6d0 <line:2003:3>
|   | `-TextComment 0x5575d02eb6a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02eb6f0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02eb750 <col:9, col:31>
|   |   `-TextComment 0x5575d02eb720 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02eb7a0 <line:2005:3>
|   | `-TextComment 0x5575d02eb770 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02eb7c0 <col:4, line:2006:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02eb870 <line:2005:16, line:2006:3>
|   |   |-TextComment 0x5575d02eb820 <line:2005:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02eb840 <line:2006:3> Text=" "
|   |-ParamCommandComment 0x5575d02eb890 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02eb920 <col:15, col:40>
|   |   `-TextComment 0x5575d02eb8f0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5575d02eb970 <line:2008:3>
|   | `-TextComment 0x5575d02eb940 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02eb990 <col:4, line:2009:3> Name="retval"
|   | `-ParagraphComment 0x5575d02eba10 <line:2008:11, line:2009:3>
|   |   |-TextComment 0x5575d02eb9c0 <line:2008:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d02eb9e0 <line:2009:3> Text=" "
|   `-BlockCommandComment 0x5575d02eba30 <col:4, col:78> Name="retval"
|     `-ParagraphComment 0x5575d02eba90 <col:11, col:78>
|       `-TextComment 0x5575d02eba60 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x5575d02418b8 <line:2027:1, col:62> col:13 k_queue_prepend 'void (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5575d02417a0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d0241820 <col:52, col:58> col:58 data 'void *'
| `-FullComment 0x5575d02ec130 <line:2014:3, line:2025:14>
|   |-ParagraphComment 0x5575d02ebbb0 <line:2014:3>
|   | `-TextComment 0x5575d02ebb80 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ebbd0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02ebc30 <col:10, col:40>
|   |   `-TextComment 0x5575d02ebc00 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x5575d02ebd50 <line:2016:3, line:2018:24>
|   | |-TextComment 0x5575d02ebc50 <line:2016:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x5575d02ebca0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5575d02ebcc0 <col:50, col:75> Text=" A queue data item must be"
|   | |-TextComment 0x5575d02ebce0 <line:2017:3, col:73> Text=" aligned on a word boundary, and the first word of the item is reserved"
|   | `-TextComment 0x5575d02ebd00 <line:2018:3, col:24> Text=" for the kernel's use."
|   |-ParagraphComment 0x5575d02ebda0 <line:2020:3>
|   | `-TextComment 0x5575d02ebd70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ebdc0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02ebe20 <col:9, col:31>
|   |   `-TextComment 0x5575d02ebdf0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02ebe70 <line:2022:3>
|   | `-TextComment 0x5575d02ebe40 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ebe90 <col:4, line:2023:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ebf40 <line:2022:16, line:2023:3>
|   |   |-TextComment 0x5575d02ebef0 <line:2022:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02ebf10 <line:2023:3> Text=" "
|   |-ParamCommandComment 0x5575d02ebf60 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ebff0 <col:15, col:40>
|   |   `-TextComment 0x5575d02ebfc0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5575d02ec040 <line:2025:3>
|   | `-TextComment 0x5575d02ec010 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ec060 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02ec0c0 <col:11, col:14>
|       `-TextComment 0x5575d02ec090 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0241ad8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2045:72> col:17 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5575d02419c0 <col:39, col:55> col:55 queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d0241a40 <col:62, col:68> col:68 data 'void *'
| `-FullComment 0x5575d02ec820 <line:2030:3, line:2043:78>
|   |-ParagraphComment 0x5575d02ec1d0 <line:2030:3>
|   | `-TextComment 0x5575d02ec1a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ec1f0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02ec250 <col:10, col:40>
|   |   `-TextComment 0x5575d02ec220 <col:10, col:40> Text=" Prepend an element to a queue."
|   |-ParagraphComment 0x5575d02ec390 <line:2032:3, line:2035:50>
|   | |-TextComment 0x5575d02ec270 <line:2032:3, col:40> Text=" This routine prepends a data item to "
|   | |-InlineCommandComment 0x5575d02ec2c0 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5575d02ec2e0 <col:50, col:77> Text=" There is an implicit memory"
|   | |-TextComment 0x5575d02ec300 <line:2033:3, col:79> Text=" allocation to create an additional temporary bookkeeping data structure from"
|   | |-TextComment 0x5575d02ec320 <line:2034:3, col:76> Text=" the calling thread's resource pool, which is automatically freed when the"
|   | `-TextComment 0x5575d02ec340 <line:2035:3, col:50> Text=" item is removed. The data itself is not copied."
|   |-ParagraphComment 0x5575d02ec3e0 <line:2037:3>
|   | `-TextComment 0x5575d02ec3b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ec400 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02ec460 <col:9, col:31>
|   |   `-TextComment 0x5575d02ec430 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02ec4b0 <line:2039:3>
|   | `-TextComment 0x5575d02ec480 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ec4d0 <col:4, line:2040:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ec580 <line:2039:16, line:2040:3>
|   |   |-TextComment 0x5575d02ec530 <line:2039:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02ec550 <line:2040:3> Text=" "
|   |-ParamCommandComment 0x5575d02ec5a0 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ec630 <col:15, col:40>
|   |   `-TextComment 0x5575d02ec600 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5575d02ec680 <line:2042:3>
|   | `-TextComment 0x5575d02ec650 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ec6a0 <col:4, line:2043:3> Name="retval"
|   | `-ParagraphComment 0x5575d02ec720 <line:2042:11, line:2043:3>
|   |   |-TextComment 0x5575d02ec6d0 <line:2042:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d02ec6f0 <line:2043:3> Text=" "
|   `-BlockCommandComment 0x5575d02ec740 <col:4, col:78> Name="retval"
|     `-ParagraphComment 0x5575d02ec7a0 <col:11, col:78>
|       `-TextComment 0x5575d02ec770 <col:11, col:78> Text=" -ENOMEM if there isn't sufficient RAM in the caller's resource pool"
|-FunctionDecl 0x5575d0241e20 <line:2062:1, col:73> col:13 k_queue_insert 'void (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x5575d0241be0 <col:28, col:44> col:44 queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d0241c60 <col:51, col:57> col:57 prev 'void *'
| |-ParmVarDecl 0x5575d0241ce0 <col:63, col:69> col:69 data 'void *'
| `-FullComment 0x5575d02ecf20 <line:2048:3, line:2060:14>
|   |-ParagraphComment 0x5575d02ec8c0 <line:2048:3>
|   | `-TextComment 0x5575d02ec890 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ec8e0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02ec940 <col:10, col:40>
|   |   `-TextComment 0x5575d02ec910 <col:10, col:40> Text=" Inserts an element to a queue."
|   |-ParagraphComment 0x5575d02eca60 <line:2050:3, line:2052:45>
|   | |-TextComment 0x5575d02ec960 <line:2050:3, col:39> Text=" This routine inserts a data item to "
|   | |-InlineCommandComment 0x5575d02ec9b0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x5575d02ec9d0 <col:48, col:76> Text=" after previous item. A queue"
|   | |-TextComment 0x5575d02ec9f0 <line:2051:3, col:70> Text=" data item must be aligned on a word boundary, and the first word of"
|   | `-TextComment 0x5575d02eca10 <line:2052:3, col:45> Text=" the item is reserved for the kernel's use."
|   |-ParagraphComment 0x5575d02ecab0 <line:2054:3>
|   | `-TextComment 0x5575d02eca80 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ecad0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02ecb30 <col:9, col:31>
|   |   `-TextComment 0x5575d02ecb00 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02ecb80 <line:2056:3>
|   | `-TextComment 0x5575d02ecb50 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ecba0 <col:4, line:2057:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ecc50 <line:2056:16, line:2057:3>
|   |   |-TextComment 0x5575d02ecc00 <line:2056:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02ecc20 <line:2057:3> Text=" "
|   |-ParamCommandComment 0x5575d02ecc70 <col:4, line:2058:3> [in] implicitly Param="prev" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ecd20 <line:2057:15, line:2058:3>
|   |   |-TextComment 0x5575d02eccd0 <line:2057:15, col:49> Text=" Address of the previous data item."
|   |   `-TextComment 0x5575d02eccf0 <line:2058:3> Text=" "
|   |-ParamCommandComment 0x5575d02ecd40 <col:4, col:40> [in] implicitly Param="data" ParamIndex=2
|   | `-ParagraphComment 0x5575d02ecdd0 <col:15, col:40>
|   |   `-TextComment 0x5575d02ecda0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5575d02ece20 <line:2060:3>
|   | `-TextComment 0x5575d02ecdf0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ece40 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02ecea0 <col:11, col:14>
|       `-TextComment 0x5575d02ece70 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d0242338 <line:2082:1, col:77> col:12 k_queue_append_list 'int (struct k_queue *, void *, void *)' extern
| |-ParmVarDecl 0x5575d0241f30 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d0241fb0 <col:55, col:61> col:61 head 'void *'
| |-ParmVarDecl 0x5575d0242030 <col:67, col:73> col:73 tail 'void *'
| `-FullComment 0x5575d02ed760 <line:2065:3, line:2081:1>
|   |-ParagraphComment 0x5575d02ecfc0 <line:2065:3>
|   | `-TextComment 0x5575d02ecf90 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ed000 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5575d02ed060 <col:10, col:58>
|   |   `-TextComment 0x5575d02ed030 <col:10, col:58> Text=" Atomically append a list of elements to a queue."
|   |-ParagraphComment 0x5575d02ed1a0 <line:2067:3, line:2070:19>
|   | |-TextComment 0x5575d02ed080 <line:2067:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x5575d02ed0d0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x5575d02ed0f0 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x5575d02ed110 <line:2068:3, col:70> Text=" The data items must be in a singly-linked list, with the first word"
|   | |-TextComment 0x5575d02ed130 <line:2069:3, col:69> Text=" in each data item pointing to the next data item; the list must be"
|   | `-TextComment 0x5575d02ed150 <line:2070:3, col:19> Text=" NULL-terminated."
|   |-ParagraphComment 0x5575d02ed1f0 <line:2072:3>
|   | `-TextComment 0x5575d02ed1c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ed210 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02ed270 <col:9, col:31>
|   |   `-TextComment 0x5575d02ed240 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02ed2c0 <line:2074:3>
|   | `-TextComment 0x5575d02ed290 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ed2e0 <col:4, line:2075:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ed390 <line:2074:16, line:2075:3>
|   |   |-TextComment 0x5575d02ed340 <line:2074:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02ed360 <line:2075:3> Text=" "
|   |-ParamCommandComment 0x5575d02ed3b0 <col:4, line:2076:3> [in] implicitly Param="head" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ed460 <line:2075:15, line:2076:3>
|   |   |-TextComment 0x5575d02ed410 <line:2075:15, col:59> Text=" Pointer to first node in singly-linked list."
|   |   `-TextComment 0x5575d02ed430 <line:2076:3> Text=" "
|   |-ParamCommandComment 0x5575d02ed480 <col:4, col:58> [in] implicitly Param="tail" ParamIndex=2
|   | `-ParagraphComment 0x5575d02ed510 <col:15, col:58>
|   |   `-TextComment 0x5575d02ed4e0 <col:15, col:58> Text=" Pointer to last node in singly-linked list."
|   |-ParagraphComment 0x5575d02ed560 <line:2078:3>
|   | `-TextComment 0x5575d02ed530 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ed580 <col:4, line:2079:3> Name="retval"
|   | `-ParagraphComment 0x5575d02ed600 <line:2078:11, line:2079:3>
|   |   |-TextComment 0x5575d02ed5b0 <line:2078:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d02ed5d0 <line:2079:3> Text=" "
|   |-BlockCommandComment 0x5575d02ed620 <col:4, col:43> Name="retval"
|   | `-ParagraphComment 0x5575d02ed680 <col:11, col:43>
|   |   `-TextComment 0x5575d02ed650 <col:11, col:43> Text=" -EINVAL on invalid supplied data"
|   `-ParagraphComment 0x5575d02ed6d0 <line:2081:1>
|     `-TextComment 0x5575d02ed6a0 <col:1> Text=" "
|-FunctionDecl 0x5575d02425d8 <line:2099:1, col:72> col:12 k_queue_merge_slist 'int (struct k_queue *, sys_slist_t *)' extern
| |-ParmVarDecl 0x5575d0242440 <col:32, col:48> col:48 queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d02424b8 <col:55, col:68> col:68 list 'sys_slist_t *'
| `-FullComment 0x5575d02ede30 <line:2085:3, line:2097:34>
|   |-ParagraphComment 0x5575d02ed800 <line:2085:3>
|   | `-TextComment 0x5575d02ed7d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ed820 <col:4, col:55> Name="brief"
|   | `-ParagraphComment 0x5575d02ed880 <col:10, col:55>
|   |   `-TextComment 0x5575d02ed850 <col:10, col:55> Text=" Atomically add a list of elements to a queue."
|   |-ParagraphComment 0x5575d02ed9a0 <line:2087:3, line:2089:67>
|   | |-TextComment 0x5575d02ed8a0 <line:2087:3, col:45> Text=" This routine adds a list of data items to "
|   | |-InlineCommandComment 0x5575d02ed8f0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue"
|   | |-TextComment 0x5575d02ed910 <col:54, col:71> Text=" in one operation."
|   | |-TextComment 0x5575d02ed930 <line:2088:3, col:69> Text=" The data items must be in a singly-linked list implemented using a"
|   | `-TextComment 0x5575d02ed950 <line:2089:3, col:67> Text=" sys_slist_t object. Upon completion, the original list is empty."
|   |-ParagraphComment 0x5575d02ed9f0 <line:2091:3>
|   | `-TextComment 0x5575d02ed9c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02eda10 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02eda70 <col:9, col:31>
|   |   `-TextComment 0x5575d02eda40 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02edac0 <line:2093:3>
|   | `-TextComment 0x5575d02eda90 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02edae0 <col:4, line:2094:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02edb90 <line:2093:16, line:2094:3>
|   |   |-TextComment 0x5575d02edb40 <line:2093:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02edb60 <line:2094:3> Text=" "
|   |-ParamCommandComment 0x5575d02edbb0 <col:4, col:45> [in] implicitly Param="list" ParamIndex=1
|   | `-ParagraphComment 0x5575d02edc40 <col:15, col:45>
|   |   `-TextComment 0x5575d02edc10 <col:15, col:45> Text=" Pointer to sys_slist_t object."
|   |-ParagraphComment 0x5575d02edc90 <line:2096:3>
|   | `-TextComment 0x5575d02edc60 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02edcb0 <col:4, line:2097:3> Name="retval"
|   | `-ParagraphComment 0x5575d02edd30 <line:2096:11, line:2097:3>
|   |   |-TextComment 0x5575d02edce0 <line:2096:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d02edd00 <line:2097:3> Text=" "
|   `-BlockCommandComment 0x5575d02edd50 <col:4, col:34> Name="retval"
|     `-ParagraphComment 0x5575d02eddb0 <col:11, col:34>
|       `-TextComment 0x5575d02edd80 <col:11, col:34> Text=" -EINVAL on invalid data"
|-FunctionDecl 0x5575d0242878 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2117:65> col:17 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x5575d02426e0 <col:29, col:45> col:45 queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d0242758 <col:52, col:58> col:58 timeout 's32_t':'int'
| `-FullComment 0x5575d02ee510 <line:2102:3, line:2115:48>
|   |-ParagraphComment 0x5575d02eded0 <line:2102:3>
|   | `-TextComment 0x5575d02edea0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02edef0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5575d02edf50 <col:10, col:38>
|   |   `-TextComment 0x5575d02edf20 <col:10, col:38> Text=" Get an element from a queue."
|   |-ParagraphComment 0x5575d02ee040 <line:2104:3, line:2105:46>
|   | |-TextComment 0x5575d02edf70 <line:2104:3, col:45> Text=" This routine removes first data item from "
|   | |-InlineCommandComment 0x5575d02edfc0 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5575d02edfe0 <col:55, col:76> Text=" The first word of the"
|   | `-TextComment 0x5575d02ee000 <line:2105:3, col:46> Text=" data item is reserved for the kernel's use."
|   |-ParagraphComment 0x5575d02ee090 <line:2107:3>
|   | `-TextComment 0x5575d02ee060 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ee0b0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5575d02ee190 <col:9, col:72>
|   |   |-TextComment 0x5575d02ee0e0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5575d02ee130 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5575d02ee150 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5575d02ee1e0 <line:2109:3>
|   | `-TextComment 0x5575d02ee1b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ee200 <col:4, line:2110:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ee2b0 <line:2109:16, line:2110:3>
|   |   |-TextComment 0x5575d02ee260 <line:2109:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02ee280 <line:2110:3> Text=" "
|   |-ParamCommandComment 0x5575d02ee2d0 <col:4, line:2112:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ee3b0 <line:2110:18, line:2112:28>
|   |   |-TextComment 0x5575d02ee330 <line:2110:18, col:71> Text=" Non-negative waiting period to obtain a data item (in"
|   |   |-TextComment 0x5575d02ee350 <line:2111:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5575d02ee370 <line:2112:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5575d02ee400 <line:2114:3>
|   | `-TextComment 0x5575d02ee3d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ee420 <col:4, line:2115:48> Name="return"
|     `-ParagraphComment 0x5575d02ee4a0 <line:2114:11, line:2115:48>
|       |-TextComment 0x5575d02ee450 <line:2114:11, col:67> Text=" Address of the data item if successful; NULL if returned"
|       `-TextComment 0x5575d02ee470 <line:2115:3, col:48> Text=" without waiting, or waiting period timed out."
|-FunctionDecl 0x5575d0242b20 <line:2133:1, line:2136:1> line:2133:20 k_queue_remove 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5575d0242980 <col:35, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d0242a00 <col:58, col:64> col:64 used data 'void *'
| |-CompoundStmt 0x5575d0242dc8 <line:2134:1, line:2136:1>
| | `-ReturnStmt 0x5575d0242d88 <line:2135:2, col:72>
| |   `-CallExpr 0x5575d0242d58 <col:9, col:72> 'bool'
| |     |-ImplicitCastExpr 0x5575d0242d40 <col:9> 'bool (*)(sys_sflist_t *, sys_sfnode_t *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d0242bd0 <col:9> 'bool (sys_sflist_t *, sys_sfnode_t *)' Function 0x5575d0194730 'sys_sflist_find_and_remove' 'bool (sys_sflist_t *, sys_sfnode_t *)'
| |     |-UnaryOperator 0x5575d0242c58 <col:36, col:44> 'sys_sflist_t *' prefix '&' cannot overflow
| |     | `-MemberExpr 0x5575d0242c28 <col:37, col:44> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5575d023fea0
| |     |   `-ImplicitCastExpr 0x5575d0242c10 <col:37> 'struct k_queue *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5575d0242bf0 <col:37> 'struct k_queue *' lvalue ParmVar 0x5575d0242980 'queue' 'struct k_queue *'
| |     `-CStyleCastExpr 0x5575d0242cb8 <col:52, col:68> 'sys_sfnode_t *' <BitCast>
| |       `-ImplicitCastExpr 0x5575d0242ca0 <col:68> 'void *' <LValueToRValue> part_of_explicit_cast
| |         `-DeclRefExpr 0x5575d0242c70 <col:68> 'void *' lvalue ParmVar 0x5575d0242a00 'data' 'void *'
| `-FullComment 0x5575d02eeb30 <line:2120:3, line:2131:40>
|   |-ParagraphComment 0x5575d02ee5b0 <line:2120:3>
|   | `-TextComment 0x5575d02ee580 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ee5d0 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02ee630 <col:10, col:41>
|   |   `-TextComment 0x5575d02ee600 <col:10, col:41> Text=" Remove an element from a queue."
|   |-ParagraphComment 0x5575d02ee750 <line:2122:3, line:2124:76>
|   | |-TextComment 0x5575d02ee650 <line:2122:3, col:39> Text=" This routine removes data item from "
|   | |-InlineCommandComment 0x5575d02ee6a0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5575d02ee6c0 <col:49, col:70> Text=" The first word of the"
|   | |-TextComment 0x5575d02ee6e0 <line:2123:3, col:77> Text=" data item is reserved for the kernel's use. Removing elements from k_queue"
|   | `-TextComment 0x5575d02ee700 <line:2124:3, col:76> Text=" rely on sys_slist_find_and_remove which is not a constant time operation."
|   |-ParagraphComment 0x5575d02ee7a0 <line:2126:3>
|   | `-TextComment 0x5575d02ee770 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ee7c0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x5575d02ee820 <col:9, col:30>
|   |   `-TextComment 0x5575d02ee7f0 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x5575d02ee870 <line:2128:3>
|   | `-TextComment 0x5575d02ee840 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ee890 <col:4, line:2129:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ee940 <line:2128:16, line:2129:3>
|   |   |-TextComment 0x5575d02ee8f0 <line:2128:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02ee910 <line:2129:3> Text=" "
|   |-ParamCommandComment 0x5575d02ee960 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ee9f0 <col:15, col:40>
|   |   `-TextComment 0x5575d02ee9c0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5575d02eea40 <line:2131:3>
|   | `-TextComment 0x5575d02eea10 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02eea60 <col:4, col:40> Name="return"
|     `-ParagraphComment 0x5575d02eeac0 <col:11, col:40>
|       `-TextComment 0x5575d02eea90 <col:11, col:40> Text=" true if data item was removed"
|-FunctionDecl 0x5575d0242f20 <line:2152:1, line:2164:1> line:2152:20 k_queue_unique_append 'bool (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5575d0242e08 <col:42, col:58> col:58 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d0242e88 <col:65, col:71> col:71 used data 'void *'
| |-CompoundStmt 0x5575d0243cc8 <line:2153:1, line:2164:1>
| | |-DeclStmt 0x5575d0243048 <line:2154:2, col:20>
| | | `-VarDecl 0x5575d0242fe0 <col:2, col:16> col:16 used test 'sys_sfnode_t *'
| | |-ForStmt 0x5575d0243ae0 </vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:2, /vagrant/ext/zephyros/zephyr/include/kernel.h:2160:2>
| | | |-BinaryOperator 0x5575d0243160 <line:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x5575d0243060 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x5575d0242fe0 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x5575d0243138 <<scratch space>:153:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:15:47> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x5575d0243120 <<scratch space>:153:1> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5575d0243080 <col:1> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
| | | |   `-UnaryOperator 0x5575d0243108 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:27, col:35> 'sys_sflist_t *' prefix '&' cannot overflow
| | | |     `-MemberExpr 0x5575d02430d8 <col:28, col:35> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5575d023fea0
| | | |       `-ImplicitCastExpr 0x5575d02430c0 <col:28> 'struct k_queue *' <LValueToRValue>
| | | |         `-DeclRefExpr 0x5575d02430a0 <col:28> 'struct k_queue *' lvalue ParmVar 0x5575d0242e08 'queue' 'struct k_queue *'
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x5575d0243890 <col:43, /usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:24> 'int' '!='
| | | | |-ImplicitCastExpr 0x5575d0243220 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x5575d0243180 <col:43> 'sys_sfnode_t *' lvalue Var 0x5575d0242fe0 'test' 'sys_sfnode_t *'
| | | | `-ImplicitCastExpr 0x5575d0243238 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'sys_sfnode_t *' <BitCast>
| | | |   `-ParenExpr 0x5575d0243200 <col:14, col:24> 'void *'
| | | |     `-CStyleCastExpr 0x5575d02431d8 <col:15, col:23> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x5575d02431a0 <col:23> 'int' 0
| | | |-BinaryOperator 0x5575d0243968 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *' '='
| | | | |-DeclRefExpr 0x5575d02438b0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' lvalue Var 0x5575d0242fe0 'test' 'sys_sfnode_t *'
| | | | `-CallExpr 0x5575d0243928 <<scratch space>:155:1, /vagrant/ext/zephyros/zephyr/include/sys/list_gen.h:16:48> 'sys_sfnode_t *'
| | | |   |-ImplicitCastExpr 0x5575d0243910 <<scratch space>:155:1> 'sys_sfnode_t *(*)(sys_sfnode_t *)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5575d02438d0 <col:1> 'sys_sfnode_t *(sys_sfnode_t *)' Function 0x5575d01a2728 'sys_sflist_peek_next' 'sys_sfnode_t *(sys_sfnode_t *)'
| | | |   `-ImplicitCastExpr 0x5575d0243950 </vagrant/ext/zephyros/zephyr/include/kernel.h:2156:43> 'sys_sfnode_t *' <LValueToRValue>
| | | |     `-DeclRefExpr 0x5575d02438f0 <col:43> 'sys_sfnode_t *' lvalue Var 0x5575d0242fe0 'test' 'sys_sfnode_t *'
| | | `-CompoundStmt 0x5575d0243ac8 <col:49, line:2160:2>
| | |   `-IfStmt 0x5575d0243ab0 <line:2157:3, line:2159:3>
| | |     |-BinaryOperator 0x5575d0243a30 <line:2157:7, col:32> 'int' '=='
| | |     | |-ImplicitCastExpr 0x5575d0243a18 <col:7> 'sys_sfnode_t *' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x5575d0243988 <col:7> 'sys_sfnode_t *' lvalue Var 0x5575d0242fe0 'test' 'sys_sfnode_t *'
| | |     | `-CStyleCastExpr 0x5575d02439f0 <col:15, col:32> 'sys_sfnode_t *' <BitCast>
| | |     |   `-ImplicitCastExpr 0x5575d02439d8 <col:32> 'void *' <LValueToRValue> part_of_explicit_cast
| | |     |     `-DeclRefExpr 0x5575d02439a8 <col:32> 'void *' lvalue ParmVar 0x5575d0242e88 'data' 'void *'
| | |     `-CompoundStmt 0x5575d0243a98 <col:38, line:2159:3>
| | |       `-ReturnStmt 0x5575d0243a88 <line:2158:4, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16>
| | |         `-ImplicitCastExpr 0x5575d0243a70 <col:16> 'bool' <IntegralToBoolean>
| | |           `-IntegerLiteral 0x5575d0243a50 <col:16> 'int' 0
| | |-CallExpr 0x5575d0243bf8 </vagrant/ext/zephyros/zephyr/include/kernel.h:2162:2, col:28> 'void'
| | | |-ImplicitCastExpr 0x5575d0243be0 <col:2> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x5575d0243b18 <col:2> 'void (struct k_queue *, void *)' Function 0x5575d0241400 'k_queue_append' 'void (struct k_queue *, void *)'
| | | |-ImplicitCastExpr 0x5575d0243c28 <col:17> 'struct k_queue *' <LValueToRValue>
| | | | `-DeclRefExpr 0x5575d0243b38 <col:17> 'struct k_queue *' lvalue ParmVar 0x5575d0242e08 'queue' 'struct k_queue *'
| | | `-ImplicitCastExpr 0x5575d0243c40 <col:24> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575d0243b58 <col:24> 'void *' lvalue ParmVar 0x5575d0242e88 'data' 'void *'
| | `-ReturnStmt 0x5575d0243c90 <line:2163:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:14:16>
| |   `-ImplicitCastExpr 0x5575d0243c78 <col:16> 'bool' <IntegralToBoolean>
| |     `-IntegerLiteral 0x5575d0243c58 <col:16> 'int' 1
| `-FullComment 0x5575d02ef160 </vagrant/ext/zephyros/zephyr/include/kernel.h:2139:3, line:2150:52>
|   |-ParagraphComment 0x5575d02eebd0 <line:2139:3>
|   | `-TextComment 0x5575d02eeba0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02eebf0 <col:4, col:72> Name="brief"
|   | `-ParagraphComment 0x5575d02eec50 <col:10, col:72>
|   |   `-TextComment 0x5575d02eec20 <col:10, col:72> Text=" Append an element to a queue only if it's not present already."
|   |-ParagraphComment 0x5575d02eed70 <line:2141:3, line:2143:78>
|   | |-TextComment 0x5575d02eec70 <line:2141:3, col:37> Text=" This routine appends data item to "
|   | |-InlineCommandComment 0x5575d02eecc0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="queue."
|   | |-TextComment 0x5575d02eece0 <col:47, col:73> Text=" The first word of the data"
|   | |-TextComment 0x5575d02eed00 <line:2142:3, col:71> Text=" item is reserved for the kernel's use. Appending elements to k_queue"
|   | `-TextComment 0x5575d02eed20 <line:2143:3, col:78> Text=" relies on sys_slist_is_node_in_list which is not a constant time operation."
|   |-ParagraphComment 0x5575d02eedc0 <line:2145:3>
|   | `-TextComment 0x5575d02eed90 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02eede0 <col:4, col:30> Name="note"
|   | `-ParagraphComment 0x5575d02eee40 <col:9, col:30>
|   |   `-TextComment 0x5575d02eee10 <col:9, col:30> Text=" Can be called by ISRs"
|   |-ParagraphComment 0x5575d02eee90 <line:2147:3>
|   | `-TextComment 0x5575d02eee60 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02eeeb0 <col:4, line:2148:3> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02eef60 <line:2147:16, line:2148:3>
|   |   |-TextComment 0x5575d02eef10 <line:2147:16, col:37> Text=" Address of the queue."
|   |   `-TextComment 0x5575d02eef30 <line:2148:3> Text=" "
|   |-ParamCommandComment 0x5575d02eef80 <col:4, col:40> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ef020 <col:15, col:40>
|   |   `-TextComment 0x5575d02eefe0 <col:15, col:40> Text=" Address of the data item."
|   |-ParagraphComment 0x5575d02ef070 <line:2150:3>
|   | `-TextComment 0x5575d02ef040 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ef090 <col:4, col:52> Name="return"
|     `-ParagraphComment 0x5575d02ef0f0 <col:11, col:52>
|       `-TextComment 0x5575d02ef0c0 <col:11, col:52> Text=" true if data item was added, false if not"
|-FunctionDecl 0x5575d0243e38 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2179:53> col:15 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d0243d20 <col:32, col:48> col:48 queue 'struct k_queue *'
| `-FullComment 0x5575d02ef6a0 <line:2167:3, line:2177:34>
|   |-ParagraphComment 0x5575d02ef200 <line:2167:3>
|   | `-TextComment 0x5575d02ef1d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ef220 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5575d02ef280 <col:10, col:56>
|   |   `-TextComment 0x5575d02ef250 <col:10, col:56> Text=" Query a queue to see if it has data available."
|   |-ParagraphComment 0x5575d02ef2f0 <line:2169:3, line:2170:59>
|   | |-TextComment 0x5575d02ef2a0 <line:2169:3, col:77> Text=" Note that the data might be already gone by the time this function returns"
|   | `-TextComment 0x5575d02ef2c0 <line:2170:3, col:59> Text=" if other threads are also trying to read from the queue."
|   |-ParagraphComment 0x5575d02ef340 <line:2172:3>
|   | `-TextComment 0x5575d02ef310 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ef360 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02ef3c0 <col:9, col:31>
|   |   `-TextComment 0x5575d02ef390 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02ef410 <line:2174:3>
|   | `-TextComment 0x5575d02ef3e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ef430 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ef4c0 <col:16, col:37>
|   |   `-TextComment 0x5575d02ef490 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5575d02ef510 <line:2176:3>
|   | `-TextComment 0x5575d02ef4e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ef530 <col:4, line:2177:3> Name="return"
|   | `-ParagraphComment 0x5575d02ef5b0 <line:2176:11, line:2177:3>
|   |   |-TextComment 0x5575d02ef560 <line:2176:11, col:42> Text=" Non-zero if the queue is empty."
|   |   `-TextComment 0x5575d02ef580 <line:2177:3> Text=" "
|   `-BlockCommandComment 0x5575d02ef5d0 <col:4, col:34> Name="return"
|     `-ParagraphComment 0x5575d02ef630 <col:11, col:34>
|       `-TextComment 0x5575d02ef600 <col:11, col:34> Text=" 0 if data is available."
|-FunctionDecl 0x5575d0243fa0 <line:2181:1, line:2184:1> line:2181:19 used z_impl_k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d0243f08 <col:43, col:59> col:59 used queue 'struct k_queue *'
| `-CompoundStmt 0x5575d02441a8 <line:2182:1, line:2184:1>
|   `-ReturnStmt 0x5575d0244168 <line:2183:2, col:48>
|     `-CStyleCastExpr 0x5575d0244140 <col:9, col:48> 'int' <IntegralCast>
|       `-CallExpr 0x5575d0244100 <col:14, col:48> 'bool'
|         |-ImplicitCastExpr 0x5575d02440e8 <col:14> 'bool (*)(sys_sflist_t *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575d0244048 <col:14> 'bool (sys_sflist_t *)' Function 0x5575d01a1ec8 'sys_sflist_is_empty' 'bool (sys_sflist_t *)'
|         `-UnaryOperator 0x5575d02440d0 <col:34, col:42> 'sys_sflist_t *' prefix '&' cannot overflow
|           `-MemberExpr 0x5575d02440a0 <col:35, col:42> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5575d023fea0
|             `-ImplicitCastExpr 0x5575d0244088 <col:35> 'struct k_queue *' <LValueToRValue>
|               `-DeclRefExpr 0x5575d0244068 <col:35> 'struct k_queue *' lvalue ParmVar 0x5575d0243f08 'queue' 'struct k_queue *'
|-FunctionDecl 0x5575d02442f8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2195:56> col:17 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d02441e8 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x5575d02efa40 <line:2187:3, line:2193:51>
|   |-ParagraphComment 0x5575d02ef740 <line:2187:3>
|   | `-TextComment 0x5575d02ef710 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ef760 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02ef7c0 <col:10, col:44>
|   |   `-TextComment 0x5575d02ef790 <col:10, col:44> Text=" Peek element at the head of queue."
|   |-ParagraphComment 0x5575d02ef810 <line:2189:3, col:61>
|   | `-TextComment 0x5575d02ef7e0 <col:3, col:61> Text=" Return element from the head of queue without removing it."
|   |-ParagraphComment 0x5575d02ef860 <line:2191:3>
|   | `-TextComment 0x5575d02ef830 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ef880 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ef910 <col:16, col:37>
|   |   `-TextComment 0x5575d02ef8e0 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5575d02ef960 <line:2193:3>
|   | `-TextComment 0x5575d02ef930 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ef980 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x5575d02ef9e0 <col:11, col:51>
|       `-TextComment 0x5575d02ef9b0 <col:11, col:51> Text=" Head element, or NULL if queue is empty."
|-FunctionDecl 0x5575d0244460 <line:2197:1, line:2200:1> line:2197:21 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d02443c8 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x5575d0244728 <line:2198:1, line:2200:1>
|   `-ReturnStmt 0x5575d02446f0 <line:2199:2, col:70>
|     `-CallExpr 0x5575d02446a8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x5575d0244690 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0244508 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x5575d02403c8 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x5575d02445e0 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5575d02445c8 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5575d0244528 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0da0 'sys_sflist_peek_head' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x5575d02445b0 <col:48, col:56> 'sys_sflist_t *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x5575d0244580 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5575d023fea0
|       |     `-ImplicitCastExpr 0x5575d0244568 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5575d0244548 <col:49> 'struct k_queue *' lvalue ParmVar 0x5575d02443c8 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5575d02446d8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x5575d0244608 <col:16> 'int' 0
|-FunctionDecl 0x5575d0245170 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2211:56> col:17 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d0244768 <col:35, col:51> col:51 queue 'struct k_queue *'
| `-FullComment 0x5575d02efde0 <line:2203:3, line:2209:51>
|   |-ParagraphComment 0x5575d02efae0 <line:2203:3>
|   | `-TextComment 0x5575d02efab0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02efb00 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02efb60 <col:10, col:44>
|   |   `-TextComment 0x5575d02efb30 <col:10, col:44> Text=" Peek element at the tail of queue."
|   |-ParagraphComment 0x5575d02efbb0 <line:2205:3, col:61>
|   | `-TextComment 0x5575d02efb80 <col:3, col:61> Text=" Return element from the tail of queue without removing it."
|   |-ParagraphComment 0x5575d02efc00 <line:2207:3>
|   | `-TextComment 0x5575d02efbd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02efc20 <col:4, col:37> [in] implicitly Param="queue" ParamIndex=0
|   | `-ParagraphComment 0x5575d02efcb0 <col:16, col:37>
|   |   `-TextComment 0x5575d02efc80 <col:16, col:37> Text=" Address of the queue."
|   |-ParagraphComment 0x5575d02efd00 <line:2209:3>
|   | `-TextComment 0x5575d02efcd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02efd20 <col:4, col:51> Name="return"
|     `-ParagraphComment 0x5575d02efd80 <col:11, col:51>
|       `-TextComment 0x5575d02efd50 <col:11, col:51> Text=" Tail element, or NULL if queue is empty."
|-FunctionDecl 0x5575d02452d8 <line:2213:1, line:2216:1> line:2213:21 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d0245240 <col:46, col:62> col:62 used queue 'struct k_queue *'
| `-CompoundStmt 0x5575d0245568 <line:2214:1, line:2216:1>
|   `-ReturnStmt 0x5575d0245500 <line:2215:2, col:70>
|     `-CallExpr 0x5575d02454b8 <col:9, col:70> 'void *'
|       |-ImplicitCastExpr 0x5575d02454a0 <col:9> 'void *(*)(sys_sfnode_t *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0245380 <col:9> 'void *(sys_sfnode_t *, bool)' Function 0x5575d02403c8 'z_queue_node_peek' 'void *(sys_sfnode_t *, bool)'
|       |-CallExpr 0x5575d0245458 <col:27, col:62> 'sys_sfnode_t *'
|       | |-ImplicitCastExpr 0x5575d0245440 <col:27> 'sys_sfnode_t *(*)(sys_sflist_t *)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5575d02453a0 <col:27> 'sys_sfnode_t *(sys_sflist_t *)' Function 0x5575d01a0fc0 'sys_sflist_peek_tail' 'sys_sfnode_t *(sys_sflist_t *)'
|       | `-UnaryOperator 0x5575d0245428 <col:48, col:56> 'sys_sflist_t *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x5575d02453f8 <col:49, col:56> 'sys_sflist_t':'struct _sflist' lvalue ->data_q 0x5575d023fea0
|       |     `-ImplicitCastExpr 0x5575d02453e0 <col:49> 'struct k_queue *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5575d02453c0 <col:49> 'struct k_queue *' lvalue ParmVar 0x5575d0245240 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5575d02454e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'bool' <IntegralToBoolean>
|         `-IntegerLiteral 0x5575d0245480 <col:16> 'int' 0
|-RecordDecl 0x5575d0245580 prev 0x5575d021b518 </vagrant/ext/zephyros/zephyr/include/kernel.h:2310:1, line:2312:1> line:2310:8 struct k_fifo definition
| `-FieldDecl 0x5575d0245620 <line:2311:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-RecordDecl 0x5575d0245a38 prev 0x5575d021b5c8 <line:2525:1, line:2527:1> line:2525:8 struct k_lifo definition
| |-FullComment 0x5575d02eff00 <line:2523:4, col:7>
| | `-ParagraphComment 0x5575d02efed0 <col:4, col:7>
| |   |-TextComment 0x5575d02efe50 <col:4> Text=" "
| |   |-TextComment 0x5575d02efe70 <col:5> Text="@"
| |   `-TextComment 0x5575d02efe90 <col:6, col:7> Text="} "
| `-FieldDecl 0x5575d0245ad8 <line:2526:2, col:17> col:17 _queue 'struct k_queue':'struct k_queue'
|-TypedefDecl 0x5575d0245d18 <line:2641:1, col:19> col:19 referenced stack_data_t 'uintptr_t':'unsigned long'
| `-TypedefType 0x5575d01bb660 'uintptr_t' sugar
|   |-Typedef 0x5575d00ef720 'uintptr_t'
|   `-BuiltinType 0x5575d007b640 'unsigned long'
|-RecordDecl 0x5575d0245d70 prev 0x5575d021b678 <line:2643:1, line:2651:1> line:2643:8 struct k_stack definition
| |-FieldDecl 0x5575d0245e00 <line:2644:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5575d0245e70 <line:2645:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| |-FieldDecl 0x5575d0245f60 <line:2646:2, col:16> col:16 base 'stack_data_t *'
| |-FieldDecl 0x5575d0245fc0 <col:2, col:23> col:23 next 'stack_data_t *'
| |-FieldDecl 0x5575d0246020 <col:2, col:30> col:30 top 'stack_data_t *'
| `-FieldDecl 0x5575d0246080 <line:2650:2, col:7> col:7 flags 'u8_t':'unsigned char'
|-FunctionDecl 0x5575d0137320 <line:2686:1, line:2687:44> line:2686:6 k_stack_init 'void (struct k_stack *, stack_data_t *, u32_t)'
| |-ParmVarDecl 0x5575d01370f8 <col:19, col:35> col:35 stack 'struct k_stack *'
| |-ParmVarDecl 0x5575d0137170 <line:2687:5, col:19> col:19 buffer 'stack_data_t *'
| |-ParmVarDecl 0x5575d01371e8 <col:27, col:33> col:33 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x5575d02f04f0 <line:2675:3, line:2685:1>
|   |-ParagraphComment 0x5575d02effa0 <line:2675:3>
|   | `-TextComment 0x5575d02eff70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02effc0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5575d02f0020 <col:10, col:29>
|   |   `-TextComment 0x5575d02efff0 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x5575d02f0070 <line:2677:3, col:67>
|   | `-TextComment 0x5575d02f0040 <col:3, col:67> Text=" This routine initializes a stack object, prior to its first use."
|   |-ParagraphComment 0x5575d02f00c0 <line:2679:3>
|   | `-TextComment 0x5575d02f0090 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f00e0 <col:4, line:2680:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f0190 <line:2679:16, line:2680:3>
|   |   |-TextComment 0x5575d02f0140 <line:2679:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5575d02f0160 <line:2680:3> Text=" "
|   |-ParamCommandComment 0x5575d02f01b0 <col:4, line:2681:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f0260 <line:2680:17, line:2681:3>
|   |   |-TextComment 0x5575d02f0210 <line:2680:17, col:62> Text=" Address of array used to hold stacked values."
|   |   `-TextComment 0x5575d02f0230 <line:2681:3> Text=" "
|   |-ParamCommandComment 0x5575d02f0280 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=2
|   | `-ParagraphComment 0x5575d02f0310 <col:22, col:67>
|   |   `-TextComment 0x5575d02f02e0 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x5575d02f0360 <line:2683:3>
|   | `-TextComment 0x5575d02f0330 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f0380 <col:4, line:2685:1> Name="return"
|     `-ParagraphComment 0x5575d02f0480 <line:2683:11, line:2685:1>
|       |-TextComment 0x5575d02f03b0 <line:2683:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02f03d0 <line:2684:3> Text=" "
|       |-InlineCommandComment 0x5575d02f0420 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5575d02f0440 <line:2685:1> Text=" "
|-FunctionDecl 0x5575d01375c0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2706:25> line:2705:17 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x5575d0137430 <col:36, col:52> col:52 stack 'struct k_stack *'
| |-ParmVarDecl 0x5575d01374a8 <line:2706:8, col:14> col:14 num_entries 'u32_t':'unsigned int'
| `-FullComment 0x5575d02f0a70 <line:2691:3, line:2703:1>
|   |-ParagraphComment 0x5575d02f0590 <line:2691:3>
|   | `-TextComment 0x5575d02f0560 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f05b0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5575d02f0610 <col:10, col:29>
|   |   `-TextComment 0x5575d02f05e0 <col:10, col:29> Text=" Initialize a stack."
|   |-ParagraphComment 0x5575d02f06d0 <line:2693:3, line:2696:72>
|   | |-TextComment 0x5575d02f0630 <line:2693:3, col:76> Text=" This routine initializes a stack object, prior to its first use. Internal"
|   | |-TextComment 0x5575d02f0650 <line:2694:3, col:69> Text=" buffers will be allocated from the calling thread's resource pool."
|   | |-TextComment 0x5575d02f0670 <line:2695:3, col:66> Text=" This memory will be released if k_stack_cleanup() is called, or"
|   | `-TextComment 0x5575d02f0690 <line:2696:3, col:72> Text=" userspace is enabled and the stack object loses all references to it."
|   |-ParagraphComment 0x5575d02f0720 <line:2698:3>
|   | `-TextComment 0x5575d02f06f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f0740 <col:4, line:2699:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f07f0 <line:2698:16, line:2699:3>
|   |   |-TextComment 0x5575d02f07a0 <line:2698:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5575d02f07c0 <line:2699:3> Text=" "
|   |-ParamCommandComment 0x5575d02f0810 <col:4, col:67> [in] implicitly Param="num_entries" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f08a0 <col:22, col:67>
|   |   `-TextComment 0x5575d02f0870 <col:22, col:67> Text=" Maximum number of values that can be stacked."
|   |-ParagraphComment 0x5575d02f08f0 <line:2701:3>
|   | `-TextComment 0x5575d02f08c0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f0910 <col:4, line:2703:1> Name="return"
|     `-ParagraphComment 0x5575d02f0a10 <line:2701:11, line:2703:1>
|       |-TextComment 0x5575d02f0940 <line:2701:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|       |-TextComment 0x5575d02f0960 <line:2702:3> Text=" "
|       |-InlineCommandComment 0x5575d02f09b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5575d02f09d0 <line:2703:1> Text=" "
|-FunctionDecl 0x5575d01377d8 <line:2720:1, col:42> col:5 k_stack_cleanup 'int (struct k_stack *)'
| |-ParmVarDecl 0x5575d01376c0 <col:21, col:37> col:37 stack 'struct k_stack *'
| `-FullComment 0x5575d02f0f70 <line:2709:3, line:2719:1>
|   |-ParagraphComment 0x5575d02f0b10 <line:2709:3>
|   | `-TextComment 0x5575d02f0ae0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f0b30 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02f0b90 <col:10, col:44>
|   |   `-TextComment 0x5575d02f0b60 <col:10, col:44> Text=" Release a stack's allocated buffer"
|   |-ParagraphComment 0x5575d02f0c30 <line:2711:3, line:2713:46>
|   | |-TextComment 0x5575d02f0bb0 <line:2711:3, col:65> Text=" If a stack object was given a dynamically allocated buffer via"
|   | |-TextComment 0x5575d02f0bd0 <line:2712:3, col:70> Text=" k_stack_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x5575d02f0bf0 <line:2713:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x5575d02f0c80 <line:2715:3>
|   | `-TextComment 0x5575d02f0c50 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f0ca0 <col:4, line:2716:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f0d50 <line:2715:16, line:2716:3>
|   |   |-TextComment 0x5575d02f0d00 <line:2715:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5575d02f0d20 <line:2716:3> Text=" "
|   |-BlockCommandComment 0x5575d02f0d70 <col:4, line:2717:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f0df0 <line:2716:11, line:2717:3>
|   |   |-TextComment 0x5575d02f0da0 <line:2716:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d02f0dc0 <line:2717:3> Text=" "
|   `-BlockCommandComment 0x5575d02f0e10 <col:4, line:2719:1> Name="retval"
|     `-ParagraphComment 0x5575d02f0f10 <line:2717:11, line:2719:1>
|       |-TextComment 0x5575d02f0e40 <line:2717:11, col:46> Text=" -EAGAIN when object is still in use"
|       |-TextComment 0x5575d02f0e60 <line:2718:3> Text=" "
|       |-InlineCommandComment 0x5575d02f0eb0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5575d02f0ed0 <line:2719:1> Text=" "
|-FunctionDecl 0x5575d0137a68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2736:68> col:15 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x5575d01378d0 <col:28, col:44> col:44 stack 'struct k_stack *'
| |-ParmVarDecl 0x5575d0137948 <col:51, col:64> col:64 data 'stack_data_t':'unsigned long'
| `-FullComment 0x5575d02f16f0 <line:2723:3, line:2735:1>
|   |-ParagraphComment 0x5575d02f1020 <line:2723:3>
|   | `-TextComment 0x5575d02f0fe0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f1040 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02f10a0 <col:10, col:39>
|   |   `-TextComment 0x5575d02f1070 <col:10, col:39> Text=" Push an element onto a stack."
|   |-ParagraphComment 0x5575d02f11c0 <line:2725:3, col:55>
|   | |-TextComment 0x5575d02f10c0 <col:3, col:42> Text=" This routine adds a stack_data_t value "
|   | |-InlineCommandComment 0x5575d02f1110 <col:43, col:44> Name="a" RenderEmphasized Arg[0]="data"
|   | |-TextComment 0x5575d02f1130 <col:50, col:53> Text=" to "
|   | `-InlineCommandComment 0x5575d02f1180 <col:54, col:55> Name="a" RenderEmphasized Arg[0]="stack."
|   |-ParagraphComment 0x5575d02f1210 <line:2727:3>
|   | `-TextComment 0x5575d02f11e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f1230 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f1290 <col:9, col:31>
|   |   `-TextComment 0x5575d02f1260 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f12e0 <line:2729:3>
|   | `-TextComment 0x5575d02f12b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f1300 <col:4, line:2730:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f13b0 <line:2729:16, line:2730:3>
|   |   |-TextComment 0x5575d02f1360 <line:2729:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5575d02f1380 <line:2730:3> Text=" "
|   |-ParamCommandComment 0x5575d02f13d0 <col:4, col:44> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f1460 <col:15, col:44>
|   |   `-TextComment 0x5575d02f1430 <col:15, col:44> Text=" Value to push onto the stack."
|   |-ParagraphComment 0x5575d02f14b0 <line:2732:3>
|   | `-TextComment 0x5575d02f1480 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f14d0 <col:4, line:2733:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f1550 <line:2732:11, line:2733:3>
|   |   |-TextComment 0x5575d02f1500 <line:2732:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d02f1520 <line:2733:3> Text=" "
|   `-BlockCommandComment 0x5575d02f1570 <col:4, line:2735:1> Name="retval"
|     `-ParagraphComment 0x5575d02f1670 <line:2733:11, line:2735:1>
|       |-TextComment 0x5575d02f15a0 <line:2733:11, col:35> Text=" -ENOMEM if stack is full"
|       |-TextComment 0x5575d02f15c0 <line:2734:3> Text=" "
|       |-InlineCommandComment 0x5575d02f1610 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5575d02f1630 <line:2735:1> Text=" "
|-FunctionDecl 0x5575d0137da8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:2758:19> line:2757:15 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x5575d0137b70 <col:27, col:43> col:43 stack 'struct k_stack *'
| |-ParmVarDecl 0x5575d0137be8 <col:50, col:64> col:64 data 'stack_data_t *'
| |-ParmVarDecl 0x5575d0137c60 <line:2758:6, col:12> col:12 timeout 's32_t':'int'
| `-FullComment 0x5575d02f20e0 <line:2739:3, line:2756:1>
|   |-ParagraphComment 0x5575d02f1790 <line:2739:3>
|   | `-TextComment 0x5575d02f1760 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f17b0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5575d02f1810 <col:10, col:38>
|   |   `-TextComment 0x5575d02f17e0 <col:10, col:38> Text=" Pop an element from a stack."
|   |-ParagraphComment 0x5575d02f1960 <line:2741:3, line:2742:47>
|   | |-TextComment 0x5575d02f1830 <line:2741:3, col:50> Text=" This routine removes a stack_data_t value from "
|   | |-InlineCommandComment 0x5575d02f1880 <col:51, col:52> Name="a" RenderEmphasized Arg[0]="stack"
|   | |-TextComment 0x5575d02f18a0 <col:59, col:73> Text=" in a "last in,"
|   | |-TextComment 0x5575d02f18c0 <line:2742:3, col:45> Text=" first out" manner and stores the value in "
|   | `-InlineCommandComment 0x5575d02f1910 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="data."
|   |-ParagraphComment 0x5575d02f19b0 <line:2744:3>
|   | `-TextComment 0x5575d02f1980 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f19d0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5575d02f1ab0 <col:9, col:72>
|   |   |-TextComment 0x5575d02f1a00 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5575d02f1a50 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5575d02f1a70 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5575d02f1b00 <line:2746:3>
|   | `-TextComment 0x5575d02f1ad0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f1b20 <col:4, line:2747:3> [in] implicitly Param="stack" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f1bd0 <line:2746:16, line:2747:3>
|   |   |-TextComment 0x5575d02f1b80 <line:2746:16, col:37> Text=" Address of the stack."
|   |   `-TextComment 0x5575d02f1ba0 <line:2747:3> Text=" "
|   |-ParamCommandComment 0x5575d02f1bf0 <col:4, line:2748:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f1ca0 <line:2747:15, line:2748:3>
|   |   |-TextComment 0x5575d02f1c50 <line:2747:15, col:71> Text=" Address of area to hold the value popped from the stack."
|   |   `-TextComment 0x5575d02f1c70 <line:2748:3> Text=" "
|   |-ParamCommandComment 0x5575d02f1cc0 <col:4, line:2750:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5575d02f1da0 <line:2748:18, line:2750:28>
|   |   |-TextComment 0x5575d02f1d20 <line:2748:18, col:67> Text=" Non-negative waiting period to obtain a value (in"
|   |   |-TextComment 0x5575d02f1d40 <line:2749:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5575d02f1d60 <line:2750:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5575d02f1df0 <line:2752:3>
|   | `-TextComment 0x5575d02f1dc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f1e10 <col:4, line:2753:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f1e90 <line:2752:11, line:2753:3>
|   |   |-TextComment 0x5575d02f1e40 <line:2752:11, col:39> Text=" 0 Element popped from stack."
|   |   `-TextComment 0x5575d02f1e60 <line:2753:3> Text=" "
|   |-BlockCommandComment 0x5575d02f1eb0 <col:4, line:2754:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f1f30 <line:2753:11, line:2754:3>
|   |   |-TextComment 0x5575d02f1ee0 <line:2753:11, col:43> Text=" -EBUSY Returned without waiting."
|   |   `-TextComment 0x5575d02f1f00 <line:2754:3> Text=" "
|   `-BlockCommandComment 0x5575d02f1f50 <col:4, line:2756:1> Name="retval"
|     `-ParagraphComment 0x5575d02f2050 <line:2754:11, line:2756:1>
|       |-TextComment 0x5575d02f1f80 <line:2754:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5575d02f1fa0 <line:2755:3> Text=" "
|       |-InlineCommandComment 0x5575d02f1ff0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-STACK-001"
|       `-TextComment 0x5575d02f2010 <line:2756:1> Text=" "
|-RecordDecl 0x5575d0137eb8 <line:2780:1, col:8> col:8 struct k_work
| `-FullComment 0x5575d02f2200 <line:2778:4, col:7>
|   `-ParagraphComment 0x5575d02f21d0 <col:4, col:7>
|     |-TextComment 0x5575d02f2150 <col:4> Text=" "
|     |-TextComment 0x5575d02f2170 <col:5> Text="@"
|     `-TextComment 0x5575d02f2190 <col:6, col:7> Text="} "
|-RecordDecl 0x5575d0137f68 <line:2781:1, col:8> col:8 struct k_work_poll
|-TypedefDecl 0x5575d0139828 <line:2784:1, col:68> col:15 referenced _poller_cb_t 'int (*)(struct k_poll_event *, u32_t)'
| `-PointerType 0x5575d01397b0 'int (*)(struct k_poll_event *, u32_t)'
|   `-ParenType 0x5575d0139750 'int (struct k_poll_event *, u32_t)' sugar
|     `-FunctionProtoType 0x5575d0139710 'int (struct k_poll_event *, u32_t)' cdecl
|       |-BuiltinType 0x5575d007b580 'int'
|       |-PointerType 0x5575d0139590 'struct k_poll_event *'
|       | `-ElaboratedType 0x5575d0139520 'struct k_poll_event' sugar
|       |   `-RecordType 0x5575d0226d30 'struct k_poll_event'
|       |     `-Record 0x5575d0272b18 'k_poll_event'
|       `-TypedefType 0x5575d0113520 'u32_t' sugar
|         |-Typedef 0x5575d00efa30 'u32_t'
|         `-BuiltinType 0x5575d007b620 'unsigned int'
|-RecordDecl 0x5575d0139880 <line:2785:1, line:2789:1> line:2785:8 struct _poller definition
| |-FieldDecl 0x5575d0139938 <line:2786:2, col:16> col:16 is_polling 'volatile bool'
| |-FieldDecl 0x5575d01399b0 <line:2787:2, col:19> col:19 thread 'struct k_thread *'
| `-FieldDecl 0x5575d0139a38 <line:2788:2, col:15> col:15 cb '_poller_cb_t':'int (*)(struct k_poll_event *, u32_t)'
|-TypedefDecl 0x5575d0139d68 <line:2808:1, col:53> col:16 referenced k_work_handler_t 'void (*)(struct k_work *)'
| |-PointerType 0x5575d0139d00 'void (*)(struct k_work *)'
| | `-ParenType 0x5575d0139ca0 'void (struct k_work *)' sugar
| |   `-FunctionProtoType 0x5575d0139c60 'void (struct k_work *)' cdecl
| |     |-BuiltinType 0x5575d007b4e0 'void'
| |     `-PointerType 0x5575d0139b60 'struct k_work *'
| |       `-ElaboratedType 0x5575d0139af0 'struct k_work' sugar
| |         `-RecordType 0x5575d0137f40 'struct k_work'
| |           `-Record 0x5575d013a098 'k_work'
| `-FullComment 0x5575d02f2700 <line:2797:3, line:2807:1>
|   |-ParagraphComment 0x5575d02f22a0 <line:2797:3>
|   | `-TextComment 0x5575d02f2270 <col:3> Text=" "
|   |-VerbatimLineComment 0x5575d02f22c0 <col:4, col:29> Text=" k_work_handler_t"
|   |-ParagraphComment 0x5575d02f2330 <line:2798:3>
|   | `-TextComment 0x5575d02f2300 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f2350 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d02f23b0 <col:10, col:42>
|   |   `-TextComment 0x5575d02f2380 <col:10, col:42> Text=" Work item handler function type."
|   |-ParagraphComment 0x5575d02f2420 <line:2800:3, line:2801:52>
|   | |-TextComment 0x5575d02f23d0 <line:2800:3, col:69> Text=" A work item's handler function is executed by a workqueue's thread"
|   | `-TextComment 0x5575d02f23f0 <line:2801:3, col:52> Text=" when the work item is processed by the workqueue."
|   |-ParagraphComment 0x5575d02f2470 <line:2803:3>
|   | `-TextComment 0x5575d02f2440 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f2490 <col:4, col:40> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f2520 <col:15, col:40>
|   |   `-TextComment 0x5575d02f24f0 <col:15, col:40> Text=" Address of the work item."
|   |-ParagraphComment 0x5575d02f2570 <line:2805:3>
|   | `-TextComment 0x5575d02f2540 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f2590 <col:4, line:2807:1> Name="return"
|     `-ParagraphComment 0x5575d02f2690 <line:2805:11, line:2807:1>
|       |-TextComment 0x5575d02f25c0 <line:2805:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02f25e0 <line:2806:3> Text=" "
|       |-InlineCommandComment 0x5575d02f2630 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5575d02f2650 <line:2807:1> Text=" "
|-RecordDecl 0x5575d0139de8 <line:2814:1, line:2817:1> line:2814:8 invalid struct k_work_q definition
| |-FullComment 0x5575d02f2820 <line:2811:3, col:24>
| | `-ParagraphComment 0x5575d02f27f0 <col:3, col:24>
| |   |-TextComment 0x5575d02f2770 <col:3> Text=" "
| |   |-InlineCommandComment 0x5575d02f2790 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5575d02f27b0 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5575d0139eb8 <line:2815:2, col:17> col:17 referenced queue 'struct k_queue':'struct k_queue'
| `-FieldDecl 0x5575d0139f28 <line:2816:2, col:18> col:18 invalid thread 'struct k_thread':'struct k_thread'
|-EnumDecl 0x5575d0139f78 <line:2819:1, line:2821:1> line:2819:1
| `-EnumConstantDecl 0x5575d013a048 <line:2820:2> col:2 referenced K_WORK_STATE_PENDING 'int'
|-RecordDecl 0x5575d013a098 prev 0x5575d0137eb8 <line:2823:1, line:2827:1> line:2823:8 struct k_work definition
| |-FieldDecl 0x5575d013a130 <line:2824:2, col:8> col:8 _reserved 'void *'
| |-FieldDecl 0x5575d013a1b8 <line:2825:2, col:19> col:19 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FieldDecl 0x5575d013a2e0 <line:2826:2, col:18> col:11 referenced flags 'atomic_t [1]'
|-RecordDecl 0x5575d013a330 <line:2829:1, line:2833:1> line:2829:8 struct k_delayed_work definition
| |-FieldDecl 0x5575d013a3f8 <line:2830:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x5575d013a468 <line:2831:2, col:18> col:18 referenced timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x5575d013a678 <line:2832:2, col:19> col:19 work_q 'struct k_work_q *'
|-RecordDecl 0x5575d013a728 prev 0x5575d0137f68 <line:2835:1, line:2843:1> line:2835:8 struct k_work_poll definition
| |-FieldDecl 0x5575d013a7c8 <line:2836:2, col:16> col:16 work 'struct k_work':'struct k_work'
| |-FieldDecl 0x5575d013a878 <line:2837:2, col:17> col:17 poller 'struct _poller':'struct _poller'
| |-FieldDecl 0x5575d013a8f0 <line:2838:2, col:23> col:23 events 'struct k_poll_event *'
| |-FieldDecl 0x5575d013a958 <line:2839:2, col:6> col:6 num_events 'int'
| |-FieldDecl 0x5575d013a9b8 <line:2840:2, col:19> col:19 real_handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-FieldDecl 0x5575d013aa28 <line:2841:2, col:18> col:18 timeout 'struct _timeout':'struct _timeout'
| `-FieldDecl 0x5575d013aa90 <line:2842:2, col:6> col:6 poll_result 'int'
|-VarDecl 0x5575d013ab00 <line:2845:1, col:24> col:24 used k_sys_work_q 'struct k_work_q':'struct k_work_q' extern
|-FunctionDecl 0x5575d013adb0 <line:2886:1, line:2889:1> line:2886:20 k_work_init 'void (struct k_work *, k_work_handler_t)' static inline
| |-ParmVarDecl 0x5575d013ac20 <col:32, col:47> col:47 used work 'struct k_work *'
| |-ParmVarDecl 0x5575d013ac98 <col:53, col:70> col:70 used handler 'k_work_handler_t':'void (*)(struct k_work *)'
| |-CompoundStmt 0x5575d013b2b8 <line:2887:1, line:2889:1>
| | `-BinaryOperator 0x5575d013b270 <line:2888:2, line:2856:2> 'struct k_work':'struct k_work' '='
| |   |-UnaryOperator 0x5575d013ae98 <line:2888:2, col:3> 'struct k_work':'struct k_work' lvalue prefix '*' cannot overflow
| |   | `-ImplicitCastExpr 0x5575d013ae80 <col:3> 'struct k_work *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5575d013ae60 <col:3> 'struct k_work *' lvalue ParmVar 0x5575d013ac20 'work' 'struct k_work *'
| |   `-ImplicitCastExpr 0x5575d013b258 <col:10, line:2856:2> 'struct k_work':'struct k_work' <LValueToRValue>
| |     `-CompoundLiteralExpr 0x5575d013b230 <line:2888:10, line:2856:2> 'struct k_work':'struct k_work' lvalue
| |       `-InitListExpr 0x5575d013b168 <line:2852:2, line:2856:2> 'struct k_work':'struct k_work'
| |         |-ParenExpr 0x5575d013af30 </usr/local/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/include/stddef.h:395:14, col:24> 'void *'
| |         | `-CStyleCastExpr 0x5575d013af08 <col:15, col:23> 'void *' <NullToPointer>
| |         |   `-IntegerLiteral 0x5575d013aed0 <col:23> 'int' 0
| |         |-ImplicitCastExpr 0x5575d013b1c0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2888:44> 'k_work_handler_t':'void (*)(struct k_work *)' <LValueToRValue>
| |         | `-DeclRefExpr 0x5575d013af90 <col:44> 'k_work_handler_t':'void (*)(struct k_work *)' lvalue ParmVar 0x5575d013ac98 'handler' 'k_work_handler_t':'void (*)(struct k_work *)'
| |         `-InitListExpr 0x5575d013b1e8 <line:2855:11, col:15> 'atomic_t [1]'
| |           `-IntegerLiteral 0x5575d013aff0 <col:13> 'int' 0
| `-FullComment 0x5575d02f2d30 <line:2876:3, line:2885:1>
|   |-ParagraphComment 0x5575d02f28c0 <line:2876:3>
|   | `-TextComment 0x5575d02f2890 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f28e0 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5575d02f2940 <col:10, col:33>
|   |   `-TextComment 0x5575d02f2910 <col:10, col:33> Text=" Initialize a work item."
|   |-ParagraphComment 0x5575d02f2990 <line:2878:3, col:74>
|   | `-TextComment 0x5575d02f2960 <col:3, col:74> Text=" This routine initializes a workqueue work item, prior to its first use."
|   |-ParagraphComment 0x5575d02f29e0 <line:2880:3>
|   | `-TextComment 0x5575d02f29b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f2a00 <col:4, line:2881:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f2ab0 <line:2880:15, line:2881:3>
|   |   |-TextComment 0x5575d02f2a60 <line:2880:15, col:36> Text=" Address of work item."
|   |   `-TextComment 0x5575d02f2a80 <line:2881:3> Text=" "
|   |-ParamCommandComment 0x5575d02f2ad0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f2b60 <col:18, col:70>
|   |   `-TextComment 0x5575d02f2b30 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5575d02f2bb0 <line:2883:3>
|   | `-TextComment 0x5575d02f2b80 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f2bd0 <col:4, line:2885:1> Name="return"
|     `-ParagraphComment 0x5575d02f2cd0 <line:2883:11, line:2885:1>
|       |-TextComment 0x5575d02f2c00 <line:2883:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02f2c20 <line:2884:3> Text=" "
|       |-InlineCommandComment 0x5575d02f2c70 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5575d02f2c90 <line:2885:1> Text=" "
|-FunctionDecl 0x5575d013b4a0 <line:2913:1, line:2919:1> line:2913:20 used k_work_submit_to_queue 'void (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x5575d013b2f8 <col:43, col:60> col:60 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5575d013b388 <line:2914:8, col:23> col:23 used work 'struct k_work *'
| |-CompoundStmt 0x5575d013bd38 <line:2915:1, line:2919:1>
| | `-IfStmt 0x5575d013bcf8 <line:2916:2, line:2918:2>
| |   |-UnaryOperator 0x5575d013bb90 <line:2916:6, col:64> 'int' prefix '!' cannot overflow
| |   | `-CallExpr 0x5575d013bb48 <col:7, col:64> 'bool'
| |   |   |-ImplicitCastExpr 0x5575d013bb30 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5575d013b550 <col:7> 'bool (atomic_t *, int)' Function 0x5575d0118170 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| |   |   |-ImplicitCastExpr 0x5575d013bb78 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| |   |   | `-MemberExpr 0x5575d013b5a8 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x5575d013a2e0
| |   |   |   `-ImplicitCastExpr 0x5575d013b590 <col:31> 'struct k_work *' <LValueToRValue>
| |   |   |     `-DeclRefExpr 0x5575d013b570 <col:31> 'struct k_work *' lvalue ParmVar 0x5575d013b388 'work' 'struct k_work *'
| |   |   `-DeclRefExpr 0x5575d013bab0 <col:44> 'int' EnumConstant 0x5575d013a048 'K_WORK_STATE_PENDING' 'int'
| |   `-CompoundStmt 0x5575d013bce0 <col:67, line:2918:2>
| |     `-CallExpr 0x5575d013bc80 <line:2917:3, col:38> 'void'
| |       |-ImplicitCastExpr 0x5575d013bc68 <col:3> 'void (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d013bba8 <col:3> 'void (struct k_queue *, void *)' Function 0x5575d0241400 'k_queue_append' 'void (struct k_queue *, void *)'
| |       |-UnaryOperator 0x5575d013bc30 <col:18, col:27> 'struct k_queue *' prefix '&' cannot overflow
| |       | `-MemberExpr 0x5575d013bc00 <col:19, col:27> 'struct k_queue':'struct k_queue' lvalue ->queue 0x5575d0139eb8
| |       |   `-ImplicitCastExpr 0x5575d013bbe8 <col:19> 'struct k_work_q *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x5575d013bbc8 <col:19> 'struct k_work_q *' lvalue ParmVar 0x5575d013b2f8 'work_q' 'struct k_work_q *'
| |       `-ImplicitCastExpr 0x5575d013bcc8 <col:34> 'void *' <BitCast>
| |         `-ImplicitCastExpr 0x5575d013bcb0 <col:34> 'struct k_work *' <LValueToRValue>
| |           `-DeclRefExpr 0x5575d013bc48 <col:34> 'struct k_work *' lvalue ParmVar 0x5575d013b388 'work' 'struct k_work *'
| `-FullComment 0x5575d02f3600 <line:2892:3, line:2912:1>
|   |-ParagraphComment 0x5575d02f2dd0 <line:2892:3>
|   | `-TextComment 0x5575d02f2da0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f2df0 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5575d02f2e50 <col:10, col:29>
|   |   `-TextComment 0x5575d02f2e20 <col:10, col:29> Text=" Submit a work item."
|   |-ParagraphComment 0x5575d02f3080 <line:2894:3, line:2899:15>
|   | |-TextComment 0x5575d02f2e70 <line:2894:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x5575d02f2ec0 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5575d02f2ee0 <col:42, col:70> Text=" to be processed by workqueue"
|   | |-TextComment 0x5575d02f2f00 <line:2895:3> Text=" "
|   | |-InlineCommandComment 0x5575d02f2f50 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x5575d02f2f70 <col:14, col:74> Text=" If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x5575d02f2f90 <line:2896:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x5575d02f2fb0 <line:2897:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x5575d02f2fd0 <line:2898:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x5575d02f2ff0 <line:2899:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x5575d02f30d0 <line:2901:3>
|   | `-TextComment 0x5575d02f30a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f30f0 <col:4, line:2903:20> Name="warning"
|   | `-ParagraphComment 0x5575d02f3170 <line:2902:3, line:2903:20>
|   |   |-TextComment 0x5575d02f3120 <line:2902:3, col:73> Text=" A submitted work item must not be modified until it has been processed"
|   |   `-TextComment 0x5575d02f3140 <line:2903:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x5575d02f31c0 <line:2905:3>
|   | `-TextComment 0x5575d02f3190 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f31e0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f3240 <col:9, col:31>
|   |   `-TextComment 0x5575d02f3210 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f3290 <line:2907:3>
|   | `-TextComment 0x5575d02f3260 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f32b0 <col:4, line:2908:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f3360 <line:2907:17, line:2908:3>
|   |   |-TextComment 0x5575d02f3310 <line:2907:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5575d02f3330 <line:2908:3> Text=" "
|   |-ParamCommandComment 0x5575d02f3380 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f3410 <col:15, col:36>
|   |   `-TextComment 0x5575d02f33e0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5575d02f3460 <line:2910:3>
|   | `-TextComment 0x5575d02f3430 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f3480 <col:4, line:2912:1> Name="return"
|     `-ParagraphComment 0x5575d02f3580 <line:2910:11, line:2912:1>
|       |-TextComment 0x5575d02f34b0 <line:2910:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02f34d0 <line:2911:3> Text=" "
|       |-InlineCommandComment 0x5575d02f3520 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5575d02f3540 <line:2912:1> Text=" "
|-FunctionDecl 0x5575d013bf28 <line:2942:1, line:2959:1> line:2942:19 k_work_submit_to_user_queue 'int (struct k_work_q *, struct k_work *)' static inline
| |-ParmVarDecl 0x5575d013bd78 <col:47, col:64> col:64 used work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5575d013be08 <line:2943:12, col:27> col:27 used work 'struct k_work *'
| |-CompoundStmt 0x5575d013c668 <line:2944:1, line:2959:1>
| | |-DeclStmt 0x5575d013c090 <line:2945:2, col:18>
| | | `-VarDecl 0x5575d013bff0 <col:2, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> /vagrant/ext/zephyros/zephyr/include/kernel.h:2945:6 used ret 'int' cinit
| | |   `-UnaryOperator 0x5575d013c078 <col:12, /vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/errno.h:47:15> 'int' prefix '-'
| | |     `-IntegerLiteral 0x5575d013c058 <col:15> 'int' 16
| | |-IfStmt 0x5575d013c5e0 </vagrant/ext/zephyros/zephyr/include/kernel.h:2947:2, line:2956:2>
| | | |-UnaryOperator 0x5575d013c1b0 <line:2947:6, col:64> 'int' prefix '!' cannot overflow
| | | | `-CallExpr 0x5575d013c168 <col:7, col:64> 'bool'
| | | |   |-ImplicitCastExpr 0x5575d013c150 <col:7> 'bool (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x5575d013c0a8 <col:7> 'bool (atomic_t *, int)' Function 0x5575d0118170 'atomic_test_and_set_bit' 'bool (atomic_t *, int)'
| | | |   |-ImplicitCastExpr 0x5575d013c198 <col:31, col:37> 'atomic_t *' <ArrayToPointerDecay>
| | | |   | `-MemberExpr 0x5575d013c100 <col:31, col:37> 'atomic_t [1]' lvalue ->flags 0x5575d013a2e0
| | | |   |   `-ImplicitCastExpr 0x5575d013c0e8 <col:31> 'struct k_work *' <LValueToRValue>
| | | |   |     `-DeclRefExpr 0x5575d013c0c8 <col:31> 'struct k_work *' lvalue ParmVar 0x5575d013be08 'work' 'struct k_work *'
| | | |   `-DeclRefExpr 0x5575d013c130 <col:44> 'int' EnumConstant 0x5575d013a048 'K_WORK_STATE_PENDING' 'int'
| | | `-CompoundStmt 0x5575d013c5c0 <col:67, line:2956:2>
| | |   |-BinaryOperator 0x5575d013c388 <line:2948:3, col:50> 'int' '='
| | |   | |-DeclRefExpr 0x5575d013c1c8 <col:3> 'int' lvalue Var 0x5575d013bff0 'ret' 'int'
| | |   | `-CallExpr 0x5575d013c328 <col:9, col:50> 's32_t':'int'
| | |   |   |-ImplicitCastExpr 0x5575d013c310 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
| | |   |   | `-DeclRefExpr 0x5575d013c1e8 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5575d02416a0 'k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
| | |   |   |-UnaryOperator 0x5575d013c270 <col:30, col:39> 'struct k_queue *' prefix '&' cannot overflow
| | |   |   | `-MemberExpr 0x5575d013c240 <col:31, col:39> 'struct k_queue':'struct k_queue' lvalue ->queue 0x5575d0139eb8
| | |   |   |   `-ImplicitCastExpr 0x5575d013c228 <col:31> 'struct k_work_q *' <LValueToRValue>
| | |   |   |     `-DeclRefExpr 0x5575d013c208 <col:31> 'struct k_work_q *' lvalue ParmVar 0x5575d013bd78 'work_q' 'struct k_work_q *'
| | |   |   `-ImplicitCastExpr 0x5575d013c370 <col:46> 'void *' <BitCast>
| | |   |     `-ImplicitCastExpr 0x5575d013c358 <col:46> 'struct k_work *' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x5575d013c288 <col:46> 'struct k_work *' lvalue ParmVar 0x5575d013be08 'work' 'struct k_work *'
| | |   `-IfStmt 0x5575d013c5a8 <line:2953:3, line:2955:3>
| | |     |-BinaryOperator 0x5575d013c400 <line:2953:7, col:14> 'int' '!='
| | |     | |-ImplicitCastExpr 0x5575d013c3e8 <col:7> 'int' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x5575d013c3a8 <col:7> 'int' lvalue Var 0x5575d013bff0 'ret' 'int'
| | |     | `-IntegerLiteral 0x5575d013c3c8 <col:14> 'int' 0
| | |     `-CompoundStmt 0x5575d013c590 <col:17, line:2955:3>
| | |       `-CallExpr 0x5575d013c548 <line:2954:4, col:54> 'void'
| | |         |-ImplicitCastExpr 0x5575d013c530 <col:4> 'void (*)(atomic_t *, int)' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x5575d013c420 <col:4> 'void (atomic_t *, int)' Function 0x5575d0118be0 'atomic_clear_bit' 'void (atomic_t *, int)'
| | |         |-ImplicitCastExpr 0x5575d013c578 <col:21, col:27> 'atomic_t *' <ArrayToPointerDecay>
| | |         | `-MemberExpr 0x5575d013c478 <col:21, col:27> 'atomic_t [1]' lvalue ->flags 0x5575d013a2e0
| | |         |   `-ImplicitCastExpr 0x5575d013c460 <col:21> 'struct k_work *' <LValueToRValue>
| | |         |     `-DeclRefExpr 0x5575d013c440 <col:21> 'struct k_work *' lvalue ParmVar 0x5575d013be08 'work' 'struct k_work *'
| | |         `-DeclRefExpr 0x5575d013c4a8 <col:34> 'int' EnumConstant 0x5575d013a048 'K_WORK_STATE_PENDING' 'int'
| | `-ReturnStmt 0x5575d013c630 <line:2958:2, col:9>
| |   `-ImplicitCastExpr 0x5575d013c618 <col:9> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d013c5f8 <col:9> 'int' lvalue Var 0x5575d013bff0 'ret' 'int'
| `-FullComment 0x5575d02f3e40 <line:2922:3, line:2941:1>
|   |-ParagraphComment 0x5575d02f36a0 <line:2922:3>
|   | `-TextComment 0x5575d02f3670 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f36c0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5575d02f3720 <col:10, col:53>
|   |   `-TextComment 0x5575d02f36f0 <col:10, col:53> Text=" Submit a work item to a user mode workqueue"
|   |-ParagraphComment 0x5575d02f3810 <line:2924:3, line:2928:71>
|   | |-TextComment 0x5575d02f3740 <line:2924:3, col:73> Text=" Submits a work item to a workqueue that runs in user mode. A temporary"
|   | |-TextComment 0x5575d02f3760 <line:2925:3, col:75> Text=" memory allocation is made from the caller's resource pool which is freed"
|   | |-TextComment 0x5575d02f3780 <line:2926:3, col:65> Text=" once the worker thread consumes the k_work item. The workqueue"
|   | |-TextComment 0x5575d02f37a0 <line:2927:3, col:80> Text=" thread must have memory access to the k_work item being submitted. The caller"
|   | `-TextComment 0x5575d02f37c0 <line:2928:3, col:71> Text=" must have permission granted on the work_q parameter's queue object."
|   |-ParagraphComment 0x5575d02f3860 <line:2930:3, col:61>
|   | `-TextComment 0x5575d02f3830 <col:3, col:61> Text=" Otherwise this works the same as k_work_submit_to_queue()."
|   |-ParagraphComment 0x5575d02f38b0 <line:2932:3>
|   | `-TextComment 0x5575d02f3880 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f38d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f3930 <col:9, col:31>
|   |   `-TextComment 0x5575d02f3900 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f3980 <line:2934:3>
|   | `-TextComment 0x5575d02f3950 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f39a0 <col:4, line:2935:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f3a50 <line:2934:17, line:2935:3>
|   |   |-TextComment 0x5575d02f3a00 <line:2934:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5575d02f3a20 <line:2935:3> Text=" "
|   |-ParamCommandComment 0x5575d02f3a70 <col:4, col:36> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f3b00 <col:15, col:36>
|   |   `-TextComment 0x5575d02f3ad0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5575d02f3b50 <line:2937:3>
|   | `-TextComment 0x5575d02f3b20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f3b70 <col:4, line:2938:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f3bf0 <line:2937:11, line:2938:3>
|   |   |-TextComment 0x5575d02f3ba0 <line:2937:11, col:64> Text=" -EBUSY if the work item was already in some workqueue"
|   |   `-TextComment 0x5575d02f3bc0 <line:2938:3> Text=" "
|   |-BlockCommandComment 0x5575d02f3c10 <col:4, line:2939:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f3c90 <line:2938:11, line:2939:3>
|   |   |-TextComment 0x5575d02f3c40 <line:2938:11, col:67> Text=" -ENOMEM if no memory for thread resource pool allocation"
|   |   `-TextComment 0x5575d02f3c60 <line:2939:3> Text=" "
|   `-BlockCommandComment 0x5575d02f3cb0 <col:4, line:2941:1> Name="retval"
|     `-ParagraphComment 0x5575d02f3db0 <line:2939:11, line:2941:1>
|       |-TextComment 0x5575d02f3ce0 <line:2939:11, col:20> Text=" 0 Success"
|       |-TextComment 0x5575d02f3d00 <line:2940:3> Text=" "
|       |-InlineCommandComment 0x5575d02f3d50 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5575d02f3d70 <line:2941:1> Text=" "
|-FunctionDecl 0x5575d013c7c0 <line:2974:1, line:2977:1> line:2974:20 k_work_pending 'bool (struct k_work *)' static inline
| |-ParmVarDecl 0x5575d013c6b8 <col:35, col:50> col:50 used work 'struct k_work *'
| |-CompoundStmt 0x5575d013ca28 <line:2975:1, line:2977:1>
| | `-ReturnStmt 0x5575d013c9e8 <line:2976:2, col:58>
| |   `-CallExpr 0x5575d013c988 <col:9, col:58> 'bool'
| |     |-ImplicitCastExpr 0x5575d013c970 <col:9> 'bool (*)(const atomic_t *, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d013c868 <col:9> 'bool (const atomic_t *, int)' Function 0x5575d0112af0 'atomic_test_bit' 'bool (const atomic_t *, int)'
| |     |-ImplicitCastExpr 0x5575d013c9d0 <col:25, col:31> 'const atomic_t *' <NoOp>
| |     | `-ImplicitCastExpr 0x5575d013c9b8 <col:25, col:31> 'atomic_t *' <ArrayToPointerDecay>
| |     |   `-MemberExpr 0x5575d013c8c0 <col:25, col:31> 'atomic_t [1]' lvalue ->flags 0x5575d013a2e0
| |     |     `-ImplicitCastExpr 0x5575d013c8a8 <col:25> 'struct k_work *' <LValueToRValue>
| |     |       `-DeclRefExpr 0x5575d013c888 <col:25> 'struct k_work *' lvalue ParmVar 0x5575d013c6b8 'work' 'struct k_work *'
| |     `-DeclRefExpr 0x5575d013c8f0 <col:38> 'int' EnumConstant 0x5575d013a048 'K_WORK_STATE_PENDING' 'int'
| `-FullComment 0x5575d02f4400 <line:2962:3, line:2973:1>
|   |-ParagraphComment 0x5575d02f3ee0 <line:2962:3>
|   | `-TextComment 0x5575d02f3eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f3f00 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d02f3f60 <col:10, col:42>
|   |   `-TextComment 0x5575d02f3f30 <col:10, col:42> Text=" Check if a work item is pending."
|   |-ParagraphComment 0x5575d02f4050 <line:2964:3, line:2965:9>
|   | |-TextComment 0x5575d02f3f80 <line:2964:3, col:39> Text=" This routine indicates if work item "
|   | |-InlineCommandComment 0x5575d02f3fd0 <col:40, col:41> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5575d02f3ff0 <col:47, col:74> Text=" is pending in a workqueue's"
|   | `-TextComment 0x5575d02f4010 <line:2965:3, col:9> Text=" queue."
|   |-ParagraphComment 0x5575d02f40a0 <line:2967:3>
|   | `-TextComment 0x5575d02f4070 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f40c0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f4120 <col:9, col:31>
|   |   `-TextComment 0x5575d02f40f0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f4170 <line:2969:3>
|   | `-TextComment 0x5575d02f4140 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f4190 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f4220 <col:15, col:36>
|   |   `-TextComment 0x5575d02f41f0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5575d02f4270 <line:2971:3>
|   | `-TextComment 0x5575d02f4240 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f4290 <col:4, line:2973:1> Name="return"
|     `-ParagraphComment 0x5575d02f4390 <line:2971:11, line:2973:1>
|       |-TextComment 0x5575d02f42c0 <line:2971:11, col:71> Text=" true if work item is pending, or false if it is not pending."
|       |-TextComment 0x5575d02f42e0 <line:2972:3> Text=" "
|       |-InlineCommandComment 0x5575d02f4330 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5575d02f4350 <line:2973:1> Text=" "
|-FunctionDecl 0x5575d013cea0 <line:2996:1, line:2998:34> line:2996:13 k_work_q_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x5575d013cbe0 <col:28, col:45> col:45 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5575d013cc58 <line:2997:7, col:25> col:25 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5575d013ccd0 <line:2998:7, col:14> col:14 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d013cd50 <col:26, col:30> col:30 prio 'int'
| `-FullComment 0x5575d02f4be0 <line:2980:3, line:2995:1>
|   |-ParagraphComment 0x5575d02f44a0 <line:2980:3>
|   | `-TextComment 0x5575d02f4470 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f44c0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5575d02f4520 <col:10, col:28>
|   |   `-TextComment 0x5575d02f44f0 <col:10, col:28> Text=" Start a workqueue."
|   |-ParagraphComment 0x5575d02f4610 <line:2982:3, line:2983:41>
|   | |-TextComment 0x5575d02f4540 <line:2982:3, col:33> Text=" This routine starts workqueue "
|   | |-InlineCommandComment 0x5575d02f4590 <col:34, col:35> Name="a" RenderEmphasized Arg[0]="work_q."
|   | |-TextComment 0x5575d02f45b0 <col:44, col:73> Text=" The workqueue spawns its work"
|   | `-TextComment 0x5575d02f45d0 <line:2983:3, col:41> Text=" processing thread, which runs forever."
|   |-ParagraphComment 0x5575d02f4660 <line:2985:3>
|   | `-TextComment 0x5575d02f4630 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f4680 <col:4, line:2986:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f4730 <line:2985:17, line:2986:3>
|   |   |-TextComment 0x5575d02f46e0 <line:2985:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5575d02f4700 <line:2986:3> Text=" "
|   |-ParamCommandComment 0x5575d02f4750 <col:4, line:2988:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f4830 <line:2986:16, line:2988:3>
|   |   |-TextComment 0x5575d02f47b0 <line:2986:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x5575d02f47d0 <line:2987:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x5575d02f47f0 <line:2988:3> Text=" "
|   |-ParamCommandComment 0x5575d02f4850 <col:4, line:2991:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x5575d02f4950 <line:2988:21, line:2991:3>
|   |   |-TextComment 0x5575d02f48b0 <line:2988:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x5575d02f48d0 <line:2989:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x5575d02f48f0 <line:2990:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x5575d02f4910 <line:2991:3> Text=" "
|   |-ParamCommandComment 0x5575d02f4970 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x5575d02f4a00 <col:15, col:51>
|   |   `-TextComment 0x5575d02f49d0 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x5575d02f4a50 <line:2993:3>
|   | `-TextComment 0x5575d02f4a20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f4a70 <col:4, line:2995:1> Name="return"
|     `-ParagraphComment 0x5575d02f4b70 <line:2993:11, line:2995:1>
|       |-TextComment 0x5575d02f4aa0 <line:2993:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02f4ac0 <line:2994:3> Text=" "
|       |-InlineCommandComment 0x5575d02f4b10 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5575d02f4b30 <line:2995:1> Text=" "
|-FunctionDecl 0x5575d013d1c8 <line:3020:1, line:3022:32> line:3020:13 k_work_q_user_start 'void (struct k_work_q *, k_thread_stack_t *, size_t, int)' extern
| |-ParmVarDecl 0x5575d013cfb0 <col:33, col:50> col:50 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5575d013d028 <line:3021:5, col:23> col:23 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5575d013d0a0 <line:3022:5, col:12> col:12 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d013d120 <col:24, col:28> col:28 prio 'int'
| `-FullComment 0x5575d02f53d0 <line:3001:3, line:3019:1>
|   |-ParagraphComment 0x5575d02f4c80 <line:3001:3>
|   | `-TextComment 0x5575d02f4c50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f4ca0 <col:4, col:40> Name="brief"
|   | `-ParagraphComment 0x5575d02f4d00 <col:10, col:40>
|   |   `-TextComment 0x5575d02f4cd0 <col:10, col:40> Text=" Start a workqueue in user mode"
|   |-ParagraphComment 0x5575d02f4df0 <line:3003:3, line:3007:21>
|   | |-TextComment 0x5575d02f4d20 <line:3003:3, col:77> Text=" This works identically to k_work_q_start() except it is callable from user"
|   | |-TextComment 0x5575d02f4d40 <line:3004:3, col:61> Text=" mode, and the worker thread created will run in user mode."
|   | |-TextComment 0x5575d02f4d60 <line:3005:3, col:74> Text=" The caller must have permissions granted on both the work_q parameter's"
|   | |-TextComment 0x5575d02f4d80 <line:3006:3, col:75> Text=" thread and queue objects, and the same restrictions on priority apply as"
|   | `-TextComment 0x5575d02f4da0 <line:3007:3, col:21> Text=" k_thread_create()."
|   |-ParagraphComment 0x5575d02f4e40 <line:3009:3>
|   | `-TextComment 0x5575d02f4e10 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f4e60 <col:4, line:3010:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f4f10 <line:3009:17, line:3010:3>
|   |   |-TextComment 0x5575d02f4ec0 <line:3009:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5575d02f4ee0 <line:3010:3> Text=" "
|   |-ParamCommandComment 0x5575d02f4f30 <col:4, line:3012:3> [in] implicitly Param="stack" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f5010 <line:3010:16, line:3012:3>
|   |   |-TextComment 0x5575d02f4f90 <line:3010:16, col:73> Text=" Pointer to work queue thread's stack space, as defined by"
|   |   |-TextComment 0x5575d02f4fb0 <line:3011:3, col:27> Text="		K_THREAD_STACK_DEFINE()"
|   |   `-TextComment 0x5575d02f4fd0 <line:3012:3> Text=" "
|   |-ParamCommandComment 0x5575d02f5040 <col:4, line:3015:3> [in] implicitly Param="stack_size" ParamIndex=2
|   | `-ParagraphComment 0x5575d02f5140 <line:3012:21, line:3015:3>
|   |   |-TextComment 0x5575d02f50a0 <line:3012:21, col:76> Text=" Size of the work queue thread's stack (in bytes), which"
|   |   |-TextComment 0x5575d02f50c0 <line:3013:3, col:48> Text="		should either be the same constant passed to"
|   |   |-TextComment 0x5575d02f50e0 <line:3014:3, col:68> Text="		K_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF()."
|   |   `-TextComment 0x5575d02f5100 <line:3015:3> Text=" "
|   |-ParamCommandComment 0x5575d02f5160 <col:4, col:51> [in] implicitly Param="prio" ParamIndex=3
|   | `-ParagraphComment 0x5575d02f51f0 <col:15, col:51>
|   |   `-TextComment 0x5575d02f51c0 <col:15, col:51> Text=" Priority of the work queue's thread."
|   |-ParagraphComment 0x5575d02f5240 <line:3017:3>
|   | `-TextComment 0x5575d02f5210 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f5260 <col:4, line:3019:1> Name="return"
|     `-ParagraphComment 0x5575d02f5360 <line:3017:11, line:3019:1>
|       |-TextComment 0x5575d02f5290 <line:3017:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02f52b0 <line:3018:3> Text=" "
|       |-InlineCommandComment 0x5575d02f5300 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5575d02f5320 <line:3019:1> Text=" "
|-FunctionDecl 0x5575d013d520 <line:3036:1, line:3037:29> line:3036:13 k_delayed_work_init 'void (struct k_delayed_work *, k_work_handler_t)' extern
| |-ParmVarDecl 0x5575d013d388 <col:33, col:56> col:56 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5575d013d400 <line:3037:5, col:22> col:22 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x5575d02f5900 <line:3025:3, line:3035:1>
|   |-ParagraphComment 0x5575d02f5470 <line:3025:3>
|   | `-TextComment 0x5575d02f5440 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f5490 <col:4, col:41> Name="brief"
|   | `-ParagraphComment 0x5575d02f54f0 <col:10, col:41>
|   |   `-TextComment 0x5575d02f54c0 <col:10, col:41> Text=" Initialize a delayed work item."
|   |-ParagraphComment 0x5575d02f5560 <line:3027:3, line:3028:17>
|   | |-TextComment 0x5575d02f5510 <line:3027:3, col:67> Text=" This routine initializes a workqueue delayed work item, prior to"
|   | `-TextComment 0x5575d02f5530 <line:3028:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x5575d02f55b0 <line:3030:3>
|   | `-TextComment 0x5575d02f5580 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f55d0 <col:4, line:3031:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f5680 <line:3030:15, line:3031:3>
|   |   |-TextComment 0x5575d02f5630 <line:3030:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5575d02f5650 <line:3031:3> Text=" "
|   |-ParamCommandComment 0x5575d02f56a0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f5730 <col:18, col:70>
|   |   `-TextComment 0x5575d02f5700 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5575d02f5780 <line:3033:3>
|   | `-TextComment 0x5575d02f5750 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f57a0 <col:4, line:3035:1> Name="return"
|     `-ParagraphComment 0x5575d02f58a0 <line:3033:11, line:3035:1>
|       |-TextComment 0x5575d02f57d0 <line:3033:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02f57f0 <line:3034:3> Text=" "
|       |-InlineCommandComment 0x5575d02f5840 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5575d02f5860 <line:3035:1> Text=" "
|-FunctionDecl 0x5575d013d868 <line:3071:1, line:3073:19> line:3071:12 used k_delayed_work_submit_to_queue 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' extern
| |-ParmVarDecl 0x5575d013d620 <col:43, col:60> col:60 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5575d013d6b0 <line:3072:8, col:31> col:31 work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5575d013d728 <line:3073:8, col:14> col:14 delay 's32_t':'int'
| `-FullComment 0x5575d02f6570 <line:3040:3, line:3070:1>
|   |-ParagraphComment 0x5575d02f59a0 <line:3040:3>
|   | `-TextComment 0x5575d02f5970 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f59c0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5575d02f5a20 <col:10, col:37>
|   |   `-TextComment 0x5575d02f59f0 <col:10, col:37> Text=" Submit a delayed work item."
|   |-ParagraphComment 0x5575d02f5c90 <line:3042:3, line:3046:37>
|   | |-TextComment 0x5575d02f5a40 <line:3042:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5575d02f5a90 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5575d02f5ab0 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x5575d02f5ad0 <line:3043:3> Text=" "
|   | |-InlineCommandComment 0x5575d02f5b20 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x5575d02f5b40 <col:13, col:30> Text=" after a delay of "
|   | |-InlineCommandComment 0x5575d02f5b90 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x5575d02f5bb0 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x5575d02f5bd0 <line:3044:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x5575d02f5bf0 <line:3045:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x5575d02f5c10 <line:3046:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x5575d02f5da0 <line:3048:3, line:3053:28>
|   | |-TextComment 0x5575d02f5cb0 <line:3048:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x5575d02f5cd0 <line:3049:3, col:65> Text=" counting down cancels the existing submission and restarts the"
|   | |-TextComment 0x5575d02f5cf0 <line:3050:3, col:61> Text=" countdown using the new delay.  Note that this behavior is"
|   | |-TextComment 0x5575d02f5d10 <line:3051:3, col:62> Text=" inherently subject to race conditions with the pre-existing"
|   | |-TextComment 0x5575d02f5d30 <line:3052:3, col:69> Text=" timeouts and work queue, so care must be taken to synchronize such"
|   | `-TextComment 0x5575d02f5d50 <line:3053:3, col:28> Text=" resubmissions externally."
|   |-ParagraphComment 0x5575d02f5df0 <line:3055:3>
|   | `-TextComment 0x5575d02f5dc0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f5e10 <col:4, line:3057:20> Name="warning"
|   | `-ParagraphComment 0x5575d02f5e90 <line:3056:3, line:3057:20>
|   |   |-TextComment 0x5575d02f5e40 <line:3056:3, col:71> Text=" A delayed work item must not be modified until it has been processed"
|   |   `-TextComment 0x5575d02f5e60 <line:3057:3, col:20> Text=" by the workqueue."
|   |-ParagraphComment 0x5575d02f5ee0 <line:3059:3>
|   | `-TextComment 0x5575d02f5eb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f5f00 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f5f60 <col:9, col:31>
|   |   `-TextComment 0x5575d02f5f30 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f5fb0 <line:3061:3>
|   | `-TextComment 0x5575d02f5f80 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f5fd0 <col:4, line:3062:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f6080 <line:3061:17, line:3062:3>
|   |   |-TextComment 0x5575d02f6030 <line:3061:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5575d02f6050 <line:3062:3> Text=" "
|   |-ParamCommandComment 0x5575d02f60a0 <col:4, line:3063:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f6150 <line:3062:15, line:3063:3>
|   |   |-TextComment 0x5575d02f6100 <line:3062:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5575d02f6120 <line:3063:3> Text=" "
|   |-ParamCommandComment 0x5575d02f6170 <col:4, line:3064:18> [in] implicitly Param="delay" ParamIndex=2
|   | `-ParagraphComment 0x5575d02f6220 <line:3063:16, line:3064:18>
|   |   |-TextComment 0x5575d02f61d0 <line:3063:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x5575d02f61f0 <line:3064:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x5575d02f6270 <line:3066:3>
|   | `-TextComment 0x5575d02f6240 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f6290 <col:4, line:3067:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f6310 <line:3066:11, line:3067:3>
|   |   |-TextComment 0x5575d02f62c0 <line:3066:11, col:41> Text=" 0 Work item countdown started."
|   |   `-TextComment 0x5575d02f62e0 <line:3067:3> Text=" "
|   |-BlockCommandComment 0x5575d02f6330 <col:4, line:3068:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f63b0 <line:3067:11, line:3068:3>
|   |   |-TextComment 0x5575d02f6360 <line:3067:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5575d02f6380 <line:3068:3> Text=" "
|   `-BlockCommandComment 0x5575d02f63d0 <col:4, line:3070:1> Name="retval"
|     `-ParagraphComment 0x5575d02f64d0 <line:3068:11, line:3070:1>
|       |-TextComment 0x5575d02f6400 <line:3068:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|       |-TextComment 0x5575d02f6420 <line:3069:3> Text=" "
|       |-InlineCommandComment 0x5575d02f6470 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5575d02f6490 <line:3070:1> Text=" "
|-FunctionDecl 0x5575d013da88 <line:3094:1, col:61> col:12 k_delayed_work_cancel 'int (struct k_delayed_work *)' extern
| |-ParmVarDecl 0x5575d013d970 <col:34, col:57> col:57 work 'struct k_delayed_work *'
| `-FullComment 0x5575d02f6d00 <line:3076:3, line:3093:1>
|   |-ParagraphComment 0x5575d02f6610 <line:3076:3>
|   | `-TextComment 0x5575d02f65e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f6630 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5575d02f6690 <col:10, col:37>
|   |   `-TextComment 0x5575d02f6660 <col:10, col:37> Text=" Cancel a delayed work item."
|   |-ParagraphComment 0x5575d02f6780 <line:3078:3, line:3080:12>
|   | |-TextComment 0x5575d02f66b0 <line:3078:3, col:60> Text=" This routine cancels the submission of delayed work item "
|   | |-InlineCommandComment 0x5575d02f6700 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x5575d02f6720 <line:3079:3, col:72> Text=" A delayed work item can only be canceled while its countdown is still"
|   | `-TextComment 0x5575d02f6740 <line:3080:3, col:12> Text=" underway."
|   |-ParagraphComment 0x5575d02f67d0 <line:3082:3>
|   | `-TextComment 0x5575d02f67a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f67f0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f6850 <col:9, col:31>
|   |   `-TextComment 0x5575d02f6820 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f68a0 <line:3084:3>
|   | `-TextComment 0x5575d02f6870 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f68c0 <col:4, line:3086:55> Name="note"
|   | `-ParagraphComment 0x5575d02f6970 <line:3084:9, line:3086:55>
|   |   |-TextComment 0x5575d02f68f0 <line:3084:9, col:69> Text=" The result of calling this on a k_delayed_work item that has"
|   |   |-TextComment 0x5575d02f6910 <line:3085:3, col:52> Text=" not been submitted (i.e. before the return of the"
|   |   `-TextComment 0x5575d02f6930 <line:3086:3, col:55> Text=" k_delayed_work_submit_to_queue() call) is undefined."
|   |-ParagraphComment 0x5575d02f69c0 <line:3088:3>
|   | `-TextComment 0x5575d02f6990 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f69e0 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f6a70 <col:15, col:44>
|   |   `-TextComment 0x5575d02f6a40 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x5575d02f6ac0 <line:3090:3>
|   | `-TextComment 0x5575d02f6a90 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f6ae0 <col:4, line:3091:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f6b60 <line:3090:11, line:3091:3>
|   |   |-TextComment 0x5575d02f6b10 <line:3090:11, col:42> Text=" 0 Work item countdown canceled."
|   |   `-TextComment 0x5575d02f6b30 <line:3091:3> Text=" "
|   `-BlockCommandComment 0x5575d02f6b80 <col:4, line:3093:1> Name="retval"
|     `-ParagraphComment 0x5575d02f6c80 <line:3091:11, line:3093:1>
|       |-TextComment 0x5575d02f6bb0 <line:3091:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|       |-TextComment 0x5575d02f6bd0 <line:3092:3> Text=" "
|       |-InlineCommandComment 0x5575d02f6c20 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5575d02f6c40 <line:3093:1> Text=" "
|-FunctionDecl 0x5575d0259910 <line:3118:1, line:3121:1> line:3118:20 k_work_submit 'void (struct k_work *)' static inline
| |-ParmVarDecl 0x5575d0259880 <col:34, col:49> col:49 used work 'struct k_work *'
| |-CompoundStmt 0x5575d0259b18 <line:3119:1, line:3121:1>
| | `-CallExpr 0x5575d0259aa8 <line:3120:2, col:44> 'void'
| |   |-ImplicitCastExpr 0x5575d0259a90 <col:2> 'void (*)(struct k_work_q *, struct k_work *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5575d02599b8 <col:2> 'void (struct k_work_q *, struct k_work *)' Function 0x5575d013b4a0 'k_work_submit_to_queue' 'void (struct k_work_q *, struct k_work *)'
| |   |-UnaryOperator 0x5575d02599f8 <col:25, col:26> 'struct k_work_q *' prefix '&' cannot overflow
| |   | `-DeclRefExpr 0x5575d02599d8 <col:26> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5575d013ab00 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |   `-ImplicitCastExpr 0x5575d0259ad8 <col:40> 'struct k_work *' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d0259a10 <col:40> 'struct k_work *' lvalue ParmVar 0x5575d0259880 'work' 'struct k_work *'
| `-FullComment 0x5575d02f74c0 <line:3097:3, line:3117:1>
|   |-ParagraphComment 0x5575d02f6da0 <line:3097:3>
|   | `-TextComment 0x5575d02f6d70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f6dc0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5575d02f6e20 <col:10, col:53>
|   |   `-TextComment 0x5575d02f6df0 <col:10, col:53> Text=" Submit a work item to the system workqueue."
|   |-ParagraphComment 0x5575d02f6fb0 <line:3099:3, line:3104:15>
|   | |-TextComment 0x5575d02f6e40 <line:3099:3, col:34> Text=" This routine submits work item "
|   | |-InlineCommandComment 0x5575d02f6e90 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5575d02f6eb0 <col:42, col:71> Text=" to be processed by the system"
|   | |-TextComment 0x5575d02f6ed0 <line:3100:3, col:74> Text=" workqueue. If the work item is already pending in the workqueue's queue"
|   | |-TextComment 0x5575d02f6ef0 <line:3101:3, col:74> Text=" as a result of an earlier submission, this routine has no effect on the"
|   | |-TextComment 0x5575d02f6f10 <line:3102:3, col:74> Text=" work item. If the work item has already been processed, or is currently"
|   | |-TextComment 0x5575d02f6f30 <line:3103:3, col:76> Text=" being processed, its work is considered complete and the work item can be"
|   | `-TextComment 0x5575d02f6f50 <line:3104:3, col:15> Text=" resubmitted."
|   |-ParagraphComment 0x5575d02f7000 <line:3106:3>
|   | `-TextComment 0x5575d02f6fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f7050 <col:4, line:3109:50> Name="warning"
|   | `-ParagraphComment 0x5575d02f7100 <line:3107:3, line:3109:50>
|   |   |-TextComment 0x5575d02f7080 <line:3107:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x5575d02f70a0 <line:3108:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x5575d02f70c0 <line:3109:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x5575d02f7150 <line:3111:3>
|   | `-TextComment 0x5575d02f7120 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f7170 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f71d0 <col:9, col:31>
|   |   `-TextComment 0x5575d02f71a0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f7220 <line:3113:3>
|   | `-TextComment 0x5575d02f71f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f7240 <col:4, col:36> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f72d0 <col:15, col:36>
|   |   `-TextComment 0x5575d02f72a0 <col:15, col:36> Text=" Address of work item."
|   |-ParagraphComment 0x5575d02f7320 <line:3115:3>
|   | `-TextComment 0x5575d02f72f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f7340 <col:4, line:3117:1> Name="return"
|     `-ParagraphComment 0x5575d02f7440 <line:3115:11, line:3117:1>
|       |-TextComment 0x5575d02f7370 <line:3115:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02f7390 <line:3116:3> Text=" "
|       |-InlineCommandComment 0x5575d02f73e0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-WORK-001"
|       `-TextComment 0x5575d02f7400 <line:3117:1> Text=" "
|-FunctionDecl 0x5575d0259cf8 <line:3156:1, line:3160:1> line:3156:19 k_delayed_work_submit 'int (struct k_delayed_work *, s32_t)' static inline
| |-ParmVarDecl 0x5575d0259b58 <col:41, col:64> col:64 used work 'struct k_delayed_work *'
| |-ParmVarDecl 0x5575d0259bd0 <line:3157:6, col:12> col:12 used delay 's32_t':'int'
| |-CompoundStmt 0x5575d0259f58 <line:3158:1, line:3160:1>
| | `-ReturnStmt 0x5575d0259f20 <line:3159:2, col:66>
| |   `-CallExpr 0x5575d0259eb8 <col:9, col:66> 'int'
| |     |-ImplicitCastExpr 0x5575d0259ea0 <col:9> 'int (*)(struct k_work_q *, struct k_delayed_work *, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d0259da8 <col:9> 'int (struct k_work_q *, struct k_delayed_work *, s32_t)' Function 0x5575d013d868 'k_delayed_work_submit_to_queue' 'int (struct k_work_q *, struct k_delayed_work *, s32_t)'
| |     |-UnaryOperator 0x5575d0259de8 <col:40, col:41> 'struct k_work_q *' prefix '&' cannot overflow
| |     | `-DeclRefExpr 0x5575d0259dc8 <col:41> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5575d013ab00 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x5575d0259ef0 <col:55> 'struct k_delayed_work *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d0259e00 <col:55> 'struct k_delayed_work *' lvalue ParmVar 0x5575d0259b58 'work' 'struct k_delayed_work *'
| |     `-ImplicitCastExpr 0x5575d0259f08 <col:61> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5575d0259e20 <col:61> 's32_t':'int' lvalue ParmVar 0x5575d0259bd0 'delay' 's32_t':'int'
| `-FullComment 0x5575d02f8040 <line:3124:3, line:3155:1>
|   |-ParagraphComment 0x5575d02f7560 <line:3124:3>
|   | `-TextComment 0x5575d02f7530 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f7580 <col:4, col:61> Name="brief"
|   | `-ParagraphComment 0x5575d02f75e0 <col:10, col:61>
|   |   `-TextComment 0x5575d02f75b0 <col:10, col:61> Text=" Submit a delayed work item to the system workqueue."
|   |-ParagraphComment 0x5575d02f77d0 <line:3126:3, line:3130:37>
|   | |-TextComment 0x5575d02f7600 <line:3126:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5575d02f7650 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5575d02f7670 <col:44, col:73> Text=" to be processed by the system"
|   | |-TextComment 0x5575d02f7690 <line:3127:3, col:30> Text=" workqueue after a delay of "
|   | |-InlineCommandComment 0x5575d02f76e0 <col:31, col:32> Name="a" RenderEmphasized Arg[0]="delay"
|   | |-TextComment 0x5575d02f7700 <col:39, col:74> Text=" milliseconds. The routine initiates"
|   | |-TextComment 0x5575d02f7720 <line:3128:3, col:78> Text=" an asynchronous countdown for the work item and then returns to the caller."
|   | |-TextComment 0x5575d02f7740 <line:3129:3, col:75> Text=" Only when the countdown completes is the work item actually submitted to"
|   | `-TextComment 0x5575d02f7760 <line:3130:3, col:37> Text=" the workqueue and becomes pending."
|   |-ParagraphComment 0x5575d02f7910 <line:3132:3, line:3138:72>
|   | |-TextComment 0x5575d02f77f0 <line:3132:3, col:68> Text=" Submitting a previously submitted delayed work item that is still"
|   | |-TextComment 0x5575d02f7810 <line:3133:3, col:75> Text=" counting down cancels the existing submission and restarts the countdown"
|   | |-TextComment 0x5575d02f7830 <line:3134:3, col:68> Text=" using the new delay. If the work item is currently pending on the"
|   | |-TextComment 0x5575d02f7850 <line:3135:3, col:74> Text=" workqueue's queue because the countdown has completed it is too late to"
|   | |-TextComment 0x5575d02f7870 <line:3136:3, col:77> Text=" resubmit the item, and resubmission fails without impacting the work item."
|   | |-TextComment 0x5575d02f7890 <line:3137:3, col:80> Text=" If the work item has already been processed, or is currently being processed,"
|   | `-TextComment 0x5575d02f78b0 <line:3138:3, col:72> Text=" its work is considered complete and the work item can be resubmitted."
|   |-ParagraphComment 0x5575d02f7960 <line:3140:3>
|   | `-TextComment 0x5575d02f7930 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f7980 <col:4, line:3143:50> Name="warning"
|   | `-ParagraphComment 0x5575d02f7a30 <line:3141:3, line:3143:50>
|   |   |-TextComment 0x5575d02f79b0 <line:3141:3, col:75> Text=" Work items submitted to the system workqueue should avoid using handlers"
|   |   |-TextComment 0x5575d02f79d0 <line:3142:3, col:71> Text=" that block or yield since this may prevent the system workqueue from"
|   |   `-TextComment 0x5575d02f79f0 <line:3143:3, col:50> Text=" processing other work items in a timely manner."
|   |-ParagraphComment 0x5575d02f7a80 <line:3145:3>
|   | `-TextComment 0x5575d02f7a50 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f7aa0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f7b00 <col:9, col:31>
|   |   `-TextComment 0x5575d02f7ad0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f7b50 <line:3147:3>
|   | `-TextComment 0x5575d02f7b20 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f7b70 <col:4, line:3148:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f7c20 <line:3147:15, line:3148:3>
|   |   |-TextComment 0x5575d02f7bd0 <line:3147:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5575d02f7bf0 <line:3148:3> Text=" "
|   |-ParamCommandComment 0x5575d02f7c40 <col:4, line:3149:18> [in] implicitly Param="delay" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f7cf0 <line:3148:16, line:3149:18>
|   |   |-TextComment 0x5575d02f7ca0 <line:3148:16, col:70> Text=" Non-negative delay before submitting the work item (in"
|   |   `-TextComment 0x5575d02f7cc0 <line:3149:3, col:18> Text="		milliseconds)."
|   |-ParagraphComment 0x5575d02f7d40 <line:3151:3>
|   | `-TextComment 0x5575d02f7d10 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f7d60 <col:4, line:3152:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f7de0 <line:3151:11, line:3152:3>
|   |   |-TextComment 0x5575d02f7d90 <line:3151:11, col:41> Text=" 0 Work item countdown started."
|   |   `-TextComment 0x5575d02f7db0 <line:3152:3> Text=" "
|   |-BlockCommandComment 0x5575d02f7e00 <col:4, line:3153:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f7e80 <line:3152:11, line:3153:3>
|   |   |-TextComment 0x5575d02f7e30 <line:3152:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5575d02f7e50 <line:3153:3> Text=" "
|   `-BlockCommandComment 0x5575d02f7ea0 <col:4, line:3155:1> Name="retval"
|     `-ParagraphComment 0x5575d02f7fa0 <line:3153:11, line:3155:1>
|       |-TextComment 0x5575d02f7ed0 <line:3153:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|       |-TextComment 0x5575d02f7ef0 <line:3154:3> Text=" "
|       |-InlineCommandComment 0x5575d02f7f40 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5575d02f7f60 <line:3155:1> Text=" "
|-FunctionDecl 0x5575d025a060 <line:3174:1, line:3177:1> line:3174:21 k_delayed_work_remaining_get 's32_t (struct k_delayed_work *)' static inline
| |-ParmVarDecl 0x5575d0259f98 <col:50, col:73> col:73 used work 'struct k_delayed_work *'
| |-CompoundStmt 0x5575d025a2b8 <line:3175:1, line:3177:1>
| | `-ReturnStmt 0x5575d025a278 <line:3176:2, col:66>
| |   `-ImplicitCastExpr 0x5575d025a260 <col:9, col:66> 's32_t':'int' <IntegralCast>
| |     `-CallExpr 0x5575d025a220 <col:9, col:66> 'u64_t':'unsigned long long'
| |       |-ImplicitCastExpr 0x5575d025a208 <col:9> 'u64_t (*)(u64_t)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575d025a108 <col:9> 'u64_t (u64_t)' Function 0x5575d01ae4c8 'k_ticks_to_ms_floor64' 'u64_t (u64_t)'
| |       `-ImplicitCastExpr 0x5575d025a248 <col:31, col:65> 'u64_t':'unsigned long long' <IntegralCast>
| |         `-CallExpr 0x5575d025a1e0 <col:31, col:65> 's32_t':'int'
| |           |-ImplicitCastExpr 0x5575d025a1c8 <col:31> 's32_t (*)(struct _timeout *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x5575d025a128 <col:31> 's32_t (struct _timeout *)' Function 0x5575d023bd90 'z_timeout_remaining' 's32_t (struct _timeout *)'
| |           `-UnaryOperator 0x5575d025a1b0 <col:51, col:58> 'struct _timeout *' prefix '&' cannot overflow
| |             `-MemberExpr 0x5575d025a180 <col:52, col:58> 'struct _timeout':'struct _timeout' lvalue ->timeout 0x5575d013a468
| |               `-ImplicitCastExpr 0x5575d025a168 <col:52> 'struct k_delayed_work *' <LValueToRValue>
| |                 `-DeclRefExpr 0x5575d025a148 <col:52> 'struct k_delayed_work *' lvalue ParmVar 0x5575d0259f98 'work' 'struct k_delayed_work *'
| `-FullComment 0x5575d02f84d0 <line:3163:3, line:3173:1>
|   |-ParagraphComment 0x5575d02f80e0 <line:3163:3>
|   | `-TextComment 0x5575d02f80b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f8100 <col:4, col:66> Name="brief"
|   | `-ParagraphComment 0x5575d02f8160 <col:10, col:66>
|   |   `-TextComment 0x5575d02f8130 <col:10, col:66> Text=" Get time remaining before a delayed work gets scheduled."
|   |-ParagraphComment 0x5575d02f8200 <line:3165:3, line:3167:30>
|   | |-TextComment 0x5575d02f8180 <line:3165:3, col:66> Text=" This routine computes the (approximate) time remaining before a"
|   | |-TextComment 0x5575d02f81a0 <line:3166:3, col:71> Text=" delayed work gets executed. If the delayed work is not waiting to be"
|   | `-TextComment 0x5575d02f81c0 <line:3167:3, col:30> Text=" scheduled, it returns zero."
|   |-ParagraphComment 0x5575d02f8250 <line:3169:3>
|   | `-TextComment 0x5575d02f8220 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f8270 <col:4, col:37> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f8300 <col:15, col:37>
|   |   `-TextComment 0x5575d02f82d0 <col:15, col:37> Text="     Delayed work item."
|   |-ParagraphComment 0x5575d02f8350 <line:3171:3>
|   | `-TextComment 0x5575d02f8320 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f8370 <col:4, line:3173:1> Name="return"
|     `-ParagraphComment 0x5575d02f8470 <line:3171:11, line:3173:1>
|       |-TextComment 0x5575d02f83a0 <line:3171:11, col:44> Text=" Remaining time (in milliseconds)."
|       |-TextComment 0x5575d02f83c0 <line:3172:3> Text=" "
|       |-InlineCommandComment 0x5575d02f8410 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-DWORK-001"
|       `-TextComment 0x5575d02f8430 <line:3173:1> Text=" "
|-FunctionDecl 0x5575d025a530 <line:3190:1, line:3191:33> line:3190:13 k_work_poll_init 'void (struct k_work_poll *, k_work_handler_t)' extern
| |-ParmVarDecl 0x5575d025a398 <col:30, col:50> col:50 work 'struct k_work_poll *'
| |-ParmVarDecl 0x5575d025a410 <line:3191:9, col:26> col:26 handler 'k_work_handler_t':'void (*)(struct k_work *)'
| `-FullComment 0x5575d02f8960 <line:3180:3, line:3188:14>
|   |-ParagraphComment 0x5575d02f8570 <line:3180:3>
|   | `-TextComment 0x5575d02f8540 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f8590 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d02f85f0 <col:10, col:43>
|   |   `-TextComment 0x5575d02f85c0 <col:10, col:43> Text=" Initialize a triggered work item."
|   |-ParagraphComment 0x5575d02f8660 <line:3182:3, line:3183:17>
|   | |-TextComment 0x5575d02f8610 <line:3182:3, col:69> Text=" This routine initializes a workqueue triggered work item, prior to"
|   | `-TextComment 0x5575d02f8630 <line:3183:3, col:17> Text=" its first use."
|   |-ParagraphComment 0x5575d02f86b0 <line:3185:3>
|   | `-TextComment 0x5575d02f8680 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f86d0 <col:4, line:3186:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f8780 <line:3185:15, line:3186:3>
|   |   |-TextComment 0x5575d02f8730 <line:3185:15, col:46> Text=" Address of triggered work item."
|   |   `-TextComment 0x5575d02f8750 <line:3186:3> Text=" "
|   |-ParamCommandComment 0x5575d02f87a0 <col:4, col:70> [in] implicitly Param="handler" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f8830 <col:18, col:70>
|   |   `-TextComment 0x5575d02f8800 <col:18, col:70> Text=" Function to invoke each time work item is processed."
|   |-ParagraphComment 0x5575d02f8880 <line:3188:3>
|   | `-TextComment 0x5575d02f8850 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02f88a0 <col:4, col:14> Name="return"
|     `-ParagraphComment 0x5575d02f8900 <col:11, col:14>
|       `-TextComment 0x5575d02f88d0 <col:11, col:14> Text=" N/A"
|-FunctionDecl 0x5575d025af78 <line:3227:1, line:3231:25> line:3227:12 used k_work_poll_submit_to_queue 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x5575d025a630 <col:40, col:57> col:57 work_q 'struct k_work_q *'
| |-ParmVarDecl 0x5575d025a6c0 <line:3228:12, col:32> col:32 work 'struct k_work_poll *'
| |-ParmVarDecl 0x5575d025a750 <line:3229:12, col:33> col:33 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5575d025a7d0 <line:3230:12, col:16> col:16 num_events 'int'
| |-ParmVarDecl 0x5575d025ae00 <line:3231:12, col:18> col:18 timeout 's32_t':'int'
| `-FullComment 0x5575d02f9710 <line:3194:3, line:3225:69>
|   |-ParagraphComment 0x5575d02f8a00 <line:3194:3>
|   | `-TextComment 0x5575d02f89d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f8a20 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02f8a80 <col:10, col:39>
|   |   `-TextComment 0x5575d02f8a50 <col:10, col:39> Text=" Submit a triggered work item."
|   |-ParagraphComment 0x5575d02f8cf0 <line:3196:3, line:3200:50>
|   | |-TextComment 0x5575d02f8aa0 <line:3196:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5575d02f8af0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5575d02f8b10 <col:44, col:72> Text=" to be processed by workqueue"
|   | |-TextComment 0x5575d02f8b30 <line:3197:3> Text=" "
|   | |-InlineCommandComment 0x5575d02f8b80 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="work_q"
|   | |-TextComment 0x5575d02f8ba0 <col:13, col:35> Text=" when one of the given "
|   | |-InlineCommandComment 0x5575d02f8bf0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x5575d02f8c10 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x5575d02f8c30 <line:3198:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x5575d02f8c50 <line:3199:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x5575d02f8c70 <line:3200:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x5575d02f8de0 <line:3202:3, line:3206:70>
|   | |-TextComment 0x5575d02f8d10 <line:3202:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x5575d02f8d30 <line:3203:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x5575d02f8d50 <line:3204:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x5575d02f8d70 <line:3205:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x5575d02f8d90 <line:3206:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x5575d02f8e30 <line:3208:3>
|   | `-TextComment 0x5575d02f8e00 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f8e50 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f8eb0 <col:9, col:31>
|   |   `-TextComment 0x5575d02f8e80 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f8f00 <line:3210:3>
|   | `-TextComment 0x5575d02f8ed0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f8f20 <col:4, line:3213:57> Name="warning"
|   | `-ParagraphComment 0x5575d02f8fd0 <line:3211:3, line:3213:57>
|   |   |-TextComment 0x5575d02f8f50 <line:3211:3, col:75> Text=" Provided array of events as well as a triggered work item must be placed"
|   |   |-TextComment 0x5575d02f8f70 <line:3212:3, col:67> Text=" in persistent memory (valid until work handler execution or work"
|   |   `-TextComment 0x5575d02f8f90 <line:3213:3, col:57> Text=" cancellation) and cannot be modified after submission."
|   |-ParagraphComment 0x5575d02f9020 <line:3215:3>
|   | `-TextComment 0x5575d02f8ff0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f9060 <col:4, line:3216:3> [in] implicitly Param="work_q" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f9110 <line:3215:17, line:3216:3>
|   |   |-TextComment 0x5575d02f90c0 <line:3215:17, col:38> Text=" Address of workqueue."
|   |   `-TextComment 0x5575d02f90e0 <line:3216:3> Text=" "
|   |-ParamCommandComment 0x5575d02f9130 <col:4, line:3217:3> [in] implicitly Param="work" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f91e0 <line:3216:15, line:3217:3>
|   |   |-TextComment 0x5575d02f9190 <line:3216:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5575d02f91b0 <line:3217:3> Text=" "
|   |-ParamCommandComment 0x5575d02f9200 <col:4, line:3218:3> [in] implicitly Param="events" ParamIndex=2
|   | `-ParagraphComment 0x5575d02f92b0 <line:3217:17, line:3218:3>
|   |   |-TextComment 0x5575d02f9260 <line:3217:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x5575d02f9280 <line:3218:3> Text=" "
|   |-ParamCommandComment 0x5575d02f92d0 <col:4, line:3219:3> [in] implicitly Param="num_events" ParamIndex=3
|   | `-ParagraphComment 0x5575d02f9380 <line:3218:21, line:3219:3>
|   |   |-TextComment 0x5575d02f9330 <line:3218:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5575d02f9350 <line:3219:3> Text=" "
|   |-ParamCommandComment 0x5575d02f93a0 <col:4, line:3220:42> [in] implicitly Param="timeout" ParamIndex=4
|   | `-ParagraphComment 0x5575d02f9450 <line:3219:18, line:3220:42>
|   |   |-TextComment 0x5575d02f9400 <line:3219:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x5575d02f9420 <line:3220:3, col:42> Text="		  for execution even if not triggered."
|   |-ParagraphComment 0x5575d02f94a0 <line:3223:3>
|   | `-TextComment 0x5575d02f9470 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f94c0 <col:4, line:3224:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f9540 <line:3223:11, line:3224:3>
|   |   |-TextComment 0x5575d02f94f0 <line:3223:11, col:51> Text=" 0 Work item started watching for events."
|   |   `-TextComment 0x5575d02f9510 <line:3224:3> Text=" "
|   |-BlockCommandComment 0x5575d02f9560 <col:4, line:3225:3> Name="retval"
|   | `-ParagraphComment 0x5575d02f95e0 <line:3224:11, line:3225:3>
|   |   |-TextComment 0x5575d02f9590 <line:3224:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5575d02f95b0 <line:3225:3> Text=" "
|   `-BlockCommandComment 0x5575d02f9600 <col:4, col:69> Name="retval"
|     `-ParagraphComment 0x5575d02f9660 <col:11, col:69>
|       `-TextComment 0x5575d02f9630 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x5575d025b368 <line:3264:1, line:3271:1> line:3264:19 k_work_poll_submit 'int (struct k_work_poll *, struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5575d025b090 <col:38, col:58> col:58 used work 'struct k_work_poll *'
| |-ParmVarDecl 0x5575d025b120 <line:3265:10, col:31> col:31 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x5575d025b1a0 <line:3266:10, col:14> col:14 used num_events 'int'
| |-ParmVarDecl 0x5575d025b218 <line:3267:10, col:16> col:16 used timeout 's32_t':'int'
| |-CompoundStmt 0x5575d025b658 <line:3268:1, line:3271:1>
| | `-ReturnStmt 0x5575d025b620 <line:3269:2, line:3270:34>
| |   `-CallExpr 0x5575d025b578 <line:3269:9, line:3270:34> 'int'
| |     |-ImplicitCastExpr 0x5575d025b560 <line:3269:9> 'int (*)(struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575d025b428 <col:9> 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)' Function 0x5575d025af78 'k_work_poll_submit_to_queue' 'int (struct k_work_q *, struct k_work_poll *, struct k_poll_event *, int, s32_t)'
| |     |-UnaryOperator 0x5575d025b468 <col:37, col:38> 'struct k_work_q *' prefix '&' cannot overflow
| |     | `-DeclRefExpr 0x5575d025b448 <col:38> 'struct k_work_q':'struct k_work_q' lvalue Var 0x5575d013ab00 'k_sys_work_q' 'struct k_work_q':'struct k_work_q'
| |     |-ImplicitCastExpr 0x5575d025b5c0 <col:52> 'struct k_work_poll *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d025b480 <col:52> 'struct k_work_poll *' lvalue ParmVar 0x5575d025b090 'work' 'struct k_work_poll *'
| |     |-ImplicitCastExpr 0x5575d025b5d8 <line:3270:7> 'struct k_poll_event *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d025b4a0 <col:7> 'struct k_poll_event *' lvalue ParmVar 0x5575d025b120 'events' 'struct k_poll_event *'
| |     |-ImplicitCastExpr 0x5575d025b5f0 <col:15> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5575d025b4c0 <col:15> 'int' lvalue ParmVar 0x5575d025b1a0 'num_events' 'int'
| |     `-ImplicitCastExpr 0x5575d025b608 <col:27> 's32_t':'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5575d025b4e0 <col:27> 's32_t':'int' lvalue ParmVar 0x5575d025b218 'timeout' 's32_t':'int'
| `-FullComment 0x5575d02fa320 <line:3234:3, line:3262:69>
|   |-ParagraphComment 0x5575d02f97b0 <line:3234:3>
|   | `-TextComment 0x5575d02f9780 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f97d0 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5575d02f9830 <col:10, col:63>
|   |   `-TextComment 0x5575d02f9800 <col:10, col:63> Text=" Submit a triggered work item to the system workqueue."
|   |-ParagraphComment 0x5575d02f9a20 <line:3236:3, line:3240:50>
|   | |-TextComment 0x5575d02f9850 <line:3236:3, col:36> Text=" This routine schedules work item "
|   | |-InlineCommandComment 0x5575d02f98a0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="work"
|   | |-TextComment 0x5575d02f98c0 <col:44, col:69> Text=" to be processed by system"
|   | |-TextComment 0x5575d02f98e0 <line:3237:3, col:35> Text=" workqueue when one of the given "
|   | |-InlineCommandComment 0x5575d02f9930 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="events"
|   | |-TextComment 0x5575d02f9950 <col:45, col:69> Text=" is signaled. The routine"
|   | |-TextComment 0x5575d02f9970 <line:3238:3, col:78> Text=" initiates internal poller for the work item and then returns to the caller."
|   | |-TextComment 0x5575d02f9990 <line:3239:3, col:71> Text=" Only when one of the watched events happen the work item is actually"
|   | `-TextComment 0x5575d02f99b0 <line:3240:3, col:50> Text=" submitted to the workqueue and becomes pending."
|   |-ParagraphComment 0x5575d02f9b10 <line:3242:3, line:3246:70>
|   | |-TextComment 0x5575d02f9a40 <line:3242:3, col:70> Text=" Submitting a previously submitted triggered work item that is still"
|   | |-TextComment 0x5575d02f9a60 <line:3243:3, col:75> Text=" waiting for the event cancels the existing submission and reschedules it"
|   | |-TextComment 0x5575d02f9a80 <line:3244:3, col:78> Text=" the using the new event list. Note that this behavior is inherently subject"
|   | |-TextComment 0x5575d02f9aa0 <line:3245:3, col:79> Text=" to race conditions with the pre-existing triggered work item and work queue,"
|   | `-TextComment 0x5575d02f9ac0 <line:3246:3, col:70> Text=" so care must be taken to synchronize such resubmissions externally."
|   |-ParagraphComment 0x5575d02f9b60 <line:3248:3>
|   | `-TextComment 0x5575d02f9b30 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f9b80 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02f9be0 <col:9, col:31>
|   |   `-TextComment 0x5575d02f9bb0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02f9c30 <line:3250:3>
|   | `-TextComment 0x5575d02f9c00 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02f9c50 <col:4, line:3252:63> Name="warning"
|   | `-ParagraphComment 0x5575d02f9cd0 <line:3251:3, line:3252:63>
|   |   |-TextComment 0x5575d02f9c80 <line:3251:3, col:72> Text=" Provided array of events as well as a triggered work item must not be"
|   |   `-TextComment 0x5575d02f9ca0 <line:3252:3, col:63> Text=" modified until the item has been processed by the workqueue."
|   |-ParagraphComment 0x5575d02f9d20 <line:3254:3>
|   | `-TextComment 0x5575d02f9cf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02f9d40 <col:4, line:3255:3> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02f9df0 <line:3254:15, line:3255:3>
|   |   |-TextComment 0x5575d02f9da0 <line:3254:15, col:44> Text=" Address of delayed work item."
|   |   `-TextComment 0x5575d02f9dc0 <line:3255:3> Text=" "
|   |-ParamCommandComment 0x5575d02f9e10 <col:4, line:3256:3> [in] implicitly Param="events" ParamIndex=1
|   | `-ParagraphComment 0x5575d02f9ec0 <line:3255:17, line:3256:3>
|   |   |-TextComment 0x5575d02f9e70 <line:3255:17, col:71> Text=" An array of pointers to events which trigger the work."
|   |   `-TextComment 0x5575d02f9e90 <line:3256:3> Text=" "
|   |-ParamCommandComment 0x5575d02f9ee0 <col:4, line:3257:3> [in] implicitly Param="num_events" ParamIndex=2
|   | `-ParagraphComment 0x5575d02f9f90 <line:3256:21, line:3257:3>
|   |   |-TextComment 0x5575d02f9f40 <line:3256:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5575d02f9f60 <line:3257:3> Text=" "
|   |-ParamCommandComment 0x5575d02f9fb0 <col:4, line:3258:42> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5575d02fa060 <line:3257:18, line:3258:42>
|   |   |-TextComment 0x5575d02fa010 <line:3257:18, col:77> Text=" Non-negative timeout after which the work will be scheduled"
|   |   `-TextComment 0x5575d02fa030 <line:3258:3, col:42> Text="		  for execution even if not triggered."
|   |-ParagraphComment 0x5575d02fa0b0 <line:3260:3>
|   | `-TextComment 0x5575d02fa080 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fa0d0 <col:4, line:3261:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fa150 <line:3260:11, line:3261:3>
|   |   |-TextComment 0x5575d02fa100 <line:3260:11, col:51> Text=" 0 Work item started watching for events."
|   |   `-TextComment 0x5575d02fa120 <line:3261:3> Text=" "
|   |-BlockCommandComment 0x5575d02fa170 <col:4, line:3262:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fa1f0 <line:3261:11, line:3262:3>
|   |   |-TextComment 0x5575d02fa1a0 <line:3261:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|   |   `-TextComment 0x5575d02fa1c0 <line:3262:3> Text=" "
|   `-BlockCommandComment 0x5575d02fa210 <col:4, col:69> Name="retval"
|     `-ParagraphComment 0x5575d02fa270 <col:11, col:69>
|       `-TextComment 0x5575d02fa240 <col:11, col:69> Text=" -EADDRINUSE Work item is pending on a different workqueue."
|-FunctionDecl 0x5575d025b7a8 <line:3287:1, col:55> col:12 k_work_poll_cancel 'int (struct k_work_poll *)' extern
| |-ParmVarDecl 0x5575d025b698 <col:31, col:51> col:51 work 'struct k_work_poll *'
| `-FullComment 0x5575d02fa8e0 <line:3274:3, line:3285:74>
|   |-ParagraphComment 0x5575d02fa3c0 <line:3274:3>
|   | `-TextComment 0x5575d02fa390 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fa3e0 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02fa440 <col:10, col:39>
|   |   `-TextComment 0x5575d02fa410 <col:10, col:39> Text=" Cancel a triggered work item."
|   |-ParagraphComment 0x5575d02fa530 <line:3276:3, line:3278:14>
|   | |-TextComment 0x5575d02fa460 <line:3276:3, col:62> Text=" This routine cancels the submission of triggered work item "
|   | |-InlineCommandComment 0x5575d02fa4b0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="work."
|   | |-TextComment 0x5575d02fa4d0 <line:3277:3, col:72> Text=" A triggered work item can only be canceled if no event triggered work"
|   | `-TextComment 0x5575d02fa4f0 <line:3278:3, col:14> Text=" submission."
|   |-ParagraphComment 0x5575d02fa580 <line:3280:3>
|   | `-TextComment 0x5575d02fa550 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fa5a0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02fa600 <col:9, col:31>
|   |   `-TextComment 0x5575d02fa5d0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02fa650 <line:3282:3>
|   | `-TextComment 0x5575d02fa620 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02fa670 <col:4, col:44> [in] implicitly Param="work" ParamIndex=0
|   | `-ParagraphComment 0x5575d02fa700 <col:15, col:44>
|   |   `-TextComment 0x5575d02fa6d0 <col:15, col:44> Text=" Address of delayed work item."
|   |-ParagraphComment 0x5575d02fa750 <line:3284:3>
|   | `-TextComment 0x5575d02fa720 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fa770 <col:4, line:3285:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fa7f0 <line:3284:11, line:3285:3>
|   |   |-TextComment 0x5575d02fa7a0 <line:3284:11, col:32> Text=" 0 Work item canceled."
|   |   `-TextComment 0x5575d02fa7c0 <line:3285:3> Text=" "
|   `-BlockCommandComment 0x5575d02fa810 <col:4, col:74> Name="retval"
|     `-ParagraphComment 0x5575d02fa870 <col:11, col:74>
|       `-TextComment 0x5575d02fa840 <col:11, col:74> Text=" -EINVAL Work item is being processed or has completed its work."
|-RecordDecl 0x5575d025b8a8 prev 0x5575d021b100 <line:3300:1, line:3314:1> line:3300:8 struct k_mutex definition
| |-FullComment 0x5575d02faa70 <line:3297:3, line:3299:1>
| | |-ParagraphComment 0x5575d02fa9a0 <line:3297:3, line:3298:3>
| | | |-TextComment 0x5575d02fa950 <line:3297:3, col:18> Text=" Mutex Structure"
| | | `-TextComment 0x5575d02fa970 <line:3298:3> Text=" "
| | |-VerbatimLineComment 0x5575d02fa9c0 <col:4, col:23> Text=" mutex_apis"
| | `-ParagraphComment 0x5575d02faa30 <line:3299:1>
| |   `-TextComment 0x5575d02faa00 <col:1> Text=" "
| |-FieldDecl 0x5575d025b968 <line:3302:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5575d02fab40 <line:3301:5, col:22>
| |   `-ParagraphComment 0x5575d02fab10 <col:5, col:22>
| |     `-TextComment 0x5575d02faae0 <col:5, col:22> Text=" Mutex wait queue "
| |-FieldDecl 0x5575d025ba10 <line:3304:2, col:19> col:19 owner 'struct k_thread *'
| | `-FullComment 0x5575d02fac10 <line:3303:5, col:17>
| |   `-ParagraphComment 0x5575d02fabe0 <col:5, col:17>
| |     `-TextComment 0x5575d02fabb0 <col:5, col:17> Text=" Mutex owner "
| |-FieldDecl 0x5575d025ba98 <line:3307:2, col:8> col:8 lock_count 'u32_t':'unsigned int'
| | `-FullComment 0x5575d02face0 <line:3306:5, col:24>
| |   `-ParagraphComment 0x5575d02facb0 <col:5, col:24>
| |     `-TextComment 0x5575d02fac80 <col:5, col:24> Text=" Current lock count "
| `-FieldDecl 0x5575d025bb30 <line:3310:2, col:6> col:6 owner_orig_prio 'int'
|   `-FullComment 0x5575d02fadb0 <line:3309:5, col:30>
|     `-ParagraphComment 0x5575d02fad80 <col:5, col:30>
|       `-TextComment 0x5575d02fad50 <col:5, col:30> Text=" Original thread priority "
|-FunctionDecl 0x5575d025c630 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3361:49> col:15 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5575d025bd08 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| `-FullComment 0x5575d02fb290 <line:3349:3, line:3360:1>
|   |-ParagraphComment 0x5575d02fae50 <line:3349:3>
|   | `-TextComment 0x5575d02fae20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fae70 <col:4, col:29> Name="brief"
|   | `-ParagraphComment 0x5575d02faed0 <col:10, col:29>
|   |   `-TextComment 0x5575d02faea0 <col:10, col:29> Text=" Initialize a mutex."
|   |-ParagraphComment 0x5575d02faf20 <line:3351:3, col:67>
|   | `-TextComment 0x5575d02faef0 <col:3, col:67> Text=" This routine initializes a mutex object, prior to its first use."
|   |-ParagraphComment 0x5575d02faf70 <line:3353:3, col:70>
|   | `-TextComment 0x5575d02faf40 <col:3, col:70> Text=" Upon completion, the mutex is available and does not have an owner."
|   |-ParagraphComment 0x5575d02fafc0 <line:3355:3>
|   | `-TextComment 0x5575d02faf90 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02fafe0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x5575d02fb080 <col:16, col:37>
|   |   `-TextComment 0x5575d02fb040 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x5575d02fb0d0 <line:3357:3>
|   | `-TextComment 0x5575d02fb0a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fb0f0 <col:4, col:33> Name="retval"
|   | `-ParagraphComment 0x5575d02fb150 <col:11, col:33>
|   |   `-TextComment 0x5575d02fb120 <col:11, col:33> Text=" 0 Mutex object created"
|   `-ParagraphComment 0x5575d02fb220 <line:3359:3, line:3360:1>
|     |-TextComment 0x5575d02fb170 <line:3359:3> Text=" "
|     |-InlineCommandComment 0x5575d02fb1c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MUTEX-002"
|     `-TextComment 0x5575d02fb1e0 <line:3360:1> Text=" "
|-FunctionDecl 0x5575d025c8c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3384:64> col:15 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x5575d025c730 <col:28, col:44> col:44 mutex 'struct k_mutex *'
| |-ParmVarDecl 0x5575d025c7a8 <col:51, col:57> col:57 timeout 's32_t':'int'
| `-FullComment 0x5575d02fba90 <line:3365:3, line:3383:1>
|   |-ParagraphComment 0x5575d02fb330 <line:3365:3>
|   | `-TextComment 0x5575d02fb300 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fb350 <col:4, col:23> Name="brief"
|   | `-ParagraphComment 0x5575d02fb3b0 <col:10, col:23>
|   |   `-TextComment 0x5575d02fb380 <col:10, col:23> Text=" Lock a mutex."
|   |-ParagraphComment 0x5575d02fb4d0 <line:3367:3, line:3369:20>
|   | |-TextComment 0x5575d02fb3d0 <line:3367:3, col:22> Text=" This routine locks "
|   | |-InlineCommandComment 0x5575d02fb420 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x5575d02fb440 <col:32, col:73> Text=" If the mutex is locked by another thread,"
|   | |-TextComment 0x5575d02fb460 <line:3368:3, col:70> Text=" the calling thread waits until the mutex becomes available or until"
|   | `-TextComment 0x5575d02fb480 <line:3369:3, col:20> Text=" a timeout occurs."
|   |-ParagraphComment 0x5575d02fb540 <line:3371:3, line:3372:62>
|   | |-TextComment 0x5575d02fb4f0 <line:3371:3, col:77> Text=" A thread is permitted to lock a mutex it has already locked. The operation"
|   | `-TextComment 0x5575d02fb510 <line:3372:3, col:62> Text=" completes immediately and the lock count is increased by 1."
|   |-ParagraphComment 0x5575d02fb590 <line:3374:3>
|   | `-TextComment 0x5575d02fb560 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02fb5b0 <col:4, line:3375:3> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x5575d02fb660 <line:3374:16, line:3375:3>
|   |   |-TextComment 0x5575d02fb610 <line:3374:16, col:37> Text=" Address of the mutex."
|   |   `-TextComment 0x5575d02fb630 <line:3375:3> Text=" "
|   |-ParamCommandComment 0x5575d02fb680 <col:4, line:3377:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x5575d02fb760 <line:3375:18, line:3377:28>
|   |   |-TextComment 0x5575d02fb6e0 <line:3375:18, col:67> Text=" Non-negative waiting period to lock the mutex (in"
|   |   |-TextComment 0x5575d02fb700 <line:3376:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5575d02fb720 <line:3377:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5575d02fb7b0 <line:3379:3>
|   | `-TextComment 0x5575d02fb780 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fb7d0 <col:4, line:3380:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fb850 <line:3379:11, line:3380:3>
|   |   |-TextComment 0x5575d02fb800 <line:3379:11, col:26> Text=" 0 Mutex locked."
|   |   `-TextComment 0x5575d02fb820 <line:3380:3> Text=" "
|   |-BlockCommandComment 0x5575d02fb870 <col:4, line:3381:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fb8f0 <line:3380:11, line:3381:3>
|   |   |-TextComment 0x5575d02fb8a0 <line:3380:11, col:43> Text=" -EBUSY Returned without waiting."
|   |   `-TextComment 0x5575d02fb8c0 <line:3381:3> Text=" "
|   `-BlockCommandComment 0x5575d02fb910 <col:4, line:3383:1> Name="retval"
|     `-ParagraphComment 0x5575d02fba10 <line:3381:11, line:3383:1>
|       |-TextComment 0x5575d02fb940 <line:3381:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5575d02fb960 <line:3382:3> Text=" "
|       |-InlineCommandComment 0x5575d02fb9b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MUTEX-002"
|       `-TextComment 0x5575d02fb9d0 <line:3383:1> Text=" "
|-FunctionDecl 0x5575d025ca68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3404:51> col:15 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5575d025c9d0 <col:30, col:46> col:46 mutex 'struct k_mutex *'
| `-FullComment 0x5575d02fc1a0 <line:3387:3, line:3403:1>
|   |-ParagraphComment 0x5575d02fbb30 <line:3387:3>
|   | `-TextComment 0x5575d02fbb00 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fbb50 <col:4, col:25> Name="brief"
|   | `-ParagraphComment 0x5575d02fbbb0 <col:10, col:25>
|   |   `-TextComment 0x5575d02fbb80 <col:10, col:25> Text=" Unlock a mutex."
|   |-ParagraphComment 0x5575d02fbca0 <line:3389:3, line:3390:18>
|   | |-TextComment 0x5575d02fbbd0 <line:3389:3, col:24> Text=" This routine unlocks "
|   | |-InlineCommandComment 0x5575d02fbc20 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="mutex."
|   | |-TextComment 0x5575d02fbc40 <col:34, col:73> Text=" The mutex must already be locked by the"
|   | `-TextComment 0x5575d02fbc60 <line:3390:3, col:18> Text=" calling thread."
|   |-ParagraphComment 0x5575d02fbd40 <line:3392:3, line:3394:10>
|   | |-TextComment 0x5575d02fbcc0 <line:3392:3, col:78> Text=" The mutex cannot be claimed by another thread until it has been unlocked by"
|   | |-TextComment 0x5575d02fbce0 <line:3393:3, col:71> Text=" the calling thread as many times as it was previously locked by that"
|   | `-TextComment 0x5575d02fbd00 <line:3394:3, col:10> Text=" thread."
|   |-ParagraphComment 0x5575d02fbd90 <line:3396:3>
|   | `-TextComment 0x5575d02fbd60 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02fbdb0 <col:4, col:37> [in] implicitly Param="mutex" ParamIndex=0
|   | `-ParagraphComment 0x5575d02fbe40 <col:16, col:37>
|   |   `-TextComment 0x5575d02fbe10 <col:16, col:37> Text=" Address of the mutex."
|   |-ParagraphComment 0x5575d02fbe90 <line:3398:3>
|   | `-TextComment 0x5575d02fbe60 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fbeb0 <col:4, line:3399:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fbf30 <line:3398:11, line:3399:3>
|   |   |-TextComment 0x5575d02fbee0 <line:3398:11, col:28> Text=" 0 Mutex unlocked."
|   |   `-TextComment 0x5575d02fbf00 <line:3399:3> Text=" "
|   |-BlockCommandComment 0x5575d02fbf50 <col:4, line:3400:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fbfd0 <line:3399:11, line:3400:3>
|   |   |-TextComment 0x5575d02fbf80 <line:3399:11, col:59> Text=" -EPERM The current thread does not own the mutex"
|   |   `-TextComment 0x5575d02fbfa0 <line:3400:3> Text=" "
|   |-BlockCommandComment 0x5575d02fbff0 <col:4, col:42> Name="retval"
|   | `-ParagraphComment 0x5575d02fc050 <col:11, col:42>
|   |   `-TextComment 0x5575d02fc020 <col:11, col:42> Text=" -EINVAL The mutex is not locked"
|   `-ParagraphComment 0x5575d02fc120 <line:3402:3, line:3403:1>
|     |-TextComment 0x5575d02fc070 <line:3402:3> Text=" "
|     |-InlineCommandComment 0x5575d02fc0c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MUTEX-002"
|     `-TextComment 0x5575d02fc0e0 <line:3403:1> Text=" "
|-RecordDecl 0x5575d025cb68 prev 0x5575d021b1a8 <line:3414:1, line:3422:1> line:3414:8 struct k_sem definition
| |-FullComment 0x5575d02fc2c0 <line:3411:3, col:24>
| | `-ParagraphComment 0x5575d02fc290 <col:3, col:24>
| |   |-TextComment 0x5575d02fc210 <col:3> Text=" "
| |   |-InlineCommandComment 0x5575d02fc230 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5575d02fc250 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5575d025cbf8 <line:3415:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5575d025cc58 <line:3416:2, col:8> col:8 referenced count 'u32_t':'unsigned int'
| `-FieldDecl 0x5575d025ccb8 <line:3417:2, col:8> col:8 limit 'u32_t':'unsigned int'
|-FunctionDecl 0x5575d025d0a8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3460:24> line:3459:15 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x5575d025ce68 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x5575d025cee8 <col:45, col:58> col:58 initial_count 'unsigned int'
| |-ParmVarDecl 0x5575d025cf68 <line:3460:6, col:19> col:19 limit 'unsigned int'
| `-FullComment 0x5575d02fc990 <line:3446:3, line:3458:1>
|   |-ParagraphComment 0x5575d02fc360 <line:3446:3>
|   | `-TextComment 0x5575d02fc330 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fc380 <col:4, col:33> Name="brief"
|   | `-ParagraphComment 0x5575d02fc3e0 <col:10, col:33>
|   |   `-TextComment 0x5575d02fc3b0 <col:10, col:33> Text=" Initialize a semaphore."
|   |-ParagraphComment 0x5575d02fc430 <line:3448:3, col:71>
|   | `-TextComment 0x5575d02fc400 <col:3, col:71> Text=" This routine initializes a semaphore object, prior to its first use."
|   |-ParagraphComment 0x5575d02fc480 <line:3450:3>
|   | `-TextComment 0x5575d02fc450 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02fc4a0 <col:4, line:3451:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5575d02fc550 <line:3450:14, line:3451:3>
|   |   |-TextComment 0x5575d02fc500 <line:3450:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x5575d02fc520 <line:3451:3> Text=" "
|   |-ParamCommandComment 0x5575d02fc570 <col:4, line:3452:3> [in] implicitly Param="initial_count" ParamIndex=1
|   | `-ParagraphComment 0x5575d02fc620 <line:3451:24, line:3452:3>
|   |   |-TextComment 0x5575d02fc5d0 <line:3451:24, col:48> Text=" Initial semaphore count."
|   |   `-TextComment 0x5575d02fc5f0 <line:3452:3> Text=" "
|   |-ParamCommandComment 0x5575d02fc640 <col:4, col:50> [in] implicitly Param="limit" ParamIndex=2
|   | `-ParagraphComment 0x5575d02fc6d0 <col:16, col:50>
|   |   `-TextComment 0x5575d02fc6a0 <col:16, col:50> Text=" Maximum permitted semaphore count."
|   |-ParagraphComment 0x5575d02fc720 <line:3454:3>
|   | `-TextComment 0x5575d02fc6f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fc740 <col:4, line:3455:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fc7c0 <line:3454:11, line:3455:3>
|   |   |-TextComment 0x5575d02fc770 <line:3454:11, col:43> Text=" 0 Semaphore created successfully"
|   |   `-TextComment 0x5575d02fc790 <line:3455:3> Text=" "
|   |-BlockCommandComment 0x5575d02fc7e0 <col:4, col:33> Name="retval"
|   | `-ParagraphComment 0x5575d02fc840 <col:11, col:33>
|   |   `-TextComment 0x5575d02fc810 <col:11, col:33> Text=" -EINVAL Invalid values"
|   `-ParagraphComment 0x5575d02fc910 <line:3457:3, line:3458:1>
|     |-TextComment 0x5575d02fc860 <line:3457:3> Text=" "
|     |-InlineCommandComment 0x5575d02fc8b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|     `-TextComment 0x5575d02fc8d0 <line:3458:1> Text=" "
|-FunctionDecl 0x5575d025d348 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3479:58> col:15 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x5575d025d1b0 <col:26, col:40> col:40 sem 'struct k_sem *'
| |-ParmVarDecl 0x5575d025d228 <col:45, col:51> col:51 timeout 's32_t':'int'
| `-FullComment 0x5575d02fd200 <line:3463:3, line:3478:1>
|   |-ParagraphComment 0x5575d02fca30 <line:3463:3>
|   | `-TextComment 0x5575d02fca00 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fca50 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5575d02fcab0 <col:10, col:27>
|   |   `-TextComment 0x5575d02fca80 <col:10, col:27> Text=" Take a semaphore."
|   |-ParagraphComment 0x5575d02fcb50 <line:3465:3, col:24>
|   | |-TextComment 0x5575d02fcad0 <col:3, col:22> Text=" This routine takes "
|   | `-InlineCommandComment 0x5575d02fcb20 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x5575d02fcba0 <line:3467:3>
|   | `-TextComment 0x5575d02fcb70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fcbc0 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5575d02fcca0 <col:9, col:72>
|   |   |-TextComment 0x5575d02fcbf0 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5575d02fcc40 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5575d02fcc60 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5575d02fccf0 <line:3469:3>
|   | `-TextComment 0x5575d02fccc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02fcd10 <col:4, line:3470:3> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5575d02fcdc0 <line:3469:14, line:3470:3>
|   |   |-TextComment 0x5575d02fcd70 <line:3469:14, col:39> Text=" Address of the semaphore."
|   |   `-TextComment 0x5575d02fcd90 <line:3470:3> Text=" "
|   |-ParamCommandComment 0x5575d02fcde0 <col:4, line:3472:28> [in] implicitly Param="timeout" ParamIndex=1
|   | `-ParagraphComment 0x5575d02fcec0 <line:3470:18, line:3472:28>
|   |   |-TextComment 0x5575d02fce40 <line:3470:18, col:71> Text=" Non-negative waiting period to take the semaphore (in"
|   |   |-TextComment 0x5575d02fce60 <line:3471:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5575d02fce80 <line:3472:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5575d02fcf10 <line:3474:3>
|   | `-TextComment 0x5575d02fcee0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fcf30 <col:4, line:3475:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fcfb0 <line:3474:11, line:3475:3>
|   |   |-TextComment 0x5575d02fcf60 <line:3474:11, col:29> Text=" 0 Semaphore taken."
|   |   `-TextComment 0x5575d02fcf80 <line:3475:3> Text=" "
|   |-BlockCommandComment 0x5575d02fcfd0 <col:4, line:3476:3> Name="retval"
|   | `-ParagraphComment 0x5575d02fd050 <line:3475:11, line:3476:3>
|   |   |-TextComment 0x5575d02fd000 <line:3475:11, col:43> Text=" -EBUSY Returned without waiting."
|   |   `-TextComment 0x5575d02fd020 <line:3476:3> Text=" "
|   `-BlockCommandComment 0x5575d02fd080 <col:4, line:3478:1> Name="retval"
|     `-ParagraphComment 0x5575d02fd180 <line:3476:11, line:3478:1>
|       |-TextComment 0x5575d02fd0b0 <line:3476:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5575d02fd0d0 <line:3477:3> Text=" "
|       |-InlineCommandComment 0x5575d02fd120 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5575d02fd140 <line:3478:1> Text=" "
|-FunctionDecl 0x5575d025d560 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3494:44> col:16 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5575d025d450 <col:27, col:41> col:41 sem 'struct k_sem *'
| `-FullComment 0x5575d02fd7c0 <line:3482:3, line:3493:1>
|   |-ParagraphComment 0x5575d02fd2a0 <line:3482:3>
|   | `-TextComment 0x5575d02fd270 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fd2c0 <col:4, col:27> Name="brief"
|   | `-ParagraphComment 0x5575d02fd320 <col:10, col:27>
|   |   `-TextComment 0x5575d02fd2f0 <col:10, col:27> Text=" Give a semaphore."
|   |-ParagraphComment 0x5575d02fd410 <line:3484:3, line:3485:19>
|   | |-TextComment 0x5575d02fd340 <line:3484:3, col:22> Text=" This routine gives "
|   | |-InlineCommandComment 0x5575d02fd390 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="sem,"
|   | |-TextComment 0x5575d02fd3b0 <col:30, col:76> Text=" unless the semaphore is already at its maximum"
|   | `-TextComment 0x5575d02fd3d0 <line:3485:3, col:19> Text=" permitted count."
|   |-ParagraphComment 0x5575d02fd460 <line:3487:3>
|   | `-TextComment 0x5575d02fd430 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fd480 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d02fd4e0 <col:9, col:31>
|   |   `-TextComment 0x5575d02fd4b0 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d02fd530 <line:3489:3>
|   | `-TextComment 0x5575d02fd500 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02fd550 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5575d02fd5e0 <col:14, col:39>
|   |   `-TextComment 0x5575d02fd5b0 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x5575d02fd630 <line:3491:3>
|   | `-TextComment 0x5575d02fd600 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02fd650 <col:4, line:3493:1> Name="return"
|     `-ParagraphComment 0x5575d02fd750 <line:3491:11, line:3493:1>
|       |-TextComment 0x5575d02fd680 <line:3491:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02fd6a0 <line:3492:3> Text=" "
|       |-InlineCommandComment 0x5575d02fd6f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5575d02fd710 <line:3493:1> Text=" "
|-FunctionDecl 0x5575d025dc90 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3506:45> col:16 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5575d025dc00 <col:28, col:42> col:42 sem 'struct k_sem *'
| `-FullComment 0x5575d02fdc80 <line:3497:3, line:3505:1>
|   |-ParagraphComment 0x5575d02fd860 <line:3497:3>
|   | `-TextComment 0x5575d02fd830 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fd880 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d02fd8e0 <col:10, col:44>
|   |   `-TextComment 0x5575d02fd8b0 <col:10, col:44> Text=" Reset a semaphore's count to zero."
|   |-ParagraphComment 0x5575d02fd9b0 <line:3499:3, col:49>
|   | |-TextComment 0x5575d02fd900 <col:3, col:34> Text=" This routine sets the count of "
|   | |-InlineCommandComment 0x5575d02fd950 <col:35, col:36> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x5575d02fd970 <col:41, col:49> Text=" to zero."
|   |-ParagraphComment 0x5575d02fda00 <line:3501:3>
|   | `-TextComment 0x5575d02fd9d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02fda20 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5575d02fdab0 <col:14, col:39>
|   |   `-TextComment 0x5575d02fda80 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x5575d02fdb00 <line:3503:3>
|   | `-TextComment 0x5575d02fdad0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02fdb20 <col:4, line:3505:1> Name="return"
|     `-ParagraphComment 0x5575d02fdc20 <line:3503:11, line:3505:1>
|       |-TextComment 0x5575d02fdb50 <line:3503:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02fdb70 <line:3504:3> Text=" "
|       |-InlineCommandComment 0x5575d02fdbc0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5575d02fdbe0 <line:3505:1> Text=" "
|-FunctionDecl 0x5575d025de20 <line:3511:1, line:3514:1> line:3511:20 used z_impl_k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5575d025dd90 <col:39, col:53> col:53 used sem 'struct k_sem *'
| |-CompoundStmt 0x5575d025df98 <line:3512:1, line:3514:1>
| | `-BinaryOperator 0x5575d025df50 <line:3513:2, col:15> 'u32_t':'unsigned int' '='
| |   |-MemberExpr 0x5575d025df00 <col:2, col:7> 'u32_t':'unsigned int' lvalue ->count 0x5575d025cc58
| |   | `-ImplicitCastExpr 0x5575d025dee8 <col:2> 'struct k_sem *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5575d025dec8 <col:2> 'struct k_sem *' lvalue ParmVar 0x5575d025dd90 'sem' 'struct k_sem *'
| |   `-IntegerLiteral 0x5575d025df30 <col:15> 'unsigned int' 0
| `-FullComment 0x5575d02fdd70 <line:3509:3, col:12>
|   `-ParagraphComment 0x5575d02fdd40 <col:3, col:12>
|     |-TextComment 0x5575d02fdcf0 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d02fdd10 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d025e0e8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3526:57> col:24 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5575d025dfd8 <col:40, col:54> col:54 sem 'struct k_sem *'
| `-FullComment 0x5575d02fe200 <line:3517:3, line:3525:1>
|   |-ParagraphComment 0x5575d02fde10 <line:3517:3>
|   | `-TextComment 0x5575d02fdde0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02fde30 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5575d02fde90 <col:10, col:34>
|   |   `-TextComment 0x5575d02fde60 <col:10, col:34> Text=" Get a semaphore's count."
|   |-ParagraphComment 0x5575d02fdf30 <line:3519:3, col:47>
|   | |-TextComment 0x5575d02fdeb0 <col:3, col:45> Text=" This routine returns the current count of "
|   | `-InlineCommandComment 0x5575d02fdf00 <col:46, col:47> Name="a" RenderEmphasized Arg[0]="sem."
|   |-ParagraphComment 0x5575d02fdf80 <line:3521:3>
|   | `-TextComment 0x5575d02fdf50 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02fdfa0 <col:4, col:39> [in] implicitly Param="sem" ParamIndex=0
|   | `-ParagraphComment 0x5575d02fe030 <col:14, col:39>
|   |   `-TextComment 0x5575d02fe000 <col:14, col:39> Text=" Address of the semaphore."
|   |-ParagraphComment 0x5575d02fe080 <line:3523:3>
|   | `-TextComment 0x5575d02fe050 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02fe0a0 <col:4, line:3525:1> Name="return"
|     `-ParagraphComment 0x5575d02fe1a0 <line:3523:11, line:3525:1>
|       |-TextComment 0x5575d02fe0d0 <line:3523:11, col:35> Text=" Current semaphore count."
|       |-TextComment 0x5575d02fe0f0 <line:3524:3> Text=" "
|       |-InlineCommandComment 0x5575d02fe140 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-SEM-001"
|       `-TextComment 0x5575d02fe160 <line:3525:1> Text=" "
|-FunctionDecl 0x5575d025e278 <line:3531:1, line:3534:1> line:3531:28 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5575d025e1e0 <col:51, col:65> col:65 used sem 'struct k_sem *'
| |-CompoundStmt 0x5575d025e468 <line:3532:1, line:3534:1>
| | `-ReturnStmt 0x5575d025e3a0 <line:3533:2, col:14>
| |   `-ImplicitCastExpr 0x5575d025e388 <col:9, col:14> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x5575d025e358 <col:9, col:14> 'u32_t':'unsigned int' lvalue ->count 0x5575d025cc58
| |       `-ImplicitCastExpr 0x5575d025e340 <col:9> 'struct k_sem *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d025e320 <col:9> 'struct k_sem *' lvalue ParmVar 0x5575d025e1e0 'sem' 'struct k_sem *'
| `-FullComment 0x5575d02fe2f0 <line:3529:3, col:12>
|   `-ParagraphComment 0x5575d02fe2c0 <col:3, col:12>
|     |-TextComment 0x5575d02fe270 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d02fe290 <col:4, col:12> Name="internal" RenderNormal
|-RecordDecl 0x5575d025e480 prev 0x5575d021b258 <line:3565:1, line:3590:1> line:3565:8 struct k_msgq definition
| |-FullComment 0x5575d02fe440 <line:3563:3, col:33>
| | |-ParagraphComment 0x5575d02fe390 <col:3>
| | | `-TextComment 0x5575d02fe360 <col:3> Text=" "
| | `-BlockCommandComment 0x5575d02fe3b0 <col:4, col:33> Name="brief"
| |   `-ParagraphComment 0x5575d02fe410 <col:10, col:33>
| |     `-TextComment 0x5575d02fe3e0 <col:10, col:33> Text=" Message Queue Structure"
| |-FieldDecl 0x5575d025e538 <line:3567:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5575d02fe510 <line:3566:5, col:30>
| |   `-ParagraphComment 0x5575d02fe4e0 <col:5, col:30>
| |     `-TextComment 0x5575d02fe4b0 <col:5, col:30> Text=" Message queue wait queue "
| |-FieldDecl 0x5575d025e5d8 <line:3569:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x5575d02fe5e0 <line:3568:5, col:10>
| |   `-ParagraphComment 0x5575d02fe5b0 <col:5, col:10>
| |     `-TextComment 0x5575d02fe580 <col:5, col:10> Text=" Lock "
| |-FieldDecl 0x5575d025e668 <line:3571:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x5575d02fe6b0 <line:3570:5, col:18>
| |   `-ParagraphComment 0x5575d02fe680 <col:5, col:18>
| |     `-TextComment 0x5575d02fe650 <col:5, col:18> Text=" Message size "
| |-FieldDecl 0x5575d025e6f8 <line:3573:2, col:8> col:8 referenced max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x5575d02fe780 <line:3572:5, col:32>
| |   `-ParagraphComment 0x5575d02fe750 <col:5, col:32>
| |     `-TextComment 0x5575d02fe720 <col:5, col:32> Text=" Maximal number of messages "
| |-FieldDecl 0x5575d025e790 <line:3575:2, col:8> col:8 buffer_start 'char *'
| | `-FullComment 0x5575d02fe850 <line:3574:5, col:29>
| |   `-ParagraphComment 0x5575d02fe820 <col:5, col:29>
| |     `-TextComment 0x5575d02fe7f0 <col:5, col:29> Text=" Start of message buffer "
| |-FieldDecl 0x5575d025e820 <line:3577:2, col:8> col:8 buffer_end 'char *'
| | `-FullComment 0x5575d02fe920 <line:3576:5, col:27>
| |   `-ParagraphComment 0x5575d02fe8f0 <col:5, col:27>
| |     `-TextComment 0x5575d02fe8c0 <col:5, col:27> Text=" End of message buffer "
| |-FieldDecl 0x5575d025e8b0 <line:3579:2, col:8> col:8 read_ptr 'char *'
| | `-FullComment 0x5575d02fe9f0 <line:3578:5, col:18>
| |   `-ParagraphComment 0x5575d02fe9c0 <col:5, col:18>
| |     `-TextComment 0x5575d02fe990 <col:5, col:18> Text=" Read pointer "
| |-FieldDecl 0x5575d025e940 <line:3581:2, col:8> col:8 write_ptr 'char *'
| | `-FullComment 0x5575d02feac0 <line:3580:5, col:19>
| |   `-ParagraphComment 0x5575d02fea90 <col:5, col:19>
| |     `-TextComment 0x5575d02fea60 <col:5, col:19> Text=" Write pointer "
| |-FieldDecl 0x5575d025e9c8 <line:3583:2, col:8> col:8 referenced used_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x5575d02feb90 <line:3582:5, col:29>
| |   `-ParagraphComment 0x5575d02feb60 <col:5, col:29>
| |     `-TextComment 0x5575d02feb30 <col:5, col:29> Text=" Number of used messages "
| `-FieldDecl 0x5575d025ea58 <line:3589:2, col:7> col:7 flags 'u8_t':'unsigned char'
|   `-FullComment 0x5575d02fec60 <line:3588:5, col:19>
|     `-ParagraphComment 0x5575d02fec30 <col:5, col:19>
|       `-TextComment 0x5575d02fec00 <col:5, col:19> Text=" Message queue "
|-RecordDecl 0x5575d02622e0 <line:3619:1, line:3626:1> line:3619:8 struct k_msgq_attrs definition
| |-FullComment 0x5575d02fedb0 <line:3617:3, col:34>
| | |-ParagraphComment 0x5575d02fed00 <col:3>
| | | `-TextComment 0x5575d02fecd0 <col:3> Text=" "
| | `-BlockCommandComment 0x5575d02fed20 <col:4, col:34> Name="brief"
| |   `-ParagraphComment 0x5575d02fed80 <col:10, col:34>
| |     `-TextComment 0x5575d02fed50 <col:10, col:34> Text=" Message Queue Attributes"
| |-FieldDecl 0x5575d02623c8 <line:3621:2, col:9> col:9 msg_size 'size_t':'unsigned long'
| | `-FullComment 0x5575d02fee80 <line:3620:5, col:18>
| |   `-ParagraphComment 0x5575d02fee50 <col:5, col:18>
| |     `-TextComment 0x5575d02fee20 <col:5, col:18> Text=" Message Size "
| |-FieldDecl 0x5575d0262458 <line:3623:2, col:8> col:8 max_msgs 'u32_t':'unsigned int'
| | `-FullComment 0x5575d02fef50 <line:3622:5, col:32>
| |   `-ParagraphComment 0x5575d02fef20 <col:5, col:32>
| |     `-TextComment 0x5575d02feef0 <col:5, col:32> Text=" Maximal number of messages "
| `-FieldDecl 0x5575d02624e8 <line:3625:2, col:8> col:8 used_msgs 'u32_t':'unsigned int'
|   `-FullComment 0x5575d02ff020 <line:3624:5, col:19>
|     `-ParagraphComment 0x5575d02feff0 <col:5, col:19>
|       `-TextComment 0x5575d02fefc0 <col:5, col:19> Text=" Used messages "
|-FunctionDecl 0x5575d0262920 <line:3676:1, line:3677:18> line:3676:6 k_msgq_init 'void (struct k_msgq *, char *, size_t, u32_t)'
| |-ParmVarDecl 0x5575d0262668 <col:18, col:33> col:33 q 'struct k_msgq *'
| |-ParmVarDecl 0x5575d02626e8 <col:36, col:42> col:42 buffer 'char *'
| |-ParmVarDecl 0x5575d0262760 <col:50, col:57> col:57 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d02627d8 <line:3677:4, col:10> col:10 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x5575d02ff970 <line:3658:3, line:3675:1>
|   |-ParagraphComment 0x5575d02ff100 <line:3658:3>
|   | `-TextComment 0x5575d02ff0d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ff120 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5575d02ff180 <col:10, col:37>
|   |   `-TextComment 0x5575d02ff150 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x5575d02ff1d0 <line:3660:3, col:75>
|   | `-TextComment 0x5575d02ff1a0 <col:3, col:75> Text=" This routine initializes a message queue object, prior to its first use."
|   |-ParagraphComment 0x5575d02ff410 <line:3662:3, line:3666:32>
|   | |-TextComment 0x5575d02ff1f0 <line:3662:3, col:58> Text=" The message queue's ring buffer must contain space for "
|   | |-InlineCommandComment 0x5575d02ff240 <col:59, col:60> Name="a" RenderEmphasized Arg[0]="max_msgs"
|   | |-TextComment 0x5575d02ff260 <col:70, col:79> Text=" messages,"
|   | |-TextComment 0x5575d02ff280 <line:3663:3, col:20> Text=" each of which is "
|   | |-InlineCommandComment 0x5575d02ff2d0 <col:21, col:22> Name="a" RenderEmphasized Arg[0]="msg_size"
|   | |-TextComment 0x5575d02ff2f0 <col:32, col:76> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x5575d02ff310 <line:3664:3, col:74> Text=" N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure"
|   | |-TextComment 0x5575d02ff330 <line:3665:3, col:60> Text=" that each message is similarly aligned to this boundary, "
|   | |-InlineCommandComment 0x5575d02ff380 <col:61, col:62> Name="a" RenderEmphasized Arg[0]="q_msg_size"
|   | `-TextComment 0x5575d02ff3a0 <line:3666:3, col:32> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x5575d02ff460 <line:3668:3>
|   | `-TextComment 0x5575d02ff430 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ff480 <col:4, line:3669:3> [in] implicitly Param="q" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ff530 <line:3668:12, line:3669:3>
|   |   |-TextComment 0x5575d02ff4e0 <line:3668:12, col:41> Text=" Address of the message queue."
|   |   `-TextComment 0x5575d02ff500 <line:3669:3> Text=" "
|   |-ParamCommandComment 0x5575d02ff550 <col:4, line:3670:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ff600 <line:3669:17, line:3670:3>
|   |   |-TextComment 0x5575d02ff5b0 <line:3669:17, col:67> Text=" Pointer to ring buffer that holds queued messages."
|   |   `-TextComment 0x5575d02ff5d0 <line:3670:3> Text=" "
|   |-ParamCommandComment 0x5575d02ff620 <col:4, line:3671:3> [in] implicitly Param="msg_size" ParamIndex=2
|   | `-ParagraphComment 0x5575d02ff6d0 <line:3670:19, line:3671:3>
|   |   |-TextComment 0x5575d02ff680 <line:3670:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x5575d02ff6a0 <line:3671:3> Text=" "
|   |-ParamCommandComment 0x5575d02ff6f0 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=3
|   | `-ParagraphComment 0x5575d02ff780 <col:19, col:65>
|   |   `-TextComment 0x5575d02ff750 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x5575d02ff7d0 <line:3673:3>
|   | `-TextComment 0x5575d02ff7a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ff7f0 <col:4, line:3675:1> Name="return"
|     `-ParagraphComment 0x5575d02ff8f0 <line:3673:11, line:3675:1>
|       |-TextComment 0x5575d02ff820 <line:3673:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02ff840 <line:3674:3> Text=" "
|       |-InlineCommandComment 0x5575d02ff890 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5575d02ff8b0 <line:3675:1> Text=" "
|-FunctionDecl 0x5575d0262c68 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3700:19> line:3699:15 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x5575d0262a30 <col:33, col:48> col:48 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0262aa8 <col:54, col:61> col:61 msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0262b20 <line:3700:5, col:11> col:11 max_msgs 'u32_t':'unsigned int'
| `-FullComment 0x5575d03000a0 <line:3680:3, line:3698:1>
|   |-ParagraphComment 0x5575d02ffa10 <line:3680:3>
|   | `-TextComment 0x5575d02ff9e0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02ffa30 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5575d02ffa90 <col:10, col:37>
|   |   `-TextComment 0x5575d02ffa60 <col:10, col:37> Text=" Initialize a message queue."
|   |-ParagraphComment 0x5575d02ffb30 <line:3682:3, line:3684:8>
|   | |-TextComment 0x5575d02ffab0 <line:3682:3, col:75> Text=" This routine initializes a message queue object, prior to its first use,"
|   | |-TextComment 0x5575d02ffad0 <line:3683:3, col:73> Text=" allocating its internal ring buffer from the calling thread's resource"
|   | `-TextComment 0x5575d02ffaf0 <line:3684:3, col:8> Text=" pool."
|   |-ParagraphComment 0x5575d02ffbd0 <line:3686:3, line:3688:25>
|   | |-TextComment 0x5575d02ffb50 <line:3686:3, col:66> Text=" Memory allocated for the ring buffer can be released by calling"
|   | |-TextComment 0x5575d02ffb70 <line:3687:3, col:73> Text=" k_msgq_cleanup(), or if userspace is enabled and the msgq object loses"
|   | `-TextComment 0x5575d02ffb90 <line:3688:3, col:25> Text=" all of its references."
|   |-ParagraphComment 0x5575d02ffc20 <line:3690:3>
|   | `-TextComment 0x5575d02ffbf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02ffc40 <col:4, line:3691:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5575d02ffcf0 <line:3690:15, line:3691:3>
|   |   |-TextComment 0x5575d02ffca0 <line:3690:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5575d02ffcc0 <line:3691:3> Text=" "
|   |-ParamCommandComment 0x5575d02ffd10 <col:4, line:3692:3> [in] implicitly Param="msg_size" ParamIndex=1
|   | `-ParagraphComment 0x5575d02ffdc0 <line:3691:19, line:3692:3>
|   |   |-TextComment 0x5575d02ffd70 <line:3691:19, col:43> Text=" Message size (in bytes)."
|   |   `-TextComment 0x5575d02ffd90 <line:3692:3> Text=" "
|   |-ParamCommandComment 0x5575d02ffde0 <col:4, col:65> [in] implicitly Param="max_msgs" ParamIndex=2
|   | `-ParagraphComment 0x5575d02ffe70 <col:19, col:65>
|   |   `-TextComment 0x5575d02ffe40 <col:19, col:65> Text=" Maximum number of messages that can be queued."
|   |-ParagraphComment 0x5575d02ffec0 <line:3694:3>
|   | `-TextComment 0x5575d02ffe90 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02ffee0 <col:4, line:3698:1> Name="return"
|     `-ParagraphComment 0x5575d0300030 <line:3694:11, line:3698:1>
|       |-TextComment 0x5575d02fff10 <line:3694:11, col:72> Text=" 0 on success, -ENOMEM if there was insufficient memory in the"
|       |-TextComment 0x5575d02fff30 <line:3695:3, col:66> Text="	thread's resource pool, or -EINVAL if the size parameters cause"
|       |-TextComment 0x5575d02fff50 <line:3696:3, col:23> Text="	an integer overflow."
|       |-TextComment 0x5575d02fff70 <line:3697:3> Text=" "
|       |-InlineCommandComment 0x5575d02fffc0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5575d02fffe0 <line:3698:1> Text=" "
|-FunctionDecl 0x5575d0262e88 <line:3712:1, col:39> col:5 k_msgq_cleanup 'int (struct k_msgq *)'
| |-ParmVarDecl 0x5575d0262d70 <col:20, col:35> col:35 msgq 'struct k_msgq *'
| `-FullComment 0x5575d03004e0 <line:3703:3, line:3710:33>
|   |-ParagraphComment 0x5575d0300140 <line:3703:3>
|   | `-TextComment 0x5575d0300110 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0300160 <col:4, col:46> Name="brief"
|   | `-ParagraphComment 0x5575d03001c0 <col:10, col:46>
|   |   `-TextComment 0x5575d0300190 <col:10, col:46> Text=" Release allocated buffer for a queue"
|   |-ParagraphComment 0x5575d0300210 <line:3705:3, col:49>
|   | `-TextComment 0x5575d03001e0 <col:3, col:49> Text=" Releases memory allocated for the ring buffer."
|   |-ParagraphComment 0x5575d0300260 <line:3707:3>
|   | `-TextComment 0x5575d0300230 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0300280 <col:4, col:39> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5575d0300310 <col:15, col:39>
|   |   `-TextComment 0x5575d03002e0 <col:15, col:39> Text=" message queue to cleanup"
|   |-ParagraphComment 0x5575d0300360 <line:3709:3>
|   | `-TextComment 0x5575d0300330 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0300380 <col:4, line:3710:3> Name="retval"
|   | `-ParagraphComment 0x5575d0300400 <line:3709:11, line:3710:3>
|   |   |-TextComment 0x5575d03003b0 <line:3709:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d03003d0 <line:3710:3> Text=" "
|   `-BlockCommandComment 0x5575d0300420 <col:4, col:33> Name="retval"
|     `-ParagraphComment 0x5575d0300480 <col:11, col:33>
|       `-TextComment 0x5575d0300450 <col:11, col:33> Text=" -EBUSY Queue not empty"
|-FunctionDecl 0x5575d02631b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3732:72> col:15 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5575d0262f80 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0263000 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5575d0263078 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x5575d0300da0 <line:3715:3, line:3731:1>
|   |-ParagraphComment 0x5575d0300580 <line:3715:3>
|   | `-TextComment 0x5575d0300550 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03005a0 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d0300600 <col:10, col:44>
|   |   `-TextComment 0x5575d03005d0 <col:10, col:44> Text=" Send a message to a message queue."
|   |-ParagraphComment 0x5575d03006a0 <line:3717:3, col:51>
|   | |-TextComment 0x5575d0300620 <col:3, col:49> Text=" This routine sends a message to message queue "
|   | `-InlineCommandComment 0x5575d0300670 <col:50, col:51> Name="a" RenderEmphasized Arg[0]="q."
|   |-ParagraphComment 0x5575d03006f0 <line:3719:3>
|   | `-TextComment 0x5575d03006c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0300710 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d0300770 <col:9, col:31>
|   |   `-TextComment 0x5575d0300740 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d03007c0 <line:3721:3>
|   | `-TextComment 0x5575d0300790 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d03007e0 <col:4, line:3722:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5575d0300890 <line:3721:15, line:3722:3>
|   |   |-TextComment 0x5575d0300840 <line:3721:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5575d0300860 <line:3722:3> Text=" "
|   |-ParamCommandComment 0x5575d03008b0 <col:4, line:3723:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d0300960 <line:3722:15, line:3723:3>
|   |   |-TextComment 0x5575d0300910 <line:3722:15, col:38> Text=" Pointer to the message."
|   |   `-TextComment 0x5575d0300930 <line:3723:3> Text=" "
|   |-ParamCommandComment 0x5575d0300980 <col:4, line:3725:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5575d0300a60 <line:3723:18, line:3725:28>
|   |   |-TextComment 0x5575d03009e0 <line:3723:18, col:68> Text=" Non-negative waiting period to add the message (in"
|   |   |-TextComment 0x5575d0300a00 <line:3724:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5575d0300a20 <line:3725:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5575d0300ab0 <line:3727:3>
|   | `-TextComment 0x5575d0300a80 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0300ad0 <col:4, line:3728:3> Name="retval"
|   | `-ParagraphComment 0x5575d0300b50 <line:3727:11, line:3728:3>
|   |   |-TextComment 0x5575d0300b00 <line:3727:11, col:26> Text=" 0 Message sent."
|   |   `-TextComment 0x5575d0300b20 <line:3728:3> Text=" "
|   |-BlockCommandComment 0x5575d0300b70 <col:4, line:3729:3> Name="retval"
|   | `-ParagraphComment 0x5575d0300bf0 <line:3728:11, line:3729:3>
|   |   |-TextComment 0x5575d0300ba0 <line:3728:11, col:60> Text=" -ENOMSG Returned without waiting or queue purged."
|   |   `-TextComment 0x5575d0300bc0 <line:3729:3> Text=" "
|   `-BlockCommandComment 0x5575d0300c10 <col:4, line:3731:1> Name="retval"
|     `-ParagraphComment 0x5575d0300d10 <line:3729:11, line:3731:1>
|       |-TextComment 0x5575d0300c40 <line:3729:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5575d0300c60 <line:3730:3> Text=" "
|       |-InlineCommandComment 0x5575d0300cb0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5575d0300cd0 <line:3731:1> Text=" "
|-FunctionDecl 0x5575d0263d80 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3753:72> col:15 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5575d0263be0 <col:26, col:41> col:41 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0263c60 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5575d0263cd8 <col:59, col:65> col:65 timeout 's32_t':'int'
| `-FullComment 0x5575d0301750 <line:3735:3, line:3752:1>
|   |-ParagraphComment 0x5575d0300e40 <line:3735:3>
|   | `-TextComment 0x5575d0300e10 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0300e60 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d0300ec0 <col:10, col:49>
|   |   `-TextComment 0x5575d0300e90 <col:10, col:49> Text=" Receive a message from a message queue."
|   |-ParagraphComment 0x5575d0300fb0 <line:3737:3, line:3738:21>
|   | |-TextComment 0x5575d0300ee0 <line:3737:3, col:54> Text=" This routine receives a message from message queue "
|   | |-InlineCommandComment 0x5575d0300f30 <col:55, col:56> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x5575d0300f50 <col:59, col:74> Text=" in a "first in,"
|   | `-TextComment 0x5575d0300f70 <line:3738:3, col:21> Text=" first out" manner."
|   |-ParagraphComment 0x5575d0301000 <line:3740:3>
|   | `-TextComment 0x5575d0300fd0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0301020 <col:4, col:72> Name="note"
|   | `-ParagraphComment 0x5575d0301120 <col:9, col:72>
|   |   |-TextComment 0x5575d0301050 <col:9, col:36> Text=" Can be called by ISRs, but "
|   |   |-InlineCommandComment 0x5575d03010c0 <col:37, col:38> Name="a" RenderEmphasized Arg[0]="timeout"
|   |   `-TextComment 0x5575d03010e0 <col:47, col:72> Text=" must be set to K_NO_WAIT."
|   |-ParagraphComment 0x5575d0301170 <line:3742:3>
|   | `-TextComment 0x5575d0301140 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0301190 <col:4, line:3743:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5575d0301240 <line:3742:15, line:3743:3>
|   |   |-TextComment 0x5575d03011f0 <line:3742:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5575d0301210 <line:3743:3> Text=" "
|   |-ParamCommandComment 0x5575d0301260 <col:4, line:3744:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d0301310 <line:3743:15, line:3744:3>
|   |   |-TextComment 0x5575d03012c0 <line:3743:15, col:60> Text=" Address of area to hold the received message."
|   |   `-TextComment 0x5575d03012e0 <line:3744:3> Text=" "
|   |-ParamCommandComment 0x5575d0301330 <col:4, line:3746:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5575d0301410 <line:3744:18, line:3746:28>
|   |   |-TextComment 0x5575d0301390 <line:3744:18, col:72> Text=" Non-negative waiting period to receive the message (in"
|   |   |-TextComment 0x5575d03013b0 <line:3745:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5575d03013d0 <line:3746:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5575d0301460 <line:3748:3>
|   | `-TextComment 0x5575d0301430 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0301480 <col:4, line:3749:3> Name="retval"
|   | `-ParagraphComment 0x5575d0301500 <line:3748:11, line:3749:3>
|   |   |-TextComment 0x5575d03014b0 <line:3748:11, col:30> Text=" 0 Message received."
|   |   `-TextComment 0x5575d03014d0 <line:3749:3> Text=" "
|   |-BlockCommandComment 0x5575d0301520 <col:4, line:3750:3> Name="retval"
|   | `-ParagraphComment 0x5575d03015a0 <line:3749:11, line:3750:3>
|   |   |-TextComment 0x5575d0301550 <line:3749:11, col:44> Text=" -ENOMSG Returned without waiting."
|   |   `-TextComment 0x5575d0301570 <line:3750:3> Text=" "
|   `-BlockCommandComment 0x5575d03015c0 <col:4, line:3752:1> Name="retval"
|     `-ParagraphComment 0x5575d03016c0 <line:3750:11, line:3752:1>
|       |-TextComment 0x5575d03015f0 <line:3750:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5575d0301610 <line:3751:3> Text=" "
|       |-InlineCommandComment 0x5575d0301660 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5575d0301680 <line:3752:1> Text=" "
|-FunctionDecl 0x5575d0264038 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3770:58> col:15 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x5575d0263e90 <col:27, col:42> col:42 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0263f10 <col:48, col:54> col:54 data 'void *'
| `-FullComment 0x5575d0301e90 <line:3756:3, line:3769:1>
|   |-ParagraphComment 0x5575d03017f0 <line:3756:3>
|   | `-TextComment 0x5575d03017c0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0301810 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5575d0301870 <col:10, col:51>
|   |   `-TextComment 0x5575d0301840 <col:10, col:51> Text=" Peek/read a message from a message queue."
|   |-ParagraphComment 0x5575d0301960 <line:3758:3, line:3759:57>
|   | |-TextComment 0x5575d0301890 <line:3758:3, col:51> Text=" This routine reads a message from message queue "
|   | |-InlineCommandComment 0x5575d03018e0 <col:52, col:53> Name="a" RenderEmphasized Arg[0]="q"
|   | |-TextComment 0x5575d0301900 <col:56, col:71> Text=" in a "first in,"
|   | `-TextComment 0x5575d0301920 <line:3759:3, col:57> Text=" first out" manner and leaves the message in the queue."
|   |-ParagraphComment 0x5575d03019b0 <line:3761:3>
|   | `-TextComment 0x5575d0301980 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03019d0 <col:4, col:31> Name="note"
|   | `-ParagraphComment 0x5575d0301a30 <col:9, col:31>
|   |   `-TextComment 0x5575d0301a00 <col:9, col:31> Text=" Can be called by ISRs."
|   |-ParagraphComment 0x5575d0301a80 <line:3763:3>
|   | `-TextComment 0x5575d0301a50 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0301aa0 <col:4, line:3764:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5575d0301b50 <line:3763:15, line:3764:3>
|   |   |-TextComment 0x5575d0301b00 <line:3763:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5575d0301b20 <line:3764:3> Text=" "
|   |-ParamCommandComment 0x5575d0301b70 <col:4, col:71> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d0301c00 <col:15, col:71>
|   |   `-TextComment 0x5575d0301bd0 <col:15, col:71> Text=" Address of area to hold the message read from the queue."
|   |-ParagraphComment 0x5575d0301c50 <line:3766:3>
|   | `-TextComment 0x5575d0301c20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0301c70 <col:4, line:3767:3> Name="retval"
|   | `-ParagraphComment 0x5575d0301cf0 <line:3766:11, line:3767:3>
|   |   |-TextComment 0x5575d0301ca0 <line:3766:11, col:26> Text=" 0 Message read."
|   |   `-TextComment 0x5575d0301cc0 <line:3767:3> Text=" "
|   `-BlockCommandComment 0x5575d0301d10 <col:4, line:3769:1> Name="retval"
|     `-ParagraphComment 0x5575d0301e10 <line:3767:11, line:3769:1>
|       |-TextComment 0x5575d0301d40 <line:3767:11, col:58> Text=" -ENOMSG Returned when the queue has no message."
|       |-TextComment 0x5575d0301d60 <line:3768:3> Text=" "
|       |-InlineCommandComment 0x5575d0301db0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5575d0301dd0 <line:3769:1> Text=" "
|-FunctionDecl 0x5575d0264250 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3784:48> col:16 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5575d0264140 <col:29, col:44> col:44 msgq 'struct k_msgq *'
| `-FullComment 0x5575d0302320 <line:3773:3, line:3783:1>
|   |-ParagraphComment 0x5575d0301f30 <line:3773:3>
|   | `-TextComment 0x5575d0301f00 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0301f50 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5575d0301fb0 <col:10, col:32>
|   |   `-TextComment 0x5575d0301f80 <col:10, col:32> Text=" Purge a message queue."
|   |-ParagraphComment 0x5575d0302050 <line:3775:3, line:3777:61>
|   | |-TextComment 0x5575d0301fd0 <line:3775:3, col:74> Text=" This routine discards all unreceived messages in a message queue's ring"
|   | |-TextComment 0x5575d0301ff0 <line:3776:3, col:72> Text=" buffer. Any threads that are blocked waiting to send a message to the"
|   | `-TextComment 0x5575d0302010 <line:3777:3, col:61> Text=" message queue are unblocked and see an -ENOMSG error code."
|   |-ParagraphComment 0x5575d03020a0 <line:3779:3>
|   | `-TextComment 0x5575d0302070 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d03020c0 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5575d0302150 <col:15, col:44>
|   |   `-TextComment 0x5575d0302120 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5575d03021a0 <line:3781:3>
|   | `-TextComment 0x5575d0302170 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d03021c0 <col:4, line:3783:1> Name="return"
|     `-ParagraphComment 0x5575d03022c0 <line:3781:11, line:3783:1>
|       |-TextComment 0x5575d03021f0 <line:3781:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d0302210 <line:3782:3> Text=" "
|       |-InlineCommandComment 0x5575d0302260 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5575d0302280 <line:3783:1> Text=" "
|-FunctionDecl 0x5575d0264460 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3797:56> col:17 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5575d0264350 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x5575d0302780 <line:3787:3, line:3796:1>
|   |-ParagraphComment 0x5575d03023c0 <line:3787:3>
|   | `-TextComment 0x5575d0302390 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03023e0 <col:4, col:58> Name="brief"
|   | `-ParagraphComment 0x5575d0302440 <col:10, col:58>
|   |   `-TextComment 0x5575d0302410 <col:10, col:58> Text=" Get the amount of free space in a message queue."
|   |-ParagraphComment 0x5575d03024b0 <line:3789:3, line:3790:15>
|   | |-TextComment 0x5575d0302460 <line:3789:3, col:73> Text=" This routine returns the number of unused entries in a message queue's"
|   | `-TextComment 0x5575d0302480 <line:3790:3, col:15> Text=" ring buffer."
|   |-ParagraphComment 0x5575d0302500 <line:3792:3>
|   | `-TextComment 0x5575d03024d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0302520 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5575d03025b0 <col:15, col:44>
|   |   `-TextComment 0x5575d0302580 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5575d0302600 <line:3794:3>
|   | `-TextComment 0x5575d03025d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0302620 <col:4, line:3796:1> Name="return"
|     `-ParagraphComment 0x5575d0302720 <line:3794:11, line:3796:1>
|       |-TextComment 0x5575d0302650 <line:3794:11, col:48> Text=" Number of unused ring buffer entries."
|       |-TextComment 0x5575d0302670 <line:3795:3> Text=" "
|       |-InlineCommandComment 0x5575d03026c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5575d03026e0 <line:3796:1> Text=" "
|-FunctionDecl 0x5575d02647b0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3811:32> line:3810:17 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x5575d0264560 <col:34, col:49> col:49 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0264698 <line:3811:6, col:27> col:27 attrs 'struct k_msgq_attrs *'
| `-FullComment 0x5575d0302c90 <line:3800:3, line:3809:1>
|   |-ParagraphComment 0x5575d0302820 <line:3800:3>
|   | `-TextComment 0x5575d03027f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0302840 <col:4, col:50> Name="brief"
|   | `-ParagraphComment 0x5575d03028a0 <col:10, col:50>
|   |   `-TextComment 0x5575d0302870 <col:10, col:50> Text=" Get basic attributes of a message queue."
|   |-ParagraphComment 0x5575d03028f0 <line:3802:3, col:77>
|   | `-TextComment 0x5575d03028c0 <col:3, col:77> Text=" This routine fetches basic attributes of message queue into attr argument."
|   |-ParagraphComment 0x5575d0302940 <line:3804:3>
|   | `-TextComment 0x5575d0302910 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0302960 <col:4, line:3805:3> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5575d0302a10 <line:3804:15, line:3805:3>
|   |   |-TextComment 0x5575d03029c0 <line:3804:15, col:44> Text=" Address of the message queue."
|   |   `-TextComment 0x5575d03029e0 <line:3805:3> Text=" "
|   |-ParamCommandComment 0x5575d0302a30 <col:4, col:61> [in] implicitly Param="attrs" ParamIndex=1
|   | `-ParagraphComment 0x5575d0302ac0 <col:16, col:61>
|   |   `-TextComment 0x5575d0302a90 <col:16, col:61> Text=" pointer to message queue attribute structure."
|   |-ParagraphComment 0x5575d0302b10 <line:3807:3>
|   | `-TextComment 0x5575d0302ae0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0302b30 <col:4, line:3809:1> Name="return"
|     `-ParagraphComment 0x5575d0302c30 <line:3807:11, line:3809:1>
|       |-TextComment 0x5575d0302b60 <line:3807:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d0302b80 <line:3808:3> Text=" "
|       |-InlineCommandComment 0x5575d0302bd0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-003"
|       `-TextComment 0x5575d0302bf0 <line:3809:1> Text=" "
|-FunctionDecl 0x5575d0264918 <line:3814:1, line:3817:1> line:3814:21 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5575d0264888 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5575d0264b18 <line:3815:1, line:3817:1>
|   `-ReturnStmt 0x5575d0264ae0 <line:3816:2, col:32>
|     `-BinaryOperator 0x5575d0264ac0 <col:9, col:32> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x5575d0264a90 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x5575d02649f8 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->max_msgs 0x5575d025e6f8
|       |   `-ImplicitCastExpr 0x5575d02649e0 <col:9> 'struct k_msgq *' <LValueToRValue>
|       |     `-DeclRefExpr 0x5575d02649c0 <col:9> 'struct k_msgq *' lvalue ParmVar 0x5575d0264888 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x5575d0264aa8 <col:26, col:32> 'u32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x5575d0264a60 <col:26, col:32> 'u32_t':'unsigned int' lvalue ->used_msgs 0x5575d025e9c8
|           `-ImplicitCastExpr 0x5575d0264a48 <col:26> 'struct k_msgq *' <LValueToRValue>
|             `-DeclRefExpr 0x5575d0264a28 <col:26> 'struct k_msgq *' lvalue ParmVar 0x5575d0264888 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5575d02651c8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:3829:56> col:17 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5575d0264b58 <col:37, col:52> col:52 msgq 'struct k_msgq *'
| `-FullComment 0x5575d03030f0 <line:3820:3, line:3828:1>
|   |-ParagraphComment 0x5575d0302d30 <line:3820:3>
|   | `-TextComment 0x5575d0302d00 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0302d50 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5575d0302db0 <col:10, col:56>
|   |   `-TextComment 0x5575d0302d80 <col:10, col:56> Text=" Get the number of messages in a message queue."
|   |-ParagraphComment 0x5575d0302e00 <line:3822:3, col:80>
|   | `-TextComment 0x5575d0302dd0 <col:3, col:80> Text=" This routine returns the number of messages in a message queue's ring buffer."
|   |-ParagraphComment 0x5575d0302e50 <line:3824:3>
|   | `-TextComment 0x5575d0302e20 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0302e70 <col:4, col:44> [in] implicitly Param="msgq" ParamIndex=0
|   | `-ParagraphComment 0x5575d0302f00 <col:15, col:44>
|   |   `-TextComment 0x5575d0302ed0 <col:15, col:44> Text=" Address of the message queue."
|   |-ParagraphComment 0x5575d0302f50 <line:3826:3>
|   | `-TextComment 0x5575d0302f20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0302f70 <col:4, line:3828:1> Name="return"
|     `-ParagraphComment 0x5575d0303070 <line:3826:11, line:3828:1>
|       |-TextComment 0x5575d0302fa0 <line:3826:11, col:30> Text=" Number of messages."
|       |-TextComment 0x5575d0302fc0 <line:3827:3> Text=" "
|       |-InlineCommandComment 0x5575d0303010 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSGQ-002"
|       `-TextComment 0x5575d0303030 <line:3828:1> Text=" "
|-FunctionDecl 0x5575d0265328 <line:3831:1, line:3834:1> line:3831:21 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5575d0265298 <col:48, col:63> col:63 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5575d02654b8 <line:3832:1, line:3834:1>
|   `-ReturnStmt 0x5575d0265450 <line:3833:2, col:15>
|     `-ImplicitCastExpr 0x5575d0265438 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5575d0265408 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->used_msgs 0x5575d025e9c8
|         `-ImplicitCastExpr 0x5575d02653f0 <col:9> 'struct k_msgq *' <LValueToRValue>
|           `-DeclRefExpr 0x5575d02653d0 <col:9> 'struct k_msgq *' lvalue ParmVar 0x5575d0265298 'msgq' 'struct k_msgq *'
|-RecordDecl 0x5575d02654d0 <line:3849:1, line:3853:1> line:3849:8 struct k_mem_block_id definition
| |-FullComment 0x5575d0303350 <line:3839:3, line:3841:5>
| | |-ParagraphComment 0x5575d0303190 <line:3839:3>
| | | `-TextComment 0x5575d0303160 <col:3> Text=" "
| | |-VerbatimLineComment 0x5575d03031b0 <col:4, col:44> Text=" mem_pool_apis Memory Pool APIs"
| | |-ParagraphComment 0x5575d0303220 <line:3840:3>
| | | `-TextComment 0x5575d03031f0 <col:3> Text=" "
| | |-VerbatimLineComment 0x5575d0303240 <col:4, col:24> Text=" kernel_apis"
| | `-ParagraphComment 0x5575d0303300 <line:3841:3, col:5>
| |   |-TextComment 0x5575d0303280 <col:3> Text=" "
| |   |-TextComment 0x5575d03032a0 <col:4> Text="@"
| |   `-TextComment 0x5575d03032c0 <col:5> Text="{"
| |-FieldDecl 0x5575d02655c0 <line:3850:2, col:15> col:8 pool 'u32_t':'unsigned int'
| | `-ConstantExpr 0x5575d02655a8 <col:15> 'int'
| |   `-IntegerLiteral 0x5575d0265578 <col:15> 'int' 8
| |-FieldDecl 0x5575d0265658 <line:3851:2, col:16> col:8 level 'u32_t':'unsigned int'
| | `-ConstantExpr 0x5575d0265640 <col:16> 'int'
| |   `-IntegerLiteral 0x5575d0265610 <col:16> 'int' 4
| `-FieldDecl 0x5575d02656f0 <line:3852:2, col:16> col:8 block 'u32_t':'unsigned int'
|   `-ConstantExpr 0x5575d02656d8 <col:16> 'int'
|     `-IntegerLiteral 0x5575d02656a8 <col:16> 'int' 20
|-RecordDecl 0x5575d0265740 <line:3855:1, line:3858:1> line:3855:8 struct k_mem_block definition
| |-FieldDecl 0x5575d0265800 <line:3856:2, col:8> col:8 data 'void *'
| `-FieldDecl 0x5575d02658a8 <line:3857:2, col:24> col:24 id 'struct k_mem_block_id':'struct k_mem_block_id'
|-RecordDecl 0x5575d0265988 <line:3872:1, line:3895:1> line:3872:8 struct k_mbox_msg definition
| |-FullComment 0x5575d0303500 <line:3869:3, line:3871:1>
| | |-ParagraphComment 0x5575d03033f0 <line:3869:3>
| | | `-TextComment 0x5575d03033c0 <col:3> Text=" "
| | |-BlockCommandComment 0x5575d0303410 <col:4, col:35> Name="brief"
| | | `-ParagraphComment 0x5575d0303470 <col:10, col:35>
| | |   `-TextComment 0x5575d0303440 <col:10, col:35> Text=" Mailbox Message Structure"
| | `-ParagraphComment 0x5575d03034c0 <line:3871:1>
| |   `-TextComment 0x5575d0303490 <col:1> Text=" "
| |-FieldDecl 0x5575d0265a78 <line:3874:2, col:8> col:8 _mailbox 'u32_t':'unsigned int'
| | `-FullComment 0x5575d03035d0 <line:3873:5, col:55>
| |   `-ParagraphComment 0x5575d03035a0 <col:5, col:55>
| |     `-TextComment 0x5575d0303570 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x5575d0265b08 <line:3876:2, col:9> col:9 size 'size_t':'unsigned long'
| | `-FullComment 0x5575d03036a0 <line:3875:5, col:32>
| |   `-ParagraphComment 0x5575d0303670 <col:5, col:32>
| |     `-TextComment 0x5575d0303640 <col:5, col:32> Text=" size of message (in bytes) "
| |-FieldDecl 0x5575d0265b98 <line:3878:2, col:8> col:8 info 'u32_t':'unsigned int'
| | `-FullComment 0x5575d0303770 <line:3877:5, col:43>
| |   `-ParagraphComment 0x5575d0303740 <col:5, col:43>
| |     `-TextComment 0x5575d0303710 <col:5, col:43> Text=" application-defined information value "
| |-FieldDecl 0x5575d0265c30 <line:3880:2, col:8> col:8 tx_data 'void *'
| | `-FullComment 0x5575d0303840 <line:3879:5, col:34>
| |   `-ParagraphComment 0x5575d0303810 <col:5, col:34>
| |     `-TextComment 0x5575d03037e0 <col:5, col:34> Text=" sender's message data buffer "
| |-FieldDecl 0x5575d0265cc0 <line:3882:2, col:8> col:8 _rx_data 'void *'
| | `-FullComment 0x5575d0303910 <line:3881:5, col:55>
| |   `-ParagraphComment 0x5575d03038e0 <col:5, col:55>
| |     `-TextComment 0x5575d03038b0 <col:5, col:55> Text=" internal use only - needed for legacy API support "
| |-FieldDecl 0x5575d0265d98 <line:3884:2, col:21> col:21 tx_block 'struct k_mem_block':'struct k_mem_block'
| | `-FullComment 0x5575d03039e0 <line:3883:5, col:35>
| |   `-ParagraphComment 0x5575d03039b0 <col:5, col:35>
| |     `-TextComment 0x5575d0303980 <col:5, col:35> Text=" message data block descriptor "
| |-FieldDecl 0x5575d0265e28 <line:3886:2, col:10> col:10 rx_source_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x5575d0303ab0 <line:3885:5, col:22>
| |   `-ParagraphComment 0x5575d0303a80 <col:5, col:22>
| |     `-TextComment 0x5575d0303a50 <col:5, col:22> Text=" source thread id "
| |-FieldDecl 0x5575d0265eb8 <line:3888:2, col:10> col:10 tx_target_thread 'k_tid_t':'struct k_thread *'
| | `-FullComment 0x5575d0303b80 <line:3887:5, col:22>
| |   `-ParagraphComment 0x5575d0303b50 <col:5, col:22>
| |     `-TextComment 0x5575d0303b20 <col:5, col:22> Text=" target thread id "
| `-FieldDecl 0x5575d0265f48 <line:3890:2, col:10> col:10 _syncing_thread 'k_tid_t':'struct k_thread *'
|   `-FullComment 0x5575d0303c50 <line:3889:5, col:65>
|     `-ParagraphComment 0x5575d0303c20 <col:5, col:65>
|       `-TextComment 0x5575d0303bf0 <col:5, col:65> Text=" internal use only - thread waiting on send (may be a dummy) "
|-RecordDecl 0x5575d0265fc8 prev 0x5575d021b308 <line:3900:1, line:3909:1> line:3900:8 struct k_mbox definition
| |-FullComment 0x5575d0303e00 <line:3897:3, line:3899:1>
| | |-ParagraphComment 0x5575d0303cf0 <line:3897:3>
| | | `-TextComment 0x5575d0303cc0 <col:3> Text=" "
| | |-BlockCommandComment 0x5575d0303d10 <col:4, col:27> Name="brief"
| | | `-ParagraphComment 0x5575d0303d70 <col:10, col:27>
| | |   `-TextComment 0x5575d0303d40 <col:10, col:27> Text=" Mailbox Structure"
| | `-ParagraphComment 0x5575d0303dc0 <line:3899:1>
| |   `-TextComment 0x5575d0303d90 <col:1> Text=" "
| |-FieldDecl 0x5575d0266088 <line:3902:2, col:12> col:12 tx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5575d0303ed0 <line:3901:5, col:29>
| |   `-ParagraphComment 0x5575d0303ea0 <col:5, col:29>
| |     `-TextComment 0x5575d0303e70 <col:5, col:29> Text=" Transmit messages queue "
| |-FieldDecl 0x5575d0266118 <line:3904:2, col:12> col:12 rx_msg_queue '_wait_q_t':'_wait_q_t'
| | `-FullComment 0x5575d0303fa0 <line:3903:5, col:27>
| |   `-ParagraphComment 0x5575d0303f70 <col:5, col:27>
| |     `-TextComment 0x5575d0303f40 <col:5, col:27> Text=" Receive message queue "
| `-FieldDecl 0x5575d02665f0 <line:3905:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
|-FunctionDecl 0x5575d02668d0 <line:3951:1, col:44> col:13 k_mbox_init 'void (struct k_mbox *)' extern
| |-ParmVarDecl 0x5575d02667c8 <col:25, col:40> col:40 mbox 'struct k_mbox *'
| `-FullComment 0x5575d03043e0 <line:3942:3, line:3950:1>
|   |-ParagraphComment 0x5575d0304040 <line:3942:3>
|   | `-TextComment 0x5575d0304010 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0304060 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5575d03040c0 <col:10, col:31>
|   |   `-TextComment 0x5575d0304090 <col:10, col:31> Text=" Initialize a mailbox."
|   |-ParagraphComment 0x5575d0304110 <line:3944:3, col:69>
|   | `-TextComment 0x5575d03040e0 <col:3, col:69> Text=" This routine initializes a mailbox object, prior to its first use."
|   |-ParagraphComment 0x5575d0304160 <line:3946:3>
|   | `-TextComment 0x5575d0304130 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0304180 <col:4, col:38> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5575d0304210 <col:15, col:38>
|   |   `-TextComment 0x5575d03041e0 <col:15, col:38> Text=" Address of the mailbox."
|   |-ParagraphComment 0x5575d0304260 <line:3948:3>
|   | `-TextComment 0x5575d0304230 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0304280 <col:4, line:3950:1> Name="return"
|     `-ParagraphComment 0x5575d0304380 <line:3948:11, line:3950:1>
|       |-TextComment 0x5575d03042b0 <line:3948:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d03042d0 <line:3949:3> Text=" "
|       |-InlineCommandComment 0x5575d0304320 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5575d0304340 <line:3950:1> Text=" "
|-FunctionDecl 0x5575d0266cc8 <line:3973:1, line:3974:22> line:3973:12 k_mbox_put 'int (struct k_mbox *, struct k_mbox_msg *, s32_t)' extern
| |-ParmVarDecl 0x5575d02669d0 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5575d0266b08 <col:44, col:63> col:63 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5575d0266b80 <line:3974:9, col:15> col:15 timeout 's32_t':'int'
| `-FullComment 0x5575d0304c90 <line:3954:3, line:3972:1>
|   |-ParagraphComment 0x5575d0304480 <line:3954:3>
|   | `-TextComment 0x5575d0304450 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03044a0 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5575d0304500 <col:10, col:57>
|   |   `-TextComment 0x5575d03044d0 <col:10, col:57> Text=" Send a mailbox message in a synchronous manner."
|   |-ParagraphComment 0x5575d0304620 <line:3956:3, line:3958:55>
|   | |-TextComment 0x5575d0304520 <line:3956:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x5575d0304570 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x5575d0304590 <col:43, col:75> Text=" and waits for a receiver to both"
|   | |-TextComment 0x5575d03045b0 <line:3957:3, col:75> Text=" receive and process it. The message data may be in a buffer, in a memory"
|   | `-TextComment 0x5575d03045d0 <line:3958:3, col:55> Text=" pool block, or non-existent (i.e. an empty message)."
|   |-ParagraphComment 0x5575d0304670 <line:3960:3>
|   | `-TextComment 0x5575d0304640 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0304690 <col:4, line:3961:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5575d0304740 <line:3960:15, line:3961:3>
|   |   |-TextComment 0x5575d03046f0 <line:3960:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5575d0304710 <line:3961:3> Text=" "
|   |-ParamCommandComment 0x5575d0304760 <col:4, line:3962:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5575d0304810 <line:3961:17, line:3962:3>
|   |   |-TextComment 0x5575d03047c0 <line:3961:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x5575d03047e0 <line:3962:3> Text=" "
|   |-ParamCommandComment 0x5575d0304830 <col:4, line:3966:45> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5575d0304960 <line:3962:18, line:3966:45>
|   |   |-TextComment 0x5575d0304890 <line:3962:18, col:80> Text=" Non-negative waiting period for the message to be received (in"
|   |   |-TextComment 0x5575d03048b0 <line:3963:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   |-TextComment 0x5575d03048d0 <line:3964:3, col:68> Text="                and K_FOREVER. Once the message has been received,"
|   |   |-TextComment 0x5575d03048f0 <line:3965:3, col:73> Text="                this routine waits as long as necessary for the message"
|   |   `-TextComment 0x5575d0304910 <line:3966:3, col:45> Text="                to be completely processed."
|   |-ParagraphComment 0x5575d03049b0 <line:3968:3>
|   | `-TextComment 0x5575d0304980 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03049d0 <col:4, line:3969:3> Name="retval"
|   | `-ParagraphComment 0x5575d0304a50 <line:3968:11, line:3969:3>
|   |   |-TextComment 0x5575d0304a00 <line:3968:11, col:26> Text=" 0 Message sent."
|   |   `-TextComment 0x5575d0304a20 <line:3969:3> Text=" "
|   |-BlockCommandComment 0x5575d0304a70 <col:4, line:3970:3> Name="retval"
|   | `-ParagraphComment 0x5575d0304af0 <line:3969:11, line:3970:3>
|   |   |-TextComment 0x5575d0304aa0 <line:3969:11, col:44> Text=" -ENOMSG Returned without waiting."
|   |   `-TextComment 0x5575d0304ac0 <line:3970:3> Text=" "
|   `-BlockCommandComment 0x5575d0304b10 <col:4, line:3972:1> Name="retval"
|     `-ParagraphComment 0x5575d0304c10 <line:3970:11, line:3972:1>
|       |-TextComment 0x5575d0304b40 <line:3970:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5575d0304b60 <line:3971:3> Text=" "
|       |-InlineCommandComment 0x5575d0304bb0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5575d0304bd0 <line:3972:1> Text=" "
|-FunctionDecl 0x5575d0267030 <line:3992:1, line:3993:26> line:3992:13 k_mbox_async_put 'void (struct k_mbox *, struct k_mbox_msg *, struct k_sem *)' extern
| |-ParmVarDecl 0x5575d0266dd0 <col:30, col:45> col:45 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5575d0266e60 <col:51, col:70> col:70 tx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5575d0266ef0 <line:3993:9, col:23> col:23 sem 'struct k_sem *'
| `-FullComment 0x5575d0305400 <line:3977:3, line:3991:1>
|   |-ParagraphComment 0x5575d0304d30 <line:3977:3>
|   | `-TextComment 0x5575d0304d00 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0304d50 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5575d0304db0 <col:10, col:59>
|   |   `-TextComment 0x5575d0304d80 <col:10, col:59> Text=" Send a mailbox message in an asynchronous manner."
|   |-ParagraphComment 0x5575d0304f70 <line:3979:3, line:3983:29>
|   | |-TextComment 0x5575d0304dd0 <line:3979:3, col:35> Text=" This routine sends a message to "
|   | |-InlineCommandComment 0x5575d0304e20 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="mbox"
|   | |-TextComment 0x5575d0304e40 <col:43, col:73> Text=" without waiting for a receiver"
|   | |-TextComment 0x5575d0304e60 <line:3980:3, col:78> Text=" to process it. The message data may be in a buffer, in a memory pool block,"
|   | |-TextComment 0x5575d0304e80 <line:3981:3, col:70> Text=" or non-existent (i.e. an empty message). Optionally, the semaphore "
|   | |-InlineCommandComment 0x5575d0304ed0 <col:71, col:72> Name="a" RenderEmphasized Arg[0]="sem"
|   | |-TextComment 0x5575d0304ef0 <line:3982:3, col:71> Text=" will be given when the message has been both received and completely"
|   | `-TextComment 0x5575d0304f10 <line:3983:3, col:29> Text=" processed by the receiver."
|   |-ParagraphComment 0x5575d0304fc0 <line:3985:3>
|   | `-TextComment 0x5575d0304f90 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0304fe0 <col:4, line:3986:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5575d0305090 <line:3985:15, line:3986:3>
|   |   |-TextComment 0x5575d0305040 <line:3985:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5575d0305060 <line:3986:3> Text=" "
|   |-ParamCommandComment 0x5575d03050c0 <col:4, line:3987:3> [in] implicitly Param="tx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5575d0305170 <line:3986:17, line:3987:3>
|   |   |-TextComment 0x5575d0305120 <line:3986:17, col:60> Text=" Address of the transmit message descriptor."
|   |   `-TextComment 0x5575d0305140 <line:3987:3> Text=" "
|   |-ParamCommandComment 0x5575d0305190 <col:4, col:64> [in] implicitly Param="sem" ParamIndex=2
|   | `-ParagraphComment 0x5575d0305220 <col:14, col:64>
|   |   `-TextComment 0x5575d03051f0 <col:14, col:64> Text=" Address of a semaphore, or NULL if none is needed."
|   |-ParagraphComment 0x5575d0305270 <line:3989:3>
|   | `-TextComment 0x5575d0305240 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0305290 <col:4, line:3991:1> Name="return"
|     `-ParagraphComment 0x5575d0305390 <line:3989:11, line:3991:1>
|       |-TextComment 0x5575d03052c0 <line:3989:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d03052e0 <line:3990:3> Text=" "
|       |-InlineCommandComment 0x5575d0305330 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5575d0305350 <line:3991:1> Text=" "
|-FunctionDecl 0x5575d0267418 <line:4014:1, line:4015:36> line:4014:12 k_mbox_get 'int (struct k_mbox *, struct k_mbox_msg *, void *, s32_t)' extern
| |-ParmVarDecl 0x5575d0267140 <col:23, col:38> col:38 mbox 'struct k_mbox *'
| |-ParmVarDecl 0x5575d02671d0 <col:44, col:63> col:63 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5575d0267250 <line:4015:9, col:15> col:15 buffer 'void *'
| |-ParmVarDecl 0x5575d02672c8 <col:23, col:29> col:29 timeout 's32_t':'int'
| `-FullComment 0x5575d0305d30 <line:3996:3, line:4013:1>
|   |-ParagraphComment 0x5575d03054a0 <line:3996:3>
|   | `-TextComment 0x5575d0305470 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03054c0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5575d0305520 <col:10, col:36>
|   |   `-TextComment 0x5575d03054f0 <col:10, col:36> Text=" Receive a mailbox message."
|   |-ParagraphComment 0x5575d0305610 <line:3998:3, line:3999:40>
|   | |-TextComment 0x5575d0305540 <line:3998:3, col:40> Text=" This routine receives a message from "
|   | |-InlineCommandComment 0x5575d0305590 <col:41, col:42> Name="a" RenderEmphasized Arg[0]="mbox,"
|   | |-TextComment 0x5575d03055b0 <col:49, col:74> Text=" then optionally retrieves"
|   | `-TextComment 0x5575d03055d0 <line:3999:3, col:40> Text=" its data and disposes of the message."
|   |-ParagraphComment 0x5575d0305660 <line:4001:3>
|   | `-TextComment 0x5575d0305630 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0305680 <col:4, line:4002:3> [in] implicitly Param="mbox" ParamIndex=0
|   | `-ParagraphComment 0x5575d0305730 <line:4001:15, line:4002:3>
|   |   |-TextComment 0x5575d03056e0 <line:4001:15, col:38> Text=" Address of the mailbox."
|   |   `-TextComment 0x5575d0305700 <line:4002:3> Text=" "
|   |-ParamCommandComment 0x5575d0305750 <col:4, line:4003:3> [in] implicitly Param="rx_msg" ParamIndex=1
|   | `-ParagraphComment 0x5575d0305800 <line:4002:17, line:4003:3>
|   |   |-TextComment 0x5575d03057b0 <line:4002:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x5575d03057d0 <line:4003:3> Text=" "
|   |-ParamCommandComment 0x5575d0305820 <col:4, line:4005:3> [in] implicitly Param="buffer" ParamIndex=2
|   | `-ParagraphComment 0x5575d0305900 <line:4003:17, line:4005:3>
|   |   |-TextComment 0x5575d0305880 <line:4003:17, col:77> Text=" Address of the buffer to receive data, or NULL to defer data"
|   |   |-TextComment 0x5575d03058a0 <line:4004:3, col:60> Text="               retrieval and message disposal until later."
|   |   `-TextComment 0x5575d03058c0 <line:4005:3> Text=" "
|   |-ParamCommandComment 0x5575d0305920 <col:4, line:4007:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5575d0305a00 <line:4005:18, line:4007:32>
|   |   |-TextComment 0x5575d0305980 <line:4005:18, col:78> Text=" Non-negative waiting period for a message to be received (in"
|   |   |-TextComment 0x5575d03059a0 <line:4006:3, col:71> Text="                milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5575d03059c0 <line:4007:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5575d0305a50 <line:4009:3>
|   | `-TextComment 0x5575d0305a20 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0305a70 <col:4, line:4010:3> Name="retval"
|   | `-ParagraphComment 0x5575d0305af0 <line:4009:11, line:4010:3>
|   |   |-TextComment 0x5575d0305aa0 <line:4009:11, col:30> Text=" 0 Message received."
|   |   `-TextComment 0x5575d0305ac0 <line:4010:3> Text=" "
|   |-BlockCommandComment 0x5575d0305b10 <col:4, line:4011:3> Name="retval"
|   | `-ParagraphComment 0x5575d0305b90 <line:4010:11, line:4011:3>
|   |   |-TextComment 0x5575d0305b40 <line:4010:11, col:44> Text=" -ENOMSG Returned without waiting."
|   |   `-TextComment 0x5575d0305b60 <line:4011:3> Text=" "
|   `-BlockCommandComment 0x5575d0305bb0 <col:4, line:4013:1> Name="retval"
|     `-ParagraphComment 0x5575d0305cb0 <line:4011:11, line:4013:1>
|       |-TextComment 0x5575d0305be0 <line:4011:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5575d0305c00 <line:4012:3> Text=" "
|       |-InlineCommandComment 0x5575d0305c50 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5575d0305c70 <line:4013:1> Text=" "
|-FunctionDecl 0x5575d0267e10 <line:4033:1, col:68> col:13 k_mbox_data_get 'void (struct k_mbox_msg *, void *)' extern
| |-ParmVarDecl 0x5575d0267530 <col:29, col:48> col:48 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5575d0267cf0 <col:56, col:62> col:62 buffer 'void *'
| `-FullComment 0x5575d0306300 <line:4018:3, line:4032:1>
|   |-ParagraphComment 0x5575d0305dd0 <line:4018:3>
|   | `-TextComment 0x5575d0305da0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0305df0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5575d0305e50 <col:10, col:54>
|   |   `-TextComment 0x5575d0305e20 <col:10, col:54> Text=" Retrieve mailbox message data into a buffer."
|   |-ParagraphComment 0x5575d0305ec0 <line:4020:3, line:4021:57>
|   | |-TextComment 0x5575d0305e70 <line:4020:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | `-TextComment 0x5575d0305e90 <line:4021:3, col:57> Text=" its data into a buffer, then disposing of the message."
|   |-ParagraphComment 0x5575d0305f30 <line:4023:3, line:4024:31>
|   | |-TextComment 0x5575d0305ee0 <line:4023:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | `-TextComment 0x5575d0305f00 <line:4024:3, col:31> Text=" without retrieving its data."
|   |-ParagraphComment 0x5575d0305f80 <line:4026:3>
|   | `-TextComment 0x5575d0305f50 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0305fa0 <col:4, line:4027:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x5575d0306050 <line:4026:17, line:4027:3>
|   |   |-TextComment 0x5575d0306000 <line:4026:17, col:59> Text=" Address of the receive message descriptor."
|   |   `-TextComment 0x5575d0306020 <line:4027:3> Text=" "
|   |-ParamCommandComment 0x5575d0306070 <col:4, line:4028:26> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5575d0306120 <line:4027:17, line:4028:26>
|   |   |-TextComment 0x5575d03060d0 <line:4027:17, col:74> Text=" Address of the buffer to receive data, or NULL to discard"
|   |   `-TextComment 0x5575d03060f0 <line:4028:3, col:26> Text="               the data."
|   |-ParagraphComment 0x5575d0306170 <line:4030:3>
|   | `-TextComment 0x5575d0306140 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0306190 <col:4, line:4032:1> Name="return"
|     `-ParagraphComment 0x5575d0306290 <line:4030:11, line:4032:1>
|       |-TextComment 0x5575d03061c0 <line:4030:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d03061e0 <line:4031:3> Text=" "
|       |-InlineCommandComment 0x5575d0306230 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5575d0306250 <line:4032:1> Text=" "
|-FunctionDecl 0x5575d0268268 <line:4066:1, line:4068:46> line:4066:12 k_mbox_data_block_get 'int (struct k_mbox_msg *, struct k_mem_pool *, struct k_mem_block *, s32_t)' extern
| |-ParmVarDecl 0x5575d0267f10 <col:34, col:53> col:53 rx_msg 'struct k_mbox_msg *'
| |-ParmVarDecl 0x5575d0267fa0 <line:4067:6, col:25> col:25 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5575d0268098 <line:4068:6, col:26> col:26 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5575d0268110 <col:33, col:39> col:39 timeout 's32_t':'int'
| `-FullComment 0x5575d0306da0 <line:4036:3, line:4065:1>
|   |-ParagraphComment 0x5575d03063a0 <line:4036:3>
|   | `-TextComment 0x5575d0306370 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03063c0 <col:4, col:65> Name="brief"
|   | `-ParagraphComment 0x5575d0306420 <col:10, col:65>
|   |   `-TextComment 0x5575d03063f0 <col:10, col:65> Text=" Retrieve mailbox message data into a memory pool block."
|   |-ParagraphComment 0x5575d0306510 <line:4038:3, line:4042:42>
|   | |-TextComment 0x5575d0306440 <line:4038:3, col:76> Text=" This routine completes the processing of a received message by retrieving"
|   | |-TextComment 0x5575d0306460 <line:4039:3, col:68> Text=" its data into a memory pool block, then disposing of the message."
|   | |-TextComment 0x5575d0306480 <line:4040:3, col:71> Text=" The memory pool block that results from successful retrieval must be"
|   | |-TextComment 0x5575d03064a0 <line:4041:3, col:71> Text=" returned to the pool once the data has been processed, even in cases"
|   | `-TextComment 0x5575d03064c0 <line:4042:3, col:42> Text=" where zero bytes of data are retrieved."
|   |-ParagraphComment 0x5575d03065b0 <line:4044:3, line:4046:33>
|   | |-TextComment 0x5575d0306530 <line:4044:3, col:75> Text=" Alternatively, this routine can be used to dispose of a received message"
|   | |-TextComment 0x5575d0306550 <line:4045:3, col:73> Text=" without retrieving its data. In this case there is no need to return a"
|   | `-TextComment 0x5575d0306570 <line:4046:3, col:33> Text=" memory pool block to the pool."
|   |-ParagraphComment 0x5575d03066a0 <line:4048:3, line:4052:55>
|   | |-TextComment 0x5575d03065d0 <line:4048:3, col:74> Text=" This routine allocates a new memory pool block for the data only if the"
|   | |-TextComment 0x5575d03065f0 <line:4049:3, col:78> Text=" data is not already in one. If a new block cannot be allocated, the routine"
|   | |-TextComment 0x5575d0306610 <line:4050:3, col:74> Text=" returns a failure code and the received message is left unchanged. This"
|   | |-TextComment 0x5575d0306630 <line:4051:3, col:79> Text=" permits the caller to reattempt data retrieval at a later time or to dispose"
|   | `-TextComment 0x5575d0306650 <line:4052:3, col:55> Text=" of the received message without retrieving its data."
|   |-ParagraphComment 0x5575d03066f0 <line:4054:3>
|   | `-TextComment 0x5575d03066c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0306710 <col:4, line:4055:3> [in] implicitly Param="rx_msg" ParamIndex=0
|   | `-ParagraphComment 0x5575d03067c0 <line:4054:17, line:4055:3>
|   |   |-TextComment 0x5575d0306770 <line:4054:17, col:57> Text=" Address of a receive message descriptor."
|   |   `-TextComment 0x5575d0306790 <line:4055:3> Text=" "
|   |-ParamCommandComment 0x5575d03067e0 <col:4, line:4056:3> [in] implicitly Param="pool" ParamIndex=1
|   | `-ParagraphComment 0x5575d0306890 <line:4055:15, line:4056:3>
|   |   |-TextComment 0x5575d0306840 <line:4055:15, col:63> Text=" Address of memory pool, or NULL to discard data."
|   |   `-TextComment 0x5575d0306860 <line:4056:3> Text=" "
|   |-ParamCommandComment 0x5575d03068b0 <col:4, line:4057:3> [in] implicitly Param="block" ParamIndex=2
|   | `-ParagraphComment 0x5575d0306960 <line:4056:16, line:4057:3>
|   |   |-TextComment 0x5575d0306910 <line:4056:16, col:67> Text=" Address of the area to hold memory pool block info."
|   |   `-TextComment 0x5575d0306930 <line:4057:3> Text=" "
|   |-ParamCommandComment 0x5575d0306980 <col:4, line:4059:32> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5575d0306a60 <line:4057:18, line:4059:32>
|   |   |-TextComment 0x5575d03069e0 <line:4057:18, col:77> Text=" Non-negative waiting period to wait for a memory pool block"
|   |   |-TextComment 0x5575d0306a00 <line:4058:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5575d0306a20 <line:4059:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5575d0306ab0 <line:4061:3>
|   | `-TextComment 0x5575d0306a80 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0306ad0 <col:4, line:4062:3> Name="retval"
|   | `-ParagraphComment 0x5575d0306b50 <line:4061:11, line:4062:3>
|   |   |-TextComment 0x5575d0306b00 <line:4061:11, col:28> Text=" 0 Data retrieved."
|   |   `-TextComment 0x5575d0306b20 <line:4062:3> Text=" "
|   |-BlockCommandComment 0x5575d0306b70 <col:4, line:4063:3> Name="retval"
|   | `-ParagraphComment 0x5575d0306bf0 <line:4062:11, line:4063:3>
|   |   |-TextComment 0x5575d0306ba0 <line:4062:11, col:44> Text=" -ENOMEM Returned without waiting."
|   |   `-TextComment 0x5575d0306bc0 <line:4063:3> Text=" "
|   `-BlockCommandComment 0x5575d0306c10 <col:4, line:4065:1> Name="retval"
|     `-ParagraphComment 0x5575d0306d10 <line:4063:11, line:4065:1>
|       |-TextComment 0x5575d0306c40 <line:4063:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5575d0306c60 <line:4064:3> Text=" "
|       |-InlineCommandComment 0x5575d0306cb0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MBOX-002"
|       `-TextComment 0x5575d0306cd0 <line:4065:1> Text=" "
|-RecordDecl 0x5575d02683b8 prev 0x5575d021b3b8 <line:4079:1, line:4095:1> line:4079:8 struct k_pipe definition
| |-FullComment 0x5575d0306e70 <line:4078:4, col:19>
| | `-ParagraphComment 0x5575d0306e40 <col:4, col:19>
| |   `-TextComment 0x5575d0306e10 <col:4, col:19> Text=" Pipe Structure "
| |-FieldDecl 0x5575d0268450 <line:4080:2, col:17> col:17 buffer 'unsigned char *'
| | `-FullComment 0x5575d0306f40 <col:38, col:63>
| |   `-ParagraphComment 0x5575d0306f10 <col:38, col:63>
| |     `-TextComment 0x5575d0306ee0 <col:38, col:63> Text=" Pipe buffer: may be NULL "
| |-FieldDecl 0x5575d02684d8 <line:4081:2, col:17> col:17 size 'size_t':'unsigned long'
| | `-FullComment 0x5575d0307010 <col:38, col:50>
| |   `-ParagraphComment 0x5575d0306fe0 <col:38, col:50>
| |     `-TextComment 0x5575d0306fb0 <col:38, col:50> Text=" Buffer size "
| |-FieldDecl 0x5575d0268568 <line:4082:2, col:17> col:17 bytes_used 'size_t':'unsigned long'
| | `-FullComment 0x5575d0307100 <col:38, col:61>
| |   `-ParagraphComment 0x5575d03070d0 <col:38, col:61>
| |     `-TextComment 0x5575d0307080 <col:38, col:61> Text=" # bytes used in buffer "
| |-FieldDecl 0x5575d02685f8 <line:4083:2, col:17> col:17 read_index 'size_t':'unsigned long'
| | `-FullComment 0x5575d03071d0 <col:38, col:67>
| |   `-ParagraphComment 0x5575d03071a0 <col:38, col:67>
| |     `-TextComment 0x5575d0307170 <col:38, col:67> Text=" Where in buffer to read from "
| |-FieldDecl 0x5575d0268688 <line:4084:2, col:17> col:17 write_index 'size_t':'unsigned long'
| | `-FullComment 0x5575d03072a0 <col:38, col:63>
| |   `-ParagraphComment 0x5575d0307270 <col:38, col:63>
| |     `-TextComment 0x5575d0307240 <col:38, col:63> Text=" Where in buffer to write "
| |-FieldDecl 0x5575d0268728 <line:4085:2, col:20> col:20 lock 'struct k_spinlock':'struct k_spinlock'
| | `-FullComment 0x5575d0307370 <col:31, col:52>
| |   `-ParagraphComment 0x5575d0307340 <col:31, col:52>
| |     `-TextComment 0x5575d0307310 <col:31, col:52> Text=" Synchronization lock "
| |-RecordDecl 0x5575d02687a8 <line:4087:2, line:4090:2> line:4087:2 struct definition
| | |-FieldDecl 0x5575d0268868 <line:4088:3, col:18> col:18 readers '_wait_q_t':'_wait_q_t'
| | | `-FullComment 0x5575d0307440 <col:31, col:49>
| | |   `-ParagraphComment 0x5575d0307410 <col:31, col:49>
| | |     `-TextComment 0x5575d03073e0 <col:31, col:49> Text=" Reader wait queue "
| | `-FieldDecl 0x5575d02688f8 <line:4089:3, col:18> col:18 writers '_wait_q_t':'_wait_q_t'
| |   `-FullComment 0x5575d0307510 <col:31, col:49>
| |     `-ParagraphComment 0x5575d03074e0 <col:31, col:49>
| |       `-TextComment 0x5575d03074b0 <col:31, col:49> Text=" Writer wait queue "
| |-FieldDecl 0x5575d02689e0 <line:4087:2, line:4090:4> col:4 wait_q 'struct (anonymous struct at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)':'struct k_pipe::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4087:2)'
| `-FieldDecl 0x5575d0268a40 <line:4094:2, col:14> col:14 flags 'u8_t':'unsigned char'
|   `-FullComment 0x5575d03075e0 <col:26, col:32>
|     `-ParagraphComment 0x5575d03075b0 <col:26, col:32>
|       `-TextComment 0x5575d0307580 <col:26, col:32> Text=" Flags "
|-FunctionDecl 0x5575d0269d50 <line:4158:1, col:73> col:6 k_pipe_init 'void (struct k_pipe *, unsigned char *, size_t)'
| |-ParmVarDecl 0x5575d0268c78 <col:18, col:33> col:33 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d0269b98 <col:39, col:54> col:54 buffer 'unsigned char *'
| |-ParmVarDecl 0x5575d0269c10 <col:62, col:69> col:69 size 'size_t':'unsigned long'
| `-FullComment 0x5575d0307c20 <line:4145:3, line:4157:1>
|   |-ParagraphComment 0x5575d0307680 <line:4145:3>
|   | `-TextComment 0x5575d0307650 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03076a0 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5575d0307700 <col:10, col:28>
|   |   `-TextComment 0x5575d03076d0 <col:10, col:28> Text=" Initialize a pipe."
|   |-ParagraphComment 0x5575d0307750 <line:4147:3, col:66>
|   | `-TextComment 0x5575d0307720 <col:3, col:66> Text=" This routine initializes a pipe object, prior to its first use."
|   |-ParagraphComment 0x5575d03077a0 <line:4149:3>
|   | `-TextComment 0x5575d0307770 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d03077c0 <col:4, line:4150:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5575d0307870 <line:4149:15, line:4150:3>
|   |   |-TextComment 0x5575d0307820 <line:4149:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5575d0307840 <line:4150:3> Text=" "
|   |-ParamCommandComment 0x5575d0307890 <col:4, line:4152:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5575d0307970 <line:4150:17, line:4152:3>
|   |   |-TextComment 0x5575d03078f0 <line:4150:17, col:77> Text=" Address of the pipe's ring buffer, or NULL if no ring buffer"
|   |   |-TextComment 0x5575d0307910 <line:4151:3, col:25> Text="               is used."
|   |   `-TextComment 0x5575d0307930 <line:4152:3> Text=" "
|   |-ParamCommandComment 0x5575d0307990 <col:4, line:4153:30> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5575d0307a40 <line:4152:15, line:4153:30>
|   |   |-TextComment 0x5575d03079f0 <line:4152:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   `-TextComment 0x5575d0307a10 <line:4153:3, col:30> Text="             buffer is used."
|   |-ParagraphComment 0x5575d0307a90 <line:4155:3>
|   | `-TextComment 0x5575d0307a60 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0307ab0 <col:4, line:4157:1> Name="return"
|     `-ParagraphComment 0x5575d0307bb0 <line:4155:11, line:4157:1>
|       |-TextComment 0x5575d0307ae0 <line:4155:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d0307b00 <line:4156:3> Text=" "
|       |-InlineCommandComment 0x5575d0307b50 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5575d0307b70 <line:4157:1> Text=" "
|-FunctionDecl 0x5575d0269f78 <line:4172:1, col:39> col:5 k_pipe_cleanup 'int (struct k_pipe *)'
| |-ParmVarDecl 0x5575d0269e60 <col:20, col:35> col:35 pipe 'struct k_pipe *'
| `-FullComment 0x5575d0308120 <line:4161:3, line:4171:1>
|   |-ParagraphComment 0x5575d0307cc0 <line:4161:3>
|   | `-TextComment 0x5575d0307c90 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0307ce0 <col:4, col:43> Name="brief"
|   | `-ParagraphComment 0x5575d0307d40 <col:10, col:43>
|   |   `-TextComment 0x5575d0307d10 <col:10, col:43> Text=" Release a pipe's allocated buffer"
|   |-ParagraphComment 0x5575d0307de0 <line:4163:3, line:4165:46>
|   | |-TextComment 0x5575d0307d60 <line:4163:3, col:64> Text=" If a pipe object was given a dynamically allocated buffer via"
|   | |-TextComment 0x5575d0307d80 <line:4164:3, col:69> Text=" k_pipe_alloc_init(), this will free it. This function does nothing"
|   | `-TextComment 0x5575d0307da0 <line:4165:3, col:46> Text=" if the buffer wasn't dynamically allocated."
|   |-ParagraphComment 0x5575d0307e30 <line:4167:3>
|   | `-TextComment 0x5575d0307e00 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0307e50 <col:4, line:4168:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5575d0307f00 <line:4167:15, line:4168:3>
|   |   |-TextComment 0x5575d0307eb0 <line:4167:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5575d0307ed0 <line:4168:3> Text=" "
|   |-BlockCommandComment 0x5575d0307f20 <col:4, line:4169:3> Name="retval"
|   | `-ParagraphComment 0x5575d0307fa0 <line:4168:11, line:4169:3>
|   |   |-TextComment 0x5575d0307f50 <line:4168:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d0307f70 <line:4169:3> Text=" "
|   `-BlockCommandComment 0x5575d0307fc0 <col:4, line:4171:1> Name="retval"
|     `-ParagraphComment 0x5575d03080c0 <line:4169:11, line:4171:1>
|       |-TextComment 0x5575d0307ff0 <line:4169:11, col:37> Text=" -EAGAIN nothing to cleanup"
|       |-TextComment 0x5575d0308010 <line:4170:3> Text=" "
|       |-InlineCommandComment 0x5575d0308060 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5575d0308080 <line:4171:1> Text=" "
|-FunctionDecl 0x5575d026a208 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4190:65> col:15 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x5575d026a070 <col:33, col:48> col:48 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d026a0e8 <col:54, col:61> col:61 size 'size_t':'unsigned long'
| `-FullComment 0x5575d0308780 <line:4175:3, line:4189:1>
|   |-ParagraphComment 0x5575d03081c0 <line:4175:3>
|   | `-TextComment 0x5575d0308190 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03081e0 <col:4, col:56> Name="brief"
|   | `-ParagraphComment 0x5575d0308240 <col:10, col:56>
|   |   `-TextComment 0x5575d0308210 <col:10, col:56> Text=" Initialize a pipe and allocate a buffer for it"
|   |-ParagraphComment 0x5575d03082e0 <line:4177:3, line:4179:74>
|   | |-TextComment 0x5575d0308260 <line:4177:3, col:76> Text=" Storage for the buffer region will be allocated from the calling thread's"
|   | |-TextComment 0x5575d0308280 <line:4178:3, col:77> Text=" resource pool. This memory will be released if k_pipe_cleanup() is called,"
|   | `-TextComment 0x5575d03082a0 <line:4179:3, col:74> Text=" or userspace is enabled and the pipe object loses all references to it."
|   |-ParagraphComment 0x5575d0308330 <line:4181:3, col:69>
|   | `-TextComment 0x5575d0308300 <col:3, col:69> Text=" This function should only be called on uninitialized pipe objects."
|   |-ParagraphComment 0x5575d0308380 <line:4183:3>
|   | `-TextComment 0x5575d0308350 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d03083a0 <col:4, line:4184:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5575d0308450 <line:4183:15, line:4184:3>
|   |   |-TextComment 0x5575d0308400 <line:4183:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5575d0308420 <line:4184:3> Text=" "
|   |-ParamCommandComment 0x5575d0308470 <col:4, line:4186:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5575d0308550 <line:4184:15, line:4186:3>
|   |   |-TextComment 0x5575d03084d0 <line:4184:15, col:76> Text=" Size of the pipe's ring buffer (in bytes), or zero if no ring"
|   |   |-TextComment 0x5575d03084f0 <line:4185:3, col:30> Text="             buffer is used."
|   |   `-TextComment 0x5575d0308510 <line:4186:3> Text=" "
|   |-BlockCommandComment 0x5575d0308570 <col:4, line:4187:3> Name="retval"
|   | `-ParagraphComment 0x5575d03085f0 <line:4186:11, line:4187:3>
|   |   |-TextComment 0x5575d03085a0 <line:4186:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d03085c0 <line:4187:3> Text=" "
|   `-BlockCommandComment 0x5575d0308610 <col:4, line:4189:1> Name="retval"
|     `-ParagraphComment 0x5575d0308710 <line:4187:11, line:4189:1>
|       |-TextComment 0x5575d0308640 <line:4187:11, col:50> Text=" -ENOMEM if memory couldn't be allocated"
|       |-TextComment 0x5575d0308660 <line:4188:3> Text=" "
|       |-InlineCommandComment 0x5575d03086b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5575d03086d0 <line:4189:1> Text=" "
|-FunctionDecl 0x5575d026a728 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4214:35> line:4212:15 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5575d026a310 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d026a390 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5575d026a408 <line:4213:5, col:12> col:12 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d026a4b0 <col:28, col:36> col:36 bytes_written 'size_t *'
| |-ParmVarDecl 0x5575d026a528 <line:4214:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d026a5a0 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x5575d02d47f0 <line:4193:3, line:4211:1>
|   |-ParagraphComment 0x5575d0308820 <line:4193:3>
|   | `-TextComment 0x5575d03087f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0308840 <col:4, col:31> Name="brief"
|   | `-ParagraphComment 0x5575d03088a0 <col:10, col:31>
|   |   `-TextComment 0x5575d0308870 <col:10, col:31> Text=" Write data to a pipe."
|   |-ParagraphComment 0x5575d03089c0 <line:4195:3, col:66>
|   | |-TextComment 0x5575d03088c0 <col:3, col:29> Text=" This routine writes up to "
|   | |-InlineCommandComment 0x5575d0308910 <col:30, col:31> Name="a" RenderEmphasized Arg[0]="bytes_to_write"
|   | |-TextComment 0x5575d0308930 <col:47, col:64> Text=" bytes of data to "
|   | `-InlineCommandComment 0x5575d0308980 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x5575d0308a10 <line:4197:3>
|   | `-TextComment 0x5575d03089e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0308a30 <col:4, line:4198:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5575d0308ae0 <line:4197:15, line:4198:3>
|   |   |-TextComment 0x5575d0308a90 <line:4197:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5575d0308ab0 <line:4198:3> Text=" "
|   |-ParamCommandComment 0x5575d0308b00 <col:4, line:4199:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d0308bb0 <line:4198:15, line:4199:3>
|   |   |-TextComment 0x5575d0308b60 <line:4198:15, col:40> Text=" Address of data to write."
|   |   `-TextComment 0x5575d0308b80 <line:4199:3> Text=" "
|   |-ParamCommandComment 0x5575d0308bd0 <col:4, line:4200:3> [in] implicitly Param="bytes_to_write" ParamIndex=2
|   | `-ParagraphComment 0x5575d0308c80 <line:4199:25, line:4200:3>
|   |   |-TextComment 0x5575d0308c30 <line:4199:25, col:49> Text=" Size of data (in bytes)."
|   |   `-TextComment 0x5575d0308c50 <line:4200:3> Text=" "
|   |-ParamCommandComment 0x5575d0308ca0 <col:4, line:4201:3> [in] implicitly Param="bytes_written" ParamIndex=3
|   | `-ParagraphComment 0x5575d0308d50 <line:4200:24, line:4201:3>
|   |   |-TextComment 0x5575d0308d00 <line:4200:24, col:76> Text=" Address of area to hold the number of bytes written."
|   |   `-TextComment 0x5575d0308d20 <line:4201:3> Text=" "
|   |-ParamCommandComment 0x5575d0308d70 <col:4, line:4202:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x5575d0308e20 <line:4201:19, line:4202:3>
|   |   |-TextComment 0x5575d0308dd0 <line:4201:19, col:52> Text=" Minimum number of bytes to write."
|   |   `-TextComment 0x5575d0308df0 <line:4202:3> Text=" "
|   |-ParamCommandComment 0x5575d0308e40 <col:4, line:4204:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x5575d0308f20 <line:4202:18, line:4204:32>
|   |   |-TextComment 0x5575d0308ea0 <line:4202:18, col:80> Text=" Non-negative waiting period to wait for the data to be written"
|   |   |-TextComment 0x5575d0308ec0 <line:4203:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5575d0308ee0 <line:4204:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5575d0308f70 <line:4206:3>
|   | `-TextComment 0x5575d0308f40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0308f90 <col:4, line:4207:3> Name="retval"
|   | `-ParagraphComment 0x5575d0309090 <line:4206:11, line:4207:3>
|   |   |-TextComment 0x5575d0308fc0 <line:4206:11, col:22> Text=" 0 At least "
|   |   |-InlineCommandComment 0x5575d0309010 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   |   |-TextComment 0x5575d0309030 <col:34, col:61> Text=" bytes of data were written."
|   |   `-TextComment 0x5575d0309050 <line:4207:3> Text=" "
|   |-BlockCommandComment 0x5575d02d4540 <col:4, line:4208:3> Name="retval"
|   | `-ParagraphComment 0x5575d02d45c0 <line:4207:11, line:4208:3>
|   |   |-TextComment 0x5575d02d4570 <line:4207:11, col:71> Text=" -EIO Returned without waiting; zero data bytes were written."
|   |   `-TextComment 0x5575d02d4590 <line:4208:3> Text=" "
|   `-BlockCommandComment 0x5575d02d45e0 <col:4, line:4211:1> Name="retval"
|     `-ParagraphComment 0x5575d02d4760 <line:4208:11, line:4211:1>
|       |-TextComment 0x5575d02d4610 <line:4208:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|       |-InlineCommandComment 0x5575d02d4660 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|       |-TextComment 0x5575d02d4680 <line:4209:3, col:53> Text="                 minus one data bytes were written."
|       |-TextComment 0x5575d02d46a0 <line:4210:3> Text=" "
|       |-InlineCommandComment 0x5575d02d46f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5575d02d4710 <line:4211:1> Text=" "
|-FunctionDecl 0x5575d026bca0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4239:35> line:4237:15 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5575d026a850 <col:26, col:41> col:41 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d026a8d0 <col:47, col:53> col:53 data 'void *'
| |-ParmVarDecl 0x5575d026a948 <line:4238:5, col:12> col:12 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d026a9c0 <col:27, col:35> col:35 bytes_read 'size_t *'
| |-ParmVarDecl 0x5575d026aa38 <line:4239:5, col:12> col:12 min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d026aab0 <col:22, col:28> col:28 timeout 's32_t':'int'
| `-FullComment 0x5575d02d5480 <line:4217:3, line:4236:1>
|   |-ParagraphComment 0x5575d02d4890 <line:4217:3>
|   | `-TextComment 0x5575d02d4860 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d48b0 <col:4, col:32> Name="brief"
|   | `-ParagraphComment 0x5575d02d4910 <col:10, col:32>
|   |   `-TextComment 0x5575d02d48e0 <col:10, col:32> Text=" Read data from a pipe."
|   |-ParagraphComment 0x5575d02d4a30 <line:4219:3, col:66>
|   | |-TextComment 0x5575d02d4930 <col:3, col:28> Text=" This routine reads up to "
|   | |-InlineCommandComment 0x5575d02d4980 <col:29, col:30> Name="a" RenderEmphasized Arg[0]="bytes_to_read"
|   | |-TextComment 0x5575d02d49a0 <col:45, col:64> Text=" bytes of data from "
|   | `-InlineCommandComment 0x5575d02d49f0 <col:65, col:66> Name="a" RenderEmphasized Arg[0]="pipe."
|   |-ParagraphComment 0x5575d02d4a80 <line:4221:3>
|   | `-TextComment 0x5575d02d4a50 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d4aa0 <col:4, line:4222:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d4b50 <line:4221:15, line:4222:3>
|   |   |-TextComment 0x5575d02d4b00 <line:4221:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5575d02d4b20 <line:4222:3> Text=" "
|   |-ParamCommandComment 0x5575d02d4b70 <col:4, line:4223:3> [in] implicitly Param="data" ParamIndex=1
|   | `-ParagraphComment 0x5575d02d4c20 <line:4222:15, line:4223:3>
|   |   |-TextComment 0x5575d02d4bd0 <line:4222:15, col:56> Text=" Address to place the data read from pipe."
|   |   `-TextComment 0x5575d02d4bf0 <line:4223:3> Text=" "
|   |-ParamCommandComment 0x5575d02d4c40 <col:4, line:4224:3> [in] implicitly Param="bytes_to_read" ParamIndex=2
|   | `-ParagraphComment 0x5575d02d4cf0 <line:4223:24, line:4224:3>
|   |   |-TextComment 0x5575d02d4ca0 <line:4223:24, col:61> Text=" Maximum number of data bytes to read."
|   |   `-TextComment 0x5575d02d4cc0 <line:4224:3> Text=" "
|   |-ParamCommandComment 0x5575d02d4d10 <col:4, line:4225:3> [in] implicitly Param="bytes_read" ParamIndex=3
|   | `-ParagraphComment 0x5575d02d4dc0 <line:4224:21, line:4225:3>
|   |   |-TextComment 0x5575d02d4d70 <line:4224:21, col:70> Text=" Address of area to hold the number of bytes read."
|   |   `-TextComment 0x5575d02d4d90 <line:4225:3> Text=" "
|   |-ParamCommandComment 0x5575d02d4de0 <col:4, line:4226:3> [in] implicitly Param="min_xfer" ParamIndex=4
|   | `-ParagraphComment 0x5575d02d4e90 <line:4225:19, line:4226:3>
|   |   |-TextComment 0x5575d02d4e40 <line:4225:19, col:56> Text=" Minimum number of data bytes to read."
|   |   `-TextComment 0x5575d02d4e60 <line:4226:3> Text=" "
|   |-ParamCommandComment 0x5575d02d4eb0 <col:4, line:4228:32> [in] implicitly Param="timeout" ParamIndex=5
|   | `-ParagraphComment 0x5575d02d4f90 <line:4226:18, line:4228:32>
|   |   |-TextComment 0x5575d02d4f10 <line:4226:18, col:77> Text=" Non-negative waiting period to wait for the data to be read"
|   |   |-TextComment 0x5575d02d4f30 <line:4227:3, col:75> Text="                (in milliseconds), or one of the special values K_NO_WAIT"
|   |   `-TextComment 0x5575d02d4f50 <line:4228:3, col:32> Text="                and K_FOREVER."
|   |-ParagraphComment 0x5575d02d4fe0 <line:4230:3>
|   | `-TextComment 0x5575d02d4fb0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d5000 <col:4, line:4231:3> Name="retval"
|   | `-ParagraphComment 0x5575d02d5100 <line:4230:11, line:4231:3>
|   |   |-TextComment 0x5575d02d5030 <line:4230:11, col:22> Text=" 0 At least "
|   |   |-InlineCommandComment 0x5575d02d5080 <col:23, col:24> Name="a" RenderEmphasized Arg[0]="min_xfer"
|   |   |-TextComment 0x5575d02d50a0 <col:34, col:58> Text=" bytes of data were read."
|   |   `-TextComment 0x5575d02d50c0 <line:4231:3> Text=" "
|   |-BlockCommandComment 0x5575d02d5120 <col:4, line:4232:3> Name="retval"
|   | `-ParagraphComment 0x5575d02d51a0 <line:4231:11, line:4232:3>
|   |   |-TextComment 0x5575d02d5150 <line:4231:11, col:46> Text=" -EINVAL invalid parameters supplied"
|   |   `-TextComment 0x5575d02d5170 <line:4232:3> Text=" "
|   |-BlockCommandComment 0x5575d02d51c0 <col:4, line:4233:3> Name="retval"
|   | `-ParagraphComment 0x5575d02d5240 <line:4232:11, line:4233:3>
|   |   |-TextComment 0x5575d02d51f0 <line:4232:11, col:68> Text=" -EIO Returned without waiting; zero data bytes were read."
|   |   `-TextComment 0x5575d02d5210 <line:4233:3> Text=" "
|   `-BlockCommandComment 0x5575d02d5260 <col:4, line:4236:1> Name="retval"
|     `-ParagraphComment 0x5575d02d53e0 <line:4233:11, line:4236:1>
|       |-TextComment 0x5575d02d5290 <line:4233:11, col:62> Text=" -EAGAIN Waiting period timed out; between zero and "
|       |-InlineCommandComment 0x5575d02d52e0 <col:63, col:64> Name="a" RenderEmphasized Arg[0]="min_xfer"
|       |-TextComment 0x5575d02d5300 <line:4234:3, col:50> Text="                 minus one data bytes were read."
|       |-TextComment 0x5575d02d5320 <line:4235:3> Text=" "
|       |-InlineCommandComment 0x5575d02d5370 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5575d02d5390 <line:4236:1> Text=" "
|-FunctionDecl 0x5575d026c0a0 <line:4256:1, line:4257:39> line:4256:13 k_pipe_block_put 'void (struct k_pipe *, struct k_mem_block *, size_t, struct k_sem *)' extern
| |-ParmVarDecl 0x5575d026bdc0 <col:30, col:45> col:45 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d026be50 <col:51, col:71> col:71 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5575d026bec8 <line:4257:9, col:16> col:16 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d026bf58 <col:22, col:36> col:36 sem 'struct k_sem *'
| `-FullComment 0x5575d02d5ce0 <line:4242:3, line:4255:1>
|   |-ParagraphComment 0x5575d02d5520 <line:4242:3>
|   | `-TextComment 0x5575d02d54f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d5540 <col:4, col:39> Name="brief"
|   | `-ParagraphComment 0x5575d02d55a0 <col:10, col:39>
|   |   `-TextComment 0x5575d02d5570 <col:10, col:39> Text=" Write memory block to a pipe."
|   |-ParagraphComment 0x5575d02d5790 <line:4244:3, line:4246:79>
|   | |-TextComment 0x5575d02d55c0 <line:4244:3, col:63> Text=" This routine writes the data contained in a memory block to "
|   | |-InlineCommandComment 0x5575d02d5610 <col:64, col:65> Name="a" RenderEmphasized Arg[0]="pipe."
|   | |-TextComment 0x5575d02d5630 <line:4245:3, col:74> Text=" Once all of the data in the block has been written to the pipe, it will"
|   | |-TextComment 0x5575d02d5650 <line:4246:3, col:25> Text=" free the memory block "
|   | |-InlineCommandComment 0x5575d02d56a0 <col:26, col:27> Name="a" RenderEmphasized Arg[0]="block"
|   | |-TextComment 0x5575d02d56c0 <col:34, col:57> Text=" and give the semaphore "
|   | |-InlineCommandComment 0x5575d02d5710 <col:58, col:59> Name="a" RenderEmphasized Arg[0]="sem"
|   | `-TextComment 0x5575d02d5730 <col:64, col:79> Text=" (if specified)."
|   |-ParagraphComment 0x5575d02d57e0 <line:4248:3>
|   | `-TextComment 0x5575d02d57b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d5800 <col:4, line:4249:3> [in] implicitly Param="pipe" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d58b0 <line:4248:15, line:4249:3>
|   |   |-TextComment 0x5575d02d5860 <line:4248:15, col:35> Text=" Address of the pipe."
|   |   `-TextComment 0x5575d02d5880 <line:4249:3> Text=" "
|   |-ParamCommandComment 0x5575d02d58d0 <col:4, line:4250:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x5575d02d5980 <line:4249:16, line:4250:3>
|   |   |-TextComment 0x5575d02d5930 <line:4249:16, col:52> Text=" Memory block containing data to send"
|   |   `-TextComment 0x5575d02d5950 <line:4250:3> Text=" "
|   |-ParamCommandComment 0x5575d02d59a0 <col:4, line:4251:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5575d02d5a50 <line:4250:15, line:4251:3>
|   |   |-TextComment 0x5575d02d5a00 <line:4250:15, col:59> Text=" Number of data bytes in memory block to send"
|   |   `-TextComment 0x5575d02d5a20 <line:4251:3> Text=" "
|   |-ParamCommandComment 0x5575d02d5a70 <col:4, col:61> [in] implicitly Param="sem" ParamIndex=3
|   | `-ParagraphComment 0x5575d02d5b00 <col:14, col:61>
|   |   `-TextComment 0x5575d02d5ad0 <col:14, col:61> Text=" Semaphore to signal upon completion (else NULL)"
|   |-ParagraphComment 0x5575d02d5b50 <line:4253:3>
|   | `-TextComment 0x5575d02d5b20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d02d5b70 <col:4, line:4255:1> Name="return"
|     `-ParagraphComment 0x5575d02d5c70 <line:4253:11, line:4255:1>
|       |-TextComment 0x5575d02d5ba0 <line:4253:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d02d5bc0 <line:4254:3> Text=" "
|       |-InlineCommandComment 0x5575d02d5c10 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-PIPE-002"
|       `-TextComment 0x5575d02d5c30 <line:4255:1> Text=" "
|-RecordDecl 0x5575d026c1b8 prev 0x5575d021b728 <line:4265:1, line:4275:1> line:4265:8 struct k_mem_slab definition
| |-FullComment 0x5575d02d5e00 <line:4262:3, col:24>
| | `-ParagraphComment 0x5575d02d5dd0 <col:3, col:24>
| |   |-TextComment 0x5575d02d5d50 <col:3> Text=" "
| |   |-InlineCommandComment 0x5575d02d5d70 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5575d02d5d90 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5575d026c248 <line:4266:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
| |-FieldDecl 0x5575d026c2a8 <line:4267:2, col:8> col:8 referenced num_blocks 'u32_t':'unsigned int'
| |-FieldDecl 0x5575d026c308 <line:4268:2, col:9> col:9 block_size 'size_t':'unsigned long'
| |-FieldDecl 0x5575d026c370 <line:4269:2, col:8> col:8 buffer 'char *'
| |-FieldDecl 0x5575d026c3d8 <line:4270:2, col:8> col:8 free_list 'char *'
| `-FieldDecl 0x5575d026c438 <line:4271:2, col:8> col:8 referenced num_used 'u32_t':'unsigned int'
|-FunctionDecl 0x5575d026c8d8 <line:4351:1, line:4352:42> line:4351:12 k_mem_slab_init 'int (struct k_mem_slab *, void *, size_t, u32_t)' extern
| |-ParmVarDecl 0x5575d026c618 <col:28, col:47> col:47 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x5575d026c698 <col:53, col:59> col:59 buffer 'void *'
| |-ParmVarDecl 0x5575d026c710 <line:4352:7, col:14> col:14 block_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d026c788 <col:26, col:32> col:32 num_blocks 'u32_t':'unsigned int'
| `-FullComment 0x5575d030d3f0 <line:4330:3, line:4350:1>
|   |-ParagraphComment 0x5575d02d5ea0 <line:4330:3>
|   | `-TextComment 0x5575d02d5e70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d02d5ec0 <col:4, col:35> Name="brief"
|   | `-ParagraphComment 0x5575d02d5f20 <col:10, col:35>
|   |   `-TextComment 0x5575d02d5ef0 <col:10, col:35> Text=" Initialize a memory slab."
|   |-ParagraphComment 0x5575d02d5f70 <line:4332:3, col:53>
|   | `-TextComment 0x5575d02d5f40 <col:3, col:53> Text=" Initializes a memory slab, prior to its first use."
|   |-ParagraphComment 0x5575d02d6200 <line:4334:3, line:4339:51>
|   | |-TextComment 0x5575d02d5f90 <line:4334:3, col:37> Text=" The memory slab's buffer contains "
|   | |-InlineCommandComment 0x5575d02d5fe0 <col:38, col:39> Name="a" RenderEmphasized Arg[0]="slab_num_blocks"
|   | |-TextComment 0x5575d02d6000 <col:56, col:69> Text=" memory blocks"
|   | |-TextComment 0x5575d02d6020 <line:4335:3, col:12> Text=" that are "
|   | |-InlineCommandComment 0x5575d02d6070 <col:13, col:14> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | |-TextComment 0x5575d02d6090 <col:31, col:75> Text=" bytes long. The buffer must be aligned to an"
|   | |-TextComment 0x5575d02d60b0 <line:4336:3, col:68> Text=" N-byte boundary matching a word boundary, where N is a power of 2"
|   | |-TextComment 0x5575d02d60d0 <line:4337:3, col:42> Text=" (i.e. 4 on 32-bit systems, 8, 16, ...)."
|   | |-TextComment 0x5575d02d60f0 <line:4338:3, col:74> Text=" To ensure that each memory block is similarly aligned to this boundary,"
|   | |-TextComment 0x5575d02d6110 <line:4339:3> Text=" "
|   | |-InlineCommandComment 0x5575d02d6160 <col:4, col:5> Name="a" RenderEmphasized Arg[0]="slab_block_size"
|   | `-TextComment 0x5575d02d6180 <col:22, col:51> Text=" must also be a multiple of N."
|   |-ParagraphComment 0x5575d02d6250 <line:4341:3>
|   | `-TextComment 0x5575d02d6220 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d02d6270 <col:4, line:4342:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5575d02d6320 <line:4341:15, line:4342:3>
|   |   |-TextComment 0x5575d02d62d0 <line:4341:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5575d02d62f0 <line:4342:3> Text=" "
|   |-ParamCommandComment 0x5575d02d6340 <col:4, line:4343:3> [in] implicitly Param="buffer" ParamIndex=1
|   | `-ParagraphComment 0x5575d02d63f0 <line:4342:17, line:4343:3>
|   |   |-TextComment 0x5575d02d63a0 <line:4342:17, col:62> Text=" Pointer to buffer used for the memory blocks."
|   |   `-TextComment 0x5575d02d63c0 <line:4343:3> Text=" "
|   |-ParamCommandComment 0x5575d02d6410 <col:4, line:4344:3> [in] implicitly Param="block_size" ParamIndex=2
|   | `-ParagraphComment 0x5575d02d64c0 <line:4343:21, line:4344:3>
|   |   |-TextComment 0x5575d02d6470 <line:4343:21, col:58> Text=" Size of each memory block (in bytes)."
|   |   `-TextComment 0x5575d02d6490 <line:4344:3> Text=" "
|   |-ParamCommandComment 0x5575d02d64e0 <col:4, col:45> [in] implicitly Param="num_blocks" ParamIndex=3
|   | `-ParagraphComment 0x5575d030d120 <col:21, col:45>
|   |   `-TextComment 0x5575d030d0f0 <col:21, col:45> Text=" Number of memory blocks."
|   |-ParagraphComment 0x5575d030d170 <line:4346:3>
|   | `-TextComment 0x5575d030d140 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030d190 <col:4, line:4347:3> Name="retval"
|   | `-ParagraphComment 0x5575d030d210 <line:4346:11, line:4347:3>
|   |   |-TextComment 0x5575d030d1c0 <line:4346:11, col:23> Text=" 0 on success"
|   |   `-TextComment 0x5575d030d1e0 <line:4347:3> Text=" "
|   |-BlockCommandComment 0x5575d030d230 <col:4, col:40> Name="retval"
|   | `-ParagraphComment 0x5575d030d290 <col:11, col:40>
|   |   `-TextComment 0x5575d030d260 <col:11, col:40> Text=" -EINVAL invalid data supplied"
|   `-ParagraphComment 0x5575d030d360 <line:4349:3, line:4350:1>
|     |-TextComment 0x5575d030d2b0 <line:4349:3> Text=" "
|     |-InlineCommandComment 0x5575d030d300 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|     `-TextComment 0x5575d030d320 <line:4350:1> Text=" "
|-FunctionDecl 0x5575d026dc10 <line:4372:1, line:4373:21> line:4372:12 k_mem_slab_alloc 'int (struct k_mem_slab *, void **, s32_t)' extern
| |-ParmVarDecl 0x5575d026c9f0 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x5575d026ca70 <col:54, col:61> col:61 mem 'void **'
| |-ParmVarDecl 0x5575d026cae8 <line:4373:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x5575d030dca0 <line:4355:3, line:4371:1>
|   |-ParagraphComment 0x5575d030d490 <line:4355:3>
|   | `-TextComment 0x5575d030d460 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030d4b0 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5575d030d510 <col:10, col:45>
|   |   `-TextComment 0x5575d030d4e0 <col:10, col:45> Text=" Allocate memory from a memory slab."
|   |-ParagraphComment 0x5575d030d560 <line:4357:3, col:60>
|   | `-TextComment 0x5575d030d530 <col:3, col:60> Text=" This routine allocates a memory block from a memory slab."
|   |-ParagraphComment 0x5575d030d5b0 <line:4359:3>
|   | `-TextComment 0x5575d030d580 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d030d5d0 <col:4, line:4360:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5575d030d680 <line:4359:15, line:4360:3>
|   |   |-TextComment 0x5575d030d630 <line:4359:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5575d030d650 <line:4360:3> Text=" "
|   |-ParamCommandComment 0x5575d030d6a0 <col:4, line:4361:3> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x5575d030d750 <line:4360:14, line:4361:3>
|   |   |-TextComment 0x5575d030d700 <line:4360:14, col:44> Text=" Pointer to block address area."
|   |   `-TextComment 0x5575d030d720 <line:4361:3> Text=" "
|   |-ParamCommandComment 0x5575d030d770 <col:4, line:4363:52> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5575d030d850 <line:4361:18, line:4363:52>
|   |   |-TextComment 0x5575d030d7d0 <line:4361:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x5575d030d7f0 <line:4362:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x5575d030d810 <line:4363:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x5575d030d8a0 <line:4365:3>
|   | `-TextComment 0x5575d030d870 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030d8c0 <col:4, line:4367:3> Name="retval"
|   | `-ParagraphComment 0x5575d030d9c0 <line:4365:11, line:4367:3>
|   |   |-TextComment 0x5575d030d8f0 <line:4365:11, col:68> Text=" 0 Memory allocated. The block address area pointed at by "
|   |   |-InlineCommandComment 0x5575d030d940 <col:69, col:70> Name="a" RenderEmphasized Arg[0]="mem"
|   |   |-TextComment 0x5575d030d960 <line:4366:3, col:62> Text="         is set to the starting address of the memory block."
|   |   `-TextComment 0x5575d030d980 <line:4367:3> Text=" "
|   |-BlockCommandComment 0x5575d030d9e0 <col:4, line:4368:3> Name="retval"
|   | `-ParagraphComment 0x5575d030da60 <line:4367:11, line:4368:3>
|   |   |-TextComment 0x5575d030da10 <line:4367:11, col:44> Text=" -ENOMEM Returned without waiting."
|   |   `-TextComment 0x5575d030da30 <line:4368:3> Text=" "
|   |-BlockCommandComment 0x5575d030da80 <col:4, line:4369:3> Name="retval"
|   | `-ParagraphComment 0x5575d030db00 <line:4368:11, line:4369:3>
|   |   |-TextComment 0x5575d030dab0 <line:4368:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   |   `-TextComment 0x5575d030dad0 <line:4369:3> Text=" "
|   `-BlockCommandComment 0x5575d030db20 <col:4, line:4371:1> Name="retval"
|     `-ParagraphComment 0x5575d030dc20 <line:4369:11, line:4371:1>
|       |-TextComment 0x5575d030db50 <line:4369:11, col:40> Text=" -EINVAL Invalid data supplied"
|       |-TextComment 0x5575d030db70 <line:4370:3> Text=" "
|       |-InlineCommandComment 0x5575d030dbc0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5575d030dbe0 <line:4371:1> Text=" "
|-FunctionDecl 0x5575d026dec0 <line:4387:1, col:64> col:13 k_mem_slab_free 'void (struct k_mem_slab *, void **)' extern
| |-ParmVarDecl 0x5575d026dd20 <col:29, col:48> col:48 slab 'struct k_mem_slab *'
| |-ParmVarDecl 0x5575d026dda0 <col:54, col:61> col:61 mem 'void **'
| `-FullComment 0x5575d030e1d0 <line:4376:3, line:4386:1>
|   |-ParagraphComment 0x5575d030dd40 <line:4376:3>
|   | `-TextComment 0x5575d030dd10 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030dd60 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5575d030ddc0 <col:10, col:51>
|   |   `-TextComment 0x5575d030dd90 <col:10, col:51> Text=" Free memory allocated from a memory slab."
|   |-ParagraphComment 0x5575d030de30 <line:4378:3, line:4379:26>
|   | |-TextComment 0x5575d030dde0 <line:4378:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5575d030de00 <line:4379:3, col:26> Text=" associated memory slab."
|   |-ParagraphComment 0x5575d030de80 <line:4381:3>
|   | `-TextComment 0x5575d030de50 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d030dea0 <col:4, line:4382:3> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5575d030df50 <line:4381:15, line:4382:3>
|   |   |-TextComment 0x5575d030df00 <line:4381:15, col:42> Text=" Address of the memory slab."
|   |   `-TextComment 0x5575d030df20 <line:4382:3> Text=" "
|   |-ParamCommandComment 0x5575d030df70 <col:4, col:75> [in] implicitly Param="mem" ParamIndex=1
|   | `-ParagraphComment 0x5575d030e000 <col:14, col:75>
|   |   `-TextComment 0x5575d030dfd0 <col:14, col:75> Text=" Pointer to block address area (as set by k_mem_slab_alloc())."
|   |-ParagraphComment 0x5575d030e050 <line:4384:3>
|   | `-TextComment 0x5575d030e020 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d030e070 <col:4, line:4386:1> Name="return"
|     `-ParagraphComment 0x5575d030e170 <line:4384:11, line:4386:1>
|       |-TextComment 0x5575d030e0a0 <line:4384:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d030e0c0 <line:4385:3> Text=" "
|       |-InlineCommandComment 0x5575d030e110 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5575d030e130 <line:4386:1> Text=" "
|-FunctionDecl 0x5575d026e0d0 <line:4400:1, line:4403:1> line:4400:21 k_mem_slab_num_used_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x5575d026dfc0 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x5575d026e238 <line:4401:1, line:4403:1>
| | `-ReturnStmt 0x5575d026e1f8 <line:4402:2, col:15>
| |   `-ImplicitCastExpr 0x5575d026e1e0 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     `-MemberExpr 0x5575d026e1b0 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_used 0x5575d026c438
| |       `-ImplicitCastExpr 0x5575d026e198 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |         `-DeclRefExpr 0x5575d026e178 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x5575d026dfc0 'slab' 'struct k_mem_slab *'
| `-FullComment 0x5575d030e690 <line:4390:3, line:4399:1>
|   |-ParagraphComment 0x5575d030e270 <line:4390:3>
|   | `-TextComment 0x5575d030e240 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030e290 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5575d030e2f0 <col:10, col:57>
|   |   `-TextComment 0x5575d030e2c0 <col:10, col:57> Text=" Get the number of used blocks in a memory slab."
|   |-ParagraphComment 0x5575d030e3c0 <line:4392:3, line:4393:18>
|   | |-TextComment 0x5575d030e310 <line:4392:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x5575d030e330 <line:4393:3, col:16> Text=" allocated in "
|   | `-InlineCommandComment 0x5575d030e380 <col:17, col:18> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x5575d030e410 <line:4395:3>
|   | `-TextComment 0x5575d030e3e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d030e430 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5575d030e4c0 <col:15, col:42>
|   |   `-TextComment 0x5575d030e490 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x5575d030e510 <line:4397:3>
|   | `-TextComment 0x5575d030e4e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d030e530 <col:4, line:4399:1> Name="return"
|     `-ParagraphComment 0x5575d030e630 <line:4397:11, line:4399:1>
|       |-TextComment 0x5575d030e560 <line:4397:11, col:45> Text=" Number of allocated memory blocks."
|       |-TextComment 0x5575d030e580 <line:4398:3> Text=" "
|       |-InlineCommandComment 0x5575d030e5d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5575d030e5f0 <line:4399:1> Text=" "
|-FunctionDecl 0x5575d026e308 <line:4416:1, line:4419:1> line:4416:21 k_mem_slab_num_free_get 'u32_t (struct k_mem_slab *)' static inline
| |-ParmVarDecl 0x5575d026e278 <col:45, col:64> col:64 used slab 'struct k_mem_slab *'
| |-CompoundStmt 0x5575d026e538 <line:4417:1, line:4419:1>
| | `-ReturnStmt 0x5575d026e4d0 <line:4418:2, col:34>
| |   `-BinaryOperator 0x5575d026e4b0 <col:9, col:34> 'unsigned int' '-'
| |     |-ImplicitCastExpr 0x5575d026e480 <col:9, col:15> 'u32_t':'unsigned int' <LValueToRValue>
| |     | `-MemberExpr 0x5575d026e3e8 <col:9, col:15> 'u32_t':'unsigned int' lvalue ->num_blocks 0x5575d026c2a8
| |     |   `-ImplicitCastExpr 0x5575d026e3d0 <col:9> 'struct k_mem_slab *' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5575d026e3b0 <col:9> 'struct k_mem_slab *' lvalue ParmVar 0x5575d026e278 'slab' 'struct k_mem_slab *'
| |     `-ImplicitCastExpr 0x5575d026e498 <col:28, col:34> 'u32_t':'unsigned int' <LValueToRValue>
| |       `-MemberExpr 0x5575d026e450 <col:28, col:34> 'u32_t':'unsigned int' lvalue ->num_used 0x5575d026c438
| |         `-ImplicitCastExpr 0x5575d026e438 <col:28> 'struct k_mem_slab *' <LValueToRValue>
| |           `-DeclRefExpr 0x5575d026e418 <col:28> 'struct k_mem_slab *' lvalue ParmVar 0x5575d026e278 'slab' 'struct k_mem_slab *'
| `-FullComment 0x5575d030eb50 <line:4406:3, line:4415:1>
|   |-ParagraphComment 0x5575d030e730 <line:4406:3>
|   | `-TextComment 0x5575d030e700 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030e750 <col:4, col:59> Name="brief"
|   | `-ParagraphComment 0x5575d030e7b0 <col:10, col:59>
|   |   `-TextComment 0x5575d030e780 <col:10, col:59> Text=" Get the number of unused blocks in a memory slab."
|   |-ParagraphComment 0x5575d030e880 <line:4408:3, line:4409:20>
|   | |-TextComment 0x5575d030e7d0 <line:4408:3, col:67> Text=" This routine gets the number of memory blocks that are currently"
|   | |-TextComment 0x5575d030e7f0 <line:4409:3, col:18> Text=" unallocated in "
|   | `-InlineCommandComment 0x5575d030e840 <col:19, col:20> Name="a" RenderEmphasized Arg[0]="slab."
|   |-ParagraphComment 0x5575d030e8d0 <line:4411:3>
|   | `-TextComment 0x5575d030e8a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d030e8f0 <col:4, col:42> [in] implicitly Param="slab" ParamIndex=0
|   | `-ParagraphComment 0x5575d030e980 <col:15, col:42>
|   |   `-TextComment 0x5575d030e950 <col:15, col:42> Text=" Address of the memory slab."
|   |-ParagraphComment 0x5575d030e9d0 <line:4413:3>
|   | `-TextComment 0x5575d030e9a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d030e9f0 <col:4, line:4415:1> Name="return"
|     `-ParagraphComment 0x5575d030eaf0 <line:4413:11, line:4415:1>
|       |-TextComment 0x5575d030ea20 <line:4413:11, col:47> Text=" Number of unallocated memory blocks."
|       |-TextComment 0x5575d030ea40 <line:4414:3> Text=" "
|       |-InlineCommandComment 0x5575d030ea90 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MSLAB-002"
|       `-TextComment 0x5575d030eab0 <line:4415:1> Text=" "
|-RecordDecl 0x5575d026e550 prev 0x5575d021b7d8 <line:4427:1, line:4430:1> line:4427:8 struct k_mem_pool definition
| |-FullComment 0x5575d030ec70 <line:4424:3, col:24>
| | `-ParagraphComment 0x5575d030ec40 <col:3, col:24>
| |   |-TextComment 0x5575d030ebc0 <col:3> Text=" "
| |   |-InlineCommandComment 0x5575d030ebe0 <col:4, col:8> Name="cond" RenderNormal
| |   `-TextComment 0x5575d030ec00 <col:9, col:24> Text=" INTERNAL_HIDDEN"
| |-FieldDecl 0x5575d026e5f0 <line:4428:2, col:27> col:27 base 'struct sys_mem_pool_base':'struct sys_mem_pool_base'
| `-FieldDecl 0x5575d026e650 <line:4429:2, col:12> col:12 wait_q '_wait_q_t':'_wait_q_t'
|-FunctionDecl 0x5575d026ead8 <line:4495:1, line:4496:34> line:4495:12 k_mem_pool_alloc 'int (struct k_mem_pool *, struct k_mem_block *, size_t, s32_t)' extern
| |-ParmVarDecl 0x5575d026e800 <col:29, col:48> col:48 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5575d026e890 <col:54, col:74> col:74 block 'struct k_mem_block *'
| |-ParmVarDecl 0x5575d026e908 <line:4496:8, col:15> col:15 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d026e980 <col:21, col:27> col:27 timeout 's32_t':'int'
| `-FullComment 0x5575d030f590 <line:4478:3, line:4494:1>
|   |-ParagraphComment 0x5575d030ed10 <line:4478:3>
|   | `-TextComment 0x5575d030ece0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030ed30 <col:4, col:45> Name="brief"
|   | `-ParagraphComment 0x5575d030ed90 <col:10, col:45>
|   |   `-TextComment 0x5575d030ed60 <col:10, col:45> Text=" Allocate memory from a memory pool."
|   |-ParagraphComment 0x5575d030ede0 <line:4480:3, col:60>
|   | `-TextComment 0x5575d030edb0 <col:3, col:60> Text=" This routine allocates a memory block from a memory pool."
|   |-ParagraphComment 0x5575d030ee30 <line:4482:3>
|   | `-TextComment 0x5575d030ee00 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d030ee50 <col:4, line:4483:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x5575d030ef00 <line:4482:15, line:4483:3>
|   |   |-TextComment 0x5575d030eeb0 <line:4482:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x5575d030eed0 <line:4483:3> Text=" "
|   |-ParamCommandComment 0x5575d030ef20 <col:4, line:4484:3> [in] implicitly Param="block" ParamIndex=1
|   | `-ParagraphComment 0x5575d030efd0 <line:4483:16, line:4484:3>
|   |   |-TextComment 0x5575d030ef80 <line:4483:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |   `-TextComment 0x5575d030efa0 <line:4484:3> Text=" "
|   |-ParamCommandComment 0x5575d030eff0 <col:4, line:4485:3> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5575d030f0a0 <line:4484:15, line:4485:3>
|   |   |-TextComment 0x5575d030f050 <line:4484:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x5575d030f070 <line:4485:3> Text=" "
|   |-ParamCommandComment 0x5575d030f0c0 <col:4, line:4487:52> [in] implicitly Param="timeout" ParamIndex=3
|   | `-ParagraphComment 0x5575d030f1b0 <line:4485:18, line:4487:52>
|   |   |-TextComment 0x5575d030f130 <line:4485:18, col:79> Text=" Non-negative waiting period to wait for operation to complete"
|   |   |-TextComment 0x5575d030f150 <line:4486:3, col:69> Text="        (in milliseconds). Use K_NO_WAIT to return without waiting,"
|   |   `-TextComment 0x5575d030f170 <line:4487:3, col:52> Text="        or K_FOREVER to wait as long as necessary."
|   |-ParagraphComment 0x5575d030f200 <line:4489:3>
|   | `-TextComment 0x5575d030f1d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030f220 <col:4, line:4491:3> Name="retval"
|   | `-ParagraphComment 0x5575d030f350 <line:4489:11, line:4491:3>
|   |   |-TextComment 0x5575d030f250 <line:4489:11, col:35> Text=" 0 Memory allocated. The "
|   |   |-InlineCommandComment 0x5575d030f2a0 <col:36, col:37> Name="a" RenderEmphasized Arg[0]="data"
|   |   |-TextComment 0x5575d030f2c0 <col:43, col:72> Text=" field of the block descriptor"
|   |   |-TextComment 0x5575d030f2e0 <line:4490:3, col:62> Text="         is set to the starting address of the memory block."
|   |   `-TextComment 0x5575d030f300 <line:4491:3> Text=" "
|   |-BlockCommandComment 0x5575d030f370 <col:4, line:4492:3> Name="retval"
|   | `-ParagraphComment 0x5575d030f3f0 <line:4491:11, line:4492:3>
|   |   |-TextComment 0x5575d030f3a0 <line:4491:11, col:44> Text=" -ENOMEM Returned without waiting."
|   |   `-TextComment 0x5575d030f3c0 <line:4492:3> Text=" "
|   `-BlockCommandComment 0x5575d030f410 <col:4, line:4494:1> Name="retval"
|     `-ParagraphComment 0x5575d030f510 <line:4492:11, line:4494:1>
|       |-TextComment 0x5575d030f440 <line:4492:11, col:44> Text=" -EAGAIN Waiting period timed out."
|       |-TextComment 0x5575d030f460 <line:4493:3> Text=" "
|       |-InlineCommandComment 0x5575d030f4b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5575d030f4d0 <line:4494:1> Text=" "
|-FunctionDecl 0x5575d0270218 <line:4508:1, col:68> col:14 k_mem_pool_malloc 'void *(struct k_mem_pool *, size_t)' extern
| |-ParmVarDecl 0x5575d0270080 <col:32, col:51> col:51 pool 'struct k_mem_pool *'
| |-ParmVarDecl 0x5575d02700f8 <col:57, col:64> col:64 size 'size_t':'unsigned long'
| `-FullComment 0x5575d030fa70 <line:4499:3, line:4507:1>
|   |-ParagraphComment 0x5575d030f630 <line:4499:3>
|   | `-TextComment 0x5575d030f600 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030f650 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5575d030f6b0 <col:10, col:68>
|   |   `-TextComment 0x5575d030f680 <col:10, col:68> Text=" Allocate memory from a memory pool with malloc() semantics"
|   |-ParagraphComment 0x5575d030f700 <line:4501:3, col:47>
|   | `-TextComment 0x5575d030f6d0 <col:3, col:47> Text=" Such memory must be released using k_free()."
|   |-ParagraphComment 0x5575d030f750 <line:4503:3>
|   | `-TextComment 0x5575d030f720 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d030f770 <col:4, line:4504:3> [in] implicitly Param="pool" ParamIndex=0
|   | `-ParagraphComment 0x5575d030f820 <line:4503:15, line:4504:3>
|   |   |-TextComment 0x5575d030f7d0 <line:4503:15, col:42> Text=" Address of the memory pool."
|   |   `-TextComment 0x5575d030f7f0 <line:4504:3> Text=" "
|   |-ParamCommandComment 0x5575d030f840 <col:4, line:4505:3> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5575d030f8f0 <line:4504:15, line:4505:3>
|   |   |-TextComment 0x5575d030f8a0 <line:4504:15, col:55> Text=" Amount of memory to allocate (in bytes)."
|   |   `-TextComment 0x5575d030f8c0 <line:4505:3> Text=" "
|   `-BlockCommandComment 0x5575d030f910 <col:4, line:4507:1> Name="return"
|     `-ParagraphComment 0x5575d030fa10 <line:4505:11, line:4507:1>
|       |-TextComment 0x5575d030f940 <line:4505:11, col:72> Text=" Address of the allocated memory if successful, otherwise NULL"
|       |-TextComment 0x5575d030f960 <line:4506:3> Text=" "
|       |-InlineCommandComment 0x5575d030f9b0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5575d030f9d0 <line:4507:1> Text=" "
|-FunctionDecl 0x5575d0270430 <line:4521:1, col:54> col:13 k_mem_pool_free 'void (struct k_mem_block *)' extern
| |-ParmVarDecl 0x5575d0270320 <col:29, col:49> col:49 block 'struct k_mem_block *'
| `-FullComment 0x5575d030fed0 <line:4511:3, line:4520:1>
|   |-ParagraphComment 0x5575d030fb10 <line:4511:3>
|   | `-TextComment 0x5575d030fae0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030fb30 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5575d030fb90 <col:10, col:51>
|   |   `-TextComment 0x5575d030fb60 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x5575d030fc00 <line:4513:3, line:4514:15>
|   | |-TextComment 0x5575d030fbb0 <line:4513:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5575d030fbd0 <line:4514:3, col:15> Text=" memory pool."
|   |-ParagraphComment 0x5575d030fc50 <line:4516:3>
|   | `-TextComment 0x5575d030fc20 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d030fc70 <col:4, col:69> [in] implicitly Param="block" ParamIndex=0
|   | `-ParagraphComment 0x5575d030fd00 <col:16, col:69>
|   |   `-TextComment 0x5575d030fcd0 <col:16, col:69> Text=" Pointer to block descriptor for the allocated memory."
|   |-ParagraphComment 0x5575d030fd50 <line:4518:3>
|   | `-TextComment 0x5575d030fd20 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d030fd70 <col:4, line:4520:1> Name="return"
|     `-ParagraphComment 0x5575d030fe70 <line:4518:11, line:4520:1>
|       |-TextComment 0x5575d030fda0 <line:4518:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d030fdc0 <line:4519:3> Text=" "
|       |-InlineCommandComment 0x5575d030fe10 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5575d030fe30 <line:4520:1> Text=" "
|-FunctionDecl 0x5575d02706a0 <line:4534:1, col:57> col:13 k_mem_pool_free_id 'void (struct k_mem_block_id *)' extern
| |-ParmVarDecl 0x5575d0270598 <col:32, col:55> col:55 id 'struct k_mem_block_id *'
| `-FullComment 0x5575d0310330 <line:4524:3, line:4533:1>
|   |-ParagraphComment 0x5575d030ff70 <line:4524:3>
|   | `-TextComment 0x5575d030ff40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d030ff90 <col:4, col:51> Name="brief"
|   | `-ParagraphComment 0x5575d030fff0 <col:10, col:51>
|   |   `-TextComment 0x5575d030ffc0 <col:10, col:51> Text=" Free memory allocated from a memory pool."
|   |-ParagraphComment 0x5575d0310060 <line:4526:3, line:4527:14>
|   | |-TextComment 0x5575d0310010 <line:4526:3, col:72> Text=" This routine releases a previously allocated memory block back to its"
|   | `-TextComment 0x5575d0310030 <line:4527:3, col:14> Text=" memory pool"
|   |-ParagraphComment 0x5575d03100b0 <line:4529:3>
|   | `-TextComment 0x5575d0310080 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d03100d0 <col:4, col:37> [in] implicitly Param="id" ParamIndex=0
|   | `-ParagraphComment 0x5575d0310160 <col:13, col:37>
|   |   `-TextComment 0x5575d0310130 <col:13, col:37> Text=" Memory block identifier."
|   |-ParagraphComment 0x5575d03101b0 <line:4531:3>
|   | `-TextComment 0x5575d0310180 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d03101d0 <col:4, line:4533:1> Name="return"
|     `-ParagraphComment 0x5575d03102d0 <line:4531:11, line:4533:1>
|       |-TextComment 0x5575d0310200 <line:4531:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d0310220 <line:4532:3> Text=" "
|       |-InlineCommandComment 0x5575d0310270 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MPOOL-002"
|       `-TextComment 0x5575d0310290 <line:4533:1> Text=" "
|-FunctionDecl 0x5575d02708f8 <line:4557:1, col:34> col:14 k_malloc 'void *(size_t)' extern
| |-ParmVarDecl 0x5575d02707e8 <col:23, col:30> col:30 size 'size_t':'unsigned long'
| `-FullComment 0x5575d0310790 <line:4547:3, line:4556:1>
|   |-ParagraphComment 0x5575d03103d0 <line:4547:3>
|   | `-TextComment 0x5575d03103a0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03103f0 <col:4, col:36> Name="brief"
|   | `-ParagraphComment 0x5575d0310450 <col:10, col:36>
|   |   `-TextComment 0x5575d0310420 <col:10, col:36> Text=" Allocate memory from heap."
|   |-ParagraphComment 0x5575d03104c0 <line:4549:3, line:4550:39>
|   | |-TextComment 0x5575d0310470 <line:4549:3, col:66> Text=" This routine provides traditional malloc() semantics. Memory is"
|   | `-TextComment 0x5575d0310490 <line:4550:3, col:39> Text=" allocated from the heap memory pool."
|   |-ParagraphComment 0x5575d0310510 <line:4552:3>
|   | `-TextComment 0x5575d03104e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0310530 <col:4, col:53> [in] implicitly Param="size" ParamIndex=0
|   | `-ParagraphComment 0x5575d03105c0 <col:15, col:53>
|   |   `-TextComment 0x5575d0310590 <col:15, col:53> Text=" Amount of memory requested (in bytes)."
|   |-ParagraphComment 0x5575d0310610 <line:4554:3>
|   | `-TextComment 0x5575d03105e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0310630 <col:4, line:4556:1> Name="return"
|     `-ParagraphComment 0x5575d0310730 <line:4554:11, line:4556:1>
|       |-TextComment 0x5575d0310660 <line:4554:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|       |-TextComment 0x5575d0310680 <line:4555:3> Text=" "
|       |-InlineCommandComment 0x5575d03106d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-HEAP-001"
|       `-TextComment 0x5575d03106f0 <line:4556:1> Text=" "
|-FunctionDecl 0x5575d0270a70 <line:4573:1, col:29> col:13 k_free 'void (void *)' extern
| |-ParmVarDecl 0x5575d02709e0 <col:20, col:26> col:26 ptr 'void *'
| `-FullComment 0x5575d0310cf0 <line:4560:3, line:4572:1>
|   |-ParagraphComment 0x5575d0310830 <line:4560:3>
|   | `-TextComment 0x5575d0310800 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0310850 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d03108b0 <col:10, col:42>
|   |   `-TextComment 0x5575d0310880 <col:10, col:42> Text=" Free memory allocated from heap."
|   |-ParagraphComment 0x5575d0310950 <line:4562:3, line:4564:23>
|   | |-TextComment 0x5575d03108d0 <line:4562:3, col:71> Text=" This routine provides traditional free() semantics. The memory being"
|   | |-TextComment 0x5575d03108f0 <line:4563:3, col:65> Text=" returned must have been allocated from the heap memory pool or"
|   | `-TextComment 0x5575d0310910 <line:4564:3, col:23> Text=" k_mem_pool_malloc()."
|   |-ParagraphComment 0x5575d0310a20 <line:4566:3, col:48>
|   | |-TextComment 0x5575d0310970 <col:3, col:6> Text=" If "
|   | |-InlineCommandComment 0x5575d03109c0 <col:7, col:8> Name="a" RenderEmphasized Arg[0]="ptr"
|   | `-TextComment 0x5575d03109e0 <col:13, col:48> Text=" is NULL, no operation is performed."
|   |-ParagraphComment 0x5575d0310a70 <line:4568:3>
|   | `-TextComment 0x5575d0310a40 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0310a90 <col:4, col:53> [in] implicitly Param="ptr" ParamIndex=0
|   | `-ParagraphComment 0x5575d0310b20 <col:14, col:53>
|   |   `-TextComment 0x5575d0310af0 <col:14, col:53> Text=" Pointer to previously allocated memory."
|   |-ParagraphComment 0x5575d0310b70 <line:4570:3>
|   | `-TextComment 0x5575d0310b40 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0310b90 <col:4, line:4572:1> Name="return"
|     `-ParagraphComment 0x5575d0310c90 <line:4570:11, line:4572:1>
|       |-TextComment 0x5575d0310bc0 <line:4570:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d0310be0 <line:4571:3> Text=" "
|       |-InlineCommandComment 0x5575d0310c30 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-HEAP-001"
|       `-TextComment 0x5575d0310c50 <line:4572:1> Text=" "
|-FunctionDecl 0x5575d0270cf8 <line:4587:1, col:48> col:14 k_calloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x5575d0270b58 <col:23, col:30> col:30 nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0270bd0 <col:37, col:44> col:44 size 'size_t':'unsigned long'
| `-FullComment 0x5575d0311240 <line:4576:3, line:4586:1>
|   |-ParagraphComment 0x5575d0310d90 <line:4576:3>
|   | `-TextComment 0x5575d0310d60 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0310db0 <col:4, col:48> Name="brief"
|   | `-ParagraphComment 0x5575d0310e10 <col:10, col:48>
|   |   `-TextComment 0x5575d0310de0 <col:10, col:48> Text=" Allocate memory from heap, array style"
|   |-ParagraphComment 0x5575d0310e80 <line:4578:3, line:4579:50>
|   | |-TextComment 0x5575d0310e30 <line:4578:3, col:66> Text=" This routine provides traditional calloc() semantics. Memory is"
|   | `-TextComment 0x5575d0310e50 <line:4579:3, col:50> Text=" allocated from the heap memory pool and zeroed."
|   |-ParagraphComment 0x5575d0310ed0 <line:4581:3>
|   | `-TextComment 0x5575d0310ea0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0310ef0 <col:4, line:4582:3> [in] implicitly Param="nmemb" ParamIndex=0
|   | `-ParagraphComment 0x5575d0310fa0 <line:4581:16, line:4582:3>
|   |   |-TextComment 0x5575d0310f50 <line:4581:16, col:57> Text=" Number of elements in the requested array"
|   |   `-TextComment 0x5575d0310f70 <line:4582:3> Text=" "
|   |-ParamCommandComment 0x5575d0310fc0 <col:4, col:53> [in] implicitly Param="size" ParamIndex=1
|   | `-ParagraphComment 0x5575d0311050 <col:15, col:53>
|   |   `-TextComment 0x5575d0311020 <col:15, col:53> Text=" Size of each array element (in bytes)."
|   |-ParagraphComment 0x5575d03110a0 <line:4584:3>
|   | `-TextComment 0x5575d0311070 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d03110c0 <col:4, line:4586:1> Name="return"
|     `-ParagraphComment 0x5575d03111e0 <line:4584:11, line:4586:1>
|       |-TextComment 0x5575d0311110 <line:4584:11, col:73> Text=" Address of the allocated memory if successful; otherwise NULL."
|       |-TextComment 0x5575d0311130 <line:4585:3> Text=" "
|       |-InlineCommandComment 0x5575d0311180 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-HEAP-001"
|       `-TextComment 0x5575d03111a0 <line:4586:1> Text=" "
|-EnumDecl 0x5575d0270dd8 <line:4600:1, line:4614:1> line:4600:6 _poll_types_bits
| |-EnumConstantDecl 0x5575d0270ea8 <line:4602:2> col:2 _POLL_TYPE_IGNORE 'int'
| |-EnumConstantDecl 0x5575d0270ef8 <line:4605:2> col:2 _POLL_TYPE_SIGNAL 'int'
| |-EnumConstantDecl 0x5575d0270f48 <line:4608:2> col:2 _POLL_TYPE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x5575d0270f98 <line:4611:2> col:2 _POLL_TYPE_DATA_AVAILABLE 'int'
| `-EnumConstantDecl 0x5575d0270fe8 <line:4613:2> col:2 referenced _POLL_NUM_TYPES 'int'
|-EnumDecl 0x5575d0272440 <line:4619:1, line:4636:1> line:4619:6 _poll_states_bits
| |-EnumConstantDecl 0x5575d0272508 <line:4621:2> col:2 _POLL_STATE_NOT_READY 'int'
| |-EnumConstantDecl 0x5575d0272558 <line:4624:2> col:2 _POLL_STATE_SIGNALED 'int'
| |-EnumConstantDecl 0x5575d02725a8 <line:4627:2> col:2 _POLL_STATE_SEM_AVAILABLE 'int'
| |-EnumConstantDecl 0x5575d02725f8 <line:4630:2> col:2 _POLL_STATE_DATA_AVAILABLE 'int'
| |-EnumConstantDecl 0x5575d0272648 <line:4633:2> col:2 _POLL_STATE_CANCELLED 'int'
| `-EnumConstantDecl 0x5575d0272698 <line:4635:2> col:2 referenced _POLL_NUM_STATES 'int'
|-EnumDecl 0x5575d0272718 <line:4667:1, line:4672:1> line:4667:6 k_poll_modes
| |-EnumConstantDecl 0x5575d0272820 <line:4669:2, col:28> col:2 K_POLL_MODE_NOTIFY_ONLY 'int'
| | `-ConstantExpr 0x5575d0272808 <col:28> 'int'
| |   `-IntegerLiteral 0x5575d02727e8 <col:28> 'int' 0
| `-EnumConstantDecl 0x5575d0272870 <line:4671:2> col:2 K_POLL_NUM_MODES 'int'
|-RecordDecl 0x5575d02728c0 prev 0x5575d0226d58 <line:4683:1, line:4695:1> line:4683:8 struct k_poll_signal definition
| |-FieldDecl 0x5575d0272978 <line:4685:2, col:14> col:14 poll_events 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x5575d0311310 <line:4684:5, col:28>
| |   `-ParagraphComment 0x5575d03112e0 <col:5, col:28>
| |     `-TextComment 0x5575d03112b0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x5575d0272a10 <line:4691:2, col:15> col:15 referenced signaled 'unsigned int'
| | `-FullComment 0x5575d0311400 <line:4688:4, line:4689:24>
| |   `-ParagraphComment 0x5575d03113d0 <line:4688:4, line:4689:24>
| |     |-TextComment 0x5575d0311380 <line:4688:4, col:71> Text=" 1 if the event has been signaled, 0 otherwise. Stays set to 1 until"
| |     `-TextComment 0x5575d03113a0 <line:4689:4, col:24> Text=" user resets it to 0."
| `-FieldDecl 0x5575d0272aa0 <line:4694:2, col:6> col:6 result 'int'
|   `-FullComment 0x5575d03114d0 <line:4693:5, col:67>
|     `-ParagraphComment 0x5575d03114a0 <col:5, col:67>
|       `-TextComment 0x5575d0311470 <col:5, col:67> Text=" custom result value passed to k_poll_signal_raise() if needed "
|-RecordDecl 0x5575d0272b18 prev 0x5575d0226ca8 <line:4707:1, line:4737:1> line:4707:8 struct k_poll_event definition
| |-FullComment 0x5575d0311680 <line:4704:3, line:4706:1>
| | |-ParagraphComment 0x5575d0311570 <line:4704:3>
| | | `-TextComment 0x5575d0311540 <col:3> Text=" "
| | |-BlockCommandComment 0x5575d0311590 <col:4, col:20> Name="brief"
| | | `-ParagraphComment 0x5575d03115f0 <col:10, col:20>
| | |   `-TextComment 0x5575d03115c0 <col:10, col:20> Text=" Poll Event"
| | `-ParagraphComment 0x5575d0311640 <line:4706:1>
| |   `-TextComment 0x5575d0311610 <col:1> Text=" "
| |-FieldDecl 0x5575d0272bd8 <line:4709:2, col:14> col:14 _node 'sys_dnode_t':'struct _dnode'
| | `-FullComment 0x5575d0311750 <line:4708:5, col:28>
| |   `-ParagraphComment 0x5575d0311720 <col:5, col:28>
| |     `-TextComment 0x5575d03116f0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x5575d0272ce8 <line:4712:2, col:18> col:18 poller 'struct _poller *'
| | `-FullComment 0x5575d0311820 <line:4711:5, col:28>
| |   `-ParagraphComment 0x5575d03117f0 <col:5, col:28>
| |     `-TextComment 0x5575d03117c0 <col:5, col:28> Text=" PRIVATE - DO NOT TOUCH "
| |-FieldDecl 0x5575d0272db0 <line:4715:2, col:12> col:8 tag 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5575d0272d98 <col:12> 'int'
| | | `-IntegerLiteral 0x5575d0272d68 <col:12> 'int' 8
| | `-FullComment 0x5575d03118f0 <line:4714:5, col:63>
| |   `-ParagraphComment 0x5575d03118c0 <col:5, col:63>
| |     `-TextComment 0x5575d0311890 <col:5, col:63> Text=" optional user-specified tag, opaque, untouched by the API "
| |-FieldDecl 0x5575d0272e70 <line:4718:2, col:13> col:8 type 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5575d0272e58 <col:13> 'int'
| | | `-DeclRefExpr 0x5575d0272e28 <col:13> 'int' EnumConstant 0x5575d0270fe8 '_POLL_NUM_TYPES' 'int'
| | `-FullComment 0x5575d03119c0 <line:4717:5, col:67>
| |   `-ParagraphComment 0x5575d0311990 <col:5, col:67>
| |     `-TextComment 0x5575d0311960 <col:5, col:67> Text=" bitfield of event types (bitwise-ORed K_POLL_TYPE_xxx values) "
| |-FieldDecl 0x5575d0272f30 <line:4721:2, col:14> col:8 state 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5575d0272f18 <col:14> 'int'
| | | `-DeclRefExpr 0x5575d0272ee8 <col:14> 'int' EnumConstant 0x5575d0272698 '_POLL_NUM_STATES' 'int'
| | `-FullComment 0x5575d0311a90 <line:4720:5, col:69>
| |   `-ParagraphComment 0x5575d0311a60 <col:5, col:69>
| |     `-TextComment 0x5575d0311a30 <col:5, col:69> Text=" bitfield of event states (bitwise-ORed K_POLL_STATE_xxx values) "
| |-FieldDecl 0x5575d0272ff0 <line:4724:2, col:13> col:8 mode 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5575d0272fd8 <col:13> 'int'
| | | `-IntegerLiteral 0x5575d0272fa8 <col:13> 'int' 1
| | `-FullComment 0x5575d0311b60 <line:4723:5, col:47>
| |   `-ParagraphComment 0x5575d0311b30 <col:5, col:47>
| |     `-TextComment 0x5575d0311b00 <col:5, col:47> Text=" mode of operation, from enum k_poll_modes "
| |-FieldDecl 0x5575d0273230 <line:4727:2, line:4646:9> line:4727:8 unused 'u32_t':'unsigned int'
| | |-ConstantExpr 0x5575d0273218 <line:4641:2, line:4646:9> 'int'
| | | `-ParenExpr 0x5575d02731e8 <line:4641:2, line:4646:9> 'int'
| | |   `-BinaryOperator 0x5575d02731c8 <line:4641:3, line:4646:8> 'int' '-'
| | |     |-IntegerLiteral 0x5575d0273068 <line:4641:3> 'int' 32
| | |     `-ParenExpr 0x5575d02731a8 <col:8, line:4646:8> 'int'
| | |       `-BinaryOperator 0x5575d0273188 <line:4641:9, line:4645:11> 'int' '+'
| | |         |-BinaryOperator 0x5575d0273148 <line:4641:9, line:4644:11> 'int' '+'
| | |         | |-BinaryOperator 0x5575d0273108 <line:4641:9, line:4643:11> 'int' '+'
| | |         | | |-BinaryOperator 0x5575d02730c8 <line:4641:9, line:4642:11> 'int' '+'
| | |         | | | |-IntegerLiteral 0x5575d0273088 <line:4641:9> 'int' 0
| | |         | | | `-IntegerLiteral 0x5575d02730a8 <line:4642:11> 'int' 8
| | |         | | `-DeclRefExpr 0x5575d02730e8 <line:4643:11> 'int' EnumConstant 0x5575d0270fe8 '_POLL_NUM_TYPES' 'int'
| | |         | `-DeclRefExpr 0x5575d0273128 <line:4644:11> 'int' EnumConstant 0x5575d0272698 '_POLL_NUM_STATES' 'int'
| | |         `-IntegerLiteral 0x5575d0273168 <line:4645:11> 'int' 1
| | `-FullComment 0x5575d0311c30 <line:4726:5, col:32>
| |   `-ParagraphComment 0x5575d0311c00 <col:5, col:32>
| |     `-TextComment 0x5575d0311bd0 <col:5, col:32> Text=" unused bits in 32-bit word "
| |-RecordDecl 0x5575d02732a8 <line:4730:2, line:4736:2> line:4730:2 union definition
| | |-FullComment 0x5575d0311d00 <line:4729:5, col:19>
| | | `-ParagraphComment 0x5575d0311cd0 <col:5, col:19>
| | |   `-TextComment 0x5575d0311ca0 <col:5, col:19> Text=" per-type data "
| | |-FieldDecl 0x5575d0273370 <line:4731:3, col:9> col:9 obj 'void *'
| | |-FieldDecl 0x5575d0275e98 <line:4732:3, col:25> col:25 signal 'struct k_poll_signal *'
| | |-FieldDecl 0x5575d0275f10 <line:4733:3, col:17> col:17 sem 'struct k_sem *'
| | |-FieldDecl 0x5575d0276028 <line:4734:3, col:18> col:18 fifo 'struct k_fifo *'
| | `-FieldDecl 0x5575d02760a0 <line:4735:3, col:19> col:19 queue 'struct k_queue *'
| |-FieldDecl 0x5575d0276150 <line:4730:2> col:2 implicit 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| |-IndirectFieldDecl 0x5575d02761b0 <line:4731:9> col:9 implicit obj 'void *'
| | |-Field 0x5575d0276150 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5575d0273370 'obj' 'void *'
| |-IndirectFieldDecl 0x5575d0276208 <line:4732:25> col:25 implicit signal 'struct k_poll_signal *'
| | |-Field 0x5575d0276150 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5575d0275e98 'signal' 'struct k_poll_signal *'
| |-IndirectFieldDecl 0x5575d0276260 <line:4733:17> col:17 implicit sem 'struct k_sem *'
| | |-Field 0x5575d0276150 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5575d0275f10 'sem' 'struct k_sem *'
| |-IndirectFieldDecl 0x5575d02762b8 <line:4734:18> col:18 implicit fifo 'struct k_fifo *'
| | |-Field 0x5575d0276150 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
| | `-Field 0x5575d0276028 'fifo' 'struct k_fifo *'
| `-IndirectFieldDecl 0x5575d0276310 <line:4735:19> col:19 implicit queue 'struct k_queue *'
|   |-Field 0x5575d0276150 '' 'union k_poll_event::(anonymous at /vagrant/ext/zephyros/zephyr/include/kernel.h:4730:2)'
|   `-Field 0x5575d02760a0 'queue' 'struct k_queue *'
|-FunctionDecl 0x5575d0276670 <line:4778:1, line:4779:29> line:4778:13 k_poll_event_init 'void (struct k_poll_event *, u32_t, int, void *)' extern
| |-ParmVarDecl 0x5575d02763b0 <col:31, col:52> col:52 event 'struct k_poll_event *'
| |-ParmVarDecl 0x5575d0276428 <col:59, col:65> col:65 type 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5575d02764a8 <line:4779:10, col:14> col:14 mode 'int'
| |-ParmVarDecl 0x5575d0276528 <col:20, col:26> col:26 obj 'void *'
| `-FullComment 0x5575d0312460 <line:4761:3, line:4776:1>
|   |-ParagraphComment 0x5575d0311da0 <line:4761:3>
|   | `-TextComment 0x5575d0311d70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0311dc0 <col:4, col:53> Name="brief"
|   | `-ParagraphComment 0x5575d0311e20 <col:10, col:53>
|   |   `-TextComment 0x5575d0311df0 <col:10, col:53> Text=" Initialize one struct k_poll_event instance"
|   |-ParagraphComment 0x5575d0311e90 <line:4763:3, line:4764:53>
|   | |-TextComment 0x5575d0311e40 <line:4763:3, col:73> Text=" After this routine is called on a poll event, the event it ready to be"
|   | `-TextComment 0x5575d0311e60 <line:4764:3, col:53> Text=" placed in an event array to be passed to k_poll()."
|   |-ParagraphComment 0x5575d0311ee0 <line:4766:3>
|   | `-TextComment 0x5575d0311eb0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0311f00 <col:4, line:4767:3> [in] implicitly Param="event" ParamIndex=0
|   | `-ParagraphComment 0x5575d0311fb0 <line:4766:16, line:4767:3>
|   |   |-TextComment 0x5575d0311f60 <line:4766:16, col:40> Text=" The event to initialize."
|   |   `-TextComment 0x5575d0311f80 <line:4767:3> Text=" "
|   |-ParamCommandComment 0x5575d0311fd0 <col:4, line:4771:3> [in] implicitly Param="type" ParamIndex=1
|   | `-ParagraphComment 0x5575d0312100 <line:4767:15, line:4771:3>
|   |   |-TextComment 0x5575d0312030 <line:4767:15, col:73> Text=" A bitfield of the types of event, from the K_POLL_TYPE_xxx"
|   |   |-TextComment 0x5575d0312050 <line:4768:3, col:77> Text="             values. Only values that apply to the same object being polled"
|   |   |-TextComment 0x5575d0312070 <line:4769:3, col:77> Text="             can be used together. Choosing K_POLL_TYPE_IGNORE disables the"
|   |   |-TextComment 0x5575d0312090 <line:4770:3, col:21> Text="             event."
|   |   `-TextComment 0x5575d03120b0 <line:4771:3> Text=" "
|   |-ParamCommandComment 0x5575d0312120 <col:4, line:4772:3> [in] implicitly Param="mode" ParamIndex=2
|   | `-ParagraphComment 0x5575d03121d0 <line:4771:15, line:4772:3>
|   |   |-TextComment 0x5575d0312180 <line:4771:15, col:51> Text=" Future. Use K_POLL_MODE_NOTIFY_ONLY."
|   |   `-TextComment 0x5575d03121a0 <line:4772:3> Text=" "
|   |-ParamCommandComment 0x5575d03121f0 <col:4, col:43> [in] implicitly Param="obj" ParamIndex=3
|   | `-ParagraphComment 0x5575d0312280 <col:14, col:43>
|   |   `-TextComment 0x5575d0312250 <col:14, col:43> Text=" Kernel object or poll signal."
|   |-ParagraphComment 0x5575d03122d0 <line:4774:3>
|   | `-TextComment 0x5575d03122a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d03122f0 <col:4, line:4776:1> Name="return"
|     `-ParagraphComment 0x5575d03123f0 <line:4774:11, line:4776:1>
|       |-TextComment 0x5575d0312320 <line:4774:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d0312340 <line:4775:3> Text=" "
|       |-InlineCommandComment 0x5575d0312390 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5575d03123b0 <line:4776:1> Text=" "
|-FunctionDecl 0x5575d02769b8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4827:21> line:4826:15 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5575d0276780 <col:22, col:43> col:43 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5575d0276800 <col:51, col:55> col:55 num_events 'int'
| |-ParmVarDecl 0x5575d0276878 <line:4827:8, col:14> col:14 timeout 's32_t':'int'
| `-FullComment 0x5575d03131b0 <line:4782:3, line:4824:1>
|   |-ParagraphComment 0x5575d0312500 <line:4782:3>
|   | `-TextComment 0x5575d03124d0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0312520 <col:4, col:63> Name="brief"
|   | `-ParagraphComment 0x5575d0312580 <col:10, col:63>
|   |   `-TextComment 0x5575d0312550 <col:10, col:63> Text=" Wait for one or many of multiple poll events to occur"
|   |-ParagraphComment 0x5575d0312620 <line:4784:3, line:4786:61>
|   | |-TextComment 0x5575d03125a0 <line:4784:3, col:71> Text=" This routine allows a thread to wait concurrently for one or many of"
|   | |-TextComment 0x5575d03125c0 <line:4785:3, col:76> Text=" multiple poll events to have occurred. Such events can be a kernel object"
|   | `-TextComment 0x5575d03125e0 <line:4786:3, col:61> Text=" being available, like a semaphore, or a poll signal event."
|   |-ParagraphComment 0x5575d03127b0 <line:4788:3, line:4796:68>
|   | |-TextComment 0x5575d0312640 <line:4788:3, col:78> Text=" When an event notifies that a kernel object is available, the kernel object"
|   | |-TextComment 0x5575d0312660 <line:4789:3, col:76> Text=" is not "given" to the thread calling k_poll(): it merely signals the fact"
|   | |-TextComment 0x5575d0312680 <line:4790:3, col:76> Text=" that the object was available when the k_poll() call was in effect. Also,"
|   | |-TextComment 0x5575d03126a0 <line:4791:3, col:78> Text=" all threads trying to acquire an object the regular way, i.e. by pending on"
|   | |-TextComment 0x5575d03126c0 <line:4792:3, col:74> Text=" the object, have precedence over the thread polling on the object. This"
|   | |-TextComment 0x5575d03126e0 <line:4793:3, col:75> Text=" means that the polling thread will never get the poll event on an object"
|   | |-TextComment 0x5575d0312700 <line:4794:3, col:75> Text=" until the object becomes available and its pend queue is empty. For this"
|   | |-TextComment 0x5575d0312720 <line:4795:3, col:76> Text=" reason, the k_poll() call is more effective when the objects being polled"
|   | `-TextComment 0x5575d0312740 <line:4796:3, col:68> Text=" only have one thread, the polling thread, trying to acquire them."
|   |-ParagraphComment 0x5575d0312850 <line:4798:3, line:4800:44>
|   | |-TextComment 0x5575d03127d0 <line:4798:3, col:78> Text=" When k_poll() returns 0, the caller should loop on all the events that were"
|   | |-TextComment 0x5575d03127f0 <line:4799:3, col:72> Text=" passed to k_poll() and check the state field for the values that were"
|   | `-TextComment 0x5575d0312810 <line:4800:3, col:44> Text=" expected and take the associated actions."
|   |-ParagraphComment 0x5575d03128c0 <line:4802:3, line:4803:41>
|   | |-TextComment 0x5575d0312870 <line:4802:3, col:78> Text=" Before being reused for another call to k_poll(), the user has to reset the"
|   | `-TextComment 0x5575d0312890 <line:4803:3, col:41> Text=" state field to K_POLL_STATE_NOT_READY."
|   |-ParagraphComment 0x5575d0312930 <line:4805:3, line:4806:30>
|   | |-TextComment 0x5575d03128e0 <line:4805:3, col:77> Text=" When called from user mode, a temporary memory allocation is required from"
|   | `-TextComment 0x5575d0312900 <line:4806:3, col:30> Text=" the caller's resource pool."
|   |-ParagraphComment 0x5575d0312980 <line:4808:3>
|   | `-TextComment 0x5575d0312950 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d03129a0 <col:4, line:4809:3> [in] implicitly Param="events" ParamIndex=0
|   | `-ParagraphComment 0x5575d0312a50 <line:4808:17, line:4809:3>
|   |   |-TextComment 0x5575d0312a00 <line:4808:17, col:65> Text=" An array of pointers to events to be polled for."
|   |   `-TextComment 0x5575d0312a20 <line:4809:3> Text=" "
|   |-ParamCommandComment 0x5575d0312a70 <col:4, line:4810:3> [in] implicitly Param="num_events" ParamIndex=1
|   | `-ParagraphComment 0x5575d0312b20 <line:4809:21, line:4810:3>
|   |   |-TextComment 0x5575d0312ad0 <line:4809:21, col:55> Text=" The number of events in the array."
|   |   `-TextComment 0x5575d0312af0 <line:4810:3> Text=" "
|   |-ParamCommandComment 0x5575d0312b40 <col:4, line:4812:28> [in] implicitly Param="timeout" ParamIndex=2
|   | `-ParagraphComment 0x5575d0312c20 <line:4810:18, line:4812:28>
|   |   |-TextComment 0x5575d0312ba0 <line:4810:18, col:74> Text=" Non-negative waiting period for an event to be ready (in"
|   |   |-TextComment 0x5575d0312bc0 <line:4811:3, col:75> Text="                milliseconds), or one of the special values K_NO_WAIT and"
|   |   `-TextComment 0x5575d0312be0 <line:4812:3, col:28> Text="                K_FOREVER."
|   |-ParagraphComment 0x5575d0312c70 <line:4814:3>
|   | `-TextComment 0x5575d0312c40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0312c90 <col:4, line:4815:3> Name="retval"
|   | `-ParagraphComment 0x5575d0312d10 <line:4814:11, line:4815:3>
|   |   |-TextComment 0x5575d0312cc0 <line:4814:11, col:42> Text=" 0 One or more events are ready."
|   |   `-TextComment 0x5575d0312ce0 <line:4815:3> Text=" "
|   |-BlockCommandComment 0x5575d0312d30 <col:4, line:4816:3> Name="retval"
|   | `-ParagraphComment 0x5575d0312db0 <line:4815:11, line:4816:3>
|   |   |-TextComment 0x5575d0312d60 <line:4815:11, col:44> Text=" -EAGAIN Waiting period timed out."
|   |   `-TextComment 0x5575d0312d80 <line:4816:3> Text=" "
|   |-BlockCommandComment 0x5575d0312dd0 <col:4, line:4821:3> Name="retval"
|   | `-ParagraphComment 0x5575d0312ef0 <line:4816:11, line:4821:3>
|   |   |-TextComment 0x5575d0312e00 <line:4816:11, col:57> Text=" -EINTR Polling has been interrupted, e.g. with"
|   |   |-TextComment 0x5575d0312e20 <line:4817:3, col:76> Text="         k_queue_cancel_wait(). All output events are still set and valid,"
|   |   |-TextComment 0x5575d0312e40 <line:4818:3, col:77> Text="         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other"
|   |   |-TextComment 0x5575d0312e60 <line:4819:3, col:75> Text="         words, -EINTR status means that at least one of output events is"
|   |   |-TextComment 0x5575d0312e80 <line:4820:3, col:34> Text="         K_POLL_STATE_CANCELLED."
|   |   `-TextComment 0x5575d0312ea0 <line:4821:3> Text=" "
|   |-BlockCommandComment 0x5575d0312f10 <col:4, line:4822:3> Name="retval"
|   | `-ParagraphComment 0x5575d0312f90 <line:4821:11, line:4822:3>
|   |   |-TextComment 0x5575d0312f40 <line:4821:11, col:76> Text=" -ENOMEM Thread resource pool insufficient memory (user mode only)"
|   |   `-TextComment 0x5575d0312f60 <line:4822:3> Text=" "
|   `-BlockCommandComment 0x5575d0312fb0 <col:4, line:4824:1> Name="retval"
|     `-ParagraphComment 0x5575d03130b0 <line:4822:11, line:4824:1>
|       |-TextComment 0x5575d0312fe0 <line:4822:11, col:50> Text=" -EINVAL Bad parameters (user mode only)"
|       |-TextComment 0x5575d0313000 <line:4823:3> Text=" "
|       |-InlineCommandComment 0x5575d0313050 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5575d0313070 <line:4824:1> Text=" "
|-FunctionDecl 0x5575d0276bd0 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4840:63> col:16 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5575d0276ac0 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| `-FullComment 0x5575d03135f0 <line:4830:3, line:4838:1>
|   |-ParagraphComment 0x5575d0313250 <line:4830:3>
|   | `-TextComment 0x5575d0313220 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0313270 <col:4, col:42> Name="brief"
|   | `-ParagraphComment 0x5575d03132d0 <col:10, col:42>
|   |   `-TextComment 0x5575d03132a0 <col:10, col:42> Text=" Initialize a poll signal object."
|   |-ParagraphComment 0x5575d0313320 <line:4832:3, col:71>
|   | `-TextComment 0x5575d03132f0 <col:3, col:71> Text=" Ready a poll signal object to be signaled via k_poll_signal_raise()."
|   |-ParagraphComment 0x5575d0313370 <line:4834:3>
|   | `-TextComment 0x5575d0313340 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0313390 <col:4, col:31> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5575d0313420 <col:17, col:31>
|   |   `-TextComment 0x5575d03133f0 <col:17, col:31> Text=" A poll signal."
|   |-ParagraphComment 0x5575d0313470 <line:4836:3>
|   | `-TextComment 0x5575d0313440 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0313490 <col:4, line:4838:1> Name="return"
|     `-ParagraphComment 0x5575d0313590 <line:4836:11, line:4838:1>
|       |-TextComment 0x5575d03134c0 <line:4836:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d03134e0 <line:4837:3> Text=" "
|       |-InlineCommandComment 0x5575d0313530 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5575d0313550 <line:4838:1> Text=" "
|-FunctionDecl 0x5575d0276d30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4848:64> col:16 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| `-ParmVarDecl 0x5575d0276ca0 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
|-FunctionDecl 0x5575d0277640 <line:4850:1, line:4853:1> line:4850:20 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5575d02775b0 <col:47, col:69> col:69 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5575d02777b8 <line:4851:1, line:4853:1>
|   `-BinaryOperator 0x5575d0277770 <line:4852:2, col:21> 'unsigned int' '='
|     |-MemberExpr 0x5575d0277720 <col:2, col:10> 'unsigned int' lvalue ->signaled 0x5575d0272a10
|     | `-ImplicitCastExpr 0x5575d0277708 <col:2> 'struct k_poll_signal *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575d02776e8 <col:2> 'struct k_poll_signal *' lvalue ParmVar 0x5575d02775b0 'signal' 'struct k_poll_signal *'
|     `-IntegerLiteral 0x5575d0277750 <col:21> 'unsigned int' 0
|-FunctionDecl 0x5575d0277a30 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4867:43> line:4866:16 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x5575d02777f8 <col:36, col:58> col:58 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5575d0277878 <line:4867:8, col:22> col:22 signaled 'unsigned int *'
| |-ParmVarDecl 0x5575d02778f8 <col:32, col:37> col:37 result 'int *'
| `-FullComment 0x5575d0313b20 <line:4856:3, line:4865:1>
|   |-ParagraphComment 0x5575d0313690 <line:4856:3>
|   | `-TextComment 0x5575d0313660 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03136b0 <col:4, col:68> Name="brief"
|   | `-ParagraphComment 0x5575d0313710 <col:10, col:68>
|   |   `-TextComment 0x5575d03136e0 <col:10, col:68> Text=" Fetch the signaled state and result value of a poll signal"
|   |-ParagraphComment 0x5575d0313760 <line:4858:3>
|   | `-TextComment 0x5575d0313730 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0313780 <col:4, line:4859:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5575d0313830 <line:4858:17, line:4859:3>
|   |   |-TextComment 0x5575d03137e0 <line:4858:17, col:37> Text=" A poll signal object"
|   |   `-TextComment 0x5575d0313800 <line:4859:3> Text=" "
|   |-ParamCommandComment 0x5575d0313850 <col:4, line:4861:3> [in] implicitly Param="signaled" ParamIndex=1
|   | `-ParagraphComment 0x5575d0313930 <line:4859:19, line:4861:3>
|   |   |-TextComment 0x5575d03138b0 <line:4859:19, col:73> Text=" An integer buffer which will be written nonzero if the"
|   |   |-TextComment 0x5575d03138d0 <line:4860:3, col:26> Text="		   object was signaled"
|   |   `-TextComment 0x5575d03138f0 <line:4861:3> Text=" "
|   `-ParamCommandComment 0x5575d0313950 <col:4, line:4865:1> [in] implicitly Param="result" ParamIndex=2
|     `-ParagraphComment 0x5575d0313ad0 <line:4861:17, line:4865:1>
|       |-TextComment 0x5575d03139b0 <line:4861:17, col:77> Text=" An integer destination buffer which will be written with the"
|       |-TextComment 0x5575d03139d0 <line:4862:3, col:63> Text="		   result value if the object was signaled, or an undefined"
|       |-TextComment 0x5575d03139f0 <line:4863:3, col:27> Text="		   value if it was not."
|       |-TextComment 0x5575d0313a10 <line:4864:3> Text=" "
|       |-InlineCommandComment 0x5575d0313a60 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5575d0313a80 <line:4865:1> Text=" "
|-FunctionDecl 0x5575d0277ce8 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:4894:75> col:15 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x5575d0277b40 <col:35, col:57> col:57 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5575d0277bc0 <col:65, col:69> col:69 result 'int'
| `-FullComment 0x5575d03143d0 <line:4870:3, line:4892:1>
|   |-ParagraphComment 0x5575d0313bc0 <line:4870:3>
|   | `-TextComment 0x5575d0313b90 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0313be0 <col:4, col:38> Name="brief"
|   | `-ParagraphComment 0x5575d0313c40 <col:10, col:38>
|   |   `-TextComment 0x5575d0313c10 <col:10, col:38> Text=" Signal a poll signal object."
|   |-ParagraphComment 0x5575d0313d60 <line:4872:3, line:4874:57>
|   | |-TextComment 0x5575d0313c60 <line:4872:3, col:77> Text=" This routine makes ready a poll signal, which is basically a poll event of"
|   | |-TextComment 0x5575d0313c80 <line:4873:3, col:77> Text=" type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be"
|   | |-TextComment 0x5575d0313ca0 <line:4874:3, col:24> Text=" made ready to run. A "
|   | |-InlineCommandComment 0x5575d0313cf0 <col:25, col:26> Name="a" RenderEmphasized Arg[0]="result"
|   | `-TextComment 0x5575d0313d10 <col:34, col:57> Text=" value can be specified."
|   |-ParagraphComment 0x5575d0313e50 <line:4876:3, line:4880:27>
|   | |-TextComment 0x5575d0313d80 <line:4876:3, col:64> Text=" The poll signal contains a 'signaled' field that, when set by"
|   | |-TextComment 0x5575d0313da0 <line:4877:3, col:73> Text=" k_poll_signal_raise(), stays set until the user sets it back to 0 with"
|   | |-TextComment 0x5575d0313dc0 <line:4878:3, col:74> Text=" k_poll_signal_reset(). It thus has to be reset by the user before being"
|   | |-TextComment 0x5575d0313de0 <line:4879:3, col:76> Text=" passed again to k_poll() or k_poll() will consider it being signaled, and"
|   | `-TextComment 0x5575d0313e00 <line:4880:3, col:27> Text=" will return immediately."
|   |-ParagraphComment 0x5575d0313ea0 <line:4882:3>
|   | `-TextComment 0x5575d0313e70 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0313ec0 <col:4, line:4884:65> Name="note"
|   | `-ParagraphComment 0x5575d0313f70 <line:4882:9, line:4884:65>
|   |   |-TextComment 0x5575d0313ef0 <line:4882:9, col:69> Text=" The result is stored and the 'signaled' field is set even if"
|   |   |-TextComment 0x5575d0313f10 <line:4883:3, col:70> Text=" this function returns an error indicating that an expiring poll was"
|   |   `-TextComment 0x5575d0313f30 <line:4884:3, col:65> Text=" not notified.  The next k_poll() will detect the missed raise."
|   |-ParagraphComment 0x5575d0313fc0 <line:4886:3>
|   | `-TextComment 0x5575d0313f90 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0313fe0 <col:4, line:4887:3> [in] implicitly Param="signal" ParamIndex=0
|   | `-ParagraphComment 0x5575d0314090 <line:4886:17, line:4887:3>
|   |   |-TextComment 0x5575d0314040 <line:4886:17, col:31> Text=" A poll signal."
|   |   `-TextComment 0x5575d0314060 <line:4887:3> Text=" "
|   |-ParamCommandComment 0x5575d03140b0 <col:4, col:70> [in] implicitly Param="result" ParamIndex=1
|   | `-ParagraphComment 0x5575d0314140 <col:17, col:70>
|   |   `-TextComment 0x5575d0314110 <col:17, col:70> Text=" The value to store in the result field of the signal."
|   |-ParagraphComment 0x5575d0314190 <line:4889:3>
|   | `-TextComment 0x5575d0314160 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03141b0 <col:4, line:4890:3> Name="retval"
|   | `-ParagraphComment 0x5575d0314230 <line:4889:11, line:4890:3>
|   |   |-TextComment 0x5575d03141e0 <line:4889:11, col:51> Text=" 0 The signal was delivered successfully."
|   |   `-TextComment 0x5575d0314200 <line:4890:3> Text=" "
|   `-BlockCommandComment 0x5575d0314250 <col:4, line:4892:1> Name="retval"
|     `-ParagraphComment 0x5575d0314350 <line:4890:11, line:4892:1>
|       |-TextComment 0x5575d0314280 <line:4890:11, col:78> Text=" -EAGAIN The polling thread's timeout is in the process of expiring."
|       |-TextComment 0x5575d03142a0 <line:4891:3> Text=" "
|       |-InlineCommandComment 0x5575d03142f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-POLL-001"
|       `-TextComment 0x5575d0314310 <line:4892:1> Text=" "
|-FunctionDecl 0x5575d0277f70 <line:4899:1, col:70> col:13 z_handle_obj_poll_events 'void (sys_dlist_t *, u32_t)' extern
| |-ParmVarDecl 0x5575d0277dd8 <col:38, col:51> col:51 events 'sys_dlist_t *'
| |-ParmVarDecl 0x5575d0277e50 <col:59, col:65> col:65 state 'u32_t':'unsigned int'
| `-FullComment 0x5575d03144c0 <line:4897:3, col:12>
|   `-ParagraphComment 0x5575d0314490 <col:3, col:12>
|     |-TextComment 0x5575d0314440 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d0314460 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d0278110 <line:4921:1, line:4924:1> line:4921:20 k_cpu_idle 'void (void)' static inline
| |-CompoundStmt 0x5575d0278238 <line:4922:1, line:4924:1>
| | `-CallExpr 0x5575d02781e8 <line:4923:2, col:16> 'void'
| |   `-ImplicitCastExpr 0x5575d02781d0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x5575d02781b0 <col:2> 'void (void)' Function 0x5575d01e4b90 'arch_cpu_idle' 'void (void)'
| `-FullComment 0x5575d0314aa0 <line:4904:3, line:4920:1>
|   |-ParagraphComment 0x5575d0314560 <line:4904:3>
|   | `-TextComment 0x5575d0314530 <col:3> Text=" "
|   |-VerbatimLineComment 0x5575d0314580 <col:4, col:43> Text=" cpu_idle_apis CPU Idling APIs"
|   |-ParagraphComment 0x5575d03145f0 <line:4905:3>
|   | `-TextComment 0x5575d03145c0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5575d0314610 <col:4, col:24> Text=" kernel_apis"
|   |-ParagraphComment 0x5575d03146d0 <line:4906:3, col:5>
|   | |-TextComment 0x5575d0314650 <col:3> Text=" "
|   | |-TextComment 0x5575d0314670 <col:4> Text="@"
|   | `-TextComment 0x5575d0314690 <col:5> Text="{"
|   |-ParagraphComment 0x5575d0314720 <line:4909:3>
|   | `-TextComment 0x5575d03146f0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0314740 <col:4, col:28> Name="brief"
|   | `-ParagraphComment 0x5575d03147a0 <col:10, col:28>
|   |   `-TextComment 0x5575d0314770 <col:10, col:28> Text=" Make the CPU idle."
|   |-ParagraphComment 0x5575d03147f0 <line:4911:3, col:63>
|   | `-TextComment 0x5575d03147c0 <col:3, col:63> Text=" This function makes the CPU idle until an event wakes it up."
|   |-ParagraphComment 0x5575d03148b0 <line:4913:3, line:4916:59>
|   | |-TextComment 0x5575d0314810 <line:4913:3, col:77> Text=" In a regular system, the idle thread should be the only thread responsible"
|   | |-TextComment 0x5575d0314830 <line:4914:3, col:71> Text=" for making the CPU idle and triggering any type of power management."
|   | |-TextComment 0x5575d0314850 <line:4915:3, col:79> Text=" However, in some more constrained systems, such as a single-threaded system,"
|   | `-TextComment 0x5575d0314870 <line:4916:3, col:59> Text=" the only thread would be responsible for this if needed."
|   |-ParagraphComment 0x5575d0314900 <line:4918:3>
|   | `-TextComment 0x5575d03148d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0314920 <col:4, line:4920:1> Name="return"
|     `-ParagraphComment 0x5575d0314a20 <line:4918:11, line:4920:1>
|       |-TextComment 0x5575d0314950 <line:4918:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d0314970 <line:4919:3> Text=" "
|       |-InlineCommandComment 0x5575d03149c0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-CPU-IDLE-001"
|       `-TextComment 0x5575d03149e0 <line:4920:1> Text=" "
|-FunctionDecl 0x5575d02782f8 <line:4937:1, line:4940:1> line:4937:20 k_cpu_atomic_idle 'void (unsigned int)' static inline
| |-ParmVarDecl 0x5575d0278268 <col:38, col:51> col:51 used key 'unsigned int'
| |-CompoundStmt 0x5575d0278498 <line:4938:1, line:4940:1>
| | `-CallExpr 0x5575d02783f8 <line:4939:2, col:26> 'void'
| |   |-ImplicitCastExpr 0x5575d02783e0 <col:2> 'void (*)(unsigned int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x5575d02783a0 <col:2> 'void (unsigned int)' Function 0x5575d01e4d40 'arch_cpu_atomic_idle' 'void (unsigned int)'
| |   `-ImplicitCastExpr 0x5575d0278420 <col:23> 'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d02783c0 <col:23> 'unsigned int' lvalue ParmVar 0x5575d0278268 'key' 'unsigned int'
| `-FullComment 0x5575d0314f00 <line:4927:3, line:4936:1>
|   |-ParagraphComment 0x5575d0314b40 <line:4927:3>
|   | `-TextComment 0x5575d0314b10 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0314b60 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d0314bc0 <col:10, col:49>
|   |   `-TextComment 0x5575d0314b90 <col:10, col:49> Text=" Make the CPU idle in an atomic fashion."
|   |-ParagraphComment 0x5575d0314c30 <line:4929:3, line:4930:54>
|   | |-TextComment 0x5575d0314be0 <line:4929:3, col:75> Text=" Similar to k_cpu_idle(), but called with interrupts locked if operations"
|   | `-TextComment 0x5575d0314c00 <line:4930:3, col:54> Text=" must be done atomically before making the CPU idle."
|   |-ParagraphComment 0x5575d0314c80 <line:4932:3>
|   | `-TextComment 0x5575d0314c50 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0314ca0 <col:4, col:61> [in] implicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x5575d0314d30 <col:14, col:61>
|   |   `-TextComment 0x5575d0314d00 <col:14, col:61> Text=" Interrupt locking key obtained from irq_lock()."
|   |-ParagraphComment 0x5575d0314d80 <line:4934:3>
|   | `-TextComment 0x5575d0314d50 <col:3> Text=" "
|   `-BlockCommandComment 0x5575d0314da0 <col:4, line:4936:1> Name="return"
|     `-ParagraphComment 0x5575d0314ea0 <line:4934:11, line:4936:1>
|       |-TextComment 0x5575d0314dd0 <line:4934:11, col:14> Text=" N/A"
|       |-TextComment 0x5575d0314df0 <line:4935:3> Text=" "
|       |-InlineCommandComment 0x5575d0314e40 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-CPU-IDLE-002"
|       `-TextComment 0x5575d0314e60 <line:4936:1> Text=" "
|-FunctionDecl 0x5575d0278c58 <line:4949:1, col:51> col:13 z_sys_power_save_idle_exit 'void (s32_t)' extern
| |-ParmVarDecl 0x5575d02784c0 <col:40, col:46> col:46 ticks 's32_t':'int'
| `-FullComment 0x5575d0314ff0 <line:4947:3, col:12>
|   `-ParagraphComment 0x5575d0314fc0 <col:3, col:12>
|     |-TextComment 0x5575d0314f70 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d0314f90 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d02790e0 <line:5008:1, line:5010:30> line:5008:13 z_init_thread_base 'void (struct _thread_base *, int, u32_t, unsigned int)' extern
| |-ParmVarDecl 0x5575d0278e18 <col:32, col:53> col:53 thread_base 'struct _thread_base *'
| |-ParmVarDecl 0x5575d0278e98 <line:5009:10, col:14> col:14 priority 'int'
| |-ParmVarDecl 0x5575d0278f10 <col:24, col:30> col:30 initial_state 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5575d0278f90 <line:5010:10, col:23> col:23 options 'unsigned int'
| `-FullComment 0x5575d03150e0 <line:5006:3, col:12>
|   `-ParagraphComment 0x5575d03150b0 <col:3, col:12>
|     |-TextComment 0x5575d0315060 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d0315080 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d0279290 <line:5027:1, col:39> col:13 z_is_thread_essential 'bool (void)' extern
| `-FullComment 0x5575d03151f0 <line:5025:3, col:12>
|   `-ParagraphComment 0x5575d03151c0 <col:3, col:12>
|     |-TextComment 0x5575d0315170 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d0315190 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d0279410 <line:5031:1, col:58> col:13 z_timer_expiration_handler 'void (struct _timeout *)' extern
| |-ParmVarDecl 0x5575d0279380 <col:40, col:57> col:57 t 'struct _timeout *'
| `-FullComment 0x5575d03152e0 <line:5029:3, col:12>
|   `-ParagraphComment 0x5575d03152b0 <col:3, col:12>
|     |-TextComment 0x5575d0315260 <col:3> Text=" "
|     `-InlineCommandComment 0x5575d0315280 <col:4, col:12> Name="internal" RenderNormal
|-FunctionDecl 0x5575d0279758 <line:5177:1, line:5180:1> line:5177:21 Z_THREAD_STACK_BUFFER 'char *(k_thread_stack_t *)' static inline
| |-ParmVarDecl 0x5575d0279648 <col:43, col:61> col:61 used sym 'k_thread_stack_t *'
| |-CompoundStmt 0x5575d02798e8 <line:5178:1, line:5180:1>
| | `-ReturnStmt 0x5575d0279878 <line:5179:2, col:17>
| |   `-CStyleCastExpr 0x5575d0279850 <col:9, col:17> 'char *' <BitCast>
| |     `-ImplicitCastExpr 0x5575d0279838 <col:17> 'k_thread_stack_t *' <LValueToRValue> part_of_explicit_cast
| |       `-DeclRefExpr 0x5575d0279800 <col:17> 'k_thread_stack_t *' lvalue ParmVar 0x5575d0279648 'sym' 'k_thread_stack_t *'
| `-FullComment 0x5575d0315700 <line:5168:3, line:5176:1>
|   |-ParagraphComment 0x5575d0315380 <line:5168:3>
|   | `-TextComment 0x5575d0315350 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03153a0 <col:4, col:52> Name="brief"
|   | `-ParagraphComment 0x5575d0315400 <col:10, col:52>
|   |   `-TextComment 0x5575d03153d0 <col:10, col:52> Text=" Get a pointer to the physical stack buffer"
|   |-ParagraphComment 0x5575d0315470 <line:5170:3, line:5171:76>
|   | |-TextComment 0x5575d0315420 <line:5170:3, col:72> Text=" This macro is deprecated. If a stack buffer needs to be examined, the"
|   | `-TextComment 0x5575d0315440 <line:5171:3, col:76> Text=" bounds should be obtained from the associated thread's stack_info struct."
|   |-ParagraphComment 0x5575d03154c0 <line:5173:3>
|   | `-TextComment 0x5575d0315490 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d03154e0 <col:4, line:5174:3> [in] implicitly Param="sym" ParamIndex=0
|   | `-ParagraphComment 0x5575d0315590 <line:5173:14, line:5174:3>
|   |   |-TextComment 0x5575d0315540 <line:5173:14, col:40> Text=" Declared stack symbol name"
|   |   `-TextComment 0x5575d0315560 <line:5174:3> Text=" "
|   `-BlockCommandComment 0x5575d03155b0 <col:4, line:5176:1> Name="return"
|     `-ParagraphComment 0x5575d03156b0 <line:5174:11, line:5176:1>
|       |-TextComment 0x5575d03155e0 <line:5174:11, col:38> Text=" The buffer itself, a char *"
|       |-TextComment 0x5575d0315600 <line:5175:3> Text=" "
|       |-InlineCommandComment 0x5575d0315650 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-TSTACK-001"
|       `-TextComment 0x5575d0315670 <line:5176:1> Text=" "
|-RecordDecl 0x5575d0279900 prev 0x5575d0226e88 <line:5207:1, line:5216:1> line:5207:8 struct k_mem_partition definition
| |-FieldDecl 0x5575d02799b8 <line:5209:2, col:12> col:12 start 'uintptr_t':'unsigned long'
| | `-FullComment 0x5575d03157d0 <line:5208:5, col:39>
| |   `-ParagraphComment 0x5575d03157a0 <col:5, col:39>
| |     `-TextComment 0x5575d0315770 <col:5, col:39> Text=" start address of memory partition "
| `-FieldDecl 0x5575d0279a48 <line:5211:2, col:9> col:9 size 'size_t':'unsigned long'
|   `-FullComment 0x5575d03158a0 <line:5210:5, col:30>
|     `-ParagraphComment 0x5575d0315870 <col:5, col:30>
|       `-TextComment 0x5575d0315840 <col:5, col:30> Text=" size of memory partition "
|-RecordDecl 0x5575d0279ac8 prev 0x5575d0226e08 <line:5222:1, line:5231:1> line:5222:8 struct k_mem_domain definition
| |-FullComment 0x5575d0315a50 <line:5219:3, line:5221:1>
| | |-ParagraphComment 0x5575d0315940 <line:5219:3>
| | | `-TextComment 0x5575d0315910 <col:3> Text=" "
| | |-BlockCommandComment 0x5575d0315960 <col:4, col:23> Name="brief"
| | | `-ParagraphComment 0x5575d03159c0 <col:10, col:23>
| | |   `-TextComment 0x5575d0315990 <col:10, col:23> Text=" Memory Domain"
| | `-ParagraphComment 0x5575d0315a10 <line:5221:1>
| |   `-TextComment 0x5575d03159e0 <col:1> Text=" "
| |-FieldDecl 0x5575d0279b88 <line:5228:2, col:14> col:14 mem_domain_q 'sys_dlist_t':'struct _dnode'
| | `-FullComment 0x5575d0315b20 <line:5227:5, col:14>
| |   `-ParagraphComment 0x5575d0315af0 <col:5, col:14>
| |     `-TextComment 0x5575d0315ac0 <col:5, col:14> Text=" domain q "
| `-FieldDecl 0x5575d027bb60 <line:5230:2, col:7> col:7 num_partitions 'u8_t':'unsigned char'
|   `-FullComment 0x5575d0315bf0 <line:5229:5, col:40>
|     `-ParagraphComment 0x5575d0315bc0 <col:5, col:40>
|       `-TextComment 0x5575d0315b90 <col:5, col:40> Text=" number of partitions in the domain "
|-FunctionDecl 0x5575d027c0a0 <line:5248:1, line:5249:41> line:5248:13 k_mem_domain_init 'void (struct k_mem_domain *, u8_t, struct k_mem_partition **)' extern
| |-ParmVarDecl 0x5575d027bca8 <col:31, col:52> col:52 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5575d027bd20 <col:60, col:65> col:65 num_parts 'u8_t':'unsigned char'
| |-ParmVarDecl 0x5575d027bf68 <line:5249:10, col:40> col:34 parts 'struct k_mem_partition **':'struct k_mem_partition **'
| `-FullComment 0x5575d03161a0 <line:5235:3, line:5247:1>
|   |-ParagraphComment 0x5575d0315c90 <line:5235:3>
|   | `-TextComment 0x5575d0315c60 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0315cb0 <col:4, col:37> Name="brief"
|   | `-ParagraphComment 0x5575d0315d10 <col:10, col:37>
|   |   `-TextComment 0x5575d0315ce0 <col:10, col:37> Text=" Initialize a memory domain."
|   |-ParagraphComment 0x5575d0315d60 <line:5237:3, col:68>
|   | `-TextComment 0x5575d0315d30 <col:3, col:68> Text=" Initialize a memory domain with given name and memory partitions."
|   |-ParagraphComment 0x5575d0315dd0 <line:5239:3, line:5240:25>
|   | |-TextComment 0x5575d0315d80 <line:5239:3, col:71> Text=" See documentation for k_mem_domain_add_partition() for details about"
|   | `-TextComment 0x5575d0315da0 <line:5240:3, col:25> Text=" partition constraints."
|   |-ParagraphComment 0x5575d0315e20 <line:5242:3>
|   | `-TextComment 0x5575d0315df0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0315e40 <col:4, line:5243:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5575d0315ef0 <line:5242:17, line:5243:3>
|   |   |-TextComment 0x5575d0315ea0 <line:5242:17, col:53> Text=" The memory domain to be initialized."
|   |   `-TextComment 0x5575d0315ec0 <line:5243:3> Text=" "
|   |-ParamCommandComment 0x5575d0315f10 <col:4, line:5244:3> [in] implicitly Param="num_parts" ParamIndex=1
|   | `-ParagraphComment 0x5575d0315fc0 <line:5243:20, line:5244:3>
|   |   |-TextComment 0x5575d0315f70 <line:5243:20, col:67> Text=" The number of array items of "parts" parameter."
|   |   `-TextComment 0x5575d0315f90 <line:5244:3> Text=" "
|   `-ParamCommandComment 0x5575d0315fe0 <col:4, line:5247:1> [in] implicitly Param="parts" ParamIndex=2
|     `-ParagraphComment 0x5575d0316140 <line:5244:16, line:5247:1>
|       |-TextComment 0x5575d0316040 <line:5244:16, col:74> Text=" An array of pointers to the memory partitions. Can be NULL"
|       |-TextComment 0x5575d0316060 <line:5245:3, col:37> Text="              if num_parts is zero."
|       |-TextComment 0x5575d0316080 <line:5246:3> Text=" "
|       |-InlineCommandComment 0x5575d03160d0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5575d03160f0 <line:5247:1> Text=" "
|-FunctionDecl 0x5575d027c2c0 <line:5258:1, col:61> col:13 k_mem_domain_destroy 'void (struct k_mem_domain *)' extern
| |-ParmVarDecl 0x5575d027c1b0 <col:34, col:55> col:55 domain 'struct k_mem_domain *'
| `-FullComment 0x5575d0316500 <line:5251:3, line:5257:1>
|   |-ParagraphComment 0x5575d0316240 <line:5251:3>
|   | `-TextComment 0x5575d0316210 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0316260 <col:4, col:34> Name="brief"
|   | `-ParagraphComment 0x5575d03162c0 <col:10, col:34>
|   |   `-TextComment 0x5575d0316290 <col:10, col:34> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x5575d0316310 <line:5253:3, col:27>
|   | `-TextComment 0x5575d03162e0 <col:3, col:27> Text=" Destroy a memory domain."
|   |-ParagraphComment 0x5575d0316360 <line:5255:3>
|   | `-TextComment 0x5575d0316330 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d0316380 <col:4, line:5257:1> [in] implicitly Param="domain" ParamIndex=0
|     `-ParagraphComment 0x5575d03164b0 <line:5255:17, line:5257:1>
|       |-TextComment 0x5575d03163e0 <line:5255:17, col:51> Text=" The memory domain to be destroyed."
|       |-TextComment 0x5575d0316400 <line:5256:3> Text=" "
|       |-InlineCommandComment 0x5575d0316450 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5575d0316470 <line:5257:1> Text=" "
|-FunctionDecl 0x5575d027c570 <line:5284:1, line:5285:39> line:5284:13 k_mem_domain_add_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x5575d027c3c0 <col:40, col:61> col:61 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5575d027c450 <line:5285:11, col:35> col:35 part 'struct k_mem_partition *'
| `-FullComment 0x5575d0316b80 <line:5261:3, line:5283:1>
|   |-ParagraphComment 0x5575d03165a0 <line:5261:3>
|   | `-TextComment 0x5575d0316570 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03165c0 <col:4, col:54> Name="brief"
|   | `-ParagraphComment 0x5575d0316620 <col:10, col:54>
|   |   `-TextComment 0x5575d03165f0 <col:10, col:54> Text=" Add a memory partition into a memory domain."
|   |-ParagraphComment 0x5575d0316690 <line:5263:3, line:5264:29>
|   | |-TextComment 0x5575d0316640 <line:5263:3, col:74> Text=" Add a memory partition into a memory domain. Partitions must conform to"
|   | `-TextComment 0x5575d0316660 <line:5264:3, col:29> Text=" the following constraints:"
|   |-ParagraphComment 0x5575d0316840 <line:5266:3, line:5275:28>
|   | |-TextComment 0x5575d03166b0 <line:5266:3, col:71> Text=" - Partition bounds must be within system RAM boundaries on MMU-based"
|   | |-TextComment 0x5575d03166d0 <line:5267:3, col:13> Text="   systems."
|   | |-TextComment 0x5575d03166f0 <line:5268:3, col:69> Text=" - Partitions in the same memory domain may not overlap each other."
|   | |-TextComment 0x5575d0316710 <line:5269:3, col:63> Text=" - Partitions must not be defined which expose private kernel"
|   | |-TextComment 0x5575d0316730 <line:5270:3, col:39> Text="   data structures or kernel objects."
|   | |-TextComment 0x5575d0316750 <line:5271:3, col:75> Text=" - The starting address alignment, and the partition size must conform to"
|   | |-TextComment 0x5575d0316770 <line:5272:3, col:72> Text="   the constraints of the underlying memory management hardware, which"
|   | |-TextComment 0x5575d0316790 <line:5273:3, col:29> Text="   varies per architecture."
|   | |-TextComment 0x5575d03167b0 <line:5274:3, col:75> Text=" - Memory domain partitions are only intended to control access to memory"
|   | `-TextComment 0x5575d03167d0 <line:5275:3, col:28> Text="   from user mode threads."
|   |-ParagraphComment 0x5575d03168b0 <line:5277:3, line:5278:12>
|   | |-TextComment 0x5575d0316860 <line:5277:3, col:70> Text=" Violating these constraints may lead to CPU exceptions or undefined"
|   | `-TextComment 0x5575d0316880 <line:5278:3, col:12> Text=" behavior."
|   |-ParagraphComment 0x5575d0316900 <line:5280:3>
|   | `-TextComment 0x5575d03168d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0316920 <col:4, line:5281:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5575d03169d0 <line:5280:17, line:5281:3>
|   |   |-TextComment 0x5575d0316980 <line:5280:17, col:66> Text=" The memory domain to be added a memory partition."
|   |   `-TextComment 0x5575d03169a0 <line:5281:3> Text=" "
|   `-ParamCommandComment 0x5575d03169f0 <col:4, line:5283:1> [in] implicitly Param="part" ParamIndex=1
|     `-ParagraphComment 0x5575d0316b20 <line:5281:15, line:5283:1>
|       |-TextComment 0x5575d0316a50 <line:5281:15, col:47> Text=" The memory partition to be added"
|       |-TextComment 0x5575d0316a70 <line:5282:3> Text=" "
|       |-InlineCommandComment 0x5575d0316ac0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5575d0316ae0 <line:5283:1> Text=" "
|-FunctionDecl 0x5575d027c798 <line:5296:1, line:5297:35> line:5296:13 k_mem_domain_remove_partition 'void (struct k_mem_domain *, struct k_mem_partition *)' extern
| |-ParmVarDecl 0x5575d027c670 <col:43, col:64> col:64 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5575d027c700 <line:5297:7, col:31> col:31 part 'struct k_mem_partition *'
| `-FullComment 0x5575d0316fb0 <line:5288:3, line:5295:1>
|   |-ParagraphComment 0x5575d0316c20 <line:5288:3>
|   | `-TextComment 0x5575d0316bf0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0316c40 <col:4, col:57> Name="brief"
|   | `-ParagraphComment 0x5575d0316ca0 <col:10, col:57>
|   |   `-TextComment 0x5575d0316c70 <col:10, col:57> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x5575d0316cf0 <line:5290:3, col:50>
|   | `-TextComment 0x5575d0316cc0 <col:3, col:50> Text=" Remove a memory partition from a memory domain."
|   |-ParagraphComment 0x5575d0316d40 <line:5292:3>
|   | `-TextComment 0x5575d0316d10 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0316d60 <col:4, line:5293:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5575d0316e10 <line:5292:17, line:5293:3>
|   |   |-TextComment 0x5575d0316dc0 <line:5292:17, col:68> Text=" The memory domain to be removed a memory partition."
|   |   `-TextComment 0x5575d0316de0 <line:5293:3> Text=" "
|   `-ParamCommandComment 0x5575d0316e30 <col:4, line:5295:1> [in] implicitly Param="part" ParamIndex=1
|     `-ParagraphComment 0x5575d0316f60 <line:5293:15, line:5295:1>
|       |-TextComment 0x5575d0316e90 <line:5293:15, col:49> Text=" The memory partition to be removed"
|       |-TextComment 0x5575d0316eb0 <line:5294:3> Text=" "
|       |-InlineCommandComment 0x5575d0316f00 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5575d0316f20 <line:5295:1> Text=" "
|-FunctionDecl 0x5575d027ca30 <line:5309:1, line:5310:23> line:5309:13 k_mem_domain_add_thread 'void (struct k_mem_domain *, k_tid_t)' extern
| |-ParmVarDecl 0x5575d027c8a0 <col:37, col:58> col:58 domain 'struct k_mem_domain *'
| |-ParmVarDecl 0x5575d027c918 <line:5310:9, col:17> col:17 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d0317440 <line:5300:3, line:5308:1>
|   |-ParagraphComment 0x5575d0317050 <line:5300:3>
|   | `-TextComment 0x5575d0317020 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0317070 <col:4, col:44> Name="brief"
|   | `-ParagraphComment 0x5575d03170d0 <col:10, col:44>
|   |   `-TextComment 0x5575d03170a0 <col:10, col:44> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x5575d0317140 <line:5302:3, col:37>
|   | `-TextComment 0x5575d03170f0 <col:3, col:37> Text=" Add a thread into a memory domain."
|   |-ParagraphComment 0x5575d0317190 <line:5304:3>
|   | `-TextComment 0x5575d0317160 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d03171b0 <col:4, line:5305:3> [in] implicitly Param="domain" ParamIndex=0
|   | `-ParagraphComment 0x5575d0317260 <line:5304:17, line:5305:3>
|   |   |-TextComment 0x5575d0317210 <line:5304:17, col:77> Text=" The memory domain that the thread is going to be added into."
|   |   `-TextComment 0x5575d0317230 <line:5305:3> Text=" "
|   |-ParamCommandComment 0x5575d0317280 <col:4, col:71> [in] implicitly Param="thread" ParamIndex=1
|   | `-ParagraphComment 0x5575d0317310 <col:17, col:71>
|   |   `-TextComment 0x5575d03172e0 <col:17, col:71> Text=" ID of thread going to be added into the memory domain."
|   `-ParagraphComment 0x5575d03173e0 <line:5307:3, line:5308:1>
|     |-TextComment 0x5575d0317330 <line:5307:3> Text=" "
|     |-InlineCommandComment 0x5575d0317380 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|     `-TextComment 0x5575d03173a0 <line:5308:1> Text=" "
|-FunctionDecl 0x5575d027cd80 <line:5320:1, col:54> col:13 k_mem_domain_remove_thread 'void (k_tid_t)' extern
| |-ParmVarDecl 0x5575d027ccf0 <col:40, col:48> col:48 thread 'k_tid_t':'struct k_thread *'
| `-FullComment 0x5575d03177a0 <line:5313:3, line:5319:1>
|   |-ParagraphComment 0x5575d03174e0 <line:5313:3>
|   | `-TextComment 0x5575d03174b0 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0317500 <col:4, col:49> Name="brief"
|   | `-ParagraphComment 0x5575d0317560 <col:10, col:49>
|   |   `-TextComment 0x5575d0317530 <col:10, col:49> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x5575d03175b0 <line:5315:3, col:42>
|   | `-TextComment 0x5575d0317580 <col:3, col:42> Text=" Remove a thread from its memory domain."
|   |-ParagraphComment 0x5575d0317600 <line:5317:3>
|   | `-TextComment 0x5575d03175d0 <col:3> Text=" "
|   `-ParamCommandComment 0x5575d0317620 <col:4, line:5319:1> [in] implicitly Param="thread" ParamIndex=0
|     `-ParagraphComment 0x5575d0317750 <line:5317:17, line:5319:1>
|       |-TextComment 0x5575d0317680 <line:5317:17, col:73> Text=" ID of thread going to be removed from its memory domain."
|       |-TextComment 0x5575d03176a0 <line:5318:3> Text=" "
|       |-InlineCommandComment 0x5575d03176f0 <col:4, col:7> Name="ref" RenderNormal Arg[0]="K-MD-001"
|       `-TextComment 0x5575d0317710 <line:5319:1> Text=" "
|-FunctionDecl 0x5575d027cf88 </vagrant/ext/zephyros/zephyr/include/toolchain/common.h:130:19, /vagrant/ext/zephyros/zephyr/include/kernel.h:5356:54> col:15 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x5575d027ceb0 <col:31, col:48> col:48 thread 'struct k_thread *'
| `-FullComment 0x5575d0317e20 <line:5337:3, line:5354:74>
|   |-ParagraphComment 0x5575d0317840 <line:5337:3>
|   | `-TextComment 0x5575d0317810 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0317860 <col:4, col:69> Name="brief"
|   | `-ParagraphComment 0x5575d03178c0 <col:10, col:69>
|   |   `-TextComment 0x5575d0317890 <col:10, col:69> Text=" Disable preservation of floating point context information."
|   |-ParagraphComment 0x5575d0317930 <line:5339:3, line:5340:56>
|   | |-TextComment 0x5575d03178e0 <line:5339:3, col:60> Text=" This routine informs the kernel that the specified thread"
|   | `-TextComment 0x5575d0317900 <line:5340:3, col:56> Text=" will no longer be using the floating point registers."
|   |-ParagraphComment 0x5575d0317980 <line:5342:3>
|   | `-TextComment 0x5575d0317950 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d03179a0 <col:4, line:5344:63> Name="warning"
|   | `-ParagraphComment 0x5575d0317a20 <line:5343:3, line:5344:63>
|   |   |-TextComment 0x5575d03179d0 <line:5343:3, col:73> Text=" Some architectures apply restrictions on how the disabling of floating"
|   |   `-TextComment 0x5575d03179f0 <line:5344:3, col:63> Text=" point preservation may be requested, see arch_float_disable."
|   |-ParagraphComment 0x5575d0317a70 <line:5346:3>
|   | `-TextComment 0x5575d0317a40 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0317a90 <col:4, line:5348:52> Name="warning"
|   | `-ParagraphComment 0x5575d0317b10 <line:5347:3, line:5348:52>
|   |   |-TextComment 0x5575d0317ac0 <line:5347:3, col:73> Text=" This routine should only be used to disable floating point support for"
|   |   `-TextComment 0x5575d0317ae0 <line:5348:3, col:52> Text=" a thread that currently has such support enabled."
|   |-ParagraphComment 0x5575d0317b60 <line:5350:3>
|   | `-TextComment 0x5575d0317b30 <col:3> Text=" "
|   |-ParamCommandComment 0x5575d0317b80 <col:4, col:30> [in] implicitly Param="thread" ParamIndex=0
|   | `-ParagraphComment 0x5575d0317c10 <col:17, col:30>
|   |   `-TextComment 0x5575d0317be0 <col:17, col:30> Text=" ID of thread."
|   |-ParagraphComment 0x5575d0317c60 <line:5352:3>
|   | `-TextComment 0x5575d0317c30 <col:3> Text=" "
|   |-BlockCommandComment 0x5575d0317c80 <col:4, line:5353:3> Name="retval"
|   | `-ParagraphComment 0x5575d0317d00 <line:5352:11, line:5353:3>
|   |   |-TextComment 0x5575d0317cb0 <line:5352:11, col:30> Text=" 0       On success."
|   |   `-TextComment 0x5575d0317cd0 <line:5353:3> Text=" "
|   `-BlockCommandComment 0x5575d0317d20 <col:4, line:5354:74> Name="retval"
|     `-ParagraphComment 0x5575d0317da0 <line:5353:11, line:5354:74>
|       |-TextComment 0x5575d0317d50 <line:5353:11, col:70> Text=" -ENOSYS If the floating point disabling is not implemented."
|       `-TextComment 0x5575d0317d70 <line:5354:3, col:74> Text="         -EINVAL If the floating point disabling could not be performed."
|-FunctionDecl 0x5575d027d4f8 prev 0x5575d022def0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:24:1, col:81> col:13 used z_impl_k_object_access_grant 'void (void *, struct k_thread *)' extern
| |-ParmVarDecl 0x5575d027d3d0 <col:42, col:49> col:49 object 'void *'
| `-ParmVarDecl 0x5575d027d460 <col:57, col:75> col:75 thread 'struct k_thread *'
|-FunctionDecl 0x5575d027d6e8 prev 0x5575d0228008 <line:25:1, line:35:1> line:25:20 k_object_access_grant 'void (void *, struct k_thread *)' static inline
| |-ParmVarDecl 0x5575d027d5c0 <col:42, col:49> col:49 used object 'void *'
| |-ParmVarDecl 0x5575d027d650 <col:57, col:75> col:75 used thread 'struct k_thread *'
| `-CompoundStmt 0x5575d027d9c8 <line:26:1, line:35:1>
|   |-DoStmt 0x5575d027d868 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d027d830 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d027d7d0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d027d848 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d027d968 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:34:2, col:45> 'void'
|     |-ImplicitCastExpr 0x5575d027d950 <col:2> 'void (*)(void *, struct k_thread *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d027d888 <col:2> 'void (void *, struct k_thread *)' Function 0x5575d027d4f8 'z_impl_k_object_access_grant' 'void (void *, struct k_thread *)'
|     |-ImplicitCastExpr 0x5575d027d998 <col:31> 'void *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d027d8a8 <col:31> 'void *' lvalue ParmVar 0x5575d027d5c0 'object' 'void *'
|     `-ImplicitCastExpr 0x5575d027d9b0 <col:39> 'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d027d8c8 <col:39> 'struct k_thread *' lvalue ParmVar 0x5575d027d650 'thread' 'struct k_thread *'
|-FunctionDecl 0x5575d027da90 prev 0x5575d022e590 <line:38:1, col:50> col:13 used z_impl_k_object_release 'void (void *)' extern
| `-ParmVarDecl 0x5575d027da00 <col:37, col:44> col:44 object 'void *'
|-FunctionDecl 0x5575d027dbe0 prev 0x5575d02283b0 <line:39:1, line:49:1> line:39:20 k_object_release 'void (void *)' static inline
| |-ParmVarDecl 0x5575d027db50 <col:37, col:44> col:44 used object 'void *'
| `-CompoundStmt 0x5575d02835c0 <line:40:1, line:49:1>
|   |-DoStmt 0x5575d0283508 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d02834d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0283470 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d02834e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0283580 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:48:2, col:32> 'void'
|     |-ImplicitCastExpr 0x5575d0283568 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0283528 <col:2> 'void (void *)' Function 0x5575d027da90 'z_impl_k_object_release' 'void (void *)'
|     `-ImplicitCastExpr 0x5575d02835a8 <col:26> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0283548 <col:26> 'void *' lvalue ParmVar 0x5575d027db50 'object' 'void *'
|-FunctionDecl 0x5575d0283698 prev 0x5575d02288d8 <line:52:1, col:57> col:15 used z_impl_k_object_alloc 'void *(enum k_objects)' extern
| `-ParmVarDecl 0x5575d0283600 <col:37, col:52> col:52 otype 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x5575d02837f8 prev 0x5575d0228778 <line:53:1, line:62:1> line:53:22 k_object_alloc 'void *(enum k_objects)' static inline
| |-ParmVarDecl 0x5575d0283760 <col:37, col:52> col:52 used otype 'enum k_objects':'enum k_objects'
| `-CompoundStmt 0x5575d0283a98 <line:54:1, line:62:1>
|   |-DoStmt 0x5575d0283970 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0283938 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d02838d8 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0283950 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0283a88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:61:2, col:36>
|     `-CallExpr 0x5575d0283a48 <col:9, col:36> 'void *'
|       |-ImplicitCastExpr 0x5575d0283a30 <col:9> 'void *(*)(enum k_objects)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0283990 <col:9> 'void *(enum k_objects)' Function 0x5575d0283698 'z_impl_k_object_alloc' 'void *(enum k_objects)'
|       `-ImplicitCastExpr 0x5575d0283a70 <col:31> 'enum k_objects':'enum k_objects' <LValueToRValue>
|         `-DeclRefExpr 0x5575d02839b0 <col:31> 'enum k_objects':'enum k_objects' lvalue ParmVar 0x5575d0283760 'otype' 'enum k_objects':'enum k_objects'
|-FunctionDecl 0x5575d0284010 <line:65:1, col:207> col:16 used z_impl_k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' extern
| |-ParmVarDecl 0x5575d0283ae0 <col:39, col:57> col:57 new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5575d0283b58 <col:69, col:88> col:88 stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5575d0283bd0 <col:95, col:102> col:102 stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0283c48 <col:114, col:131> col:131 entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5575d0283cc8 <col:138, col:145> col:145 p1 'void *'
| |-ParmVarDecl 0x5575d0283d48 <col:149, col:156> col:156 p2 'void *'
| |-ParmVarDecl 0x5575d0283dc8 <col:160, col:167> col:167 p3 'void *'
| |-ParmVarDecl 0x5575d0283e48 <col:171, col:175> col:175 prio 'int'
| |-ParmVarDecl 0x5575d0283ec0 <col:181, col:187> col:187 options 'u32_t':'unsigned int'
| `-ParmVarDecl 0x5575d0283f38 <col:196, col:202> col:202 delay 's32_t':'int'
|-FunctionDecl 0x5575d02846c8 prev 0x5575d0232300 <line:66:1, line:82:1> line:66:23 k_thread_create 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' static inline
| |-ParmVarDecl 0x5575d0284128 <col:39, col:57> col:57 used new_thread 'struct k_thread *'
| |-ParmVarDecl 0x5575d02841a0 <col:69, col:88> col:88 used stack 'k_thread_stack_t *'
| |-ParmVarDecl 0x5575d0284218 <col:95, col:102> col:102 used stack_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0284290 <col:114, col:131> col:131 used entry 'k_thread_entry_t':'void (*)(void *, void *, void *)'
| |-ParmVarDecl 0x5575d0284310 <col:138, col:145> col:145 used p1 'void *'
| |-ParmVarDecl 0x5575d0284390 <col:149, col:156> col:156 used p2 'void *'
| |-ParmVarDecl 0x5575d0284480 <col:160, col:167> col:167 used p3 'void *'
| |-ParmVarDecl 0x5575d0284500 <col:171, col:175> col:175 used prio 'int'
| |-ParmVarDecl 0x5575d0284578 <col:181, col:187> col:187 used options 'u32_t':'unsigned int'
| |-ParmVarDecl 0x5575d02845f0 <col:196, col:202> col:202 used delay 's32_t':'int'
| `-CompoundStmt 0x5575d0284bf8 <line:67:1, line:82:1>
|   |-DoStmt 0x5575d0284888 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0284850 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d02847f0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0284868 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0284be8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:81:2, col:102>
|     `-CallExpr 0x5575d0284a88 <col:9, col:102> 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x5575d0284a70 <col:9> 'k_tid_t (*)(struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d02848a8 <col:9> 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)' Function 0x5575d0284010 'z_impl_k_thread_create' 'k_tid_t (struct k_thread *, k_thread_stack_t *, size_t, k_thread_entry_t, void *, void *, void *, int, u32_t, s32_t)'
|       |-ImplicitCastExpr 0x5575d0284af8 <col:32> 'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d02848c8 <col:32> 'struct k_thread *' lvalue ParmVar 0x5575d0284128 'new_thread' 'struct k_thread *'
|       |-ImplicitCastExpr 0x5575d0284b10 <col:44> 'k_thread_stack_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d02848e8 <col:44> 'k_thread_stack_t *' lvalue ParmVar 0x5575d02841a0 'stack' 'k_thread_stack_t *'
|       |-ImplicitCastExpr 0x5575d0284b28 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0284908 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x5575d0284218 'stack_size' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5575d0284b40 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0284928 <col:63> 'k_thread_entry_t':'void (*)(void *, void *, void *)' lvalue ParmVar 0x5575d0284290 'entry' 'k_thread_entry_t':'void (*)(void *, void *, void *)'
|       |-ImplicitCastExpr 0x5575d0284b58 <col:70> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0284948 <col:70> 'void *' lvalue ParmVar 0x5575d0284310 'p1' 'void *'
|       |-ImplicitCastExpr 0x5575d0284b70 <col:74> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0284968 <col:74> 'void *' lvalue ParmVar 0x5575d0284390 'p2' 'void *'
|       |-ImplicitCastExpr 0x5575d0284b88 <col:78> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0284988 <col:78> 'void *' lvalue ParmVar 0x5575d0284480 'p3' 'void *'
|       |-ImplicitCastExpr 0x5575d0284ba0 <col:82> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d02849a8 <col:82> 'int' lvalue ParmVar 0x5575d0284500 'prio' 'int'
|       |-ImplicitCastExpr 0x5575d0284bb8 <col:88> 'u32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d02849c8 <col:88> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d0284578 'options' 'u32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5575d0284bd0 <col:97> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d02849e8 <col:97> 's32_t':'int' lvalue ParmVar 0x5575d02845f0 'delay' 's32_t':'int'
|-FunctionDecl 0x5575d0284cb8 <line:85:1, col:37> col:14 used z_impl_k_sleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x5575d0284c28 <col:29, col:35> col:35 ms 's32_t':'int'
|-FunctionDecl 0x5575d0284e00 prev 0x5575d0233d70 <line:86:1, line:95:1> line:86:21 k_sleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5575d0284d70 <col:29, col:35> col:35 used ms 's32_t':'int'
| `-CompoundStmt 0x5575d02850a8 <line:87:1, line:95:1>
|   |-DoStmt 0x5575d0284f78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0284f40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0284ee0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0284f58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0285098 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:94:2, col:26>
|     `-CallExpr 0x5575d0285058 <col:9, col:26> 's32_t':'int'
|       |-ImplicitCastExpr 0x5575d0285040 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0284f98 <col:9> 's32_t (s32_t)' Function 0x5575d0284cb8 'z_impl_k_sleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x5575d0285080 <col:24> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0284fb8 <col:24> 's32_t':'int' lvalue ParmVar 0x5575d0284d70 'ms' 's32_t':'int'
|-FunctionDecl 0x5575d0285168 <line:98:1, col:38> col:14 used z_impl_k_usleep 's32_t (s32_t)' extern
| `-ParmVarDecl 0x5575d02850d8 <col:30, col:36> col:36 us 's32_t':'int'
|-FunctionDecl 0x5575d02852b0 prev 0x5575d0233ee8 <line:99:1, line:108:1> line:99:21 k_usleep 's32_t (s32_t)' static inline
| |-ParmVarDecl 0x5575d0285220 <col:30, col:36> col:36 used us 's32_t':'int'
| `-CompoundStmt 0x5575d0285518 <line:100:1, line:108:1>
|   |-DoStmt 0x5575d0285428 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d02853f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0285390 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0285408 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0285508 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:107:2, col:27>
|     `-CallExpr 0x5575d02854c8 <col:9, col:27> 's32_t':'int'
|       |-ImplicitCastExpr 0x5575d02854b0 <col:9> 's32_t (*)(s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0285448 <col:9> 's32_t (s32_t)' Function 0x5575d0285168 'z_impl_k_usleep' 's32_t (s32_t)'
|       `-ImplicitCastExpr 0x5575d02854f0 <col:25> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0285490 <col:25> 's32_t':'int' lvalue ParmVar 0x5575d0285220 'us' 's32_t':'int'
|-FunctionDecl 0x5575d02855d8 <line:111:1, col:50> col:13 used z_impl_k_busy_wait 'void (u32_t)' extern
| `-ParmVarDecl 0x5575d0285548 <col:32, col:38> col:38 usec_to_wait 'u32_t':'unsigned int'
|-FunctionDecl 0x5575d0285720 prev 0x5575d0234090 <line:112:1, line:122:1> line:112:20 k_busy_wait 'void (u32_t)' static inline
| |-ParmVarDecl 0x5575d0285690 <col:32, col:38> col:38 used usec_to_wait 'u32_t':'unsigned int'
| `-CompoundStmt 0x5575d0285988 <line:113:1, line:122:1>
|   |-DoStmt 0x5575d0285898 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0285860 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0285800 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0285878 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0285948 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:121:2, col:33> 'void'
|     |-ImplicitCastExpr 0x5575d0285930 <col:2> 'void (*)(u32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d02858b8 <col:2> 'void (u32_t)' Function 0x5575d02855d8 'z_impl_k_busy_wait' 'void (u32_t)'
|     `-ImplicitCastExpr 0x5575d0285970 <col:21> 'u32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5575d02858d8 <col:21> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d0285690 'usec_to_wait' 'u32_t':'unsigned int'
|-FunctionDecl 0x5575d02859c8 <line:125:1, col:28> col:13 used z_impl_k_yield 'void ()' extern
|-FunctionDecl 0x5575d0285a88 prev 0x5575d0234200 <line:126:1, line:136:1> line:126:20 k_yield 'void (void)' static inline
| `-CompoundStmt 0x5575d0285ca8 <line:127:1, line:136:1>
|   |-DoStmt 0x5575d0285bf8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0285bc0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0285b60 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0285bd8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0285c88 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:135:2, col:17> 'void'
|     `-ImplicitCastExpr 0x5575d0285c70 <col:2> 'void (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x5575d0285c18 <col:2> 'void ()' Function 0x5575d02859c8 'z_impl_k_yield' 'void ()'
|-FunctionDecl 0x5575d0285d68 <line:139:1, col:43> col:13 used z_impl_k_wakeup 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5575d0285cd8 <col:29, col:37> col:37 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0285eb0 prev 0x5575d02343e0 <line:140:1, line:150:1> line:140:20 k_wakeup 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d0285e20 <col:29, col:37> col:37 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5575d0286148 <line:141:1, line:150:1>
|   |-DoStmt 0x5575d0286028 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0285ff0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0285f90 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0286008 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0286108 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:149:2, col:24> 'void'
|     |-ImplicitCastExpr 0x5575d02860f0 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0286048 <col:2> 'void (k_tid_t)' Function 0x5575d0285d68 'z_impl_k_wakeup' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5575d0286130 <col:18> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0286068 <col:18> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d0285e20 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d02861f0 <line:153:1, col:37> col:16 used z_impl_k_current_get 'k_tid_t ()' extern
|-FunctionDecl 0x5575d02862b0 prev 0x5575d02345b0 <line:154:1, line:163:1> line:154:23 k_current_get 'k_tid_t (void)' static inline
| `-CompoundStmt 0x5575d0286518 <line:155:1, line:163:1>
|   |-DoStmt 0x5575d0286420 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d02863e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0286388 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0286400 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0286508 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:162:2, col:30>
|     `-CallExpr 0x5575d02864e8 <col:9, col:30> 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x5575d02864d0 <col:9> 'k_tid_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5575d0286440 <col:9> 'k_tid_t ()' Function 0x5575d02861f0 'z_impl_k_current_get' 'k_tid_t ()'
|-FunctionDecl 0x5575d02865d8 <line:166:1, col:49> col:13 used z_impl_k_thread_abort 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5575d0286548 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0286720 prev 0x5575d0234718 <line:167:1, line:177:1> line:167:20 k_thread_abort 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d0286690 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5575d0286950 <line:168:1, line:177:1>
|   |-DoStmt 0x5575d0286898 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0286860 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0286800 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0286878 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0286910 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:176:2, col:30> 'void'
|     |-ImplicitCastExpr 0x5575d02868f8 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d02868b8 <col:2> 'void (k_tid_t)' Function 0x5575d02865d8 'z_impl_k_thread_abort' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5575d0286938 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d02868d8 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d0286690 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0286a10 <line:180:1, col:49> col:13 used z_impl_k_thread_start 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5575d0286980 <col:35, col:43> col:43 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0286b58 prev 0x5575d0234888 <line:181:1, line:191:1> line:181:20 k_thread_start 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d0286ac8 <col:35, col:43> col:43 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5575d0286d88 <line:182:1, line:191:1>
|   |-DoStmt 0x5575d0286cd0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0286c98 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0286c38 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0286cb0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0286d48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:190:2, col:30> 'void'
|     |-ImplicitCastExpr 0x5575d0286d30 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0286cf0 <col:2> 'void (k_tid_t)' Function 0x5575d0286a10 'z_impl_k_thread_start' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5575d0286d70 <col:24> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0286d10 <col:24> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d0286ac8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0286e50 <line:194:1, col:55> col:12 used z_impl_k_thread_priority_get 'int (k_tid_t)' extern
| `-ParmVarDecl 0x5575d0286db8 <col:41, col:49> col:49 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0286fa0 prev 0x5575d0235138 <line:195:1, line:204:1> line:195:19 k_thread_priority_get 'int (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d0286f08 <col:41, col:49> col:49 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5575d0287248 <line:196:1, line:204:1>
|   |-DoStmt 0x5575d0287118 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d02870e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0287080 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d02870f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0287238 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:203:2, col:44>
|     `-CallExpr 0x5575d02871f8 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x5575d02871e0 <col:9> 'int (*)(k_tid_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0287138 <col:9> 'int (k_tid_t)' Function 0x5575d0286e50 'z_impl_k_thread_priority_get' 'int (k_tid_t)'
|       `-ImplicitCastExpr 0x5575d0287220 <col:38> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0287158 <col:38> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d0286f08 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0287390 <line:207:1, col:66> col:13 used z_impl_k_thread_priority_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x5575d0287278 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x5575d02872f8 <col:58, col:62> col:62 prio 'int'
|-FunctionDecl 0x5575d02875c8 prev 0x5575d02353b0 <line:208:1, line:218:1> line:208:20 k_thread_priority_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5575d02874b0 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5575d0287530 <col:58, col:62> col:62 used prio 'int'
| `-CompoundStmt 0x5575d02878a8 <line:209:1, line:218:1>
|   |-DoStmt 0x5575d0287748 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0287710 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d02876b0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0287728 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0287848 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:217:2, col:43> 'void'
|     |-ImplicitCastExpr 0x5575d0287830 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0287768 <col:2> 'void (k_tid_t, int)' Function 0x5575d0287390 'z_impl_k_thread_priority_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x5575d0287878 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d0287788 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d02874b0 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x5575d0287890 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5575d02877a8 <col:39> 'int' lvalue ParmVar 0x5575d0287530 'prio' 'int'
|-FunctionDecl 0x5575d02879f0 <line:221:1, col:70> col:13 used z_impl_k_thread_deadline_set 'void (k_tid_t, int)' extern
| |-ParmVarDecl 0x5575d02878d8 <col:42, col:50> col:50 thread 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x5575d0287958 <col:58, col:62> col:62 deadline 'int'
|-FunctionDecl 0x5575d0287bc8 <line:222:1, line:232:1> line:222:20 k_thread_deadline_set 'void (k_tid_t, int)' static inline
| |-ParmVarDecl 0x5575d0287ab0 <col:42, col:50> col:50 used thread 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5575d0287b30 <col:58, col:62> col:62 used deadline 'int'
| `-CompoundStmt 0x5575d0287e40 <line:223:1, line:232:1>
|   |-DoStmt 0x5575d0287d48 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0287d10 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0287cb0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0287d28 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0287de0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:231:2, col:47> 'void'
|     |-ImplicitCastExpr 0x5575d0287dc8 <col:2> 'void (*)(k_tid_t, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0287d68 <col:2> 'void (k_tid_t, int)' Function 0x5575d02879f0 'z_impl_k_thread_deadline_set' 'void (k_tid_t, int)'
|     |-ImplicitCastExpr 0x5575d0287e10 <col:31> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d0287d88 <col:31> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d0287ab0 'thread' 'k_tid_t':'struct k_thread *'
|     `-ImplicitCastExpr 0x5575d0287e28 <col:39> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0287da8 <col:39> 'int' lvalue ParmVar 0x5575d0287b30 'deadline' 'int'
|-FunctionDecl 0x5575d0287f00 <line:235:1, col:51> col:13 used z_impl_k_thread_suspend 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5575d0287e70 <col:37, col:45> col:45 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0288048 prev 0x5575d0235528 <line:236:1, line:246:1> line:236:20 k_thread_suspend 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d0287fb8 <col:37, col:45> col:45 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5575d0288278 <line:237:1, line:246:1>
|   |-DoStmt 0x5575d02881c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0288188 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0288128 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d02881a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0288238 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:245:2, col:32> 'void'
|     |-ImplicitCastExpr 0x5575d0288220 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d02881e0 <col:2> 'void (k_tid_t)' Function 0x5575d0287f00 'z_impl_k_thread_suspend' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5575d0288260 <col:26> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0288200 <col:26> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d0287fb8 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0288338 <line:249:1, col:50> col:13 used z_impl_k_thread_resume 'void (k_tid_t)' extern
| `-ParmVarDecl 0x5575d02882a8 <col:36, col:44> col:44 thread 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d02884c0 prev 0x5575d0235698 <line:250:1, line:260:1> line:250:20 k_thread_resume 'void (k_tid_t)' static inline
| |-ParmVarDecl 0x5575d02883f0 <col:36, col:44> col:44 used thread 'k_tid_t':'struct k_thread *'
| `-CompoundStmt 0x5575d02886f0 <line:251:1, line:260:1>
|   |-DoStmt 0x5575d0288638 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0288600 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d02885a0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0288618 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d02886b0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:259:2, col:31> 'void'
|     |-ImplicitCastExpr 0x5575d0288698 <col:2> 'void (*)(k_tid_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0288658 <col:2> 'void (k_tid_t)' Function 0x5575d0288338 'z_impl_k_thread_resume' 'void (k_tid_t)'
|     `-ImplicitCastExpr 0x5575d02886d8 <col:25> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0288678 <col:25> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d02883f0 'thread' 'k_tid_t':'struct k_thread *'
|-FunctionDecl 0x5575d0288768 <line:263:1, col:39> col:12 used z_impl_k_is_preempt_thread 'int ()' extern
|-FunctionDecl 0x5575d0288830 prev 0x5575d0236db8 <line:264:1, line:273:1> line:264:19 k_is_preempt_thread 'int (void)' static inline
| `-CompoundStmt 0x5575d0288a58 <line:265:1, line:273:1>
|   |-DoStmt 0x5575d02889a0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0288968 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0288908 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0288980 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0288a48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:272:2, col:36>
|     `-CallExpr 0x5575d0288a28 <col:9, col:36> 'int'
|       `-ImplicitCastExpr 0x5575d0288a10 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5575d02889c0 <col:9> 'int ()' Function 0x5575d0288768 'z_impl_k_is_preempt_thread' 'int ()'
|-FunctionDecl 0x5575d0288b20 <line:276:1, col:57> col:13 used z_impl_k_thread_custom_data_set 'void (void *)' extern
| `-ParmVarDecl 0x5575d0288a90 <col:45, col:52> col:52 value 'void *'
|-FunctionDecl 0x5575d0288c70 prev 0x5575d02374f0 <line:277:1, line:287:1> line:277:20 k_thread_custom_data_set 'void (void *)' static inline
| |-ParmVarDecl 0x5575d0288be0 <col:45, col:52> col:52 used value 'void *'
| `-CompoundStmt 0x5575d0288ea0 <line:278:1, line:287:1>
|   |-DoStmt 0x5575d0288de8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0288db0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0288d50 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0288dc8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0288e60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:286:2, col:39> 'void'
|     |-ImplicitCastExpr 0x5575d0288e48 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0288e08 <col:2> 'void (void *)' Function 0x5575d0288b20 'z_impl_k_thread_custom_data_set' 'void (void *)'
|     `-ImplicitCastExpr 0x5575d0288e88 <col:34> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0288e28 <col:34> 'void *' lvalue ParmVar 0x5575d0288be0 'value' 'void *'
|-FunctionDecl 0x5575d0288f18 <line:290:1, col:47> col:15 used z_impl_k_thread_custom_data_get 'void *()' extern
|-FunctionDecl 0x5575d0288fe0 prev 0x5575d0237698 <line:291:1, line:300:1> line:291:22 k_thread_custom_data_get 'void *(void)' static inline
| `-CompoundStmt 0x5575d0289208 <line:292:1, line:300:1>
|   |-DoStmt 0x5575d0289150 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0289118 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d02890b8 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0289130 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d02891f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:299:2, col:41>
|     `-CallExpr 0x5575d02891d8 <col:9, col:41> 'void *'
|       `-ImplicitCastExpr 0x5575d02891c0 <col:9> 'void *(*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5575d0289170 <col:9> 'void *()' Function 0x5575d0288f18 'z_impl_k_thread_custom_data_get' 'void *()'
|-FunctionDecl 0x5575d0289358 <line:303:1, col:74> col:12 used z_impl_k_thread_name_set 'int (k_tid_t, const char *)' extern
| |-ParmVarDecl 0x5575d0289238 <col:37, col:45> col:45 thread_id 'k_tid_t':'struct k_thread *'
| `-ParmVarDecl 0x5575d02892b8 <col:56, col:69> col:69 value 'const char *'
|-FunctionDecl 0x5575d0289570 prev 0x5575d0237918 <line:304:1, line:313:1> line:304:19 k_thread_name_set 'int (k_tid_t, const char *)' static inline
| |-ParmVarDecl 0x5575d0289418 <col:37, col:45> col:45 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5575d02894d0 <col:56, col:69> col:69 used value 'const char *'
| `-CompoundStmt 0x5575d0289858 <line:305:1, line:313:1>
|   |-DoStmt 0x5575d02896f0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d02896b8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0289658 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d02896d0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0289848 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:312:2, col:50>
|     `-CallExpr 0x5575d02897e8 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5575d02897d0 <col:9> 'int (*)(k_tid_t, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0289710 <col:9> 'int (k_tid_t, const char *)' Function 0x5575d0289358 'z_impl_k_thread_name_set' 'int (k_tid_t, const char *)'
|       |-ImplicitCastExpr 0x5575d0289818 <col:34> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0289730 <col:34> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d0289418 'thread_id' 'k_tid_t':'struct k_thread *'
|       `-ImplicitCastExpr 0x5575d0289830 <col:45> 'const char *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0289750 <col:45> 'const char *' lvalue ParmVar 0x5575d02894d0 'value' 'const char *'
|-FunctionDecl 0x5575d0289a28 <line:316:1, col:80> col:12 used z_impl_k_thread_name_copy 'int (k_tid_t, char *, size_t)' extern
| |-ParmVarDecl 0x5575d0289888 <col:38, col:46> col:46 thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5575d0289908 <col:57, col:64> col:64 buf 'char *'
| `-ParmVarDecl 0x5575d0289980 <col:69, col:76> col:76 size 'size_t':'unsigned long'
|-FunctionDecl 0x5575d0289c90 prev 0x5575d0238698 <line:317:1, line:326:1> line:317:19 k_thread_name_copy 'int (k_tid_t, char *, size_t)' static inline
| |-ParmVarDecl 0x5575d0289af0 <col:38, col:46> col:46 used thread_id 'k_tid_t':'struct k_thread *'
| |-ParmVarDecl 0x5575d0289b70 <col:57, col:64> col:64 used buf 'char *'
| |-ParmVarDecl 0x5575d0289be8 <col:69, col:76> col:76 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x5575d0289fc8 <line:318:1, line:326:1>
|   |-DoStmt 0x5575d0289e18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0289de0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0289d80 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0289df8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0289fb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:325:2, col:55>
|     `-CallExpr 0x5575d0289f38 <col:9, col:55> 'int'
|       |-ImplicitCastExpr 0x5575d0289f20 <col:9> 'int (*)(k_tid_t, char *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0289e38 <col:9> 'int (k_tid_t, char *, size_t)' Function 0x5575d0289a28 'z_impl_k_thread_name_copy' 'int (k_tid_t, char *, size_t)'
|       |-ImplicitCastExpr 0x5575d0289f70 <col:35> 'k_tid_t':'struct k_thread *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0289e58 <col:35> 'k_tid_t':'struct k_thread *' lvalue ParmVar 0x5575d0289af0 'thread_id' 'k_tid_t':'struct k_thread *'
|       |-ImplicitCastExpr 0x5575d0289f88 <col:46> 'char *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0289e78 <col:46> 'char *' lvalue ParmVar 0x5575d0289b70 'buf' 'char *'
|       `-ImplicitCastExpr 0x5575d0289fa0 <col:51> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0289e98 <col:51> 'size_t':'unsigned long' lvalue ParmVar 0x5575d0289be8 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x5575d028a1a0 <line:329:1, col:86> col:13 used z_impl_k_timer_start 'void (struct k_timer *, s32_t, s32_t)' extern
| |-ParmVarDecl 0x5575d028a010 <col:34, col:51> col:51 timer 'struct k_timer *'
| |-ParmVarDecl 0x5575d028a088 <col:58, col:64> col:64 duration 's32_t':'int'
| `-ParmVarDecl 0x5575d028a100 <col:74, col:80> col:80 period 's32_t':'int'
|-FunctionDecl 0x5575d028a410 prev 0x5575d023b670 <line:330:1, line:340:1> line:330:20 k_timer_start 'void (struct k_timer *, s32_t, s32_t)' static inline
| |-ParmVarDecl 0x5575d028a280 <col:34, col:51> col:51 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5575d028a2f8 <col:58, col:64> col:64 used duration 's32_t':'int'
| |-ParmVarDecl 0x5575d028a370 <col:74, col:80> col:80 used period 's32_t':'int'
| `-CompoundStmt 0x5575d028af58 <line:331:1, line:340:1>
|   |-DoStmt 0x5575d028adc0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028ad88 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028ad28 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028ada0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d028aed8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:339:2, col:46> 'void'
|     |-ImplicitCastExpr 0x5575d028aec0 <col:2> 'void (*)(struct k_timer *, s32_t, s32_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d028ade0 <col:2> 'void (struct k_timer *, s32_t, s32_t)' Function 0x5575d028a1a0 'z_impl_k_timer_start' 'void (struct k_timer *, s32_t, s32_t)'
|     |-ImplicitCastExpr 0x5575d028af10 <col:23> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d028ae00 <col:23> 'struct k_timer *' lvalue ParmVar 0x5575d028a280 'timer' 'struct k_timer *'
|     |-ImplicitCastExpr 0x5575d028af28 <col:30> 's32_t':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d028ae20 <col:30> 's32_t':'int' lvalue ParmVar 0x5575d028a2f8 'duration' 's32_t':'int'
|     `-ImplicitCastExpr 0x5575d028af40 <col:40> 's32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5575d028ae40 <col:40> 's32_t':'int' lvalue ParmVar 0x5575d028a370 'period' 's32_t':'int'
|-FunctionDecl 0x5575d028b030 <line:343:1, col:55> col:13 used z_impl_k_timer_stop 'void (struct k_timer *)' extern
| `-ParmVarDecl 0x5575d028afa0 <col:33, col:50> col:50 timer 'struct k_timer *'
|-FunctionDecl 0x5575d028b190 prev 0x5575d023b810 <line:344:1, line:354:1> line:344:20 k_timer_stop 'void (struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d028b100 <col:33, col:50> col:50 used timer 'struct k_timer *'
| `-CompoundStmt 0x5575d028b3f8 <line:345:1, line:354:1>
|   |-DoStmt 0x5575d028b308 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028b2d0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028b270 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028b2e8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d028b3b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:353:2, col:27> 'void'
|     |-ImplicitCastExpr 0x5575d028b3a0 <col:2> 'void (*)(struct k_timer *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d028b328 <col:2> 'void (struct k_timer *)' Function 0x5575d028b030 'z_impl_k_timer_stop' 'void (struct k_timer *)'
|     `-ImplicitCastExpr 0x5575d028b3e0 <col:22> 'struct k_timer *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d028b348 <col:22> 'struct k_timer *' lvalue ParmVar 0x5575d028b100 'timer' 'struct k_timer *'
|-FunctionDecl 0x5575d028b4d0 <line:357:1, col:62> col:14 used z_impl_k_timer_status_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5575d028b440 <col:40, col:57> col:57 timer 'struct k_timer *'
|-FunctionDecl 0x5575d028b630 prev 0x5575d023ba20 <line:358:1, line:367:1> line:358:21 k_timer_status_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d028b5a0 <col:40, col:57> col:57 used timer 'struct k_timer *'
| `-CompoundStmt 0x5575d028b8d8 <line:359:1, line:367:1>
|   |-DoStmt 0x5575d028b7a8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028b770 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028b710 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028b788 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028b8c8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:366:2, col:40>
|     `-CallExpr 0x5575d028b888 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5575d028b870 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028b7c8 <col:9> 'u32_t (struct k_timer *)' Function 0x5575d028b4d0 'z_impl_k_timer_status_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5575d028b8b0 <col:35> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028b7e8 <col:35> 'struct k_timer *' lvalue ParmVar 0x5575d028b5a0 'timer' 'struct k_timer *'
|-FunctionDecl 0x5575d028b9b0 <line:370:1, col:63> col:14 used z_impl_k_timer_status_sync 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5575d028b920 <col:41, col:58> col:58 timer 'struct k_timer *'
|-FunctionDecl 0x5575d028bb10 prev 0x5575d023bbb0 <line:371:1, line:380:1> line:371:21 k_timer_status_sync 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d028ba80 <col:41, col:58> col:58 used timer 'struct k_timer *'
| `-CompoundStmt 0x5575d028bd68 <line:372:1, line:380:1>
|   |-DoStmt 0x5575d028bc88 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028bc50 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028bbf0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028bc68 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028bd58 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:379:2, col:41>
|     `-CallExpr 0x5575d028bd18 <col:9, col:41> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5575d028bd00 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028bca8 <col:9> 'u32_t (struct k_timer *)' Function 0x5575d028b9b0 'z_impl_k_timer_status_sync' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5575d028bd40 <col:36> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028bcc8 <col:36> 'struct k_timer *' lvalue ParmVar 0x5575d028ba80 'timer' 'struct k_timer *'
|-FunctionDecl 0x5575d028be40 prev 0x5575d023c210 <line:383:1, col:65> col:14 used z_impl_k_timer_remaining_get 'u32_t (struct k_timer *)' extern
| `-ParmVarDecl 0x5575d028bdb0 <col:43, col:60> col:60 timer 'struct k_timer *'
|-FunctionDecl 0x5575d028bfa0 prev 0x5575d023c0b0 <line:384:1, line:393:1> line:384:21 k_timer_remaining_get 'u32_t (struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d028bf10 <col:43, col:60> col:60 used timer 'struct k_timer *'
| `-CompoundStmt 0x5575d028c1e0 <line:385:1, line:393:1>
|   |-DoStmt 0x5575d028c118 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028c0e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028c080 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028c0f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028c1d0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:392:2, col:43>
|     `-CallExpr 0x5575d028c190 <col:9, col:43> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5575d028c178 <col:9> 'u32_t (*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028c138 <col:9> 'u32_t (struct k_timer *)' Function 0x5575d028be40 'z_impl_k_timer_remaining_get' 'u32_t (struct k_timer *)'
|       `-ImplicitCastExpr 0x5575d028c1b8 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028c158 <col:38> 'struct k_timer *' lvalue ParmVar 0x5575d028bf10 'timer' 'struct k_timer *'
|-FunctionDecl 0x5575d028c340 prev 0x5575d023cb48 <line:396:1, col:82> col:13 used z_impl_k_timer_user_data_set 'void (struct k_timer *, void *)' extern
| |-ParmVarDecl 0x5575d028c228 <col:42, col:59> col:59 timer 'struct k_timer *'
| `-ParmVarDecl 0x5575d028c2a8 <col:66, col:73> col:73 user_data 'void *'
|-FunctionDecl 0x5575d028c530 prev 0x5575d023c930 <line:397:1, line:407:1> line:397:20 k_timer_user_data_set 'void (struct k_timer *, void *)' static inline
| |-ParmVarDecl 0x5575d028c418 <col:42, col:59> col:59 used timer 'struct k_timer *'
| |-ParmVarDecl 0x5575d028c498 <col:66, col:73> col:73 used user_data 'void *'
| `-CompoundStmt 0x5575d028c808 <line:398:1, line:407:1>
|   |-DoStmt 0x5575d028c6b0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028c678 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028c618 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028c690 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d028c7a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:406:2, col:47> 'void'
|     |-ImplicitCastExpr 0x5575d028c790 <col:2> 'void (*)(struct k_timer *, void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d028c6d0 <col:2> 'void (struct k_timer *, void *)' Function 0x5575d028c340 'z_impl_k_timer_user_data_set' 'void (struct k_timer *, void *)'
|     |-ImplicitCastExpr 0x5575d028c7d8 <col:31> 'struct k_timer *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d028c6f0 <col:31> 'struct k_timer *' lvalue ParmVar 0x5575d028c418 'timer' 'struct k_timer *'
|     `-ImplicitCastExpr 0x5575d028c7f0 <col:38> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d028c710 <col:38> 'void *' lvalue ParmVar 0x5575d028c498 'user_data' 'void *'
|-FunctionDecl 0x5575d028c8e8 prev 0x5575d023d4f0 <line:410:1, col:66> col:15 used z_impl_k_timer_user_data_get 'void *(struct k_timer *)' extern
| `-ParmVarDecl 0x5575d028c850 <col:44, col:61> col:61 timer 'struct k_timer *'
|-FunctionDecl 0x5575d028ca50 prev 0x5575d023ce38 <line:411:1, line:420:1> line:411:22 k_timer_user_data_get 'void *(struct k_timer *)' static inline
| |-ParmVarDecl 0x5575d028c9b8 <col:44, col:61> col:61 used timer 'struct k_timer *'
| `-CompoundStmt 0x5575d028cd10 <line:412:1, line:420:1>
|   |-DoStmt 0x5575d028cbc8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028cb90 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028cb30 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028cba8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028cce8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:419:2, col:43>
|     `-CallExpr 0x5575d028cca8 <col:9, col:43> 'void *'
|       |-ImplicitCastExpr 0x5575d028cc90 <col:9> 'void *(*)(struct k_timer *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028cbe8 <col:9> 'void *(struct k_timer *)' Function 0x5575d028c8e8 'z_impl_k_timer_user_data_get' 'void *(struct k_timer *)'
|       `-ImplicitCastExpr 0x5575d028ccd0 <col:38> 'struct k_timer *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028cc08 <col:38> 'struct k_timer *' lvalue ParmVar 0x5575d028c9b8 'timer' 'struct k_timer *'
|-FunctionDecl 0x5575d028cdb0 <line:423:1, col:34> col:14 used z_impl_k_uptime_get 's64_t ()' extern
|-FunctionDecl 0x5575d028ce70 prev 0x5575d023d768 <line:424:1, line:435:1> line:424:21 used k_uptime_get 's64_t (void)' static inline
| `-CompoundStmt 0x5575d028d0c8 <line:425:1, line:435:1>
|   |-DoStmt 0x5575d028cfe0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028cfa8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028cf48 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028cfc0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028d0b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:434:2, col:29>
|     `-CallExpr 0x5575d028d098 <col:9, col:29> 's64_t':'long long'
|       `-ImplicitCastExpr 0x5575d028d080 <col:9> 's64_t (*)()' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5575d028d000 <col:9> 's64_t ()' Function 0x5575d028cdb0 'z_impl_k_uptime_get' 's64_t ()'
|-FunctionDecl 0x5575d028d1a0 <line:438:1, col:55> col:13 used z_impl_k_queue_init 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x5575d028d110 <col:33, col:50> col:50 queue 'struct k_queue *'
|-FunctionDecl 0x5575d028d300 prev 0x5575d02406e0 <line:439:1, line:449:1> line:439:20 k_queue_init 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d028d270 <col:33, col:50> col:50 used queue 'struct k_queue *'
| `-CompoundStmt 0x5575d028d598 <line:440:1, line:449:1>
|   |-DoStmt 0x5575d028d478 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028d440 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028d3e0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028d458 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d028d558 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:448:2, col:27> 'void'
|     |-ImplicitCastExpr 0x5575d028d540 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d028d498 <col:2> 'void (struct k_queue *)' Function 0x5575d028d1a0 'z_impl_k_queue_init' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x5575d028d580 <col:22> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d028d4b8 <col:22> 'struct k_queue *' lvalue ParmVar 0x5575d028d270 'queue' 'struct k_queue *'
|-FunctionDecl 0x5575d028d670 <line:452:1, col:62> col:13 used z_impl_k_queue_cancel_wait 'void (struct k_queue *)' extern
| `-ParmVarDecl 0x5575d028d5e0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5575d028d7d0 prev 0x5575d0241160 <line:453:1, line:463:1> line:453:20 k_queue_cancel_wait 'void (struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d028d740 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5575d028da00 <line:454:1, line:463:1>
|   |-DoStmt 0x5575d028d948 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028d910 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028d8b0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028d928 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d028d9c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:462:2, col:34> 'void'
|     |-ImplicitCastExpr 0x5575d028d9a8 <col:2> 'void (*)(struct k_queue *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d028d968 <col:2> 'void (struct k_queue *)' Function 0x5575d028d670 'z_impl_k_queue_cancel_wait' 'void (struct k_queue *)'
|     `-ImplicitCastExpr 0x5575d028d9e8 <col:29> 'struct k_queue *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d028d988 <col:29> 'struct k_queue *' lvalue ParmVar 0x5575d028d740 'queue' 'struct k_queue *'
|-FunctionDecl 0x5575d028db60 <line:466:1, col:77> col:14 used z_impl_k_queue_alloc_append 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5575d028da48 <col:42, col:59> col:59 queue 'struct k_queue *'
| `-ParmVarDecl 0x5575d028dac8 <col:66, col:73> col:73 data 'void *'
|-FunctionDecl 0x5575d028ddb8 prev 0x5575d02416a0 <line:467:1, line:476:1> line:467:21 used k_queue_alloc_append 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5575d028dc38 <col:42, col:59> col:59 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d028dd20 <col:66, col:73> col:73 used data 'void *'
| `-CompoundStmt 0x5575d028e040 <line:468:1, line:476:1>
|   |-DoStmt 0x5575d028df38 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028df00 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028dea0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028df18 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028e030 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:475:2, col:48>
|     `-CallExpr 0x5575d028dfd0 <col:9, col:48> 's32_t':'int'
|       |-ImplicitCastExpr 0x5575d028dfb8 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028df58 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5575d028db60 'z_impl_k_queue_alloc_append' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x5575d028e000 <col:37> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d028df78 <col:37> 'struct k_queue *' lvalue ParmVar 0x5575d028dc38 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5575d028e018 <col:44> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028df98 <col:44> 'void *' lvalue ParmVar 0x5575d028dd20 'data' 'void *'
|-FunctionDecl 0x5575d028e1a0 <line:479:1, col:78> col:14 used z_impl_k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' extern
| |-ParmVarDecl 0x5575d028e088 <col:43, col:60> col:60 queue 'struct k_queue *'
| `-ParmVarDecl 0x5575d028e108 <col:67, col:74> col:74 data 'void *'
|-FunctionDecl 0x5575d028e390 prev 0x5575d0241ad8 <line:480:1, line:489:1> line:480:21 k_queue_alloc_prepend 's32_t (struct k_queue *, void *)' static inline
| |-ParmVarDecl 0x5575d028e278 <col:43, col:60> col:60 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d028e2f8 <col:67, col:74> col:74 used data 'void *'
| `-CompoundStmt 0x5575d028e618 <line:481:1, line:489:1>
|   |-DoStmt 0x5575d028e510 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028e4d8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028e478 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028e4f0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028e608 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:488:2, col:49>
|     `-CallExpr 0x5575d028e5a8 <col:9, col:49> 's32_t':'int'
|       |-ImplicitCastExpr 0x5575d028e590 <col:9> 's32_t (*)(struct k_queue *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028e530 <col:9> 's32_t (struct k_queue *, void *)' Function 0x5575d028e1a0 'z_impl_k_queue_alloc_prepend' 's32_t (struct k_queue *, void *)'
|       |-ImplicitCastExpr 0x5575d028e5d8 <col:38> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d028e550 <col:38> 'struct k_queue *' lvalue ParmVar 0x5575d028e278 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5575d028e5f0 <col:45> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028e570 <col:45> 'void *' lvalue ParmVar 0x5575d028e2f8 'data' 'void *'
|-FunctionDecl 0x5575d028e778 <line:492:1, col:71> col:15 used z_impl_k_queue_get 'void *(struct k_queue *, s32_t)' extern
| |-ParmVarDecl 0x5575d028e660 <col:34, col:51> col:51 queue 'struct k_queue *'
| `-ParmVarDecl 0x5575d028e6d8 <col:58, col:64> col:64 timeout 's32_t':'int'
|-FunctionDecl 0x5575d028e968 prev 0x5575d0242878 <line:493:1, line:502:1> line:493:22 k_queue_get 'void *(struct k_queue *, s32_t)' static inline
| |-ParmVarDecl 0x5575d028e850 <col:34, col:51> col:51 used queue 'struct k_queue *'
| |-ParmVarDecl 0x5575d028e8c8 <col:58, col:64> col:64 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d028ec58 <line:494:1, line:502:1>
|   |-DoStmt 0x5575d028eae8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028eab0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028ea50 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028eac8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028ec48 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:501:2, col:42>
|     `-CallExpr 0x5575d028ebe8 <col:9, col:42> 'void *'
|       |-ImplicitCastExpr 0x5575d028ebd0 <col:9> 'void *(*)(struct k_queue *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028eb08 <col:9> 'void *(struct k_queue *, s32_t)' Function 0x5575d028e778 'z_impl_k_queue_get' 'void *(struct k_queue *, s32_t)'
|       |-ImplicitCastExpr 0x5575d028ec18 <col:28> 'struct k_queue *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d028eb28 <col:28> 'struct k_queue *' lvalue ParmVar 0x5575d028e850 'queue' 'struct k_queue *'
|       `-ImplicitCastExpr 0x5575d028ec30 <col:35> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028eb48 <col:35> 's32_t':'int' lvalue ParmVar 0x5575d028e8c8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d028ed60 prev 0x5575d0243fa0 <line:505:1, col:58> col:12 used z_impl_k_queue_is_empty 'int (struct k_queue *)' extern
| `-ParmVarDecl 0x5575d028eca0 <col:36, col:53> col:53 queue 'struct k_queue *'
|-FunctionDecl 0x5575d028eec8 prev 0x5575d0243e38 <line:506:1, line:515:1> line:506:19 k_queue_is_empty 'int (struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d028ee30 <col:36, col:53> col:53 used queue 'struct k_queue *'
| `-CompoundStmt 0x5575d028f168 <line:507:1, line:515:1>
|   |-DoStmt 0x5575d028f040 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028f008 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028efa8 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028f020 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028f158 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:514:2, col:38>
|     `-CallExpr 0x5575d028f118 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x5575d028f100 <col:9> 'int (*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028f060 <col:9> 'int (struct k_queue *)' Function 0x5575d028ed60 'z_impl_k_queue_is_empty' 'int (struct k_queue *)'
|       `-ImplicitCastExpr 0x5575d028f140 <col:33> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028f080 <col:33> 'struct k_queue *' lvalue ParmVar 0x5575d028ee30 'queue' 'struct k_queue *'
|-FunctionDecl 0x5575d028f248 prev 0x5575d0244460 <line:518:1, col:62> col:15 used z_impl_k_queue_peek_head 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x5575d028f1b0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5575d028f3b0 prev 0x5575d02442f8 <line:519:1, line:528:1> line:519:22 k_queue_peek_head 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d028f318 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5575d028f658 <line:520:1, line:528:1>
|   |-DoStmt 0x5575d028f528 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028f4f0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028f490 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028f508 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028f648 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:527:2, col:39>
|     `-CallExpr 0x5575d028f608 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x5575d028f5f0 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028f548 <col:9> 'void *(struct k_queue *)' Function 0x5575d028f248 'z_impl_k_queue_peek_head' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x5575d028f630 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028f568 <col:34> 'struct k_queue *' lvalue ParmVar 0x5575d028f318 'queue' 'struct k_queue *'
|-FunctionDecl 0x5575d028f738 prev 0x5575d02452d8 <line:531:1, col:62> col:15 used z_impl_k_queue_peek_tail 'void *(struct k_queue *)' extern
| `-ParmVarDecl 0x5575d028f6a0 <col:40, col:57> col:57 queue 'struct k_queue *'
|-FunctionDecl 0x5575d028f8a0 prev 0x5575d0245170 <line:532:1, line:541:1> line:532:22 k_queue_peek_tail 'void *(struct k_queue *)' static inline
| |-ParmVarDecl 0x5575d028f808 <col:40, col:57> col:57 used queue 'struct k_queue *'
| `-CompoundStmt 0x5575d028fae0 <line:533:1, line:541:1>
|   |-DoStmt 0x5575d028fa18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d028f9e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d028f980 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d028f9f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d028fad0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:540:2, col:39>
|     `-CallExpr 0x5575d028fa90 <col:9, col:39> 'void *'
|       |-ImplicitCastExpr 0x5575d028fa78 <col:9> 'void *(*)(struct k_queue *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d028fa38 <col:9> 'void *(struct k_queue *)' Function 0x5575d028f738 'z_impl_k_queue_peek_tail' 'void *(struct k_queue *)'
|       `-ImplicitCastExpr 0x5575d028fab8 <col:34> 'struct k_queue *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d028fa58 <col:34> 'struct k_queue *' lvalue ParmVar 0x5575d028f808 'queue' 'struct k_queue *'
|-FunctionDecl 0x5575d028fe18 <line:544:1, col:83> col:12 used z_impl_k_futex_wait 'int (struct k_futex *, int, s32_t)' extern
| |-ParmVarDecl 0x5575d028fbc8 <col:32, col:49> col:49 futex 'struct k_futex *'
| |-ParmVarDecl 0x5575d028fc48 <col:56, col:60> col:60 expected 'int'
| `-ParmVarDecl 0x5575d028fcc0 <col:70, col:76> col:76 timeout 's32_t':'int'
|-FunctionDecl 0x5575d0290098 <line:545:1, line:554:1> line:545:19 k_futex_wait 'int (struct k_futex *, int, s32_t)' static inline
| |-ParmVarDecl 0x5575d028fef8 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x5575d028ff78 <col:56, col:60> col:60 used expected 'int'
| |-ParmVarDecl 0x5575d028fff0 <col:70, col:76> col:76 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d02903c8 <line:546:1, line:554:1>
|   |-DoStmt 0x5575d0290220 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d02901e8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0290188 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0290200 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d02903b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:553:2, col:53>
|     `-CallExpr 0x5575d0290338 <col:9, col:53> 'int'
|       |-ImplicitCastExpr 0x5575d0290320 <col:9> 'int (*)(struct k_futex *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0290240 <col:9> 'int (struct k_futex *, int, s32_t)' Function 0x5575d028fe18 'z_impl_k_futex_wait' 'int (struct k_futex *, int, s32_t)'
|       |-ImplicitCastExpr 0x5575d0290370 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0290260 <col:29> 'struct k_futex *' lvalue ParmVar 0x5575d028fef8 'futex' 'struct k_futex *'
|       |-ImplicitCastExpr 0x5575d0290388 <col:36> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0290280 <col:36> 'int' lvalue ParmVar 0x5575d028ff78 'expected' 'int'
|       `-ImplicitCastExpr 0x5575d02903a0 <col:46> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d02902a0 <col:46> 's32_t':'int' lvalue ParmVar 0x5575d028fff0 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d02905a8 <line:557:1, col:69> col:12 used z_impl_k_futex_wake 'int (struct k_futex *, bool)' extern
| |-ParmVarDecl 0x5575d0290410 <col:32, col:49> col:49 futex 'struct k_futex *'
| `-ParmVarDecl 0x5575d0290488 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:557:61> col:61 wake_all 'bool'
|-FunctionDecl 0x5575d0290798 <line:558:1, line:567:1> line:558:19 k_futex_wake 'int (struct k_futex *, bool)' static inline
| |-ParmVarDecl 0x5575d0290680 <col:32, col:49> col:49 used futex 'struct k_futex *'
| |-ParmVarDecl 0x5575d02906f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:13:16, /vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:558:61> col:61 used wake_all 'bool'
| `-CompoundStmt 0x5575d0290a88 <line:559:1, line:567:1>
|   |-DoStmt 0x5575d0290918 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d02908e0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0290880 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d02908f8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0290a78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:566:2, col:44>
|     `-CallExpr 0x5575d0290a18 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x5575d0290a00 <col:9> 'int (*)(struct k_futex *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0290938 <col:9> 'int (struct k_futex *, bool)' Function 0x5575d02905a8 'z_impl_k_futex_wake' 'int (struct k_futex *, bool)'
|       |-ImplicitCastExpr 0x5575d0290a48 <col:29> 'struct k_futex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0290958 <col:29> 'struct k_futex *' lvalue ParmVar 0x5575d0290680 'futex' 'struct k_futex *'
|       `-ImplicitCastExpr 0x5575d0290a60 <col:36> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0290978 <col:36> 'bool' lvalue ParmVar 0x5575d02906f8 'wake_all' 'bool'
|-FunctionDecl 0x5575d0290be0 <line:570:1, col:81> col:14 used z_impl_k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' extern
| |-ParmVarDecl 0x5575d0290ad0 <col:40, col:57> col:57 stack 'struct k_stack *'
| `-ParmVarDecl 0x5575d0290b48 <col:64, col:70> col:70 num_entries 'u32_t':'unsigned int'
|-FunctionDecl 0x5575d0291df8 prev 0x5575d01375c0 <line:571:1, line:580:1> line:571:21 k_stack_alloc_init 's32_t (struct k_stack *, u32_t)' static inline
| |-ParmVarDecl 0x5575d0290cb8 <col:40, col:57> col:57 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5575d0291d60 <col:64, col:70> col:70 used num_entries 'u32_t':'unsigned int'
| `-CompoundStmt 0x5575d02920e8 <line:572:1, line:580:1>
|   |-DoStmt 0x5575d0291f78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0291f40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0291ee0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0291f58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d02920d8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:579:2, col:53>
|     `-CallExpr 0x5575d0292078 <col:9, col:53> 's32_t':'int'
|       |-ImplicitCastExpr 0x5575d0292060 <col:9> 's32_t (*)(struct k_stack *, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0291f98 <col:9> 's32_t (struct k_stack *, u32_t)' Function 0x5575d0290be0 'z_impl_k_stack_alloc_init' 's32_t (struct k_stack *, u32_t)'
|       |-ImplicitCastExpr 0x5575d02920a8 <col:35> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0291fb8 <col:35> 'struct k_stack *' lvalue ParmVar 0x5575d0290cb8 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x5575d02920c0 <col:42> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0291fd8 <col:42> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d0291d60 'num_entries' 'u32_t':'unsigned int'
|-FunctionDecl 0x5575d0292248 <line:583:1, col:73> col:12 used z_impl_k_stack_push 'int (struct k_stack *, stack_data_t)' extern
| |-ParmVarDecl 0x5575d0292130 <col:32, col:49> col:49 stack 'struct k_stack *'
| `-ParmVarDecl 0x5575d02921a8 <col:56, col:69> col:69 data 'stack_data_t':'unsigned long'
|-FunctionDecl 0x5575d0292438 prev 0x5575d0137a68 <line:584:1, line:593:1> line:584:19 k_stack_push 'int (struct k_stack *, stack_data_t)' static inline
| |-ParmVarDecl 0x5575d0292320 <col:32, col:49> col:49 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5575d0292398 <col:56, col:69> col:69 used data 'stack_data_t':'unsigned long'
| `-CompoundStmt 0x5575d0292728 <line:585:1, line:593:1>
|   |-DoStmt 0x5575d02925b8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0292580 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0292520 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0292598 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0292718 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:592:2, col:40>
|     `-CallExpr 0x5575d02926b8 <col:9, col:40> 'int'
|       |-ImplicitCastExpr 0x5575d02926a0 <col:9> 'int (*)(struct k_stack *, stack_data_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d02925d8 <col:9> 'int (struct k_stack *, stack_data_t)' Function 0x5575d0292248 'z_impl_k_stack_push' 'int (struct k_stack *, stack_data_t)'
|       |-ImplicitCastExpr 0x5575d02926e8 <col:29> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d02925f8 <col:29> 'struct k_stack *' lvalue ParmVar 0x5575d0292320 'stack' 'struct k_stack *'
|       `-ImplicitCastExpr 0x5575d0292700 <col:36> 'stack_data_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0292618 <col:36> 'stack_data_t':'unsigned long' lvalue ParmVar 0x5575d0292398 'data' 'stack_data_t':'unsigned long'
|-FunctionDecl 0x5575d0292908 <line:596:1, col:89> col:12 used z_impl_k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' extern
| |-ParmVarDecl 0x5575d0292770 <col:31, col:48> col:48 stack 'struct k_stack *'
| |-ParmVarDecl 0x5575d02927e8 <col:55, col:70> col:70 data 'stack_data_t *'
| `-ParmVarDecl 0x5575d0292860 <col:76, col:82> col:82 timeout 's32_t':'int'
|-FunctionDecl 0x5575d0292b80 prev 0x5575d0137da8 <line:597:1, line:606:1> line:597:19 k_stack_pop 'int (struct k_stack *, stack_data_t *, s32_t)' static inline
| |-ParmVarDecl 0x5575d02929e8 <col:31, col:48> col:48 used stack 'struct k_stack *'
| |-ParmVarDecl 0x5575d0292a60 <col:55, col:70> col:70 used data 'stack_data_t *'
| |-ParmVarDecl 0x5575d0292ad8 <col:76, col:82> col:82 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d0292ed8 <line:598:1, line:606:1>
|   |-DoStmt 0x5575d0292d08 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0292cd0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0292c70 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0292ce8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0292ec8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:605:2, col:48>
|     `-CallExpr 0x5575d0292e48 <col:9, col:48> 'int'
|       |-ImplicitCastExpr 0x5575d0292e30 <col:9> 'int (*)(struct k_stack *, stack_data_t *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0292d28 <col:9> 'int (struct k_stack *, stack_data_t *, s32_t)' Function 0x5575d0292908 'z_impl_k_stack_pop' 'int (struct k_stack *, stack_data_t *, s32_t)'
|       |-ImplicitCastExpr 0x5575d0292e80 <col:28> 'struct k_stack *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0292d70 <col:28> 'struct k_stack *' lvalue ParmVar 0x5575d02929e8 'stack' 'struct k_stack *'
|       |-ImplicitCastExpr 0x5575d0292e98 <col:35> 'stack_data_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0292d90 <col:35> 'stack_data_t *' lvalue ParmVar 0x5575d0292a60 'data' 'stack_data_t *'
|       `-ImplicitCastExpr 0x5575d0292eb0 <col:41> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0292db0 <col:41> 's32_t':'int' lvalue ParmVar 0x5575d0292ad8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d0292fb8 <line:609:1, col:54> col:12 used z_impl_k_mutex_init 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x5575d0292f20 <col:32, col:49> col:49 mutex 'struct k_mutex *'
|-FunctionDecl 0x5575d0293120 prev 0x5575d025c630 <line:610:1, line:619:1> line:610:19 k_mutex_init 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5575d0293088 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x5575d02933c8 <line:611:1, line:619:1>
|   |-DoStmt 0x5575d0293298 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0293260 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0293200 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0293278 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d02933b8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:618:2, col:34>
|     `-CallExpr 0x5575d0293378 <col:9, col:34> 'int'
|       |-ImplicitCastExpr 0x5575d0293360 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d02932b8 <col:9> 'int (struct k_mutex *)' Function 0x5575d0292fb8 'z_impl_k_mutex_init' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x5575d02933a0 <col:29> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d02932d8 <col:29> 'struct k_mutex *' lvalue ParmVar 0x5575d0293088 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x5575d0293528 <line:622:1, col:69> col:12 used z_impl_k_mutex_lock 'int (struct k_mutex *, s32_t)' extern
| |-ParmVarDecl 0x5575d0293410 <col:32, col:49> col:49 mutex 'struct k_mutex *'
| `-ParmVarDecl 0x5575d0293488 <col:56, col:62> col:62 timeout 's32_t':'int'
|-FunctionDecl 0x5575d0293718 prev 0x5575d025c8c8 <line:623:1, line:632:1> line:623:19 k_mutex_lock 'int (struct k_mutex *, s32_t)' static inline
| |-ParmVarDecl 0x5575d0293600 <col:32, col:49> col:49 used mutex 'struct k_mutex *'
| |-ParmVarDecl 0x5575d0293678 <col:56, col:62> col:62 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d0293a08 <line:624:1, line:632:1>
|   |-DoStmt 0x5575d0293898 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0293860 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0293800 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0293878 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d02939f8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:631:2, col:43>
|     `-CallExpr 0x5575d0293998 <col:9, col:43> 'int'
|       |-ImplicitCastExpr 0x5575d0293980 <col:9> 'int (*)(struct k_mutex *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d02938b8 <col:9> 'int (struct k_mutex *, s32_t)' Function 0x5575d0293528 'z_impl_k_mutex_lock' 'int (struct k_mutex *, s32_t)'
|       |-ImplicitCastExpr 0x5575d02939c8 <col:29> 'struct k_mutex *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d02938d8 <col:29> 'struct k_mutex *' lvalue ParmVar 0x5575d0293600 'mutex' 'struct k_mutex *'
|       `-ImplicitCastExpr 0x5575d02939e0 <col:36> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d02938f8 <col:36> 's32_t':'int' lvalue ParmVar 0x5575d0293678 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d0293ae8 <line:635:1, col:56> col:12 used z_impl_k_mutex_unlock 'int (struct k_mutex *)' extern
| `-ParmVarDecl 0x5575d0293a50 <col:34, col:51> col:51 mutex 'struct k_mutex *'
|-FunctionDecl 0x5575d0293c50 prev 0x5575d025ca68 <line:636:1, line:645:1> line:636:19 k_mutex_unlock 'int (struct k_mutex *)' static inline
| |-ParmVarDecl 0x5575d0293bb8 <col:34, col:51> col:51 used mutex 'struct k_mutex *'
| `-CompoundStmt 0x5575d0293ee0 <line:637:1, line:645:1>
|   |-DoStmt 0x5575d0293e18 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0293de0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0293d80 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0293df8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0293ed0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:644:2, col:36>
|     `-CallExpr 0x5575d0293e90 <col:9, col:36> 'int'
|       |-ImplicitCastExpr 0x5575d0293e78 <col:9> 'int (*)(struct k_mutex *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0293e38 <col:9> 'int (struct k_mutex *)' Function 0x5575d0293ae8 'z_impl_k_mutex_unlock' 'int (struct k_mutex *)'
|       `-ImplicitCastExpr 0x5575d0293eb8 <col:31> 'struct k_mutex *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0293e58 <col:31> 'struct k_mutex *' lvalue ParmVar 0x5575d0293bb8 'mutex' 'struct k_mutex *'
|-FunctionDecl 0x5575d02940d0 <line:648:1, col:96> col:12 used z_impl_k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x5575d0293f28 <col:30, col:45> col:45 sem 'struct k_sem *'
| |-ParmVarDecl 0x5575d0293fa8 <col:50, col:63> col:63 initial_count 'unsigned int'
| `-ParmVarDecl 0x5575d0294028 <col:78, col:91> col:91 limit 'unsigned int'
|-FunctionDecl 0x5575d0294358 prev 0x5575d025d0a8 <line:649:1, line:658:1> line:649:19 k_sem_init 'int (struct k_sem *, unsigned int, unsigned int)' static inline
| |-ParmVarDecl 0x5575d02941b0 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x5575d0294230 <col:50, col:63> col:63 used initial_count 'unsigned int'
| |-ParmVarDecl 0x5575d02942b0 <col:78, col:91> col:91 used limit 'unsigned int'
| `-CompoundStmt 0x5575d0294688 <line:650:1, line:658:1>
|   |-DoStmt 0x5575d02944e0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d02944a8 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0294448 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d02944c0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0294678 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:657:2, col:52>
|     `-CallExpr 0x5575d02945f8 <col:9, col:52> 'int'
|       |-ImplicitCastExpr 0x5575d02945e0 <col:9> 'int (*)(struct k_sem *, unsigned int, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0294500 <col:9> 'int (struct k_sem *, unsigned int, unsigned int)' Function 0x5575d02940d0 'z_impl_k_sem_init' 'int (struct k_sem *, unsigned int, unsigned int)'
|       |-ImplicitCastExpr 0x5575d0294630 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0294520 <col:27> 'struct k_sem *' lvalue ParmVar 0x5575d02941b0 'sem' 'struct k_sem *'
|       |-ImplicitCastExpr 0x5575d0294648 <col:32> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0294540 <col:32> 'unsigned int' lvalue ParmVar 0x5575d0294230 'initial_count' 'unsigned int'
|       `-ImplicitCastExpr 0x5575d0294660 <col:47> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0294560 <col:47> 'unsigned int' lvalue ParmVar 0x5575d02942b0 'limit' 'unsigned int'
|-FunctionDecl 0x5575d02947e8 <line:661:1, col:63> col:12 used z_impl_k_sem_take 'int (struct k_sem *, s32_t)' extern
| |-ParmVarDecl 0x5575d02946d0 <col:30, col:45> col:45 sem 'struct k_sem *'
| `-ParmVarDecl 0x5575d0294748 <col:50, col:56> col:56 timeout 's32_t':'int'
|-FunctionDecl 0x5575d02949d8 prev 0x5575d025d348 <line:662:1, line:671:1> line:662:19 k_sem_take 'int (struct k_sem *, s32_t)' static inline
| |-ParmVarDecl 0x5575d02948c0 <col:30, col:45> col:45 used sem 'struct k_sem *'
| |-ParmVarDecl 0x5575d0294938 <col:50, col:56> col:56 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d0294cc8 <line:663:1, line:671:1>
|   |-DoStmt 0x5575d0294b58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0294b20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0294ac0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0294b38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0294cb8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:670:2, col:39>
|     `-CallExpr 0x5575d0294c58 <col:9, col:39> 'int'
|       |-ImplicitCastExpr 0x5575d0294c40 <col:9> 'int (*)(struct k_sem *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0294b78 <col:9> 'int (struct k_sem *, s32_t)' Function 0x5575d02947e8 'z_impl_k_sem_take' 'int (struct k_sem *, s32_t)'
|       |-ImplicitCastExpr 0x5575d0294c88 <col:27> 'struct k_sem *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0294b98 <col:27> 'struct k_sem *' lvalue ParmVar 0x5575d02948c0 'sem' 'struct k_sem *'
|       `-ImplicitCastExpr 0x5575d0294ca0 <col:32> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0294bb8 <col:32> 's32_t':'int' lvalue ParmVar 0x5575d0294938 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d0294da0 <line:674:1, col:49> col:13 used z_impl_k_sem_give 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x5575d0294d10 <col:31, col:46> col:46 sem 'struct k_sem *'
|-FunctionDecl 0x5575d0294f00 prev 0x5575d025d560 <line:675:1, line:685:1> line:675:20 k_sem_give 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5575d0294e70 <col:31, col:46> col:46 used sem 'struct k_sem *'
| `-CompoundStmt 0x5575d0295198 <line:676:1, line:685:1>
|   |-DoStmt 0x5575d0295078 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0295040 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0294fe0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0295058 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0295158 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:684:2, col:23> 'void'
|     |-ImplicitCastExpr 0x5575d0295140 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0295098 <col:2> 'void (struct k_sem *)' Function 0x5575d0294da0 'z_impl_k_sem_give' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x5575d0295180 <col:20> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d02950b8 <col:20> 'struct k_sem *' lvalue ParmVar 0x5575d0294e70 'sem' 'struct k_sem *'
|-FunctionDecl 0x5575d0295270 prev 0x5575d025de20 <line:688:1, col:50> col:13 used z_impl_k_sem_reset 'void (struct k_sem *)' extern
| `-ParmVarDecl 0x5575d02951e0 <col:32, col:47> col:47 sem 'struct k_sem *'
|-FunctionDecl 0x5575d02953d0 prev 0x5575d025dc90 <line:689:1, line:699:1> line:689:20 k_sem_reset 'void (struct k_sem *)' static inline
| |-ParmVarDecl 0x5575d0295340 <col:32, col:47> col:47 used sem 'struct k_sem *'
| `-CompoundStmt 0x5575d0295600 <line:690:1, line:699:1>
|   |-DoStmt 0x5575d0295548 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0295510 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d02954b0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0295528 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d02955c0 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:698:2, col:24> 'void'
|     |-ImplicitCastExpr 0x5575d02955a8 <col:2> 'void (*)(struct k_sem *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0295568 <col:2> 'void (struct k_sem *)' Function 0x5575d0295270 'z_impl_k_sem_reset' 'void (struct k_sem *)'
|     `-ImplicitCastExpr 0x5575d02955e8 <col:21> 'struct k_sem *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0295588 <col:21> 'struct k_sem *' lvalue ParmVar 0x5575d0295340 'sem' 'struct k_sem *'
|-FunctionDecl 0x5575d02956e0 prev 0x5575d025e278 <line:702:1, col:62> col:21 used z_impl_k_sem_count_get 'unsigned int (struct k_sem *)' extern
| `-ParmVarDecl 0x5575d0295648 <col:44, col:59> col:59 sem 'struct k_sem *'
|-FunctionDecl 0x5575d0295848 prev 0x5575d025e0e8 <line:703:1, line:712:1> line:703:28 k_sem_count_get 'unsigned int (struct k_sem *)' static inline
| |-ParmVarDecl 0x5575d02957b0 <col:44, col:59> col:59 used sem 'struct k_sem *'
| `-CompoundStmt 0x5575d0295ae8 <line:704:1, line:712:1>
|   |-DoStmt 0x5575d02959c0 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0295988 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0295928 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d02959a0 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0295ad8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:711:2, col:35>
|     `-CallExpr 0x5575d0295a98 <col:9, col:35> 'unsigned int'
|       |-ImplicitCastExpr 0x5575d0295a80 <col:9> 'unsigned int (*)(struct k_sem *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d02959e0 <col:9> 'unsigned int (struct k_sem *)' Function 0x5575d02956e0 'z_impl_k_sem_count_get' 'unsigned int (struct k_sem *)'
|       `-ImplicitCastExpr 0x5575d0295ac0 <col:32> 'struct k_sem *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0295a00 <col:32> 'struct k_sem *' lvalue ParmVar 0x5575d02957b0 'sem' 'struct k_sem *'
|-FunctionDecl 0x5575d0295cc8 <line:715:1, col:90> col:12 used z_impl_k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' extern
| |-ParmVarDecl 0x5575d0295b30 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0295ba8 <col:59, col:66> col:66 msg_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x5575d0295c20 <col:76, col:82> col:82 max_msgs 'u32_t':'unsigned int'
|-FunctionDecl 0x5575d0295f50 prev 0x5575d0262c68 <line:716:1, line:725:1> line:716:19 k_msgq_alloc_init 'int (struct k_msgq *, size_t, u32_t)' static inline
| |-ParmVarDecl 0x5575d0295db8 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0295e30 <col:59, col:66> col:66 used msg_size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0295ea8 <col:76, col:82> col:82 used max_msgs 'u32_t':'unsigned int'
| `-CompoundStmt 0x5575d0296288 <line:717:1, line:725:1>
|   |-DoStmt 0x5575d02960d8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d02960a0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0296040 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d02960b8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0296278 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:724:2, col:58>
|     `-CallExpr 0x5575d02961f8 <col:9, col:58> 'int'
|       |-ImplicitCastExpr 0x5575d02961e0 <col:9> 'int (*)(struct k_msgq *, size_t, u32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d02960f8 <col:9> 'int (struct k_msgq *, size_t, u32_t)' Function 0x5575d0295cc8 'z_impl_k_msgq_alloc_init' 'int (struct k_msgq *, size_t, u32_t)'
|       |-ImplicitCastExpr 0x5575d0296230 <col:34> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0296118 <col:34> 'struct k_msgq *' lvalue ParmVar 0x5575d0295db8 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x5575d0296248 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0296138 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x5575d0295e30 'msg_size' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5575d0296260 <col:50> 'u32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0296158 <col:50> 'u32_t':'unsigned int' lvalue ParmVar 0x5575d0295ea8 'max_msgs' 'u32_t':'unsigned int'
|-FunctionDecl 0x5575d0296470 <line:728:1, col:78> col:12 used z_impl_k_msgq_put 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x5575d02962d0 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0296350 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x5575d02963c8 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x5575d02966f0 prev 0x5575d02631b8 <line:729:1, line:738:1> line:729:19 k_msgq_put 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5575d0296550 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d02965d0 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5575d0296648 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d0296a28 <line:730:1, line:738:1>
|   |-DoStmt 0x5575d0296878 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0296840 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d02967e0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0296858 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0296a18 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:737:2, col:46>
|     `-CallExpr 0x5575d0296998 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x5575d0296980 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0296898 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x5575d0296470 'z_impl_k_msgq_put' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x5575d02969d0 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d02968b8 <col:27> 'struct k_msgq *' lvalue ParmVar 0x5575d0296550 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x5575d02969e8 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d02968d8 <col:33> 'void *' lvalue ParmVar 0x5575d02965d0 'data' 'void *'
|       `-ImplicitCastExpr 0x5575d0296a00 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d02968f8 <col:39> 's32_t':'int' lvalue ParmVar 0x5575d0296648 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d0296c10 <line:741:1, col:78> col:12 used z_impl_k_msgq_get 'int (struct k_msgq *, void *, s32_t)' extern
| |-ParmVarDecl 0x5575d0296a70 <col:30, col:46> col:46 msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0296af0 <col:52, col:59> col:59 data 'void *'
| `-ParmVarDecl 0x5575d0296b68 <col:65, col:71> col:71 timeout 's32_t':'int'
|-FunctionDecl 0x5575d0296e90 prev 0x5575d0263d80 <line:742:1, line:751:1> line:742:19 k_msgq_get 'int (struct k_msgq *, void *, s32_t)' static inline
| |-ParmVarDecl 0x5575d0296cf0 <col:30, col:46> col:46 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0296d70 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5575d0296de8 <col:65, col:71> col:71 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d0297160 <line:743:1, line:751:1>
|   |-DoStmt 0x5575d0297018 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0296fe0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0296f80 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0296ff8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0297150 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:750:2, col:46>
|     `-CallExpr 0x5575d02970d0 <col:9, col:46> 'int'
|       |-ImplicitCastExpr 0x5575d02970b8 <col:9> 'int (*)(struct k_msgq *, void *, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0297038 <col:9> 'int (struct k_msgq *, void *, s32_t)' Function 0x5575d0296c10 'z_impl_k_msgq_get' 'int (struct k_msgq *, void *, s32_t)'
|       |-ImplicitCastExpr 0x5575d0297108 <col:27> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0297058 <col:27> 'struct k_msgq *' lvalue ParmVar 0x5575d0296cf0 'msgq' 'struct k_msgq *'
|       |-ImplicitCastExpr 0x5575d0297120 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0297078 <col:33> 'void *' lvalue ParmVar 0x5575d0296d70 'data' 'void *'
|       `-ImplicitCastExpr 0x5575d0297138 <col:39> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0297098 <col:39> 's32_t':'int' lvalue ParmVar 0x5575d0296de8 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d02972c8 <line:754:1, col:64> col:12 used z_impl_k_msgq_peek 'int (struct k_msgq *, void *)' extern
| |-ParmVarDecl 0x5575d02971a8 <col:31, col:47> col:47 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x5575d0297228 <col:53, col:60> col:60 data 'void *'
|-FunctionDecl 0x5575d02974c0 prev 0x5575d0264038 <line:755:1, line:764:1> line:755:19 k_msgq_peek 'int (struct k_msgq *, void *)' static inline
| |-ParmVarDecl 0x5575d02973a0 <col:31, col:47> col:47 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0297420 <col:53, col:60> col:60 used data 'void *'
| `-CompoundStmt 0x5575d02977a8 <line:756:1, line:764:1>
|   |-DoStmt 0x5575d0297640 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0297608 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d02975a8 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0297620 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0297798 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:763:2, col:38>
|     `-CallExpr 0x5575d0297738 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x5575d0297720 <col:9> 'int (*)(struct k_msgq *, void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0297660 <col:9> 'int (struct k_msgq *, void *)' Function 0x5575d02972c8 'z_impl_k_msgq_peek' 'int (struct k_msgq *, void *)'
|       |-ImplicitCastExpr 0x5575d0297768 <col:28> 'struct k_msgq *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0297680 <col:28> 'struct k_msgq *' lvalue ParmVar 0x5575d02973a0 'msgq' 'struct k_msgq *'
|       `-ImplicitCastExpr 0x5575d0297780 <col:34> 'void *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d02976a0 <col:34> 'void *' lvalue ParmVar 0x5575d0297420 'data' 'void *'
|-FunctionDecl 0x5575d0297880 <line:767:1, col:53> col:13 used z_impl_k_msgq_purge 'void (struct k_msgq *)' extern
| `-ParmVarDecl 0x5575d02977f0 <col:33, col:49> col:49 msgq 'struct k_msgq *'
|-FunctionDecl 0x5575d02979e0 prev 0x5575d0264250 <line:768:1, line:778:1> line:768:20 k_msgq_purge 'void (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5575d0297950 <col:33, col:49> col:49 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5575d0297c78 <line:769:1, line:778:1>
|   |-DoStmt 0x5575d0297b58 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0297b20 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0297ac0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0297b38 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0297c38 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:777:2, col:26> 'void'
|     |-ImplicitCastExpr 0x5575d0297c20 <col:2> 'void (*)(struct k_msgq *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d0297b78 <col:2> 'void (struct k_msgq *)' Function 0x5575d0297880 'z_impl_k_msgq_purge' 'void (struct k_msgq *)'
|     `-ImplicitCastExpr 0x5575d0297c60 <col:22> 'struct k_msgq *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d0297b98 <col:22> 'struct k_msgq *' lvalue ParmVar 0x5575d0297950 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5575d0297da0 prev 0x5575d0264918 <line:781:1, col:61> col:14 used z_impl_k_msgq_num_free_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x5575d0297cc0 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x5575d0297f00 prev 0x5575d0264460 <line:782:1, line:791:1> line:782:21 k_msgq_num_free_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5575d0297e70 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5575d02981a8 <line:783:1, line:791:1>
|   |-DoStmt 0x5575d0298078 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0298040 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0297fe0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0298058 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0298198 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:790:2, col:40>
|     `-CallExpr 0x5575d0298158 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5575d0298140 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0298098 <col:9> 'u32_t (struct k_msgq *)' Function 0x5575d0297da0 'z_impl_k_msgq_num_free_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x5575d0298180 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d02980b8 <col:36> 'struct k_msgq *' lvalue ParmVar 0x5575d0297e70 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5575d0298318 <line:794:1, col:86> col:13 used z_impl_k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' extern
| |-ParmVarDecl 0x5575d02981f0 <col:37, col:53> col:53 msgq 'struct k_msgq *'
| `-ParmVarDecl 0x5575d0298280 <col:59, col:81> col:81 attrs 'struct k_msgq_attrs *'
|-FunctionDecl 0x5575d0298518 prev 0x5575d02647b0 <line:795:1, line:805:1> line:795:20 k_msgq_get_attrs 'void (struct k_msgq *, struct k_msgq_attrs *)' static inline
| |-ParmVarDecl 0x5575d02983f0 <col:37, col:53> col:53 used msgq 'struct k_msgq *'
| |-ParmVarDecl 0x5575d0298480 <col:59, col:81> col:81 used attrs 'struct k_msgq_attrs *'
| `-CompoundStmt 0x5575d02987f8 <line:796:1, line:805:1>
|   |-DoStmt 0x5575d0298698 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0298660 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0298600 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0298678 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d0298798 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:804:2, col:37> 'void'
|     |-ImplicitCastExpr 0x5575d0298780 <col:2> 'void (*)(struct k_msgq *, struct k_msgq_attrs *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d02986b8 <col:2> 'void (struct k_msgq *, struct k_msgq_attrs *)' Function 0x5575d0298318 'z_impl_k_msgq_get_attrs' 'void (struct k_msgq *, struct k_msgq_attrs *)'
|     |-ImplicitCastExpr 0x5575d02987c8 <col:26> 'struct k_msgq *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d02986d8 <col:26> 'struct k_msgq *' lvalue ParmVar 0x5575d02983f0 'msgq' 'struct k_msgq *'
|     `-ImplicitCastExpr 0x5575d02987e0 <col:32> 'struct k_msgq_attrs *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d02986f8 <col:32> 'struct k_msgq_attrs *' lvalue ParmVar 0x5575d0298480 'attrs' 'struct k_msgq_attrs *'
|-FunctionDecl 0x5575d02988d0 prev 0x5575d0265328 <line:808:1, col:61> col:14 used z_impl_k_msgq_num_used_get 'u32_t (struct k_msgq *)' extern
| `-ParmVarDecl 0x5575d0298840 <col:41, col:57> col:57 msgq 'struct k_msgq *'
|-FunctionDecl 0x5575d0298a30 prev 0x5575d02651c8 <line:809:1, line:818:1> line:809:21 k_msgq_num_used_get 'u32_t (struct k_msgq *)' static inline
| |-ParmVarDecl 0x5575d02989a0 <col:41, col:57> col:57 used msgq 'struct k_msgq *'
| `-CompoundStmt 0x5575d0298c70 <line:810:1, line:818:1>
|   |-DoStmt 0x5575d0298ba8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0298b70 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0298b10 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0298b88 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0298c60 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:817:2, col:40>
|     `-CallExpr 0x5575d0298c20 <col:9, col:40> 'u32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5575d0298c08 <col:9> 'u32_t (*)(struct k_msgq *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0298bc8 <col:9> 'u32_t (struct k_msgq *)' Function 0x5575d02988d0 'z_impl_k_msgq_num_used_get' 'u32_t (struct k_msgq *)'
|       `-ImplicitCastExpr 0x5575d0298c48 <col:36> 'struct k_msgq *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0298be8 <col:36> 'struct k_msgq *' lvalue ParmVar 0x5575d02989a0 'msgq' 'struct k_msgq *'
|-FunctionDecl 0x5575d0298dd0 <line:821:1, col:70> col:12 used z_impl_k_pipe_alloc_init 'int (struct k_pipe *, size_t)' extern
| |-ParmVarDecl 0x5575d0298cb8 <col:37, col:53> col:53 pipe 'struct k_pipe *'
| `-ParmVarDecl 0x5575d0298d30 <col:59, col:66> col:66 size 'size_t':'unsigned long'
|-FunctionDecl 0x5575d0298fc0 prev 0x5575d026a208 <line:822:1, line:831:1> line:822:19 k_pipe_alloc_init 'int (struct k_pipe *, size_t)' static inline
| |-ParmVarDecl 0x5575d0298ea8 <col:37, col:53> col:53 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d0298f20 <col:59, col:66> col:66 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x5575d02992a8 <line:823:1, line:831:1>
|   |-DoStmt 0x5575d0299140 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0299108 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d02990a8 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0299120 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0299298 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:830:2, col:44>
|     `-CallExpr 0x5575d0299238 <col:9, col:44> 'int'
|       |-ImplicitCastExpr 0x5575d0299220 <col:9> 'int (*)(struct k_pipe *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0299160 <col:9> 'int (struct k_pipe *, size_t)' Function 0x5575d0298dd0 'z_impl_k_pipe_alloc_init' 'int (struct k_pipe *, size_t)'
|       |-ImplicitCastExpr 0x5575d0299268 <col:34> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0299180 <col:34> 'struct k_pipe *' lvalue ParmVar 0x5575d0298ea8 'pipe' 'struct k_pipe *'
|       `-ImplicitCastExpr 0x5575d0299280 <col:40> 'size_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5575d02991a0 <col:40> 'size_t':'unsigned long' lvalue ParmVar 0x5575d0298f20 'size' 'size_t':'unsigned long'
|-FunctionDecl 0x5575d0299610 <line:834:1, col:142> col:12 used z_impl_k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x5575d02992f0 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d0299370 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x5575d02993e8 <col:65, col:72> col:72 bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0299460 <col:88, col:97> col:97 bytes_written 'size_t *'
| |-ParmVarDecl 0x5575d02994d8 <col:112, col:119> col:119 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x5575d0299550 <col:129, col:135> col:135 timeout 's32_t':'int'
|-FunctionDecl 0x5575d0299a28 prev 0x5575d026a728 <line:835:1, line:844:1> line:835:19 k_pipe_put 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5575d0299708 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d0299788 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5575d0299800 <col:65, col:72> col:72 used bytes_to_write 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0299878 <col:88, col:97> col:97 used bytes_written 'size_t *'
| |-ParmVarDecl 0x5575d02998f0 <col:112, col:119> col:119 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d0299968 <col:129, col:135> col:135 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d0299e50 <line:836:1, line:844:1>
|   |-DoStmt 0x5575d0299bc8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d0299b90 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d0299b30 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d0299ba8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d0299e40 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:843:2, col:87>
|     `-CallExpr 0x5575d0299d48 <col:9, col:87> 'int'
|       |-ImplicitCastExpr 0x5575d0299d30 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d0299be8 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x5575d0299610 'z_impl_k_pipe_put' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x5575d0299db0 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0299c08 <col:27> 'struct k_pipe *' lvalue ParmVar 0x5575d0299708 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x5575d0299dc8 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0299c28 <col:33> 'void *' lvalue ParmVar 0x5575d0299788 'data' 'void *'
|       |-ImplicitCastExpr 0x5575d0299de0 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0299c48 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x5575d0299800 'bytes_to_write' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5575d0299df8 <col:55> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0299c68 <col:55> 'size_t *' lvalue ParmVar 0x5575d0299878 'bytes_written' 'size_t *'
|       |-ImplicitCastExpr 0x5575d0299e10 <col:70> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d0299c88 <col:70> 'size_t':'unsigned long' lvalue ParmVar 0x5575d02998f0 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5575d0299e28 <col:80> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d0299ca8 <col:80> 's32_t':'int' lvalue ParmVar 0x5575d0299968 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d029a1b8 <line:847:1, col:138> col:12 used z_impl_k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' extern
| |-ParmVarDecl 0x5575d0299e98 <col:30, col:46> col:46 pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d0299f18 <col:52, col:59> col:59 data 'void *'
| |-ParmVarDecl 0x5575d0299f90 <col:65, col:72> col:72 bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d029a008 <col:87, col:96> col:96 bytes_read 'size_t *'
| |-ParmVarDecl 0x5575d029a080 <col:108, col:115> col:115 min_xfer 'size_t':'unsigned long'
| `-ParmVarDecl 0x5575d029a0f8 <col:125, col:131> col:131 timeout 's32_t':'int'
|-FunctionDecl 0x5575d029a5d0 prev 0x5575d026bca0 <line:848:1, line:857:1> line:848:19 k_pipe_get 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' static inline
| |-ParmVarDecl 0x5575d029a2b0 <col:30, col:46> col:46 used pipe 'struct k_pipe *'
| |-ParmVarDecl 0x5575d029a330 <col:52, col:59> col:59 used data 'void *'
| |-ParmVarDecl 0x5575d029a3a8 <col:65, col:72> col:72 used bytes_to_read 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d029a420 <col:87, col:96> col:96 used bytes_read 'size_t *'
| |-ParmVarDecl 0x5575d029a498 <col:108, col:115> col:115 used min_xfer 'size_t':'unsigned long'
| |-ParmVarDecl 0x5575d029a510 <col:125, col:131> col:131 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d029a978 <line:849:1, line:857:1>
|   |-DoStmt 0x5575d029a770 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d029a738 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d029a6d8 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d029a750 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d029a968 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:856:2, col:83>
|     `-CallExpr 0x5575d029a888 <col:9, col:83> 'int'
|       |-ImplicitCastExpr 0x5575d029a870 <col:9> 'int (*)(struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d029a790 <col:9> 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)' Function 0x5575d029a1b8 'z_impl_k_pipe_get' 'int (struct k_pipe *, void *, size_t, size_t *, size_t, s32_t)'
|       |-ImplicitCastExpr 0x5575d029a8d8 <col:27> 'struct k_pipe *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d029a7b0 <col:27> 'struct k_pipe *' lvalue ParmVar 0x5575d029a2b0 'pipe' 'struct k_pipe *'
|       |-ImplicitCastExpr 0x5575d029a8f0 <col:33> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d029a7d0 <col:33> 'void *' lvalue ParmVar 0x5575d029a330 'data' 'void *'
|       |-ImplicitCastExpr 0x5575d029a908 <col:39> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d029a7f0 <col:39> 'size_t':'unsigned long' lvalue ParmVar 0x5575d029a3a8 'bytes_to_read' 'size_t':'unsigned long'
|       |-ImplicitCastExpr 0x5575d029a920 <col:54> 'size_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d029a810 <col:54> 'size_t *' lvalue ParmVar 0x5575d029a420 'bytes_read' 'size_t *'
|       |-ImplicitCastExpr 0x5575d029a938 <col:66> 'size_t':'unsigned long' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d029a830 <col:66> 'size_t':'unsigned long' lvalue ParmVar 0x5575d029a498 'min_xfer' 'size_t':'unsigned long'
|       `-ImplicitCastExpr 0x5575d029a950 <col:76> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d029a850 <col:76> 's32_t':'int' lvalue ParmVar 0x5575d029a510 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d029ab60 <line:860:1, col:85> col:12 used z_impl_k_poll 'int (struct k_poll_event *, int, s32_t)' extern
| |-ParmVarDecl 0x5575d029a9c0 <col:26, col:48> col:48 events 'struct k_poll_event *'
| |-ParmVarDecl 0x5575d029aa40 <col:56, col:60> col:60 num_events 'int'
| `-ParmVarDecl 0x5575d029aab8 <col:72, col:78> col:78 timeout 's32_t':'int'
|-FunctionDecl 0x5575d029ade0 prev 0x5575d02769b8 <line:861:1, line:870:1> line:861:19 k_poll 'int (struct k_poll_event *, int, s32_t)' static inline
| |-ParmVarDecl 0x5575d029ac40 <col:26, col:48> col:48 used events 'struct k_poll_event *'
| |-ParmVarDecl 0x5575d029acc0 <col:56, col:60> col:60 used num_events 'int'
| |-ParmVarDecl 0x5575d029ad38 <col:72, col:78> col:78 used timeout 's32_t':'int'
| `-CompoundStmt 0x5575d029b118 <line:862:1, line:870:1>
|   |-DoStmt 0x5575d029af68 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d029af30 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d029aed0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d029af48 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d029b108 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:869:2, col:50>
|     `-CallExpr 0x5575d029b088 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5575d029b070 <col:9> 'int (*)(struct k_poll_event *, int, s32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d029af88 <col:9> 'int (struct k_poll_event *, int, s32_t)' Function 0x5575d029ab60 'z_impl_k_poll' 'int (struct k_poll_event *, int, s32_t)'
|       |-ImplicitCastExpr 0x5575d029b0c0 <col:23> 'struct k_poll_event *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d029afa8 <col:23> 'struct k_poll_event *' lvalue ParmVar 0x5575d029ac40 'events' 'struct k_poll_event *'
|       |-ImplicitCastExpr 0x5575d029b0d8 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d029afc8 <col:31> 'int' lvalue ParmVar 0x5575d029acc0 'num_events' 'int'
|       `-ImplicitCastExpr 0x5575d029b0f0 <col:43> 's32_t':'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d029afe8 <col:43> 's32_t':'int' lvalue ParmVar 0x5575d029ad38 'timeout' 's32_t':'int'
|-FunctionDecl 0x5575d029b1f0 <line:873:1, col:68> col:13 used z_impl_k_poll_signal_init 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x5575d029b160 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
|-FunctionDecl 0x5575d029b350 prev 0x5575d0276bd0 <line:874:1, line:884:1> line:874:20 k_poll_signal_init 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5575d029b2c0 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5575d029b5e8 <line:875:1, line:884:1>
|   |-DoStmt 0x5575d029b4c8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d029b490 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d029b430 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d029b4a8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d029b5a8 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:883:2, col:34> 'void'
|     |-ImplicitCastExpr 0x5575d029b590 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d029b4e8 <col:2> 'void (struct k_poll_signal *)' Function 0x5575d029b1f0 'z_impl_k_poll_signal_init' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x5575d029b5d0 <col:28> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d029b508 <col:28> 'struct k_poll_signal *' lvalue ParmVar 0x5575d029b2c0 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x5575d029b6c0 prev 0x5575d0277640 <line:887:1, col:69> col:13 used z_impl_k_poll_signal_reset 'void (struct k_poll_signal *)' extern
| `-ParmVarDecl 0x5575d029b630 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
|-FunctionDecl 0x5575d029b820 prev 0x5575d0276d30 <line:888:1, line:898:1> line:888:20 k_poll_signal_reset 'void (struct k_poll_signal *)' static inline
| |-ParmVarDecl 0x5575d029b790 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| `-CompoundStmt 0x5575d029ba50 <line:889:1, line:898:1>
|   |-DoStmt 0x5575d029b998 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d029b960 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d029b900 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d029b978 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d029ba10 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:897:2, col:35> 'void'
|     |-ImplicitCastExpr 0x5575d029b9f8 <col:2> 'void (*)(struct k_poll_signal *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d029b9b8 <col:2> 'void (struct k_poll_signal *)' Function 0x5575d029b6c0 'z_impl_k_poll_signal_reset' 'void (struct k_poll_signal *)'
|     `-ImplicitCastExpr 0x5575d029ba38 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d029b9d8 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x5575d029b790 'signal' 'struct k_poll_signal *'
|-FunctionDecl 0x5575d029bc38 <line:901:1, col:108> col:13 used z_impl_k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' extern
| |-ParmVarDecl 0x5575d029ba98 <col:40, col:63> col:63 signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5575d029bb18 <col:71, col:86> col:86 signaled 'unsigned int *'
| `-ParmVarDecl 0x5575d029bb98 <col:96, col:102> col:102 result 'int *'
|-FunctionDecl 0x5575d029bee0 prev 0x5575d0277a30 <line:902:1, line:912:1> line:902:20 k_poll_signal_check 'void (struct k_poll_signal *, unsigned int *, int *)' static inline
| |-ParmVarDecl 0x5575d029bd18 <col:40, col:63> col:63 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5575d029bdc0 <col:71, col:86> col:86 used signaled 'unsigned int *'
| |-ParmVarDecl 0x5575d029be40 <col:96, col:102> col:102 used result 'int *'
| `-CompoundStmt 0x5575d029c208 <line:903:1, line:912:1>
|   |-DoStmt 0x5575d029c068 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d029c030 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d029bfd0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d029c048 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d029c188 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:911:2, col:53> 'void'
|     |-ImplicitCastExpr 0x5575d029c170 <col:2> 'void (*)(struct k_poll_signal *, unsigned int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d029c088 <col:2> 'void (struct k_poll_signal *, unsigned int *, int *)' Function 0x5575d029bc38 'z_impl_k_poll_signal_check' 'void (struct k_poll_signal *, unsigned int *, int *)'
|     |-ImplicitCastExpr 0x5575d029c1c0 <col:29> 'struct k_poll_signal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d029c0a8 <col:29> 'struct k_poll_signal *' lvalue ParmVar 0x5575d029bd18 'signal' 'struct k_poll_signal *'
|     |-ImplicitCastExpr 0x5575d029c1d8 <col:37> 'unsigned int *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d029c0c8 <col:37> 'unsigned int *' lvalue ParmVar 0x5575d029bdc0 'signaled' 'unsigned int *'
|     `-ImplicitCastExpr 0x5575d029c1f0 <col:47> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x5575d029c0e8 <col:47> 'int *' lvalue ParmVar 0x5575d029be40 'result' 'int *'
|-FunctionDecl 0x5575d029c370 <line:915:1, col:80> col:12 used z_impl_k_poll_signal_raise 'int (struct k_poll_signal *, int)' extern
| |-ParmVarDecl 0x5575d029c250 <col:39, col:62> col:62 signal 'struct k_poll_signal *'
| `-ParmVarDecl 0x5575d029c2d0 <col:70, col:74> col:74 result 'int'
|-FunctionDecl 0x5575d029c568 prev 0x5575d0277ce8 <line:916:1, line:925:1> line:916:19 k_poll_signal_raise 'int (struct k_poll_signal *, int)' static inline
| |-ParmVarDecl 0x5575d029c448 <col:39, col:62> col:62 used signal 'struct k_poll_signal *'
| |-ParmVarDecl 0x5575d029c4c8 <col:70, col:74> col:74 used result 'int'
| `-CompoundStmt 0x5575d029c858 <line:917:1, line:925:1>
|   |-DoStmt 0x5575d029c6e8 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d029c6b0 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d029c650 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d029c6c8 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d029c848 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:924:2, col:50>
|     `-CallExpr 0x5575d029c7e8 <col:9, col:50> 'int'
|       |-ImplicitCastExpr 0x5575d029c7d0 <col:9> 'int (*)(struct k_poll_signal *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d029c708 <col:9> 'int (struct k_poll_signal *, int)' Function 0x5575d029c370 'z_impl_k_poll_signal_raise' 'int (struct k_poll_signal *, int)'
|       |-ImplicitCastExpr 0x5575d029c818 <col:36> 'struct k_poll_signal *' <LValueToRValue>
|       | `-DeclRefExpr 0x5575d029c728 <col:36> 'struct k_poll_signal *' lvalue ParmVar 0x5575d029c448 'signal' 'struct k_poll_signal *'
|       `-ImplicitCastExpr 0x5575d029c830 <col:44> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x5575d029c748 <col:44> 'int' lvalue ParmVar 0x5575d029c4c8 'result' 'int'
|-FunctionDecl 0x5575d029ca20 <line:928:1, col:48> col:13 used z_impl_k_str_out 'void (char *, size_t)' extern
| |-ParmVarDecl 0x5575d029c890 <col:30, col:37> col:37 c 'char *'
| `-ParmVarDecl 0x5575d029c908 <col:40, col:47> col:47 n 'size_t':'unsigned long'
|-FunctionDecl 0x5575d029cbf8 <line:929:1, line:939:1> line:929:20 k_str_out 'void (char *, size_t)' static inline
| |-ParmVarDecl 0x5575d029cae8 <col:30, col:37> col:37 used c 'char *'
| |-ParmVarDecl 0x5575d029cb60 <col:40, col:47> col:47 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x5575d029ced8 <line:930:1, line:939:1>
|   |-DoStmt 0x5575d029cd78 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d029cd40 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d029cce0 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d029cd58 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-CallExpr 0x5575d029ce78 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:938:2, col:23> 'void'
|     |-ImplicitCastExpr 0x5575d029ce60 <col:2> 'void (*)(char *, size_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d029cd98 <col:2> 'void (char *, size_t)' Function 0x5575d029ca20 'z_impl_k_str_out' 'void (char *, size_t)'
|     |-ImplicitCastExpr 0x5575d029cea8 <col:19> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575d029cdb8 <col:19> 'char *' lvalue ParmVar 0x5575d029cae8 'c' 'char *'
|     `-ImplicitCastExpr 0x5575d029cec0 <col:22> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5575d029cdd8 <col:22> 'size_t':'unsigned long' lvalue ParmVar 0x5575d029cb60 'n' 'size_t':'unsigned long'
|-FunctionDecl 0x5575d029cfb8 <line:942:1, col:59> col:12 used z_impl_k_float_disable 'int (struct k_thread *)' extern
| `-ParmVarDecl 0x5575d029cf20 <col:35, col:53> col:53 thread 'struct k_thread *'
|-FunctionDecl 0x5575d029d120 prev 0x5575d027cf88 <line:943:1, line:952:1> line:943:19 k_float_disable 'int (struct k_thread *)' static inline
| |-ParmVarDecl 0x5575d029d088 <col:35, col:53> col:53 used thread 'struct k_thread *'
| `-CompoundStmt 0x5575d029d398 <line:944:1, line:952:1>
|   |-DoStmt 0x5575d029d298 </vagrant/ext/zephyros/zephyr/include/toolchain/gcc.h:410:28, line:412:15>
|   | |-CompoundStmt 0x5575d029d260 <line:410:31, line:411:42>
|   | | `-GCCAsmStmt 0x5575d029d200 <col:2, col:39>
|   | `-IntegerLiteral 0x5575d029d278 </vagrant/ext/zephyros/zephyr/lib/libc/minimal/include/stdbool.h:15:16> 'int' 0
|   `-ReturnStmt 0x5575d029d388 </vagrant/ext/zephyros/zephyr/build/zephyr/include/generated/syscalls/kernel.h:951:2, col:38>
|     `-CallExpr 0x5575d029d348 <col:9, col:38> 'int'
|       |-ImplicitCastExpr 0x5575d029d330 <col:9> 'int (*)(struct k_thread *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575d029d2b8 <col:9> 'int (struct k_thread *)' Function 0x5575d029cfb8 'z_impl_k_float_disable' 'int (struct k_thread *)'
|       `-ImplicitCastExpr 0x5575d029d370 <col:32> 'struct k_thread *' <LValueToRValue>
|         `-DeclRefExpr 0x5575d029d2d8 <col:32> 'struct k_thread *' lvalue ParmVar 0x5575d029d088 'thread' 'struct k_thread *'
|-FunctionDecl 0x5575d029d4b0 </vagrant/apps/plc_led_blink/./_build/arm-tfm/install/export/tfm/inc/tfm_gpio_veneers.h:11:1, col:32> col:10 tfm_gpio_read_all 'uint32_t (void)'
|-FunctionDecl 0x5575d029d690 <line:12:1, col:40> col:9 tfm_gpio_write_all 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x5575d029d588 <col:28, col:37> col:37 out 'uint32_t':'unsigned int'
|-FunctionDecl 0x5575d029d7d8 <line:13:1, col:46> col:9 tfm_gpio_enable_outputs 'uint8_t (uint32_t)'
| `-ParmVarDecl 0x5575d029d748 <col:33, col:42> col:42 pins 'uint32_t':'unsigned int'
|-FunctionDecl 0x5575d029d918 <line:14:1, col:39> col:6 tfm_gpio_disable_all_outputs 'void (void)'
|-FunctionDecl 0x5575d029dad0 <line:15:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5575d029d9c8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d029dd20 <line:16:1, col:64> col:6 tfm_gpio_set_update_hooks 'void (uint32_t, uint32_t)'
| |-ParmVarDecl 0x5575d029db88 <col:32, col:41> col:41 trigger 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5575d029dc00 <col:50, col:59> col:59 apply 'uint32_t':'unsigned int'
|-FunctionDecl 0x5575d029f430 <line:18:1, col:43> col:9 tfm_gpio_enable_output 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5575d029f3a0 <col:32, col:40> col:40 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d029f560 <line:19:1, col:34> col:10 tfm_gpio_output_enabled 'uint32_t ()'
|-FunctionDecl 0x5575d029f620 <line:20:1, col:27> col:10 tfm_gpio_dataout 'uint32_t ()'
|-FunctionDecl 0x5575d029f760 <line:21:1, col:33> col:9 tfm_gpio_set 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5575d029f6d0 <col:22, col:30> col:30 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d029f8a8 <line:22:1, col:35> col:9 tfm_gpio_clear 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5575d029f818 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d029f9f0 <line:23:1, col:37> col:9 tfm_gpio_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5575d029f960 <col:26, col:34> col:34 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d029fb38 prev 0x5575d029dad0 <line:24:1, col:34> col:9 tfm_gpio_read 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5575d029faa8 <col:23, col:31> col:31 pin 'uint8_t':'unsigned char'
|-RecordDecl 0x5575d029fbe0 <line:38:9, line:42:1> line:38:9 struct definition
| |-FieldDecl 0x5575d029fc98 <line:39:5, col:13> col:13 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x5575d029fcf8 <line:40:5, col:13> col:13 polarity 'uint8_t':'unsigned char'
| `-FieldDecl 0x5575d029fdf0 <line:41:5, col:21> col:12 cb 'void (*)(void)'
|-TypedefDecl 0x5575d029fea0 <line:38:1, line:42:3> col:3 referenced gpio_int_config 'struct gpio_int_config':'gpio_int_config'
| `-ElaboratedType 0x5575d029fe40 'struct gpio_int_config' sugar
|   `-RecordType 0x5575d029fc60 'gpio_int_config'
|     `-Record 0x5575d029fbe0 ''
|-FunctionDecl 0x5575d02a0150 <line:44:1, col:68> col:9 tfm_gpio_interrupt_enable 'uint8_t (uint8_t, gpio_int_config *)'
| |-ParmVarDecl 0x5575d029ff20 <col:35, col:43> col:43 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x5575d02a0030 <col:48, col:65> col:65 cfg 'gpio_int_config *'
|-FunctionDecl 0x5575d02a02a0 <line:45:1, col:47> col:9 tfm_gpio_interrupt_disable 'uint8_t (uint8_t)'
| `-ParmVarDecl 0x5575d02a0210 <col:36, col:44> col:44 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d02a0368 <line:46:1, col:38> col:10 tfm_gpio_interrupts_enabled 'uint32_t ()'
|-FunctionDecl 0x5575d02a0520 <line:47:1, col:57> col:10 tfm_gpio_interrupt_callback_for_pin 'uint32_t (uint8_t)'
| `-ParmVarDecl 0x5575d02a0418 <col:46, col:54> col:54 pin 'uint8_t':'unsigned char'
|-TypedefDecl 0x5575d02a05e0 </vagrant/apps/plc_led_blink/./include/plc_platform.h:5:1, col:22> col:22 SWORD 'short'
| `-BuiltinType 0x5575d007b560 'short'
|-TypedefDecl 0x5575d02a0650 <line:6:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x5575d007b5e0 'unsigned char'
|-EnumDecl 0x5575d02a06a8 <line:25:9, line:29:1> line:25:9
| |-EnumConstantDecl 0x5575d02a07b0 <line:26:2, col:6> col:2 referenced R 'int'
| | `-ConstantExpr 0x5575d02a0798 <col:6> 'int'
| |   `-IntegerLiteral 0x5575d02a0778 <col:6> 'int' 2
| |-EnumConstantDecl 0x5575d02a0838 <line:27:2, col:6> col:2 referenced G 'int'
| | `-ConstantExpr 0x5575d02a0820 <col:6> 'int'
| |   `-IntegerLiteral 0x5575d02a0800 <col:6> 'int' 3
| `-EnumConstantDecl 0x5575d02a08c0 <line:28:2, col:6> col:2 referenced B 'int'
|   `-ConstantExpr 0x5575d02a08a8 <col:6> 'int'
|     `-IntegerLiteral 0x5575d02a0888 <col:6> 'int' 4
|-TypedefDecl 0x5575d02a0970 <line:25:1, line:29:3> col:3 referenced LED 'enum LED':'LED'
| `-ElaboratedType 0x5575d02a0910 'enum LED' sugar
|   `-EnumType 0x5575d02a0750 'LED'
|     `-Enum 0x5575d02a06a8 ''
|-FunctionDecl 0x5575d02a0bb0 <line:31:1, col:56> col:6 used enable_pin_outputs 'void (uint8_t *, uint8_t)'
| |-ParmVarDecl 0x5575d02a0a20 <col:25, col:34> col:34 pins 'uint8_t *'
| `-ParmVarDecl 0x5575d02a0a98 <col:40, col:48> col:48 num_pins 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d02a0d80 <line:33:1, col:35> col:6 enable_pin_output 'void (uint8_t)'
| `-ParmVarDecl 0x5575d02a0c70 <col:24, col:32> col:32 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d02a0ec0 <line:35:1, col:24> col:6 used read_in_table 'void (void)'
|-FunctionDecl 0x5575d02a0ff8 <line:37:1, col:26> col:6 used write_out_table 'void (void)'
|-FunctionDecl 0x5575d02a1168 <line:41:1, col:25> col:6 set_pin 'void (uint8_t)'
| |-ParmVarDecl 0x5575d02a10d8 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
| `-FullComment 0x5575d0317ef0 <line:39:4, col:42>
|   `-ParagraphComment 0x5575d0317ec0 <col:4, col:42>
|     `-TextComment 0x5575d0317e90 <col:4, col:42> Text="************** For User ***************"
|-FunctionDecl 0x5575d02a12b0 <line:43:1, col:25> col:6 clr_pin 'void (uint8_t)'
| `-ParmVarDecl 0x5575d02a1220 <col:14, col:22> col:22 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d02a7570 <line:45:1, col:37> col:6 write_pin 'void (uint8_t, BOOL)'
| |-ParmVarDecl 0x5575d02a73b0 <col:16, col:24> col:24 pin 'uint8_t':'unsigned char'
| `-ParmVarDecl 0x5575d02a7458 <col:29, col:34> col:34 val 'BOOL':'unsigned char'
|-FunctionDecl 0x5575d02a7700 <line:47:1, col:26> col:6 read_pin 'BOOL (uint8_t)'
| `-ParmVarDecl 0x5575d02a7630 <col:15, col:23> col:23 pin 'uint8_t':'unsigned char'
|-FunctionDecl 0x5575d02a78f0 <line:49:1, col:22> col:6 LED_on 'void (LED)'
| `-ParmVarDecl 0x5575d02a77e8 <col:13, col:17> col:17 color 'LED':'LED'
|-FunctionDecl 0x5575d02a7a38 <line:51:1, col:23> col:6 used LED_off 'void (LED)'
| `-ParmVarDecl 0x5575d02a79a8 <col:14, col:18> col:18 color 'LED':'LED'
|-FunctionDecl 0x5575d02a7c00 <line:53:1, col:24> col:6 used read_LED 'BOOL (LED)'
| `-ParmVarDecl 0x5575d02a7af0 <col:15, col:19> col:19 color 'LED':'LED'
|-FunctionDecl 0x5575d02a7e50 <line:55:1, col:33> col:6 used write_LED 'void (LED, BOOL)'
| |-ParmVarDecl 0x5575d02a7cb8 <col:16, col:20> col:20 color 'LED':'LED'
| `-ParmVarDecl 0x5575d02a7d30 <col:27, col:32> col:32 v 'BOOL':'unsigned char'
|-FunctionDecl 0x5575d02a7fa0 <line:57:1, col:29> col:6 used read_button 'BOOL (uint8_t)'
| `-ParmVarDecl 0x5575d02a7f10 <col:18, col:26> col:26 pin 'uint8_t':'unsigned char'
|-VarDecl 0x5575d02a80d0 </vagrant/apps/plc_led_blink/./include/ladder.h:13:1, col:33> col:16 used output_pins 'uint8_t [0]' static cinit
| `-InitListExpr 0x5575d02a8178 <col:32, col:33> 'uint8_t [0]'
|-FunctionDecl 0x5575d02a8300 <line:18:1, col:19> col:6 used PlcCycle 'void (void)'
| `-FullComment 0x5575d0317fc0 <line:15:4, col:57>
|   `-ParagraphComment 0x5575d0317f90 <col:4, col:57>
|     `-TextComment 0x5575d0317f60 <col:4, col:57> Text="************ DO NOT EDIT THESE FUNCTIONS *************"
|-FunctionDecl 0x5575d02a8458 <line:21:1, col:36> col:6 plc_callback 'void (struct k_timer *)'
| `-ParmVarDecl 0x5575d02a83c8 <col:19, col:35> col:35 t 'struct k_timer *'
|-FunctionDecl 0x5575d02a8598 <line:24:1, col:19> col:6 init_plc 'void (void)'
|-FunctionDecl 0x5575d02a8790 <line:31:1, col:27> col:6 Read_U_b_Xbutton 'BOOL (void)'
| `-FullComment 0x5575d0318090 <line:29:4, col:57>
|   `-ParagraphComment 0x5575d0318060 <col:4, col:57>
|     `-TextComment 0x5575d0318030 <col:4, col:57> Text="*********** FUNCTIONS CREATED BY LDMICRO *************"
|-FunctionDecl 0x5575d02a88c8 <line:33:1, col:24> col:6 Read_U_b_Yled 'BOOL (void)'
|-FunctionDecl 0x5575d02a8a40 <line:35:1, col:27> col:6 Write_U_b_Yled 'void (BOOL)'
| `-ParmVarDecl 0x5575d02a8978 <col:21, col:26> col:26 v 'BOOL':'unsigned char'
|-FunctionDecl 0x5575d02a8b80 <line:37:1, col:23> col:6 Read_U_b_Ytx 'BOOL (void)'
|-FunctionDecl 0x5575d02a8cc0 <line:39:1, col:26> col:6 Write_U_b_Ytx 'void (BOOL)'
| `-ParmVarDecl 0x5575d02a8c30 <col:20, col:25> col:25 v 'BOOL':'unsigned char'
|-VarDecl 0x5575d02a8df0 <./src/ladder.c:7:1, col:73> col:16 used LED_pins 'uint8_t [3]' static cinit
| |-InitListExpr 0x5575d02a8f88 <col:65, col:73> 'uint8_t [3]'
| | |-ImplicitCastExpr 0x5575d02a8fc8 <col:66> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x5575d02a8ec0 <col:66> 'int' 2
| | |-ImplicitCastExpr 0x5575d02a8fe8 <col:69> 'uint8_t':'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x5575d02a8ee0 <col:69> 'int' 3
| | `-ImplicitCastExpr 0x5575d02a9010 <col:72> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x5575d02a8f00 <col:72> 'int' 4
| `-SectionAttr 0x5575d02a8e58 <col:42, col:59> section ".rodata"
|-FunctionDecl 0x5575d02a9188 prev 0x5575d02a8458 <line:14:1, line:25:1> line:14:6 plc_callback 'void (struct k_timer *)'
| |-ParmVarDecl 0x5575d02a90f8 <col:19, col:35> col:35 t 'struct k_timer *'
| `-CompoundStmt 0x5575d02a9338 <col:38, line:25:1>
|   |-CallExpr 0x5575d02a9268 <line:19:2, col:16> 'void'
|   | `-ImplicitCastExpr 0x5575d02a9250 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5575d02a9230 <col:2> 'void (void)' Function 0x5575d02a0ec0 'read_in_table' 'void (void)'
|   |-CallExpr 0x5575d02a92c0 <line:21:2, col:11> 'void'
|   | `-ImplicitCastExpr 0x5575d02a92a8 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5575d02a9288 <col:2> 'void (void)' Function 0x5575d02a8300 'PlcCycle' 'void (void)'
|   `-CallExpr 0x5575d02a9318 <line:23:2, col:18> 'void'
|     `-ImplicitCastExpr 0x5575d02a9300 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x5575d02a92e0 <col:2> 'void (void)' Function 0x5575d02a0ff8 'write_out_table' 'void (void)'
|-FunctionDecl 0x5575d02a9448 prev 0x5575d02a8598 <line:27:1, line:40:1> line:27:6 init_plc 'void (void)'
| `-CompoundStmt 0x5575d02a9b48 <col:21, line:40:1>
|   |-CallExpr 0x5575d02a95c8 <line:28:2, col:42> 'void'
|   | |-ImplicitCastExpr 0x5575d02a95b0 <col:2> 'void (*)(uint8_t *, uint8_t)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5575d02a94e8 <col:2> 'void (uint8_t *, uint8_t)' Function 0x5575d02a0bb0 'enable_pin_outputs' 'void (uint8_t *, uint8_t)'
|   | |-ImplicitCastExpr 0x5575d02a95f8 <col:21> 'uint8_t *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x5575d02a9508 <col:21> 'uint8_t [0]' lvalue Var 0x5575d02a80d0 'output_pins' 'uint8_t [0]'
|   | `-ImplicitCastExpr 0x5575d02a9610 </vagrant/apps/plc_led_blink/./include/ladder.h:12:18> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x5575d02a9528 <col:18> 'int' 0
|   |-IfStmt 0x5575d02a9978 <./src/ladder.c:31:2, line:36:2>
|   | |-IntegerLiteral 0x5575d02a9628 </vagrant/apps/plc_led_blink/./include/ladder.h:10:17> 'int' 1
|   | `-CompoundStmt 0x5575d02a9948 <./src/ladder.c:31:15, line:36:2>
|   |   |-CallExpr 0x5575d02a96c0 <line:32:3, col:44> 'void'
|   |   | |-ImplicitCastExpr 0x5575d02a96a8 <col:3> 'void (*)(uint8_t *, uint8_t)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5575d02a9648 <col:3> 'void (uint8_t *, uint8_t)' Function 0x5575d02a0bb0 'enable_pin_outputs' 'void (uint8_t *, uint8_t)'
|   |   | |-ImplicitCastExpr 0x5575d02a96f0 <col:22> 'uint8_t *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x5575d02a9668 <col:22> 'uint8_t [3]' lvalue Var 0x5575d02a8df0 'LED_pins' 'uint8_t [3]'
|   |   | `-ImplicitCastExpr 0x5575d02a9708 <line:6:22> 'uint8_t':'unsigned char' <IntegralCast>
|   |   |   `-IntegerLiteral 0x5575d02a9688 <col:22> 'int' 3
|   |   |-CallExpr 0x5575d02a97d8 <line:33:3, col:12> 'void'
|   |   | |-ImplicitCastExpr 0x5575d02a97c0 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5575d02a9720 <col:3> 'void (LED)' Function 0x5575d02a7a38 'LED_off' 'void (LED)'
|   |   | `-ImplicitCastExpr 0x5575d02a9800 <col:11> 'LED':'LED' <IntegralCast>
|   |   |   `-DeclRefExpr 0x5575d02a9740 <col:11> 'int' EnumConstant 0x5575d02a07b0 'R' 'int'
|   |   |-CallExpr 0x5575d02a9870 <line:34:3, col:12> 'void'
|   |   | |-ImplicitCastExpr 0x5575d02a9858 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5575d02a9818 <col:3> 'void (LED)' Function 0x5575d02a7a38 'LED_off' 'void (LED)'
|   |   | `-ImplicitCastExpr 0x5575d02a9898 <col:11> 'LED':'LED' <IntegralCast>
|   |   |   `-DeclRefExpr 0x5575d02a9838 <col:11> 'int' EnumConstant 0x5575d02a0838 'G' 'int'
|   |   `-CallExpr 0x5575d02a9908 <line:35:3, col:12> 'void'
|   |     |-ImplicitCastExpr 0x5575d02a98f0 <col:3> 'void (*)(LED)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575d02a98b0 <col:3> 'void (LED)' Function 0x5575d02a7a38 'LED_off' 'void (LED)'
|   |     `-ImplicitCastExpr 0x5575d02a9930 <col:11> 'LED':'LED' <IntegralCast>
|   |       `-DeclRefExpr 0x5575d02a98d0 <col:11> 'int' EnumConstant 0x5575d02a08c0 'B' 'int'
|   |-CallExpr 0x5575d02a99c8 <line:38:2, col:18> 'void'
|   | `-ImplicitCastExpr 0x5575d02a99b0 <col:2> 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5575d02a9990 <col:2> 'void (void)' Function 0x5575d02a0ff8 'write_out_table' 'void (void)'
|   `-CallExpr 0x5575d02a9ac8 <line:39:2, col:28> 'void'
|     |-ImplicitCastExpr 0x5575d02a9ab0 <col:2> 'void (*)(const char *, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d02a99e8 <col:2> 'void (const char *, ...)' Function 0x5575d01da328 'printk' 'void (const char *, ...)'
|     `-ImplicitCastExpr 0x5575d02a9b08 <col:9> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x5575d02a9af0 <col:9> 'char *' <ArrayToPointerDecay>
|         `-StringLiteral 0x5575d02a9a50 <col:9> 'char [17]' lvalue "plc initialized\n"
|-FunctionDecl 0x5575d02a9c10 prev 0x5575d02a8790 <line:44:1, line:49:1> line:44:6 Read_U_b_Xbutton 'BOOL (void)'
| |-CompoundStmt 0x5575d02a9fd8 <col:29, line:49:1>
| | |-DeclStmt 0x5575d02a9e60 <line:45:2, col:39>
| | | `-VarDecl 0x5575d02a9cc0 <col:2, col:38> col:7 used state 'BOOL':'unsigned char' cinit
| | |   `-CStyleCastExpr 0x5575d02a9e38 <col:15, col:38> 'BOOL':'unsigned char' <NoOp>
| | |     `-CallExpr 0x5575d02a9de8 <col:22, col:38> 'BOOL':'unsigned char'
| | |       |-ImplicitCastExpr 0x5575d02a9dd0 <col:22> 'BOOL (*)(uint8_t)' <FunctionToPointerDecay>
| | |       | `-DeclRefExpr 0x5575d02a9d28 <col:22> 'BOOL (uint8_t)' Function 0x5575d02a7fa0 'read_button' 'BOOL (uint8_t)'
| | |       `-ImplicitCastExpr 0x5575d02a9e10 </vagrant/apps/plc_led_blink/./include/plc_platform.h:15:14> 'uint8_t':'unsigned char' <IntegralCast>
| | |         `-IntegerLiteral 0x5575d02a9d48 <col:14> 'int' 7
| | |-BinaryOperator 0x5575d02a9f70 <./src/ladder.c:46:2, col:22> 'BOOL':'unsigned char' '='
| | | |-DeclRefExpr 0x5575d02a9e78 <col:2> 'BOOL':'unsigned char' lvalue Var 0x5575d02a9cc0 'state' 'BOOL':'unsigned char'
| | | `-ImplicitCastExpr 0x5575d02a9f58 <col:10, col:22> 'BOOL':'unsigned char' <IntegralCast>
| | |   `-ConditionalOperator 0x5575d02a9f28 <col:10, col:22> 'int'
| | |     |-ImplicitCastExpr 0x5575d02a9f10 <col:10> 'int' <IntegralCast>
| | |     | `-ImplicitCastExpr 0x5575d02a9ef8 <col:10> 'BOOL':'unsigned char' <LValueToRValue>
| | |     |   `-DeclRefExpr 0x5575d02a9e98 <col:10> 'BOOL':'unsigned char' lvalue Var 0x5575d02a9cc0 'state' 'BOOL':'unsigned char'
| | |     |-IntegerLiteral 0x5575d02a9eb8 <col:18> 'int' 0
| | |     `-IntegerLiteral 0x5575d02a9ed8 <col:22> 'int' 1
| | `-ReturnStmt 0x5575d02a9fc8 <line:48:2, col:9>
| |   `-ImplicitCastExpr 0x5575d02a9fb0 <col:9> 'BOOL':'unsigned char' <LValueToRValue>
| |     `-DeclRefExpr 0x5575d02a9f90 <col:9> 'BOOL':'unsigned char' lvalue Var 0x5575d02a9cc0 'state' 'BOOL':'unsigned char'
| `-FullComment 0x5575d0318160 <line:42:4, col:71>
|   `-ParagraphComment 0x5575d0318130 <col:4, col:71>
|     `-TextComment 0x5575d0318100 <col:4, col:71> Text="************** Define Auto-Generated Functions Below ***************"
|-FunctionDecl 0x5575d02aa098 prev 0x5575d02a88c8 <line:51:1, line:53:1> line:51:6 Read_U_b_Yled 'BOOL (void)'
| `-CompoundStmt 0x5575d02aa280 <col:26, line:53:1>
|   `-ReturnStmt 0x5575d02aa270 <line:52:2, col:26>
|     `-CStyleCastExpr 0x5575d02aa248 <col:9, col:26> 'BOOL':'unsigned char' <NoOp>
|       `-CallExpr 0x5575d02aa1f8 <col:16, col:26> 'BOOL':'unsigned char'
|         |-ImplicitCastExpr 0x5575d02aa1e0 <col:16> 'BOOL (*)(LED)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575d02aa138 <col:16> 'BOOL (LED)' Function 0x5575d02a7c00 'read_LED' 'BOOL (LED)'
|         `-ImplicitCastExpr 0x5575d02aa220 <col:25> 'LED':'LED' <IntegralCast>
|           `-DeclRefExpr 0x5575d02aa158 <col:25> 'int' EnumConstant 0x5575d02a07b0 'R' 'int'
|-FunctionDecl 0x5575d02aa338 prev 0x5575d02a8a40 <line:55:1, line:57:1> line:55:6 Write_U_b_Yled 'void (BOOL)'
| |-ParmVarDecl 0x5575d02aa2a8 <col:21, col:26> col:26 used v 'BOOL':'unsigned char'
| `-CompoundStmt 0x5575d02aa518 <col:29, line:57:1>
|   `-CallExpr 0x5575d02aa4b8 <line:56:2, col:16> 'void'
|     |-ImplicitCastExpr 0x5575d02aa4a0 <col:2> 'void (*)(LED, BOOL)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575d02aa3e0 <col:2> 'void (LED, BOOL)' Function 0x5575d02a7e50 'write_LED' 'void (LED, BOOL)'
|     |-ImplicitCastExpr 0x5575d02aa4e8 <col:12> 'LED':'LED' <IntegralCast>
|     | `-DeclRefExpr 0x5575d02aa400 <col:12> 'int' EnumConstant 0x5575d02a07b0 'R' 'int'
|     `-ImplicitCastExpr 0x5575d02aa500 <col:15> 'BOOL':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5575d02aa420 <col:15> 'BOOL':'unsigned char' lvalue ParmVar 0x5575d02aa2a8 'v' 'BOOL':'unsigned char'
|-FunctionDecl 0x5575d02aa5c8 prev 0x5575d02a8b80 <line:59:1, line:61:1> line:59:6 Read_U_b_Ytx 'BOOL (void)'
| `-CompoundStmt 0x5575d02aa748 <col:25, line:61:1>
|   `-ReturnStmt 0x5575d02aa738 <line:60:2, col:26>
|     `-CStyleCastExpr 0x5575d02aa710 <col:9, col:26> 'BOOL':'unsigned char' <NoOp>
|       `-CallExpr 0x5575d02aa6c0 <col:16, col:26> 'BOOL':'unsigned char'
|         |-ImplicitCastExpr 0x5575d02aa6a8 <col:16> 'BOOL (*)(LED)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575d02aa668 <col:16> 'BOOL (LED)' Function 0x5575d02a7c00 'read_LED' 'BOOL (LED)'
|         `-ImplicitCastExpr 0x5575d02aa6e8 <col:25> 'LED':'LED' <IntegralCast>
|           `-DeclRefExpr 0x5575d02aa688 <col:25> 'int' EnumConstant 0x5575d02a0838 'G' 'int'
`-FunctionDecl 0x5575d02aa800 prev 0x5575d02a8cc0 <line:63:1, line:65:1> line:63:6 Write_U_b_Ytx 'void (BOOL)'
  |-ParmVarDecl 0x5575d02aa770 <col:20, col:25> col:25 used v 'BOOL':'unsigned char'
  `-CompoundStmt 0x5575d02aa980 <col:28, line:65:1>
    `-CallExpr 0x5575d02aa920 <line:64:2, col:16> 'void'
      |-ImplicitCastExpr 0x5575d02aa908 <col:2> 'void (*)(LED, BOOL)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5575d02aa8a8 <col:2> 'void (LED, BOOL)' Function 0x5575d02a7e50 'write_LED' 'void (LED, BOOL)'
      |-ImplicitCastExpr 0x5575d02aa950 <col:12> 'LED':'LED' <IntegralCast>
      | `-DeclRefExpr 0x5575d02aa8c8 <col:12> 'int' EnumConstant 0x5575d02a0838 'G' 'int'
      `-ImplicitCastExpr 0x5575d02aa968 <col:15> 'BOOL':'unsigned char' <LValueToRValue>
        `-DeclRefExpr 0x5575d02aa8e8 <col:15> 'BOOL':'unsigned char' lvalue ParmVar 0x5575d02aa770 'v' 'BOOL':'unsigned char'
